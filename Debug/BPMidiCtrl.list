
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001de4  08013498  08013498  00023498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801527c  0801527c  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  0801527c  0801527c  0002527c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015284  08015284  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015284  08015284  00025284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015288  08015288  00025288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0801528c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031a4  20000334  080155c0  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200034d8  080155c0  000334d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e882  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062b3  00000000  00000000  0005ebe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce8  00000000  00000000  00064ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021002  00000000  00000000  00066b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028900  00000000  00000000  00087b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a6d38  00000000  00000000  000b048a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001571c2  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001af0  00000000  00000000  00157218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ad4  00000000  00000000  00158d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000334 	.word	0x20000334
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801347c 	.word	0x0801347c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000338 	.word	0x20000338
 80001dc:	0801347c 	.word	0x0801347c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9a4 	b.w	8000fec <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468c      	mov	ip, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8083 	bne.w	8000e3e <__udivmoddi4+0x116>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d947      	bls.n	8000dce <__udivmoddi4+0xa6>
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b142      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	f1c2 0020 	rsb	r0, r2, #32
 8000d48:	fa24 f000 	lsr.w	r0, r4, r0
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	4097      	lsls	r7, r2
 8000d50:	ea40 0c01 	orr.w	ip, r0, r1
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d60:	fa1f fe87 	uxth.w	lr, r7
 8000d64:	fb08 c116 	mls	r1, r8, r6, ip
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 8119 	bcs.w	8000fb0 <__udivmoddi4+0x288>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8116 	bls.w	8000fb0 <__udivmoddi4+0x288>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	f080 8105 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f240 8102 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	b902      	cbnz	r2, 8000dd2 <__udivmoddi4+0xaa>
 8000dd0:	deff      	udf	#255	; 0xff
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d150      	bne.n	8000e7c <__udivmoddi4+0x154>
 8000dda:	1bcb      	subs	r3, r1, r7
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	fa1f f887 	uxth.w	r8, r7
 8000de4:	2601      	movs	r6, #1
 8000de6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dea:	0c21      	lsrs	r1, r4, #16
 8000dec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb08 f30c 	mul.w	r3, r8, ip
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0xe2>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	f200 80e9 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1ac9      	subs	r1, r1, r3
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x10a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80d9 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e7bf      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x12e>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80b1 	beq.w	8000faa <__udivmoddi4+0x282>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x1cc>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0x140>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80b8 	bhi.w	8000fd8 <__udivmoddi4+0x2b0>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	468c      	mov	ip, r1
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0a8      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e7a:	e7a5      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f603 	lsr.w	r6, r0, r3
 8000e84:	4097      	lsls	r7, r2
 8000e86:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	4330      	orrs	r0, r6
 8000e92:	0c03      	lsrs	r3, r0, #16
 8000e94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea4:	fb06 f108 	mul.w	r1, r6, r8
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	fa04 f402 	lsl.w	r4, r4, r2
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x19c>
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb6:	f080 808d 	bcs.w	8000fd4 <__udivmoddi4+0x2ac>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 808a 	bls.w	8000fd4 <__udivmoddi4+0x2ac>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	443b      	add	r3, r7
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b281      	uxth	r1, r0
 8000ec8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ecc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed4:	fb00 f308 	mul.w	r3, r0, r8
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d907      	bls.n	8000eec <__udivmoddi4+0x1c4>
 8000edc:	1879      	adds	r1, r7, r1
 8000ede:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee2:	d273      	bcs.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d971      	bls.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4439      	add	r1, r7
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ef2:	e778      	b.n	8000de6 <__udivmoddi4+0xbe>
 8000ef4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef8:	fa03 f406 	lsl.w	r4, r3, r6
 8000efc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f00:	431c      	orrs	r4, r3
 8000f02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f12:	431f      	orrs	r7, r3
 8000f14:	0c3b      	lsrs	r3, r7, #16
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fa1f f884 	uxth.w	r8, r4
 8000f1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f26:	fb09 fa08 	mul.w	sl, r9, r8
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f30:	fa00 f306 	lsl.w	r3, r0, r6
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x220>
 8000f36:	1861      	adds	r1, r4, r1
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f3c:	d248      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f3e:	458a      	cmp	sl, r1
 8000f40:	d946      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f42:	f1a9 0902 	sub.w	r9, r9, #2
 8000f46:	4421      	add	r1, r4
 8000f48:	eba1 010a 	sub.w	r1, r1, sl
 8000f4c:	b2bf      	uxth	r7, r7
 8000f4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f5a:	fb00 f808 	mul.w	r8, r0, r8
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x24a>
 8000f62:	19e7      	adds	r7, r4, r7
 8000f64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f68:	d22e      	bcs.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d92c      	bls.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	4427      	add	r7, r4
 8000f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f76:	eba7 0708 	sub.w	r7, r7, r8
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	454f      	cmp	r7, r9
 8000f80:	46c6      	mov	lr, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	d31a      	bcc.n	8000fbc <__udivmoddi4+0x294>
 8000f86:	d017      	beq.n	8000fb8 <__udivmoddi4+0x290>
 8000f88:	b15d      	cbz	r5, 8000fa2 <__udivmoddi4+0x27a>
 8000f8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f96:	40f2      	lsrs	r2, r6
 8000f98:	ea4c 0202 	orr.w	r2, ip, r2
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e70b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6fd      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fb8:	4543      	cmp	r3, r8
 8000fba:	d2e5      	bcs.n	8000f88 <__udivmoddi4+0x260>
 8000fbc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7df      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e7d2      	b.n	8000f72 <__udivmoddi4+0x24a>
 8000fcc:	4660      	mov	r0, ip
 8000fce:	e78d      	b.n	8000eec <__udivmoddi4+0x1c4>
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	e7b9      	b.n	8000f48 <__udivmoddi4+0x220>
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	e775      	b.n	8000ec4 <__udivmoddi4+0x19c>
 8000fd8:	4630      	mov	r0, r6
 8000fda:	e74a      	b.n	8000e72 <__udivmoddi4+0x14a>
 8000fdc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe0:	4439      	add	r1, r7
 8000fe2:	e713      	b.n	8000e0c <__udivmoddi4+0xe4>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	443c      	add	r4, r7
 8000fe8:	e724      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <Knob_Map>:
void Knob_Free(Knob *k) {
    free(k->sub_labels);
}

// Maps values from (0, max_values-1) to (0, m)
uint8_t Knob_Map(Knob *k, uint8_t value, uint8_t m) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	78ba      	ldrb	r2, [r7, #2]
 8001004:	fb02 f203 	mul.w	r2, r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7f1b      	ldrb	r3, [r3, #28]
 800100c:	3b01      	subs	r3, #1
 800100e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ffc2 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80010be:	f001 ff07 	bl	8002ed0 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80010c2:	f000 f905 	bl	80012d0 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80010c6:	f000 fa4d 	bl	8001564 <MX_GPIO_Init>
    MX_ADC1_Init();
 80010ca:	f000 f983 	bl	80013d4 <MX_ADC1_Init>
    MX_I2C1_Init();
 80010ce:	f000 f9d5 	bl	800147c <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 80010d2:	f00d fba7 	bl	800e824 <MX_USB_DEVICE_Init>
    MX_SDIO_SD_Init();
 80010d6:	f000 fa25 	bl	8001524 <MX_SDIO_SD_Init>
    MX_RTC_Init();
 80010da:	f000 f9fd 	bl	80014d8 <MX_RTC_Init>
    MX_FATFS_Init();
 80010de:	f008 fdeb 	bl	8009cb8 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    SystemCoreClockUpdate();
 80010e2:	f001 fe4b 	bl	8002d7c <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 40);
 80010e6:	4b72      	ldr	r3, [pc, #456]	; (80012b0 <main+0x1f8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a72      	ldr	r2, [pc, #456]	; (80012b4 <main+0x1fc>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	095b      	lsrs	r3, r3, #5
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffbe 	bl	8001074 <SysTick_Config>

    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	e006      	b.n	800110c <main+0x54>
        SD_LoadPreset(knobs, "knobs1.json");
 80010fe:	496e      	ldr	r1, [pc, #440]	; (80012b8 <main+0x200>)
 8001100:	486e      	ldr	r0, [pc, #440]	; (80012bc <main+0x204>)
 8001102:	f000 fe29 	bl	8001d58 <SD_LoadPreset>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	3301      	adds	r3, #1
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d9f5      	bls.n	80010fe <main+0x46>
    }

    //SD_LoadPreset(knobs, "knobs.json");

    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001112:	2300      	movs	r3, #0
 8001114:	71bb      	strb	r3, [r7, #6]
 8001116:	e010      	b.n	800113a <main+0x82>
        ssd1306_Init(&knobs[i]);
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	015b      	lsls	r3, r3, #5
 800111c:	4a67      	ldr	r2, [pc, #412]	; (80012bc <main+0x204>)
 800111e:	4413      	add	r3, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fe9f 	bl	8001e64 <ssd1306_Init>
        ssd1306_WriteKnob(&knobs[i]);
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	015b      	lsls	r3, r3, #5
 800112a:	4a64      	ldr	r2, [pc, #400]	; (80012bc <main+0x204>)
 800112c:	4413      	add	r3, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fff6 	bl	8002120 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	3301      	adds	r3, #1
 8001138:	71bb      	strb	r3, [r7, #6]
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	2b03      	cmp	r3, #3
 800113e:	d9eb      	bls.n	8001118 <main+0x60>
    }

    while (1) {
        ADC_Read_Knobs();
 8001140:	f000 fad2 	bl	80016e8 <ADC_Read_Knobs>

        if (isMenuActive) {
 8001144:	4b5e      	ldr	r3, [pc, #376]	; (80012c0 <main+0x208>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d055      	beq.n	80011f8 <main+0x140>
            SD_FetchPresets();
 800114c:	f000 fd48 	bl	8001be0 <SD_FetchPresets>

            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	717b      	strb	r3, [r7, #5]
 8001154:	e038      	b.n	80011c8 <main+0x110>
                ssd1306_Select(&knobs[i]);
 8001156:	797b      	ldrb	r3, [r7, #5]
 8001158:	015b      	lsls	r3, r3, #5
 800115a:	4a58      	ldr	r2, [pc, #352]	; (80012bc <main+0x204>)
 800115c:	4413      	add	r3, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fa7a 	bl	8002658 <ssd1306_Select>
                ssd1306_Fill(Black);
 8001164:	2000      	movs	r0, #0
 8001166:	f000 ff87 	bl	8002078 <ssd1306_Fill>
                uint8_t x = (SSD1306_WIDTH - strlen(presets[i]) * Font_10x18.FontWidth) / 2;
 800116a:	797a      	ldrb	r2, [r7, #5]
 800116c:	4613      	mov	r3, r2
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	4a54      	ldr	r2, [pc, #336]	; (80012c4 <main+0x20c>)
 8001174:	4413      	add	r3, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f83c 	bl	80001f4 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <main+0x210>)
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	fb02 f303 	mul.w	r3, r2, r3
 8001186:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800118a:	085b      	lsrs	r3, r3, #1
 800118c:	70bb      	strb	r3, [r7, #2]
                uint8_t y = SSD1306_HEIGHT / 2 -  Font_10x18.FontHeight / 2;
 800118e:	4b4e      	ldr	r3, [pc, #312]	; (80012c8 <main+0x210>)
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	085b      	lsrs	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f1c3 0320 	rsb	r3, r3, #32
 800119a:	707b      	strb	r3, [r7, #1]
                ssd1306_SetCursor(x,y);
 800119c:	787a      	ldrb	r2, [r7, #1]
 800119e:	78bb      	ldrb	r3, [r7, #2]
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fa16 	bl	80025d4 <ssd1306_SetCursor>
                ssd1306_WriteString(presets[i], Font_10x18, White);
 80011a8:	797a      	ldrb	r2, [r7, #5]
 80011aa:	4613      	mov	r3, r2
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <main+0x20c>)
 80011b2:	1898      	adds	r0, r3, r2
 80011b4:	4a44      	ldr	r2, [pc, #272]	; (80012c8 <main+0x210>)
 80011b6:	2301      	movs	r3, #1
 80011b8:	ca06      	ldmia	r2, {r1, r2}
 80011ba:	f001 f9e5 	bl	8002588 <ssd1306_WriteString>
                ssd1306_UpdateScreen();
 80011be:	f000 ff7f 	bl	80020c0 <ssd1306_UpdateScreen>
            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80011c2:	797b      	ldrb	r3, [r7, #5]
 80011c4:	3301      	adds	r3, #1
 80011c6:	717b      	strb	r3, [r7, #5]
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d9c3      	bls.n	8001156 <main+0x9e>
            }


            while (isMenuActive) {
 80011ce:	bf00      	nop
 80011d0:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <main+0x208>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1fb      	bne.n	80011d0 <main+0x118>

            }

            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	713b      	strb	r3, [r7, #4]
 80011dc:	e009      	b.n	80011f2 <main+0x13a>
                ssd1306_WriteKnob(&knobs[i]);
 80011de:	793b      	ldrb	r3, [r7, #4]
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	4a36      	ldr	r2, [pc, #216]	; (80012bc <main+0x204>)
 80011e4:	4413      	add	r3, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 ff9a 	bl	8002120 <ssd1306_WriteKnob>
            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80011ec:	793b      	ldrb	r3, [r7, #4]
 80011ee:	3301      	adds	r3, #1
 80011f0:	713b      	strb	r3, [r7, #4]
 80011f2:	793b      	ldrb	r3, [r7, #4]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d9f2      	bls.n	80011de <main+0x126>
            }
        }

        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	70fb      	strb	r3, [r7, #3]
 80011fc:	e053      	b.n	80012a6 <main+0x1ee>
            uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	015b      	lsls	r3, r3, #5
 8001202:	4a2e      	ldr	r2, [pc, #184]	; (80012bc <main+0x204>)
 8001204:	441a      	add	r2, r3
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	4930      	ldr	r1, [pc, #192]	; (80012cc <main+0x214>)
 800120a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4619      	mov	r1, r3
 8001212:	4610      	mov	r0, r2
 8001214:	f000 fb10 	bl	8001838 <MIDI_Scale_And_Filter>
 8001218:	4603      	mov	r3, r0
 800121a:	703b      	strb	r3, [r7, #0]

            if (curr_MIDI_val != knobs[i].value) {
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	4a27      	ldr	r2, [pc, #156]	; (80012bc <main+0x204>)
 8001220:	015b      	lsls	r3, r3, #5
 8001222:	4413      	add	r3, r2
 8001224:	331b      	adds	r3, #27
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	783a      	ldrb	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d038      	beq.n	80012a0 <main+0x1e8>
                knobs[i].value = curr_MIDI_val;
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	4a22      	ldr	r2, [pc, #136]	; (80012bc <main+0x204>)
 8001232:	015b      	lsls	r3, r3, #5
 8001234:	4413      	add	r3, r2
 8001236:	331b      	adds	r3, #27
 8001238:	783a      	ldrb	r2, [r7, #0]
 800123a:	701a      	strb	r2, [r3, #0]
                ssd1306_WriteKnob(&knobs[i]);
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	015b      	lsls	r3, r3, #5
 8001240:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <main+0x204>)
 8001242:	4413      	add	r3, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 ff6b 	bl	8002120 <ssd1306_WriteKnob>
                if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <main+0x204>)
 800124e:	015b      	lsls	r3, r3, #5
 8001250:	4413      	add	r3, r2
 8001252:	331b      	adds	r3, #27
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	4918      	ldr	r1, [pc, #96]	; (80012bc <main+0x204>)
 800125a:	015b      	lsls	r3, r3, #5
 800125c:	440b      	add	r3, r1
 800125e:	331a      	adds	r3, #26
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d106      	bne.n	8001274 <main+0x1bc>
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <main+0x204>)
 800126a:	015b      	lsls	r3, r3, #5
 800126c:	4413      	add	r3, r2
 800126e:	331e      	adds	r3, #30
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
                if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	4a11      	ldr	r2, [pc, #68]	; (80012bc <main+0x204>)
 8001278:	015b      	lsls	r3, r3, #5
 800127a:	4413      	add	r3, r2
 800127c:	331e      	adds	r3, #30
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10d      	bne.n	80012a0 <main+0x1e8>
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	015b      	lsls	r3, r3, #5
 8001288:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <main+0x204>)
 800128a:	441a      	add	r2, r3
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	490b      	ldr	r1, [pc, #44]	; (80012bc <main+0x204>)
 8001290:	015b      	lsls	r3, r3, #5
 8001292:	440b      	add	r3, r1
 8001294:	331b      	adds	r3, #27
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	4610      	mov	r0, r2
 800129c:	f000 fab1 	bl	8001802 <MIDI_Send>
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	3301      	adds	r3, #1
 80012a4:	70fb      	strb	r3, [r7, #3]
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d9a8      	bls.n	80011fe <main+0x146>
        ADC_Read_Knobs();
 80012ac:	e748      	b.n	8001140 <main+0x88>
 80012ae:	bf00      	nop
 80012b0:	20000048 	.word	0x20000048
 80012b4:	cccccccd 	.word	0xcccccccd
 80012b8:	08013498 	.word	0x08013498
 80012bc:	20002620 	.word	0x20002620
 80012c0:	2000261c 	.word	0x2000261c
 80012c4:	200026c0 	.word	0x200026c0
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000350 	.word	0x20000350

080012d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b09a      	sub	sp, #104	; 0x68
 80012d4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012da:	2230      	movs	r2, #48	; 0x30
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f00f f80a 	bl	80102f8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <SystemClock_Config+0xfc>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <SystemClock_Config+0xfc>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <SystemClock_Config+0xfc>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <SystemClock_Config+0x100>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <SystemClock_Config+0x100>)
 800132c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <SystemClock_Config+0x100>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800133e:	2309      	movs	r3, #9
 8001340:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001350:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001354:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLM = 25;
 8001356:	2319      	movs	r3, #25
 8001358:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLN = 192;
 800135a:	23c0      	movs	r3, #192	; 0xc0
 800135c:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135e:	2302      	movs	r3, #2
 8001360:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001362:	2304      	movs	r3, #4
 8001364:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001366:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fc78 	bl	8005c60 <HAL_RCC_OscConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xaa>
            {
        Error_Handler();
 8001376:	f000 fa3f 	bl	80017f8 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800137a:	230f      	movs	r3, #15
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137e:	2302      	movs	r3, #2
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	2103      	movs	r1, #3
 8001396:	4618      	mov	r0, r3
 8001398:	f004 feda 	bl	8006150 <HAL_RCC_ClockConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0xd6>
            {
        Error_Handler();
 80013a2:	f000 fa29 	bl	80017f8 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013a6:	2302      	movs	r3, #2
 80013a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 f887 	bl	80064c8 <HAL_RCCEx_PeriphCLKConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0xf4>
            {
        Error_Handler();
 80013c0:	f000 fa1a 	bl	80017f8 <Error_Handler>
    }
}
 80013c4:	bf00      	nop
 80013c6:	3768      	adds	r7, #104	; 0x68
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40007000 	.word	0x40007000

080013d4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <MX_ADC1_Init+0x9c>)
 80013e8:	4a22      	ldr	r2, [pc, #136]	; (8001474 <MX_ADC1_Init+0xa0>)
 80013ea:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <MX_ADC1_Init+0x9c>)
 80013ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013f2:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <MX_ADC1_Init+0x9c>)
 80013f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013fa:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_ADC1_Init+0x9c>)
 80013fe:	2201      	movs	r2, #1
 8001400:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_ADC1_Init+0x9c>)
 8001404:	2201      	movs	r2, #1
 8001406:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_ADC1_Init+0x9c>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <MX_ADC1_Init+0x9c>)
 8001412:	2200      	movs	r2, #0
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <MX_ADC1_Init+0x9c>)
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <MX_ADC1_Init+0xa4>)
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_ADC1_Init+0x9c>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_ADC1_Init+0x9c>)
 8001424:	2201      	movs	r2, #1
 8001426:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_ADC1_Init+0x9c>)
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_ADC1_Init+0x9c>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001436:	480e      	ldr	r0, [pc, #56]	; (8001470 <MX_ADC1_Init+0x9c>)
 8001438:	f001 fde0 	bl	8002ffc <HAL_ADC_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0x72>
            {
        Error_Handler();
 8001442:	f000 f9d9 	bl	80017f8 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800144a:	2301      	movs	r3, #1
 800144c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_ADC1_Init+0x9c>)
 8001458:	f001 ff94 	bl	8003384 <HAL_ADC_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_ADC1_Init+0x92>
            {
        Error_Handler();
 8001462:	f000 f9c9 	bl	80017f8 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200025d4 	.word	0x200025d4
 8001474:	40012000 	.word	0x40012000
 8001478:	0f000001 	.word	0x0f000001

0800147c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_I2C1_Init+0x50>)
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <MX_I2C1_Init+0x54>)
 8001484:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 800000;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_I2C1_Init+0x50>)
 8001488:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <MX_I2C1_Init+0x58>)
 800148a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_I2C1_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_I2C1_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_I2C1_Init+0x50>)
 800149a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <MX_I2C1_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_I2C1_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_I2C1_Init+0x50>)
 80014ba:	f002 fc73 	bl	8003da4 <HAL_I2C_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_I2C1_Init+0x4c>
            {
        Error_Handler();
 80014c4:	f000 f998 	bl	80017f8 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20002580 	.word	0x20002580
 80014d0:	40005400 	.word	0x40005400
 80014d4:	000c3500 	.word	0x000c3500

080014d8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_RTC_Init+0x44>)
 80014de:	4a10      	ldr	r2, [pc, #64]	; (8001520 <MX_RTC_Init+0x48>)
 80014e0:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_RTC_Init+0x44>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_RTC_Init+0x44>)
 80014ea:	227f      	movs	r2, #127	; 0x7f
 80014ec:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_RTC_Init+0x44>)
 80014f0:	22ff      	movs	r2, #255	; 0xff
 80014f2:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_RTC_Init+0x44>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_RTC_Init+0x44>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_RTC_Init+0x44>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_RTC_Init+0x44>)
 8001508:	f005 f8ce 	bl	80066a8 <HAL_RTC_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_RTC_Init+0x3e>
            {
        Error_Handler();
 8001512:	f000 f971 	bl	80017f8 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200026a0 	.word	0x200026a0
 8001520:	40002800 	.word	0x40002800

08001524 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_SDIO_SD_Init+0x38>)
 800152a:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <MX_SDIO_SD_Init+0x3c>)
 800152c:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_SDIO_SD_Init+0x38>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_SDIO_SD_Init+0x38>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_SDIO_SD_Init+0x38>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_SDIO_SD_Init+0x38>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <MX_SDIO_SD_Init+0x38>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 12;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <MX_SDIO_SD_Init+0x38>)
 800154e:	220c      	movs	r2, #12
 8001550:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	200026fc 	.word	0x200026fc
 8001560:	40012c00 	.word	0x40012c00

08001564 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b3b      	ldr	r3, [pc, #236]	; (800166c <MX_GPIO_Init+0x108>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a3a      	ldr	r2, [pc, #232]	; (800166c <MX_GPIO_Init+0x108>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <MX_GPIO_Init+0x108>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b34      	ldr	r3, [pc, #208]	; (800166c <MX_GPIO_Init+0x108>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a33      	ldr	r2, [pc, #204]	; (800166c <MX_GPIO_Init+0x108>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <MX_GPIO_Init+0x108>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <MX_GPIO_Init+0x108>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a2c      	ldr	r2, [pc, #176]	; (800166c <MX_GPIO_Init+0x108>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <MX_GPIO_Init+0x108>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <MX_GPIO_Init+0x108>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a25      	ldr	r2, [pc, #148]	; (800166c <MX_GPIO_Init+0x108>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <MX_GPIO_Init+0x108>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 80015ea:	2200      	movs	r2, #0
 80015ec:	f247 710f 	movw	r1, #30479	; 0x770f
 80015f0:	481f      	ldr	r0, [pc, #124]	; (8001670 <MX_GPIO_Init+0x10c>)
 80015f2:	f002 fba3 	bl	8003d3c <HAL_GPIO_WritePin>
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : Detect_SDIO_Pin */
    GPIO_InitStruct.Pin = Detect_SDIO_Pin;
 80015f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001600:	2302      	movs	r3, #2
 8001602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Detect_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	481a      	ldr	r0, [pc, #104]	; (8001674 <MX_GPIO_Init+0x110>)
 800160c:	f002 f9fa 	bl	8003a04 <HAL_GPIO_Init>

    /*Configure GPIO pin : Button_6_Pin */
    GPIO_InitStruct.Pin = Button_6_Pin;
 8001610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161a:	2301      	movs	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Button_6_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4813      	ldr	r0, [pc, #76]	; (8001674 <MX_GPIO_Init+0x110>)
 8001626:	f002 f9ed 	bl	8003a04 <HAL_GPIO_Init>

    /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
     Button_5_Pin */
    GPIO_InitStruct.Pin = Button_1_Pin | Button_2_Pin | Button_3_Pin | Button_4_Pin
 800162a:	f248 43b0 	movw	r3, #33968	; 0x84b0
 800162e:	617b      	str	r3, [r7, #20]
            | Button_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001634:	2301      	movs	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <MX_GPIO_Init+0x114>)
 8001640:	f002 f9e0 	bl	8003a04 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
     LED_5_Pin LED_6_Pin AMUX_S1_Pin AMUX_S0_Pin
     AMUX_S2_Pin AMUX_S3_Pin */
    GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001644:	f247 730f 	movw	r3, #30479	; 0x770f
 8001648:	617b      	str	r3, [r7, #20]
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_GPIO_Init+0x10c>)
 800165e:	f002 f9d1 	bl	8003a04 <HAL_GPIO_Init>

}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40020400 	.word	0x40020400
 8001674:	40020800 	.word	0x40020800
 8001678:	40020000 	.word	0x40020000

0800167c <ADC_Mux_Select>:

/* USER CODE BEGIN 4 */
void ADC_Mux_Select(uint8_t c) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
    if (c > NUM_ADC_CHANNELS) return;
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d824      	bhi.n	80016d6 <ADC_Mux_Select+0x5a>

    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e01d      	b.n	80016ce <ADC_Mux_Select+0x52>
        if (c & (1 << i)) {
 8001692:	79fa      	ldrb	r2, [r7, #7]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	fa42 f303 	asr.w	r3, r2, r3
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <ADC_Mux_Select+0x3a>
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_SET);
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <ADC_Mux_Select+0x64>)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016aa:	2201      	movs	r2, #1
 80016ac:	4619      	mov	r1, r3
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <ADC_Mux_Select+0x68>)
 80016b0:	f002 fb44 	bl	8003d3c <HAL_GPIO_WritePin>
 80016b4:	e008      	b.n	80016c8 <ADC_Mux_Select+0x4c>
        } else {
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_RESET);
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <ADC_Mux_Select+0x64>)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4808      	ldr	r0, [pc, #32]	; (80016e4 <ADC_Mux_Select+0x68>)
 80016c4:	f002 fb3a 	bl	8003d3c <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3301      	adds	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	ddde      	ble.n	8001692 <ADC_Mux_Select+0x16>
 80016d4:	e000      	b.n	80016d8 <ADC_Mux_Select+0x5c>
    if (c > NUM_ADC_CHANNELS) return;
 80016d6:	bf00      	nop
        }
    }
}
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	080149d0 	.word	0x080149d0
 80016e4:	40020400 	.word	0x40020400

080016e8 <ADC_Read_Knobs>:

void ADC_Read_Knobs() {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b096      	sub	sp, #88	; 0x58
 80016ec:	af00      	add	r7, sp, #0
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80016f4:	e070      	b.n	80017d8 <ADC_Read_Knobs+0xf0>
        uint16_t adcBuf[NUM_ADC_SAMPLES];

        ADC_Mux_Select(channel);
 80016f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ffbe 	bl	800167c <ADC_Mux_Select>

        // Select channel
        ADC_ChannelConfTypeDef sConfig = { 0 };
 8001700:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
        sConfig.Channel = adcChannels[channel];
 800170e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001712:	4a36      	ldr	r2, [pc, #216]	; (80017ec <ADC_Read_Knobs+0x104>)
 8001714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001718:	643b      	str	r3, [r7, #64]	; 0x40
        sConfig.Rank = 1;
 800171a:	2301      	movs	r3, #1
 800171c:	647b      	str	r3, [r7, #68]	; 0x44
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800171e:	2300      	movs	r3, #0
 8001720:	64bb      	str	r3, [r7, #72]	; 0x48
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001726:	4619      	mov	r1, r3
 8001728:	4831      	ldr	r0, [pc, #196]	; (80017f0 <ADC_Read_Knobs+0x108>)
 800172a:	f001 fe2b 	bl	8003384 <HAL_ADC_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <ADC_Read_Knobs+0x50>
            Error_Handler();
 8001734:	f000 f860 	bl	80017f8 <Error_Handler>
        }

        // Sample the channel NUM_ADC_SAMPLES times to the buffer
        HAL_ADC_Start(&hadc1);
 8001738:	482d      	ldr	r0, [pc, #180]	; (80017f0 <ADC_Read_Knobs+0x108>)
 800173a:	f001 fca3 	bl	8003084 <HAL_ADC_Start>
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 800173e:	2300      	movs	r3, #0
 8001740:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8001744:	e016      	b.n	8001774 <ADC_Read_Knobs+0x8c>
            HAL_ADC_PollForConversion(&hadc1, 1000);
 8001746:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800174a:	4829      	ldr	r0, [pc, #164]	; (80017f0 <ADC_Read_Knobs+0x108>)
 800174c:	f001 fd81 	bl	8003252 <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 8001750:	4827      	ldr	r0, [pc, #156]	; (80017f0 <ADC_Read_Knobs+0x108>)
 8001752:	f001 fe09 	bl	8003368 <HAL_ADC_GetValue>
 8001756:	4602      	mov	r2, r0
 8001758:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800175c:	b292      	uxth	r2, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001764:	440b      	add	r3, r1
 8001766:	f823 2c58 	strh.w	r2, [r3, #-88]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 800176a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800176e:	3301      	adds	r3, #1
 8001770:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8001774:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001778:	2b1f      	cmp	r3, #31
 800177a:	d9e4      	bls.n	8001746 <ADC_Read_Knobs+0x5e>
        }
        HAL_ADC_Stop(&hadc1);
 800177c:	481c      	ldr	r0, [pc, #112]	; (80017f0 <ADC_Read_Knobs+0x108>)
 800177e:	f001 fd35 	bl	80031ec <HAL_ADC_Stop>

        // Calculate average of all samples for the channel
        uint16_t adc_sum = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800178e:	e011      	b.n	80017b4 <ADC_Read_Knobs+0xcc>
            adc_sum += adcBuf[i];
 8001790:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800179a:	4413      	add	r3, r2
 800179c:	f833 2c58 	ldrh.w	r2, [r3, #-88]
 80017a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80017a4:	4413      	add	r3, r2
 80017a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80017aa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80017ae:	3301      	adds	r3, #1
 80017b0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80017b4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80017b8:	2b1f      	cmp	r3, #31
 80017ba:	d9e9      	bls.n	8001790 <ADC_Read_Knobs+0xa8>
        }

        adcAveraged[channel] = adc_sum / NUM_ADC_SAMPLES;
 80017bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017c0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80017c4:	0952      	lsrs	r2, r2, #5
 80017c6:	b291      	uxth	r1, r2
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <ADC_Read_Knobs+0x10c>)
 80017ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 80017ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017d2:	3301      	adds	r3, #1
 80017d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80017d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d98a      	bls.n	80016f6 <ADC_Read_Knobs+0xe>
    }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3758      	adds	r7, #88	; 0x58
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000010 	.word	0x20000010
 80017f0:	200025d4 	.word	0x200025d4
 80017f4:	20000350 	.word	0x20000350

080017f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    __disable_irq();
    while (1) {
 8001800:	e7fe      	b.n	8001800 <Error_Handler+0x8>

08001802 <MIDI_Send>:

#include "midi.h"
#include "usb_device.h"

// Sends a CC message for knob k with the specified value
void MIDI_Send(Knob *k, uint8_t value) {
 8001802:	b5b0      	push	{r4, r5, r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, Knob_Map(k, value, k->max_range));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7e1c      	ldrb	r4, [r3, #24]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7e5d      	ldrb	r5, [r3, #25]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7f5a      	ldrb	r2, [r3, #29]
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	4619      	mov	r1, r3
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fbe6 	bl	8000ff0 <Knob_Map>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	4629      	mov	r1, r5
 800182a:	4620      	mov	r0, r4
 800182c:	f00d f82a 	bl	800e884 <MX_USB_Send_Midi>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bdb0      	pop	{r4, r5, r7, pc}

08001838 <MIDI_Scale_And_Filter>:

// Scales an ADC value from (0, 255) to (0, k->max_values) an applies EMA filter
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * k->max_values / UPPER_BOUND_ADC;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7f1b      	ldrb	r3, [r3, #28]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe83 	bl	8000554 <__aeabi_i2d>
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b45      	ldr	r3, [pc, #276]	; (8001968 <MIDI_Scale_And_Filter+0x130>)
 8001854:	f7ff f812 	bl	800087c <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f9c4 	bl	8000bec <__aeabi_d2f>
 8001864:	4603      	mov	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7fe fe85 	bl	8000578 <__aeabi_f2d>
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b3e      	ldr	r3, [pc, #248]	; (800196c <MIDI_Scale_And_Filter+0x134>)
 8001874:	f7fe fed8 	bl	8000628 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe66 	bl	8000554 <__aeabi_i2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe feca 	bl	8000628 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4614      	mov	r4, r2
 800189a:	461d      	mov	r5, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7edb      	ldrb	r3, [r3, #27]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe57 	bl	8000554 <__aeabi_i2d>
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <MIDI_Scale_And_Filter+0x134>)
 80018ac:	f7fe febc 	bl	8000628 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fd00 	bl	80002bc <__adddf3>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7f5b      	ldrb	r3, [r3, #29]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe43 	bl	8000554 <__aeabi_i2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4620      	mov	r0, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	f7ff f919 	bl	8000b0c <__aeabi_dcmplt>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d032      	beq.n	8001946 <MIDI_Scale_And_Filter+0x10e>
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7fe fe49 	bl	8000578 <__aeabi_f2d>
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <MIDI_Scale_And_Filter+0x134>)
 80018ec:	f7fe fe9c 	bl	8000628 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe2a 	bl	8000554 <__aeabi_i2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4620      	mov	r0, r4
 8001906:	4629      	mov	r1, r5
 8001908:	f7fe fe8e 	bl	8000628 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4614      	mov	r4, r2
 8001912:	461d      	mov	r5, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7edb      	ldrb	r3, [r3, #27]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe1b 	bl	8000554 <__aeabi_i2d>
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <MIDI_Scale_And_Filter+0x134>)
 8001924:	f7fe fe80 	bl	8000628 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fcc4 	bl	80002bc <__adddf3>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f936 	bl	8000bac <__aeabi_d2uiz>
 8001940:	4603      	mov	r3, r0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	e00c      	b.n	8001960 <MIDI_Scale_And_Filter+0x128>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7f5b      	ldrb	r3, [r3, #29]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fe02 	bl	8000554 <__aeabi_i2d>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7ff f928 	bl	8000bac <__aeabi_d2uiz>
 800195c:	4603      	mov	r3, r0
 800195e:	b2db      	uxtb	r3, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bdb0      	pop	{r4, r5, r7, pc}
 8001968:	406f4000 	.word	0x406f4000
 800196c:	3fe00000 	.word	0x3fe00000

08001970 <Preset_GetName>:
#include "preset.h"

void Preset_GetName(char *file_buffer, char *name_buffer) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
    cJSON *preset_json = cJSON_Parse(file_buffer);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f00e f960 	bl	800fc40 <cJSON_Parse>
 8001980:	60f8      	str	r0, [r7, #12]
    if (preset_json == NULL) return;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00c      	beq.n	80019a2 <Preset_GetName+0x32>
    const cJSON *name = cJSON_GetObjectItemCaseSensitive(preset_json, "name");
 8001988:	4908      	ldr	r1, [pc, #32]	; (80019ac <Preset_GetName+0x3c>)
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f00e fc5d 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 8001990:	60b8      	str	r0, [r7, #8]
    snprintf(name_buffer, MAX_LABEL_CHARS, "%s", name->valuestring);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <Preset_GetName+0x40>)
 8001998:	210e      	movs	r1, #14
 800199a:	6838      	ldr	r0, [r7, #0]
 800199c:	f00e fdec 	bl	8010578 <sniprintf>
 80019a0:	e000      	b.n	80019a4 <Preset_GetName+0x34>
    if (preset_json == NULL) return;
 80019a2:	bf00      	nop
}
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	080134a4 	.word	0x080134a4
 80019b0:	080134ac 	.word	0x080134ac

080019b4 <Preset_Load>:

void Preset_Load(Knob *knobs, char *buffer) {
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b093      	sub	sp, #76	; 0x4c
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
    cJSON *preset_json = cJSON_Parse(buffer);
 80019be:	6838      	ldr	r0, [r7, #0]
 80019c0:	f00e f93e 	bl	800fc40 <cJSON_Parse>
 80019c4:	6378      	str	r0, [r7, #52]	; 0x34
    if (preset_json == NULL) return;
 80019c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80ea 	beq.w	8001ba2 <Preset_Load+0x1ee>

    const cJSON *knobs_json = cJSON_GetObjectItemCaseSensitive(preset_json, "knobs");
 80019ce:	4978      	ldr	r1, [pc, #480]	; (8001bb0 <Preset_Load+0x1fc>)
 80019d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019d2:	f00e fc3a 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 80019d6:	6338      	str	r0, [r7, #48]	; 0x30
    const cJSON *knob_json = NULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	647b      	str	r3, [r7, #68]	; 0x44

    uint8_t i = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 80019e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <Preset_Load+0x3a>
 80019e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	e000      	b.n	80019f0 <Preset_Load+0x3c>
 80019ee:	2300      	movs	r3, #0
 80019f0:	647b      	str	r3, [r7, #68]	; 0x44
 80019f2:	e0d1      	b.n	8001b98 <Preset_Load+0x1e4>
    {
        if (i >= NUM_KNOBS) return;
 80019f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	f200 80d4 	bhi.w	8001ba6 <Preset_Load+0x1f2>

        const cJSON *row = cJSON_GetObjectItemCaseSensitive(knob_json, "row");
 80019fe:	496d      	ldr	r1, [pc, #436]	; (8001bb4 <Preset_Load+0x200>)
 8001a00:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a02:	f00e fc22 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 8001a06:	62f8      	str	r0, [r7, #44]	; 0x2c
        const cJSON *col = cJSON_GetObjectItemCaseSensitive(knob_json, "col");
 8001a08:	496b      	ldr	r1, [pc, #428]	; (8001bb8 <Preset_Load+0x204>)
 8001a0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a0c:	f00e fc1d 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 8001a10:	62b8      	str	r0, [r7, #40]	; 0x28
        const cJSON *label = cJSON_GetObjectItemCaseSensitive(knob_json, "label");
 8001a12:	496a      	ldr	r1, [pc, #424]	; (8001bbc <Preset_Load+0x208>)
 8001a14:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a16:	f00e fc18 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 8001a1a:	6278      	str	r0, [r7, #36]	; 0x24
        const cJSON *channel = cJSON_GetObjectItemCaseSensitive(knob_json, "channel");
 8001a1c:	4968      	ldr	r1, [pc, #416]	; (8001bc0 <Preset_Load+0x20c>)
 8001a1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a20:	f00e fc13 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 8001a24:	6238      	str	r0, [r7, #32]
        const cJSON *cc = cJSON_GetObjectItemCaseSensitive(knob_json, "cc");
 8001a26:	4967      	ldr	r1, [pc, #412]	; (8001bc4 <Preset_Load+0x210>)
 8001a28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a2a:	f00e fc0e 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 8001a2e:	61f8      	str	r0, [r7, #28]
        const cJSON *init_value = cJSON_GetObjectItemCaseSensitive(knob_json, "init_value");
 8001a30:	4965      	ldr	r1, [pc, #404]	; (8001bc8 <Preset_Load+0x214>)
 8001a32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a34:	f00e fc09 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 8001a38:	61b8      	str	r0, [r7, #24]
        const cJSON *max_values = cJSON_GetObjectItemCaseSensitive(knob_json, "max_values");
 8001a3a:	4964      	ldr	r1, [pc, #400]	; (8001bcc <Preset_Load+0x218>)
 8001a3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a3e:	f00e fc04 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 8001a42:	6178      	str	r0, [r7, #20]
        const cJSON *max_range = cJSON_GetObjectItemCaseSensitive(knob_json, "max_range");
 8001a44:	4962      	ldr	r1, [pc, #392]	; (8001bd0 <Preset_Load+0x21c>)
 8001a46:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a48:	f00e fbff 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 8001a4c:	6138      	str	r0, [r7, #16]
        const cJSON *isLocked = cJSON_GetObjectItemCaseSensitive(knob_json, "isLocked");
 8001a4e:	4961      	ldr	r1, [pc, #388]	; (8001bd4 <Preset_Load+0x220>)
 8001a50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a52:	f00e fbfa 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 8001a56:	60f8      	str	r0, [r7, #12]

        knobs[i].row = row->valueint;
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	6959      	ldr	r1, [r3, #20]
 8001a5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a60:	015b      	lsls	r3, r3, #5
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	b2ca      	uxtb	r2, r1
 8001a68:	701a      	strb	r2, [r3, #0]
        knobs[i].col = col->valueint;
 8001a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6c:	6959      	ldr	r1, [r3, #20]
 8001a6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a72:	015b      	lsls	r3, r3, #5
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	b2ca      	uxtb	r2, r1
 8001a7a:	705a      	strb	r2, [r3, #1]
        snprintf(knobs[i].label, sizeof(knobs[i].label) / sizeof(knobs[i].label[0]), "%s", label->valuestring);
 8001a7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	1c98      	adds	r0, r3, #2
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	4a52      	ldr	r2, [pc, #328]	; (8001bd8 <Preset_Load+0x224>)
 8001a8e:	210f      	movs	r1, #15
 8001a90:	f00e fd72 	bl	8010578 <sniprintf>
        knobs[i].channel = channel->valueint;
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	6959      	ldr	r1, [r3, #20]
 8001a98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a9c:	015b      	lsls	r3, r3, #5
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	761a      	strb	r2, [r3, #24]
        knobs[i].cc = cc->valueint;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	6959      	ldr	r1, [r3, #20]
 8001aaa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001aae:	015b      	lsls	r3, r3, #5
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b2ca      	uxtb	r2, r1
 8001ab6:	765a      	strb	r2, [r3, #25]
        knobs[i].init_value = init_value->valueint;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	6959      	ldr	r1, [r3, #20]
 8001abc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ac0:	015b      	lsls	r3, r3, #5
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b2ca      	uxtb	r2, r1
 8001ac8:	769a      	strb	r2, [r3, #26]
        knobs[i].max_values = max_values->valueint;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	6959      	ldr	r1, [r3, #20]
 8001ace:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ad2:	015b      	lsls	r3, r3, #5
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b2ca      	uxtb	r2, r1
 8001ada:	771a      	strb	r2, [r3, #28]
        knobs[i].max_range = max_range->valueint;
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	6959      	ldr	r1, [r3, #20]
 8001ae0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ae4:	015b      	lsls	r3, r3, #5
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	b2ca      	uxtb	r2, r1
 8001aec:	775a      	strb	r2, [r3, #29]
        knobs[i].isLocked = isLocked->valueint;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6959      	ldr	r1, [r3, #20]
 8001af2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001af6:	015b      	lsls	r3, r3, #5
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	b2ca      	uxtb	r2, r1
 8001afe:	779a      	strb	r2, [r3, #30]

        const cJSON *sub_labels = cJSON_GetObjectItemCaseSensitive(knob_json, "sub_labels");
 8001b00:	4936      	ldr	r1, [pc, #216]	; (8001bdc <Preset_Load+0x228>)
 8001b02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b04:	f00e fba1 	bl	801024a <cJSON_GetObjectItemCaseSensitive>
 8001b08:	60b8      	str	r0, [r7, #8]
        const cJSON *sub_label = NULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 8001b0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b12:	015b      	lsls	r3, r3, #5
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	7f1b      	ldrb	r3, [r3, #28]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	1a99      	subs	r1, r3, r2
 8001b22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b26:	015b      	lsls	r3, r3, #5
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	18d4      	adds	r4, r2, r3
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	f00e fbc5 	bl	80102bc <malloc>
 8001b32:	4603      	mov	r3, r0
 8001b34:	6163      	str	r3, [r4, #20]

        uint8_t label_index = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <Preset_Load+0x194>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	e000      	b.n	8001b4a <Preset_Load+0x196>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b4c:	e019      	b.n	8001b82 <Preset_Load+0x1ce>
        {
            snprintf(knobs[i].sub_labels[label_index], sizeof(knobs[i].sub_labels[0]) / sizeof(knobs[i].sub_labels[0][0]), "%s", sub_label->valuestring);
 8001b4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b52:	015b      	lsls	r3, r3, #5
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	6959      	ldr	r1, [r3, #20]
 8001b5a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001b5e:	4613      	mov	r3, r2
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	18c8      	adds	r0, r1, r3
 8001b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <Preset_Load+0x224>)
 8001b6c:	210f      	movs	r1, #15
 8001b6e:	f00e fd03 	bl	8010578 <sniprintf>
            label_index++;
 8001b72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b76:	3301      	adds	r3, #1
 8001b78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e2      	bne.n	8001b4e <Preset_Load+0x19a>
        }
        i++;
 8001b88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 8001b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	647b      	str	r3, [r7, #68]	; 0x44
 8001b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f47f af2a 	bne.w	80019f4 <Preset_Load+0x40>
 8001ba0:	e002      	b.n	8001ba8 <Preset_Load+0x1f4>
    if (preset_json == NULL) return;
 8001ba2:	bf00      	nop
 8001ba4:	e000      	b.n	8001ba8 <Preset_Load+0x1f4>
        if (i >= NUM_KNOBS) return;
 8001ba6:	bf00      	nop
    }
}
 8001ba8:	374c      	adds	r7, #76	; 0x4c
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	080134b0 	.word	0x080134b0
 8001bb4:	080134b8 	.word	0x080134b8
 8001bb8:	080134bc 	.word	0x080134bc
 8001bbc:	080134c0 	.word	0x080134c0
 8001bc0:	080134c8 	.word	0x080134c8
 8001bc4:	080134d0 	.word	0x080134d0
 8001bc8:	080134d4 	.word	0x080134d4
 8001bcc:	080134e0 	.word	0x080134e0
 8001bd0:	080134ec 	.word	0x080134ec
 8001bd4:	080134f8 	.word	0x080134f8
 8001bd8:	080134ac 	.word	0x080134ac
 8001bdc:	08013504 	.word	0x08013504

08001be0 <SD_FetchPresets>:
 * sd.c
 */
#include "stm32f4xx_hal.h"
#include "sd.h"

void SD_FetchPresets() {
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b0dc      	sub	sp, #368	; 0x170
 8001be4:	af00      	add	r7, sp, #0
    //SD_Enable();

    DIR root;
    FILINFO root_info;
    retSD = f_mount(&SDFatFS, "", 1);
 8001be6:	2201      	movs	r2, #1
 8001be8:	4954      	ldr	r1, [pc, #336]	; (8001d3c <SD_FetchPresets+0x15c>)
 8001bea:	4855      	ldr	r0, [pc, #340]	; (8001d40 <SD_FetchPresets+0x160>)
 8001bec:	f00c f816 	bl	800dc1c <f_mount>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <SD_FetchPresets+0x164>)
 8001bf6:	701a      	strb	r2, [r3, #0]

    retSD = f_findfirst(&root, &root_info, "", "*.json");
 8001bf8:	f107 0114 	add.w	r1, r7, #20
 8001bfc:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001c00:	4b51      	ldr	r3, [pc, #324]	; (8001d48 <SD_FetchPresets+0x168>)
 8001c02:	4a4e      	ldr	r2, [pc, #312]	; (8001d3c <SD_FetchPresets+0x15c>)
 8001c04:	f00c fccd 	bl	800e5a2 <f_findfirst>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b4d      	ldr	r3, [pc, #308]	; (8001d44 <SD_FetchPresets+0x164>)
 8001c0e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteString(ret, Font_7x10, White);


    ssd1306_UpdateScreen();
 */
    uint8_t i = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
    while (retSD == FR_OK && root_info.fname[0]) {
 8001c16:	e078      	b.n	8001d0a <SD_FetchPresets+0x12a>
 8001c18:	466b      	mov	r3, sp
 8001c1a:	461d      	mov	r5, r3
        if (i > NUM_KNOBS) break;
 8001c1c:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d86f      	bhi.n	8001d04 <SD_FetchPresets+0x124>
        retSD = f_open(&SDFile, root_info.fname, FA_READ);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	3316      	adds	r3, #22
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4847      	ldr	r0, [pc, #284]	; (8001d4c <SD_FetchPresets+0x16c>)
 8001c30:	f00c f83a 	bl	800dca8 <f_open>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b42      	ldr	r3, [pc, #264]	; (8001d44 <SD_FetchPresets+0x164>)
 8001c3a:	701a      	strb	r2, [r3, #0]

        char presetBuffer[f_size(&SDFile) + 1];
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <SD_FetchPresets+0x16c>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	1c5c      	adds	r4, r3, #1
 8001c42:	4623      	mov	r3, r4
 8001c44:	3b01      	subs	r3, #1
 8001c46:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f04f 0100 	mov.w	r1, #0
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	00cb      	lsls	r3, r1, #3
 8001c5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c5e:	00c2      	lsls	r2, r0, #3
 8001c60:	4620      	mov	r0, r4
 8001c62:	f04f 0100 	mov.w	r1, #0
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	00cb      	lsls	r3, r1, #3
 8001c70:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c74:	00c2      	lsls	r2, r0, #3
 8001c76:	1de3      	adds	r3, r4, #7
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	ebad 0d03 	sub.w	sp, sp, r3
 8001c80:	466b      	mov	r3, sp
 8001c82:	3300      	adds	r3, #0
 8001c84:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        char nameBuffer[MAX_LABEL_CHARS + 1];
        unsigned int bytesRead;
        retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001c88:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8001c8c:	1e62      	subs	r2, r4, #1
 8001c8e:	463b      	mov	r3, r7
 8001c90:	482e      	ldr	r0, [pc, #184]	; (8001d4c <SD_FetchPresets+0x16c>)
 8001c92:	f00c f9c7 	bl	800e024 <f_read>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <SD_FetchPresets+0x164>)
 8001c9c:	701a      	strb	r2, [r3, #0]
        presetBuffer[bytesRead] = '\0';
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	54d1      	strb	r1, [r2, r3]

        Preset_GetName(presetBuffer, nameBuffer);
 8001caa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cae:	1d3a      	adds	r2, r7, #4
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fe5c 	bl	8001970 <Preset_GetName>

        snprintf(presets[i], sizeof(presets[0]) / sizeof(presets[0][0]), "%s", nameBuffer);
 8001cb8:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	4a23      	ldr	r2, [pc, #140]	; (8001d50 <SD_FetchPresets+0x170>)
 8001cc4:	1898      	adds	r0, r3, r2
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4a22      	ldr	r2, [pc, #136]	; (8001d54 <SD_FetchPresets+0x174>)
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f00e fc54 	bl	8010578 <sniprintf>
        retSD = f_close(&SDFile);
 8001cd0:	481e      	ldr	r0, [pc, #120]	; (8001d4c <SD_FetchPresets+0x16c>)
 8001cd2:	f00c fb64 	bl	800e39e <f_close>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <SD_FetchPresets+0x164>)
 8001cdc:	701a      	strb	r2, [r3, #0]

        retSD = f_findnext(&root, &root_info);
 8001cde:	f107 0214 	add.w	r2, r7, #20
 8001ce2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00c fc32 	bl	800e552 <f_findnext>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <SD_FetchPresets+0x164>)
 8001cf4:	701a      	strb	r2, [r3, #0]
        i++;
 8001cf6:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 8001d00:	46ad      	mov	sp, r5
 8001d02:	e002      	b.n	8001d0a <SD_FetchPresets+0x12a>
        if (i > NUM_KNOBS) break;
 8001d04:	bf00      	nop
 8001d06:	46ad      	mov	sp, r5
 8001d08:	e009      	b.n	8001d1e <SD_FetchPresets+0x13e>
    while (retSD == FR_OK && root_info.fname[0]) {
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <SD_FetchPresets+0x164>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <SD_FetchPresets+0x13e>
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	7d9b      	ldrb	r3, [r3, #22]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f47f af7d 	bne.w	8001c18 <SD_FetchPresets+0x38>
    }

    retSD = f_mount(NULL, "", 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4906      	ldr	r1, [pc, #24]	; (8001d3c <SD_FetchPresets+0x15c>)
 8001d22:	2000      	movs	r0, #0
 8001d24:	f00b ff7a 	bl	800dc1c <f_mount>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SD_FetchPresets+0x164>)
 8001d2e:	701a      	strb	r2, [r3, #0]

    //SD_Disable();
}
 8001d30:	bf00      	nop
 8001d32:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	08013510 	.word	0x08013510
 8001d40:	200029bc 	.word	0x200029bc
 8001d44:	20002784 	.word	0x20002784
 8001d48:	08013514 	.word	0x08013514
 8001d4c:	2000278c 	.word	0x2000278c
 8001d50:	200026c0 	.word	0x200026c0
 8001d54:	0801351c 	.word	0x0801351c

08001d58 <SD_LoadPreset>:

void SD_LoadPreset(Knob *knobs, char *filename) {
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	466b      	mov	r3, sp
 8001d64:	461d      	mov	r5, r3
    //SD_Enable();

    retSD = f_mount(&SDFatFS, "", 1);
 8001d66:	2201      	movs	r2, #1
 8001d68:	492e      	ldr	r1, [pc, #184]	; (8001e24 <SD_LoadPreset+0xcc>)
 8001d6a:	482f      	ldr	r0, [pc, #188]	; (8001e28 <SD_LoadPreset+0xd0>)
 8001d6c:	f00b ff56 	bl	800dc1c <f_mount>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <SD_LoadPreset+0xd4>)
 8001d76:	701a      	strb	r2, [r3, #0]
    retSD = f_open(&SDFile, filename, FA_READ);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	6839      	ldr	r1, [r7, #0]
 8001d7c:	482c      	ldr	r0, [pc, #176]	; (8001e30 <SD_LoadPreset+0xd8>)
 8001d7e:	f00b ff93 	bl	800dca8 <f_open>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <SD_LoadPreset+0xd4>)
 8001d88:	701a      	strb	r2, [r3, #0]

    char presetBuffer[f_size(&SDFile) + 1];
 8001d8a:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <SD_LoadPreset+0xd8>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	1c5c      	adds	r4, r3, #1
 8001d90:	4623      	mov	r3, r4
 8001d92:	3b01      	subs	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	4620      	mov	r0, r4
 8001d98:	f04f 0100 	mov.w	r1, #0
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	00cb      	lsls	r3, r1, #3
 8001da6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001daa:	00c2      	lsls	r2, r0, #3
 8001dac:	4620      	mov	r0, r4
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	00cb      	lsls	r3, r1, #3
 8001dbc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001dc0:	00c2      	lsls	r2, r0, #3
 8001dc2:	1de3      	adds	r3, r4, #7
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	ebad 0d03 	sub.w	sp, sp, r3
 8001dcc:	466b      	mov	r3, sp
 8001dce:	3300      	adds	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
    unsigned int bytesRead;

    retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001dd2:	6939      	ldr	r1, [r7, #16]
 8001dd4:	1e62      	subs	r2, r4, #1
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	4815      	ldr	r0, [pc, #84]	; (8001e30 <SD_LoadPreset+0xd8>)
 8001ddc:	f00c f922 	bl	800e024 <f_read>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <SD_LoadPreset+0xd4>)
 8001de6:	701a      	strb	r2, [r3, #0]
    presetBuffer[bytesRead] = '\0';
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	2100      	movs	r1, #0
 8001dee:	54d1      	strb	r1, [r2, r3]

    Preset_Load(knobs, presetBuffer);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fddd 	bl	80019b4 <Preset_Load>

    retSD = f_close(&SDFile);
 8001dfa:	480d      	ldr	r0, [pc, #52]	; (8001e30 <SD_LoadPreset+0xd8>)
 8001dfc:	f00c facf 	bl	800e39e <f_close>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <SD_LoadPreset+0xd4>)
 8001e06:	701a      	strb	r2, [r3, #0]
    retSD = f_mount(NULL, "", 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4906      	ldr	r1, [pc, #24]	; (8001e24 <SD_LoadPreset+0xcc>)
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f00b ff05 	bl	800dc1c <f_mount>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <SD_LoadPreset+0xd4>)
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	46ad      	mov	sp, r5

    //SD_Disable();
}
 8001e1c:	bf00      	nop
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bdb0      	pop	{r4, r5, r7, pc}
 8001e24:	08013510 	.word	0x08013510
 8001e28:	200029bc 	.word	0x200029bc
 8001e2c:	20002784 	.word	0x20002784
 8001e30:	2000278c 	.word	0x2000278c

08001e34 <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(uint8_t command) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af04      	add	r7, sp, #16
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001e3e:	230a      	movs	r3, #10
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	2301      	movs	r3, #1
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2178      	movs	r1, #120	; 0x78
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <ssd1306_WriteCommand+0x2c>)
 8001e52:	f002 f9e9 	bl	8004228 <HAL_I2C_Mem_Write>
 8001e56:	4603      	mov	r3, r0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20002580 	.word	0x20002580

08001e64 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(Knob *k) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    int status = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(k);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fbf1 	bl	8002658 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(0xAE);   // Display off
 8001e76:	20ae      	movs	r0, #174	; 0xae
 8001e78:	f7ff ffdc 	bl	8001e34 <ssd1306_WriteCommand>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // Set Memory Addressing Mode
 8001e86:	2020      	movs	r0, #32
 8001e88:	f7ff ffd4 	bl	8001e34 <ssd1306_WriteCommand>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001e96:	2010      	movs	r0, #16
 8001e98:	f7ff ffcc 	bl	8001e34 <ssd1306_WriteCommand>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001ea6:	20b0      	movs	r0, #176	; 0xb0
 8001ea8:	f7ff ffc4 	bl	8001e34 <ssd1306_WriteCommand>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xC8);   // Set COM Output Scan Direction
 8001eb6:	20c8      	movs	r0, #200	; 0xc8
 8001eb8:	f7ff ffbc 	bl	8001e34 <ssd1306_WriteCommand>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // Set low column address
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff ffb4 	bl	8001e34 <ssd1306_WriteCommand>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // Set high column address
 8001ed6:	2010      	movs	r0, #16
 8001ed8:	f7ff ffac 	bl	8001e34 <ssd1306_WriteCommand>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);   // Set start line address
 8001ee6:	2040      	movs	r0, #64	; 0x40
 8001ee8:	f7ff ffa4 	bl	8001e34 <ssd1306_WriteCommand>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x81);   // set contrast control register
 8001ef6:	2081      	movs	r0, #129	; 0x81
 8001ef8:	f7ff ff9c 	bl	8001e34 <ssd1306_WriteCommand>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);
 8001f06:	2040      	movs	r0, #64	; 0x40
 8001f08:	f7ff ff94 	bl	8001e34 <ssd1306_WriteCommand>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA1);   // Set segment re-map 0 to 127
 8001f16:	20a1      	movs	r0, #161	; 0xa1
 8001f18:	f7ff ff8c 	bl	8001e34 <ssd1306_WriteCommand>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA6);   // Set normal display
 8001f26:	20a6      	movs	r0, #166	; 0xa6
 8001f28:	f7ff ff84 	bl	8001e34 <ssd1306_WriteCommand>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA8);   // Set multiplex ratio(1 to 64)
 8001f36:	20a8      	movs	r0, #168	; 0xa8
 8001f38:	f7ff ff7c 	bl	8001e34 <ssd1306_WriteCommand>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(SSD1306_HEIGHT - 1);
 8001f46:	203f      	movs	r0, #63	; 0x3f
 8001f48:	f7ff ff74 	bl	8001e34 <ssd1306_WriteCommand>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f56:	20a4      	movs	r0, #164	; 0xa4
 8001f58:	f7ff ff6c 	bl	8001e34 <ssd1306_WriteCommand>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD3);   // Set display offset
 8001f66:	20d3      	movs	r0, #211	; 0xd3
 8001f68:	f7ff ff64 	bl	8001e34 <ssd1306_WriteCommand>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // No offset
 8001f76:	2000      	movs	r0, #0
 8001f78:	f7ff ff5c 	bl	8001e34 <ssd1306_WriteCommand>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD5);   // Set display clock divide ratio/oscillator frequency
 8001f86:	20d5      	movs	r0, #213	; 0xd5
 8001f88:	f7ff ff54 	bl	8001e34 <ssd1306_WriteCommand>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xF0);   // Set divide ratio
 8001f96:	20f0      	movs	r0, #240	; 0xf0
 8001f98:	f7ff ff4c 	bl	8001e34 <ssd1306_WriteCommand>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD9);   // Set pre-charge period
 8001fa6:	20d9      	movs	r0, #217	; 0xd9
 8001fa8:	f7ff ff44 	bl	8001e34 <ssd1306_WriteCommand>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x22);
 8001fb6:	2022      	movs	r0, #34	; 0x22
 8001fb8:	f7ff ff3c 	bl	8001e34 <ssd1306_WriteCommand>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xDA);   // Set com pins hardware configuration
 8001fc6:	20da      	movs	r0, #218	; 0xda
 8001fc8:	f7ff ff34 	bl	8001e34 <ssd1306_WriteCommand>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(0x12);   // Do not use COM left/right remap
 8001fd6:	2012      	movs	r0, #18
 8001fd8:	f7ff ff2c 	bl	8001e34 <ssd1306_WriteCommand>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(0xDB);   // Set vcomh
 8001fe6:	20db      	movs	r0, #219	; 0xdb
 8001fe8:	f7ff ff24 	bl	8001e34 <ssd1306_WriteCommand>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // 0x20,0.77xVcc
 8001ff6:	2020      	movs	r0, #32
 8001ff8:	f7ff ff1c 	bl	8001e34 <ssd1306_WriteCommand>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x8D);   // Set DC-DC enable
 8002006:	208d      	movs	r0, #141	; 0x8d
 8002008:	f7ff ff14 	bl	8001e34 <ssd1306_WriteCommand>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x14);   //
 8002016:	2014      	movs	r0, #20
 8002018:	f7ff ff0c 	bl	8001e34 <ssd1306_WriteCommand>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xAF);   // Turn on SSD1306 panel
 8002026:	20af      	movs	r0, #175	; 0xaf
 8002028:	f7ff ff04 	bl	8001e34 <ssd1306_WriteCommand>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <ssd1306_Init+0x1dc>
        return 1;
 800203c:	2301      	movs	r3, #1
 800203e:	e012      	b.n	8002066 <ssd1306_Init+0x202>
    }

    ssd1306_Fill(Black);
 8002040:	2000      	movs	r0, #0
 8002042:	f000 f819 	bl	8002078 <ssd1306_Fill>
    ssd1306_AdjustBrightness(0x63);
 8002046:	2063      	movs	r0, #99	; 0x63
 8002048:	f000 fadc 	bl	8002604 <ssd1306_AdjustBrightness>
    ssd1306_UpdateScreen(&hi2c1);
 800204c:	4808      	ldr	r0, [pc, #32]	; (8002070 <ssd1306_Init+0x20c>)
 800204e:	f000 f837 	bl	80020c0 <ssd1306_UpdateScreen>

    SSD1306.CurrentX = 0;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <ssd1306_Init+0x210>)
 8002054:	2200      	movs	r2, #0
 8002056:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <ssd1306_Init+0x210>)
 800205a:	2200      	movs	r2, #0
 800205c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <ssd1306_Init+0x210>)
 8002060:	2201      	movs	r2, #1
 8002062:	715a      	strb	r2, [r3, #5]

    return 0;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20002580 	.word	0x20002580
 8002074:	20000758 	.word	0x20000758

08002078 <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	e00d      	b.n	80020a4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <ssd1306_Fill+0x1a>
 800208e:	2100      	movs	r1, #0
 8002090:	e000      	b.n	8002094 <ssd1306_Fill+0x1c>
 8002092:	21ff      	movs	r1, #255	; 0xff
 8002094:	4a09      	ldr	r2, [pc, #36]	; (80020bc <ssd1306_Fill+0x44>)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	460a      	mov	r2, r1
 800209c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3301      	adds	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020aa:	d3ed      	bcc.n	8002088 <ssd1306_Fill+0x10>
    }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000358 	.word	0x20000358

080020c0 <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen() {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af04      	add	r7, sp, #16
    for (uint8_t i = 0; i < 8; i++) {
 80020c6:	2300      	movs	r3, #0
 80020c8:	71fb      	strb	r3, [r7, #7]
 80020ca:	e01d      	b.n	8002108 <ssd1306_UpdateScreen+0x48>
        ssd1306_WriteCommand(0xB0 + i);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	3b50      	subs	r3, #80	; 0x50
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff feae 	bl	8001e34 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff feab 	bl	8001e34 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80020de:	2010      	movs	r0, #16
 80020e0:	f7ff fea8 	bl	8001e34 <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	01db      	lsls	r3, r3, #7
 80020e8:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <ssd1306_UpdateScreen+0x58>)
 80020ea:	4413      	add	r3, r2
 80020ec:	2264      	movs	r2, #100	; 0x64
 80020ee:	9202      	str	r2, [sp, #8]
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	9201      	str	r2, [sp, #4]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2301      	movs	r3, #1
 80020f8:	2240      	movs	r2, #64	; 0x40
 80020fa:	2178      	movs	r1, #120	; 0x78
 80020fc:	4807      	ldr	r0, [pc, #28]	; (800211c <ssd1306_UpdateScreen+0x5c>)
 80020fe:	f002 f893 	bl	8004228 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	3301      	adds	r3, #1
 8002106:	71fb      	strb	r3, [r7, #7]
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	2b07      	cmp	r3, #7
 800210c:	d9de      	bls.n	80020cc <ssd1306_UpdateScreen+0xc>
    }
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000358 	.word	0x20000358
 800211c:	20002580 	.word	0x20002580

08002120 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(Knob *k) {
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b08d      	sub	sp, #52	; 0x34
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    ssd1306_Select(k);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fa95 	bl	8002658 <ssd1306_Select>
    ssd1306_Fill(Black);
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff ffa2 	bl	8002078 <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8002134:	4b9d      	ldr	r3, [pc, #628]	; (80023ac <ssd1306_WriteKnob+0x28c>)
 8002136:	f107 0410 	add.w	r4, r7, #16
 800213a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800213c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7e1b      	ldrb	r3, [r3, #24]
 8002144:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002148:	4a99      	ldr	r2, [pc, #612]	; (80023b0 <ssd1306_WriteKnob+0x290>)
 800214a:	2103      	movs	r1, #3
 800214c:	f00e fa14 	bl	8010578 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7e5b      	ldrb	r3, [r3, #25]
 8002154:	f107 0020 	add.w	r0, r7, #32
 8002158:	4a96      	ldr	r2, [pc, #600]	; (80023b4 <ssd1306_WriteKnob+0x294>)
 800215a:	2104      	movs	r1, #4
 800215c:	f00e fa0c 	bl	8010578 <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f845 	bl	80001f4 <strlen>
 800216a:	4604      	mov	r4, r0
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 faa9 	bl	80026c4 <update_init_indicator>
 8002172:	4603      	mov	r3, r0
 8002174:	f107 0010 	add.w	r0, r7, #16
 8002178:	4a8f      	ldr	r2, [pc, #572]	; (80023b8 <ssd1306_WriteKnob+0x298>)
 800217a:	4621      	mov	r1, r4
 800217c:	f00e f9fc 	bl	8010578 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) Knob_Map(k, k->value, k->max_range));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7ed9      	ldrb	r1, [r3, #27]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7f5b      	ldrb	r3, [r3, #29]
 8002188:	461a      	mov	r2, r3
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe ff30 	bl	8000ff0 <Knob_Map>
 8002190:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8002192:	f107 000c 	add.w	r0, r7, #12
 8002196:	4a87      	ldr	r2, [pc, #540]	; (80023b4 <ssd1306_WriteKnob+0x294>)
 8002198:	2104      	movs	r1, #4
 800219a:	f00e f9ed 	bl	8010578 <sniprintf>

    ssd1306_SetCursor(0, 0);
 800219e:	2100      	movs	r1, #0
 80021a0:	2000      	movs	r0, #0
 80021a2:	f000 fa17 	bl	80025d4 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 80021a6:	4a85      	ldr	r2, [pc, #532]	; (80023bc <ssd1306_WriteKnob+0x29c>)
 80021a8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80021ac:	2301      	movs	r3, #1
 80021ae:	ca06      	ldmia	r2, {r1, r2}
 80021b0:	f000 f9ea 	bl	8002588 <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 80021b4:	4b81      	ldr	r3, [pc, #516]	; (80023bc <ssd1306_WriteKnob+0x29c>)
 80021b6:	785b      	ldrb	r3, [r3, #1]
 80021b8:	3301      	adds	r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4619      	mov	r1, r3
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 fa08 	bl	80025d4 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 80021c4:	4a7d      	ldr	r2, [pc, #500]	; (80023bc <ssd1306_WriteKnob+0x29c>)
 80021c6:	f107 0020 	add.w	r0, r7, #32
 80021ca:	2301      	movs	r3, #1
 80021cc:	ca06      	ldmia	r2, {r1, r2}
 80021ce:	f000 f9db 	bl	8002588 <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 80021d2:	f107 0310 	add.w	r3, r7, #16
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe f80c 	bl	80001f4 <strlen>
 80021dc:	4603      	mov	r3, r0
 80021de:	4a77      	ldr	r2, [pc, #476]	; (80023bc <ssd1306_WriteKnob+0x29c>)
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	b2d8      	uxtb	r0, r3
 80021ee:	4b73      	ldr	r3, [pc, #460]	; (80023bc <ssd1306_WriteKnob+0x29c>)
 80021f0:	785b      	ldrb	r3, [r3, #1]
 80021f2:	3301      	adds	r3, #1
 80021f4:	0fda      	lsrs	r2, r3, #31
 80021f6:	4413      	add	r3, r2
 80021f8:	105b      	asrs	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4619      	mov	r1, r3
 80021fe:	f000 f9e9 	bl	80025d4 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8002202:	4a6e      	ldr	r2, [pc, #440]	; (80023bc <ssd1306_WriteKnob+0x29c>)
 8002204:	f107 0010 	add.w	r0, r7, #16
 8002208:	2301      	movs	r3, #1
 800220a:	ca06      	ldmia	r2, {r1, r2}
 800220c:	f000 f9bc 	bl	8002588 <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 8002210:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <ssd1306_WriteKnob+0x29c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	f1c3 0320 	rsb	r3, r3, #32
 8002218:	b2db      	uxtb	r3, r3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	b2db      	uxtb	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b2d8      	uxtb	r0, r3
 8002222:	4b66      	ldr	r3, [pc, #408]	; (80023bc <ssd1306_WriteKnob+0x29c>)
 8002224:	785b      	ldrb	r3, [r3, #1]
 8002226:	3301      	adds	r3, #1
 8002228:	0fda      	lsrs	r2, r3, #31
 800222a:	4413      	add	r3, r2
 800222c:	105b      	asrs	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4619      	mov	r1, r3
 8002232:	f000 f9cf 	bl	80025d4 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 8002236:	4a61      	ldr	r2, [pc, #388]	; (80023bc <ssd1306_WriteKnob+0x29c>)
 8002238:	f107 000c 	add.w	r0, r7, #12
 800223c:	2301      	movs	r3, #1
 800223e:	ca06      	ldmia	r2, {r1, r2}
 8002240:	f000 f9a2 	bl	8002588 <ssd1306_WriteString>

    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8002244:	2300      	movs	r3, #0
 8002246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800224a:	e013      	b.n	8002274 <ssd1306_WriteKnob+0x154>
        ssd1306_DrawPixel(i, SSD1306.CurrentY + NumFont_5x7.FontHeight + 4, White);
 800224c:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <ssd1306_WriteKnob+0x2a0>)
 800224e:	885b      	ldrh	r3, [r3, #2]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b5a      	ldr	r3, [pc, #360]	; (80023bc <ssd1306_WriteKnob+0x29c>)
 8002254:	785b      	ldrb	r3, [r3, #1]
 8002256:	4413      	add	r3, r2
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3304      	adds	r3, #4
 800225c:	b2d9      	uxtb	r1, r3
 800225e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002262:	2201      	movs	r2, #1
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f8af 	bl	80023c8 <ssd1306_DrawPixel>
    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 800226a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800226e:	3301      	adds	r3, #1
 8002270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002274:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002278:	2b00      	cmp	r3, #0
 800227a:	dae7      	bge.n	800224c <ssd1306_WriteKnob+0x12c>
    }

    uint8_t len_label = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t x = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t y = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    uint8_t y_remaining = SSD1306_HEIGHT - 2 * NumFont_5x7.FontHeight;
 800228e:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <ssd1306_WriteKnob+0x29c>)
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	f1c3 0320 	rsb	r3, r3, #32
 8002296:	b2db      	uxtb	r3, r3
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    // Draw main label
    len_label = strlen(k->label);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3302      	adds	r3, #2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fd ffa6 	bl	80001f4 <strlen>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 80022ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022b2:	4a44      	ldr	r2, [pc, #272]	; (80023c4 <ssd1306_WriteKnob+0x2a4>)
 80022b4:	7812      	ldrb	r2, [r2, #0]
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80022be:	0fda      	lsrs	r2, r3, #31
 80022c0:	4413      	add	r3, r2
 80022c2:	105b      	asrs	r3, r3, #1
 80022c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = (float) y_remaining / 3 + (Font_10x18.FontHeight / 4);
 80022c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80022d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022dc:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <ssd1306_WriteKnob+0x2a4>)
 80022de:	785b      	ldrb	r3, [r3, #1]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f4:	edc7 7a00 	vstr	s15, [r7]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 80022fe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002302:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f963 	bl	80025d4 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	1c98      	adds	r0, r3, #2
 8002312:	4a2c      	ldr	r2, [pc, #176]	; (80023c4 <ssd1306_WriteKnob+0x2a4>)
 8002314:	2301      	movs	r3, #1
 8002316:	ca06      	ldmia	r2, {r1, r2}
 8002318:	f000 f936 	bl	8002588 <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7f1b      	ldrb	r3, [r3, #28]
 8002320:	b25b      	sxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	db02      	blt.n	800232c <ssd1306_WriteKnob+0x20c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7edb      	ldrb	r3, [r3, #27]
 800232a:	e000      	b.n	800232e <ssd1306_WriteKnob+0x20e>
 800232c:	2300      	movs	r3, #0
 800232e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    len_label = strlen(k->sub_labels[sl_index]);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6959      	ldr	r1, [r3, #20]
 8002336:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	440b      	add	r3, r1
 8002342:	4618      	mov	r0, r3
 8002344:	f7fd ff56 	bl	80001f4 <strlen>
 8002348:	4603      	mov	r3, r0
 800234a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 800234e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002352:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <ssd1306_WriteKnob+0x2a4>)
 8002354:	7812      	ldrb	r2, [r2, #0]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800235e:	0fda      	lsrs	r2, r3, #31
 8002360:	4413      	add	r3, r2
 8002362:	105b      	asrs	r3, r3, #1
 8002364:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = SSD1306_HEIGHT - Font_10x18.FontHeight - 1;
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <ssd1306_WriteKnob+0x2a4>)
 800236a:	785b      	ldrb	r3, [r3, #1]
 800236c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002370:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 8002374:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002378:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f928 	bl	80025d4 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6959      	ldr	r1, [r3, #20]
 8002388:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	18c8      	adds	r0, r1, r3
 8002394:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <ssd1306_WriteKnob+0x2a4>)
 8002396:	2301      	movs	r3, #1
 8002398:	ca06      	ldmia	r2, {r1, r2}
 800239a:	f000 f8f5 	bl	8002588 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 800239e:	f7ff fe8f 	bl	80020c0 <ssd1306_UpdateScreen>
}
 80023a2:	bf00      	nop
 80023a4:	3734      	adds	r7, #52	; 0x34
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd90      	pop	{r4, r7, pc}
 80023aa:	bf00      	nop
 80023ac:	08013534 	.word	0x08013534
 80023b0:	08013520 	.word	0x08013520
 80023b4:	08013528 	.word	0x08013528
 80023b8:	08013530 	.word	0x08013530
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000758 	.word	0x20000758
 80023c4:	20000008 	.word	0x20000008

080023c8 <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
 80023d2:	460b      	mov	r3, r1
 80023d4:	71bb      	strb	r3, [r7, #6]
 80023d6:	4613      	mov	r3, r2
 80023d8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db48      	blt.n	8002474 <ssd1306_DrawPixel+0xac>
 80023e2:	79bb      	ldrb	r3, [r7, #6]
 80023e4:	2b3f      	cmp	r3, #63	; 0x3f
 80023e6:	d845      	bhi.n	8002474 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <ssd1306_DrawPixel+0xb8>)
 80023ea:	791b      	ldrb	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 80023f0:	797b      	ldrb	r3, [r7, #5]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 80023fe:	797b      	ldrb	r3, [r7, #5]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d11a      	bne.n	800243a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002404:	79fa      	ldrb	r2, [r7, #7]
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	b2d8      	uxtb	r0, r3
 800240c:	4603      	mov	r3, r0
 800240e:	01db      	lsls	r3, r3, #7
 8002410:	4413      	add	r3, r2
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <ssd1306_DrawPixel+0xbc>)
 8002414:	5cd3      	ldrb	r3, [r2, r3]
 8002416:	b25a      	sxtb	r2, r3
 8002418:	79bb      	ldrb	r3, [r7, #6]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	b25b      	sxtb	r3, r3
 8002426:	4313      	orrs	r3, r2
 8002428:	b259      	sxtb	r1, r3
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	4603      	mov	r3, r0
 800242e:	01db      	lsls	r3, r3, #7
 8002430:	4413      	add	r3, r2
 8002432:	b2c9      	uxtb	r1, r1
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <ssd1306_DrawPixel+0xbc>)
 8002436:	54d1      	strb	r1, [r2, r3]
 8002438:	e01d      	b.n	8002476 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800243a:	79fa      	ldrb	r2, [r7, #7]
 800243c:	79bb      	ldrb	r3, [r7, #6]
 800243e:	08db      	lsrs	r3, r3, #3
 8002440:	b2d8      	uxtb	r0, r3
 8002442:	4603      	mov	r3, r0
 8002444:	01db      	lsls	r3, r3, #7
 8002446:	4413      	add	r3, r2
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <ssd1306_DrawPixel+0xbc>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	b25a      	sxtb	r2, r3
 800244e:	79bb      	ldrb	r3, [r7, #6]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	2101      	movs	r1, #1
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	b25b      	sxtb	r3, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	b25b      	sxtb	r3, r3
 8002460:	4013      	ands	r3, r2
 8002462:	b259      	sxtb	r1, r3
 8002464:	79fa      	ldrb	r2, [r7, #7]
 8002466:	4603      	mov	r3, r0
 8002468:	01db      	lsls	r3, r3, #7
 800246a:	4413      	add	r3, r2
 800246c:	b2c9      	uxtb	r1, r1
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <ssd1306_DrawPixel+0xbc>)
 8002470:	54d1      	strb	r1, [r2, r3]
 8002472:	e000      	b.n	8002476 <ssd1306_DrawPixel+0xae>
        return;
 8002474:	bf00      	nop
    }
}
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	20000758 	.word	0x20000758
 8002484:	20000358 	.word	0x20000358

08002488 <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	4604      	mov	r4, r0
 8002490:	1d38      	adds	r0, r7, #4
 8002492:	e880 0006 	stmia.w	r0, {r1, r2}
 8002496:	461a      	mov	r2, r3
 8002498:	4623      	mov	r3, r4
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	4613      	mov	r3, r2
 800249e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80024a0:	4b38      	ldr	r3, [pc, #224]	; (8002584 <ssd1306_WriteChar+0xfc>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	793b      	ldrb	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	2b7f      	cmp	r3, #127	; 0x7f
 80024ac:	dc06      	bgt.n	80024bc <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 80024ae:	4b35      	ldr	r3, [pc, #212]	; (8002584 <ssd1306_WriteChar+0xfc>)
 80024b0:	885b      	ldrh	r3, [r3, #2]
 80024b2:	461a      	mov	r2, r3
 80024b4:	797b      	ldrb	r3, [r7, #5]
 80024b6:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80024b8:	2b3f      	cmp	r3, #63	; 0x3f
 80024ba:	dd01      	ble.n	80024c0 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	e05d      	b.n	800257c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	e04c      	b.n	8002560 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	3b20      	subs	r3, #32
 80024cc:	7979      	ldrb	r1, [r7, #5]
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	440b      	add	r3, r1
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	e034      	b.n	8002550 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d012      	beq.n	800251c <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <ssd1306_WriteChar+0xfc>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	4413      	add	r3, r2
 8002502:	b2d8      	uxtb	r0, r3
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <ssd1306_WriteChar+0xfc>)
 8002506:	885b      	ldrh	r3, [r3, #2]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	4413      	add	r3, r2
 8002510:	b2db      	uxtb	r3, r3
 8002512:	7bba      	ldrb	r2, [r7, #14]
 8002514:	4619      	mov	r1, r3
 8002516:	f7ff ff57 	bl	80023c8 <ssd1306_DrawPixel>
 800251a:	e016      	b.n	800254a <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <ssd1306_WriteChar+0xfc>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	4413      	add	r3, r2
 8002528:	b2d8      	uxtb	r0, r3
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <ssd1306_WriteChar+0xfc>)
 800252c:	885b      	ldrh	r3, [r3, #2]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	4413      	add	r3, r2
 8002536:	b2d9      	uxtb	r1, r3
 8002538:	7bbb      	ldrb	r3, [r7, #14]
 800253a:	2b00      	cmp	r3, #0
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	f7ff ff3f 	bl	80023c8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	3301      	adds	r3, #1
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	793b      	ldrb	r3, [r7, #4]
 8002552:	461a      	mov	r2, r3
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	4293      	cmp	r3, r2
 8002558:	d3c5      	bcc.n	80024e6 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3301      	adds	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	797b      	ldrb	r3, [r7, #5]
 8002562:	461a      	mov	r2, r3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4293      	cmp	r3, r2
 8002568:	d3ad      	bcc.n	80024c6 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <ssd1306_WriteChar+0xfc>)
 800256c:	881a      	ldrh	r2, [r3, #0]
 800256e:	793b      	ldrb	r3, [r7, #4]
 8002570:	b29b      	uxth	r3, r3
 8002572:	4413      	add	r3, r2
 8002574:	b29a      	uxth	r2, r3
 8002576:	4b03      	ldr	r3, [pc, #12]	; (8002584 <ssd1306_WriteChar+0xfc>)
 8002578:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3724      	adds	r7, #36	; 0x24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	20000758 	.word	0x20000758

08002588 <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	1d38      	adds	r0, r7, #4
 8002592:	e880 0006 	stmia.w	r0, {r1, r2}
 8002596:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002598:	e012      	b.n	80025c0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	7818      	ldrb	r0, [r3, #0]
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	1d3a      	adds	r2, r7, #4
 80025a2:	ca06      	ldmia	r2, {r1, r2}
 80025a4:	f7ff ff70 	bl	8002488 <ssd1306_WriteChar>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d002      	beq.n	80025ba <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	e008      	b.n	80025cc <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3301      	adds	r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e8      	bne.n	800259a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	781b      	ldrb	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	460a      	mov	r2, r1
 80025de:	71fb      	strb	r3, [r7, #7]
 80025e0:	4613      	mov	r3, r2
 80025e2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <ssd1306_SetCursor+0x2c>)
 80025ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80025ec:	79bb      	ldrb	r3, [r7, #6]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <ssd1306_SetCursor+0x2c>)
 80025f2:	805a      	strh	r2, [r3, #2]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	20000758 	.word	0x20000758

08002604 <ssd1306_AdjustBrightness>:

// Adjust brightness
void ssd1306_AdjustBrightness(uint8_t brightness) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af04      	add	r7, sp, #16
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
    uint8_t contrast_cmd = 0x81;
 800260e:	2381      	movs	r3, #129	; 0x81
 8002610:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast_level = brightness;
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_cmd, 1, 10);
 8002616:	230a      	movs	r3, #10
 8002618:	9302      	str	r3, [sp, #8]
 800261a:	2301      	movs	r3, #1
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	f107 030f 	add.w	r3, r7, #15
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2301      	movs	r3, #1
 8002626:	2200      	movs	r2, #0
 8002628:	2178      	movs	r1, #120	; 0x78
 800262a:	480a      	ldr	r0, [pc, #40]	; (8002654 <ssd1306_AdjustBrightness+0x50>)
 800262c:	f001 fdfc 	bl	8004228 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_level, 1, 10);
 8002630:	230a      	movs	r3, #10
 8002632:	9302      	str	r3, [sp, #8]
 8002634:	2301      	movs	r3, #1
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	f107 030e 	add.w	r3, r7, #14
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2301      	movs	r3, #1
 8002640:	2200      	movs	r2, #0
 8002642:	2178      	movs	r1, #120	; 0x78
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <ssd1306_AdjustBrightness+0x50>)
 8002646:	f001 fdef 	bl	8004228 <HAL_I2C_Mem_Write>
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20002580 	.word	0x20002580

08002658 <ssd1306_Select>:

// Select a display
void ssd1306_Select(Knob *k) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
    i2c_Select(I2C_MUX_MASTER_ADDR, k->row);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	20e2      	movs	r0, #226	; 0xe2
 8002668:	f000 f80a 	bl	8002680 <i2c_Select>
    i2c_Select(I2C_MUX_SLAVE_ADDR, k->col);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	785b      	ldrb	r3, [r3, #1]
 8002670:	4619      	mov	r1, r3
 8002672:	20e0      	movs	r0, #224	; 0xe0
 8002674:	f000 f804 	bl	8002680 <i2c_Select>
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(uint8_t mux_addr, uint8_t i) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
 8002686:	4603      	mov	r3, r0
 8002688:	460a      	mov	r2, r1
 800268a:	71fb      	strb	r3, [r7, #7]
 800268c:	4613      	mov	r3, r2
 800268e:	71bb      	strb	r3, [r7, #6]
    if (i > 7) return;
 8002690:	79bb      	ldrb	r3, [r7, #6]
 8002692:	2b07      	cmp	r3, #7
 8002694:	d810      	bhi.n	80026b8 <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 8002696:	79bb      	ldrb	r3, [r7, #6]
 8002698:	2201      	movs	r2, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, mux_addr, temp, 1, 100);
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	b299      	uxth	r1, r3
 80026a6:	f107 020c 	add.w	r2, r7, #12
 80026aa:	2364      	movs	r3, #100	; 0x64
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2301      	movs	r3, #1
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <i2c_Select+0x40>)
 80026b2:	f001 fcbb 	bl	800402c <HAL_I2C_Master_Transmit>
 80026b6:	e000      	b.n	80026ba <i2c_Select+0x3a>
    if (i > 7) return;
 80026b8:	bf00      	nop
}
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20002580 	.word	0x20002580

080026c4 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
    int8_t init_diff = Knob_Map(k, k->init_value, MIDI_MAX) - Knob_Map(k, k->value, MIDI_MAX);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7e9b      	ldrb	r3, [r3, #26]
 80026d0:	227f      	movs	r2, #127	; 0x7f
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7fe fc8b 	bl	8000ff0 <Knob_Map>
 80026da:	4603      	mov	r3, r0
 80026dc:	461c      	mov	r4, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7edb      	ldrb	r3, [r3, #27]
 80026e2:	227f      	movs	r2, #127	; 0x7f
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe fc82 	bl	8000ff0 <Knob_Map>
 80026ec:	4603      	mov	r3, r0
 80026ee:	1ae3      	subs	r3, r4, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 80026f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bfb8      	it	lt
 80026fc:	425b      	neglt	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	ee07 3a90 	vmov	s15, r3
 8002704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002708:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80027f4 <update_init_indicator+0x130>
 800270c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002710:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80027f8 <update_init_indicator+0x134>
 8002714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800271c:	edc7 7a00 	vstr	s15, [r7]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 8002724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <update_init_indicator+0x6c>
 800272c:	4b33      	ldr	r3, [pc, #204]	; (80027fc <update_init_indicator+0x138>)
 800272e:	e05c      	b.n	80027ea <update_init_indicator+0x126>

    if (init_pct < 15) {
 8002730:	7bbb      	ldrb	r3, [r7, #14]
 8002732:	2b0e      	cmp	r3, #14
 8002734:	d807      	bhi.n	8002746 <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 8002736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	dd01      	ble.n	8002742 <update_init_indicator+0x7e>
 800273e:	4b30      	ldr	r3, [pc, #192]	; (8002800 <update_init_indicator+0x13c>)
 8002740:	e053      	b.n	80027ea <update_init_indicator+0x126>
        else return "        <      ";
 8002742:	4b30      	ldr	r3, [pc, #192]	; (8002804 <update_init_indicator+0x140>)
 8002744:	e051      	b.n	80027ea <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 8002746:	7bbb      	ldrb	r3, [r7, #14]
 8002748:	2b0e      	cmp	r3, #14
 800274a:	d90a      	bls.n	8002762 <update_init_indicator+0x9e>
 800274c:	7bbb      	ldrb	r3, [r7, #14]
 800274e:	2b1d      	cmp	r3, #29
 8002750:	d807      	bhi.n	8002762 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	2b00      	cmp	r3, #0
 8002758:	dd01      	ble.n	800275e <update_init_indicator+0x9a>
 800275a:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <update_init_indicator+0x144>)
 800275c:	e045      	b.n	80027ea <update_init_indicator+0x126>
        else return "        <<     ";
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <update_init_indicator+0x148>)
 8002760:	e043      	b.n	80027ea <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 8002762:	7bbb      	ldrb	r3, [r7, #14]
 8002764:	2b1d      	cmp	r3, #29
 8002766:	d90a      	bls.n	800277e <update_init_indicator+0xba>
 8002768:	7bbb      	ldrb	r3, [r7, #14]
 800276a:	2b2c      	cmp	r3, #44	; 0x2c
 800276c:	d807      	bhi.n	800277e <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 800276e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	dd01      	ble.n	800277a <update_init_indicator+0xb6>
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <update_init_indicator+0x14c>)
 8002778:	e037      	b.n	80027ea <update_init_indicator+0x126>
        else return "        <<<    ";
 800277a:	4b26      	ldr	r3, [pc, #152]	; (8002814 <update_init_indicator+0x150>)
 800277c:	e035      	b.n	80027ea <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 800277e:	7bbb      	ldrb	r3, [r7, #14]
 8002780:	2b2c      	cmp	r3, #44	; 0x2c
 8002782:	d90a      	bls.n	800279a <update_init_indicator+0xd6>
 8002784:	7bbb      	ldrb	r3, [r7, #14]
 8002786:	2b3c      	cmp	r3, #60	; 0x3c
 8002788:	d807      	bhi.n	800279a <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 800278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278e:	2b00      	cmp	r3, #0
 8002790:	dd01      	ble.n	8002796 <update_init_indicator+0xd2>
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <update_init_indicator+0x154>)
 8002794:	e029      	b.n	80027ea <update_init_indicator+0x126>
        else return "        <<<<   ";
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <update_init_indicator+0x158>)
 8002798:	e027      	b.n	80027ea <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 800279a:	7bbb      	ldrb	r3, [r7, #14]
 800279c:	2b3c      	cmp	r3, #60	; 0x3c
 800279e:	d90a      	bls.n	80027b6 <update_init_indicator+0xf2>
 80027a0:	7bbb      	ldrb	r3, [r7, #14]
 80027a2:	2b4c      	cmp	r3, #76	; 0x4c
 80027a4:	d807      	bhi.n	80027b6 <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	dd01      	ble.n	80027b2 <update_init_indicator+0xee>
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <update_init_indicator+0x15c>)
 80027b0:	e01b      	b.n	80027ea <update_init_indicator+0x126>
        else return "        <<<<<  ";
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <update_init_indicator+0x160>)
 80027b4:	e019      	b.n	80027ea <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 80027b6:	7bbb      	ldrb	r3, [r7, #14]
 80027b8:	2b4c      	cmp	r3, #76	; 0x4c
 80027ba:	d90a      	bls.n	80027d2 <update_init_indicator+0x10e>
 80027bc:	7bbb      	ldrb	r3, [r7, #14]
 80027be:	2b5c      	cmp	r3, #92	; 0x5c
 80027c0:	d807      	bhi.n	80027d2 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	dd01      	ble.n	80027ce <update_init_indicator+0x10a>
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <update_init_indicator+0x164>)
 80027cc:	e00d      	b.n	80027ea <update_init_indicator+0x126>
        else return "        <<<<<< ";
 80027ce:	4b17      	ldr	r3, [pc, #92]	; (800282c <update_init_indicator+0x168>)
 80027d0:	e00b      	b.n	80027ea <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 80027d2:	7bbb      	ldrb	r3, [r7, #14]
 80027d4:	2b5c      	cmp	r3, #92	; 0x5c
 80027d6:	d907      	bls.n	80027e8 <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 80027d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	dd01      	ble.n	80027e4 <update_init_indicator+0x120>
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <update_init_indicator+0x16c>)
 80027e2:	e002      	b.n	80027ea <update_init_indicator+0x126>
        else return "        <<<<<<<";
 80027e4:	4b13      	ldr	r3, [pc, #76]	; (8002834 <update_init_indicator+0x170>)
 80027e6:	e000      	b.n	80027ea <update_init_indicator+0x126>
    } else {
        return " ";
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <update_init_indicator+0x174>)
    }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd90      	pop	{r4, r7, pc}
 80027f2:	bf00      	nop
 80027f4:	42fe0000 	.word	0x42fe0000
 80027f8:	42c80000 	.word	0x42c80000
 80027fc:	08013534 	.word	0x08013534
 8002800:	08013544 	.word	0x08013544
 8002804:	08013554 	.word	0x08013554
 8002808:	08013564 	.word	0x08013564
 800280c:	08013574 	.word	0x08013574
 8002810:	08013584 	.word	0x08013584
 8002814:	08013594 	.word	0x08013594
 8002818:	080135a4 	.word	0x080135a4
 800281c:	080135b4 	.word	0x080135b4
 8002820:	080135c4 	.word	0x080135c4
 8002824:	080135d4 	.word	0x080135d4
 8002828:	080135e4 	.word	0x080135e4
 800282c:	080135f4 	.word	0x080135f4
 8002830:	08013604 	.word	0x08013604
 8002834:	08013614 	.word	0x08013614
 8002838:	08013624 	.word	0x08013624

0800283c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_MspInit+0x4c>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <HAL_MspInit+0x4c>)
 800284c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002850:	6453      	str	r3, [r2, #68]	; 0x44
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_MspInit+0x4c>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_MspInit+0x4c>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_MspInit+0x4c>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_MspInit+0x4c>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a17      	ldr	r2, [pc, #92]	; (8002908 <HAL_ADC_MspInit+0x7c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d127      	bne.n	80028fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_ADC_MspInit+0x80>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a15      	ldr	r2, [pc, #84]	; (800290c <HAL_ADC_MspInit+0x80>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_ADC_MspInit+0x80>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <HAL_ADC_MspInit+0x80>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a0e      	ldr	r2, [pc, #56]	; (800290c <HAL_ADC_MspInit+0x80>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <HAL_ADC_MspInit+0x80>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80028e6:	230f      	movs	r3, #15
 80028e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ea:	2303      	movs	r3, #3
 80028ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	4619      	mov	r1, r3
 80028f8:	4805      	ldr	r0, [pc, #20]	; (8002910 <HAL_ADC_MspInit+0x84>)
 80028fa:	f001 f883 	bl	8003a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	; 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40012000 	.word	0x40012000
 800290c:	40023800 	.word	0x40023800
 8002910:	40020000 	.word	0x40020000

08002914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_I2C_MspInit+0x84>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d12b      	bne.n	800298e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_I2C_MspInit+0x88>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a17      	ldr	r2, [pc, #92]	; (800299c <HAL_I2C_MspInit+0x88>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_I2C_MspInit+0x88>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002952:	23c0      	movs	r3, #192	; 0xc0
 8002954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002956:	2312      	movs	r3, #18
 8002958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800295a:	2301      	movs	r3, #1
 800295c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295e:	2303      	movs	r3, #3
 8002960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002962:	2304      	movs	r3, #4
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	480c      	ldr	r0, [pc, #48]	; (80029a0 <HAL_I2C_MspInit+0x8c>)
 800296e:	f001 f849 	bl	8003a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_I2C_MspInit+0x88>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_I2C_MspInit+0x88>)
 800297c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_I2C_MspInit+0x88>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800298e:	bf00      	nop
 8002990:	3728      	adds	r7, #40	; 0x28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40005400 	.word	0x40005400
 800299c:	40023800 	.word	0x40023800
 80029a0:	40020400 	.word	0x40020400

080029a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <HAL_RTC_MspInit+0x24>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d102      	bne.n	80029bc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_RTC_MspInit+0x28>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40002800 	.word	0x40002800
 80029cc:	42470e3c 	.word	0x42470e3c

080029d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a29      	ldr	r2, [pc, #164]	; (8002a94 <HAL_SD_MspInit+0xc4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d14b      	bne.n	8002a8a <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_SD_MspInit+0xc8>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <HAL_SD_MspInit+0xc8>)
 80029fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_SD_MspInit+0xc8>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_SD_MspInit+0xc8>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <HAL_SD_MspInit+0xc8>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_SD_MspInit+0xc8>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_SD_MspInit+0xc8>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a19      	ldr	r2, [pc, #100]	; (8002a98 <HAL_SD_MspInit+0xc8>)
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <HAL_SD_MspInit+0xc8>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8002a46:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a58:	230c      	movs	r3, #12
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4619      	mov	r1, r3
 8002a62:	480e      	ldr	r0, [pc, #56]	; (8002a9c <HAL_SD_MspInit+0xcc>)
 8002a64:	f000 ffce 	bl	8003a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 8002a68:	f248 0330 	movw	r3, #32816	; 0x8030
 8002a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a76:	2303      	movs	r3, #3
 8002a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	4619      	mov	r1, r3
 8002a84:	4806      	ldr	r0, [pc, #24]	; (8002aa0 <HAL_SD_MspInit+0xd0>)
 8002a86:	f000 ffbd 	bl	8003a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3728      	adds	r7, #40	; 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40020000 	.word	0x40020000
 8002aa0:	40020400 	.word	0x40020400

08002aa4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <NMI_Handler+0x4>

08002aaa <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8002aae:	e7fe      	b.n	8002aae <HardFault_Handler+0x4>

08002ab0 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <MemManage_Handler+0x4>

08002ab6 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8002aba:	e7fe      	b.n	8002aba <BusFault_Handler+0x4>

08002abc <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <UsageFault_Handler+0x4>

08002ac2 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	e046      	b.n	8002b86 <SysTick_Handler+0x9a>
        GPIO_TypeDef *t = (i == BUTTON_MENU) ? GPIO_PORT_BUTTON_6 : GPIO_PORT_BUTTONS_1TO5;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d101      	bne.n	8002b02 <SysTick_Handler+0x16>
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <SysTick_Handler+0xac>)
 8002b00:	e000      	b.n	8002b04 <SysTick_Handler+0x18>
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <SysTick_Handler+0xb0>)
 8002b04:	60bb      	str	r3, [r7, #8]
        uint8_t reading = HAL_GPIO_ReadPin(t, btnPins[i]);
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <SysTick_Handler+0xb4>)
 8002b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	68b8      	ldr	r0, [r7, #8]
 8002b12:	f001 f8fb 	bl	8003d0c <HAL_GPIO_ReadPin>
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]

        if (reading == btnStatesLast[i] && reading != btnStates[i]) {
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	4a21      	ldr	r2, [pc, #132]	; (8002ba4 <SysTick_Handler+0xb8>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	79fa      	ldrb	r2, [r7, #7]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d128      	bne.n	8002b78 <SysTick_Handler+0x8c>
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <SysTick_Handler+0xbc>)
 8002b2a:	5cd3      	ldrb	r3, [r2, r3]
 8002b2c:	79fa      	ldrb	r2, [r7, #7]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d022      	beq.n	8002b78 <SysTick_Handler+0x8c>
            btnStates[i] = reading;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	491c      	ldr	r1, [pc, #112]	; (8002ba8 <SysTick_Handler+0xbc>)
 8002b36:	79fa      	ldrb	r2, [r7, #7]
 8002b38:	54ca      	strb	r2, [r1, r3]

            if (btnStates[i] == GPIO_PIN_RESET) {
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <SysTick_Handler+0xbc>)
 8002b3e:	5cd3      	ldrb	r3, [r2, r3]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d119      	bne.n	8002b78 <SysTick_Handler+0x8c>
                if (i == BUTTON_MENU) {
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d10e      	bne.n	8002b68 <SysTick_Handler+0x7c>
                    isMenuActive = !isMenuActive;
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <SysTick_Handler+0xc0>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	bf14      	ite	ne
 8002b52:	2301      	movne	r3, #1
 8002b54:	2300      	moveq	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f083 0301 	eor.w	r3, r3, #1
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <SysTick_Handler+0xc0>)
 8002b66:	701a      	strb	r2, [r3, #0]
                }
                HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[i]);
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	4a11      	ldr	r2, [pc, #68]	; (8002bb0 <SysTick_Handler+0xc4>)
 8002b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b70:	4619      	mov	r1, r3
 8002b72:	4810      	ldr	r0, [pc, #64]	; (8002bb4 <SysTick_Handler+0xc8>)
 8002b74:	f001 f8fb 	bl	8003d6e <HAL_GPIO_TogglePin>
            }
        }

        btnStatesLast[i] = reading;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	490a      	ldr	r1, [pc, #40]	; (8002ba4 <SysTick_Handler+0xb8>)
 8002b7c:	79fa      	ldrb	r2, [r7, #7]
 8002b7e:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	3301      	adds	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d9b5      	bls.n	8002af8 <SysTick_Handler+0xc>
    }
    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002b8c:	f000 f9f2 	bl	8002f74 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	20000030 	.word	0x20000030
 8002ba4:	20000028 	.word	0x20000028
 8002ba8:	20000020 	.word	0x20000020
 8002bac:	2000261c 	.word	0x2000261c
 8002bb0:	2000003c 	.word	0x2000003c
 8002bb4:	40020400 	.word	0x40020400

08002bb8 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <OTG_FS_IRQHandler+0x10>)
 8002bbe:	f002 f81c 	bl	8004bfa <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200030c0 	.word	0x200030c0

08002bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
	return 1;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <_kill>:

int _kill(int pid, int sig)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002be6:	f00d fb3f 	bl	8010268 <__errno>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2216      	movs	r2, #22
 8002bee:	601a      	str	r2, [r3, #0]
	return -1;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_exit>:

void _exit (int status)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffe7 	bl	8002bdc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c0e:	e7fe      	b.n	8002c0e <_exit+0x12>

08002c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e00a      	b.n	8002c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c22:	f3af 8000 	nop.w
 8002c26:	4601      	mov	r1, r0
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	60ba      	str	r2, [r7, #8]
 8002c2e:	b2ca      	uxtb	r2, r1
 8002c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dbf0      	blt.n	8002c22 <_read+0x12>
	}

return len;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e009      	b.n	8002c70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	60ba      	str	r2, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	dbf1      	blt.n	8002c5c <_write+0x12>
	}
	return len;
 8002c78:	687b      	ldr	r3, [r7, #4]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_close>:

int _close(int file)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
	return -1;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002caa:	605a      	str	r2, [r3, #4]
	return 0;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <_isatty>:

int _isatty(int file)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
	return 1;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
	return 0;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf4:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <_sbrk+0x5c>)
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <_sbrk+0x60>)
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <_sbrk+0x64>)
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <_sbrk+0x68>)
 8002d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d207      	bcs.n	8002d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d1c:	f00d faa4 	bl	8010268 <__errno>
 8002d20:	4603      	mov	r3, r0
 8002d22:	220c      	movs	r2, #12
 8002d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	e009      	b.n	8002d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <_sbrk+0x64>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <_sbrk+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <_sbrk+0x64>)
 8002d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20020000 	.word	0x20020000
 8002d4c:	00000400 	.word	0x00000400
 8002d50:	20000760 	.word	0x20000760
 8002d54:	200034d8 	.word	0x200034d8

08002d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <SystemInit+0x20>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <SystemInit+0x20>)
 8002d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	2302      	movs	r3, #2
 8002d94:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002d96:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <SystemCoreClockUpdate+0xec>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d011      	beq.n	8002dca <SystemCoreClockUpdate+0x4e>
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d844      	bhi.n	8002e36 <SystemCoreClockUpdate+0xba>
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <SystemCoreClockUpdate+0x3e>
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d004      	beq.n	8002dc2 <SystemCoreClockUpdate+0x46>
 8002db8:	e03d      	b.n	8002e36 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002dba:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <SystemCoreClockUpdate+0xf0>)
 8002dbc:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <SystemCoreClockUpdate+0xf4>)
 8002dbe:	601a      	str	r2, [r3, #0]
      break;
 8002dc0:	e03d      	b.n	8002e3e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <SystemCoreClockUpdate+0xf0>)
 8002dc4:	4a2b      	ldr	r2, [pc, #172]	; (8002e74 <SystemCoreClockUpdate+0xf8>)
 8002dc6:	601a      	str	r2, [r3, #0]
      break;
 8002dc8:	e039      	b.n	8002e3e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002dca:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <SystemCoreClockUpdate+0xec>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	0d9b      	lsrs	r3, r3, #22
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <SystemCoreClockUpdate+0xec>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dde:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002de6:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <SystemCoreClockUpdate+0xf8>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <SystemCoreClockUpdate+0xec>)
 8002df0:	6852      	ldr	r2, [r2, #4]
 8002df2:	0992      	lsrs	r2, r2, #6
 8002df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002df8:	fb02 f303 	mul.w	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e00b      	b.n	8002e18 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002e00:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <SystemCoreClockUpdate+0xf4>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <SystemCoreClockUpdate+0xec>)
 8002e0a:	6852      	ldr	r2, [r2, #4]
 8002e0c:	0992      	lsrs	r2, r2, #6
 8002e0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <SystemCoreClockUpdate+0xec>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	0c1b      	lsrs	r3, r3, #16
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	3301      	adds	r3, #1
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <SystemCoreClockUpdate+0xf0>)
 8002e32:	6013      	str	r3, [r2, #0]
      break;
 8002e34:	e003      	b.n	8002e3e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <SystemCoreClockUpdate+0xf0>)
 8002e38:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <SystemCoreClockUpdate+0xf4>)
 8002e3a:	601a      	str	r2, [r3, #0]
      break;
 8002e3c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <SystemCoreClockUpdate+0xec>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	4a0b      	ldr	r2, [pc, #44]	; (8002e78 <SystemCoreClockUpdate+0xfc>)
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <SystemCoreClockUpdate+0xf0>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <SystemCoreClockUpdate+0xf0>)
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	20000048 	.word	0x20000048
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	017d7840 	.word	0x017d7840
 8002e78:	080149d8 	.word	0x080149d8

08002e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e80:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e82:	490e      	ldr	r1, [pc, #56]	; (8002ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e84:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e88:	e002      	b.n	8002e90 <LoopCopyDataInit>

08002e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8e:	3304      	adds	r3, #4

08002e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e94:	d3f9      	bcc.n	8002e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e96:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e98:	4c0b      	ldr	r4, [pc, #44]	; (8002ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e9c:	e001      	b.n	8002ea2 <LoopFillZerobss>

08002e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea0:	3204      	adds	r2, #4

08002ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea4:	d3fb      	bcc.n	8002e9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ea6:	f7ff ff57 	bl	8002d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eaa:	f00d f9e3 	bl	8010274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eae:	f7fe f903 	bl	80010b8 <main>
  bx  lr    
 8002eb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ebc:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8002ec0:	0801528c 	.word	0x0801528c
  ldr r2, =_sbss
 8002ec4:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8002ec8:	200034d8 	.word	0x200034d8

08002ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ecc:	e7fe      	b.n	8002ecc <ADC_IRQHandler>
	...

08002ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_Init+0x40>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <HAL_Init+0x40>)
 8002eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_Init+0x40>)
 8002ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_Init+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <HAL_Init+0x40>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef8:	2003      	movs	r0, #3
 8002efa:	f000 fd41 	bl	8003980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f000 f808 	bl	8002f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f04:	f7ff fc9a 	bl	800283c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00

08002f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_InitTick+0x54>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_InitTick+0x58>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fd59 	bl	80039ea <HAL_SYSTICK_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00e      	b.n	8002f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0f      	cmp	r3, #15
 8002f46:	d80a      	bhi.n	8002f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	f000 fd21 	bl	8003996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f54:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <HAL_InitTick+0x5c>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000048 	.word	0x20000048
 8002f6c:	20000050 	.word	0x20000050
 8002f70:	2000004c 	.word	0x2000004c

08002f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_IncTick+0x20>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_IncTick+0x24>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <HAL_IncTick+0x24>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000050 	.word	0x20000050
 8002f98:	20002780 	.word	0x20002780

08002f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_GetTick+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20002780 	.word	0x20002780

08002fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff ffee 	bl	8002f9c <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d005      	beq.n	8002fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_Delay+0x44>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fda:	bf00      	nop
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f7      	bhi.n	8002fdc <HAL_Delay+0x28>
  {
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000050 	.word	0x20000050

08002ffc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e033      	b.n	800307a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff fc36 	bl	800288c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	d118      	bne.n	800306c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003042:	f023 0302 	bic.w	r3, r3, #2
 8003046:	f043 0202 	orr.w	r2, r3, #2
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 faca 	bl	80035e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f023 0303 	bic.w	r3, r3, #3
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
 800306a:	e001      	b.n	8003070 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_ADC_Start+0x1a>
 800309a:	2302      	movs	r3, #2
 800309c:	e097      	b.n	80031ce <HAL_ADC_Start+0x14a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d018      	beq.n	80030e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030c4:	4b45      	ldr	r3, [pc, #276]	; (80031dc <HAL_ADC_Start+0x158>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a45      	ldr	r2, [pc, #276]	; (80031e0 <HAL_ADC_Start+0x15c>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0c9a      	lsrs	r2, r3, #18
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80030d8:	e002      	b.n	80030e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3b01      	subs	r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f9      	bne.n	80030da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d15f      	bne.n	80031b4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800311e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003132:	d106      	bne.n	8003142 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	f023 0206 	bic.w	r2, r3, #6
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	645a      	str	r2, [r3, #68]	; 0x44
 8003140:	e002      	b.n	8003148 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_ADC_Start+0x160>)
 8003152:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800315c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10f      	bne.n	800318a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d129      	bne.n	80031cc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	e020      	b.n	80031cc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <HAL_ADC_Start+0x164>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d11b      	bne.n	80031cc <HAL_ADC_Start+0x148>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d114      	bne.n	80031cc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	e00b      	b.n	80031cc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f043 0210 	orr.w	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000048 	.word	0x20000048
 80031e0:	431bde83 	.word	0x431bde83
 80031e4:	40012300 	.word	0x40012300
 80031e8:	40012000 	.word	0x40012000

080031ec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Stop+0x16>
 80031fe:	2302      	movs	r3, #2
 8003200:	e021      	b.n	8003246 <HAL_ADC_Stop+0x5a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d109      	bne.n	800323c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326e:	d113      	bne.n	8003298 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800327a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327e:	d10b      	bne.n	8003298 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e063      	b.n	8003360 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003298:	f7ff fe80 	bl	8002f9c <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800329e:	e021      	b.n	80032e4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d01d      	beq.n	80032e4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_ADC_PollForConversion+0x6c>
 80032ae:	f7ff fe75 	bl	8002f9c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d212      	bcs.n	80032e4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d00b      	beq.n	80032e4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f043 0204 	orr.w	r2, r3, #4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e03d      	b.n	8003360 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d1d6      	bne.n	80032a0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f06f 0212 	mvn.w	r2, #18
 80032fa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d123      	bne.n	800335e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800331a:	2b00      	cmp	r3, #0
 800331c:	d11f      	bne.n	800335e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003328:	2b00      	cmp	r3, #0
 800332a:	d006      	beq.n	800333a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003336:	2b00      	cmp	r3, #0
 8003338:	d111      	bne.n	800335e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f043 0201 	orr.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x1c>
 800339c:	2302      	movs	r3, #2
 800339e:	e113      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x244>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b09      	cmp	r3, #9
 80033ae:	d925      	bls.n	80033fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68d9      	ldr	r1, [r3, #12]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	3b1e      	subs	r3, #30
 80033c6:	2207      	movs	r2, #7
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43da      	mvns	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	400a      	ands	r2, r1
 80033d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68d9      	ldr	r1, [r3, #12]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4618      	mov	r0, r3
 80033e8:	4603      	mov	r3, r0
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4403      	add	r3, r0
 80033ee:	3b1e      	subs	r3, #30
 80033f0:	409a      	lsls	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	e022      	b.n	8003442 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6919      	ldr	r1, [r3, #16]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	2207      	movs	r2, #7
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	400a      	ands	r2, r1
 800341e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6919      	ldr	r1, [r3, #16]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	4618      	mov	r0, r3
 8003432:	4603      	mov	r3, r0
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4403      	add	r3, r0
 8003438:	409a      	lsls	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b06      	cmp	r3, #6
 8003448:	d824      	bhi.n	8003494 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	3b05      	subs	r3, #5
 800345c:	221f      	movs	r2, #31
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	400a      	ands	r2, r1
 800346a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	4618      	mov	r0, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	3b05      	subs	r3, #5
 8003486:	fa00 f203 	lsl.w	r2, r0, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	635a      	str	r2, [r3, #52]	; 0x34
 8003492:	e04c      	b.n	800352e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b0c      	cmp	r3, #12
 800349a:	d824      	bhi.n	80034e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	3b23      	subs	r3, #35	; 0x23
 80034ae:	221f      	movs	r2, #31
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43da      	mvns	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	400a      	ands	r2, r1
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	4618      	mov	r0, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	3b23      	subs	r3, #35	; 0x23
 80034d8:	fa00 f203 	lsl.w	r2, r0, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
 80034e4:	e023      	b.n	800352e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	3b41      	subs	r3, #65	; 0x41
 80034f8:	221f      	movs	r2, #31
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43da      	mvns	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	400a      	ands	r2, r1
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	4618      	mov	r0, r3
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	3b41      	subs	r3, #65	; 0x41
 8003522:	fa00 f203 	lsl.w	r2, r0, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800352e:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <HAL_ADC_ConfigChannel+0x250>)
 8003530:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a28      	ldr	r2, [pc, #160]	; (80035d8 <HAL_ADC_ConfigChannel+0x254>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d10f      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1d8>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b12      	cmp	r3, #18
 8003542:	d10b      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <HAL_ADC_ConfigChannel+0x254>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d12b      	bne.n	80035be <HAL_ADC_ConfigChannel+0x23a>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <HAL_ADC_ConfigChannel+0x258>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x1f4>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b11      	cmp	r3, #17
 8003576:	d122      	bne.n	80035be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a11      	ldr	r2, [pc, #68]	; (80035dc <HAL_ADC_ConfigChannel+0x258>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d111      	bne.n	80035be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800359a:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <HAL_ADC_ConfigChannel+0x25c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <HAL_ADC_ConfigChannel+0x260>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	0c9a      	lsrs	r2, r3, #18
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035b0:	e002      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f9      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40012300 	.word	0x40012300
 80035d8:	40012000 	.word	0x40012000
 80035dc:	10000012 	.word	0x10000012
 80035e0:	20000048 	.word	0x20000048
 80035e4:	431bde83 	.word	0x431bde83

080035e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035f0:	4b79      	ldr	r3, [pc, #484]	; (80037d8 <ADC_Init+0x1f0>)
 80035f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	431a      	orrs	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800361c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	021a      	lsls	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6899      	ldr	r1, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	4a58      	ldr	r2, [pc, #352]	; (80037dc <ADC_Init+0x1f4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800368e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6899      	ldr	r1, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6899      	ldr	r1, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	e00f      	b.n	80036e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0202 	bic.w	r2, r2, #2
 80036f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6899      	ldr	r1, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7e1b      	ldrb	r3, [r3, #24]
 8003700:	005a      	lsls	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003722:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003732:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	3b01      	subs	r3, #1
 8003740:	035a      	lsls	r2, r3, #13
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	e007      	b.n	800375c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800375a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	3b01      	subs	r3, #1
 8003778:	051a      	lsls	r2, r3, #20
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800379e:	025a      	lsls	r2, r3, #9
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6899      	ldr	r1, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	029a      	lsls	r2, r3, #10
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40012300 	.word	0x40012300
 80037dc:	0f000001 	.word	0x0f000001

080037e0 <__NVIC_SetPriorityGrouping>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <__NVIC_SetPriorityGrouping+0x44>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037fc:	4013      	ands	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800380c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003812:	4a04      	ldr	r2, [pc, #16]	; (8003824 <__NVIC_SetPriorityGrouping+0x44>)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	60d3      	str	r3, [r2, #12]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_GetPriorityGrouping>:
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <__NVIC_GetPriorityGrouping+0x18>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	f003 0307 	and.w	r3, r3, #7
}
 8003836:	4618      	mov	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <__NVIC_EnableIRQ>:
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	2b00      	cmp	r3, #0
 8003854:	db0b      	blt.n	800386e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	4907      	ldr	r1, [pc, #28]	; (800387c <__NVIC_EnableIRQ+0x38>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2001      	movs	r0, #1
 8003866:	fa00 f202 	lsl.w	r2, r0, r2
 800386a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	e000e100 	.word	0xe000e100

08003880 <__NVIC_SetPriority>:
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003890:	2b00      	cmp	r3, #0
 8003892:	db0a      	blt.n	80038aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	b2da      	uxtb	r2, r3
 8003898:	490c      	ldr	r1, [pc, #48]	; (80038cc <__NVIC_SetPriority+0x4c>)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	440b      	add	r3, r1
 80038a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038a8:	e00a      	b.n	80038c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4908      	ldr	r1, [pc, #32]	; (80038d0 <__NVIC_SetPriority+0x50>)
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	3b04      	subs	r3, #4
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	440b      	add	r3, r1
 80038be:	761a      	strb	r2, [r3, #24]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000e100 	.word	0xe000e100
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <NVIC_EncodePriority>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	b089      	sub	sp, #36	; 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f1c3 0307 	rsb	r3, r3, #7
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	bf28      	it	cs
 80038f2:	2304      	movcs	r3, #4
 80038f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d902      	bls.n	8003904 <NVIC_EncodePriority+0x30>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3b03      	subs	r3, #3
 8003902:	e000      	b.n	8003906 <NVIC_EncodePriority+0x32>
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003908:	f04f 32ff 	mov.w	r2, #4294967295
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43da      	mvns	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	401a      	ands	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800391c:	f04f 31ff 	mov.w	r1, #4294967295
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	43d9      	mvns	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	4313      	orrs	r3, r2
}
 800392e:	4618      	mov	r0, r3
 8003930:	3724      	adds	r7, #36	; 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <SysTick_Config>:
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800394c:	d301      	bcc.n	8003952 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800394e:	2301      	movs	r3, #1
 8003950:	e00f      	b.n	8003972 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003952:	4a0a      	ldr	r2, [pc, #40]	; (800397c <SysTick_Config+0x40>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800395a:	210f      	movs	r1, #15
 800395c:	f04f 30ff 	mov.w	r0, #4294967295
 8003960:	f7ff ff8e 	bl	8003880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <SysTick_Config+0x40>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800396a:	4b04      	ldr	r3, [pc, #16]	; (800397c <SysTick_Config+0x40>)
 800396c:	2207      	movs	r2, #7
 800396e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	e000e010 	.word	0xe000e010

08003980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff29 	bl	80037e0 <__NVIC_SetPriorityGrouping>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a8:	f7ff ff3e 	bl	8003828 <__NVIC_GetPriorityGrouping>
 80039ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	6978      	ldr	r0, [r7, #20]
 80039b4:	f7ff ff8e 	bl	80038d4 <NVIC_EncodePriority>
 80039b8:	4602      	mov	r2, r0
 80039ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff5d 	bl	8003880 <__NVIC_SetPriority>
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff31 	bl	8003844 <__NVIC_EnableIRQ>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff ffa2 	bl	800393c <SysTick_Config>
 80039f8:	4603      	mov	r3, r0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	; 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e159      	b.n	8003cd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a20:	2201      	movs	r2, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f040 8148 	bne.w	8003cce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d005      	beq.n	8003a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d130      	bne.n	8003ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 0201 	and.w	r2, r3, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d017      	beq.n	8003af4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d123      	bne.n	8003b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	08da      	lsrs	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3208      	adds	r2, #8
 8003b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	220f      	movs	r2, #15
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	08da      	lsrs	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3208      	adds	r2, #8
 8003b42:	69b9      	ldr	r1, [r7, #24]
 8003b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0203 	and.w	r2, r3, #3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a2 	beq.w	8003cce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b57      	ldr	r3, [pc, #348]	; (8003cec <HAL_GPIO_Init+0x2e8>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	4a56      	ldr	r2, [pc, #344]	; (8003cec <HAL_GPIO_Init+0x2e8>)
 8003b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b98:	6453      	str	r3, [r2, #68]	; 0x44
 8003b9a:	4b54      	ldr	r3, [pc, #336]	; (8003cec <HAL_GPIO_Init+0x2e8>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ba6:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <HAL_GPIO_Init+0x2ec>)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	3302      	adds	r3, #2
 8003bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	220f      	movs	r2, #15
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a49      	ldr	r2, [pc, #292]	; (8003cf4 <HAL_GPIO_Init+0x2f0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d019      	beq.n	8003c06 <HAL_GPIO_Init+0x202>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a48      	ldr	r2, [pc, #288]	; (8003cf8 <HAL_GPIO_Init+0x2f4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <HAL_GPIO_Init+0x1fe>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a47      	ldr	r2, [pc, #284]	; (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00d      	beq.n	8003bfe <HAL_GPIO_Init+0x1fa>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a46      	ldr	r2, [pc, #280]	; (8003d00 <HAL_GPIO_Init+0x2fc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <HAL_GPIO_Init+0x1f6>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a45      	ldr	r2, [pc, #276]	; (8003d04 <HAL_GPIO_Init+0x300>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d101      	bne.n	8003bf6 <HAL_GPIO_Init+0x1f2>
 8003bf2:	2304      	movs	r3, #4
 8003bf4:	e008      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003bf6:	2307      	movs	r3, #7
 8003bf8:	e006      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e004      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e002      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_GPIO_Init+0x204>
 8003c06:	2300      	movs	r3, #0
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	f002 0203 	and.w	r2, r2, #3
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	4093      	lsls	r3, r2
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c18:	4935      	ldr	r1, [pc, #212]	; (8003cf0 <HAL_GPIO_Init+0x2ec>)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	3302      	adds	r3, #2
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c26:	4b38      	ldr	r3, [pc, #224]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c4a:	4a2f      	ldr	r2, [pc, #188]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c50:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c74:	4a24      	ldr	r2, [pc, #144]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c7a:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ca4:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc8:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <HAL_GPIO_Init+0x304>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	f67f aea2 	bls.w	8003a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	3724      	adds	r7, #36	; 0x24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40013800 	.word	0x40013800
 8003cf4:	40020000 	.word	0x40020000
 8003cf8:	40020400 	.word	0x40020400
 8003cfc:	40020800 	.word	0x40020800
 8003d00:	40020c00 	.word	0x40020c00
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40013c00 	.word	0x40013c00

08003d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
 8003d28:	e001      	b.n	8003d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d4c:	787b      	ldrb	r3, [r7, #1]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d58:	e003      	b.n	8003d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d5a:	887b      	ldrh	r3, [r7, #2]
 8003d5c:	041a      	lsls	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	619a      	str	r2, [r3, #24]
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	460b      	mov	r3, r1
 8003d78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d80:	887a      	ldrh	r2, [r7, #2]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4013      	ands	r3, r2
 8003d86:	041a      	lsls	r2, r3, #16
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	43d9      	mvns	r1, r3
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	400b      	ands	r3, r1
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	619a      	str	r2, [r3, #24]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e12b      	b.n	800400e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fe fda2 	bl	8002914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2224      	movs	r2, #36	; 0x24
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0201 	bic.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003df6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e08:	f002 fb4a 	bl	80064a0 <HAL_RCC_GetPCLK1Freq>
 8003e0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4a81      	ldr	r2, [pc, #516]	; (8004018 <HAL_I2C_Init+0x274>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d807      	bhi.n	8003e28 <HAL_I2C_Init+0x84>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a80      	ldr	r2, [pc, #512]	; (800401c <HAL_I2C_Init+0x278>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	bf94      	ite	ls
 8003e20:	2301      	movls	r3, #1
 8003e22:	2300      	movhi	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e006      	b.n	8003e36 <HAL_I2C_Init+0x92>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a7d      	ldr	r2, [pc, #500]	; (8004020 <HAL_I2C_Init+0x27c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	bf94      	ite	ls
 8003e30:	2301      	movls	r3, #1
 8003e32:	2300      	movhi	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e0e7      	b.n	800400e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a78      	ldr	r2, [pc, #480]	; (8004024 <HAL_I2C_Init+0x280>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	0c9b      	lsrs	r3, r3, #18
 8003e48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4a6a      	ldr	r2, [pc, #424]	; (8004018 <HAL_I2C_Init+0x274>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d802      	bhi.n	8003e78 <HAL_I2C_Init+0xd4>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3301      	adds	r3, #1
 8003e76:	e009      	b.n	8003e8c <HAL_I2C_Init+0xe8>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	4a69      	ldr	r2, [pc, #420]	; (8004028 <HAL_I2C_Init+0x284>)
 8003e84:	fba2 2303 	umull	r2, r3, r2, r3
 8003e88:	099b      	lsrs	r3, r3, #6
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	495c      	ldr	r1, [pc, #368]	; (8004018 <HAL_I2C_Init+0x274>)
 8003ea8:	428b      	cmp	r3, r1
 8003eaa:	d819      	bhi.n	8003ee0 <HAL_I2C_Init+0x13c>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1e59      	subs	r1, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eba:	1c59      	adds	r1, r3, #1
 8003ebc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ec0:	400b      	ands	r3, r1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_I2C_Init+0x138>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1e59      	subs	r1, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eda:	e051      	b.n	8003f80 <HAL_I2C_Init+0x1dc>
 8003edc:	2304      	movs	r3, #4
 8003ede:	e04f      	b.n	8003f80 <HAL_I2C_Init+0x1dc>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d111      	bne.n	8003f0c <HAL_I2C_Init+0x168>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1e58      	subs	r0, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6859      	ldr	r1, [r3, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	440b      	add	r3, r1
 8003ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e012      	b.n	8003f32 <HAL_I2C_Init+0x18e>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1e58      	subs	r0, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	0099      	lsls	r1, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Init+0x196>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e022      	b.n	8003f80 <HAL_I2C_Init+0x1dc>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10e      	bne.n	8003f60 <HAL_I2C_Init+0x1bc>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1e58      	subs	r0, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	440b      	add	r3, r1
 8003f50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f54:	3301      	adds	r3, #1
 8003f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5e:	e00f      	b.n	8003f80 <HAL_I2C_Init+0x1dc>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1e58      	subs	r0, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6859      	ldr	r1, [r3, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	0099      	lsls	r1, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f76:	3301      	adds	r3, #1
 8003f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	6809      	ldr	r1, [r1, #0]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6911      	ldr	r1, [r2, #16]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68d2      	ldr	r2, [r2, #12]
 8003fba:	4311      	orrs	r1, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	000186a0 	.word	0x000186a0
 800401c:	001e847f 	.word	0x001e847f
 8004020:	003d08ff 	.word	0x003d08ff
 8004024:	431bde83 	.word	0x431bde83
 8004028:	10624dd3 	.word	0x10624dd3

0800402c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	607a      	str	r2, [r7, #4]
 8004036:	461a      	mov	r2, r3
 8004038:	460b      	mov	r3, r1
 800403a:	817b      	strh	r3, [r7, #10]
 800403c:	4613      	mov	r3, r2
 800403e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004040:	f7fe ffac 	bl	8002f9c <HAL_GetTick>
 8004044:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b20      	cmp	r3, #32
 8004050:	f040 80e0 	bne.w	8004214 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2319      	movs	r3, #25
 800405a:	2201      	movs	r2, #1
 800405c:	4970      	ldr	r1, [pc, #448]	; (8004220 <HAL_I2C_Master_Transmit+0x1f4>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 faf4 	bl	800464c <I2C_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
 800406c:	e0d3      	b.n	8004216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_I2C_Master_Transmit+0x50>
 8004078:	2302      	movs	r3, #2
 800407a:	e0cc      	b.n	8004216 <HAL_I2C_Master_Transmit+0x1ea>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d007      	beq.n	80040a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2221      	movs	r2, #33	; 0x21
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2210      	movs	r2, #16
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	893a      	ldrh	r2, [r7, #8]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a50      	ldr	r2, [pc, #320]	; (8004224 <HAL_I2C_Master_Transmit+0x1f8>)
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040e4:	8979      	ldrh	r1, [r7, #10]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	6a3a      	ldr	r2, [r7, #32]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f996 	bl	800441c <I2C_MasterRequestWrite>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e08d      	b.n	8004216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004110:	e066      	b.n	80041e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	6a39      	ldr	r1, [r7, #32]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fb6e 	bl	80047f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00d      	beq.n	800413e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b04      	cmp	r3, #4
 8004128:	d107      	bne.n	800413a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e06b      	b.n	8004216 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	781a      	ldrb	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d11b      	bne.n	80041b4 <HAL_I2C_Master_Transmit+0x188>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	d017      	beq.n	80041b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	6a39      	ldr	r1, [r7, #32]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fb5e 	bl	800487a <I2C_WaitOnBTFFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00d      	beq.n	80041e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d107      	bne.n	80041dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e01a      	b.n	8004216 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d194      	bne.n	8004112 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	e000      	b.n	8004216 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004214:	2302      	movs	r3, #2
  }
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	00100002 	.word	0x00100002
 8004224:	ffff0000 	.word	0xffff0000

08004228 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	4603      	mov	r3, r0
 8004238:	817b      	strh	r3, [r7, #10]
 800423a:	460b      	mov	r3, r1
 800423c:	813b      	strh	r3, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004242:	f7fe feab 	bl	8002f9c <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	f040 80d9 	bne.w	8004408 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2319      	movs	r3, #25
 800425c:	2201      	movs	r2, #1
 800425e:	496d      	ldr	r1, [pc, #436]	; (8004414 <HAL_I2C_Mem_Write+0x1ec>)
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f9f3 	bl	800464c <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
 800426e:	e0cc      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_I2C_Mem_Write+0x56>
 800427a:	2302      	movs	r3, #2
 800427c:	e0c5      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d007      	beq.n	80042a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2221      	movs	r2, #33	; 0x21
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2240      	movs	r2, #64	; 0x40
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a3a      	ldr	r2, [r7, #32]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a4d      	ldr	r2, [pc, #308]	; (8004418 <HAL_I2C_Mem_Write+0x1f0>)
 80042e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042e6:	88f8      	ldrh	r0, [r7, #6]
 80042e8:	893a      	ldrh	r2, [r7, #8]
 80042ea:	8979      	ldrh	r1, [r7, #10]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	4603      	mov	r3, r0
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f912 	bl	8004520 <I2C_RequestMemoryWrite>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d052      	beq.n	80043a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e081      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 fa74 	bl	80047f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00d      	beq.n	8004332 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2b04      	cmp	r3, #4
 800431c:	d107      	bne.n	800432e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e06b      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b04      	cmp	r3, #4
 800436e:	d11b      	bne.n	80043a8 <HAL_I2C_Mem_Write+0x180>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	d017      	beq.n	80043a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1aa      	bne.n	8004306 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fa60 	bl	800487a <I2C_WaitOnBTFFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00d      	beq.n	80043dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d107      	bne.n	80043d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e016      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	00100002 	.word	0x00100002
 8004418:	ffff0000 	.word	0xffff0000

0800441c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	460b      	mov	r3, r1
 800442a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d006      	beq.n	8004446 <I2C_MasterRequestWrite+0x2a>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d003      	beq.n	8004446 <I2C_MasterRequestWrite+0x2a>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004444:	d108      	bne.n	8004458 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e00b      	b.n	8004470 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	2b12      	cmp	r3, #18
 800445e:	d107      	bne.n	8004470 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f8e5 	bl	800464c <I2C_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004496:	d103      	bne.n	80044a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e035      	b.n	8004510 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ac:	d108      	bne.n	80044c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ae:	897b      	ldrh	r3, [r7, #10]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044bc:	611a      	str	r2, [r3, #16]
 80044be:	e01b      	b.n	80044f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044c0:	897b      	ldrh	r3, [r7, #10]
 80044c2:	11db      	asrs	r3, r3, #7
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0306 	and.w	r3, r3, #6
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f063 030f 	orn	r3, r3, #15
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	490e      	ldr	r1, [pc, #56]	; (8004518 <I2C_MasterRequestWrite+0xfc>)
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f90b 	bl	80046fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e010      	b.n	8004510 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044ee:	897b      	ldrh	r3, [r7, #10]
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4907      	ldr	r1, [pc, #28]	; (800451c <I2C_MasterRequestWrite+0x100>)
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f8fb 	bl	80046fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	00010008 	.word	0x00010008
 800451c:	00010002 	.word	0x00010002

08004520 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	4608      	mov	r0, r1
 800452a:	4611      	mov	r1, r2
 800452c:	461a      	mov	r2, r3
 800452e:	4603      	mov	r3, r0
 8004530:	817b      	strh	r3, [r7, #10]
 8004532:	460b      	mov	r3, r1
 8004534:	813b      	strh	r3, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004548:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	2200      	movs	r2, #0
 8004552:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f878 	bl	800464c <I2C_WaitOnFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004570:	d103      	bne.n	800457a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e05f      	b.n	800463e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800457e:	897b      	ldrh	r3, [r7, #10]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800458c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	6a3a      	ldr	r2, [r7, #32]
 8004592:	492d      	ldr	r1, [pc, #180]	; (8004648 <I2C_RequestMemoryWrite+0x128>)
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f8b0 	bl	80046fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e04c      	b.n	800463e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045bc:	6a39      	ldr	r1, [r7, #32]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f91a 	bl	80047f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d107      	bne.n	80045e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e02b      	b.n	800463e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d105      	bne.n	80045f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ec:	893b      	ldrh	r3, [r7, #8]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]
 80045f6:	e021      	b.n	800463c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045f8:	893b      	ldrh	r3, [r7, #8]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004608:	6a39      	ldr	r1, [r7, #32]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f8f4 	bl	80047f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	2b04      	cmp	r3, #4
 800461c:	d107      	bne.n	800462e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e005      	b.n	800463e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004632:	893b      	ldrh	r3, [r7, #8]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	00010002 	.word	0x00010002

0800464c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800465c:	e025      	b.n	80046aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d021      	beq.n	80046aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004666:	f7fe fc99 	bl	8002f9c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d302      	bcc.n	800467c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d116      	bne.n	80046aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f043 0220 	orr.w	r2, r3, #32
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e023      	b.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d10d      	bne.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	43da      	mvns	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4013      	ands	r3, r2
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bf0c      	ite	eq
 80046c6:	2301      	moveq	r3, #1
 80046c8:	2300      	movne	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	e00c      	b.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	43da      	mvns	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4013      	ands	r3, r2
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bf0c      	ite	eq
 80046e2:	2301      	moveq	r3, #1
 80046e4:	2300      	movne	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d0b6      	beq.n	800465e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004708:	e051      	b.n	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004718:	d123      	bne.n	8004762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004728:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004732:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f043 0204 	orr.w	r2, r3, #4
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e046      	b.n	80047f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d021      	beq.n	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476a:	f7fe fc17 	bl	8002f9c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d116      	bne.n	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f043 0220 	orr.w	r2, r3, #32
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e020      	b.n	80047f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d10c      	bne.n	80047d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	43da      	mvns	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4013      	ands	r3, r2
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e00b      	b.n	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	43da      	mvns	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4013      	ands	r3, r2
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d18d      	bne.n	800470a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004804:	e02d      	b.n	8004862 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f878 	bl	80048fc <I2C_IsAcknowledgeFailed>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e02d      	b.n	8004872 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d021      	beq.n	8004862 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7fe fbbd 	bl	8002f9c <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d116      	bne.n	8004862 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f043 0220 	orr.w	r2, r3, #32
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e007      	b.n	8004872 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486c:	2b80      	cmp	r3, #128	; 0x80
 800486e:	d1ca      	bne.n	8004806 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004886:	e02d      	b.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f837 	bl	80048fc <I2C_IsAcknowledgeFailed>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e02d      	b.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489e:	d021      	beq.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a0:	f7fe fb7c 	bl	8002f9c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d302      	bcc.n	80048b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d116      	bne.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e007      	b.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d1ca      	bne.n	8004888 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004912:	d11b      	bne.n	800494c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800491c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	f043 0204 	orr.w	r2, r3, #4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800495a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800495c:	b08f      	sub	sp, #60	; 0x3c
 800495e:	af0a      	add	r7, sp, #40	; 0x28
 8004960:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e10f      	b.n	8004b8c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f00a f8de 	bl	800eb48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2203      	movs	r2, #3
 8004990:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f003 ff73 	bl	8008896 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	687e      	ldr	r6, [r7, #4]
 80049b8:	466d      	mov	r5, sp
 80049ba:	f106 0410 	add.w	r4, r6, #16
 80049be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80049ce:	1d33      	adds	r3, r6, #4
 80049d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049d2:	6838      	ldr	r0, [r7, #0]
 80049d4:	f003 fe4a 	bl	800866c <USB_CoreInit>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2202      	movs	r2, #2
 80049e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e0d0      	b.n	8004b8c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f003 ff61 	bl	80088b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
 80049fa:	e04a      	b.n	8004a92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049fc:	7bfa      	ldrb	r2, [r7, #15]
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	333d      	adds	r3, #61	; 0x3d
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a10:	7bfa      	ldrb	r2, [r7, #15]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	333c      	adds	r3, #60	; 0x3c
 8004a20:	7bfa      	ldrb	r2, [r7, #15]
 8004a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	b298      	uxth	r0, r3
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3342      	adds	r3, #66	; 0x42
 8004a38:	4602      	mov	r2, r0
 8004a3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a3c:	7bfa      	ldrb	r2, [r7, #15]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	333f      	adds	r3, #63	; 0x3f
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a50:	7bfa      	ldrb	r2, [r7, #15]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	3344      	adds	r3, #68	; 0x44
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a64:	7bfa      	ldrb	r2, [r7, #15]
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	3348      	adds	r3, #72	; 0x48
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a78:	7bfa      	ldrb	r2, [r7, #15]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	3350      	adds	r3, #80	; 0x50
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d3af      	bcc.n	80049fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	73fb      	strb	r3, [r7, #15]
 8004aa0:	e044      	b.n	8004b2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004aa2:	7bfa      	ldrb	r2, [r7, #15]
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ab8:	7bfa      	ldrb	r2, [r7, #15]
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	1a9b      	subs	r3, r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004aca:	7bfa      	ldrb	r2, [r7, #15]
 8004acc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ace:	7bfa      	ldrb	r2, [r7, #15]
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ae4:	7bfa      	ldrb	r2, [r7, #15]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004afa:	7bfa      	ldrb	r2, [r7, #15]
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b10:	7bfa      	ldrb	r2, [r7, #15]
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	4613      	mov	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
 8004b2c:	7bfa      	ldrb	r2, [r7, #15]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d3b5      	bcc.n	8004aa2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	687e      	ldr	r6, [r7, #4]
 8004b3e:	466d      	mov	r5, sp
 8004b40:	f106 0410 	add.w	r4, r6, #16
 8004b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b50:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b54:	1d33      	adds	r3, r6, #4
 8004b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b58:	6838      	ldr	r0, [r7, #0]
 8004b5a:	f003 fed7 	bl	800890c <USB_DevInit>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e00d      	b.n	8004b8c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f004 ff1f 	bl	80099c8 <USB_DevDisconnect>

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_PCD_Start+0x1c>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e020      	b.n	8004bf2 <HAL_PCD_Start+0x5e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d109      	bne.n	8004bd4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d005      	beq.n	8004bd4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f003 fe4b 	bl	8008874 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f004 fecf 	bl	8009986 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004bfa:	b590      	push	{r4, r7, lr}
 8004bfc:	b08d      	sub	sp, #52	; 0x34
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f004 ff8d 	bl	8009b30 <USB_GetMode>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f040 839d 	bne.w	8005358 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f004 fef1 	bl	8009a0a <USB_ReadInterrupts>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8393 	beq.w	8005356 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f004 fee8 	bl	8009a0a <USB_ReadInterrupts>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d107      	bne.n	8004c54 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f002 0202 	and.w	r2, r2, #2
 8004c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f004 fed6 	bl	8009a0a <USB_ReadInterrupts>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d161      	bne.n	8004d2c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0210 	bic.w	r2, r2, #16
 8004c76:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f003 020f 	and.w	r2, r3, #15
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	4413      	add	r3, r2
 8004c94:	3304      	adds	r3, #4
 8004c96:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	0c5b      	lsrs	r3, r3, #17
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d124      	bne.n	8004cee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d035      	beq.n	8004d1c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6a38      	ldr	r0, [r7, #32]
 8004cc4:	f004 fd3c 	bl	8009740 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cd4:	441a      	add	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	091b      	lsrs	r3, r3, #4
 8004ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ce6:	441a      	add	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	619a      	str	r2, [r3, #24]
 8004cec:	e016      	b.n	8004d1c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	0c5b      	lsrs	r3, r3, #17
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	2b06      	cmp	r3, #6
 8004cf8:	d110      	bne.n	8004d1c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d00:	2208      	movs	r2, #8
 8004d02:	4619      	mov	r1, r3
 8004d04:	6a38      	ldr	r0, [r7, #32]
 8004d06:	f004 fd1b 	bl	8009740 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d16:	441a      	add	r2, r3
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0210 	orr.w	r2, r2, #16
 8004d2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f004 fe6a 	bl	8009a0a <USB_ReadInterrupts>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d40:	d16e      	bne.n	8004e20 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f004 fe70 	bl	8009a30 <USB_ReadDevAllOutEpInterrupt>
 8004d50:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004d52:	e062      	b.n	8004e1a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d057      	beq.n	8004e0e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	4611      	mov	r1, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f004 fe95 	bl	8009a98 <USB_ReadDevOutEPInterrupt>
 8004d6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00c      	beq.n	8004d94 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	461a      	mov	r2, r3
 8004d88:	2301      	movs	r3, #1
 8004d8a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fdb0 	bl	80058f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00c      	beq.n	8004db8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004daa:	461a      	mov	r2, r3
 8004dac:	2308      	movs	r3, #8
 8004dae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 feaa 	bl	8005b0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d008      	beq.n	8004dd4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dea:	461a      	mov	r2, r3
 8004dec:	2320      	movs	r3, #32
 8004dee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	461a      	mov	r2, r3
 8004e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e0c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	3301      	adds	r3, #1
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d199      	bne.n	8004d54 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f004 fdf0 	bl	8009a0a <USB_ReadInterrupts>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e34:	f040 80c0 	bne.w	8004fb8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f004 fe11 	bl	8009a64 <USB_ReadDevAllInEpInterrupt>
 8004e42:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004e48:	e0b2      	b.n	8004fb0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80a7 	beq.w	8004fa4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f004 fe37 	bl	8009ad4 <USB_ReadDevInEPInterrupt>
 8004e66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d057      	beq.n	8004f22 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	2201      	movs	r2, #1
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69f9      	ldr	r1, [r7, #28]
 8004e8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e92:	4013      	ands	r3, r2
 8004e94:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d132      	bne.n	8004f16 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3348      	adds	r3, #72	; 0x48
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4403      	add	r3, r0
 8004ed0:	3344      	adds	r3, #68	; 0x44
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4419      	add	r1, r3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4403      	add	r3, r0
 8004ee4:	3348      	adds	r3, #72	; 0x48
 8004ee6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d113      	bne.n	8004f16 <HAL_PCD_IRQHandler+0x31c>
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	3350      	adds	r3, #80	; 0x50
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d108      	bne.n	8004f16 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f0e:	461a      	mov	r2, r3
 8004f10:	2101      	movs	r1, #1
 8004f12:	f004 fe3f 	bl	8009b94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f009 fe94 	bl	800ec4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f38:	461a      	mov	r2, r3
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f54:	461a      	mov	r2, r3
 8004f56:	2310      	movs	r3, #16
 8004f58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	461a      	mov	r2, r3
 8004f72:	2340      	movs	r3, #64	; 0x40
 8004f74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	2302      	movs	r3, #2
 8004f90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fc1b 	bl	80057da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f47f af49 	bne.w	8004e4a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f004 fd24 	bl	8009a0a <USB_ReadInterrupts>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fcc:	d122      	bne.n	8005014 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d108      	bne.n	8004ffe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fe26 	bl	8005c48 <HAL_PCDEx_LPM_Callback>
 8004ffc:	e002      	b.n	8005004 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f009 fe90 	bl	800ed24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695a      	ldr	r2, [r3, #20]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005012:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f004 fcf6 	bl	8009a0a <USB_ReadInterrupts>
 800501e:	4603      	mov	r3, r0
 8005020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005028:	d112      	bne.n	8005050 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b01      	cmp	r3, #1
 8005038:	d102      	bne.n	8005040 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f009 fe4c 	bl	800ecd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695a      	ldr	r2, [r3, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800504e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f004 fcd8 	bl	8009a0a <USB_ReadInterrupts>
 800505a:	4603      	mov	r3, r0
 800505c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005064:	f040 80c7 	bne.w	80051f6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2110      	movs	r1, #16
 8005082:	4618      	mov	r0, r3
 8005084:	f003 fda6 	bl	8008bd4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005088:	2300      	movs	r3, #0
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800508c:	e056      	b.n	800513c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	461a      	mov	r2, r3
 800509c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050c0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ee:	461a      	mov	r2, r3
 80050f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005110:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005114:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005126:	0151      	lsls	r1, r2, #5
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	440a      	add	r2, r1
 800512c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005130:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005134:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	3301      	adds	r3, #1
 800513a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005142:	429a      	cmp	r2, r3
 8005144:	d3a3      	bcc.n	800508e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005154:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005158:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	2b00      	cmp	r3, #0
 8005160:	d016      	beq.n	8005190 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005172:	f043 030b 	orr.w	r3, r3, #11
 8005176:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005188:	f043 030b 	orr.w	r3, r3, #11
 800518c:	6453      	str	r3, [r2, #68]	; 0x44
 800518e:	e015      	b.n	80051bc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800519e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80051a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051b6:	f043 030b 	orr.w	r3, r3, #11
 80051ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051e0:	461a      	mov	r2, r3
 80051e2:	f004 fcd7 	bl	8009b94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80051f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f004 fc05 	bl	8009a0a <USB_ReadInterrupts>
 8005200:	4603      	mov	r3, r0
 8005202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520a:	d124      	bne.n	8005256 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f004 fc9b 	bl	8009b4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f003 fd3b 	bl	8008c96 <USB_GetDevSpeed>
 8005220:	4603      	mov	r3, r0
 8005222:	461a      	mov	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681c      	ldr	r4, [r3, #0]
 800522c:	f001 f92c 	bl	8006488 <HAL_RCC_GetHCLKFreq>
 8005230:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005236:	b2db      	uxtb	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	4620      	mov	r0, r4
 800523c:	f003 fa78 	bl	8008730 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f009 fd2a 	bl	800ec9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695a      	ldr	r2, [r3, #20]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005254:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f004 fbd5 	bl	8009a0a <USB_ReadInterrupts>
 8005260:	4603      	mov	r3, r0
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b08      	cmp	r3, #8
 8005268:	d10a      	bne.n	8005280 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f009 fd07 	bl	800ec7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f002 0208 	and.w	r2, r2, #8
 800527e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f004 fbc0 	bl	8009a0a <USB_ReadInterrupts>
 800528a:	4603      	mov	r3, r0
 800528c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005294:	d10f      	bne.n	80052b6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	b2db      	uxtb	r3, r3
 800529e:	4619      	mov	r1, r3
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f009 fd5f 	bl	800ed64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80052b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f004 fba5 	bl	8009a0a <USB_ReadInterrupts>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052ca:	d10f      	bne.n	80052ec <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f009 fd32 	bl	800ed40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80052ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f004 fb8a 	bl	8009a0a <USB_ReadInterrupts>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005300:	d10a      	bne.n	8005318 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f009 fd40 	bl	800ed88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005316:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f004 fb74 	bl	8009a0a <USB_ReadInterrupts>
 8005322:	4603      	mov	r3, r0
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b04      	cmp	r3, #4
 800532a:	d115      	bne.n	8005358 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f009 fd30 	bl	800eda4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6859      	ldr	r1, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
 8005354:	e000      	b.n	8005358 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005356:	bf00      	nop
    }
  }
}
 8005358:	3734      	adds	r7, #52	; 0x34
 800535a:	46bd      	mov	sp, r7
 800535c:	bd90      	pop	{r4, r7, pc}

0800535e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_PCD_SetAddress+0x1a>
 8005374:	2302      	movs	r3, #2
 8005376:	e013      	b.n	80053a0 <HAL_PCD_SetAddress+0x42>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	78fa      	ldrb	r2, [r7, #3]
 800538e:	4611      	mov	r1, r2
 8005390:	4618      	mov	r0, r3
 8005392:	f004 fad2 	bl	800993a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	4608      	mov	r0, r1
 80053b2:	4611      	mov	r1, r2
 80053b4:	461a      	mov	r2, r3
 80053b6:	4603      	mov	r3, r0
 80053b8:	70fb      	strb	r3, [r7, #3]
 80053ba:	460b      	mov	r3, r1
 80053bc:	803b      	strh	r3, [r7, #0]
 80053be:	4613      	mov	r3, r2
 80053c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	da0f      	bge.n	80053ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	f003 020f 	and.w	r2, r3, #15
 80053d4:	4613      	mov	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	3338      	adds	r3, #56	; 0x38
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	4413      	add	r3, r2
 80053e2:	3304      	adds	r3, #4
 80053e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	705a      	strb	r2, [r3, #1]
 80053ec:	e00f      	b.n	800540e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f003 020f 	and.w	r2, r3, #15
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	4413      	add	r3, r2
 8005404:	3304      	adds	r3, #4
 8005406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	b2da      	uxtb	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800541a:	883a      	ldrh	r2, [r7, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	78ba      	ldrb	r2, [r7, #2]
 8005424:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	785b      	ldrb	r3, [r3, #1]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005438:	78bb      	ldrb	r3, [r7, #2]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d102      	bne.n	8005444 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_PCD_EP_Open+0xaa>
 800544e:	2302      	movs	r3, #2
 8005450:	e00e      	b.n	8005470 <HAL_PCD_EP_Open+0xc8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	4618      	mov	r0, r3
 8005462:	f003 fc3d 	bl	8008ce0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800546e:	7afb      	ldrb	r3, [r7, #11]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005488:	2b00      	cmp	r3, #0
 800548a:	da0f      	bge.n	80054ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	f003 020f 	and.w	r2, r3, #15
 8005492:	4613      	mov	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	3338      	adds	r3, #56	; 0x38
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	3304      	adds	r3, #4
 80054a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	705a      	strb	r2, [r3, #1]
 80054aa:	e00f      	b.n	80054cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	f003 020f 	and.w	r2, r3, #15
 80054b2:	4613      	mov	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	4413      	add	r3, r2
 80054c2:	3304      	adds	r3, #4
 80054c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_PCD_EP_Close+0x6e>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e00e      	b.n	8005504 <HAL_PCD_EP_Close+0x8c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f003 fc7b 	bl	8008df0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	460b      	mov	r3, r1
 800551a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800551c:	7afb      	ldrb	r3, [r7, #11]
 800551e:	f003 020f 	and.w	r2, r3, #15
 8005522:	4613      	mov	r3, r2
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	3304      	adds	r3, #4
 8005534:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2200      	movs	r2, #0
 8005546:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2200      	movs	r2, #0
 800554c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800554e:	7afb      	ldrb	r3, [r7, #11]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	b2da      	uxtb	r2, r3
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d102      	bne.n	8005568 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005568:	7afb      	ldrb	r3, [r7, #11]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	6979      	ldr	r1, [r7, #20]
 8005580:	f003 ff56 	bl	8009430 <USB_EP0StartXfer>
 8005584:	e008      	b.n	8005598 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	f003 fd08 	bl	8008fa8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80055c4:	681b      	ldr	r3, [r3, #0]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b086      	sub	sp, #24
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	460b      	mov	r3, r1
 80055e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055e2:	7afb      	ldrb	r3, [r7, #11]
 80055e4:	f003 020f 	and.w	r2, r3, #15
 80055e8:	4613      	mov	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	3338      	adds	r3, #56	; 0x38
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4413      	add	r3, r2
 80055f6:	3304      	adds	r3, #4
 80055f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2200      	movs	r2, #0
 800560a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2201      	movs	r2, #1
 8005610:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005612:	7afb      	ldrb	r3, [r7, #11]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	b2da      	uxtb	r2, r3
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d102      	bne.n	800562c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800562c:	7afb      	ldrb	r3, [r7, #11]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	6979      	ldr	r1, [r7, #20]
 8005644:	f003 fef4 	bl	8009430 <USB_EP0StartXfer>
 8005648:	e008      	b.n	800565c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	6979      	ldr	r1, [r7, #20]
 8005658:	f003 fca6 	bl	8008fa8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	f003 020f 	and.w	r2, r3, #15
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	d901      	bls.n	8005684 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e050      	b.n	8005726 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005688:	2b00      	cmp	r3, #0
 800568a:	da0f      	bge.n	80056ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	3338      	adds	r3, #56	; 0x38
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	4413      	add	r3, r2
 80056a0:	3304      	adds	r3, #4
 80056a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	705a      	strb	r2, [r3, #1]
 80056aa:	e00d      	b.n	80056c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056ac:	78fa      	ldrb	r2, [r7, #3]
 80056ae:	4613      	mov	r3, r2
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	4413      	add	r3, r2
 80056be:	3304      	adds	r3, #4
 80056c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_PCD_EP_SetStall+0x82>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e01e      	b.n	8005726 <HAL_PCD_EP_SetStall+0xc0>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f004 f84b 	bl	8009792 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	b2d9      	uxtb	r1, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005716:	461a      	mov	r2, r3
 8005718:	f004 fa3c 	bl	8009b94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	460b      	mov	r3, r1
 8005738:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	f003 020f 	and.w	r2, r3, #15
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	d901      	bls.n	800574c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e042      	b.n	80057d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800574c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005750:	2b00      	cmp	r3, #0
 8005752:	da0f      	bge.n	8005774 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	f003 020f 	and.w	r2, r3, #15
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	3338      	adds	r3, #56	; 0x38
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	4413      	add	r3, r2
 8005768:	3304      	adds	r3, #4
 800576a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	705a      	strb	r2, [r3, #1]
 8005772:	e00f      	b.n	8005794 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	f003 020f 	and.w	r2, r3, #15
 800577a:	4613      	mov	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	3304      	adds	r3, #4
 800578c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_PCD_EP_ClrStall+0x86>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e00e      	b.n	80057d2 <HAL_PCD_EP_ClrStall+0xa4>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68f9      	ldr	r1, [r7, #12]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f004 f853 	bl	800986e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b08a      	sub	sp, #40	; 0x28
 80057de:	af02      	add	r7, sp, #8
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	3338      	adds	r3, #56	; 0x38
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4413      	add	r3, r2
 80057fe:	3304      	adds	r3, #4
 8005800:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	429a      	cmp	r2, r3
 800580c:	d901      	bls.n	8005812 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e06c      	b.n	80058ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	429a      	cmp	r2, r3
 8005826:	d902      	bls.n	800582e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	3303      	adds	r3, #3
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005836:	e02b      	b.n	8005890 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	695a      	ldr	r2, [r3, #20]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	429a      	cmp	r2, r3
 800584c:	d902      	bls.n	8005854 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	3303      	adds	r3, #3
 8005858:	089b      	lsrs	r3, r3, #2
 800585a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68d9      	ldr	r1, [r3, #12]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	b2da      	uxtb	r2, r3
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800586c:	b2db      	uxtb	r3, r3
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	4603      	mov	r3, r0
 8005872:	6978      	ldr	r0, [r7, #20]
 8005874:	f003 ff2f 	bl	80096d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	441a      	add	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	441a      	add	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d809      	bhi.n	80058ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d203      	bcs.n	80058ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1be      	bne.n	8005838 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d811      	bhi.n	80058ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	2201      	movs	r2, #1
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	43db      	mvns	r3, r3
 80058e0:	6939      	ldr	r1, [r7, #16]
 80058e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e6:	4013      	ands	r3, r2
 80058e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	333c      	adds	r3, #60	; 0x3c
 800590c:	3304      	adds	r3, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b01      	cmp	r3, #1
 8005928:	f040 80a0 	bne.w	8005a6c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d015      	beq.n	8005962 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4a72      	ldr	r2, [pc, #456]	; (8005b04 <PCD_EP_OutXfrComplete_int+0x210>)
 800593a:	4293      	cmp	r3, r2
 800593c:	f240 80dd 	bls.w	8005afa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 80d7 	beq.w	8005afa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	461a      	mov	r2, r3
 800595a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800595e:	6093      	str	r3, [r2, #8]
 8005960:	e0cb      	b.n	8005afa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005978:	461a      	mov	r2, r3
 800597a:	2320      	movs	r3, #32
 800597c:	6093      	str	r3, [r2, #8]
 800597e:	e0bc      	b.n	8005afa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	f040 80b7 	bne.w	8005afa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4a5d      	ldr	r2, [pc, #372]	; (8005b04 <PCD_EP_OutXfrComplete_int+0x210>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d90f      	bls.n	80059b4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059aa:	461a      	mov	r2, r3
 80059ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b0:	6093      	str	r3, [r2, #8]
 80059b2:	e0a2      	b.n	8005afa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	4613      	mov	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059c6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	0159      	lsls	r1, r3, #5
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	440b      	add	r3, r1
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80059da:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4403      	add	r3, r0
 80059ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80059ee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4403      	add	r3, r0
 8005a12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4419      	add	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4403      	add	r3, r0
 8005a28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a2c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d114      	bne.n	8005a5e <PCD_EP_OutXfrComplete_int+0x16a>
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d108      	bne.n	8005a5e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a56:	461a      	mov	r2, r3
 8005a58:	2101      	movs	r1, #1
 8005a5a:	f004 f89b 	bl	8009b94 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f009 f8d5 	bl	800ec14 <HAL_PCD_DataOutStageCallback>
 8005a6a:	e046      	b.n	8005afa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <PCD_EP_OutXfrComplete_int+0x214>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d124      	bne.n	8005abe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a90:	6093      	str	r3, [r2, #8]
 8005a92:	e032      	b.n	8005afa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	461a      	mov	r2, r3
 8005aac:	2320      	movs	r3, #32
 8005aae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f009 f8ac 	bl	800ec14 <HAL_PCD_DataOutStageCallback>
 8005abc:	e01d      	b.n	8005afa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d114      	bne.n	8005aee <PCD_EP_OutXfrComplete_int+0x1fa>
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d108      	bne.n	8005aee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2100      	movs	r1, #0
 8005aea:	f004 f853 	bl	8009b94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f009 f88d 	bl	800ec14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	4f54300a 	.word	0x4f54300a
 8005b08:	4f54310a 	.word	0x4f54310a

08005b0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	333c      	adds	r3, #60	; 0x3c
 8005b24:	3304      	adds	r3, #4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4a15      	ldr	r2, [pc, #84]	; (8005b94 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d90e      	bls.n	8005b60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d009      	beq.n	8005b60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f009 f845 	bl	800ebf0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4a0a      	ldr	r2, [pc, #40]	; (8005b94 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d90c      	bls.n	8005b88 <PCD_EP_OutSetupPacket_int+0x7c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d108      	bne.n	8005b88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b80:	461a      	mov	r2, r3
 8005b82:	2101      	movs	r1, #1
 8005b84:	f004 f806 	bl	8009b94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	4f54300a 	.word	0x4f54300a

08005b98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d107      	bne.n	8005bc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005bb6:	883b      	ldrh	r3, [r7, #0]
 8005bb8:	0419      	lsls	r1, r3, #16
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8005bc4:	e028      	b.n	8005c18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	0c1b      	lsrs	r3, r3, #16
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	73fb      	strb	r3, [r7, #15]
 8005bd8:	e00d      	b.n	8005bf6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	3340      	adds	r3, #64	; 0x40
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	0c1b      	lsrs	r3, r3, #16
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	4413      	add	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	73fb      	strb	r3, [r7, #15]
 8005bf6:	7bfa      	ldrb	r2, [r7, #15]
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d3ec      	bcc.n	8005bda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c00:	883b      	ldrh	r3, [r7, #0]
 8005c02:	0418      	lsls	r0, r3, #16
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6819      	ldr	r1, [r3, #0]
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	4302      	orrs	r2, r0
 8005c10:	3340      	adds	r3, #64	; 0x40
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	887a      	ldrh	r2, [r7, #2]
 8005c38:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e264      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d075      	beq.n	8005d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c7e:	4ba3      	ldr	r3, [pc, #652]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d00c      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c8a:	4ba0      	ldr	r3, [pc, #640]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c92:	2b08      	cmp	r3, #8
 8005c94:	d112      	bne.n	8005cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c96:	4b9d      	ldr	r3, [pc, #628]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca2:	d10b      	bne.n	8005cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca4:	4b99      	ldr	r3, [pc, #612]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d05b      	beq.n	8005d68 <HAL_RCC_OscConfig+0x108>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d157      	bne.n	8005d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e23f      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc4:	d106      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x74>
 8005cc6:	4b91      	ldr	r3, [pc, #580]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a90      	ldr	r2, [pc, #576]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	e01d      	b.n	8005d10 <HAL_RCC_OscConfig+0xb0>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x98>
 8005cde:	4b8b      	ldr	r3, [pc, #556]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a8a      	ldr	r2, [pc, #552]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	4b88      	ldr	r3, [pc, #544]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a87      	ldr	r2, [pc, #540]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	e00b      	b.n	8005d10 <HAL_RCC_OscConfig+0xb0>
 8005cf8:	4b84      	ldr	r3, [pc, #528]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a83      	ldr	r2, [pc, #524]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	4b81      	ldr	r3, [pc, #516]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a80      	ldr	r2, [pc, #512]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d013      	beq.n	8005d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d18:	f7fd f940 	bl	8002f9c <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d20:	f7fd f93c 	bl	8002f9c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b64      	cmp	r3, #100	; 0x64
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e204      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d32:	4b76      	ldr	r3, [pc, #472]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f0      	beq.n	8005d20 <HAL_RCC_OscConfig+0xc0>
 8005d3e:	e014      	b.n	8005d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d40:	f7fd f92c 	bl	8002f9c <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d48:	f7fd f928 	bl	8002f9c <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b64      	cmp	r3, #100	; 0x64
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e1f0      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5a:	4b6c      	ldr	r3, [pc, #432]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1f0      	bne.n	8005d48 <HAL_RCC_OscConfig+0xe8>
 8005d66:	e000      	b.n	8005d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d063      	beq.n	8005e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d76:	4b65      	ldr	r3, [pc, #404]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 030c 	and.w	r3, r3, #12
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00b      	beq.n	8005d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d82:	4b62      	ldr	r3, [pc, #392]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d11c      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d8e:	4b5f      	ldr	r3, [pc, #380]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d116      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d9a:	4b5c      	ldr	r3, [pc, #368]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <HAL_RCC_OscConfig+0x152>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d001      	beq.n	8005db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e1c4      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db2:	4b56      	ldr	r3, [pc, #344]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	4952      	ldr	r1, [pc, #328]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dc6:	e03a      	b.n	8005e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d020      	beq.n	8005e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd0:	4b4f      	ldr	r3, [pc, #316]	; (8005f10 <HAL_RCC_OscConfig+0x2b0>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd6:	f7fd f8e1 	bl	8002f9c <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dde:	f7fd f8dd 	bl	8002f9c <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e1a5      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df0:	4b46      	ldr	r3, [pc, #280]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f0      	beq.n	8005dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfc:	4b43      	ldr	r3, [pc, #268]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4940      	ldr	r1, [pc, #256]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	600b      	str	r3, [r1, #0]
 8005e10:	e015      	b.n	8005e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e12:	4b3f      	ldr	r3, [pc, #252]	; (8005f10 <HAL_RCC_OscConfig+0x2b0>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e18:	f7fd f8c0 	bl	8002f9c <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e20:	f7fd f8bc 	bl	8002f9c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e184      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e32:	4b36      	ldr	r3, [pc, #216]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f0      	bne.n	8005e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d030      	beq.n	8005eac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d016      	beq.n	8005e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e52:	4b30      	ldr	r3, [pc, #192]	; (8005f14 <HAL_RCC_OscConfig+0x2b4>)
 8005e54:	2201      	movs	r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fd f8a0 	bl	8002f9c <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e60:	f7fd f89c 	bl	8002f9c <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e164      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e72:	4b26      	ldr	r3, [pc, #152]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x200>
 8005e7e:	e015      	b.n	8005eac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e80:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <HAL_RCC_OscConfig+0x2b4>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e86:	f7fd f889 	bl	8002f9c <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e8e:	f7fd f885 	bl	8002f9c <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e14d      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea0:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f0      	bne.n	8005e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80a0 	beq.w	8005ffa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ebe:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10f      	bne.n	8005eea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60bb      	str	r3, [r7, #8]
 8005ece:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	4a0e      	ldr	r2, [pc, #56]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eda:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee2:	60bb      	str	r3, [r7, #8]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eea:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <HAL_RCC_OscConfig+0x2b8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d121      	bne.n	8005f3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ef6:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <HAL_RCC_OscConfig+0x2b8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a07      	ldr	r2, [pc, #28]	; (8005f18 <HAL_RCC_OscConfig+0x2b8>)
 8005efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f02:	f7fd f84b 	bl	8002f9c <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f08:	e011      	b.n	8005f2e <HAL_RCC_OscConfig+0x2ce>
 8005f0a:	bf00      	nop
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	42470000 	.word	0x42470000
 8005f14:	42470e80 	.word	0x42470e80
 8005f18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f1c:	f7fd f83e 	bl	8002f9c <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e106      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2e:	4b85      	ldr	r3, [pc, #532]	; (8006144 <HAL_RCC_OscConfig+0x4e4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0f0      	beq.n	8005f1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d106      	bne.n	8005f50 <HAL_RCC_OscConfig+0x2f0>
 8005f42:	4b81      	ldr	r3, [pc, #516]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	4a80      	ldr	r2, [pc, #512]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005f48:	f043 0301 	orr.w	r3, r3, #1
 8005f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4e:	e01c      	b.n	8005f8a <HAL_RCC_OscConfig+0x32a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b05      	cmp	r3, #5
 8005f56:	d10c      	bne.n	8005f72 <HAL_RCC_OscConfig+0x312>
 8005f58:	4b7b      	ldr	r3, [pc, #492]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	4a7a      	ldr	r2, [pc, #488]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005f5e:	f043 0304 	orr.w	r3, r3, #4
 8005f62:	6713      	str	r3, [r2, #112]	; 0x70
 8005f64:	4b78      	ldr	r3, [pc, #480]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f68:	4a77      	ldr	r2, [pc, #476]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f70:	e00b      	b.n	8005f8a <HAL_RCC_OscConfig+0x32a>
 8005f72:	4b75      	ldr	r3, [pc, #468]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f76:	4a74      	ldr	r2, [pc, #464]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005f78:	f023 0301 	bic.w	r3, r3, #1
 8005f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7e:	4b72      	ldr	r3, [pc, #456]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	4a71      	ldr	r2, [pc, #452]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005f84:	f023 0304 	bic.w	r3, r3, #4
 8005f88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d015      	beq.n	8005fbe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f92:	f7fd f803 	bl	8002f9c <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f98:	e00a      	b.n	8005fb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f9a:	f7fc ffff 	bl	8002f9c <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e0c5      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb0:	4b65      	ldr	r3, [pc, #404]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0ee      	beq.n	8005f9a <HAL_RCC_OscConfig+0x33a>
 8005fbc:	e014      	b.n	8005fe8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fbe:	f7fc ffed 	bl	8002f9c <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc4:	e00a      	b.n	8005fdc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc6:	f7fc ffe9 	bl	8002f9c <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e0af      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fdc:	4b5a      	ldr	r3, [pc, #360]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1ee      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d105      	bne.n	8005ffa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fee:	4b56      	ldr	r3, [pc, #344]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	4a55      	ldr	r2, [pc, #340]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8005ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ff8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 809b 	beq.w	800613a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006004:	4b50      	ldr	r3, [pc, #320]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 030c 	and.w	r3, r3, #12
 800600c:	2b08      	cmp	r3, #8
 800600e:	d05c      	beq.n	80060ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d141      	bne.n	800609c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006018:	4b4c      	ldr	r3, [pc, #304]	; (800614c <HAL_RCC_OscConfig+0x4ec>)
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601e:	f7fc ffbd 	bl	8002f9c <HAL_GetTick>
 8006022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006026:	f7fc ffb9 	bl	8002f9c <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e081      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006038:	4b43      	ldr	r3, [pc, #268]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f0      	bne.n	8006026 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	019b      	lsls	r3, r3, #6
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	3b01      	subs	r3, #1
 800605e:	041b      	lsls	r3, r3, #16
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	061b      	lsls	r3, r3, #24
 8006068:	4937      	ldr	r1, [pc, #220]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 800606a:	4313      	orrs	r3, r2
 800606c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800606e:	4b37      	ldr	r3, [pc, #220]	; (800614c <HAL_RCC_OscConfig+0x4ec>)
 8006070:	2201      	movs	r2, #1
 8006072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006074:	f7fc ff92 	bl	8002f9c <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800607c:	f7fc ff8e 	bl	8002f9c <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e056      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608e:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0f0      	beq.n	800607c <HAL_RCC_OscConfig+0x41c>
 800609a:	e04e      	b.n	800613a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609c:	4b2b      	ldr	r3, [pc, #172]	; (800614c <HAL_RCC_OscConfig+0x4ec>)
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a2:	f7fc ff7b 	bl	8002f9c <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060aa:	f7fc ff77 	bl	8002f9c <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e03f      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060bc:	4b22      	ldr	r3, [pc, #136]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1f0      	bne.n	80060aa <HAL_RCC_OscConfig+0x44a>
 80060c8:	e037      	b.n	800613a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e032      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060d6:	4b1c      	ldr	r3, [pc, #112]	; (8006148 <HAL_RCC_OscConfig+0x4e8>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d028      	beq.n	8006136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d121      	bne.n	8006136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d11a      	bne.n	8006136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006106:	4013      	ands	r3, r2
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800610c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800610e:	4293      	cmp	r3, r2
 8006110:	d111      	bne.n	8006136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	085b      	lsrs	r3, r3, #1
 800611e:	3b01      	subs	r3, #1
 8006120:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006122:	429a      	cmp	r2, r3
 8006124:	d107      	bne.n	8006136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006132:	429a      	cmp	r2, r3
 8006134:	d001      	beq.n	800613a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40007000 	.word	0x40007000
 8006148:	40023800 	.word	0x40023800
 800614c:	42470060 	.word	0x42470060

08006150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0cc      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006164:	4b68      	ldr	r3, [pc, #416]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d90c      	bls.n	800618c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006172:	4b65      	ldr	r3, [pc, #404]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617a:	4b63      	ldr	r3, [pc, #396]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d001      	beq.n	800618c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e0b8      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d020      	beq.n	80061da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061a4:	4b59      	ldr	r3, [pc, #356]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	4a58      	ldr	r2, [pc, #352]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061bc:	4b53      	ldr	r3, [pc, #332]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4a52      	ldr	r2, [pc, #328]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061c8:	4b50      	ldr	r3, [pc, #320]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	494d      	ldr	r1, [pc, #308]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d044      	beq.n	8006270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d107      	bne.n	80061fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ee:	4b47      	ldr	r3, [pc, #284]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d119      	bne.n	800622e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e07f      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b02      	cmp	r3, #2
 8006204:	d003      	beq.n	800620e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800620a:	2b03      	cmp	r3, #3
 800620c:	d107      	bne.n	800621e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800620e:	4b3f      	ldr	r3, [pc, #252]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d109      	bne.n	800622e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e06f      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800621e:	4b3b      	ldr	r3, [pc, #236]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e067      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800622e:	4b37      	ldr	r3, [pc, #220]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f023 0203 	bic.w	r2, r3, #3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	4934      	ldr	r1, [pc, #208]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 800623c:	4313      	orrs	r3, r2
 800623e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006240:	f7fc feac 	bl	8002f9c <HAL_GetTick>
 8006244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006246:	e00a      	b.n	800625e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006248:	f7fc fea8 	bl	8002f9c <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	f241 3288 	movw	r2, #5000	; 0x1388
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e04f      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625e:	4b2b      	ldr	r3, [pc, #172]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 020c 	and.w	r2, r3, #12
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	429a      	cmp	r2, r3
 800626e:	d1eb      	bne.n	8006248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006270:	4b25      	ldr	r3, [pc, #148]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d20c      	bcs.n	8006298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627e:	4b22      	ldr	r3, [pc, #136]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006286:	4b20      	ldr	r3, [pc, #128]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d001      	beq.n	8006298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e032      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d008      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062a4:	4b19      	ldr	r3, [pc, #100]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	4916      	ldr	r1, [pc, #88]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d009      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062c2:	4b12      	ldr	r3, [pc, #72]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	490e      	ldr	r1, [pc, #56]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062d6:	f000 f821 	bl	800631c <HAL_RCC_GetSysClockFreq>
 80062da:	4602      	mov	r2, r0
 80062dc:	4b0b      	ldr	r3, [pc, #44]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	091b      	lsrs	r3, r3, #4
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	490a      	ldr	r1, [pc, #40]	; (8006310 <HAL_RCC_ClockConfig+0x1c0>)
 80062e8:	5ccb      	ldrb	r3, [r1, r3]
 80062ea:	fa22 f303 	lsr.w	r3, r2, r3
 80062ee:	4a09      	ldr	r2, [pc, #36]	; (8006314 <HAL_RCC_ClockConfig+0x1c4>)
 80062f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062f2:	4b09      	ldr	r3, [pc, #36]	; (8006318 <HAL_RCC_ClockConfig+0x1c8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fc fe0c 	bl	8002f14 <HAL_InitTick>

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40023c00 	.word	0x40023c00
 800630c:	40023800 	.word	0x40023800
 8006310:	080149d8 	.word	0x080149d8
 8006314:	20000048 	.word	0x20000048
 8006318:	2000004c 	.word	0x2000004c

0800631c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800631c:	b5b0      	push	{r4, r5, r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006322:	2100      	movs	r1, #0
 8006324:	6079      	str	r1, [r7, #4]
 8006326:	2100      	movs	r1, #0
 8006328:	60f9      	str	r1, [r7, #12]
 800632a:	2100      	movs	r1, #0
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800632e:	2100      	movs	r1, #0
 8006330:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006332:	4952      	ldr	r1, [pc, #328]	; (800647c <HAL_RCC_GetSysClockFreq+0x160>)
 8006334:	6889      	ldr	r1, [r1, #8]
 8006336:	f001 010c 	and.w	r1, r1, #12
 800633a:	2908      	cmp	r1, #8
 800633c:	d00d      	beq.n	800635a <HAL_RCC_GetSysClockFreq+0x3e>
 800633e:	2908      	cmp	r1, #8
 8006340:	f200 8094 	bhi.w	800646c <HAL_RCC_GetSysClockFreq+0x150>
 8006344:	2900      	cmp	r1, #0
 8006346:	d002      	beq.n	800634e <HAL_RCC_GetSysClockFreq+0x32>
 8006348:	2904      	cmp	r1, #4
 800634a:	d003      	beq.n	8006354 <HAL_RCC_GetSysClockFreq+0x38>
 800634c:	e08e      	b.n	800646c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800634e:	4b4c      	ldr	r3, [pc, #304]	; (8006480 <HAL_RCC_GetSysClockFreq+0x164>)
 8006350:	60bb      	str	r3, [r7, #8]
       break;
 8006352:	e08e      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006354:	4b4b      	ldr	r3, [pc, #300]	; (8006484 <HAL_RCC_GetSysClockFreq+0x168>)
 8006356:	60bb      	str	r3, [r7, #8]
      break;
 8006358:	e08b      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800635a:	4948      	ldr	r1, [pc, #288]	; (800647c <HAL_RCC_GetSysClockFreq+0x160>)
 800635c:	6849      	ldr	r1, [r1, #4]
 800635e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006362:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006364:	4945      	ldr	r1, [pc, #276]	; (800647c <HAL_RCC_GetSysClockFreq+0x160>)
 8006366:	6849      	ldr	r1, [r1, #4]
 8006368:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800636c:	2900      	cmp	r1, #0
 800636e:	d024      	beq.n	80063ba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006370:	4942      	ldr	r1, [pc, #264]	; (800647c <HAL_RCC_GetSysClockFreq+0x160>)
 8006372:	6849      	ldr	r1, [r1, #4]
 8006374:	0989      	lsrs	r1, r1, #6
 8006376:	4608      	mov	r0, r1
 8006378:	f04f 0100 	mov.w	r1, #0
 800637c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006380:	f04f 0500 	mov.w	r5, #0
 8006384:	ea00 0204 	and.w	r2, r0, r4
 8006388:	ea01 0305 	and.w	r3, r1, r5
 800638c:	493d      	ldr	r1, [pc, #244]	; (8006484 <HAL_RCC_GetSysClockFreq+0x168>)
 800638e:	fb01 f003 	mul.w	r0, r1, r3
 8006392:	2100      	movs	r1, #0
 8006394:	fb01 f102 	mul.w	r1, r1, r2
 8006398:	1844      	adds	r4, r0, r1
 800639a:	493a      	ldr	r1, [pc, #232]	; (8006484 <HAL_RCC_GetSysClockFreq+0x168>)
 800639c:	fba2 0101 	umull	r0, r1, r2, r1
 80063a0:	1863      	adds	r3, r4, r1
 80063a2:	4619      	mov	r1, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	f7fa fc6e 	bl	8000c8c <__aeabi_uldivmod>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4613      	mov	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e04a      	b.n	8006450 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ba:	4b30      	ldr	r3, [pc, #192]	; (800647c <HAL_RCC_GetSysClockFreq+0x160>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	099b      	lsrs	r3, r3, #6
 80063c0:	461a      	mov	r2, r3
 80063c2:	f04f 0300 	mov.w	r3, #0
 80063c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063ca:	f04f 0100 	mov.w	r1, #0
 80063ce:	ea02 0400 	and.w	r4, r2, r0
 80063d2:	ea03 0501 	and.w	r5, r3, r1
 80063d6:	4620      	mov	r0, r4
 80063d8:	4629      	mov	r1, r5
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	014b      	lsls	r3, r1, #5
 80063e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80063e8:	0142      	lsls	r2, r0, #5
 80063ea:	4610      	mov	r0, r2
 80063ec:	4619      	mov	r1, r3
 80063ee:	1b00      	subs	r0, r0, r4
 80063f0:	eb61 0105 	sbc.w	r1, r1, r5
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	018b      	lsls	r3, r1, #6
 80063fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006402:	0182      	lsls	r2, r0, #6
 8006404:	1a12      	subs	r2, r2, r0
 8006406:	eb63 0301 	sbc.w	r3, r3, r1
 800640a:	f04f 0000 	mov.w	r0, #0
 800640e:	f04f 0100 	mov.w	r1, #0
 8006412:	00d9      	lsls	r1, r3, #3
 8006414:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006418:	00d0      	lsls	r0, r2, #3
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	1912      	adds	r2, r2, r4
 8006420:	eb45 0303 	adc.w	r3, r5, r3
 8006424:	f04f 0000 	mov.w	r0, #0
 8006428:	f04f 0100 	mov.w	r1, #0
 800642c:	0299      	lsls	r1, r3, #10
 800642e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006432:	0290      	lsls	r0, r2, #10
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4610      	mov	r0, r2
 800643a:	4619      	mov	r1, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	461a      	mov	r2, r3
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	f7fa fc22 	bl	8000c8c <__aeabi_uldivmod>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4613      	mov	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <HAL_RCC_GetSysClockFreq+0x160>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	0c1b      	lsrs	r3, r3, #16
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	3301      	adds	r3, #1
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	fbb2 f3f3 	udiv	r3, r2, r3
 8006468:	60bb      	str	r3, [r7, #8]
      break;
 800646a:	e002      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800646c:	4b04      	ldr	r3, [pc, #16]	; (8006480 <HAL_RCC_GetSysClockFreq+0x164>)
 800646e:	60bb      	str	r3, [r7, #8]
      break;
 8006470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006472:	68bb      	ldr	r3, [r7, #8]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bdb0      	pop	{r4, r5, r7, pc}
 800647c:	40023800 	.word	0x40023800
 8006480:	00f42400 	.word	0x00f42400
 8006484:	017d7840 	.word	0x017d7840

08006488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800648c:	4b03      	ldr	r3, [pc, #12]	; (800649c <HAL_RCC_GetHCLKFreq+0x14>)
 800648e:	681b      	ldr	r3, [r3, #0]
}
 8006490:	4618      	mov	r0, r3
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	20000048 	.word	0x20000048

080064a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064a4:	f7ff fff0 	bl	8006488 <HAL_RCC_GetHCLKFreq>
 80064a8:	4602      	mov	r2, r0
 80064aa:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	0a9b      	lsrs	r3, r3, #10
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	4903      	ldr	r1, [pc, #12]	; (80064c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064b6:	5ccb      	ldrb	r3, [r1, r3]
 80064b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064bc:	4618      	mov	r0, r3
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40023800 	.word	0x40023800
 80064c4:	080149e8 	.word	0x080149e8

080064c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d105      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d038      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064f0:	4b68      	ldr	r3, [pc, #416]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064f6:	f7fc fd51 	bl	8002f9c <HAL_GetTick>
 80064fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064fc:	e008      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064fe:	f7fc fd4d 	bl	8002f9c <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e0bd      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006510:	4b61      	ldr	r3, [pc, #388]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1f0      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	019b      	lsls	r3, r3, #6
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	071b      	lsls	r3, r3, #28
 800652e:	495a      	ldr	r1, [pc, #360]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006536:	4b57      	ldr	r3, [pc, #348]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006538:	2201      	movs	r2, #1
 800653a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800653c:	f7fc fd2e 	bl	8002f9c <HAL_GetTick>
 8006540:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006542:	e008      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006544:	f7fc fd2a 	bl	8002f9c <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e09a      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006556:	4b50      	ldr	r3, [pc, #320]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0f0      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 8083 	beq.w	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	4b48      	ldr	r3, [pc, #288]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	4a47      	ldr	r2, [pc, #284]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800657e:	6413      	str	r3, [r2, #64]	; 0x40
 8006580:	4b45      	ldr	r3, [pc, #276]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800658c:	4b43      	ldr	r3, [pc, #268]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a42      	ldr	r2, [pc, #264]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006596:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006598:	f7fc fd00 	bl	8002f9c <HAL_GetTick>
 800659c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80065a0:	f7fc fcfc 	bl	8002f9c <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e06c      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065b2:	4b3a      	ldr	r3, [pc, #232]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065be:	4b36      	ldr	r3, [pc, #216]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d02f      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d028      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065dc:	4b2e      	ldr	r3, [pc, #184]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065e6:	4b2e      	ldr	r3, [pc, #184]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065ec:	4b2c      	ldr	r3, [pc, #176]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80065f2:	4a29      	ldr	r2, [pc, #164]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065f8:	4b27      	ldr	r3, [pc, #156]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b01      	cmp	r3, #1
 8006602:	d114      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006604:	f7fc fcca 	bl	8002f9c <HAL_GetTick>
 8006608:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660a:	e00a      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800660c:	f7fc fcc6 	bl	8002f9c <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	f241 3288 	movw	r2, #5000	; 0x1388
 800661a:	4293      	cmp	r3, r2
 800661c:	d901      	bls.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e034      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006622:	4b1d      	ldr	r3, [pc, #116]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0ee      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800663a:	d10d      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800663c:	4b16      	ldr	r3, [pc, #88]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800664c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006650:	4911      	ldr	r1, [pc, #68]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006652:	4313      	orrs	r3, r2
 8006654:	608b      	str	r3, [r1, #8]
 8006656:	e005      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006658:	4b0f      	ldr	r3, [pc, #60]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	4a0e      	ldr	r2, [pc, #56]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800665e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006662:	6093      	str	r3, [r2, #8]
 8006664:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006666:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006670:	4909      	ldr	r1, [pc, #36]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006672:	4313      	orrs	r3, r2
 8006674:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	7d1a      	ldrb	r2, [r3, #20]
 8006686:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006688:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	42470068 	.word	0x42470068
 8006698:	40023800 	.word	0x40023800
 800669c:	40007000 	.word	0x40007000
 80066a0:	42470e40 	.word	0x42470e40
 80066a4:	424711e0 	.word	0x424711e0

080066a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e083      	b.n	80067c2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	7f5b      	ldrb	r3, [r3, #29]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fc f96a 	bl	80029a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	22ca      	movs	r2, #202	; 0xca
 80066dc:	625a      	str	r2, [r3, #36]	; 0x24
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2253      	movs	r2, #83	; 0x53
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f897 	bl	800681a <RTC_EnterInitMode>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d008      	beq.n	8006704 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	22ff      	movs	r2, #255	; 0xff
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2204      	movs	r2, #4
 80066fe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e05e      	b.n	80067c2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6812      	ldr	r2, [r2, #0]
 800670e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006716:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6899      	ldr	r1, [r3, #8]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	431a      	orrs	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	68d2      	ldr	r2, [r2, #12]
 800673e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6919      	ldr	r1, [r3, #16]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	041a      	lsls	r2, r3, #16
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006762:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10e      	bne.n	8006790 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f829 	bl	80067ca <HAL_RTC_WaitForSynchro>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d008      	beq.n	8006790 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	22ff      	movs	r2, #255	; 0xff
 8006784:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2204      	movs	r2, #4
 800678a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e018      	b.n	80067c2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800679e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	22ff      	movs	r2, #255	; 0xff
 80067b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80067c0:	2300      	movs	r3, #0
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067e4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067e6:	f7fc fbd9 	bl	8002f9c <HAL_GetTick>
 80067ea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80067ec:	e009      	b.n	8006802 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067ee:	f7fc fbd5 	bl	8002f9c <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067fc:	d901      	bls.n	8006802 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e007      	b.n	8006812 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0ee      	beq.n	80067ee <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d119      	bne.n	8006868 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f04f 32ff 	mov.w	r2, #4294967295
 800683c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800683e:	f7fc fbad 	bl	8002f9c <HAL_GetTick>
 8006842:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006844:	e009      	b.n	800685a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006846:	f7fc fba9 	bl	8002f9c <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006854:	d901      	bls.n	800685a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e007      	b.n	800686a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0ee      	beq.n	8006846 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e022      	b.n	80068ca <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fc f89a 	bl	80029d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2203      	movs	r2, #3
 80068a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f815 	bl	80068d4 <HAL_SD_InitCard>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e00a      	b.n	80068ca <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80068d4:	b5b0      	push	{r4, r5, r7, lr}
 80068d6:	b08e      	sub	sp, #56	; 0x38
 80068d8:	af04      	add	r7, sp, #16
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80068dc:	2300      	movs	r3, #0
 80068de:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80068ec:	2300      	movs	r3, #0
 80068ee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80068f0:	2376      	movs	r3, #118	; 0x76
 80068f2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681d      	ldr	r5, [r3, #0]
 80068f8:	466c      	mov	r4, sp
 80068fa:	f107 0314 	add.w	r3, r7, #20
 80068fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006902:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006906:	f107 0308 	add.w	r3, r7, #8
 800690a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800690c:	4628      	mov	r0, r5
 800690e:	f001 f938 	bl	8007b82 <SDIO_Init>
 8006912:	4603      	mov	r3, r0
 8006914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e04c      	b.n	80069be <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006924:	4b28      	ldr	r3, [pc, #160]	; (80069c8 <HAL_SD_InitCard+0xf4>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f001 f970 	bl	8007c14 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006934:	4b24      	ldr	r3, [pc, #144]	; (80069c8 <HAL_SD_InitCard+0xf4>)
 8006936:	2201      	movs	r2, #1
 8006938:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 ff02 	bl	8007744 <SD_PowerON>
 8006940:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e02e      	b.n	80069be <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fe23 	bl	80075ac <SD_InitCard>
 8006966:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e01b      	b.n	80069be <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800698e:	4618      	mov	r0, r3
 8006990:	f001 f9d3 	bl	8007d3a <SDMMC_CmdBlockLength>
 8006994:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00f      	beq.n	80069bc <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a0a      	ldr	r2, [pc, #40]	; (80069cc <HAL_SD_InitCard+0xf8>)
 80069a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e000      	b.n	80069be <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3728      	adds	r7, #40	; 0x28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bdb0      	pop	{r4, r5, r7, pc}
 80069c6:	bf00      	nop
 80069c8:	422580a0 	.word	0x422580a0
 80069cc:	004005ff 	.word	0x004005ff

080069d0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b092      	sub	sp, #72	; 0x48
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80069de:	f7fc fadd 	bl	8002f9c <HAL_GetTick>
 80069e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d107      	bne.n	8006a02 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e1bd      	b.n	8006d7e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	f040 81b0 	bne.w	8006d70 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	441a      	add	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d907      	bls.n	8006a34 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e1a4      	b.n	8006d7e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2203      	movs	r2, #3
 8006a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2200      	movs	r2, #0
 8006a42:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d002      	beq.n	8006a52 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	025b      	lsls	r3, r3, #9
 8006a50:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a52:	f04f 33ff 	mov.w	r3, #4294967295
 8006a56:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	025b      	lsls	r3, r3, #9
 8006a5c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006a5e:	2390      	movs	r3, #144	; 0x90
 8006a60:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006a62:	2302      	movs	r3, #2
 8006a64:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f107 0214 	add.w	r2, r7, #20
 8006a76:	4611      	mov	r1, r2
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f001 f932 	bl	8007ce2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d90a      	bls.n	8006a9a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2202      	movs	r2, #2
 8006a88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 f996 	bl	8007dc2 <SDMMC_CmdReadMultiBlock>
 8006a96:	6478      	str	r0, [r7, #68]	; 0x44
 8006a98:	e009      	b.n	8006aae <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f969 	bl	8007d7e <SDMMC_CmdReadSingleBlock>
 8006aac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d012      	beq.n	8006ada <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a7a      	ldr	r2, [pc, #488]	; (8006ca4 <HAL_SD_ReadBlocks+0x2d4>)
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e151      	b.n	8006d7e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006ade:	e061      	b.n	8006ba4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d03c      	beq.n	8006b68 <HAL_SD_ReadBlocks+0x198>
 8006aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d039      	beq.n	8006b68 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	643b      	str	r3, [r7, #64]	; 0x40
 8006af8:	e033      	b.n	8006b62 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f001 f86a 	bl	8007bd8 <SDIO_ReadFIFO>
 8006b04:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b10:	3301      	adds	r3, #1
 8006b12:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b16:	3b01      	subs	r3, #1
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	0a1b      	lsrs	r3, r3, #8
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b22:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b26:	3301      	adds	r3, #1
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	0c1b      	lsrs	r3, r3, #16
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b42:	3b01      	subs	r3, #1
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	0e1b      	lsrs	r3, r3, #24
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b52:	3301      	adds	r3, #1
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5e:	3301      	adds	r3, #1
 8006b60:	643b      	str	r3, [r7, #64]	; 0x40
 8006b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b64:	2b07      	cmp	r3, #7
 8006b66:	d9c8      	bls.n	8006afa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006b68:	f7fc fa18 	bl	8002f9c <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d902      	bls.n	8006b7e <HAL_SD_ReadBlocks+0x1ae>
 8006b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d112      	bne.n	8006ba4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a48      	ldr	r2, [pc, #288]	; (8006ca4 <HAL_SD_ReadBlocks+0x2d4>)
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e0ec      	b.n	8006d7e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006baa:	f240 332a 	movw	r3, #810	; 0x32a
 8006bae:	4013      	ands	r3, r2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d095      	beq.n	8006ae0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d022      	beq.n	8006c08 <HAL_SD_ReadBlocks+0x238>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d91f      	bls.n	8006c08 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d01b      	beq.n	8006c08 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f95b 	bl	8007e90 <SDMMC_CmdStopTransfer>
 8006bda:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d012      	beq.n	8006c08 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a2f      	ldr	r2, [pc, #188]	; (8006ca4 <HAL_SD_ReadBlocks+0x2d4>)
 8006be8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e0ba      	b.n	8006d7e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d012      	beq.n	8006c3c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a22      	ldr	r2, [pc, #136]	; (8006ca4 <HAL_SD_ReadBlocks+0x2d4>)
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	f043 0208 	orr.w	r2, r3, #8
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0a0      	b.n	8006d7e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d012      	beq.n	8006c70 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <HAL_SD_ReadBlocks+0x2d4>)
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	f043 0202 	orr.w	r2, r3, #2
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e086      	b.n	8006d7e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d063      	beq.n	8006d46 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a08      	ldr	r2, [pc, #32]	; (8006ca4 <HAL_SD_ReadBlocks+0x2d4>)
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	f043 0220 	orr.w	r2, r3, #32
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e06c      	b.n	8006d7e <HAL_SD_ReadBlocks+0x3ae>
 8006ca4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 ff93 	bl	8007bd8 <SDIO_ReadFIFO>
 8006cb2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cba:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	0a1b      	lsrs	r3, r3, #8
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	0c1b      	lsrs	r3, r3, #16
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cea:	3301      	adds	r3, #1
 8006cec:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	0e1b      	lsrs	r3, r3, #24
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d00:	3301      	adds	r3, #1
 8006d02:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d06:	3b01      	subs	r3, #1
 8006d08:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006d0a:	f7fc f947 	bl	8002f9c <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d902      	bls.n	8006d20 <HAL_SD_ReadBlocks+0x350>
 8006d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d112      	bne.n	8006d46 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a18      	ldr	r2, [pc, #96]	; (8006d88 <HAL_SD_ReadBlocks+0x3b8>)
 8006d26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e01b      	b.n	8006d7e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_SD_ReadBlocks+0x38a>
 8006d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1a6      	bne.n	8006ca8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e006      	b.n	8006d7e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
  }
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3748      	adds	r7, #72	; 0x48
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	004005ff 	.word	0x004005ff

08006d8c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b092      	sub	sp, #72	; 0x48
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d9a:	f7fc f8ff 	bl	8002f9c <HAL_GetTick>
 8006d9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d107      	bne.n	8006dbe <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e166      	b.n	800708c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	f040 8159 	bne.w	800707e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	441a      	add	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d907      	bls.n	8006df0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e14d      	b.n	800708c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2203      	movs	r2, #3
 8006df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d002      	beq.n	8006e0e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	025b      	lsls	r3, r3, #9
 8006e0c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e12:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	025b      	lsls	r3, r3, #9
 8006e18:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006e1a:	2390      	movs	r3, #144	; 0x90
 8006e1c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006e26:	2301      	movs	r3, #1
 8006e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f107 0218 	add.w	r2, r7, #24
 8006e32:	4611      	mov	r1, r2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 ff54 	bl	8007ce2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d90a      	bls.n	8006e56 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fffc 	bl	8007e4a <SDMMC_CmdWriteMultiBlock>
 8006e52:	6478      	str	r0, [r7, #68]	; 0x44
 8006e54:	e009      	b.n	8006e6a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2210      	movs	r2, #16
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 ffcf 	bl	8007e06 <SDMMC_CmdWriteSingleBlock>
 8006e68:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d012      	beq.n	8006e96 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a87      	ldr	r2, [pc, #540]	; (8007094 <HAL_SD_WriteBlocks+0x308>)
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e0fa      	b.n	800708c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006e9a:	e065      	b.n	8006f68 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d040      	beq.n	8006f2c <HAL_SD_WriteBlocks+0x1a0>
 8006eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d03d      	beq.n	8006f2c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8006eb4:	e037      	b.n	8006f26 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	021a      	lsls	r2, r3, #8
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006edc:	3b01      	subs	r3, #1
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	041a      	lsls	r2, r3, #16
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	3301      	adds	r3, #1
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	061a      	lsls	r2, r3, #24
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f06:	3301      	adds	r3, #1
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f107 0214 	add.w	r2, r7, #20
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fe69 	bl	8007bf2 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f22:	3301      	adds	r3, #1
 8006f24:	643b      	str	r3, [r7, #64]	; 0x40
 8006f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f28:	2b07      	cmp	r3, #7
 8006f2a:	d9c4      	bls.n	8006eb6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006f2c:	f7fc f836 	bl	8002f9c <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d902      	bls.n	8006f42 <HAL_SD_WriteBlocks+0x1b6>
 8006f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d112      	bne.n	8006f68 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a53      	ldr	r2, [pc, #332]	; (8007094 <HAL_SD_WriteBlocks+0x308>)
 8006f48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f50:	431a      	orrs	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e091      	b.n	800708c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f6e:	f240 331a 	movw	r3, #794	; 0x31a
 8006f72:	4013      	ands	r3, r2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d091      	beq.n	8006e9c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d022      	beq.n	8006fcc <HAL_SD_WriteBlocks+0x240>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d91f      	bls.n	8006fcc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d01b      	beq.n	8006fcc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 ff79 	bl	8007e90 <SDMMC_CmdStopTransfer>
 8006f9e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d012      	beq.n	8006fcc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a3a      	ldr	r2, [pc, #232]	; (8007094 <HAL_SD_WriteBlocks+0x308>)
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e05f      	b.n	800708c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d012      	beq.n	8007000 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a2d      	ldr	r2, [pc, #180]	; (8007094 <HAL_SD_WriteBlocks+0x308>)
 8006fe0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	f043 0208 	orr.w	r2, r3, #8
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e045      	b.n	800708c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d012      	beq.n	8007034 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a20      	ldr	r2, [pc, #128]	; (8007094 <HAL_SD_WriteBlocks+0x308>)
 8007014:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701a:	f043 0202 	orr.w	r2, r3, #2
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e02b      	b.n	800708c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703a:	f003 0310 	and.w	r3, r3, #16
 800703e:	2b00      	cmp	r3, #0
 8007040:	d012      	beq.n	8007068 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a13      	ldr	r2, [pc, #76]	; (8007094 <HAL_SD_WriteBlocks+0x308>)
 8007048:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	f043 0210 	orr.w	r2, r3, #16
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e011      	b.n	800708c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007070:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	e006      	b.n	800708c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
  }
}
 800708c:	4618      	mov	r0, r3
 800708e:	3748      	adds	r7, #72	; 0x48
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	004005ff 	.word	0x004005ff

08007098 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070a6:	0f9b      	lsrs	r3, r3, #30
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b2:	0e9b      	lsrs	r3, r3, #26
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070c4:	0e1b      	lsrs	r3, r3, #24
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070d6:	0c1b      	lsrs	r3, r3, #16
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070f8:	0d1b      	lsrs	r3, r3, #20
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007104:	0c1b      	lsrs	r3, r3, #16
 8007106:	b2db      	uxtb	r3, r3
 8007108:	f003 030f 	and.w	r3, r3, #15
 800710c:	b2da      	uxtb	r2, r3
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007116:	0bdb      	lsrs	r3, r3, #15
 8007118:	b2db      	uxtb	r3, r3
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	b2da      	uxtb	r2, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007128:	0b9b      	lsrs	r3, r3, #14
 800712a:	b2db      	uxtb	r3, r3
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	b2da      	uxtb	r2, r3
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800713a:	0b5b      	lsrs	r3, r3, #13
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	b2da      	uxtb	r2, r3
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800714c:	0b1b      	lsrs	r3, r3, #12
 800714e:	b2db      	uxtb	r3, r3
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	b2da      	uxtb	r2, r3
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2200      	movs	r2, #0
 800715e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007164:	2b00      	cmp	r3, #0
 8007166:	d163      	bne.n	8007230 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800716c:	009a      	lsls	r2, r3, #2
 800716e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007172:	4013      	ands	r3, r2
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007178:	0f92      	lsrs	r2, r2, #30
 800717a:	431a      	orrs	r2, r3
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007184:	0edb      	lsrs	r3, r3, #27
 8007186:	b2db      	uxtb	r3, r3
 8007188:	f003 0307 	and.w	r3, r3, #7
 800718c:	b2da      	uxtb	r2, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007196:	0e1b      	lsrs	r3, r3, #24
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a8:	0d5b      	lsrs	r3, r3, #21
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ba:	0c9b      	lsrs	r3, r3, #18
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071cc:	0bdb      	lsrs	r3, r3, #15
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	7e1b      	ldrb	r3, [r3, #24]
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	3302      	adds	r3, #2
 80071f0:	2201      	movs	r2, #1
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80071fa:	fb02 f203 	mul.w	r2, r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	7a1b      	ldrb	r3, [r3, #8]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	2201      	movs	r2, #1
 800720e:	409a      	lsls	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800721c:	0a52      	lsrs	r2, r2, #9
 800721e:	fb02 f203 	mul.w	r2, r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800722c:	661a      	str	r2, [r3, #96]	; 0x60
 800722e:	e031      	b.n	8007294 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	2b01      	cmp	r3, #1
 8007236:	d11d      	bne.n	8007274 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800723c:	041b      	lsls	r3, r3, #16
 800723e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007246:	0c1b      	lsrs	r3, r3, #16
 8007248:	431a      	orrs	r2, r3
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	3301      	adds	r3, #1
 8007254:	029a      	lsls	r2, r3, #10
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007268:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	661a      	str	r2, [r3, #96]	; 0x60
 8007272:	e00f      	b.n	8007294 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a58      	ldr	r2, [pc, #352]	; (80073dc <HAL_SD_GetCardCSD+0x344>)
 800727a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e09d      	b.n	80073d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007298:	0b9b      	lsrs	r3, r3, #14
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072aa:	09db      	lsrs	r3, r3, #7
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072cc:	0fdb      	lsrs	r3, r3, #31
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d8:	0f5b      	lsrs	r3, r3, #29
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	0e9b      	lsrs	r3, r3, #26
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fc:	0d9b      	lsrs	r3, r3, #22
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f003 030f 	and.w	r3, r3, #15
 8007304:	b2da      	uxtb	r2, r3
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730e:	0d5b      	lsrs	r3, r3, #21
 8007310:	b2db      	uxtb	r3, r3
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	b2da      	uxtb	r2, r3
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732a:	0c1b      	lsrs	r3, r3, #16
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	b2da      	uxtb	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	0bdb      	lsrs	r3, r3, #15
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007352:	0b9b      	lsrs	r3, r3, #14
 8007354:	b2db      	uxtb	r3, r3
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	b2da      	uxtb	r2, r3
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007366:	0b5b      	lsrs	r3, r3, #13
 8007368:	b2db      	uxtb	r3, r3
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	b2da      	uxtb	r2, r3
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	0b1b      	lsrs	r3, r3, #12
 800737c:	b2db      	uxtb	r3, r3
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	b2da      	uxtb	r2, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738e:	0a9b      	lsrs	r3, r3, #10
 8007390:	b2db      	uxtb	r3, r3
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	b2da      	uxtb	r2, r3
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a2:	0a1b      	lsrs	r3, r3, #8
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b6:	085b      	lsrs	r3, r3, #1
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	004005ff 	.word	0x004005ff

080073e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007438:	b5b0      	push	{r4, r5, r7, lr}
 800743a:	b08e      	sub	sp, #56	; 0x38
 800743c:	af04      	add	r7, sp, #16
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2203      	movs	r2, #3
 800744c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007454:	2b03      	cmp	r3, #3
 8007456:	d02e      	beq.n	80074b6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745e:	d106      	bne.n	800746e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	639a      	str	r2, [r3, #56]	; 0x38
 800746c:	e029      	b.n	80074c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007474:	d10a      	bne.n	800748c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa1a 	bl	80078b0 <SD_WideBus_Enable>
 800747c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	639a      	str	r2, [r3, #56]	; 0x38
 800748a:	e01a      	b.n	80074c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa57 	bl	8007946 <SD_WideBus_Disable>
 8007498:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38
 80074a6:	e00c      	b.n	80074c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	639a      	str	r2, [r3, #56]	; 0x38
 80074b4:	e005      	b.n	80074c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a26      	ldr	r2, [pc, #152]	; (8007568 <HAL_SD_ConfigWideBusOperation+0x130>)
 80074d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074e0:	e01f      	b.n	8007522 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681d      	ldr	r5, [r3, #0]
 8007508:	466c      	mov	r4, sp
 800750a:	f107 0314 	add.w	r3, r7, #20
 800750e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007516:	f107 0308 	add.w	r3, r7, #8
 800751a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800751c:	4628      	mov	r0, r5
 800751e:	f000 fb30 	bl	8007b82 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fc05 	bl	8007d3a <SDMMC_CmdBlockLength>
 8007530:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00c      	beq.n	8007552 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <HAL_SD_ConfigWideBusOperation+0x130>)
 800753e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800755a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800755e:	4618      	mov	r0, r3
 8007560:	3728      	adds	r7, #40	; 0x28
 8007562:	46bd      	mov	sp, r7
 8007564:	bdb0      	pop	{r4, r5, r7, pc}
 8007566:	bf00      	nop
 8007568:	004005ff 	.word	0x004005ff

0800756c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007578:	f107 030c 	add.w	r3, r7, #12
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f96e 	bl	8007860 <SD_SendStatus>
 8007584:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	0a5b      	lsrs	r3, r3, #9
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80075a2:	693b      	ldr	r3, [r7, #16]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075ac:	b5b0      	push	{r4, r5, r7, lr}
 80075ae:	b094      	sub	sp, #80	; 0x50
 80075b0:	af04      	add	r7, sp, #16
 80075b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80075b4:	2301      	movs	r3, #1
 80075b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fb38 	bl	8007c32 <SDIO_GetPowerState>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80075cc:	e0b6      	b.n	800773c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d02f      	beq.n	8007636 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fd62 	bl	80080a4 <SDMMC_CmdSendCID>
 80075e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <SD_InitCard+0x40>
    {
      return errorstate;
 80075e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ea:	e0a7      	b.n	800773c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fb62 	bl	8007cbc <SDIO_GetResponse>
 80075f8:	4602      	mov	r2, r0
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2104      	movs	r1, #4
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fb59 	bl	8007cbc <SDIO_GetResponse>
 800760a:	4602      	mov	r2, r0
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2108      	movs	r1, #8
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fb50 	bl	8007cbc <SDIO_GetResponse>
 800761c:	4602      	mov	r2, r0
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	210c      	movs	r1, #12
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fb47 	bl	8007cbc <SDIO_GetResponse>
 800762e:	4602      	mov	r2, r0
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763a:	2b03      	cmp	r3, #3
 800763c:	d00d      	beq.n	800765a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f107 020e 	add.w	r2, r7, #14
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fd68 	bl	800811e <SDMMC_CmdSetRelAdd>
 800764e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <SD_InitCard+0xae>
    {
      return errorstate;
 8007656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007658:	e070      	b.n	800773c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765e:	2b03      	cmp	r3, #3
 8007660:	d036      	beq.n	80076d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007662:	89fb      	ldrh	r3, [r7, #14]
 8007664:	461a      	mov	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007672:	041b      	lsls	r3, r3, #16
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f000 fd32 	bl	80080e0 <SDMMC_CmdSendCSD>
 800767c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800767e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007686:	e059      	b.n	800773c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2100      	movs	r1, #0
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fb14 	bl	8007cbc <SDIO_GetResponse>
 8007694:	4602      	mov	r2, r0
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2104      	movs	r1, #4
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fb0b 	bl	8007cbc <SDIO_GetResponse>
 80076a6:	4602      	mov	r2, r0
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2108      	movs	r1, #8
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fb02 	bl	8007cbc <SDIO_GetResponse>
 80076b8:	4602      	mov	r2, r0
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	210c      	movs	r1, #12
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 faf9 	bl	8007cbc <SDIO_GetResponse>
 80076ca:	4602      	mov	r2, r0
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2104      	movs	r1, #4
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 faf0 	bl	8007cbc <SDIO_GetResponse>
 80076dc:	4603      	mov	r3, r0
 80076de:	0d1a      	lsrs	r2, r3, #20
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80076e4:	f107 0310 	add.w	r3, r7, #16
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff fcd4 	bl	8007098 <HAL_SD_GetCardCSD>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076fa:	e01f      	b.n	800773c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6819      	ldr	r1, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007704:	041b      	lsls	r3, r3, #16
 8007706:	461a      	mov	r2, r3
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	4608      	mov	r0, r1
 800770e:	f000 fbe1 	bl	8007ed4 <SDMMC_CmdSelDesel>
 8007712:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <SD_InitCard+0x172>
  {
    return errorstate;
 800771a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771c:	e00e      	b.n	800773c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681d      	ldr	r5, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	466c      	mov	r4, sp
 8007726:	f103 0210 	add.w	r2, r3, #16
 800772a:	ca07      	ldmia	r2, {r0, r1, r2}
 800772c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007730:	3304      	adds	r3, #4
 8007732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007734:	4628      	mov	r0, r5
 8007736:	f000 fa24 	bl	8007b82 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3740      	adds	r7, #64	; 0x40
 8007740:	46bd      	mov	sp, r7
 8007742:	bdb0      	pop	{r4, r5, r7, pc}

08007744 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	2300      	movs	r3, #0
 8007756:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fbdc 	bl	8007f1a <SDMMC_CmdGoIdleState>
 8007762:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <SD_PowerON+0x2a>
  {
    return errorstate;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	e072      	b.n	8007854 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 fbef 	bl	8007f56 <SDMMC_CmdOperCond>
 8007778:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00d      	beq.n	800779c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fbc5 	bl	8007f1a <SDMMC_CmdGoIdleState>
 8007790:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	e05b      	b.n	8007854 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d137      	bne.n	800781a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2100      	movs	r1, #0
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fbef 	bl	8007f94 <SDMMC_CmdAppCommand>
 80077b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d02d      	beq.n	800781a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077c2:	e047      	b.n	8007854 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2100      	movs	r1, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fbe2 	bl	8007f94 <SDMMC_CmdAppCommand>
 80077d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <SD_PowerON+0x98>
    {
      return errorstate;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	e03b      	b.n	8007854 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	491e      	ldr	r1, [pc, #120]	; (800785c <SD_PowerON+0x118>)
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fbf8 	bl	8007fd8 <SDMMC_CmdAppOperCommand>
 80077e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077f4:	e02e      	b.n	8007854 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2100      	movs	r1, #0
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fa5d 	bl	8007cbc <SDIO_GetResponse>
 8007802:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	0fdb      	lsrs	r3, r3, #31
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <SD_PowerON+0xcc>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <SD_PowerON+0xce>
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]

    count++;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	3301      	adds	r3, #1
 8007818:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007820:	4293      	cmp	r3, r2
 8007822:	d802      	bhi.n	800782a <SD_PowerON+0xe6>
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0cc      	beq.n	80077c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007830:	4293      	cmp	r3, r2
 8007832:	d902      	bls.n	800783a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007838:	e00c      	b.n	8007854 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	645a      	str	r2, [r3, #68]	; 0x44
 800784a:	e002      	b.n	8007852 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	c1100000 	.word	0xc1100000

08007860 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007870:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007874:	e018      	b.n	80078a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787e:	041b      	lsls	r3, r3, #16
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f000 fc6c 	bl	8008160 <SDMMC_CmdSendStatus>
 8007888:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	e009      	b.n	80078a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2100      	movs	r1, #0
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fa0e 	bl	8007cbc <SDIO_GetResponse>
 80078a0:	4602      	mov	r2, r0
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80078b8:	2300      	movs	r3, #0
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	2300      	movs	r3, #0
 80078be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2100      	movs	r1, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f9f8 	bl	8007cbc <SDIO_GetResponse>
 80078cc:	4603      	mov	r3, r0
 80078ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078d6:	d102      	bne.n	80078de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80078d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078dc:	e02f      	b.n	800793e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80078de:	f107 030c 	add.w	r3, r7, #12
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f879 	bl	80079dc <SD_FindSCR>
 80078ea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	e023      	b.n	800793e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01c      	beq.n	800793a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007908:	041b      	lsls	r3, r3, #16
 800790a:	4619      	mov	r1, r3
 800790c:	4610      	mov	r0, r2
 800790e:	f000 fb41 	bl	8007f94 <SDMMC_CmdAppCommand>
 8007912:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	e00f      	b.n	800793e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2102      	movs	r1, #2
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fb7a 	bl	800801e <SDMMC_CmdBusWidth>
 800792a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	e003      	b.n	800793e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007936:	2300      	movs	r3, #0
 8007938:	e001      	b.n	800793e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800793a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b086      	sub	sp, #24
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	2300      	movs	r3, #0
 8007954:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2100      	movs	r1, #0
 800795c:	4618      	mov	r0, r3
 800795e:	f000 f9ad 	bl	8007cbc <SDIO_GetResponse>
 8007962:	4603      	mov	r3, r0
 8007964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800796c:	d102      	bne.n	8007974 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800796e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007972:	e02f      	b.n	80079d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007974:	f107 030c 	add.w	r3, r7, #12
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f82e 	bl	80079dc <SD_FindSCR>
 8007980:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	e023      	b.n	80079d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01c      	beq.n	80079d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799e:	041b      	lsls	r3, r3, #16
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f000 faf6 	bl	8007f94 <SDMMC_CmdAppCommand>
 80079a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	e00f      	b.n	80079d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2100      	movs	r1, #0
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fb2f 	bl	800801e <SDMMC_CmdBusWidth>
 80079c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	e003      	b.n	80079d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e001      	b.n	80079d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80079d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80079dc:	b590      	push	{r4, r7, lr}
 80079de:	b08f      	sub	sp, #60	; 0x3c
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80079e6:	f7fb fad9 	bl	8002f9c <HAL_GetTick>
 80079ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80079f0:	2300      	movs	r3, #0
 80079f2:	60bb      	str	r3, [r7, #8]
 80079f4:	2300      	movs	r3, #0
 80079f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2108      	movs	r1, #8
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 f999 	bl	8007d3a <SDMMC_CmdBlockLength>
 8007a08:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	e0b2      	b.n	8007b7a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1c:	041b      	lsls	r3, r3, #16
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f000 fab7 	bl	8007f94 <SDMMC_CmdAppCommand>
 8007a26:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	e0a3      	b.n	8007b7a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a32:	f04f 33ff 	mov.w	r3, #4294967295
 8007a36:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007a38:	2308      	movs	r3, #8
 8007a3a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007a3c:	2330      	movs	r3, #48	; 0x30
 8007a3e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007a40:	2302      	movs	r3, #2
 8007a42:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f107 0210 	add.w	r2, r7, #16
 8007a54:	4611      	mov	r1, r2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 f943 	bl	8007ce2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fafe 	bl	8008062 <SDMMC_CmdSendSCR>
 8007a66:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d02a      	beq.n	8007ac4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	e083      	b.n	8007b7a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00f      	beq.n	8007aa0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6819      	ldr	r1, [r3, #0]
 8007a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	f107 0208 	add.w	r2, r7, #8
 8007a8c:	18d4      	adds	r4, r2, r3
 8007a8e:	4608      	mov	r0, r1
 8007a90:	f000 f8a2 	bl	8007bd8 <SDIO_ReadFIFO>
 8007a94:	4603      	mov	r3, r0
 8007a96:	6023      	str	r3, [r4, #0]
      index++;
 8007a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a9e:	e006      	b.n	8007aae <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d012      	beq.n	8007ad4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007aae:	f7fb fa75 	bl	8002f9c <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d102      	bne.n	8007ac4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007abe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ac2:	e05a      	b.n	8007b7a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aca:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0cf      	beq.n	8007a72 <SD_FindSCR+0x96>
 8007ad2:	e000      	b.n	8007ad6 <SD_FindSCR+0xfa>
      break;
 8007ad4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2208      	movs	r2, #8
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007aec:	2308      	movs	r3, #8
 8007aee:	e044      	b.n	8007b7a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d005      	beq.n	8007b0a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2202      	movs	r2, #2
 8007b04:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b06:	2302      	movs	r3, #2
 8007b08:	e037      	b.n	8007b7a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007b20:	2320      	movs	r3, #32
 8007b22:	e02a      	b.n	8007b7a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b2c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	061a      	lsls	r2, r3, #24
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	021b      	lsls	r3, r3, #8
 8007b36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b3a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007b44:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	0e1b      	lsrs	r3, r3, #24
 8007b4a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	601a      	str	r2, [r3, #0]
    scr++;
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	3304      	adds	r3, #4
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	061a      	lsls	r2, r3, #24
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b62:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	0a1b      	lsrs	r3, r3, #8
 8007b68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007b6c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	0e1b      	lsrs	r3, r3, #24
 8007b72:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	373c      	adds	r7, #60	; 0x3c
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd90      	pop	{r4, r7, pc}

08007b82 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007b82:	b084      	sub	sp, #16
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	f107 001c 	add.w	r0, r7, #28
 8007b90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007b98:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007b9c:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007ba0:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007ba4:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007ba8:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007bac:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007bbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	b004      	add	sp, #16
 8007bd6:	4770      	bx	lr

08007bd8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2203      	movs	r2, #3
 8007c20:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007c22:	2002      	movs	r0, #2
 8007c24:	f7fb f9c6 	bl	8002fb4 <HAL_Delay>
  
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0303 	and.w	r3, r3, #3
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c6c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007c72:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007c78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007c88:	f023 030f 	bic.w	r3, r3, #15
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	b2db      	uxtb	r3, r3
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3314      	adds	r3, #20
 8007cca:	461a      	mov	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	4413      	add	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
}  
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b085      	sub	sp, #20
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d08:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007d0e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007d14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0

}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b088      	sub	sp, #32
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007d48:	2310      	movs	r3, #16
 8007d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d4c:	2340      	movs	r3, #64	; 0x40
 8007d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d5a:	f107 0308 	add.w	r3, r7, #8
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff ff74 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d6a:	2110      	movs	r1, #16
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fa45 	bl	80081fc <SDMMC_GetCmdResp1>
 8007d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d74:	69fb      	ldr	r3, [r7, #28]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3720      	adds	r7, #32
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b088      	sub	sp, #32
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007d8c:	2311      	movs	r3, #17
 8007d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d90:	2340      	movs	r3, #64	; 0x40
 8007d92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d94:	2300      	movs	r3, #0
 8007d96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d9e:	f107 0308 	add.w	r3, r7, #8
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff ff52 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dae:	2111      	movs	r1, #17
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fa23 	bl	80081fc <SDMMC_GetCmdResp1>
 8007db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007db8:	69fb      	ldr	r3, [r7, #28]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3720      	adds	r7, #32
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b088      	sub	sp, #32
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007dd0:	2312      	movs	r3, #18
 8007dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dd4:	2340      	movs	r3, #64	; 0x40
 8007dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007de2:	f107 0308 	add.w	r3, r7, #8
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff ff30 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df2:	2112      	movs	r1, #18
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fa01 	bl	80081fc <SDMMC_GetCmdResp1>
 8007dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3720      	adds	r7, #32
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b088      	sub	sp, #32
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007e14:	2318      	movs	r3, #24
 8007e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e18:	2340      	movs	r3, #64	; 0x40
 8007e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e26:	f107 0308 	add.w	r3, r7, #8
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff ff0e 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e36:	2118      	movs	r1, #24
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f9df 	bl	80081fc <SDMMC_GetCmdResp1>
 8007e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e40:	69fb      	ldr	r3, [r7, #28]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3720      	adds	r7, #32
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b088      	sub	sp, #32
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007e58:	2319      	movs	r3, #25
 8007e5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e5c:	2340      	movs	r3, #64	; 0x40
 8007e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e60:	2300      	movs	r3, #0
 8007e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e6a:	f107 0308 	add.w	r3, r7, #8
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff feec 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e7a:	2119      	movs	r1, #25
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f9bd 	bl	80081fc <SDMMC_GetCmdResp1>
 8007e82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e84:	69fb      	ldr	r3, [r7, #28]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3720      	adds	r7, #32
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007e9c:	230c      	movs	r3, #12
 8007e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ea0:	2340      	movs	r3, #64	; 0x40
 8007ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007eae:	f107 0308 	add.w	r3, r7, #8
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff feca 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007eba:	4a05      	ldr	r2, [pc, #20]	; (8007ed0 <SDMMC_CmdStopTransfer+0x40>)
 8007ebc:	210c      	movs	r1, #12
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f99c 	bl	80081fc <SDMMC_GetCmdResp1>
 8007ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ec6:	69fb      	ldr	r3, [r7, #28]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3720      	adds	r7, #32
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	05f5e100 	.word	0x05f5e100

08007ed4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08a      	sub	sp, #40	; 0x28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007ee4:	2307      	movs	r3, #7
 8007ee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ee8:	2340      	movs	r3, #64	; 0x40
 8007eea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ef4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ef6:	f107 0310 	add.w	r3, r7, #16
 8007efa:	4619      	mov	r1, r3
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f7ff fea6 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f06:	2107      	movs	r1, #7
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f977 	bl	80081fc <SDMMC_GetCmdResp1>
 8007f0e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3728      	adds	r7, #40	; 0x28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b088      	sub	sp, #32
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f38:	f107 0308 	add.w	r3, r7, #8
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7ff fe85 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f92d 	bl	80081a4 <SDMMC_GetCmdError>
 8007f4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b088      	sub	sp, #32
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007f5e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007f62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007f64:	2308      	movs	r3, #8
 8007f66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f68:	2340      	movs	r3, #64	; 0x40
 8007f6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f76:	f107 0308 	add.w	r3, r7, #8
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff fe66 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fb24 	bl	80085d0 <SDMMC_GetCmdResp7>
 8007f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3720      	adds	r7, #32
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007fa2:	2337      	movs	r3, #55	; 0x37
 8007fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fb4:	f107 0308 	add.w	r3, r7, #8
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff fe47 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc4:	2137      	movs	r1, #55	; 0x37
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f918 	bl	80081fc <SDMMC_GetCmdResp1>
 8007fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fce:	69fb      	ldr	r3, [r7, #28]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3720      	adds	r7, #32
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007fee:	2329      	movs	r3, #41	; 0x29
 8007ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ff2:	2340      	movs	r3, #64	; 0x40
 8007ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008000:	f107 0308 	add.w	r3, r7, #8
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7ff fe21 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fa2b 	bl	8008468 <SDMMC_GetCmdResp3>
 8008012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008014:	69fb      	ldr	r3, [r7, #28]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3720      	adds	r7, #32
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b088      	sub	sp, #32
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800802c:	2306      	movs	r3, #6
 800802e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008030:	2340      	movs	r3, #64	; 0x40
 8008032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008034:	2300      	movs	r3, #0
 8008036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800803c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800803e:	f107 0308 	add.w	r3, r7, #8
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff fe02 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800804a:	f241 3288 	movw	r2, #5000	; 0x1388
 800804e:	2106      	movs	r1, #6
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f8d3 	bl	80081fc <SDMMC_GetCmdResp1>
 8008056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008058:	69fb      	ldr	r3, [r7, #28]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b088      	sub	sp, #32
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800806e:	2333      	movs	r3, #51	; 0x33
 8008070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008072:	2340      	movs	r3, #64	; 0x40
 8008074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008076:	2300      	movs	r3, #0
 8008078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800807a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800807e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008080:	f107 0308 	add.w	r3, r7, #8
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7ff fde1 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800808c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008090:	2133      	movs	r1, #51	; 0x33
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f8b2 	bl	80081fc <SDMMC_GetCmdResp1>
 8008098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800809a:	69fb      	ldr	r3, [r7, #28]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3720      	adds	r7, #32
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80080b0:	2302      	movs	r3, #2
 80080b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80080b4:	23c0      	movs	r3, #192	; 0xc0
 80080b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080b8:	2300      	movs	r3, #0
 80080ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080c2:	f107 0308 	add.w	r3, r7, #8
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff fdc0 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f982 	bl	80083d8 <SDMMC_GetCmdResp2>
 80080d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080d6:	69fb      	ldr	r3, [r7, #28]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3720      	adds	r7, #32
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80080ee:	2309      	movs	r3, #9
 80080f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80080f2:	23c0      	movs	r3, #192	; 0xc0
 80080f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080f6:	2300      	movs	r3, #0
 80080f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008100:	f107 0308 	add.w	r3, r7, #8
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff fda1 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f963 	bl	80083d8 <SDMMC_GetCmdResp2>
 8008112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008114:	69fb      	ldr	r3, [r7, #28]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3720      	adds	r7, #32
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b088      	sub	sp, #32
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800812c:	2303      	movs	r3, #3
 800812e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008130:	2340      	movs	r3, #64	; 0x40
 8008132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008134:	2300      	movs	r3, #0
 8008136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800813c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800813e:	f107 0308 	add.w	r3, r7, #8
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fd82 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	2103      	movs	r1, #3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f9c8 	bl	80084e4 <SDMMC_GetCmdResp6>
 8008154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008156:	69fb      	ldr	r3, [r7, #28]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3720      	adds	r7, #32
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800816e:	230d      	movs	r3, #13
 8008170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008172:	2340      	movs	r3, #64	; 0x40
 8008174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008176:	2300      	movs	r3, #0
 8008178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800817a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800817e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008180:	f107 0308 	add.w	r3, r7, #8
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff fd61 	bl	8007c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800818c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008190:	210d      	movs	r1, #13
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f832 	bl	80081fc <SDMMC_GetCmdResp1>
 8008198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800819a:	69fb      	ldr	r3, [r7, #28]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081ac:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <SDMMC_GetCmdError+0x50>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a11      	ldr	r2, [pc, #68]	; (80081f8 <SDMMC_GetCmdError+0x54>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	0a5b      	lsrs	r3, r3, #9
 80081b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081bc:	fb02 f303 	mul.w	r3, r2, r3
 80081c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1e5a      	subs	r2, r3, #1
 80081c6:	60fa      	str	r2, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081d0:	e009      	b.n	80081e6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f1      	beq.n	80081c2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	22c5      	movs	r2, #197	; 0xc5
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000048 	.word	0x20000048
 80081f8:	10624dd3 	.word	0x10624dd3

080081fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	460b      	mov	r3, r1
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800820a:	4b70      	ldr	r3, [pc, #448]	; (80083cc <SDMMC_GetCmdResp1+0x1d0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a70      	ldr	r2, [pc, #448]	; (80083d0 <SDMMC_GetCmdResp1+0x1d4>)
 8008210:	fba2 2303 	umull	r2, r3, r2, r3
 8008214:	0a5a      	lsrs	r2, r3, #9
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	fb02 f303 	mul.w	r3, r2, r3
 800821c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	1e5a      	subs	r2, r3, #1
 8008222:	61fa      	str	r2, [r7, #28]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d102      	bne.n	800822e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008228:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800822c:	e0c9      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008232:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0ef      	beq.n	800821e <SDMMC_GetCmdResp1+0x22>
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1ea      	bne.n	800821e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824c:	f003 0304 	and.w	r3, r3, #4
 8008250:	2b00      	cmp	r3, #0
 8008252:	d004      	beq.n	800825e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2204      	movs	r2, #4
 8008258:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800825a:	2304      	movs	r3, #4
 800825c:	e0b1      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008270:	2301      	movs	r3, #1
 8008272:	e0a6      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	22c5      	movs	r2, #197	; 0xc5
 8008278:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff fd11 	bl	8007ca2 <SDIO_GetCommandResponse>
 8008280:	4603      	mov	r3, r0
 8008282:	461a      	mov	r2, r3
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	4293      	cmp	r3, r2
 8008288:	d001      	beq.n	800828e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800828a:	2301      	movs	r3, #1
 800828c:	e099      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800828e:	2100      	movs	r1, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f7ff fd13 	bl	8007cbc <SDIO_GetResponse>
 8008296:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	4b4e      	ldr	r3, [pc, #312]	; (80083d4 <SDMMC_GetCmdResp1+0x1d8>)
 800829c:	4013      	ands	r3, r2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80082a2:	2300      	movs	r3, #0
 80082a4:	e08d      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	da02      	bge.n	80082b2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80082ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082b0:	e087      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	e080      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80082ca:	2380      	movs	r3, #128	; 0x80
 80082cc:	e079      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80082d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082dc:	e071      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80082e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ec:	e069      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80082f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082fc:	e061      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800830c:	e059      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800831c:	e051      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800832c:	e049      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008338:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800833c:	e041      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800834c:	e039      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800835c:	e031      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008368:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800836c:	e029      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008378:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800837c:	e021      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008388:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800838c:	e019      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008398:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800839c:	e011      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80083a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80083ac:	e009      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f003 0308 	and.w	r3, r3, #8
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80083b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80083bc:	e001      	b.n	80083c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80083be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3720      	adds	r7, #32
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000048 	.word	0x20000048
 80083d0:	10624dd3 	.word	0x10624dd3
 80083d4:	fdffe008 	.word	0xfdffe008

080083d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083e0:	4b1f      	ldr	r3, [pc, #124]	; (8008460 <SDMMC_GetCmdResp2+0x88>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a1f      	ldr	r2, [pc, #124]	; (8008464 <SDMMC_GetCmdResp2+0x8c>)
 80083e6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ea:	0a5b      	lsrs	r3, r3, #9
 80083ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f0:	fb02 f303 	mul.w	r3, r2, r3
 80083f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	1e5a      	subs	r2, r3, #1
 80083fa:	60fa      	str	r2, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008404:	e026      	b.n	8008454 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0ef      	beq.n	80083f6 <SDMMC_GetCmdResp2+0x1e>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1ea      	bne.n	80083f6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b00      	cmp	r3, #0
 800842a:	d004      	beq.n	8008436 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2204      	movs	r2, #4
 8008430:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008432:	2304      	movs	r3, #4
 8008434:	e00e      	b.n	8008454 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d004      	beq.n	800844c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008448:	2301      	movs	r3, #1
 800844a:	e003      	b.n	8008454 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	22c5      	movs	r2, #197	; 0xc5
 8008450:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	20000048 	.word	0x20000048
 8008464:	10624dd3 	.word	0x10624dd3

08008468 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008470:	4b1a      	ldr	r3, [pc, #104]	; (80084dc <SDMMC_GetCmdResp3+0x74>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a1a      	ldr	r2, [pc, #104]	; (80084e0 <SDMMC_GetCmdResp3+0x78>)
 8008476:	fba2 2303 	umull	r2, r3, r2, r3
 800847a:	0a5b      	lsrs	r3, r3, #9
 800847c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008480:	fb02 f303 	mul.w	r3, r2, r3
 8008484:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	1e5a      	subs	r2, r3, #1
 800848a:	60fa      	str	r2, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d102      	bne.n	8008496 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008490:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008494:	e01b      	b.n	80084ce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0ef      	beq.n	8008486 <SDMMC_GetCmdResp3+0x1e>
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1ea      	bne.n	8008486 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d004      	beq.n	80084c6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2204      	movs	r2, #4
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084c2:	2304      	movs	r3, #4
 80084c4:	e003      	b.n	80084ce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	22c5      	movs	r2, #197	; 0xc5
 80084ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	20000048 	.word	0x20000048
 80084e0:	10624dd3 	.word	0x10624dd3

080084e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	460b      	mov	r3, r1
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80084f2:	4b35      	ldr	r3, [pc, #212]	; (80085c8 <SDMMC_GetCmdResp6+0xe4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a35      	ldr	r2, [pc, #212]	; (80085cc <SDMMC_GetCmdResp6+0xe8>)
 80084f8:	fba2 2303 	umull	r2, r3, r2, r3
 80084fc:	0a5b      	lsrs	r3, r3, #9
 80084fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008502:	fb02 f303 	mul.w	r3, r2, r3
 8008506:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	1e5a      	subs	r2, r3, #1
 800850c:	61fa      	str	r2, [r7, #28]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d102      	bne.n	8008518 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008512:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008516:	e052      	b.n	80085be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0ef      	beq.n	8008508 <SDMMC_GetCmdResp6+0x24>
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1ea      	bne.n	8008508 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008536:	f003 0304 	and.w	r3, r3, #4
 800853a:	2b00      	cmp	r3, #0
 800853c:	d004      	beq.n	8008548 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2204      	movs	r2, #4
 8008542:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008544:	2304      	movs	r3, #4
 8008546:	e03a      	b.n	80085be <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	d004      	beq.n	800855e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2201      	movs	r2, #1
 8008558:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800855a:	2301      	movs	r3, #1
 800855c:	e02f      	b.n	80085be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7ff fb9f 	bl	8007ca2 <SDIO_GetCommandResponse>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	7afb      	ldrb	r3, [r7, #11]
 800856a:	4293      	cmp	r3, r2
 800856c:	d001      	beq.n	8008572 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800856e:	2301      	movs	r3, #1
 8008570:	e025      	b.n	80085be <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	22c5      	movs	r2, #197	; 0xc5
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008578:	2100      	movs	r1, #0
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f7ff fb9e 	bl	8007cbc <SDIO_GetResponse>
 8008580:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d106      	bne.n	800859a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	0c1b      	lsrs	r3, r3, #16
 8008590:	b29a      	uxth	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008596:	2300      	movs	r3, #0
 8008598:	e011      	b.n	80085be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80085a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085a8:	e009      	b.n	80085be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80085b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085b8:	e001      	b.n	80085be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80085ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3720      	adds	r7, #32
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000048 	.word	0x20000048
 80085cc:	10624dd3 	.word	0x10624dd3

080085d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085d8:	4b22      	ldr	r3, [pc, #136]	; (8008664 <SDMMC_GetCmdResp7+0x94>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a22      	ldr	r2, [pc, #136]	; (8008668 <SDMMC_GetCmdResp7+0x98>)
 80085de:	fba2 2303 	umull	r2, r3, r2, r3
 80085e2:	0a5b      	lsrs	r3, r3, #9
 80085e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e8:	fb02 f303 	mul.w	r3, r2, r3
 80085ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	1e5a      	subs	r2, r3, #1
 80085f2:	60fa      	str	r2, [r7, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d102      	bne.n	80085fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085fc:	e02c      	b.n	8008658 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0ef      	beq.n	80085ee <SDMMC_GetCmdResp7+0x1e>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1ea      	bne.n	80085ee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b00      	cmp	r3, #0
 8008622:	d004      	beq.n	800862e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2204      	movs	r2, #4
 8008628:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800862a:	2304      	movs	r3, #4
 800862c:	e014      	b.n	8008658 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008640:	2301      	movs	r3, #1
 8008642:	e009      	b.n	8008658 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2240      	movs	r2, #64	; 0x40
 8008654:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008656:	2300      	movs	r3, #0
  
}
 8008658:	4618      	mov	r0, r3
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	20000048 	.word	0x20000048
 8008668:	10624dd3 	.word	0x10624dd3

0800866c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800866c:	b084      	sub	sp, #16
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	f107 001c 	add.w	r0, r7, #28
 800867a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	2b01      	cmp	r3, #1
 8008682:	d122      	bne.n	80086ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d105      	bne.n	80086be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fac6 	bl	8009c50 <USB_CoreReset>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]
 80086c8:	e01a      	b.n	8008700 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 faba 	bl	8009c50 <USB_CoreReset>
 80086dc:	4603      	mov	r3, r0
 80086de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d106      	bne.n	80086f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	639a      	str	r2, [r3, #56]	; 0x38
 80086f2:	e005      	b.n	8008700 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	2b01      	cmp	r3, #1
 8008704:	d10b      	bne.n	800871e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f043 0206 	orr.w	r2, r3, #6
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f043 0220 	orr.w	r2, r3, #32
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800872a:	b004      	add	sp, #16
 800872c:	4770      	bx	lr
	...

08008730 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	4613      	mov	r3, r2
 800873c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	2b02      	cmp	r3, #2
 8008742:	d165      	bne.n	8008810 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	4a41      	ldr	r2, [pc, #260]	; (800884c <USB_SetTurnaroundTime+0x11c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d906      	bls.n	800875a <USB_SetTurnaroundTime+0x2a>
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	4a40      	ldr	r2, [pc, #256]	; (8008850 <USB_SetTurnaroundTime+0x120>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d202      	bcs.n	800875a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008754:	230f      	movs	r3, #15
 8008756:	617b      	str	r3, [r7, #20]
 8008758:	e062      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	4a3c      	ldr	r2, [pc, #240]	; (8008850 <USB_SetTurnaroundTime+0x120>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d306      	bcc.n	8008770 <USB_SetTurnaroundTime+0x40>
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	4a3b      	ldr	r2, [pc, #236]	; (8008854 <USB_SetTurnaroundTime+0x124>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d202      	bcs.n	8008770 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800876a:	230e      	movs	r3, #14
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	e057      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4a38      	ldr	r2, [pc, #224]	; (8008854 <USB_SetTurnaroundTime+0x124>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d306      	bcc.n	8008786 <USB_SetTurnaroundTime+0x56>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4a37      	ldr	r2, [pc, #220]	; (8008858 <USB_SetTurnaroundTime+0x128>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d202      	bcs.n	8008786 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008780:	230d      	movs	r3, #13
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	e04c      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4a33      	ldr	r2, [pc, #204]	; (8008858 <USB_SetTurnaroundTime+0x128>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d306      	bcc.n	800879c <USB_SetTurnaroundTime+0x6c>
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	4a32      	ldr	r2, [pc, #200]	; (800885c <USB_SetTurnaroundTime+0x12c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d802      	bhi.n	800879c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008796:	230c      	movs	r3, #12
 8008798:	617b      	str	r3, [r7, #20]
 800879a:	e041      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	4a2f      	ldr	r2, [pc, #188]	; (800885c <USB_SetTurnaroundTime+0x12c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d906      	bls.n	80087b2 <USB_SetTurnaroundTime+0x82>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4a2e      	ldr	r2, [pc, #184]	; (8008860 <USB_SetTurnaroundTime+0x130>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d802      	bhi.n	80087b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80087ac:	230b      	movs	r3, #11
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e036      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	4a2a      	ldr	r2, [pc, #168]	; (8008860 <USB_SetTurnaroundTime+0x130>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d906      	bls.n	80087c8 <USB_SetTurnaroundTime+0x98>
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4a29      	ldr	r2, [pc, #164]	; (8008864 <USB_SetTurnaroundTime+0x134>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d802      	bhi.n	80087c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80087c2:	230a      	movs	r3, #10
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	e02b      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	4a26      	ldr	r2, [pc, #152]	; (8008864 <USB_SetTurnaroundTime+0x134>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d906      	bls.n	80087de <USB_SetTurnaroundTime+0xae>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4a25      	ldr	r2, [pc, #148]	; (8008868 <USB_SetTurnaroundTime+0x138>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d202      	bcs.n	80087de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80087d8:	2309      	movs	r3, #9
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	e020      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	4a21      	ldr	r2, [pc, #132]	; (8008868 <USB_SetTurnaroundTime+0x138>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d306      	bcc.n	80087f4 <USB_SetTurnaroundTime+0xc4>
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	4a20      	ldr	r2, [pc, #128]	; (800886c <USB_SetTurnaroundTime+0x13c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d802      	bhi.n	80087f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80087ee:	2308      	movs	r3, #8
 80087f0:	617b      	str	r3, [r7, #20]
 80087f2:	e015      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	4a1d      	ldr	r2, [pc, #116]	; (800886c <USB_SetTurnaroundTime+0x13c>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d906      	bls.n	800880a <USB_SetTurnaroundTime+0xda>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4a1c      	ldr	r2, [pc, #112]	; (8008870 <USB_SetTurnaroundTime+0x140>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d202      	bcs.n	800880a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008804:	2307      	movs	r3, #7
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	e00a      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800880a:	2306      	movs	r3, #6
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	e007      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008816:	2309      	movs	r3, #9
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	e001      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800881c:	2309      	movs	r3, #9
 800881e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	029b      	lsls	r3, r3, #10
 8008834:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008838:	431a      	orrs	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	00d8acbf 	.word	0x00d8acbf
 8008850:	00e4e1c0 	.word	0x00e4e1c0
 8008854:	00f42400 	.word	0x00f42400
 8008858:	01067380 	.word	0x01067380
 800885c:	011a499f 	.word	0x011a499f
 8008860:	01312cff 	.word	0x01312cff
 8008864:	014ca43f 	.word	0x014ca43f
 8008868:	016e3600 	.word	0x016e3600
 800886c:	01a6ab1f 	.word	0x01a6ab1f
 8008870:	01e84800 	.word	0x01e84800

08008874 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f043 0201 	orr.w	r2, r3, #1
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f023 0201 	bic.w	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088d0:	78fb      	ldrb	r3, [r7, #3]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d106      	bne.n	80088e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	60da      	str	r2, [r3, #12]
 80088e2:	e00b      	b.n	80088fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d106      	bne.n	80088f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	60da      	str	r2, [r3, #12]
 80088f6:	e001      	b.n	80088fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e003      	b.n	8008904 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80088fc:	2032      	movs	r0, #50	; 0x32
 80088fe:	f7fa fb59 	bl	8002fb4 <HAL_Delay>

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800890c:	b084      	sub	sp, #16
 800890e:	b580      	push	{r7, lr}
 8008910:	b086      	sub	sp, #24
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800891a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008926:	2300      	movs	r3, #0
 8008928:	613b      	str	r3, [r7, #16]
 800892a:	e009      	b.n	8008940 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	3340      	adds	r3, #64	; 0x40
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	2200      	movs	r2, #0
 8008938:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	3301      	adds	r3, #1
 800893e:	613b      	str	r3, [r7, #16]
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2b0e      	cmp	r3, #14
 8008944:	d9f2      	bls.n	800892c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d11c      	bne.n	8008986 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800895a:	f043 0302 	orr.w	r3, r3, #2
 800895e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008964:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008970:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	639a      	str	r2, [r3, #56]	; 0x38
 8008984:	e00b      	b.n	800899e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008996:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089a4:	461a      	mov	r2, r3
 80089a6:	2300      	movs	r3, #0
 80089a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b0:	4619      	mov	r1, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b8:	461a      	mov	r2, r3
 80089ba:	680b      	ldr	r3, [r1, #0]
 80089bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d10c      	bne.n	80089de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80089c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d104      	bne.n	80089d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80089ca:	2100      	movs	r1, #0
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f949 	bl	8008c64 <USB_SetDevSpeed>
 80089d2:	e008      	b.n	80089e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80089d4:	2101      	movs	r1, #1
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f944 	bl	8008c64 <USB_SetDevSpeed>
 80089dc:	e003      	b.n	80089e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089de:	2103      	movs	r1, #3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f93f 	bl	8008c64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089e6:	2110      	movs	r1, #16
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f8f3 	bl	8008bd4 <USB_FlushTxFifo>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f911 	bl	8008c20 <USB_FlushRxFifo>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0e:	461a      	mov	r2, r3
 8008a10:	2300      	movs	r3, #0
 8008a12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a26:	461a      	mov	r2, r3
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	e043      	b.n	8008aba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	015a      	lsls	r2, r3, #5
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	4413      	add	r3, r2
 8008a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a48:	d118      	bne.n	8008a7c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10a      	bne.n	8008a66 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a62:	6013      	str	r3, [r2, #0]
 8008a64:	e013      	b.n	8008a8e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a72:	461a      	mov	r2, r3
 8008a74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	e008      	b.n	8008a8e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a88:	461a      	mov	r2, r3
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aac:	461a      	mov	r2, r3
 8008aae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ab2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	613b      	str	r3, [r7, #16]
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d3b7      	bcc.n	8008a32 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	613b      	str	r3, [r7, #16]
 8008ac6:	e043      	b.n	8008b50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ade:	d118      	bne.n	8008b12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10a      	bne.n	8008afc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af2:	461a      	mov	r2, r3
 8008af4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008af8:	6013      	str	r3, [r2, #0]
 8008afa:	e013      	b.n	8008b24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b08:	461a      	mov	r2, r3
 8008b0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	e008      	b.n	8008b24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1e:	461a      	mov	r2, r3
 8008b20:	2300      	movs	r3, #0
 8008b22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b30:	461a      	mov	r2, r3
 8008b32:	2300      	movs	r3, #0
 8008b34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b42:	461a      	mov	r2, r3
 8008b44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	613b      	str	r3, [r7, #16]
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d3b7      	bcc.n	8008ac8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d105      	bne.n	8008b8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	f043 0210 	orr.w	r2, r3, #16
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	699a      	ldr	r2, [r3, #24]
 8008b90:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <USB_DevInit+0x2c4>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	f043 0208 	orr.w	r2, r3, #8
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d107      	bne.n	8008bc0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bb8:	f043 0304 	orr.w	r3, r3, #4
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bcc:	b004      	add	sp, #16
 8008bce:	4770      	bx	lr
 8008bd0:	803c3800 	.word	0x803c3800

08008bd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	019b      	lsls	r3, r3, #6
 8008be6:	f043 0220 	orr.w	r2, r3, #32
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4a09      	ldr	r2, [pc, #36]	; (8008c1c <USB_FlushTxFifo+0x48>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d901      	bls.n	8008c00 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e006      	b.n	8008c0e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f003 0320 	and.w	r3, r3, #32
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	d0f0      	beq.n	8008bee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	00030d40 	.word	0x00030d40

08008c20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2210      	movs	r2, #16
 8008c30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3301      	adds	r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	4a09      	ldr	r2, [pc, #36]	; (8008c60 <USB_FlushRxFifo+0x40>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d901      	bls.n	8008c44 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e006      	b.n	8008c52 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	f003 0310 	and.w	r3, r3, #16
 8008c4c:	2b10      	cmp	r3, #16
 8008c4e:	d0f0      	beq.n	8008c32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	00030d40 	.word	0x00030d40

08008c64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	68f9      	ldr	r1, [r7, #12]
 8008c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c84:	4313      	orrs	r3, r2
 8008c86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b087      	sub	sp, #28
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f003 0306 	and.w	r3, r3, #6
 8008cae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d102      	bne.n	8008cbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	75fb      	strb	r3, [r7, #23]
 8008cba:	e00a      	b.n	8008cd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d002      	beq.n	8008cc8 <USB_GetDevSpeed+0x32>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2b06      	cmp	r3, #6
 8008cc6:	d102      	bne.n	8008cce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008cc8:	2302      	movs	r3, #2
 8008cca:	75fb      	strb	r3, [r7, #23]
 8008ccc:	e001      	b.n	8008cd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008cce:	230f      	movs	r3, #15
 8008cd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	371c      	adds	r7, #28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	785b      	ldrb	r3, [r3, #1]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d13a      	bne.n	8008d72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d02:	69da      	ldr	r2, [r3, #28]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	f003 030f 	and.w	r3, r3, #15
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	68f9      	ldr	r1, [r7, #12]
 8008d16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d155      	bne.n	8008de0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	78db      	ldrb	r3, [r3, #3]
 8008d4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	059b      	lsls	r3, r3, #22
 8008d56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	0151      	lsls	r1, r2, #5
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	440a      	add	r2, r1
 8008d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	e036      	b.n	8008de0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d78:	69da      	ldr	r2, [r3, #28]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	f003 030f 	and.w	r3, r3, #15
 8008d82:	2101      	movs	r1, #1
 8008d84:	fa01 f303 	lsl.w	r3, r1, r3
 8008d88:	041b      	lsls	r3, r3, #16
 8008d8a:	68f9      	ldr	r1, [r7, #12]
 8008d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d90:	4313      	orrs	r3, r2
 8008d92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d11a      	bne.n	8008de0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	78db      	ldrb	r3, [r3, #3]
 8008dc4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dde:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	785b      	ldrb	r3, [r3, #1]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d161      	bne.n	8008ed0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e22:	d11f      	bne.n	8008e64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	f003 030f 	and.w	r3, r3, #15
 8008e74:	2101      	movs	r1, #1
 8008e76:	fa01 f303 	lsl.w	r3, r1, r3
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	68f9      	ldr	r1, [r7, #12]
 8008e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e84:	4013      	ands	r3, r2
 8008e86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8e:	69da      	ldr	r2, [r3, #28]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	f003 030f 	and.w	r3, r3, #15
 8008e98:	2101      	movs	r1, #1
 8008e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	68f9      	ldr	r1, [r7, #12]
 8008ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	0159      	lsls	r1, r3, #5
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	440b      	add	r3, r1
 8008ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4b35      	ldr	r3, [pc, #212]	; (8008fa0 <USB_DeactivateEndpoint+0x1b0>)
 8008eca:	4013      	ands	r3, r2
 8008ecc:	600b      	str	r3, [r1, #0]
 8008ece:	e060      	b.n	8008f92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ee6:	d11f      	bne.n	8008f28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	0151      	lsls	r1, r2, #5
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	440a      	add	r2, r1
 8008efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	0151      	lsls	r1, r2, #5
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	440a      	add	r2, r1
 8008f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	f003 030f 	and.w	r3, r3, #15
 8008f38:	2101      	movs	r1, #1
 8008f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f3e:	041b      	lsls	r3, r3, #16
 8008f40:	43db      	mvns	r3, r3
 8008f42:	68f9      	ldr	r1, [r7, #12]
 8008f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f48:	4013      	ands	r3, r2
 8008f4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	f003 030f 	and.w	r3, r3, #15
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f62:	041b      	lsls	r3, r3, #16
 8008f64:	43db      	mvns	r3, r3
 8008f66:	68f9      	ldr	r1, [r7, #12]
 8008f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	0159      	lsls	r1, r3, #5
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	440b      	add	r3, r1
 8008f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <USB_DeactivateEndpoint+0x1b4>)
 8008f8e:	4013      	ands	r3, r2
 8008f90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	ec337800 	.word	0xec337800
 8008fa4:	eff37800 	.word	0xeff37800

08008fa8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08a      	sub	sp, #40	; 0x28
 8008fac:	af02      	add	r7, sp, #8
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	f040 815c 	bne.w	8009282 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d132      	bne.n	8009038 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	015a      	lsls	r2, r3, #5
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	69ba      	ldr	r2, [r7, #24]
 8008fe2:	0151      	lsls	r1, r2, #5
 8008fe4:	69fa      	ldr	r2, [r7, #28]
 8008fe6:	440a      	add	r2, r1
 8008fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	440a      	add	r2, r1
 800900c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	0151      	lsls	r1, r2, #5
 8009028:	69fa      	ldr	r2, [r7, #28]
 800902a:	440a      	add	r2, r1
 800902c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009030:	0cdb      	lsrs	r3, r3, #19
 8009032:	04db      	lsls	r3, r3, #19
 8009034:	6113      	str	r3, [r2, #16]
 8009036:	e074      	b.n	8009122 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	69ba      	ldr	r2, [r7, #24]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	69fa      	ldr	r2, [r7, #28]
 800904c:	440a      	add	r2, r1
 800904e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009052:	0cdb      	lsrs	r3, r3, #19
 8009054:	04db      	lsls	r3, r3, #19
 8009056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	0151      	lsls	r1, r2, #5
 800906a:	69fa      	ldr	r2, [r7, #28]
 800906c:	440a      	add	r2, r1
 800906e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009072:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009076:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800907a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009088:	691a      	ldr	r2, [r3, #16]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6959      	ldr	r1, [r3, #20]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	440b      	add	r3, r1
 8009094:	1e59      	subs	r1, r3, #1
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	fbb1 f3f3 	udiv	r3, r1, r3
 800909e:	04d9      	lsls	r1, r3, #19
 80090a0:	4b9d      	ldr	r3, [pc, #628]	; (8009318 <USB_EPStartXfer+0x370>)
 80090a2:	400b      	ands	r3, r1
 80090a4:	69b9      	ldr	r1, [r7, #24]
 80090a6:	0148      	lsls	r0, r1, #5
 80090a8:	69f9      	ldr	r1, [r7, #28]
 80090aa:	4401      	add	r1, r0
 80090ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090b0:	4313      	orrs	r3, r2
 80090b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c0:	691a      	ldr	r2, [r3, #16]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ca:	69b9      	ldr	r1, [r7, #24]
 80090cc:	0148      	lsls	r0, r1, #5
 80090ce:	69f9      	ldr	r1, [r7, #28]
 80090d0:	4401      	add	r1, r0
 80090d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090d6:	4313      	orrs	r3, r2
 80090d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	78db      	ldrb	r3, [r3, #3]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d11f      	bne.n	8009122 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	0151      	lsls	r1, r2, #5
 80090f4:	69fa      	ldr	r2, [r7, #28]
 80090f6:	440a      	add	r2, r1
 80090f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009100:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	69ba      	ldr	r2, [r7, #24]
 8009112:	0151      	lsls	r1, r2, #5
 8009114:	69fa      	ldr	r2, [r7, #28]
 8009116:	440a      	add	r2, r1
 8009118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800911c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009120:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009122:	79fb      	ldrb	r3, [r7, #7]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d14b      	bne.n	80091c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d009      	beq.n	8009144 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913c:	461a      	mov	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	78db      	ldrb	r3, [r3, #3]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d128      	bne.n	800919e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009158:	2b00      	cmp	r3, #0
 800915a:	d110      	bne.n	800917e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	0151      	lsls	r1, r2, #5
 800916e:	69fa      	ldr	r2, [r7, #28]
 8009170:	440a      	add	r2, r1
 8009172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	e00f      	b.n	800919e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	0151      	lsls	r1, r2, #5
 8009190:	69fa      	ldr	r2, [r7, #28]
 8009192:	440a      	add	r2, r1
 8009194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800919c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	69ba      	ldr	r2, [r7, #24]
 80091ae:	0151      	lsls	r1, r2, #5
 80091b0:	69fa      	ldr	r2, [r7, #28]
 80091b2:	440a      	add	r2, r1
 80091b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	e12f      	b.n	8009420 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	0151      	lsls	r1, r2, #5
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	440a      	add	r2, r1
 80091d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	78db      	ldrb	r3, [r3, #3]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d015      	beq.n	8009214 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 8117 	beq.w	8009420 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 030f 	and.w	r3, r3, #15
 8009202:	2101      	movs	r1, #1
 8009204:	fa01 f303 	lsl.w	r3, r1, r3
 8009208:	69f9      	ldr	r1, [r7, #28]
 800920a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800920e:	4313      	orrs	r3, r2
 8009210:	634b      	str	r3, [r1, #52]	; 0x34
 8009212:	e105      	b.n	8009420 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009220:	2b00      	cmp	r3, #0
 8009222:	d110      	bne.n	8009246 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	0151      	lsls	r1, r2, #5
 8009236:	69fa      	ldr	r2, [r7, #28]
 8009238:	440a      	add	r2, r1
 800923a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800923e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	e00f      	b.n	8009266 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69ba      	ldr	r2, [r7, #24]
 8009256:	0151      	lsls	r1, r2, #5
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	440a      	add	r2, r1
 800925c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009264:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	68d9      	ldr	r1, [r3, #12]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	781a      	ldrb	r2, [r3, #0]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	b298      	uxth	r0, r3
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	4603      	mov	r3, r0
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fa2b 	bl	80096d6 <USB_WritePacket>
 8009280:	e0ce      	b.n	8009420 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	4413      	add	r3, r2
 800928a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	0151      	lsls	r1, r2, #5
 8009294:	69fa      	ldr	r2, [r7, #28]
 8009296:	440a      	add	r2, r1
 8009298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800929c:	0cdb      	lsrs	r3, r3, #19
 800929e:	04db      	lsls	r3, r3, #19
 80092a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	69fa      	ldr	r2, [r7, #28]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d126      	bne.n	800931c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092e4:	69b9      	ldr	r1, [r7, #24]
 80092e6:	0148      	lsls	r0, r1, #5
 80092e8:	69f9      	ldr	r1, [r7, #28]
 80092ea:	4401      	add	r1, r0
 80092ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092f0:	4313      	orrs	r3, r2
 80092f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	0151      	lsls	r1, r2, #5
 8009306:	69fa      	ldr	r2, [r7, #28]
 8009308:	440a      	add	r2, r1
 800930a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800930e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009312:	6113      	str	r3, [r2, #16]
 8009314:	e036      	b.n	8009384 <USB_EPStartXfer+0x3dc>
 8009316:	bf00      	nop
 8009318:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	695a      	ldr	r2, [r3, #20]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	4413      	add	r3, r2
 8009326:	1e5a      	subs	r2, r3, #1
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009330:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	4413      	add	r3, r2
 800933a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933e:	691a      	ldr	r2, [r3, #16]
 8009340:	8afb      	ldrh	r3, [r7, #22]
 8009342:	04d9      	lsls	r1, r3, #19
 8009344:	4b39      	ldr	r3, [pc, #228]	; (800942c <USB_EPStartXfer+0x484>)
 8009346:	400b      	ands	r3, r1
 8009348:	69b9      	ldr	r1, [r7, #24]
 800934a:	0148      	lsls	r0, r1, #5
 800934c:	69f9      	ldr	r1, [r7, #28]
 800934e:	4401      	add	r1, r0
 8009350:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009354:	4313      	orrs	r3, r2
 8009356:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	4413      	add	r3, r2
 8009360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009364:	691a      	ldr	r2, [r3, #16]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	8af9      	ldrh	r1, [r7, #22]
 800936c:	fb01 f303 	mul.w	r3, r1, r3
 8009370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009374:	69b9      	ldr	r1, [r7, #24]
 8009376:	0148      	lsls	r0, r1, #5
 8009378:	69f9      	ldr	r1, [r7, #28]
 800937a:	4401      	add	r1, r0
 800937c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009380:	4313      	orrs	r3, r2
 8009382:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d10d      	bne.n	80093a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d009      	beq.n	80093a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	68d9      	ldr	r1, [r3, #12]
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	4413      	add	r3, r2
 800939e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a2:	460a      	mov	r2, r1
 80093a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	78db      	ldrb	r3, [r3, #3]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d128      	bne.n	8009400 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d110      	bne.n	80093e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	0151      	lsls	r1, r2, #5
 80093d0:	69fa      	ldr	r2, [r7, #28]
 80093d2:	440a      	add	r2, r1
 80093d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	e00f      	b.n	8009400 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	0151      	lsls	r1, r2, #5
 80093f2:	69fa      	ldr	r2, [r7, #28]
 80093f4:	440a      	add	r2, r1
 80093f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	4413      	add	r3, r2
 8009408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	0151      	lsls	r1, r2, #5
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	440a      	add	r2, r1
 8009416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800941a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800941e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3720      	adds	r7, #32
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	1ff80000 	.word	0x1ff80000

08009430 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	4613      	mov	r3, r2
 800943c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	2b01      	cmp	r3, #1
 800944e:	f040 80cd 	bne.w	80095ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d132      	bne.n	80094c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	440a      	add	r2, r1
 8009470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009474:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009478:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800947c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	0151      	lsls	r1, r2, #5
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	440a      	add	r2, r1
 8009494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009498:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800949c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b8:	0cdb      	lsrs	r3, r3, #19
 80094ba:	04db      	lsls	r3, r3, #19
 80094bc:	6113      	str	r3, [r2, #16]
 80094be:	e04e      	b.n	800955e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	0151      	lsls	r1, r2, #5
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	440a      	add	r2, r1
 80094d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094da:	0cdb      	lsrs	r3, r3, #19
 80094dc:	04db      	lsls	r3, r3, #19
 80094de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	0151      	lsls	r1, r2, #5
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	440a      	add	r2, r1
 80094f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009502:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	695a      	ldr	r2, [r3, #20]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	429a      	cmp	r2, r3
 800950e:	d903      	bls.n	8009518 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	0151      	lsls	r1, r2, #5
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	440a      	add	r2, r1
 800952e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	4413      	add	r3, r2
 8009540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009544:	691a      	ldr	r2, [r3, #16]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800954e:	6939      	ldr	r1, [r7, #16]
 8009550:	0148      	lsls	r0, r1, #5
 8009552:	6979      	ldr	r1, [r7, #20]
 8009554:	4401      	add	r1, r0
 8009556:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800955a:	4313      	orrs	r3, r2
 800955c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d11e      	bne.n	80095a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	015a      	lsls	r2, r3, #5
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	4413      	add	r3, r2
 8009574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009578:	461a      	mov	r2, r3
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	4413      	add	r3, r2
 8009588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	0151      	lsls	r1, r2, #5
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	440a      	add	r2, r1
 8009596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800959a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	e092      	b.n	80096c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	015a      	lsls	r2, r3, #5
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	4413      	add	r3, r2
 80095aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	0151      	lsls	r1, r2, #5
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	440a      	add	r2, r1
 80095b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d07e      	beq.n	80096c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	f003 030f 	and.w	r3, r3, #15
 80095da:	2101      	movs	r1, #1
 80095dc:	fa01 f303 	lsl.w	r3, r1, r3
 80095e0:	6979      	ldr	r1, [r7, #20]
 80095e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095e6:	4313      	orrs	r3, r2
 80095e8:	634b      	str	r3, [r1, #52]	; 0x34
 80095ea:	e06d      	b.n	80096c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	0151      	lsls	r1, r2, #5
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	440a      	add	r2, r1
 8009602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009606:	0cdb      	lsrs	r3, r3, #19
 8009608:	04db      	lsls	r3, r3, #19
 800960a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	0151      	lsls	r1, r2, #5
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	440a      	add	r2, r1
 8009622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009626:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800962a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800962e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	0151      	lsls	r1, r2, #5
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	440a      	add	r2, r1
 8009656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800965a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800965e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	015a      	lsls	r2, r3, #5
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	4413      	add	r3, r2
 8009668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966c:	691a      	ldr	r2, [r3, #16]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009676:	6939      	ldr	r1, [r7, #16]
 8009678:	0148      	lsls	r0, r1, #5
 800967a:	6979      	ldr	r1, [r7, #20]
 800967c:	4401      	add	r1, r0
 800967e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009682:	4313      	orrs	r3, r2
 8009684:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d10d      	bne.n	80096a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d009      	beq.n	80096a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	68d9      	ldr	r1, [r3, #12]
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a4:	460a      	mov	r2, r1
 80096a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	0151      	lsls	r1, r2, #5
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	440a      	add	r2, r1
 80096be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	371c      	adds	r7, #28
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b089      	sub	sp, #36	; 0x24
 80096da:	af00      	add	r7, sp, #0
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	4611      	mov	r1, r2
 80096e2:	461a      	mov	r2, r3
 80096e4:	460b      	mov	r3, r1
 80096e6:	71fb      	strb	r3, [r7, #7]
 80096e8:	4613      	mov	r3, r2
 80096ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80096f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d11a      	bne.n	8009732 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80096fc:	88bb      	ldrh	r3, [r7, #4]
 80096fe:	3303      	adds	r3, #3
 8009700:	089b      	lsrs	r3, r3, #2
 8009702:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009704:	2300      	movs	r3, #0
 8009706:	61bb      	str	r3, [r7, #24]
 8009708:	e00f      	b.n	800972a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	031a      	lsls	r2, r3, #12
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	4413      	add	r3, r2
 8009712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009716:	461a      	mov	r2, r3
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	3304      	adds	r3, #4
 8009722:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	3301      	adds	r3, #1
 8009728:	61bb      	str	r3, [r7, #24]
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	429a      	cmp	r2, r3
 8009730:	d3eb      	bcc.n	800970a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3724      	adds	r7, #36	; 0x24
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009740:	b480      	push	{r7}
 8009742:	b089      	sub	sp, #36	; 0x24
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009756:	88fb      	ldrh	r3, [r7, #6]
 8009758:	3303      	adds	r3, #3
 800975a:	089b      	lsrs	r3, r3, #2
 800975c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800975e:	2300      	movs	r3, #0
 8009760:	61bb      	str	r3, [r7, #24]
 8009762:	e00b      	b.n	800977c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	3304      	adds	r3, #4
 8009774:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	3301      	adds	r3, #1
 800977a:	61bb      	str	r3, [r7, #24]
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	429a      	cmp	r2, r3
 8009782:	d3ef      	bcc.n	8009764 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009784:	69fb      	ldr	r3, [r7, #28]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3724      	adds	r7, #36	; 0x24
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009792:	b480      	push	{r7}
 8009794:	b085      	sub	sp, #20
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	785b      	ldrb	r3, [r3, #1]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d12c      	bne.n	8009808 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	db12      	blt.n	80097e6 <USB_EPSetStall+0x54>
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00f      	beq.n	80097e6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	0151      	lsls	r1, r2, #5
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	440a      	add	r2, r1
 80097dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80097e4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	015a      	lsls	r2, r3, #5
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	0151      	lsls	r1, r2, #5
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	440a      	add	r2, r1
 80097fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009804:	6013      	str	r3, [r2, #0]
 8009806:	e02b      	b.n	8009860 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	db12      	blt.n	8009840 <USB_EPSetStall+0xae>
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00f      	beq.n	8009840 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	0151      	lsls	r1, r2, #5
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	440a      	add	r2, r1
 8009836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800983a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800983e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4413      	add	r3, r2
 8009848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	0151      	lsls	r1, r2, #5
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	440a      	add	r2, r1
 8009856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800985a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800985e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800986e:	b480      	push	{r7}
 8009870:	b085      	sub	sp, #20
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	785b      	ldrb	r3, [r3, #1]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d128      	bne.n	80098dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	0151      	lsls	r1, r2, #5
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	440a      	add	r2, r1
 80098a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	78db      	ldrb	r3, [r3, #3]
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d003      	beq.n	80098ba <USB_EPClearStall+0x4c>
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	78db      	ldrb	r3, [r3, #3]
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d138      	bne.n	800992c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	0151      	lsls	r1, r2, #5
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	440a      	add	r2, r1
 80098d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	e027      	b.n	800992c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	0151      	lsls	r1, r2, #5
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	440a      	add	r2, r1
 80098f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	78db      	ldrb	r3, [r3, #3]
 8009900:	2b03      	cmp	r3, #3
 8009902:	d003      	beq.n	800990c <USB_EPClearStall+0x9e>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	78db      	ldrb	r3, [r3, #3]
 8009908:	2b02      	cmp	r3, #2
 800990a:	d10f      	bne.n	800992c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	0151      	lsls	r1, r2, #5
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	440a      	add	r2, r1
 8009922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800992a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800993a:	b480      	push	{r7}
 800993c:	b085      	sub	sp, #20
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	460b      	mov	r3, r1
 8009944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009958:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800995c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	78fb      	ldrb	r3, [r7, #3]
 8009968:	011b      	lsls	r3, r3, #4
 800996a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800996e:	68f9      	ldr	r1, [r7, #12]
 8009970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009974:	4313      	orrs	r3, r2
 8009976:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099a0:	f023 0303 	bic.w	r3, r3, #3
 80099a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099b4:	f023 0302 	bic.w	r3, r3, #2
 80099b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099e2:	f023 0303 	bic.w	r3, r3, #3
 80099e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099f6:	f043 0302 	orr.w	r3, r3, #2
 80099fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b085      	sub	sp, #20
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	4013      	ands	r3, r2
 8009a20:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a22:	68fb      	ldr	r3, [r7, #12]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a4c:	69db      	ldr	r3, [r3, #28]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	4013      	ands	r3, r2
 8009a52:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	0c1b      	lsrs	r3, r3, #16
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	4013      	ands	r3, r2
 8009a86:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	b29b      	uxth	r3, r3
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009af8:	78fb      	ldrb	r3, [r7, #3]
 8009afa:	f003 030f 	and.w	r3, r3, #15
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	fa22 f303 	lsr.w	r3, r2, r3
 8009b04:	01db      	lsls	r3, r3, #7
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b0e:	78fb      	ldrb	r3, [r7, #3]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4013      	ands	r3, r2
 8009b20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b22:	68bb      	ldr	r3, [r7, #8]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	f003 0301 	and.w	r3, r3, #1
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009b6a:	f023 0307 	bic.w	r3, r3, #7
 8009b6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
	...

08009b94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	333c      	adds	r3, #60	; 0x3c
 8009baa:	3304      	adds	r3, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	4a26      	ldr	r2, [pc, #152]	; (8009c4c <USB_EP0_OutStart+0xb8>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d90a      	bls.n	8009bce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bc8:	d101      	bne.n	8009bce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	e037      	b.n	8009c3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bfc:	f043 0318 	orr.w	r3, r3, #24
 8009c00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009c14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009c16:	7afb      	ldrb	r3, [r7, #11]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d10f      	bne.n	8009c3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c22:	461a      	mov	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	4f54300a 	.word	0x4f54300a

08009c50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4a13      	ldr	r2, [pc, #76]	; (8009cb4 <USB_CoreReset+0x64>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d901      	bls.n	8009c6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e01b      	b.n	8009ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	daf2      	bge.n	8009c5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	f043 0201 	orr.w	r2, r3, #1
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4a09      	ldr	r2, [pc, #36]	; (8009cb4 <USB_CoreReset+0x64>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d901      	bls.n	8009c98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e006      	b.n	8009ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d0f0      	beq.n	8009c86 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	00030d40 	.word	0x00030d40

08009cb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009cbc:	4904      	ldr	r1, [pc, #16]	; (8009cd0 <MX_FATFS_Init+0x18>)
 8009cbe:	4805      	ldr	r0, [pc, #20]	; (8009cd4 <MX_FATFS_Init+0x1c>)
 8009cc0:	f004 fcda 	bl	800e678 <FATFS_LinkDriver>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4b03      	ldr	r3, [pc, #12]	; (8009cd8 <MX_FATFS_Init+0x20>)
 8009cca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009ccc:	bf00      	nop
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	20002788 	.word	0x20002788
 8009cd4:	080149f0 	.word	0x080149f0
 8009cd8:	20002784 	.word	0x20002784

08009cdc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009ce0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009cf6:	f000 f879 	bl	8009dec <BSP_SD_IsDetected>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d001      	beq.n	8009d04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e012      	b.n	8009d2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009d04:	480b      	ldr	r0, [pc, #44]	; (8009d34 <BSP_SD_Init+0x48>)
 8009d06:	f7fc fdb4 	bl	8006872 <HAL_SD_Init>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d109      	bne.n	8009d28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009d14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009d18:	4806      	ldr	r0, [pc, #24]	; (8009d34 <BSP_SD_Init+0x48>)
 8009d1a:	f7fd fb8d 	bl	8007438 <HAL_SD_ConfigWideBusOperation>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009d28:	79fb      	ldrb	r3, [r7, #7]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	200026fc 	.word	0x200026fc

08009d38 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af02      	add	r7, sp, #8
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	68f9      	ldr	r1, [r7, #12]
 8009d54:	4806      	ldr	r0, [pc, #24]	; (8009d70 <BSP_SD_ReadBlocks+0x38>)
 8009d56:	f7fc fe3b 	bl	80069d0 <HAL_SD_ReadBlocks>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3718      	adds	r7, #24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	200026fc 	.word	0x200026fc

08009d74 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b088      	sub	sp, #32
 8009d78:	af02      	add	r7, sp, #8
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	68f9      	ldr	r1, [r7, #12]
 8009d90:	4806      	ldr	r0, [pc, #24]	; (8009dac <BSP_SD_WriteBlocks+0x38>)
 8009d92:	f7fc fffb 	bl	8006d8c <HAL_SD_WriteBlocks>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	200026fc 	.word	0x200026fc

08009db0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009db4:	4805      	ldr	r0, [pc, #20]	; (8009dcc <BSP_SD_GetCardState+0x1c>)
 8009db6:	f7fd fbd9 	bl	800756c <HAL_SD_GetCardState>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	bf14      	ite	ne
 8009dc0:	2301      	movne	r3, #1
 8009dc2:	2300      	moveq	r3, #0
 8009dc4:	b2db      	uxtb	r3, r3
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	200026fc 	.word	0x200026fc

08009dd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009dd8:	6879      	ldr	r1, [r7, #4]
 8009dda:	4803      	ldr	r0, [pc, #12]	; (8009de8 <BSP_SD_GetCardInfo+0x18>)
 8009ddc:	f7fd fb00 	bl	80073e0 <HAL_SD_GetCardInfo>
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	200026fc 	.word	0x200026fc

08009dec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009df2:	2301      	movs	r3, #1
 8009df4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009df6:	f000 f80b 	bl	8009e10 <BSP_PlatformIsDetected>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009e00:	2300      	movs	r3, #0
 8009e02:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009e04:	79fb      	ldrb	r3, [r7, #7]
 8009e06:	b2db      	uxtb	r3, r3
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009e16:	2301      	movs	r3, #1
 8009e18:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009e1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e1e:	4807      	ldr	r0, [pc, #28]	; (8009e3c <BSP_PlatformIsDetected+0x2c>)
 8009e20:	f7f9 ff74 	bl	8003d0c <HAL_GPIO_ReadPin>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */
    return status;
 8009e32:	79fb      	ldrb	r3, [r7, #7]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	40020800 	.word	0x40020800

08009e40 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009e4a:	4b0b      	ldr	r3, [pc, #44]	; (8009e78 <SD_CheckStatus+0x38>)
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009e50:	f7ff ffae 	bl	8009db0 <BSP_SD_GetCardState>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d107      	bne.n	8009e6a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009e5a:	4b07      	ldr	r3, [pc, #28]	; (8009e78 <SD_CheckStatus+0x38>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	f023 0301 	bic.w	r3, r3, #1
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	4b04      	ldr	r3, [pc, #16]	; (8009e78 <SD_CheckStatus+0x38>)
 8009e68:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009e6a:	4b03      	ldr	r3, [pc, #12]	; (8009e78 <SD_CheckStatus+0x38>)
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	b2db      	uxtb	r3, r3
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20000051 	.word	0x20000051

08009e7c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	4603      	mov	r3, r0
 8009e84:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009e86:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <SD_initialize+0x38>)
 8009e88:	2201      	movs	r2, #1
 8009e8a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009e8c:	f7ff ff2e 	bl	8009cec <BSP_SD_Init>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d107      	bne.n	8009ea6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7ff ffd1 	bl	8009e40 <SD_CheckStatus>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4b04      	ldr	r3, [pc, #16]	; (8009eb4 <SD_initialize+0x38>)
 8009ea4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009ea6:	4b03      	ldr	r3, [pc, #12]	; (8009eb4 <SD_initialize+0x38>)
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	b2db      	uxtb	r3, r3
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	20000051 	.word	0x20000051

08009eb8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7ff ffbb 	bl	8009e40 <SD_CheckStatus>
 8009eca:	4603      	mov	r3, r0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60b9      	str	r1, [r7, #8]
 8009edc:	607a      	str	r2, [r7, #4]
 8009ede:	603b      	str	r3, [r7, #0]
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	68b8      	ldr	r0, [r7, #8]
 8009ef2:	f7ff ff21 	bl	8009d38 <BSP_SD_ReadBlocks>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d107      	bne.n	8009f0c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009efc:	bf00      	nop
 8009efe:	f7ff ff57 	bl	8009db0 <BSP_SD_GetCardState>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1fa      	bne.n	8009efe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b086      	sub	sp, #24
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	603b      	str	r3, [r7, #0]
 8009f22:	4603      	mov	r3, r0
 8009f24:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	6879      	ldr	r1, [r7, #4]
 8009f32:	68b8      	ldr	r0, [r7, #8]
 8009f34:	f7ff ff1e 	bl	8009d74 <BSP_SD_WriteBlocks>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d107      	bne.n	8009f4e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009f3e:	bf00      	nop
 8009f40:	f7ff ff36 	bl	8009db0 <BSP_SD_GetCardState>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1fa      	bne.n	8009f40 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08c      	sub	sp, #48	; 0x30
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	603a      	str	r2, [r7, #0]
 8009f62:	71fb      	strb	r3, [r7, #7]
 8009f64:	460b      	mov	r3, r1
 8009f66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009f6e:	4b25      	ldr	r3, [pc, #148]	; (800a004 <SD_ioctl+0xac>)
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <SD_ioctl+0x28>
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e03c      	b.n	8009ffa <SD_ioctl+0xa2>

  switch (cmd)
 8009f80:	79bb      	ldrb	r3, [r7, #6]
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	d834      	bhi.n	8009ff0 <SD_ioctl+0x98>
 8009f86:	a201      	add	r2, pc, #4	; (adr r2, 8009f8c <SD_ioctl+0x34>)
 8009f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8c:	08009f9d 	.word	0x08009f9d
 8009f90:	08009fa5 	.word	0x08009fa5
 8009f94:	08009fbd 	.word	0x08009fbd
 8009f98:	08009fd7 	.word	0x08009fd7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009fa2:	e028      	b.n	8009ff6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009fa4:	f107 030c 	add.w	r3, r7, #12
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7ff ff11 	bl	8009dd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009fba:	e01c      	b.n	8009ff6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009fbc:	f107 030c 	add.w	r3, r7, #12
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7ff ff05 	bl	8009dd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009fd4:	e00f      	b.n	8009ff6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009fd6:	f107 030c 	add.w	r3, r7, #12
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7ff fef8 	bl	8009dd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe2:	0a5a      	lsrs	r2, r3, #9
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009fee:	e002      	b.n	8009ff6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009ff0:	2304      	movs	r3, #4
 8009ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3730      	adds	r7, #48	; 0x30
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	20000051 	.word	0x20000051

0800a008 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	460b      	mov	r3, r1
 800a012:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 800a014:	2044      	movs	r0, #68	; 0x44
 800a016:	f005 f85d 	bl	800f0d4 <USBD_static_malloc>
 800a01a:	4602      	mov	r2, r0
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e016      	b.n	800a05e <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a036:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 800a038:	2340      	movs	r3, #64	; 0x40
 800a03a:	2202      	movs	r2, #2
 800a03c:	2181      	movs	r1, #129	; 0x81
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f004 ff25 	bl	800ee8e <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 800a044:	2340      	movs	r3, #64	; 0x40
 800a046:	2202      	movs	r2, #2
 800a048:	2101      	movs	r1, #1
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f004 ff1f 	bl	800ee8e <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 800a050:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 800a052:	2340      	movs	r3, #64	; 0x40
 800a054:	2101      	movs	r1, #1
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f005 f808 	bl	800f06c <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800a05c:	2300      	movs	r3, #0
  }
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b082      	sub	sp, #8
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	460b      	mov	r3, r1
 800a070:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 800a072:	2181      	movs	r1, #129	; 0x81
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f004 ff30 	bl	800eeda <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 800a07a:	2101      	movs	r1, #1
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f004 ff2c 	bl	800eeda <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d007      	beq.n	800a0b2 <USBD_Midi_Setup+0x26>
 800a0a2:	2b20      	cmp	r3, #32
 800a0a4:	d10b      	bne.n	800a0be <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f001 f937 	bl	800b31c <USBD_CtlError>
      return USBD_FAIL;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e006      	b.n	800a0c0 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 f931 	bl	800b31c <USBD_CtlError>
      return USBD_FAIL;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e000      	b.n	800a0c0 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2265      	movs	r2, #101	; 0x65
 800a0d4:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 800a0d6:	4b03      	ldr	r3, [pc, #12]	; (800a0e4 <USBD_Midi_GetCfgDesc+0x1c>)
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	2000008c 	.word	0x2000008c

0800a0e8 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 800a12e:	b480      	push	{r7}
 800a130:	b083      	sub	sp, #12
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	460b      	mov	r3, r1
 800a14e:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a15e:	b480      	push	{r7}
 800a160:	b083      	sub	sp, #12
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	460b      	mov	r3, r1
 800a168:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a18a:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 800a18c:	78fb      	ldrb	r3, [r7, #3]
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f004 ff8c 	bl	800f0ae <USBD_LL_GetRxDataSize>
 800a196:	4602      	mov	r2, r0
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	e00c      	b.n	800a1c0 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68f9      	ldr	r1, [r7, #12]
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	440a      	add	r2, r1
 800a1b4:	2104      	movs	r1, #4
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	3304      	adds	r3, #4
 800a1be:	617b      	str	r3, [r7, #20]
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d3ed      	bcc.n	800a1a6 <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 800a1ca:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 800a1cc:	2340      	movs	r3, #64	; 0x40
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f004 ff4b 	bl	800f06c <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3718      	adds	r7, #24
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	220a      	movs	r2, #10
 800a1ec:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 800a1ee:	4b03      	ldr	r3, [pc, #12]	; (800a1fc <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	200000f4 	.word	0x200000f4

0800a200 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a20a:	2303      	movs	r3, #3
 800a20c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d005      	beq.n	800a220 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a220:	7bfb      	ldrb	r3, [r7, #15]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b086      	sub	sp, #24
 800a232:	af00      	add	r7, sp, #0
 800a234:	60f8      	str	r0, [r7, #12]
 800a236:	60b9      	str	r1, [r7, #8]
 800a238:	4613      	mov	r3, r2
 800a23a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a242:	2303      	movs	r3, #3
 800a244:	e01f      	b.n	800a286 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	79fa      	ldrb	r2, [r7, #7]
 800a278:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f004 fda0 	bl	800edc0 <USBD_LL_Init>
 800a280:	4603      	mov	r3, r0
 800a282:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a284:	7dfb      	ldrb	r3, [r7, #23]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b084      	sub	sp, #16
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e016      	b.n	800a2d4 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00b      	beq.n	800a2d2 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	f107 020e 	add.w	r2, r7, #14
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	4798      	blx	r3
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f004 fdb7 	bl	800ee58 <USBD_LL_Start>
 800a2ea:	4603      	mov	r3, r0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b084      	sub	sp, #16
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	460b      	mov	r3, r1
 800a314:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a316:	2303      	movs	r3, #3
 800a318:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a320:	2b00      	cmp	r3, #0
 800a322:	d009      	beq.n	800a338 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	78fa      	ldrb	r2, [r7, #3]
 800a32e:	4611      	mov	r1, r2
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	4798      	blx	r3
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a338:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	460b      	mov	r3, r1
 800a34c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	78fa      	ldrb	r2, [r7, #3]
 800a362:	4611      	mov	r1, r2
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	4798      	blx	r3
  }

  return USBD_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3708      	adds	r7, #8
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	4618      	mov	r0, r3
 800a386:	f000 ff8f 	bl	800b2a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a398:	461a      	mov	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3a6:	f003 031f 	and.w	r3, r3, #31
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d01a      	beq.n	800a3e4 <USBD_LL_SetupStage+0x72>
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d822      	bhi.n	800a3f8 <USBD_LL_SetupStage+0x86>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d002      	beq.n	800a3bc <USBD_LL_SetupStage+0x4a>
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d00a      	beq.n	800a3d0 <USBD_LL_SetupStage+0x5e>
 800a3ba:	e01d      	b.n	800a3f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fa61 	bl	800a88c <USBD_StdDevReq>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ce:	e020      	b.n	800a412 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fac5 	bl	800a968 <USBD_StdItfReq>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e2:	e016      	b.n	800a412 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fb04 	bl	800a9fa <USBD_StdEPReq>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3f6:	e00c      	b.n	800a412 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a402:	b2db      	uxtb	r3, r3
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f004 fd86 	bl	800ef18 <USBD_LL_StallEP>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73fb      	strb	r3, [r7, #15]
      break;
 800a410:	bf00      	nop
  }

  return ret;
 800a412:	7bfb      	ldrb	r3, [r7, #15]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	460b      	mov	r3, r1
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a42a:	7afb      	ldrb	r3, [r7, #11]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d138      	bne.n	800a4a2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a436:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d14a      	bne.n	800a4d8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d913      	bls.n	800a476 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	689a      	ldr	r2, [r3, #8]
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	1ad2      	subs	r2, r2, r3
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	68da      	ldr	r2, [r3, #12]
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	4293      	cmp	r3, r2
 800a466:	bf28      	it	cs
 800a468:	4613      	movcs	r3, r2
 800a46a:	461a      	mov	r2, r3
 800a46c:	6879      	ldr	r1, [r7, #4]
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 fff1 	bl	800b456 <USBD_CtlContinueRx>
 800a474:	e030      	b.n	800a4d8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b03      	cmp	r3, #3
 800a480:	d10b      	bne.n	800a49a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d005      	beq.n	800a49a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f000 ffec 	bl	800b478 <USBD_CtlSendStatus>
 800a4a0:	e01a      	b.n	800a4d8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	d114      	bne.n	800a4d8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00e      	beq.n	800a4d8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	7afa      	ldrb	r2, [r7, #11]
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	4798      	blx	r3
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	e000      	b.n	800a4da <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a4f0:	7afb      	ldrb	r3, [r7, #11]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d16b      	bne.n	800a5ce <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3314      	adds	r3, #20
 800a4fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a502:	2b02      	cmp	r3, #2
 800a504:	d156      	bne.n	800a5b4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	689a      	ldr	r2, [r3, #8]
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d914      	bls.n	800a53c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	689a      	ldr	r2, [r3, #8]
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	1ad2      	subs	r2, r2, r3
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	461a      	mov	r2, r3
 800a526:	6879      	ldr	r1, [r7, #4]
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 ff83 	bl	800b434 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a52e:	2300      	movs	r3, #0
 800a530:	2200      	movs	r2, #0
 800a532:	2100      	movs	r1, #0
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f004 fd99 	bl	800f06c <USBD_LL_PrepareReceive>
 800a53a:	e03b      	b.n	800a5b4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	68da      	ldr	r2, [r3, #12]
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	429a      	cmp	r2, r3
 800a546:	d11c      	bne.n	800a582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a550:	429a      	cmp	r2, r3
 800a552:	d316      	bcc.n	800a582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a55e:	429a      	cmp	r2, r3
 800a560:	d20f      	bcs.n	800a582 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a562:	2200      	movs	r2, #0
 800a564:	2100      	movs	r1, #0
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f000 ff64 	bl	800b434 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a574:	2300      	movs	r3, #0
 800a576:	2200      	movs	r2, #0
 800a578:	2100      	movs	r1, #0
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f004 fd76 	bl	800f06c <USBD_LL_PrepareReceive>
 800a580:	e018      	b.n	800a5b4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d10b      	bne.n	800a5a6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d005      	beq.n	800a5a6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5a6:	2180      	movs	r1, #128	; 0x80
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f004 fcb5 	bl	800ef18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f000 ff75 	bl	800b49e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d122      	bne.n	800a604 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f7ff fe98 	bl	800a2f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a5cc:	e01a      	b.n	800a604 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d114      	bne.n	800a604 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00e      	beq.n	800a604 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	7afa      	ldrb	r2, [r7, #11]
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	4798      	blx	r3
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a600:	7dfb      	ldrb	r3, [r7, #23]
 800a602:	e000      	b.n	800a606 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b082      	sub	sp, #8
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2201      	movs	r2, #1
 800a61a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a63e:	2303      	movs	r3, #3
 800a640:	e02f      	b.n	800a6a2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00f      	beq.n	800a66c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d009      	beq.n	800a66c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	6852      	ldr	r2, [r2, #4]
 800a664:	b2d2      	uxtb	r2, r2
 800a666:	4611      	mov	r1, r2
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a66c:	2340      	movs	r3, #64	; 0x40
 800a66e:	2200      	movs	r2, #0
 800a670:	2100      	movs	r1, #0
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f004 fc0b 	bl	800ee8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2240      	movs	r2, #64	; 0x40
 800a684:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a688:	2340      	movs	r3, #64	; 0x40
 800a68a:	2200      	movs	r2, #0
 800a68c:	2180      	movs	r1, #128	; 0x80
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f004 fbfd 	bl	800ee8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2240      	movs	r2, #64	; 0x40
 800a69e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	78fa      	ldrb	r2, [r7, #3]
 800a6ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2204      	movs	r2, #4
 800a6e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b083      	sub	sp, #12
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b04      	cmp	r3, #4
 800a708:	d106      	bne.n	800a718 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a710:	b2da      	uxtb	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b082      	sub	sp, #8
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a734:	2b00      	cmp	r3, #0
 800a736:	d101      	bne.n	800a73c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a738:	2303      	movs	r3, #3
 800a73a:	e012      	b.n	800a762 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b03      	cmp	r3, #3
 800a746:	d10b      	bne.n	800a760 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a74e:	69db      	ldr	r3, [r3, #28]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d005      	beq.n	800a760 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a780:	2303      	movs	r3, #3
 800a782:	e014      	b.n	800a7ae <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d10d      	bne.n	800a7ac <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a796:	6a1b      	ldr	r3, [r3, #32]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d007      	beq.n	800a7ac <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a2:	6a1b      	ldr	r3, [r3, #32]
 800a7a4:	78fa      	ldrb	r2, [r7, #3]
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e014      	b.n	800a7fa <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d10d      	bne.n	800a7f8 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d007      	beq.n	800a7f8 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	78fa      	ldrb	r2, [r7, #3]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	6852      	ldr	r2, [r2, #4]
 800a83e:	b2d2      	uxtb	r2, r2
 800a840:	4611      	mov	r1, r2
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	4798      	blx	r3
  }

  return USBD_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a850:	b480      	push	{r7}
 800a852:	b087      	sub	sp, #28
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	3301      	adds	r3, #1
 800a866:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a86e:	8a3b      	ldrh	r3, [r7, #16]
 800a870:	021b      	lsls	r3, r3, #8
 800a872:	b21a      	sxth	r2, r3
 800a874:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a878:	4313      	orrs	r3, r2
 800a87a:	b21b      	sxth	r3, r3
 800a87c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a87e:	89fb      	ldrh	r3, [r7, #14]
}
 800a880:	4618      	mov	r0, r3
 800a882:	371c      	adds	r7, #28
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8a2:	2b40      	cmp	r3, #64	; 0x40
 800a8a4:	d005      	beq.n	800a8b2 <USBD_StdDevReq+0x26>
 800a8a6:	2b40      	cmp	r3, #64	; 0x40
 800a8a8:	d853      	bhi.n	800a952 <USBD_StdDevReq+0xc6>
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00b      	beq.n	800a8c6 <USBD_StdDevReq+0x3a>
 800a8ae:	2b20      	cmp	r3, #32
 800a8b0:	d14f      	bne.n	800a952 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	4798      	blx	r3
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c4:	e04a      	b.n	800a95c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	785b      	ldrb	r3, [r3, #1]
 800a8ca:	2b09      	cmp	r3, #9
 800a8cc:	d83b      	bhi.n	800a946 <USBD_StdDevReq+0xba>
 800a8ce:	a201      	add	r2, pc, #4	; (adr r2, 800a8d4 <USBD_StdDevReq+0x48>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a929 	.word	0x0800a929
 800a8d8:	0800a93d 	.word	0x0800a93d
 800a8dc:	0800a947 	.word	0x0800a947
 800a8e0:	0800a933 	.word	0x0800a933
 800a8e4:	0800a947 	.word	0x0800a947
 800a8e8:	0800a907 	.word	0x0800a907
 800a8ec:	0800a8fd 	.word	0x0800a8fd
 800a8f0:	0800a947 	.word	0x0800a947
 800a8f4:	0800a91f 	.word	0x0800a91f
 800a8f8:	0800a911 	.word	0x0800a911
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a8fc:	6839      	ldr	r1, [r7, #0]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f9de 	bl	800acc0 <USBD_GetDescriptor>
          break;
 800a904:	e024      	b.n	800a950 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fb43 	bl	800af94 <USBD_SetAddress>
          break;
 800a90e:	e01f      	b.n	800a950 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a910:	6839      	ldr	r1, [r7, #0]
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fb82 	bl	800b01c <USBD_SetConfig>
 800a918:	4603      	mov	r3, r0
 800a91a:	73fb      	strb	r3, [r7, #15]
          break;
 800a91c:	e018      	b.n	800a950 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fc21 	bl	800b168 <USBD_GetConfig>
          break;
 800a926:	e013      	b.n	800a950 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fc52 	bl	800b1d4 <USBD_GetStatus>
          break;
 800a930:	e00e      	b.n	800a950 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fc81 	bl	800b23c <USBD_SetFeature>
          break;
 800a93a:	e009      	b.n	800a950 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fc90 	bl	800b264 <USBD_ClrFeature>
          break;
 800a944:	e004      	b.n	800a950 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fce7 	bl	800b31c <USBD_CtlError>
          break;
 800a94e:	bf00      	nop
      }
      break;
 800a950:	e004      	b.n	800a95c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fce1 	bl	800b31c <USBD_CtlError>
      break;
 800a95a:	bf00      	nop
  }

  return ret;
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop

0800a968 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a97e:	2b40      	cmp	r3, #64	; 0x40
 800a980:	d005      	beq.n	800a98e <USBD_StdItfReq+0x26>
 800a982:	2b40      	cmp	r3, #64	; 0x40
 800a984:	d82f      	bhi.n	800a9e6 <USBD_StdItfReq+0x7e>
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <USBD_StdItfReq+0x26>
 800a98a:	2b20      	cmp	r3, #32
 800a98c:	d12b      	bne.n	800a9e6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a994:	b2db      	uxtb	r3, r3
 800a996:	3b01      	subs	r3, #1
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d81d      	bhi.n	800a9d8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	889b      	ldrh	r3, [r3, #4]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d813      	bhi.n	800a9ce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	4798      	blx	r3
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	88db      	ldrh	r3, [r3, #6]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d110      	bne.n	800a9e2 <USBD_StdItfReq+0x7a>
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10d      	bne.n	800a9e2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fd56 	bl	800b478 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a9cc:	e009      	b.n	800a9e2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a9ce:	6839      	ldr	r1, [r7, #0]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fca3 	bl	800b31c <USBD_CtlError>
          break;
 800a9d6:	e004      	b.n	800a9e2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fc9e 	bl	800b31c <USBD_CtlError>
          break;
 800a9e0:	e000      	b.n	800a9e4 <USBD_StdItfReq+0x7c>
          break;
 800a9e2:	bf00      	nop
      }
      break;
 800a9e4:	e004      	b.n	800a9f0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fc97 	bl	800b31c <USBD_CtlError>
      break;
 800a9ee:	bf00      	nop
  }

  return ret;
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	889b      	ldrh	r3, [r3, #4]
 800aa0c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa16:	2b40      	cmp	r3, #64	; 0x40
 800aa18:	d007      	beq.n	800aa2a <USBD_StdEPReq+0x30>
 800aa1a:	2b40      	cmp	r3, #64	; 0x40
 800aa1c:	f200 8145 	bhi.w	800acaa <USBD_StdEPReq+0x2b0>
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00c      	beq.n	800aa3e <USBD_StdEPReq+0x44>
 800aa24:	2b20      	cmp	r3, #32
 800aa26:	f040 8140 	bne.w	800acaa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	6839      	ldr	r1, [r7, #0]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	4798      	blx	r3
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa3c:	e13a      	b.n	800acb4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	785b      	ldrb	r3, [r3, #1]
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d007      	beq.n	800aa56 <USBD_StdEPReq+0x5c>
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	f300 8129 	bgt.w	800ac9e <USBD_StdEPReq+0x2a4>
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d07f      	beq.n	800ab50 <USBD_StdEPReq+0x156>
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d03c      	beq.n	800aace <USBD_StdEPReq+0xd4>
 800aa54:	e123      	b.n	800ac9e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d002      	beq.n	800aa68 <USBD_StdEPReq+0x6e>
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d016      	beq.n	800aa94 <USBD_StdEPReq+0x9a>
 800aa66:	e02c      	b.n	800aac2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00d      	beq.n	800aa8a <USBD_StdEPReq+0x90>
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
 800aa70:	2b80      	cmp	r3, #128	; 0x80
 800aa72:	d00a      	beq.n	800aa8a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f004 fa4d 	bl	800ef18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa7e:	2180      	movs	r1, #128	; 0x80
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f004 fa49 	bl	800ef18 <USBD_LL_StallEP>
 800aa86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa88:	e020      	b.n	800aacc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fc45 	bl	800b31c <USBD_CtlError>
              break;
 800aa92:	e01b      	b.n	800aacc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	885b      	ldrh	r3, [r3, #2]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10e      	bne.n	800aaba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00b      	beq.n	800aaba <USBD_StdEPReq+0xc0>
 800aaa2:	7bbb      	ldrb	r3, [r7, #14]
 800aaa4:	2b80      	cmp	r3, #128	; 0x80
 800aaa6:	d008      	beq.n	800aaba <USBD_StdEPReq+0xc0>
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	88db      	ldrh	r3, [r3, #6]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d104      	bne.n	800aaba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f004 fa2f 	bl	800ef18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fcdc 	bl	800b478 <USBD_CtlSendStatus>

              break;
 800aac0:	e004      	b.n	800aacc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fc29 	bl	800b31c <USBD_CtlError>
              break;
 800aaca:	bf00      	nop
          }
          break;
 800aacc:	e0ec      	b.n	800aca8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d002      	beq.n	800aae0 <USBD_StdEPReq+0xe6>
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d016      	beq.n	800ab0c <USBD_StdEPReq+0x112>
 800aade:	e030      	b.n	800ab42 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00d      	beq.n	800ab02 <USBD_StdEPReq+0x108>
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	2b80      	cmp	r3, #128	; 0x80
 800aaea:	d00a      	beq.n	800ab02 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f004 fa11 	bl	800ef18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaf6:	2180      	movs	r1, #128	; 0x80
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f004 fa0d 	bl	800ef18 <USBD_LL_StallEP>
 800aafe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab00:	e025      	b.n	800ab4e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fc09 	bl	800b31c <USBD_CtlError>
              break;
 800ab0a:	e020      	b.n	800ab4e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	885b      	ldrh	r3, [r3, #2]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d11b      	bne.n	800ab4c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d004      	beq.n	800ab28 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f004 fa17 	bl	800ef56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fca5 	bl	800b478 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	4798      	blx	r3
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ab40:	e004      	b.n	800ab4c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fbe9 	bl	800b31c <USBD_CtlError>
              break;
 800ab4a:	e000      	b.n	800ab4e <USBD_StdEPReq+0x154>
              break;
 800ab4c:	bf00      	nop
          }
          break;
 800ab4e:	e0ab      	b.n	800aca8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d002      	beq.n	800ab62 <USBD_StdEPReq+0x168>
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	d032      	beq.n	800abc6 <USBD_StdEPReq+0x1cc>
 800ab60:	e097      	b.n	800ac92 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab62:	7bbb      	ldrb	r3, [r7, #14]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d007      	beq.n	800ab78 <USBD_StdEPReq+0x17e>
 800ab68:	7bbb      	ldrb	r3, [r7, #14]
 800ab6a:	2b80      	cmp	r3, #128	; 0x80
 800ab6c:	d004      	beq.n	800ab78 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fbd3 	bl	800b31c <USBD_CtlError>
                break;
 800ab76:	e091      	b.n	800ac9c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	da0b      	bge.n	800ab98 <USBD_StdEPReq+0x19e>
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
 800ab82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab86:	4613      	mov	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	3310      	adds	r3, #16
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	4413      	add	r3, r2
 800ab94:	3304      	adds	r3, #4
 800ab96:	e00b      	b.n	800abb0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab9e:	4613      	mov	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	4413      	add	r3, r2
 800abae:	3304      	adds	r3, #4
 800abb0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2200      	movs	r2, #0
 800abb6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	2202      	movs	r2, #2
 800abbc:	4619      	mov	r1, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fc1d 	bl	800b3fe <USBD_CtlSendData>
              break;
 800abc4:	e06a      	b.n	800ac9c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	da11      	bge.n	800abf2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	f003 020f 	and.w	r2, r3, #15
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	4613      	mov	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	440b      	add	r3, r1
 800abe0:	3324      	adds	r3, #36	; 0x24
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d117      	bne.n	800ac18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fb96 	bl	800b31c <USBD_CtlError>
                  break;
 800abf0:	e054      	b.n	800ac9c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	f003 020f 	and.w	r2, r3, #15
 800abf8:	6879      	ldr	r1, [r7, #4]
 800abfa:	4613      	mov	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	440b      	add	r3, r1
 800ac04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac08:	881b      	ldrh	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d104      	bne.n	800ac18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fb83 	bl	800b31c <USBD_CtlError>
                  break;
 800ac16:	e041      	b.n	800ac9c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	da0b      	bge.n	800ac38 <USBD_StdEPReq+0x23e>
 800ac20:	7bbb      	ldrb	r3, [r7, #14]
 800ac22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	3310      	adds	r3, #16
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	4413      	add	r3, r2
 800ac34:	3304      	adds	r3, #4
 800ac36:	e00b      	b.n	800ac50 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
 800ac3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac3e:	4613      	mov	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4413      	add	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	3304      	adds	r3, #4
 800ac50:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac52:	7bbb      	ldrb	r3, [r7, #14]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <USBD_StdEPReq+0x264>
 800ac58:	7bbb      	ldrb	r3, [r7, #14]
 800ac5a:	2b80      	cmp	r3, #128	; 0x80
 800ac5c:	d103      	bne.n	800ac66 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2200      	movs	r2, #0
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	e00e      	b.n	800ac84 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f004 f992 	bl	800ef94 <USBD_LL_IsStallEP>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	601a      	str	r2, [r3, #0]
 800ac7c:	e002      	b.n	800ac84 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2200      	movs	r2, #0
 800ac82:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2202      	movs	r2, #2
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fbb7 	bl	800b3fe <USBD_CtlSendData>
              break;
 800ac90:	e004      	b.n	800ac9c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fb41 	bl	800b31c <USBD_CtlError>
              break;
 800ac9a:	bf00      	nop
          }
          break;
 800ac9c:	e004      	b.n	800aca8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fb3b 	bl	800b31c <USBD_CtlError>
          break;
 800aca6:	bf00      	nop
      }
      break;
 800aca8:	e004      	b.n	800acb4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fb35 	bl	800b31c <USBD_CtlError>
      break;
 800acb2:	bf00      	nop
  }

  return ret;
 800acb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acca:	2300      	movs	r3, #0
 800accc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800acce:	2300      	movs	r3, #0
 800acd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acd2:	2300      	movs	r3, #0
 800acd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	885b      	ldrh	r3, [r3, #2]
 800acda:	0a1b      	lsrs	r3, r3, #8
 800acdc:	b29b      	uxth	r3, r3
 800acde:	3b01      	subs	r3, #1
 800ace0:	2b06      	cmp	r3, #6
 800ace2:	f200 8128 	bhi.w	800af36 <USBD_GetDescriptor+0x276>
 800ace6:	a201      	add	r2, pc, #4	; (adr r2, 800acec <USBD_GetDescriptor+0x2c>)
 800ace8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acec:	0800ad09 	.word	0x0800ad09
 800acf0:	0800ad21 	.word	0x0800ad21
 800acf4:	0800ad61 	.word	0x0800ad61
 800acf8:	0800af37 	.word	0x0800af37
 800acfc:	0800af37 	.word	0x0800af37
 800ad00:	0800aed7 	.word	0x0800aed7
 800ad04:	0800af03 	.word	0x0800af03
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	7c12      	ldrb	r2, [r2, #16]
 800ad14:	f107 0108 	add.w	r1, r7, #8
 800ad18:	4610      	mov	r0, r2
 800ad1a:	4798      	blx	r3
 800ad1c:	60f8      	str	r0, [r7, #12]
      break;
 800ad1e:	e112      	b.n	800af46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	7c1b      	ldrb	r3, [r3, #16]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10d      	bne.n	800ad44 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad30:	f107 0208 	add.w	r2, r7, #8
 800ad34:	4610      	mov	r0, r2
 800ad36:	4798      	blx	r3
 800ad38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	2202      	movs	r2, #2
 800ad40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad42:	e100      	b.n	800af46 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4c:	f107 0208 	add.w	r2, r7, #8
 800ad50:	4610      	mov	r0, r2
 800ad52:	4798      	blx	r3
 800ad54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	701a      	strb	r2, [r3, #0]
      break;
 800ad5e:	e0f2      	b.n	800af46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	885b      	ldrh	r3, [r3, #2]
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b05      	cmp	r3, #5
 800ad68:	f200 80ac 	bhi.w	800aec4 <USBD_GetDescriptor+0x204>
 800ad6c:	a201      	add	r2, pc, #4	; (adr r2, 800ad74 <USBD_GetDescriptor+0xb4>)
 800ad6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad72:	bf00      	nop
 800ad74:	0800ad8d 	.word	0x0800ad8d
 800ad78:	0800adc1 	.word	0x0800adc1
 800ad7c:	0800adf5 	.word	0x0800adf5
 800ad80:	0800ae29 	.word	0x0800ae29
 800ad84:	0800ae5d 	.word	0x0800ae5d
 800ad88:	0800ae91 	.word	0x0800ae91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00b      	beq.n	800adb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	7c12      	ldrb	r2, [r2, #16]
 800ada4:	f107 0108 	add.w	r1, r7, #8
 800ada8:	4610      	mov	r0, r2
 800adaa:	4798      	blx	r3
 800adac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adae:	e091      	b.n	800aed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fab2 	bl	800b31c <USBD_CtlError>
            err++;
 800adb8:	7afb      	ldrb	r3, [r7, #11]
 800adba:	3301      	adds	r3, #1
 800adbc:	72fb      	strb	r3, [r7, #11]
          break;
 800adbe:	e089      	b.n	800aed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00b      	beq.n	800ade4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	7c12      	ldrb	r2, [r2, #16]
 800add8:	f107 0108 	add.w	r1, r7, #8
 800addc:	4610      	mov	r0, r2
 800adde:	4798      	blx	r3
 800ade0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ade2:	e077      	b.n	800aed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fa98 	bl	800b31c <USBD_CtlError>
            err++;
 800adec:	7afb      	ldrb	r3, [r7, #11]
 800adee:	3301      	adds	r3, #1
 800adf0:	72fb      	strb	r3, [r7, #11]
          break;
 800adf2:	e06f      	b.n	800aed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00b      	beq.n	800ae18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	7c12      	ldrb	r2, [r2, #16]
 800ae0c:	f107 0108 	add.w	r1, r7, #8
 800ae10:	4610      	mov	r0, r2
 800ae12:	4798      	blx	r3
 800ae14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae16:	e05d      	b.n	800aed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fa7e 	bl	800b31c <USBD_CtlError>
            err++;
 800ae20:	7afb      	ldrb	r3, [r7, #11]
 800ae22:	3301      	adds	r3, #1
 800ae24:	72fb      	strb	r3, [r7, #11]
          break;
 800ae26:	e055      	b.n	800aed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00b      	beq.n	800ae4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	7c12      	ldrb	r2, [r2, #16]
 800ae40:	f107 0108 	add.w	r1, r7, #8
 800ae44:	4610      	mov	r0, r2
 800ae46:	4798      	blx	r3
 800ae48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae4a:	e043      	b.n	800aed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fa64 	bl	800b31c <USBD_CtlError>
            err++;
 800ae54:	7afb      	ldrb	r3, [r7, #11]
 800ae56:	3301      	adds	r3, #1
 800ae58:	72fb      	strb	r3, [r7, #11]
          break;
 800ae5a:	e03b      	b.n	800aed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00b      	beq.n	800ae80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	7c12      	ldrb	r2, [r2, #16]
 800ae74:	f107 0108 	add.w	r1, r7, #8
 800ae78:	4610      	mov	r0, r2
 800ae7a:	4798      	blx	r3
 800ae7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae7e:	e029      	b.n	800aed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fa4a 	bl	800b31c <USBD_CtlError>
            err++;
 800ae88:	7afb      	ldrb	r3, [r7, #11]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae8e:	e021      	b.n	800aed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00b      	beq.n	800aeb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	7c12      	ldrb	r2, [r2, #16]
 800aea8:	f107 0108 	add.w	r1, r7, #8
 800aeac:	4610      	mov	r0, r2
 800aeae:	4798      	blx	r3
 800aeb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeb2:	e00f      	b.n	800aed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fa30 	bl	800b31c <USBD_CtlError>
            err++;
 800aebc:	7afb      	ldrb	r3, [r7, #11]
 800aebe:	3301      	adds	r3, #1
 800aec0:	72fb      	strb	r3, [r7, #11]
          break;
 800aec2:	e007      	b.n	800aed4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fa28 	bl	800b31c <USBD_CtlError>
          err++;
 800aecc:	7afb      	ldrb	r3, [r7, #11]
 800aece:	3301      	adds	r3, #1
 800aed0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800aed2:	bf00      	nop
      }
      break;
 800aed4:	e037      	b.n	800af46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	7c1b      	ldrb	r3, [r3, #16]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d109      	bne.n	800aef2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee6:	f107 0208 	add.w	r2, r7, #8
 800aeea:	4610      	mov	r0, r2
 800aeec:	4798      	blx	r3
 800aeee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aef0:	e029      	b.n	800af46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fa11 	bl	800b31c <USBD_CtlError>
        err++;
 800aefa:	7afb      	ldrb	r3, [r7, #11]
 800aefc:	3301      	adds	r3, #1
 800aefe:	72fb      	strb	r3, [r7, #11]
      break;
 800af00:	e021      	b.n	800af46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	7c1b      	ldrb	r3, [r3, #16]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10d      	bne.n	800af26 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af12:	f107 0208 	add.w	r2, r7, #8
 800af16:	4610      	mov	r0, r2
 800af18:	4798      	blx	r3
 800af1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	3301      	adds	r3, #1
 800af20:	2207      	movs	r2, #7
 800af22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af24:	e00f      	b.n	800af46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f9f7 	bl	800b31c <USBD_CtlError>
        err++;
 800af2e:	7afb      	ldrb	r3, [r7, #11]
 800af30:	3301      	adds	r3, #1
 800af32:	72fb      	strb	r3, [r7, #11]
      break;
 800af34:	e007      	b.n	800af46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f9ef 	bl	800b31c <USBD_CtlError>
      err++;
 800af3e:	7afb      	ldrb	r3, [r7, #11]
 800af40:	3301      	adds	r3, #1
 800af42:	72fb      	strb	r3, [r7, #11]
      break;
 800af44:	bf00      	nop
  }

  if (err != 0U)
 800af46:	7afb      	ldrb	r3, [r7, #11]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d11e      	bne.n	800af8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	88db      	ldrh	r3, [r3, #6]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d016      	beq.n	800af82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800af54:	893b      	ldrh	r3, [r7, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00e      	beq.n	800af78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	88da      	ldrh	r2, [r3, #6]
 800af5e:	893b      	ldrh	r3, [r7, #8]
 800af60:	4293      	cmp	r3, r2
 800af62:	bf28      	it	cs
 800af64:	4613      	movcs	r3, r2
 800af66:	b29b      	uxth	r3, r3
 800af68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af6a:	893b      	ldrh	r3, [r7, #8]
 800af6c:	461a      	mov	r2, r3
 800af6e:	68f9      	ldr	r1, [r7, #12]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fa44 	bl	800b3fe <USBD_CtlSendData>
 800af76:	e009      	b.n	800af8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 f9ce 	bl	800b31c <USBD_CtlError>
 800af80:	e004      	b.n	800af8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fa78 	bl	800b478 <USBD_CtlSendStatus>
 800af88:	e000      	b.n	800af8c <USBD_GetDescriptor+0x2cc>
    return;
 800af8a:	bf00      	nop
  }
}
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop

0800af94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	889b      	ldrh	r3, [r3, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d131      	bne.n	800b00a <USBD_SetAddress+0x76>
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	88db      	ldrh	r3, [r3, #6]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d12d      	bne.n	800b00a <USBD_SetAddress+0x76>
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	885b      	ldrh	r3, [r3, #2]
 800afb2:	2b7f      	cmp	r3, #127	; 0x7f
 800afb4:	d829      	bhi.n	800b00a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	885b      	ldrh	r3, [r3, #2]
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b03      	cmp	r3, #3
 800afcc:	d104      	bne.n	800afd8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f9a3 	bl	800b31c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd6:	e01d      	b.n	800b014 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	7bfa      	ldrb	r2, [r7, #15]
 800afdc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f004 f801 	bl	800efec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fa44 	bl	800b478 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d004      	beq.n	800b000 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2202      	movs	r2, #2
 800affa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800affe:	e009      	b.n	800b014 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b008:	e004      	b.n	800b014 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 f985 	bl	800b31c <USBD_CtlError>
  }
}
 800b012:	bf00      	nop
 800b014:	bf00      	nop
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	885b      	ldrh	r3, [r3, #2]
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	4b4c      	ldr	r3, [pc, #304]	; (800b164 <USBD_SetConfig+0x148>)
 800b032:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b034:	4b4b      	ldr	r3, [pc, #300]	; (800b164 <USBD_SetConfig+0x148>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d905      	bls.n	800b048 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f96c 	bl	800b31c <USBD_CtlError>
    return USBD_FAIL;
 800b044:	2303      	movs	r3, #3
 800b046:	e088      	b.n	800b15a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	2b02      	cmp	r3, #2
 800b052:	d002      	beq.n	800b05a <USBD_SetConfig+0x3e>
 800b054:	2b03      	cmp	r3, #3
 800b056:	d025      	beq.n	800b0a4 <USBD_SetConfig+0x88>
 800b058:	e071      	b.n	800b13e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b05a:	4b42      	ldr	r3, [pc, #264]	; (800b164 <USBD_SetConfig+0x148>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d01c      	beq.n	800b09c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b062:	4b40      	ldr	r3, [pc, #256]	; (800b164 <USBD_SetConfig+0x148>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b06c:	4b3d      	ldr	r3, [pc, #244]	; (800b164 <USBD_SetConfig+0x148>)
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff f949 	bl	800a30a <USBD_SetClassConfig>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d004      	beq.n	800b08c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 f949 	bl	800b31c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b08a:	e065      	b.n	800b158 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f9f3 	bl	800b478 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2203      	movs	r2, #3
 800b096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b09a:	e05d      	b.n	800b158 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f9eb 	bl	800b478 <USBD_CtlSendStatus>
      break;
 800b0a2:	e059      	b.n	800b158 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b0a4:	4b2f      	ldr	r3, [pc, #188]	; (800b164 <USBD_SetConfig+0x148>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d112      	bne.n	800b0d2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b0b4:	4b2b      	ldr	r3, [pc, #172]	; (800b164 <USBD_SetConfig+0x148>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0be:	4b29      	ldr	r3, [pc, #164]	; (800b164 <USBD_SetConfig+0x148>)
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7ff f93c 	bl	800a342 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f9d4 	bl	800b478 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0d0:	e042      	b.n	800b158 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b0d2:	4b24      	ldr	r3, [pc, #144]	; (800b164 <USBD_SetConfig+0x148>)
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d02a      	beq.n	800b136 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7ff f92a 	bl	800a342 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b0ee:	4b1d      	ldr	r3, [pc, #116]	; (800b164 <USBD_SetConfig+0x148>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0f8:	4b1a      	ldr	r3, [pc, #104]	; (800b164 <USBD_SetConfig+0x148>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7ff f903 	bl	800a30a <USBD_SetClassConfig>
 800b104:	4603      	mov	r3, r0
 800b106:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00f      	beq.n	800b12e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f903 	bl	800b31c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff f90f 	bl	800a342 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2202      	movs	r2, #2
 800b128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b12c:	e014      	b.n	800b158 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f9a2 	bl	800b478 <USBD_CtlSendStatus>
      break;
 800b134:	e010      	b.n	800b158 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f99e 	bl	800b478 <USBD_CtlSendStatus>
      break;
 800b13c:	e00c      	b.n	800b158 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f8eb 	bl	800b31c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b146:	4b07      	ldr	r3, [pc, #28]	; (800b164 <USBD_SetConfig+0x148>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff f8f8 	bl	800a342 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b152:	2303      	movs	r3, #3
 800b154:	73fb      	strb	r3, [r7, #15]
      break;
 800b156:	bf00      	nop
  }

  return ret;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	20000764 	.word	0x20000764

0800b168 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	88db      	ldrh	r3, [r3, #6]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d004      	beq.n	800b184 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f8cd 	bl	800b31c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b182:	e023      	b.n	800b1cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	dc02      	bgt.n	800b196 <USBD_GetConfig+0x2e>
 800b190:	2b00      	cmp	r3, #0
 800b192:	dc03      	bgt.n	800b19c <USBD_GetConfig+0x34>
 800b194:	e015      	b.n	800b1c2 <USBD_GetConfig+0x5a>
 800b196:	2b03      	cmp	r3, #3
 800b198:	d00b      	beq.n	800b1b2 <USBD_GetConfig+0x4a>
 800b19a:	e012      	b.n	800b1c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f927 	bl	800b3fe <USBD_CtlSendData>
        break;
 800b1b0:	e00c      	b.n	800b1cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f91f 	bl	800b3fe <USBD_CtlSendData>
        break;
 800b1c0:	e004      	b.n	800b1cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f8a9 	bl	800b31c <USBD_CtlError>
        break;
 800b1ca:	bf00      	nop
}
 800b1cc:	bf00      	nop
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d81e      	bhi.n	800b22a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	88db      	ldrh	r3, [r3, #6]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d004      	beq.n	800b1fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f890 	bl	800b31c <USBD_CtlError>
        break;
 800b1fc:	e01a      	b.n	800b234 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d005      	beq.n	800b21a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	f043 0202 	orr.w	r2, r3, #2
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	330c      	adds	r3, #12
 800b21e:	2202      	movs	r2, #2
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f8eb 	bl	800b3fe <USBD_CtlSendData>
      break;
 800b228:	e004      	b.n	800b234 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f875 	bl	800b31c <USBD_CtlError>
      break;
 800b232:	bf00      	nop
  }
}
 800b234:	bf00      	nop
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	885b      	ldrh	r3, [r3, #2]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d106      	bne.n	800b25c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f90e 	bl	800b478 <USBD_CtlSendStatus>
  }
}
 800b25c:	bf00      	nop
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b274:	b2db      	uxtb	r3, r3
 800b276:	3b01      	subs	r3, #1
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d80b      	bhi.n	800b294 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	885b      	ldrh	r3, [r3, #2]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d10c      	bne.n	800b29e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f8f3 	bl	800b478 <USBD_CtlSendStatus>
      }
      break;
 800b292:	e004      	b.n	800b29e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f840 	bl	800b31c <USBD_CtlError>
      break;
 800b29c:	e000      	b.n	800b2a0 <USBD_ClrFeature+0x3c>
      break;
 800b29e:	bf00      	nop
  }
}
 800b2a0:	bf00      	nop
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	781a      	ldrb	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	781a      	ldrb	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f7ff fabc 	bl	800a850 <SWAPBYTE>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	461a      	mov	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f7ff faaf 	bl	800a850 <SWAPBYTE>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	3301      	adds	r3, #1
 800b304:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f7ff faa2 	bl	800a850 <SWAPBYTE>
 800b30c:	4603      	mov	r3, r0
 800b30e:	461a      	mov	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	80da      	strh	r2, [r3, #6]
}
 800b314:	bf00      	nop
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b326:	2180      	movs	r1, #128	; 0x80
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f003 fdf5 	bl	800ef18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b32e:	2100      	movs	r1, #0
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f003 fdf1 	bl	800ef18 <USBD_LL_StallEP>
}
 800b336:	bf00      	nop
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b086      	sub	sp, #24
 800b342:	af00      	add	r7, sp, #0
 800b344:	60f8      	str	r0, [r7, #12]
 800b346:	60b9      	str	r1, [r7, #8]
 800b348:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d036      	beq.n	800b3c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b358:	6938      	ldr	r0, [r7, #16]
 800b35a:	f000 f836 	bl	800b3ca <USBD_GetLen>
 800b35e:	4603      	mov	r3, r0
 800b360:	3301      	adds	r3, #1
 800b362:	b29b      	uxth	r3, r3
 800b364:	005b      	lsls	r3, r3, #1
 800b366:	b29a      	uxth	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b36c:	7dfb      	ldrb	r3, [r7, #23]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	4413      	add	r3, r2
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	7812      	ldrb	r2, [r2, #0]
 800b376:	701a      	strb	r2, [r3, #0]
  idx++;
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	3301      	adds	r3, #1
 800b37c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	4413      	add	r3, r2
 800b384:	2203      	movs	r2, #3
 800b386:	701a      	strb	r2, [r3, #0]
  idx++;
 800b388:	7dfb      	ldrb	r3, [r7, #23]
 800b38a:	3301      	adds	r3, #1
 800b38c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b38e:	e013      	b.n	800b3b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b390:	7dfb      	ldrb	r3, [r7, #23]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	4413      	add	r3, r2
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	7812      	ldrb	r2, [r2, #0]
 800b39a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	613b      	str	r3, [r7, #16]
    idx++;
 800b3a2:	7dfb      	ldrb	r3, [r7, #23]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b3a8:	7dfb      	ldrb	r3, [r7, #23]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	701a      	strb	r2, [r3, #0]
    idx++;
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1e7      	bne.n	800b390 <USBD_GetString+0x52>
 800b3c0:	e000      	b.n	800b3c4 <USBD_GetString+0x86>
    return;
 800b3c2:	bf00      	nop
  }
}
 800b3c4:	3718      	adds	r7, #24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b085      	sub	sp, #20
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b3da:	e005      	b.n	800b3e8 <USBD_GetLen+0x1e>
  {
    len++;
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1f5      	bne.n	800b3dc <USBD_GetLen+0x12>
  }

  return len;
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	60b9      	str	r1, [r7, #8]
 800b408:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2202      	movs	r2, #2
 800b40e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	2100      	movs	r1, #0
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f003 fe00 	bl	800f02a <USBD_LL_Transmit>

  return USBD_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	2100      	movs	r1, #0
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f003 fdef 	bl	800f02a <USBD_LL_Transmit>

  return USBD_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	60f8      	str	r0, [r7, #12]
 800b45e:	60b9      	str	r1, [r7, #8]
 800b460:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	2100      	movs	r1, #0
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f003 fdff 	bl	800f06c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2204      	movs	r2, #4
 800b484:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b488:	2300      	movs	r3, #0
 800b48a:	2200      	movs	r2, #0
 800b48c:	2100      	movs	r1, #0
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f003 fdcb 	bl	800f02a <USBD_LL_Transmit>

  return USBD_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2205      	movs	r2, #5
 800b4aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f003 fdd9 	bl	800f06c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b4ce:	79fb      	ldrb	r3, [r7, #7]
 800b4d0:	4a08      	ldr	r2, [pc, #32]	; (800b4f4 <disk_status+0x30>)
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	79fa      	ldrb	r2, [r7, #7]
 800b4dc:	4905      	ldr	r1, [pc, #20]	; (800b4f4 <disk_status+0x30>)
 800b4de:	440a      	add	r2, r1
 800b4e0:	7a12      	ldrb	r2, [r2, #8]
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	4798      	blx	r3
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	20000990 	.word	0x20000990

0800b4f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b506:	79fb      	ldrb	r3, [r7, #7]
 800b508:	4a0d      	ldr	r2, [pc, #52]	; (800b540 <disk_initialize+0x48>)
 800b50a:	5cd3      	ldrb	r3, [r2, r3]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d111      	bne.n	800b534 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b510:	79fb      	ldrb	r3, [r7, #7]
 800b512:	4a0b      	ldr	r2, [pc, #44]	; (800b540 <disk_initialize+0x48>)
 800b514:	2101      	movs	r1, #1
 800b516:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b518:	79fb      	ldrb	r3, [r7, #7]
 800b51a:	4a09      	ldr	r2, [pc, #36]	; (800b540 <disk_initialize+0x48>)
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4413      	add	r3, r2
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	79fa      	ldrb	r2, [r7, #7]
 800b526:	4906      	ldr	r1, [pc, #24]	; (800b540 <disk_initialize+0x48>)
 800b528:	440a      	add	r2, r1
 800b52a:	7a12      	ldrb	r2, [r2, #8]
 800b52c:	4610      	mov	r0, r2
 800b52e:	4798      	blx	r3
 800b530:	4603      	mov	r3, r0
 800b532:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b534:	7bfb      	ldrb	r3, [r7, #15]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20000990 	.word	0x20000990

0800b544 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b544:	b590      	push	{r4, r7, lr}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60b9      	str	r1, [r7, #8]
 800b54c:	607a      	str	r2, [r7, #4]
 800b54e:	603b      	str	r3, [r7, #0]
 800b550:	4603      	mov	r3, r0
 800b552:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b554:	7bfb      	ldrb	r3, [r7, #15]
 800b556:	4a0a      	ldr	r2, [pc, #40]	; (800b580 <disk_read+0x3c>)
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4413      	add	r3, r2
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	689c      	ldr	r4, [r3, #8]
 800b560:	7bfb      	ldrb	r3, [r7, #15]
 800b562:	4a07      	ldr	r2, [pc, #28]	; (800b580 <disk_read+0x3c>)
 800b564:	4413      	add	r3, r2
 800b566:	7a18      	ldrb	r0, [r3, #8]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	68b9      	ldr	r1, [r7, #8]
 800b56e:	47a0      	blx	r4
 800b570:	4603      	mov	r3, r0
 800b572:	75fb      	strb	r3, [r7, #23]
  return res;
 800b574:	7dfb      	ldrb	r3, [r7, #23]
}
 800b576:	4618      	mov	r0, r3
 800b578:	371c      	adds	r7, #28
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd90      	pop	{r4, r7, pc}
 800b57e:	bf00      	nop
 800b580:	20000990 	.word	0x20000990

0800b584 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b584:	b590      	push	{r4, r7, lr}
 800b586:	b087      	sub	sp, #28
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60b9      	str	r1, [r7, #8]
 800b58c:	607a      	str	r2, [r7, #4]
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	4603      	mov	r3, r0
 800b592:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b594:	7bfb      	ldrb	r3, [r7, #15]
 800b596:	4a0a      	ldr	r2, [pc, #40]	; (800b5c0 <disk_write+0x3c>)
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	68dc      	ldr	r4, [r3, #12]
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	4a07      	ldr	r2, [pc, #28]	; (800b5c0 <disk_write+0x3c>)
 800b5a4:	4413      	add	r3, r2
 800b5a6:	7a18      	ldrb	r0, [r3, #8]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	68b9      	ldr	r1, [r7, #8]
 800b5ae:	47a0      	blx	r4
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	371c      	adds	r7, #28
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd90      	pop	{r4, r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20000990 	.word	0x20000990

0800b5c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	603a      	str	r2, [r7, #0]
 800b5ce:	71fb      	strb	r3, [r7, #7]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b5d4:	79fb      	ldrb	r3, [r7, #7]
 800b5d6:	4a09      	ldr	r2, [pc, #36]	; (800b5fc <disk_ioctl+0x38>)
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	79fa      	ldrb	r2, [r7, #7]
 800b5e2:	4906      	ldr	r1, [pc, #24]	; (800b5fc <disk_ioctl+0x38>)
 800b5e4:	440a      	add	r2, r1
 800b5e6:	7a10      	ldrb	r0, [r2, #8]
 800b5e8:	79b9      	ldrb	r1, [r7, #6]
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	4798      	blx	r3
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73fb      	strb	r3, [r7, #15]
  return res;
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	20000990 	.word	0x20000990

0800b600 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3301      	adds	r3, #1
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b610:	89fb      	ldrh	r3, [r7, #14]
 800b612:	021b      	lsls	r3, r3, #8
 800b614:	b21a      	sxth	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	b21b      	sxth	r3, r3
 800b61c:	4313      	orrs	r3, r2
 800b61e:	b21b      	sxth	r3, r3
 800b620:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b622:	89fb      	ldrh	r3, [r7, #14]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3303      	adds	r3, #3
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	021b      	lsls	r3, r3, #8
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	3202      	adds	r2, #2
 800b648:	7812      	ldrb	r2, [r2, #0]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	021b      	lsls	r3, r3, #8
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	3201      	adds	r2, #1
 800b656:	7812      	ldrb	r2, [r2, #0]
 800b658:	4313      	orrs	r3, r2
 800b65a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	021b      	lsls	r3, r3, #8
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	7812      	ldrb	r2, [r2, #0]
 800b664:	4313      	orrs	r3, r2
 800b666:	60fb      	str	r3, [r7, #12]
	return rv;
 800b668:	68fb      	ldr	r3, [r7, #12]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b676:	b480      	push	{r7}
 800b678:	b083      	sub	sp, #12
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	460b      	mov	r3, r1
 800b680:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	1c5a      	adds	r2, r3, #1
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	887a      	ldrh	r2, [r7, #2]
 800b68a:	b2d2      	uxtb	r2, r2
 800b68c:	701a      	strb	r2, [r3, #0]
 800b68e:	887b      	ldrh	r3, [r7, #2]
 800b690:	0a1b      	lsrs	r3, r3, #8
 800b692:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	1c5a      	adds	r2, r3, #1
 800b698:	607a      	str	r2, [r7, #4]
 800b69a:	887a      	ldrh	r2, [r7, #2]
 800b69c:	b2d2      	uxtb	r2, r2
 800b69e:	701a      	strb	r2, [r3, #0]
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	1c5a      	adds	r2, r3, #1
 800b6ba:	607a      	str	r2, [r7, #4]
 800b6bc:	683a      	ldr	r2, [r7, #0]
 800b6be:	b2d2      	uxtb	r2, r2
 800b6c0:	701a      	strb	r2, [r3, #0]
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	0a1b      	lsrs	r3, r3, #8
 800b6c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	607a      	str	r2, [r7, #4]
 800b6ce:	683a      	ldr	r2, [r7, #0]
 800b6d0:	b2d2      	uxtb	r2, r2
 800b6d2:	701a      	strb	r2, [r3, #0]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	0a1b      	lsrs	r3, r3, #8
 800b6d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	1c5a      	adds	r2, r3, #1
 800b6de:	607a      	str	r2, [r7, #4]
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	b2d2      	uxtb	r2, r2
 800b6e4:	701a      	strb	r2, [r3, #0]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	0a1b      	lsrs	r3, r3, #8
 800b6ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	607a      	str	r2, [r7, #4]
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	b2d2      	uxtb	r2, r2
 800b6f6:	701a      	strb	r2, [r3, #0]
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00d      	beq.n	800b73a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	1c53      	adds	r3, r2, #1
 800b722:	613b      	str	r3, [r7, #16]
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	1c59      	adds	r1, r3, #1
 800b728:	6179      	str	r1, [r7, #20]
 800b72a:	7812      	ldrb	r2, [r2, #0]
 800b72c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	3b01      	subs	r3, #1
 800b732:	607b      	str	r3, [r7, #4]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1f1      	bne.n	800b71e <mem_cpy+0x1a>
	}
}
 800b73a:	bf00      	nop
 800b73c:	371c      	adds	r7, #28
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b746:	b480      	push	{r7}
 800b748:	b087      	sub	sp, #28
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	617a      	str	r2, [r7, #20]
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	b2d2      	uxtb	r2, r2
 800b760:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3b01      	subs	r3, #1
 800b766:	607b      	str	r3, [r7, #4]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1f3      	bne.n	800b756 <mem_set+0x10>
}
 800b76e:	bf00      	nop
 800b770:	bf00      	nop
 800b772:	371c      	adds	r7, #28
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b77c:	b480      	push	{r7}
 800b77e:	b089      	sub	sp, #36	; 0x24
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	61fb      	str	r3, [r7, #28]
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b790:	2300      	movs	r3, #0
 800b792:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	1c5a      	adds	r2, r3, #1
 800b798:	61fa      	str	r2, [r7, #28]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	4619      	mov	r1, r3
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	61ba      	str	r2, [r7, #24]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	1acb      	subs	r3, r1, r3
 800b7a8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	607b      	str	r3, [r7, #4]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d002      	beq.n	800b7bc <mem_cmp+0x40>
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d0eb      	beq.n	800b794 <mem_cmp+0x18>

	return r;
 800b7bc:	697b      	ldr	r3, [r7, #20]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3724      	adds	r7, #36	; 0x24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b7ca:	b480      	push	{r7}
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b7d4:	e002      	b.n	800b7dc <chk_chr+0x12>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	607b      	str	r3, [r7, #4]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d005      	beq.n	800b7f0 <chk_chr+0x26>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d1f2      	bne.n	800b7d6 <chk_chr+0xc>
	return *str;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b80a:	2300      	movs	r3, #0
 800b80c:	60bb      	str	r3, [r7, #8]
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	60fb      	str	r3, [r7, #12]
 800b812:	e029      	b.n	800b868 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b814:	4a27      	ldr	r2, [pc, #156]	; (800b8b4 <chk_lock+0xb4>)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	011b      	lsls	r3, r3, #4
 800b81a:	4413      	add	r3, r2
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d01d      	beq.n	800b85e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b822:	4a24      	ldr	r2, [pc, #144]	; (800b8b4 <chk_lock+0xb4>)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	4413      	add	r3, r2
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	429a      	cmp	r2, r3
 800b832:	d116      	bne.n	800b862 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b834:	4a1f      	ldr	r2, [pc, #124]	; (800b8b4 <chk_lock+0xb4>)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	011b      	lsls	r3, r3, #4
 800b83a:	4413      	add	r3, r2
 800b83c:	3304      	adds	r3, #4
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b844:	429a      	cmp	r2, r3
 800b846:	d10c      	bne.n	800b862 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b848:	4a1a      	ldr	r2, [pc, #104]	; (800b8b4 <chk_lock+0xb4>)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	011b      	lsls	r3, r3, #4
 800b84e:	4413      	add	r3, r2
 800b850:	3308      	adds	r3, #8
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b858:	429a      	cmp	r2, r3
 800b85a:	d102      	bne.n	800b862 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b85c:	e007      	b.n	800b86e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b85e:	2301      	movs	r3, #1
 800b860:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3301      	adds	r3, #1
 800b866:	60fb      	str	r3, [r7, #12]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d9d2      	bls.n	800b814 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b02      	cmp	r3, #2
 800b872:	d109      	bne.n	800b888 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d102      	bne.n	800b880 <chk_lock+0x80>
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d101      	bne.n	800b884 <chk_lock+0x84>
 800b880:	2300      	movs	r3, #0
 800b882:	e010      	b.n	800b8a6 <chk_lock+0xa6>
 800b884:	2312      	movs	r3, #18
 800b886:	e00e      	b.n	800b8a6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d108      	bne.n	800b8a0 <chk_lock+0xa0>
 800b88e:	4a09      	ldr	r2, [pc, #36]	; (800b8b4 <chk_lock+0xb4>)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	011b      	lsls	r3, r3, #4
 800b894:	4413      	add	r3, r2
 800b896:	330c      	adds	r3, #12
 800b898:	881b      	ldrh	r3, [r3, #0]
 800b89a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b89e:	d101      	bne.n	800b8a4 <chk_lock+0xa4>
 800b8a0:	2310      	movs	r3, #16
 800b8a2:	e000      	b.n	800b8a6 <chk_lock+0xa6>
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3714      	adds	r7, #20
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	20000770 	.word	0x20000770

0800b8b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	607b      	str	r3, [r7, #4]
 800b8c2:	e002      	b.n	800b8ca <enq_lock+0x12>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	607b      	str	r3, [r7, #4]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d806      	bhi.n	800b8de <enq_lock+0x26>
 800b8d0:	4a09      	ldr	r2, [pc, #36]	; (800b8f8 <enq_lock+0x40>)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	011b      	lsls	r3, r3, #4
 800b8d6:	4413      	add	r3, r2
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1f2      	bne.n	800b8c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	bf14      	ite	ne
 800b8e4:	2301      	movne	r3, #1
 800b8e6:	2300      	moveq	r3, #0
 800b8e8:	b2db      	uxtb	r3, r3
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop
 800b8f8:	20000770 	.word	0x20000770

0800b8fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b906:	2300      	movs	r3, #0
 800b908:	60fb      	str	r3, [r7, #12]
 800b90a:	e01f      	b.n	800b94c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b90c:	4a41      	ldr	r2, [pc, #260]	; (800ba14 <inc_lock+0x118>)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	011b      	lsls	r3, r3, #4
 800b912:	4413      	add	r3, r2
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d113      	bne.n	800b946 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b91e:	4a3d      	ldr	r2, [pc, #244]	; (800ba14 <inc_lock+0x118>)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	011b      	lsls	r3, r3, #4
 800b924:	4413      	add	r3, r2
 800b926:	3304      	adds	r3, #4
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b92e:	429a      	cmp	r2, r3
 800b930:	d109      	bne.n	800b946 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b932:	4a38      	ldr	r2, [pc, #224]	; (800ba14 <inc_lock+0x118>)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	011b      	lsls	r3, r3, #4
 800b938:	4413      	add	r3, r2
 800b93a:	3308      	adds	r3, #8
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b942:	429a      	cmp	r2, r3
 800b944:	d006      	beq.n	800b954 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3301      	adds	r3, #1
 800b94a:	60fb      	str	r3, [r7, #12]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d9dc      	bls.n	800b90c <inc_lock+0x10>
 800b952:	e000      	b.n	800b956 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b954:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d132      	bne.n	800b9c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b95c:	2300      	movs	r3, #0
 800b95e:	60fb      	str	r3, [r7, #12]
 800b960:	e002      	b.n	800b968 <inc_lock+0x6c>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3301      	adds	r3, #1
 800b966:	60fb      	str	r3, [r7, #12]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d806      	bhi.n	800b97c <inc_lock+0x80>
 800b96e:	4a29      	ldr	r2, [pc, #164]	; (800ba14 <inc_lock+0x118>)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	011b      	lsls	r3, r3, #4
 800b974:	4413      	add	r3, r2
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1f2      	bne.n	800b962 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d101      	bne.n	800b986 <inc_lock+0x8a>
 800b982:	2300      	movs	r3, #0
 800b984:	e040      	b.n	800ba08 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	4922      	ldr	r1, [pc, #136]	; (800ba14 <inc_lock+0x118>)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	011b      	lsls	r3, r3, #4
 800b990:	440b      	add	r3, r1
 800b992:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	491e      	ldr	r1, [pc, #120]	; (800ba14 <inc_lock+0x118>)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	011b      	lsls	r3, r3, #4
 800b99e:	440b      	add	r3, r1
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	695a      	ldr	r2, [r3, #20]
 800b9a8:	491a      	ldr	r1, [pc, #104]	; (800ba14 <inc_lock+0x118>)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	011b      	lsls	r3, r3, #4
 800b9ae:	440b      	add	r3, r1
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b9b4:	4a17      	ldr	r2, [pc, #92]	; (800ba14 <inc_lock+0x118>)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	011b      	lsls	r3, r3, #4
 800b9ba:	4413      	add	r3, r2
 800b9bc:	330c      	adds	r3, #12
 800b9be:	2200      	movs	r2, #0
 800b9c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d009      	beq.n	800b9dc <inc_lock+0xe0>
 800b9c8:	4a12      	ldr	r2, [pc, #72]	; (800ba14 <inc_lock+0x118>)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	011b      	lsls	r3, r3, #4
 800b9ce:	4413      	add	r3, r2
 800b9d0:	330c      	adds	r3, #12
 800b9d2:	881b      	ldrh	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <inc_lock+0xe0>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e015      	b.n	800ba08 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d108      	bne.n	800b9f4 <inc_lock+0xf8>
 800b9e2:	4a0c      	ldr	r2, [pc, #48]	; (800ba14 <inc_lock+0x118>)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	011b      	lsls	r3, r3, #4
 800b9e8:	4413      	add	r3, r2
 800b9ea:	330c      	adds	r3, #12
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	e001      	b.n	800b9f8 <inc_lock+0xfc>
 800b9f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9f8:	4906      	ldr	r1, [pc, #24]	; (800ba14 <inc_lock+0x118>)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	011b      	lsls	r3, r3, #4
 800b9fe:	440b      	add	r3, r1
 800ba00:	330c      	adds	r3, #12
 800ba02:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	3301      	adds	r3, #1
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	20000770 	.word	0x20000770

0800ba18 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	3b01      	subs	r3, #1
 800ba24:	607b      	str	r3, [r7, #4]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d825      	bhi.n	800ba78 <dec_lock+0x60>
		n = Files[i].ctr;
 800ba2c:	4a17      	ldr	r2, [pc, #92]	; (800ba8c <dec_lock+0x74>)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	011b      	lsls	r3, r3, #4
 800ba32:	4413      	add	r3, r2
 800ba34:	330c      	adds	r3, #12
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ba3a:	89fb      	ldrh	r3, [r7, #14]
 800ba3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba40:	d101      	bne.n	800ba46 <dec_lock+0x2e>
 800ba42:	2300      	movs	r3, #0
 800ba44:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ba46:	89fb      	ldrh	r3, [r7, #14]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d002      	beq.n	800ba52 <dec_lock+0x3a>
 800ba4c:	89fb      	ldrh	r3, [r7, #14]
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ba52:	4a0e      	ldr	r2, [pc, #56]	; (800ba8c <dec_lock+0x74>)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	011b      	lsls	r3, r3, #4
 800ba58:	4413      	add	r3, r2
 800ba5a:	330c      	adds	r3, #12
 800ba5c:	89fa      	ldrh	r2, [r7, #14]
 800ba5e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ba60:	89fb      	ldrh	r3, [r7, #14]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d105      	bne.n	800ba72 <dec_lock+0x5a>
 800ba66:	4a09      	ldr	r2, [pc, #36]	; (800ba8c <dec_lock+0x74>)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	011b      	lsls	r3, r3, #4
 800ba6c:	4413      	add	r3, r2
 800ba6e:	2200      	movs	r2, #0
 800ba70:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	737b      	strb	r3, [r7, #13]
 800ba76:	e001      	b.n	800ba7c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ba78:	2302      	movs	r3, #2
 800ba7a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ba7c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3714      	adds	r7, #20
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	20000770 	.word	0x20000770

0800ba90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ba98:	2300      	movs	r3, #0
 800ba9a:	60fb      	str	r3, [r7, #12]
 800ba9c:	e010      	b.n	800bac0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ba9e:	4a0d      	ldr	r2, [pc, #52]	; (800bad4 <clear_lock+0x44>)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	011b      	lsls	r3, r3, #4
 800baa4:	4413      	add	r3, r2
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d105      	bne.n	800baba <clear_lock+0x2a>
 800baae:	4a09      	ldr	r2, [pc, #36]	; (800bad4 <clear_lock+0x44>)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	011b      	lsls	r3, r3, #4
 800bab4:	4413      	add	r3, r2
 800bab6:	2200      	movs	r2, #0
 800bab8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	3301      	adds	r3, #1
 800babe:	60fb      	str	r3, [r7, #12]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d9eb      	bls.n	800ba9e <clear_lock+0xe>
	}
}
 800bac6:	bf00      	nop
 800bac8:	bf00      	nop
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	20000770 	.word	0x20000770

0800bad8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	78db      	ldrb	r3, [r3, #3]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d034      	beq.n	800bb56 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	7858      	ldrb	r0, [r3, #1]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bafc:	2301      	movs	r3, #1
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	f7ff fd40 	bl	800b584 <disk_write>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d002      	beq.n	800bb10 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	73fb      	strb	r3, [r7, #15]
 800bb0e:	e022      	b.n	800bb56 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	1ad2      	subs	r2, r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	69db      	ldr	r3, [r3, #28]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d217      	bcs.n	800bb56 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	789b      	ldrb	r3, [r3, #2]
 800bb2a:	613b      	str	r3, [r7, #16]
 800bb2c:	e010      	b.n	800bb50 <sync_window+0x78>
					wsect += fs->fsize;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	69db      	ldr	r3, [r3, #28]
 800bb32:	697a      	ldr	r2, [r7, #20]
 800bb34:	4413      	add	r3, r2
 800bb36:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	7858      	ldrb	r0, [r3, #1]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bb42:	2301      	movs	r3, #1
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	f7ff fd1d 	bl	800b584 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	613b      	str	r3, [r7, #16]
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d8eb      	bhi.n	800bb2e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3718      	adds	r7, #24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d01b      	beq.n	800bbb0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f7ff ffad 	bl	800bad8 <sync_window>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d113      	bne.n	800bbb0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	7858      	ldrb	r0, [r3, #1]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bb92:	2301      	movs	r3, #1
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	f7ff fcd5 	bl	800b544 <disk_read>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d004      	beq.n	800bbaa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bba0:	f04f 33ff 	mov.w	r3, #4294967295
 800bba4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	683a      	ldr	r2, [r7, #0]
 800bbae:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f7ff ff87 	bl	800bad8 <sync_window>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bbce:	7bfb      	ldrb	r3, [r7, #15]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d158      	bne.n	800bc86 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	d148      	bne.n	800bc6e <sync_fs+0xb2>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	791b      	ldrb	r3, [r3, #4]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d144      	bne.n	800bc6e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3334      	adds	r3, #52	; 0x34
 800bbe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbec:	2100      	movs	r1, #0
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7ff fda9 	bl	800b746 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	3334      	adds	r3, #52	; 0x34
 800bbf8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbfc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7ff fd38 	bl	800b676 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3334      	adds	r3, #52	; 0x34
 800bc0a:	4921      	ldr	r1, [pc, #132]	; (800bc90 <sync_fs+0xd4>)
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7ff fd4d 	bl	800b6ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	3334      	adds	r3, #52	; 0x34
 800bc16:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc1a:	491e      	ldr	r1, [pc, #120]	; (800bc94 <sync_fs+0xd8>)
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff fd45 	bl	800b6ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	3334      	adds	r3, #52	; 0x34
 800bc26:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	4619      	mov	r1, r3
 800bc30:	4610      	mov	r0, r2
 800bc32:	f7ff fd3b 	bl	800b6ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	3334      	adds	r3, #52	; 0x34
 800bc3a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	691b      	ldr	r3, [r3, #16]
 800bc42:	4619      	mov	r1, r3
 800bc44:	4610      	mov	r0, r2
 800bc46:	f7ff fd31 	bl	800b6ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a1b      	ldr	r3, [r3, #32]
 800bc4e:	1c5a      	adds	r2, r3, #1
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	7858      	ldrb	r0, [r3, #1]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc62:	2301      	movs	r3, #1
 800bc64:	f7ff fc8e 	bl	800b584 <disk_write>
			fs->fsi_flag = 0;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	785b      	ldrb	r3, [r3, #1]
 800bc72:	2200      	movs	r2, #0
 800bc74:	2100      	movs	r1, #0
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff fca4 	bl	800b5c4 <disk_ioctl>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <sync_fs+0xca>
 800bc82:	2301      	movs	r3, #1
 800bc84:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	41615252 	.word	0x41615252
 800bc94:	61417272 	.word	0x61417272

0800bc98 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	3b02      	subs	r3, #2
 800bca6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	3b02      	subs	r3, #2
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d301      	bcc.n	800bcb8 <clust2sect+0x20>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e008      	b.n	800bcca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	895b      	ldrh	r3, [r3, #10]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	fb03 f202 	mul.w	r2, r3, r2
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc8:	4413      	add	r3, r2
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	370c      	adds	r7, #12
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b086      	sub	sp, #24
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d904      	bls.n	800bcf6 <get_fat+0x20>
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d302      	bcc.n	800bcfc <get_fat+0x26>
		val = 1;	/* Internal error */
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	617b      	str	r3, [r7, #20]
 800bcfa:	e08f      	b.n	800be1c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bcfc:	f04f 33ff 	mov.w	r3, #4294967295
 800bd00:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	2b03      	cmp	r3, #3
 800bd08:	d062      	beq.n	800bdd0 <get_fat+0xfa>
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	dc7c      	bgt.n	800be08 <get_fat+0x132>
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d002      	beq.n	800bd18 <get_fat+0x42>
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d042      	beq.n	800bd9c <get_fat+0xc6>
 800bd16:	e077      	b.n	800be08 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	60fb      	str	r3, [r7, #12]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	085b      	lsrs	r3, r3, #1
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	4413      	add	r3, r2
 800bd24:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	0a5b      	lsrs	r3, r3, #9
 800bd2e:	4413      	add	r3, r2
 800bd30:	4619      	mov	r1, r3
 800bd32:	6938      	ldr	r0, [r7, #16]
 800bd34:	f7ff ff14 	bl	800bb60 <move_window>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d167      	bne.n	800be0e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	60fa      	str	r2, [r7, #12]
 800bd44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd50:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	0a5b      	lsrs	r3, r3, #9
 800bd5a:	4413      	add	r3, r2
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6938      	ldr	r0, [r7, #16]
 800bd60:	f7ff fefe 	bl	800bb60 <move_window>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d153      	bne.n	800be12 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd70:	693a      	ldr	r2, [r7, #16]
 800bd72:	4413      	add	r3, r2
 800bd74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd78:	021b      	lsls	r3, r3, #8
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	f003 0301 	and.w	r3, r3, #1
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d002      	beq.n	800bd92 <get_fat+0xbc>
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	091b      	lsrs	r3, r3, #4
 800bd90:	e002      	b.n	800bd98 <get_fat+0xc2>
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd98:	617b      	str	r3, [r7, #20]
			break;
 800bd9a:	e03f      	b.n	800be1c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	0a1b      	lsrs	r3, r3, #8
 800bda4:	4413      	add	r3, r2
 800bda6:	4619      	mov	r1, r3
 800bda8:	6938      	ldr	r0, [r7, #16]
 800bdaa:	f7ff fed9 	bl	800bb60 <move_window>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d130      	bne.n	800be16 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bdc2:	4413      	add	r3, r2
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff fc1b 	bl	800b600 <ld_word>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	617b      	str	r3, [r7, #20]
			break;
 800bdce:	e025      	b.n	800be1c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	09db      	lsrs	r3, r3, #7
 800bdd8:	4413      	add	r3, r2
 800bdda:	4619      	mov	r1, r3
 800bddc:	6938      	ldr	r0, [r7, #16]
 800bdde:	f7ff febf 	bl	800bb60 <move_window>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d118      	bne.n	800be1a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bdf6:	4413      	add	r3, r2
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff fc19 	bl	800b630 <ld_dword>
 800bdfe:	4603      	mov	r3, r0
 800be00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800be04:	617b      	str	r3, [r7, #20]
			break;
 800be06:	e009      	b.n	800be1c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800be08:	2301      	movs	r3, #1
 800be0a:	617b      	str	r3, [r7, #20]
 800be0c:	e006      	b.n	800be1c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be0e:	bf00      	nop
 800be10:	e004      	b.n	800be1c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be12:	bf00      	nop
 800be14:	e002      	b.n	800be1c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be16:	bf00      	nop
 800be18:	e000      	b.n	800be1c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be1a:	bf00      	nop
		}
	}

	return val;
 800be1c:	697b      	ldr	r3, [r7, #20]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3718      	adds	r7, #24
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800be26:	b590      	push	{r4, r7, lr}
 800be28:	b089      	sub	sp, #36	; 0x24
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	60f8      	str	r0, [r7, #12]
 800be2e:	60b9      	str	r1, [r7, #8]
 800be30:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800be32:	2302      	movs	r3, #2
 800be34:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	f240 80d2 	bls.w	800bfe2 <put_fat+0x1bc>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	68ba      	ldr	r2, [r7, #8]
 800be44:	429a      	cmp	r2, r3
 800be46:	f080 80cc 	bcs.w	800bfe2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	2b03      	cmp	r3, #3
 800be50:	f000 8096 	beq.w	800bf80 <put_fat+0x15a>
 800be54:	2b03      	cmp	r3, #3
 800be56:	f300 80cd 	bgt.w	800bff4 <put_fat+0x1ce>
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d002      	beq.n	800be64 <put_fat+0x3e>
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d06e      	beq.n	800bf40 <put_fat+0x11a>
 800be62:	e0c7      	b.n	800bff4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	61bb      	str	r3, [r7, #24]
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	085b      	lsrs	r3, r3, #1
 800be6c:	69ba      	ldr	r2, [r7, #24]
 800be6e:	4413      	add	r3, r2
 800be70:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	0a5b      	lsrs	r3, r3, #9
 800be7a:	4413      	add	r3, r2
 800be7c:	4619      	mov	r1, r3
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f7ff fe6e 	bl	800bb60 <move_window>
 800be84:	4603      	mov	r3, r0
 800be86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be88:	7ffb      	ldrb	r3, [r7, #31]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f040 80ab 	bne.w	800bfe6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	1c59      	adds	r1, r3, #1
 800be9a:	61b9      	str	r1, [r7, #24]
 800be9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea0:	4413      	add	r3, r2
 800bea2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00d      	beq.n	800beca <put_fat+0xa4>
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	b25b      	sxtb	r3, r3
 800beb4:	f003 030f 	and.w	r3, r3, #15
 800beb8:	b25a      	sxtb	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	011b      	lsls	r3, r3, #4
 800bec0:	b25b      	sxtb	r3, r3
 800bec2:	4313      	orrs	r3, r2
 800bec4:	b25b      	sxtb	r3, r3
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	e001      	b.n	800bece <put_fat+0xa8>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	b2db      	uxtb	r3, r3
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2201      	movs	r2, #1
 800bed6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	0a5b      	lsrs	r3, r3, #9
 800bee0:	4413      	add	r3, r2
 800bee2:	4619      	mov	r1, r3
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f7ff fe3b 	bl	800bb60 <move_window>
 800beea:	4603      	mov	r3, r0
 800beec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800beee:	7ffb      	ldrb	r3, [r7, #31]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d17a      	bne.n	800bfea <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf00:	4413      	add	r3, r2
 800bf02:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	f003 0301 	and.w	r3, r3, #1
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d003      	beq.n	800bf16 <put_fat+0xf0>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	091b      	lsrs	r3, r3, #4
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	e00e      	b.n	800bf34 <put_fat+0x10e>
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	b25b      	sxtb	r3, r3
 800bf1c:	f023 030f 	bic.w	r3, r3, #15
 800bf20:	b25a      	sxtb	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	0a1b      	lsrs	r3, r3, #8
 800bf26:	b25b      	sxtb	r3, r3
 800bf28:	f003 030f 	and.w	r3, r3, #15
 800bf2c:	b25b      	sxtb	r3, r3
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	b25b      	sxtb	r3, r3
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	697a      	ldr	r2, [r7, #20]
 800bf36:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	70da      	strb	r2, [r3, #3]
			break;
 800bf3e:	e059      	b.n	800bff4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	0a1b      	lsrs	r3, r3, #8
 800bf48:	4413      	add	r3, r2
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f7ff fe07 	bl	800bb60 <move_window>
 800bf52:	4603      	mov	r3, r0
 800bf54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf56:	7ffb      	ldrb	r3, [r7, #31]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d148      	bne.n	800bfee <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bf6a:	4413      	add	r3, r2
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	b292      	uxth	r2, r2
 800bf70:	4611      	mov	r1, r2
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7ff fb7f 	bl	800b676 <st_word>
			fs->wflag = 1;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	70da      	strb	r2, [r3, #3]
			break;
 800bf7e:	e039      	b.n	800bff4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	09db      	lsrs	r3, r3, #7
 800bf88:	4413      	add	r3, r2
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f7ff fde7 	bl	800bb60 <move_window>
 800bf92:	4603      	mov	r3, r0
 800bf94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf96:	7ffb      	ldrb	r3, [r7, #31]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d12a      	bne.n	800bff2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bfb0:	4413      	add	r3, r2
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fb3c 	bl	800b630 <ld_dword>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bfbe:	4323      	orrs	r3, r4
 800bfc0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bfd0:	4413      	add	r3, r2
 800bfd2:	6879      	ldr	r1, [r7, #4]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7ff fb69 	bl	800b6ac <st_dword>
			fs->wflag = 1;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	70da      	strb	r2, [r3, #3]
			break;
 800bfe0:	e008      	b.n	800bff4 <put_fat+0x1ce>
		}
	}
 800bfe2:	bf00      	nop
 800bfe4:	e006      	b.n	800bff4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bfe6:	bf00      	nop
 800bfe8:	e004      	b.n	800bff4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bfea:	bf00      	nop
 800bfec:	e002      	b.n	800bff4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bfee:	bf00      	nop
 800bff0:	e000      	b.n	800bff4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bff2:	bf00      	nop
	return res;
 800bff4:	7ffb      	ldrb	r3, [r7, #31]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3724      	adds	r7, #36	; 0x24
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd90      	pop	{r4, r7, pc}

0800bffe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b088      	sub	sp, #32
 800c002:	af00      	add	r7, sp, #0
 800c004:	60f8      	str	r0, [r7, #12]
 800c006:	60b9      	str	r1, [r7, #8]
 800c008:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c00a:	2300      	movs	r3, #0
 800c00c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	2b01      	cmp	r3, #1
 800c018:	d904      	bls.n	800c024 <remove_chain+0x26>
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	699b      	ldr	r3, [r3, #24]
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	429a      	cmp	r2, r3
 800c022:	d301      	bcc.n	800c028 <remove_chain+0x2a>
 800c024:	2302      	movs	r3, #2
 800c026:	e04b      	b.n	800c0c0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00c      	beq.n	800c048 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c02e:	f04f 32ff 	mov.w	r2, #4294967295
 800c032:	6879      	ldr	r1, [r7, #4]
 800c034:	69b8      	ldr	r0, [r7, #24]
 800c036:	f7ff fef6 	bl	800be26 <put_fat>
 800c03a:	4603      	mov	r3, r0
 800c03c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c03e:	7ffb      	ldrb	r3, [r7, #31]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d001      	beq.n	800c048 <remove_chain+0x4a>
 800c044:	7ffb      	ldrb	r3, [r7, #31]
 800c046:	e03b      	b.n	800c0c0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c048:	68b9      	ldr	r1, [r7, #8]
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f7ff fe43 	bl	800bcd6 <get_fat>
 800c050:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d031      	beq.n	800c0bc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d101      	bne.n	800c062 <remove_chain+0x64>
 800c05e:	2302      	movs	r3, #2
 800c060:	e02e      	b.n	800c0c0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c068:	d101      	bne.n	800c06e <remove_chain+0x70>
 800c06a:	2301      	movs	r3, #1
 800c06c:	e028      	b.n	800c0c0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c06e:	2200      	movs	r2, #0
 800c070:	68b9      	ldr	r1, [r7, #8]
 800c072:	69b8      	ldr	r0, [r7, #24]
 800c074:	f7ff fed7 	bl	800be26 <put_fat>
 800c078:	4603      	mov	r3, r0
 800c07a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c07c:	7ffb      	ldrb	r3, [r7, #31]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d001      	beq.n	800c086 <remove_chain+0x88>
 800c082:	7ffb      	ldrb	r3, [r7, #31]
 800c084:	e01c      	b.n	800c0c0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	695a      	ldr	r2, [r3, #20]
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	699b      	ldr	r3, [r3, #24]
 800c08e:	3b02      	subs	r3, #2
 800c090:	429a      	cmp	r2, r3
 800c092:	d20b      	bcs.n	800c0ac <remove_chain+0xae>
			fs->free_clst++;
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	1c5a      	adds	r2, r3, #1
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	791b      	ldrb	r3, [r3, #4]
 800c0a2:	f043 0301 	orr.w	r3, r3, #1
 800c0a6:	b2da      	uxtb	r2, r3
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	699b      	ldr	r3, [r3, #24]
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d3c6      	bcc.n	800c048 <remove_chain+0x4a>
 800c0ba:	e000      	b.n	800c0be <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c0bc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3720      	adds	r7, #32
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b088      	sub	sp, #32
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10d      	bne.n	800c0fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	691b      	ldr	r3, [r3, #16]
 800c0e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d004      	beq.n	800c0f4 <create_chain+0x2c>
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	69ba      	ldr	r2, [r7, #24]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d31b      	bcc.n	800c12c <create_chain+0x64>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	61bb      	str	r3, [r7, #24]
 800c0f8:	e018      	b.n	800c12c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7ff fdea 	bl	800bcd6 <get_fat>
 800c102:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2b01      	cmp	r3, #1
 800c108:	d801      	bhi.n	800c10e <create_chain+0x46>
 800c10a:	2301      	movs	r3, #1
 800c10c:	e070      	b.n	800c1f0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c114:	d101      	bne.n	800c11a <create_chain+0x52>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	e06a      	b.n	800c1f0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	429a      	cmp	r2, r3
 800c122:	d201      	bcs.n	800c128 <create_chain+0x60>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	e063      	b.n	800c1f0 <create_chain+0x128>
		scl = clst;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	3301      	adds	r3, #1
 800c134:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	69fa      	ldr	r2, [r7, #28]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d307      	bcc.n	800c150 <create_chain+0x88>
				ncl = 2;
 800c140:	2302      	movs	r3, #2
 800c142:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c144:	69fa      	ldr	r2, [r7, #28]
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d901      	bls.n	800c150 <create_chain+0x88>
 800c14c:	2300      	movs	r3, #0
 800c14e:	e04f      	b.n	800c1f0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c150:	69f9      	ldr	r1, [r7, #28]
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7ff fdbf 	bl	800bcd6 <get_fat>
 800c158:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00e      	beq.n	800c17e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d003      	beq.n	800c16e <create_chain+0xa6>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c16c:	d101      	bne.n	800c172 <create_chain+0xaa>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	e03e      	b.n	800c1f0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c172:	69fa      	ldr	r2, [r7, #28]
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	429a      	cmp	r2, r3
 800c178:	d1da      	bne.n	800c130 <create_chain+0x68>
 800c17a:	2300      	movs	r3, #0
 800c17c:	e038      	b.n	800c1f0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c17e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c180:	f04f 32ff 	mov.w	r2, #4294967295
 800c184:	69f9      	ldr	r1, [r7, #28]
 800c186:	6938      	ldr	r0, [r7, #16]
 800c188:	f7ff fe4d 	bl	800be26 <put_fat>
 800c18c:	4603      	mov	r3, r0
 800c18e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d109      	bne.n	800c1aa <create_chain+0xe2>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d006      	beq.n	800c1aa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c19c:	69fa      	ldr	r2, [r7, #28]
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6938      	ldr	r0, [r7, #16]
 800c1a2:	f7ff fe40 	bl	800be26 <put_fat>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c1aa:	7dfb      	ldrb	r3, [r7, #23]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d116      	bne.n	800c1de <create_chain+0x116>
		fs->last_clst = ncl;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	69fa      	ldr	r2, [r7, #28]
 800c1b4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	695a      	ldr	r2, [r3, #20]
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	3b02      	subs	r3, #2
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d804      	bhi.n	800c1ce <create_chain+0x106>
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	695b      	ldr	r3, [r3, #20]
 800c1c8:	1e5a      	subs	r2, r3, #1
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	791b      	ldrb	r3, [r3, #4]
 800c1d2:	f043 0301 	orr.w	r3, r3, #1
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	711a      	strb	r2, [r3, #4]
 800c1dc:	e007      	b.n	800c1ee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d102      	bne.n	800c1ea <create_chain+0x122>
 800c1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e8:	e000      	b.n	800c1ec <create_chain+0x124>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c1ee:	69fb      	ldr	r3, [r7, #28]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3720      	adds	r7, #32
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20c:	3304      	adds	r3, #4
 800c20e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	0a5b      	lsrs	r3, r3, #9
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	8952      	ldrh	r2, [r2, #10]
 800c218:	fbb3 f3f2 	udiv	r3, r3, r2
 800c21c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	1d1a      	adds	r2, r3, #4
 800c222:	613a      	str	r2, [r7, #16]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d101      	bne.n	800c232 <clmt_clust+0x3a>
 800c22e:	2300      	movs	r3, #0
 800c230:	e010      	b.n	800c254 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c232:	697a      	ldr	r2, [r7, #20]
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	429a      	cmp	r2, r3
 800c238:	d307      	bcc.n	800c24a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	617b      	str	r3, [r7, #20]
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	3304      	adds	r3, #4
 800c246:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c248:	e7e9      	b.n	800c21e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c24a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	4413      	add	r3, r2
}
 800c254:	4618      	mov	r0, r3
 800c256:	371c      	adds	r7, #28
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c276:	d204      	bcs.n	800c282 <dir_sdi+0x22>
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	f003 031f 	and.w	r3, r3, #31
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c282:	2302      	movs	r3, #2
 800c284:	e063      	b.n	800c34e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d106      	bne.n	800c2a6 <dir_sdi+0x46>
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d902      	bls.n	800c2a6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10c      	bne.n	800c2c6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	095b      	lsrs	r3, r3, #5
 800c2b0:	693a      	ldr	r2, [r7, #16]
 800c2b2:	8912      	ldrh	r2, [r2, #8]
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d301      	bcc.n	800c2bc <dir_sdi+0x5c>
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	e048      	b.n	800c34e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	61da      	str	r2, [r3, #28]
 800c2c4:	e029      	b.n	800c31a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	895b      	ldrh	r3, [r3, #10]
 800c2ca:	025b      	lsls	r3, r3, #9
 800c2cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2ce:	e019      	b.n	800c304 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6979      	ldr	r1, [r7, #20]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff fcfe 	bl	800bcd6 <get_fat>
 800c2da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e2:	d101      	bne.n	800c2e8 <dir_sdi+0x88>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e032      	b.n	800c34e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d904      	bls.n	800c2f8 <dir_sdi+0x98>
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	697a      	ldr	r2, [r7, #20]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d301      	bcc.n	800c2fc <dir_sdi+0x9c>
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	e028      	b.n	800c34e <dir_sdi+0xee>
			ofs -= csz;
 800c2fc:	683a      	ldr	r2, [r7, #0]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c304:	683a      	ldr	r2, [r7, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d2e1      	bcs.n	800c2d0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c30c:	6979      	ldr	r1, [r7, #20]
 800c30e:	6938      	ldr	r0, [r7, #16]
 800c310:	f7ff fcc2 	bl	800bc98 <clust2sect>
 800c314:	4602      	mov	r2, r0
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	69db      	ldr	r3, [r3, #28]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <dir_sdi+0xcc>
 800c328:	2302      	movs	r3, #2
 800c32a:	e010      	b.n	800c34e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	69da      	ldr	r2, [r3, #28]
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	0a5b      	lsrs	r3, r3, #9
 800c334:	441a      	add	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c346:	441a      	add	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b086      	sub	sp, #24
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	3320      	adds	r3, #32
 800c36c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	69db      	ldr	r3, [r3, #28]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d003      	beq.n	800c37e <dir_next+0x28>
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c37c:	d301      	bcc.n	800c382 <dir_next+0x2c>
 800c37e:	2304      	movs	r3, #4
 800c380:	e0aa      	b.n	800c4d8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f040 8098 	bne.w	800c4be <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	69db      	ldr	r3, [r3, #28]
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	699b      	ldr	r3, [r3, #24]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10b      	bne.n	800c3b8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	095b      	lsrs	r3, r3, #5
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	8912      	ldrh	r2, [r2, #8]
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	f0c0 8088 	bcc.w	800c4be <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	61da      	str	r2, [r3, #28]
 800c3b4:	2304      	movs	r3, #4
 800c3b6:	e08f      	b.n	800c4d8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	0a5b      	lsrs	r3, r3, #9
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	8952      	ldrh	r2, [r2, #10]
 800c3c0:	3a01      	subs	r2, #1
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d17a      	bne.n	800c4be <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	699b      	ldr	r3, [r3, #24]
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	f7ff fc80 	bl	800bcd6 <get_fat>
 800c3d6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d801      	bhi.n	800c3e2 <dir_next+0x8c>
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e07a      	b.n	800c4d8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3e8:	d101      	bne.n	800c3ee <dir_next+0x98>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e074      	b.n	800c4d8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	699b      	ldr	r3, [r3, #24]
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d358      	bcc.n	800c4aa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d104      	bne.n	800c408 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	61da      	str	r2, [r3, #28]
 800c404:	2304      	movs	r3, #4
 800c406:	e067      	b.n	800c4d8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	699b      	ldr	r3, [r3, #24]
 800c40e:	4619      	mov	r1, r3
 800c410:	4610      	mov	r0, r2
 800c412:	f7ff fe59 	bl	800c0c8 <create_chain>
 800c416:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <dir_next+0xcc>
 800c41e:	2307      	movs	r3, #7
 800c420:	e05a      	b.n	800c4d8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	2b01      	cmp	r3, #1
 800c426:	d101      	bne.n	800c42c <dir_next+0xd6>
 800c428:	2302      	movs	r3, #2
 800c42a:	e055      	b.n	800c4d8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c432:	d101      	bne.n	800c438 <dir_next+0xe2>
 800c434:	2301      	movs	r3, #1
 800c436:	e04f      	b.n	800c4d8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f7ff fb4d 	bl	800bad8 <sync_window>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d001      	beq.n	800c448 <dir_next+0xf2>
 800c444:	2301      	movs	r3, #1
 800c446:	e047      	b.n	800c4d8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	3334      	adds	r3, #52	; 0x34
 800c44c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c450:	2100      	movs	r1, #0
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff f977 	bl	800b746 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c458:	2300      	movs	r3, #0
 800c45a:	613b      	str	r3, [r7, #16]
 800c45c:	6979      	ldr	r1, [r7, #20]
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f7ff fc1a 	bl	800bc98 <clust2sect>
 800c464:	4602      	mov	r2, r0
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	631a      	str	r2, [r3, #48]	; 0x30
 800c46a:	e012      	b.n	800c492 <dir_next+0x13c>
						fs->wflag = 1;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2201      	movs	r2, #1
 800c470:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f7ff fb30 	bl	800bad8 <sync_window>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <dir_next+0x12c>
 800c47e:	2301      	movs	r3, #1
 800c480:	e02a      	b.n	800c4d8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	3301      	adds	r3, #1
 800c486:	613b      	str	r3, [r7, #16]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	631a      	str	r2, [r3, #48]	; 0x30
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	895b      	ldrh	r3, [r3, #10]
 800c496:	461a      	mov	r2, r3
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d3e6      	bcc.n	800c46c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	1ad2      	subs	r2, r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	697a      	ldr	r2, [r7, #20]
 800c4ae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c4b0:	6979      	ldr	r1, [r7, #20]
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f7ff fbf0 	bl	800bc98 <clust2sect>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4d0:	441a      	add	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3718      	adds	r7, #24
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff feb4 	bl	800c260 <dir_sdi>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4fc:	7dfb      	ldrb	r3, [r7, #23]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d12b      	bne.n	800c55a <dir_alloc+0x7a>
		n = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	69db      	ldr	r3, [r3, #28]
 800c50a:	4619      	mov	r1, r3
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f7ff fb27 	bl	800bb60 <move_window>
 800c512:	4603      	mov	r3, r0
 800c514:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c516:	7dfb      	ldrb	r3, [r7, #23]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d11d      	bne.n	800c558 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a1b      	ldr	r3, [r3, #32]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	2be5      	cmp	r3, #229	; 0xe5
 800c524:	d004      	beq.n	800c530 <dir_alloc+0x50>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a1b      	ldr	r3, [r3, #32]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d107      	bne.n	800c540 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	3301      	adds	r3, #1
 800c534:	613b      	str	r3, [r7, #16]
 800c536:	693a      	ldr	r2, [r7, #16]
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d102      	bne.n	800c544 <dir_alloc+0x64>
 800c53e:	e00c      	b.n	800c55a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c540:	2300      	movs	r3, #0
 800c542:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c544:	2101      	movs	r1, #1
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff ff05 	bl	800c356 <dir_next>
 800c54c:	4603      	mov	r3, r0
 800c54e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c550:	7dfb      	ldrb	r3, [r7, #23]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d0d7      	beq.n	800c506 <dir_alloc+0x26>
 800c556:	e000      	b.n	800c55a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c558:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c55a:	7dfb      	ldrb	r3, [r7, #23]
 800c55c:	2b04      	cmp	r3, #4
 800c55e:	d101      	bne.n	800c564 <dir_alloc+0x84>
 800c560:	2307      	movs	r3, #7
 800c562:	75fb      	strb	r3, [r7, #23]
	return res;
 800c564:	7dfb      	ldrb	r3, [r7, #23]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	331a      	adds	r3, #26
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7ff f83f 	bl	800b600 <ld_word>
 800c582:	4603      	mov	r3, r0
 800c584:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	2b03      	cmp	r3, #3
 800c58c:	d109      	bne.n	800c5a2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	3314      	adds	r3, #20
 800c592:	4618      	mov	r0, r3
 800c594:	f7ff f834 	bl	800b600 <ld_word>
 800c598:	4603      	mov	r3, r0
 800c59a:	041b      	lsls	r3, r3, #16
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	331a      	adds	r3, #26
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	b292      	uxth	r2, r2
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7ff f857 	bl	800b676 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	d109      	bne.n	800c5e4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	f103 0214 	add.w	r2, r3, #20
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	0c1b      	lsrs	r3, r3, #16
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	4619      	mov	r1, r3
 800c5de:	4610      	mov	r0, r2
 800c5e0:	f7ff f849 	bl	800b676 <st_word>
	}
}
 800c5e4:	bf00      	nop
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c5ec:	b590      	push	{r4, r7, lr}
 800c5ee:	b087      	sub	sp, #28
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	331a      	adds	r3, #26
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7ff f800 	bl	800b600 <ld_word>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <cmp_lfn+0x1e>
 800c606:	2300      	movs	r3, #0
 800c608:	e059      	b.n	800c6be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c612:	1e5a      	subs	r2, r3, #1
 800c614:	4613      	mov	r3, r2
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	4413      	add	r3, r2
 800c61e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c620:	2301      	movs	r3, #1
 800c622:	81fb      	strh	r3, [r7, #14]
 800c624:	2300      	movs	r3, #0
 800c626:	613b      	str	r3, [r7, #16]
 800c628:	e033      	b.n	800c692 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c62a:	4a27      	ldr	r2, [pc, #156]	; (800c6c8 <cmp_lfn+0xdc>)
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	4413      	add	r3, r2
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	461a      	mov	r2, r3
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	4413      	add	r3, r2
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fe ffe1 	bl	800b600 <ld_word>
 800c63e:	4603      	mov	r3, r0
 800c640:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c642:	89fb      	ldrh	r3, [r7, #14]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d01a      	beq.n	800c67e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	2bfe      	cmp	r3, #254	; 0xfe
 800c64c:	d812      	bhi.n	800c674 <cmp_lfn+0x88>
 800c64e:	89bb      	ldrh	r3, [r7, #12]
 800c650:	4618      	mov	r0, r3
 800c652:	f002 f85d 	bl	800e710 <ff_wtoupper>
 800c656:	4603      	mov	r3, r0
 800c658:	461c      	mov	r4, r3
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	1c5a      	adds	r2, r3, #1
 800c65e:	617a      	str	r2, [r7, #20]
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	4413      	add	r3, r2
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	4618      	mov	r0, r3
 800c66a:	f002 f851 	bl	800e710 <ff_wtoupper>
 800c66e:	4603      	mov	r3, r0
 800c670:	429c      	cmp	r4, r3
 800c672:	d001      	beq.n	800c678 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c674:	2300      	movs	r3, #0
 800c676:	e022      	b.n	800c6be <cmp_lfn+0xd2>
			}
			wc = uc;
 800c678:	89bb      	ldrh	r3, [r7, #12]
 800c67a:	81fb      	strh	r3, [r7, #14]
 800c67c:	e006      	b.n	800c68c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c67e:	89bb      	ldrh	r3, [r7, #12]
 800c680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c684:	4293      	cmp	r3, r2
 800c686:	d001      	beq.n	800c68c <cmp_lfn+0xa0>
 800c688:	2300      	movs	r3, #0
 800c68a:	e018      	b.n	800c6be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	3301      	adds	r3, #1
 800c690:	613b      	str	r3, [r7, #16]
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	2b0c      	cmp	r3, #12
 800c696:	d9c8      	bls.n	800c62a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00b      	beq.n	800c6bc <cmp_lfn+0xd0>
 800c6a4:	89fb      	ldrh	r3, [r7, #14]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d008      	beq.n	800c6bc <cmp_lfn+0xd0>
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d001      	beq.n	800c6bc <cmp_lfn+0xd0>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	e000      	b.n	800c6be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c6bc:	2301      	movs	r3, #1
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	371c      	adds	r7, #28
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd90      	pop	{r4, r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	08014a84 	.word	0x08014a84

0800c6cc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	331a      	adds	r3, #26
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fe ff90 	bl	800b600 <ld_word>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d001      	beq.n	800c6ea <pick_lfn+0x1e>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	e04d      	b.n	800c786 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6f2:	1e5a      	subs	r2, r3, #1
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	4413      	add	r3, r2
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	4413      	add	r3, r2
 800c6fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c700:	2301      	movs	r3, #1
 800c702:	81fb      	strh	r3, [r7, #14]
 800c704:	2300      	movs	r3, #0
 800c706:	613b      	str	r3, [r7, #16]
 800c708:	e028      	b.n	800c75c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c70a:	4a21      	ldr	r2, [pc, #132]	; (800c790 <pick_lfn+0xc4>)
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	4413      	add	r3, r2
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	461a      	mov	r2, r3
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	4413      	add	r3, r2
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fe ff71 	bl	800b600 <ld_word>
 800c71e:	4603      	mov	r3, r0
 800c720:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c722:	89fb      	ldrh	r3, [r7, #14]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00f      	beq.n	800c748 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2bfe      	cmp	r3, #254	; 0xfe
 800c72c:	d901      	bls.n	800c732 <pick_lfn+0x66>
 800c72e:	2300      	movs	r3, #0
 800c730:	e029      	b.n	800c786 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c732:	89bb      	ldrh	r3, [r7, #12]
 800c734:	81fb      	strh	r3, [r7, #14]
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	1c5a      	adds	r2, r3, #1
 800c73a:	617a      	str	r2, [r7, #20]
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	4413      	add	r3, r2
 800c742:	89fa      	ldrh	r2, [r7, #14]
 800c744:	801a      	strh	r2, [r3, #0]
 800c746:	e006      	b.n	800c756 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c748:	89bb      	ldrh	r3, [r7, #12]
 800c74a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c74e:	4293      	cmp	r3, r2
 800c750:	d001      	beq.n	800c756 <pick_lfn+0x8a>
 800c752:	2300      	movs	r3, #0
 800c754:	e017      	b.n	800c786 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	3301      	adds	r3, #1
 800c75a:	613b      	str	r3, [r7, #16]
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	2b0c      	cmp	r3, #12
 800c760:	d9d3      	bls.n	800c70a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00a      	beq.n	800c784 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2bfe      	cmp	r3, #254	; 0xfe
 800c772:	d901      	bls.n	800c778 <pick_lfn+0xac>
 800c774:	2300      	movs	r3, #0
 800c776:	e006      	b.n	800c786 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	4413      	add	r3, r2
 800c780:	2200      	movs	r2, #0
 800c782:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c784:	2301      	movs	r3, #1
}
 800c786:	4618      	mov	r0, r3
 800c788:	3718      	adds	r7, #24
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	08014a84 	.word	0x08014a84

0800c794 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b088      	sub	sp, #32
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	4611      	mov	r1, r2
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	71fb      	strb	r3, [r7, #7]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	330d      	adds	r3, #13
 800c7ae:	79ba      	ldrb	r2, [r7, #6]
 800c7b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	330b      	adds	r3, #11
 800c7b6:	220f      	movs	r2, #15
 800c7b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	330c      	adds	r3, #12
 800c7be:	2200      	movs	r2, #0
 800c7c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	331a      	adds	r3, #26
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7fe ff54 	bl	800b676 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c7ce:	79fb      	ldrb	r3, [r7, #7]
 800c7d0:	1e5a      	subs	r2, r3, #1
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	005b      	lsls	r3, r3, #1
 800c7d6:	4413      	add	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	4413      	add	r3, r2
 800c7dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	82fb      	strh	r3, [r7, #22]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c7e6:	8afb      	ldrh	r3, [r7, #22]
 800c7e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d007      	beq.n	800c800 <put_lfn+0x6c>
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	61fa      	str	r2, [r7, #28]
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	881b      	ldrh	r3, [r3, #0]
 800c7fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c800:	4a17      	ldr	r2, [pc, #92]	; (800c860 <put_lfn+0xcc>)
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	4413      	add	r3, r2
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	461a      	mov	r2, r3
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	4413      	add	r3, r2
 800c80e:	8afa      	ldrh	r2, [r7, #22]
 800c810:	4611      	mov	r1, r2
 800c812:	4618      	mov	r0, r3
 800c814:	f7fe ff2f 	bl	800b676 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c818:	8afb      	ldrh	r3, [r7, #22]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d102      	bne.n	800c824 <put_lfn+0x90>
 800c81e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c822:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	3301      	adds	r3, #1
 800c828:	61bb      	str	r3, [r7, #24]
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	2b0c      	cmp	r3, #12
 800c82e:	d9da      	bls.n	800c7e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c830:	8afb      	ldrh	r3, [r7, #22]
 800c832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c836:	4293      	cmp	r3, r2
 800c838:	d006      	beq.n	800c848 <put_lfn+0xb4>
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	4413      	add	r3, r2
 800c842:	881b      	ldrh	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d103      	bne.n	800c850 <put_lfn+0xbc>
 800c848:	79fb      	ldrb	r3, [r7, #7]
 800c84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c84e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	79fa      	ldrb	r2, [r7, #7]
 800c854:	701a      	strb	r2, [r3, #0]
}
 800c856:	bf00      	nop
 800c858:	3720      	adds	r7, #32
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	08014a84 	.word	0x08014a84

0800c864 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b08c      	sub	sp, #48	; 0x30
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
 800c870:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c872:	220b      	movs	r2, #11
 800c874:	68b9      	ldr	r1, [r7, #8]
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	f7fe ff44 	bl	800b704 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	2b05      	cmp	r3, #5
 800c880:	d92b      	bls.n	800c8da <gen_numname+0x76>
		sr = seq;
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c886:	e022      	b.n	800c8ce <gen_numname+0x6a>
			wc = *lfn++;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	1c9a      	adds	r2, r3, #2
 800c88c:	607a      	str	r2, [r7, #4]
 800c88e:	881b      	ldrh	r3, [r3, #0]
 800c890:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c892:	2300      	movs	r3, #0
 800c894:	62bb      	str	r3, [r7, #40]	; 0x28
 800c896:	e017      	b.n	800c8c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	005a      	lsls	r2, r3, #1
 800c89c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c89e:	f003 0301 	and.w	r3, r3, #1
 800c8a2:	4413      	add	r3, r2
 800c8a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c8a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8a8:	085b      	lsrs	r3, r3, #1
 800c8aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d005      	beq.n	800c8c2 <gen_numname+0x5e>
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c8bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c8c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ca:	2b0f      	cmp	r3, #15
 800c8cc:	d9e4      	bls.n	800c898 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	881b      	ldrh	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1d8      	bne.n	800c888 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c8da:	2307      	movs	r3, #7
 800c8dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	f003 030f 	and.w	r3, r3, #15
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	3330      	adds	r3, #48	; 0x30
 800c8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c8ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8f2:	2b39      	cmp	r3, #57	; 0x39
 800c8f4:	d904      	bls.n	800c900 <gen_numname+0x9c>
 800c8f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8fa:	3307      	adds	r3, #7
 800c8fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c902:	1e5a      	subs	r2, r3, #1
 800c904:	62ba      	str	r2, [r7, #40]	; 0x28
 800c906:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c90a:	4413      	add	r3, r2
 800c90c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c910:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	091b      	lsrs	r3, r3, #4
 800c918:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1de      	bne.n	800c8de <gen_numname+0x7a>
	ns[i] = '~';
 800c920:	f107 0214 	add.w	r2, r7, #20
 800c924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c926:	4413      	add	r3, r2
 800c928:	227e      	movs	r2, #126	; 0x7e
 800c92a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c92c:	2300      	movs	r3, #0
 800c92e:	627b      	str	r3, [r7, #36]	; 0x24
 800c930:	e002      	b.n	800c938 <gen_numname+0xd4>
 800c932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c934:	3301      	adds	r3, #1
 800c936:	627b      	str	r3, [r7, #36]	; 0x24
 800c938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d205      	bcs.n	800c94c <gen_numname+0xe8>
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	4413      	add	r3, r2
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	2b20      	cmp	r3, #32
 800c94a:	d1f2      	bne.n	800c932 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94e:	2b07      	cmp	r3, #7
 800c950:	d808      	bhi.n	800c964 <gen_numname+0x100>
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	62ba      	str	r2, [r7, #40]	; 0x28
 800c958:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c95c:	4413      	add	r3, r2
 800c95e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c962:	e000      	b.n	800c966 <gen_numname+0x102>
 800c964:	2120      	movs	r1, #32
 800c966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c968:	1c5a      	adds	r2, r3, #1
 800c96a:	627a      	str	r2, [r7, #36]	; 0x24
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	4413      	add	r3, r2
 800c970:	460a      	mov	r2, r1
 800c972:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	2b07      	cmp	r3, #7
 800c978:	d9e8      	bls.n	800c94c <gen_numname+0xe8>
}
 800c97a:	bf00      	nop
 800c97c:	bf00      	nop
 800c97e:	3730      	adds	r7, #48	; 0x30
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c990:	230b      	movs	r3, #11
 800c992:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c994:	7bfb      	ldrb	r3, [r7, #15]
 800c996:	b2da      	uxtb	r2, r3
 800c998:	0852      	lsrs	r2, r2, #1
 800c99a:	01db      	lsls	r3, r3, #7
 800c99c:	4313      	orrs	r3, r2
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	1c59      	adds	r1, r3, #1
 800c9a4:	6079      	str	r1, [r7, #4]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	60bb      	str	r3, [r7, #8]
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1ed      	bne.n	800c994 <sum_sfn+0x10>
	return sum;
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3714      	adds	r7, #20
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr

0800c9c6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b086      	sub	sp, #24
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
 800c9ce:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c9d0:	2304      	movs	r3, #4
 800c9d2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c9da:	23ff      	movs	r3, #255	; 0xff
 800c9dc:	757b      	strb	r3, [r7, #21]
 800c9de:	23ff      	movs	r3, #255	; 0xff
 800c9e0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c9e2:	e081      	b.n	800cae8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	69db      	ldr	r3, [r3, #28]
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	6938      	ldr	r0, [r7, #16]
 800c9ec:	f7ff f8b8 	bl	800bb60 <move_window>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d17c      	bne.n	800caf4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ca02:	7dbb      	ldrb	r3, [r7, #22]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d102      	bne.n	800ca0e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ca08:	2304      	movs	r3, #4
 800ca0a:	75fb      	strb	r3, [r7, #23]
 800ca0c:	e077      	b.n	800cafe <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a1b      	ldr	r3, [r3, #32]
 800ca12:	330b      	adds	r3, #11
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca1a:	73fb      	strb	r3, [r7, #15]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	7bfa      	ldrb	r2, [r7, #15]
 800ca20:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ca22:	7dbb      	ldrb	r3, [r7, #22]
 800ca24:	2be5      	cmp	r3, #229	; 0xe5
 800ca26:	d00e      	beq.n	800ca46 <dir_read+0x80>
 800ca28:	7dbb      	ldrb	r3, [r7, #22]
 800ca2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca2c:	d00b      	beq.n	800ca46 <dir_read+0x80>
 800ca2e:	7bfb      	ldrb	r3, [r7, #15]
 800ca30:	f023 0320 	bic.w	r3, r3, #32
 800ca34:	2b08      	cmp	r3, #8
 800ca36:	bf0c      	ite	eq
 800ca38:	2301      	moveq	r3, #1
 800ca3a:	2300      	movne	r3, #0
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	461a      	mov	r2, r3
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d002      	beq.n	800ca4c <dir_read+0x86>
				ord = 0xFF;
 800ca46:	23ff      	movs	r3, #255	; 0xff
 800ca48:	757b      	strb	r3, [r7, #21]
 800ca4a:	e044      	b.n	800cad6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
 800ca4e:	2b0f      	cmp	r3, #15
 800ca50:	d12f      	bne.n	800cab2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ca52:	7dbb      	ldrb	r3, [r7, #22]
 800ca54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00d      	beq.n	800ca78 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6a1b      	ldr	r3, [r3, #32]
 800ca60:	7b5b      	ldrb	r3, [r3, #13]
 800ca62:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ca64:	7dbb      	ldrb	r3, [r7, #22]
 800ca66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca6a:	75bb      	strb	r3, [r7, #22]
 800ca6c:	7dbb      	ldrb	r3, [r7, #22]
 800ca6e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	695a      	ldr	r2, [r3, #20]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ca78:	7dba      	ldrb	r2, [r7, #22]
 800ca7a:	7d7b      	ldrb	r3, [r7, #21]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d115      	bne.n	800caac <dir_read+0xe6>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a1b      	ldr	r3, [r3, #32]
 800ca84:	330d      	adds	r3, #13
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	7d3a      	ldrb	r2, [r7, #20]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d10e      	bne.n	800caac <dir_read+0xe6>
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	68da      	ldr	r2, [r3, #12]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a1b      	ldr	r3, [r3, #32]
 800ca96:	4619      	mov	r1, r3
 800ca98:	4610      	mov	r0, r2
 800ca9a:	f7ff fe17 	bl	800c6cc <pick_lfn>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d003      	beq.n	800caac <dir_read+0xe6>
 800caa4:	7d7b      	ldrb	r3, [r7, #21]
 800caa6:	3b01      	subs	r3, #1
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	e000      	b.n	800caae <dir_read+0xe8>
 800caac:	23ff      	movs	r3, #255	; 0xff
 800caae:	757b      	strb	r3, [r7, #21]
 800cab0:	e011      	b.n	800cad6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cab2:	7d7b      	ldrb	r3, [r7, #21]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d109      	bne.n	800cacc <dir_read+0x106>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a1b      	ldr	r3, [r3, #32]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7ff ff61 	bl	800c984 <sum_sfn>
 800cac2:	4603      	mov	r3, r0
 800cac4:	461a      	mov	r2, r3
 800cac6:	7d3b      	ldrb	r3, [r7, #20]
 800cac8:	4293      	cmp	r3, r2
 800caca:	d015      	beq.n	800caf8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f04f 32ff 	mov.w	r2, #4294967295
 800cad2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800cad4:	e010      	b.n	800caf8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cad6:	2100      	movs	r1, #0
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7ff fc3c 	bl	800c356 <dir_next>
 800cade:	4603      	mov	r3, r0
 800cae0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cae2:	7dfb      	ldrb	r3, [r7, #23]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d109      	bne.n	800cafc <dir_read+0x136>
	while (dp->sect) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	69db      	ldr	r3, [r3, #28]
 800caec:	2b00      	cmp	r3, #0
 800caee:	f47f af79 	bne.w	800c9e4 <dir_read+0x1e>
 800caf2:	e004      	b.n	800cafe <dir_read+0x138>
		if (res != FR_OK) break;
 800caf4:	bf00      	nop
 800caf6:	e002      	b.n	800cafe <dir_read+0x138>
					break;
 800caf8:	bf00      	nop
 800cafa:	e000      	b.n	800cafe <dir_read+0x138>
		if (res != FR_OK) break;
 800cafc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d002      	beq.n	800cb0a <dir_read+0x144>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	61da      	str	r2, [r3, #28]
	return res;
 800cb0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3718      	adds	r7, #24
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cb22:	2100      	movs	r1, #0
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f7ff fb9b 	bl	800c260 <dir_sdi>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cb2e:	7dfb      	ldrb	r3, [r7, #23]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d001      	beq.n	800cb38 <dir_find+0x24>
 800cb34:	7dfb      	ldrb	r3, [r7, #23]
 800cb36:	e0a9      	b.n	800cc8c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb38:	23ff      	movs	r3, #255	; 0xff
 800cb3a:	753b      	strb	r3, [r7, #20]
 800cb3c:	7d3b      	ldrb	r3, [r7, #20]
 800cb3e:	757b      	strb	r3, [r7, #21]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f04f 32ff 	mov.w	r2, #4294967295
 800cb46:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	69db      	ldr	r3, [r3, #28]
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6938      	ldr	r0, [r7, #16]
 800cb50:	f7ff f806 	bl	800bb60 <move_window>
 800cb54:	4603      	mov	r3, r0
 800cb56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f040 8090 	bne.w	800cc80 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a1b      	ldr	r3, [r3, #32]
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb68:	7dbb      	ldrb	r3, [r7, #22]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d102      	bne.n	800cb74 <dir_find+0x60>
 800cb6e:	2304      	movs	r3, #4
 800cb70:	75fb      	strb	r3, [r7, #23]
 800cb72:	e08a      	b.n	800cc8a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a1b      	ldr	r3, [r3, #32]
 800cb78:	330b      	adds	r3, #11
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb80:	73fb      	strb	r3, [r7, #15]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	7bfa      	ldrb	r2, [r7, #15]
 800cb86:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cb88:	7dbb      	ldrb	r3, [r7, #22]
 800cb8a:	2be5      	cmp	r3, #229	; 0xe5
 800cb8c:	d007      	beq.n	800cb9e <dir_find+0x8a>
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
 800cb90:	f003 0308 	and.w	r3, r3, #8
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d009      	beq.n	800cbac <dir_find+0x98>
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	2b0f      	cmp	r3, #15
 800cb9c:	d006      	beq.n	800cbac <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb9e:	23ff      	movs	r3, #255	; 0xff
 800cba0:	757b      	strb	r3, [r7, #21]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f04f 32ff 	mov.w	r2, #4294967295
 800cba8:	631a      	str	r2, [r3, #48]	; 0x30
 800cbaa:	e05e      	b.n	800cc6a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	2b0f      	cmp	r3, #15
 800cbb0:	d136      	bne.n	800cc20 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d154      	bne.n	800cc6a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cbc0:	7dbb      	ldrb	r3, [r7, #22]
 800cbc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00d      	beq.n	800cbe6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	7b5b      	ldrb	r3, [r3, #13]
 800cbd0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cbd2:	7dbb      	ldrb	r3, [r7, #22]
 800cbd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbd8:	75bb      	strb	r3, [r7, #22]
 800cbda:	7dbb      	ldrb	r3, [r7, #22]
 800cbdc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	695a      	ldr	r2, [r3, #20]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cbe6:	7dba      	ldrb	r2, [r7, #22]
 800cbe8:	7d7b      	ldrb	r3, [r7, #21]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d115      	bne.n	800cc1a <dir_find+0x106>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6a1b      	ldr	r3, [r3, #32]
 800cbf2:	330d      	adds	r3, #13
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	7d3a      	ldrb	r2, [r7, #20]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d10e      	bne.n	800cc1a <dir_find+0x106>
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	68da      	ldr	r2, [r3, #12]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a1b      	ldr	r3, [r3, #32]
 800cc04:	4619      	mov	r1, r3
 800cc06:	4610      	mov	r0, r2
 800cc08:	f7ff fcf0 	bl	800c5ec <cmp_lfn>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d003      	beq.n	800cc1a <dir_find+0x106>
 800cc12:	7d7b      	ldrb	r3, [r7, #21]
 800cc14:	3b01      	subs	r3, #1
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	e000      	b.n	800cc1c <dir_find+0x108>
 800cc1a:	23ff      	movs	r3, #255	; 0xff
 800cc1c:	757b      	strb	r3, [r7, #21]
 800cc1e:	e024      	b.n	800cc6a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc20:	7d7b      	ldrb	r3, [r7, #21]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d109      	bne.n	800cc3a <dir_find+0x126>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7ff feaa 	bl	800c984 <sum_sfn>
 800cc30:	4603      	mov	r3, r0
 800cc32:	461a      	mov	r2, r3
 800cc34:	7d3b      	ldrb	r3, [r7, #20]
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d024      	beq.n	800cc84 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc40:	f003 0301 	and.w	r3, r3, #1
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d10a      	bne.n	800cc5e <dir_find+0x14a>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6a18      	ldr	r0, [r3, #32]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	3324      	adds	r3, #36	; 0x24
 800cc50:	220b      	movs	r2, #11
 800cc52:	4619      	mov	r1, r3
 800cc54:	f7fe fd92 	bl	800b77c <mem_cmp>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d014      	beq.n	800cc88 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc5e:	23ff      	movs	r3, #255	; 0xff
 800cc60:	757b      	strb	r3, [r7, #21]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f04f 32ff 	mov.w	r2, #4294967295
 800cc68:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff fb72 	bl	800c356 <dir_next>
 800cc72:	4603      	mov	r3, r0
 800cc74:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cc76:	7dfb      	ldrb	r3, [r7, #23]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f43f af65 	beq.w	800cb48 <dir_find+0x34>
 800cc7e:	e004      	b.n	800cc8a <dir_find+0x176>
		if (res != FR_OK) break;
 800cc80:	bf00      	nop
 800cc82:	e002      	b.n	800cc8a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc84:	bf00      	nop
 800cc86:	e000      	b.n	800cc8a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc88:	bf00      	nop

	return res;
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08c      	sub	sp, #48	; 0x30
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cca8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <dir_register+0x20>
 800ccb0:	2306      	movs	r3, #6
 800ccb2:	e0e0      	b.n	800ce76 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	627b      	str	r3, [r7, #36]	; 0x24
 800ccb8:	e002      	b.n	800ccc0 <dir_register+0x2c>
 800ccba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	627b      	str	r3, [r7, #36]	; 0x24
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	68da      	ldr	r2, [r3, #12]
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	4413      	add	r3, r2
 800ccca:	881b      	ldrh	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1f4      	bne.n	800ccba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ccd6:	f107 030c 	add.w	r3, r7, #12
 800ccda:	220c      	movs	r2, #12
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7fe fd11 	bl	800b704 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cce2:	7dfb      	ldrb	r3, [r7, #23]
 800cce4:	f003 0301 	and.w	r3, r3, #1
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d032      	beq.n	800cd52 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2240      	movs	r2, #64	; 0x40
 800ccf0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccf8:	e016      	b.n	800cd28 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	68da      	ldr	r2, [r3, #12]
 800cd04:	f107 010c 	add.w	r1, r7, #12
 800cd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0a:	f7ff fdab 	bl	800c864 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff ff00 	bl	800cb14 <dir_find>
 800cd14:	4603      	mov	r3, r0
 800cd16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cd1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d106      	bne.n	800cd30 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd24:	3301      	adds	r3, #1
 800cd26:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2a:	2b63      	cmp	r3, #99	; 0x63
 800cd2c:	d9e5      	bls.n	800ccfa <dir_register+0x66>
 800cd2e:	e000      	b.n	800cd32 <dir_register+0x9e>
			if (res != FR_OK) break;
 800cd30:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd34:	2b64      	cmp	r3, #100	; 0x64
 800cd36:	d101      	bne.n	800cd3c <dir_register+0xa8>
 800cd38:	2307      	movs	r3, #7
 800cd3a:	e09c      	b.n	800ce76 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cd3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd40:	2b04      	cmp	r3, #4
 800cd42:	d002      	beq.n	800cd4a <dir_register+0xb6>
 800cd44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd48:	e095      	b.n	800ce76 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cd4a:	7dfa      	ldrb	r2, [r7, #23]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cd52:	7dfb      	ldrb	r3, [r7, #23]
 800cd54:	f003 0302 	and.w	r3, r3, #2
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d007      	beq.n	800cd6c <dir_register+0xd8>
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5e:	330c      	adds	r3, #12
 800cd60:	4a47      	ldr	r2, [pc, #284]	; (800ce80 <dir_register+0x1ec>)
 800cd62:	fba2 2303 	umull	r2, r3, r2, r3
 800cd66:	089b      	lsrs	r3, r3, #2
 800cd68:	3301      	adds	r3, #1
 800cd6a:	e000      	b.n	800cd6e <dir_register+0xda>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cd70:	6a39      	ldr	r1, [r7, #32]
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7ff fbb4 	bl	800c4e0 <dir_alloc>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cd7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d148      	bne.n	800ce18 <dir_register+0x184>
 800cd86:	6a3b      	ldr	r3, [r7, #32]
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	623b      	str	r3, [r7, #32]
 800cd8c:	6a3b      	ldr	r3, [r7, #32]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d042      	beq.n	800ce18 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	695a      	ldr	r2, [r3, #20]
 800cd96:	6a3b      	ldr	r3, [r7, #32]
 800cd98:	015b      	lsls	r3, r3, #5
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7ff fa5e 	bl	800c260 <dir_sdi>
 800cda4:	4603      	mov	r3, r0
 800cda6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cdaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d132      	bne.n	800ce18 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	3324      	adds	r3, #36	; 0x24
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff fde4 	bl	800c984 <sum_sfn>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	69db      	ldr	r3, [r3, #28]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	69f8      	ldr	r0, [r7, #28]
 800cdc8:	f7fe feca 	bl	800bb60 <move_window>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cdd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d11d      	bne.n	800ce16 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	68d8      	ldr	r0, [r3, #12]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a19      	ldr	r1, [r3, #32]
 800cde2:	6a3b      	ldr	r3, [r7, #32]
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	7efb      	ldrb	r3, [r7, #27]
 800cde8:	f7ff fcd4 	bl	800c794 <put_lfn>
				fs->wflag = 1;
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7ff faae 	bl	800c356 <dir_next>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ce00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d107      	bne.n	800ce18 <dir_register+0x184>
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	623b      	str	r3, [r7, #32]
 800ce0e:	6a3b      	ldr	r3, [r7, #32]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1d5      	bne.n	800cdc0 <dir_register+0x12c>
 800ce14:	e000      	b.n	800ce18 <dir_register+0x184>
				if (res != FR_OK) break;
 800ce16:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ce18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d128      	bne.n	800ce72 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	69db      	ldr	r3, [r3, #28]
 800ce24:	4619      	mov	r1, r3
 800ce26:	69f8      	ldr	r0, [r7, #28]
 800ce28:	f7fe fe9a 	bl	800bb60 <move_window>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ce32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d11b      	bne.n	800ce72 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	2220      	movs	r2, #32
 800ce40:	2100      	movs	r1, #0
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe fc7f 	bl	800b746 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6a18      	ldr	r0, [r3, #32]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	3324      	adds	r3, #36	; 0x24
 800ce50:	220b      	movs	r2, #11
 800ce52:	4619      	mov	r1, r3
 800ce54:	f7fe fc56 	bl	800b704 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a1b      	ldr	r3, [r3, #32]
 800ce62:	330c      	adds	r3, #12
 800ce64:	f002 0218 	and.w	r2, r2, #24
 800ce68:	b2d2      	uxtb	r2, r2
 800ce6a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ce72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3730      	adds	r7, #48	; 0x30
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	4ec4ec4f 	.word	0x4ec4ec4f

0800ce84 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b088      	sub	sp, #32
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	2200      	movs	r2, #0
 800ce98:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	69db      	ldr	r3, [r3, #28]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 80c9 	beq.w	800d036 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceac:	d032      	beq.n	800cf14 <get_fileinfo+0x90>
			i = j = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	61bb      	str	r3, [r7, #24]
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ceb6:	e01b      	b.n	800cef0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ceb8:	89fb      	ldrh	r3, [r7, #14]
 800ceba:	2100      	movs	r1, #0
 800cebc:	4618      	mov	r0, r3
 800cebe:	f001 fbeb 	bl	800e698 <ff_convert>
 800cec2:	4603      	mov	r3, r0
 800cec4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800cec6:	89fb      	ldrh	r3, [r7, #14]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d102      	bne.n	800ced2 <get_fileinfo+0x4e>
 800cecc:	2300      	movs	r3, #0
 800cece:	61fb      	str	r3, [r7, #28]
 800ced0:	e01a      	b.n	800cf08 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	2bfe      	cmp	r3, #254	; 0xfe
 800ced6:	d902      	bls.n	800cede <get_fileinfo+0x5a>
 800ced8:	2300      	movs	r3, #0
 800ceda:	61fb      	str	r3, [r7, #28]
 800cedc:	e014      	b.n	800cf08 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	1c5a      	adds	r2, r3, #1
 800cee2:	61fa      	str	r2, [r7, #28]
 800cee4:	89fa      	ldrh	r2, [r7, #14]
 800cee6:	b2d1      	uxtb	r1, r2
 800cee8:	683a      	ldr	r2, [r7, #0]
 800ceea:	4413      	add	r3, r2
 800ceec:	460a      	mov	r2, r1
 800ceee:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	68da      	ldr	r2, [r3, #12]
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	1c59      	adds	r1, r3, #1
 800cef8:	61b9      	str	r1, [r7, #24]
 800cefa:	005b      	lsls	r3, r3, #1
 800cefc:	4413      	add	r3, r2
 800cefe:	881b      	ldrh	r3, [r3, #0]
 800cf00:	81fb      	strh	r3, [r7, #14]
 800cf02:	89fb      	ldrh	r3, [r7, #14]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1d7      	bne.n	800ceb8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cf08:	683a      	ldr	r2, [r7, #0]
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	3316      	adds	r3, #22
 800cf10:	2200      	movs	r2, #0
 800cf12:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	61bb      	str	r3, [r7, #24]
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	4413      	add	r3, r2
 800cf22:	3316      	adds	r3, #22
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cf28:	e04c      	b.n	800cfc4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6a1a      	ldr	r2, [r3, #32]
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	1c59      	adds	r1, r3, #1
 800cf32:	61f9      	str	r1, [r7, #28]
 800cf34:	4413      	add	r3, r2
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cf3a:	7dfb      	ldrb	r3, [r7, #23]
 800cf3c:	2b20      	cmp	r3, #32
 800cf3e:	d100      	bne.n	800cf42 <get_fileinfo+0xbe>
 800cf40:	e040      	b.n	800cfc4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cf42:	7dfb      	ldrb	r3, [r7, #23]
 800cf44:	2b05      	cmp	r3, #5
 800cf46:	d101      	bne.n	800cf4c <get_fileinfo+0xc8>
 800cf48:	23e5      	movs	r3, #229	; 0xe5
 800cf4a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	2b09      	cmp	r3, #9
 800cf50:	d10f      	bne.n	800cf72 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800cf52:	89bb      	ldrh	r3, [r7, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d105      	bne.n	800cf64 <get_fileinfo+0xe0>
 800cf58:	683a      	ldr	r2, [r7, #0]
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	3316      	adds	r3, #22
 800cf60:	222e      	movs	r2, #46	; 0x2e
 800cf62:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	1c5a      	adds	r2, r3, #1
 800cf68:	61ba      	str	r2, [r7, #24]
 800cf6a:	683a      	ldr	r2, [r7, #0]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	222e      	movs	r2, #46	; 0x2e
 800cf70:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	4413      	add	r3, r2
 800cf78:	3309      	adds	r3, #9
 800cf7a:	7dfa      	ldrb	r2, [r7, #23]
 800cf7c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cf7e:	89bb      	ldrh	r3, [r7, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d11c      	bne.n	800cfbe <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cf84:	7dfb      	ldrb	r3, [r7, #23]
 800cf86:	2b40      	cmp	r3, #64	; 0x40
 800cf88:	d913      	bls.n	800cfb2 <get_fileinfo+0x12e>
 800cf8a:	7dfb      	ldrb	r3, [r7, #23]
 800cf8c:	2b5a      	cmp	r3, #90	; 0x5a
 800cf8e:	d810      	bhi.n	800cfb2 <get_fileinfo+0x12e>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6a1b      	ldr	r3, [r3, #32]
 800cf94:	330c      	adds	r3, #12
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	2b08      	cmp	r3, #8
 800cf9e:	d901      	bls.n	800cfa4 <get_fileinfo+0x120>
 800cfa0:	2310      	movs	r3, #16
 800cfa2:	e000      	b.n	800cfa6 <get_fileinfo+0x122>
 800cfa4:	2308      	movs	r3, #8
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800cfac:	7dfb      	ldrb	r3, [r7, #23]
 800cfae:	3320      	adds	r3, #32
 800cfb0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cfb2:	683a      	ldr	r2, [r7, #0]
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	3316      	adds	r3, #22
 800cfba:	7dfa      	ldrb	r2, [r7, #23]
 800cfbc:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	2b0a      	cmp	r3, #10
 800cfc8:	d9af      	bls.n	800cf2a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800cfca:	89bb      	ldrh	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d10d      	bne.n	800cfec <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800cfd0:	683a      	ldr	r2, [r7, #0]
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	3316      	adds	r3, #22
 800cfd8:	2200      	movs	r2, #0
 800cfda:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a1b      	ldr	r3, [r3, #32]
 800cfe0:	330c      	adds	r3, #12
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d101      	bne.n	800cfec <get_fileinfo+0x168>
 800cfe8:	2300      	movs	r3, #0
 800cfea:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	4413      	add	r3, r2
 800cff2:	3309      	adds	r3, #9
 800cff4:	2200      	movs	r2, #0
 800cff6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6a1b      	ldr	r3, [r3, #32]
 800cffc:	7ada      	ldrb	r2, [r3, #11]
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a1b      	ldr	r3, [r3, #32]
 800d006:	331c      	adds	r3, #28
 800d008:	4618      	mov	r0, r3
 800d00a:	f7fe fb11 	bl	800b630 <ld_dword>
 800d00e:	4602      	mov	r2, r0
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6a1b      	ldr	r3, [r3, #32]
 800d018:	3316      	adds	r3, #22
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fe fb08 	bl	800b630 <ld_dword>
 800d020:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	b29a      	uxth	r2, r3
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	80da      	strh	r2, [r3, #6]
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	0c1b      	lsrs	r3, r3, #16
 800d02e:	b29a      	uxth	r2, r3
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	809a      	strh	r2, [r3, #4]
 800d034:	e000      	b.n	800d038 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d036:	bf00      	nop
}
 800d038:	3720      	adds	r7, #32
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
	...

0800d040 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	1c59      	adds	r1, r3, #1
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	6011      	str	r1, [r2, #0]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d056:	89fb      	ldrh	r3, [r7, #14]
 800d058:	2b60      	cmp	r3, #96	; 0x60
 800d05a:	d905      	bls.n	800d068 <get_achar+0x28>
 800d05c:	89fb      	ldrh	r3, [r7, #14]
 800d05e:	2b7a      	cmp	r3, #122	; 0x7a
 800d060:	d802      	bhi.n	800d068 <get_achar+0x28>
 800d062:	89fb      	ldrh	r3, [r7, #14]
 800d064:	3b20      	subs	r3, #32
 800d066:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d068:	89fb      	ldrh	r3, [r7, #14]
 800d06a:	2b7f      	cmp	r3, #127	; 0x7f
 800d06c:	d904      	bls.n	800d078 <get_achar+0x38>
 800d06e:	89fb      	ldrh	r3, [r7, #14]
 800d070:	3b80      	subs	r3, #128	; 0x80
 800d072:	4a05      	ldr	r2, [pc, #20]	; (800d088 <get_achar+0x48>)
 800d074:	5cd3      	ldrb	r3, [r2, r3]
 800d076:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800d078:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3714      	adds	r7, #20
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	08014a04 	.word	0x08014a04

0800d08c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08a      	sub	sp, #40	; 0x28
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
 800d098:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800d09a:	e009      	b.n	800d0b0 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800d09c:	f107 0308 	add.w	r3, r7, #8
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7ff ffcd 	bl	800d040 <get_achar>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d101      	bne.n	800d0b0 <pattern_matching+0x24>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	e064      	b.n	800d17a <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	1e5a      	subs	r2, r3, #1
 800d0b4:	607a      	str	r2, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d1f0      	bne.n	800d09c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d104      	bne.n	800d0cc <pattern_matching+0x40>
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d001      	beq.n	800d0cc <pattern_matching+0x40>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e056      	b.n	800d17a <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	617b      	str	r3, [r7, #20]
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	2b3f      	cmp	r3, #63	; 0x3f
 800d0da:	d003      	beq.n	800d0e4 <pattern_matching+0x58>
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0e2:	d126      	bne.n	800d132 <pattern_matching+0xa6>
				nm = nx = 0;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	61fb      	str	r3, [r7, #28]
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	1c5a      	adds	r2, r3, #1
 800d0f0:	617a      	str	r2, [r7, #20]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	2b3f      	cmp	r3, #63	; 0x3f
 800d0f6:	d103      	bne.n	800d100 <pattern_matching+0x74>
 800d0f8:	6a3b      	ldr	r3, [r7, #32]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	623b      	str	r3, [r7, #32]
 800d0fe:	e001      	b.n	800d104 <pattern_matching+0x78>
 800d100:	2301      	movs	r3, #1
 800d102:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b3f      	cmp	r3, #63	; 0x3f
 800d10a:	d0ef      	beq.n	800d0ec <pattern_matching+0x60>
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2b2a      	cmp	r3, #42	; 0x2a
 800d112:	d0eb      	beq.n	800d0ec <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800d114:	6978      	ldr	r0, [r7, #20]
 800d116:	6939      	ldr	r1, [r7, #16]
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	6a3a      	ldr	r2, [r7, #32]
 800d11c:	f7ff ffb6 	bl	800d08c <pattern_matching>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d001      	beq.n	800d12a <pattern_matching+0x9e>
 800d126:	2301      	movs	r3, #1
 800d128:	e027      	b.n	800d17a <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d130:	e017      	b.n	800d162 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800d132:	f107 0314 	add.w	r3, r7, #20
 800d136:	4618      	mov	r0, r3
 800d138:	f7ff ff82 	bl	800d040 <get_achar>
 800d13c:	4603      	mov	r3, r0
 800d13e:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800d140:	f107 0310 	add.w	r3, r7, #16
 800d144:	4618      	mov	r0, r3
 800d146:	f7ff ff7b 	bl	800d040 <get_achar>
 800d14a:	4603      	mov	r3, r0
 800d14c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800d14e:	8b7a      	ldrh	r2, [r7, #26]
 800d150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d152:	429a      	cmp	r2, r3
 800d154:	d104      	bne.n	800d160 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800d156:	8b7b      	ldrh	r3, [r7, #26]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1bb      	bne.n	800d0d4 <pattern_matching+0x48>
 800d15c:	2301      	movs	r3, #1
 800d15e:	e00c      	b.n	800d17a <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800d160:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800d162:	f107 0308 	add.w	r3, r7, #8
 800d166:	4618      	mov	r0, r3
 800d168:	f7ff ff6a 	bl	800d040 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d002      	beq.n	800d178 <pattern_matching+0xec>
 800d172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d174:	2b00      	cmp	r3, #0
 800d176:	d1a9      	bne.n	800d0cc <pattern_matching+0x40>

	return 0;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3728      	adds	r7, #40	; 0x28
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
	...

0800d184 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b08a      	sub	sp, #40	; 0x28
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	613b      	str	r3, [r7, #16]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	2300      	movs	r3, #0
 800d19e:	617b      	str	r3, [r7, #20]
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	1c5a      	adds	r2, r3, #1
 800d1a8:	61ba      	str	r2, [r7, #24]
 800d1aa:	693a      	ldr	r2, [r7, #16]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d1b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1b4:	2b1f      	cmp	r3, #31
 800d1b6:	d940      	bls.n	800d23a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d1b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1ba:	2b2f      	cmp	r3, #47	; 0x2f
 800d1bc:	d006      	beq.n	800d1cc <create_name+0x48>
 800d1be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1c0:	2b5c      	cmp	r3, #92	; 0x5c
 800d1c2:	d110      	bne.n	800d1e6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d1c4:	e002      	b.n	800d1cc <create_name+0x48>
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	61bb      	str	r3, [r7, #24]
 800d1cc:	693a      	ldr	r2, [r7, #16]
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	2b2f      	cmp	r3, #47	; 0x2f
 800d1d6:	d0f6      	beq.n	800d1c6 <create_name+0x42>
 800d1d8:	693a      	ldr	r2, [r7, #16]
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	4413      	add	r3, r2
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	2b5c      	cmp	r3, #92	; 0x5c
 800d1e2:	d0f0      	beq.n	800d1c6 <create_name+0x42>
			break;
 800d1e4:	e02a      	b.n	800d23c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	2bfe      	cmp	r3, #254	; 0xfe
 800d1ea:	d901      	bls.n	800d1f0 <create_name+0x6c>
 800d1ec:	2306      	movs	r3, #6
 800d1ee:	e177      	b.n	800d4e0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d1f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d1f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f001 fa4c 	bl	800e698 <ff_convert>
 800d200:	4603      	mov	r3, r0
 800d202:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d206:	2b00      	cmp	r3, #0
 800d208:	d101      	bne.n	800d20e <create_name+0x8a>
 800d20a:	2306      	movs	r3, #6
 800d20c:	e168      	b.n	800d4e0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d20e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d210:	2b7f      	cmp	r3, #127	; 0x7f
 800d212:	d809      	bhi.n	800d228 <create_name+0xa4>
 800d214:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d216:	4619      	mov	r1, r3
 800d218:	48b3      	ldr	r0, [pc, #716]	; (800d4e8 <create_name+0x364>)
 800d21a:	f7fe fad6 	bl	800b7ca <chk_chr>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d001      	beq.n	800d228 <create_name+0xa4>
 800d224:	2306      	movs	r3, #6
 800d226:	e15b      	b.n	800d4e0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	1c5a      	adds	r2, r3, #1
 800d22c:	617a      	str	r2, [r7, #20]
 800d22e:	005b      	lsls	r3, r3, #1
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	4413      	add	r3, r2
 800d234:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d236:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d238:	e7b4      	b.n	800d1a4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d23a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d23c:	693a      	ldr	r2, [r7, #16]
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	441a      	add	r2, r3
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d248:	2b1f      	cmp	r3, #31
 800d24a:	d801      	bhi.n	800d250 <create_name+0xcc>
 800d24c:	2304      	movs	r3, #4
 800d24e:	e000      	b.n	800d252 <create_name+0xce>
 800d250:	2300      	movs	r3, #0
 800d252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d256:	e011      	b.n	800d27c <create_name+0xf8>
		w = lfn[di - 1];
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d25e:	3b01      	subs	r3, #1
 800d260:	005b      	lsls	r3, r3, #1
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	4413      	add	r3, r2
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d26a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d26c:	2b20      	cmp	r3, #32
 800d26e:	d002      	beq.n	800d276 <create_name+0xf2>
 800d270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d272:	2b2e      	cmp	r3, #46	; 0x2e
 800d274:	d106      	bne.n	800d284 <create_name+0x100>
		di--;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	3b01      	subs	r3, #1
 800d27a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1ea      	bne.n	800d258 <create_name+0xd4>
 800d282:	e000      	b.n	800d286 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d284:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	005b      	lsls	r3, r3, #1
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	4413      	add	r3, r2
 800d28e:	2200      	movs	r2, #0
 800d290:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <create_name+0x118>
 800d298:	2306      	movs	r3, #6
 800d29a:	e121      	b.n	800d4e0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	3324      	adds	r3, #36	; 0x24
 800d2a0:	220b      	movs	r2, #11
 800d2a2:	2120      	movs	r1, #32
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fe fa4e 	bl	800b746 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	61bb      	str	r3, [r7, #24]
 800d2ae:	e002      	b.n	800d2b6 <create_name+0x132>
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	61bb      	str	r3, [r7, #24]
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	005b      	lsls	r3, r3, #1
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	4413      	add	r3, r2
 800d2be:	881b      	ldrh	r3, [r3, #0]
 800d2c0:	2b20      	cmp	r3, #32
 800d2c2:	d0f5      	beq.n	800d2b0 <create_name+0x12c>
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	005b      	lsls	r3, r3, #1
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	881b      	ldrh	r3, [r3, #0]
 800d2ce:	2b2e      	cmp	r3, #46	; 0x2e
 800d2d0:	d0ee      	beq.n	800d2b0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d009      	beq.n	800d2ec <create_name+0x168>
 800d2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2dc:	f043 0303 	orr.w	r3, r3, #3
 800d2e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d2e4:	e002      	b.n	800d2ec <create_name+0x168>
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	3b01      	subs	r3, #1
 800d2ea:	617b      	str	r3, [r7, #20]
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d009      	beq.n	800d306 <create_name+0x182>
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	005b      	lsls	r3, r3, #1
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	4413      	add	r3, r2
 800d300:	881b      	ldrh	r3, [r3, #0]
 800d302:	2b2e      	cmp	r3, #46	; 0x2e
 800d304:	d1ef      	bne.n	800d2e6 <create_name+0x162>

	i = b = 0; ni = 8;
 800d306:	2300      	movs	r3, #0
 800d308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d30c:	2300      	movs	r3, #0
 800d30e:	623b      	str	r3, [r7, #32]
 800d310:	2308      	movs	r3, #8
 800d312:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	1c5a      	adds	r2, r3, #1
 800d318:	61ba      	str	r2, [r7, #24]
 800d31a:	005b      	lsls	r3, r3, #1
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	4413      	add	r3, r2
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d326:	2b00      	cmp	r3, #0
 800d328:	f000 8090 	beq.w	800d44c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d32c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d32e:	2b20      	cmp	r3, #32
 800d330:	d006      	beq.n	800d340 <create_name+0x1bc>
 800d332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d334:	2b2e      	cmp	r3, #46	; 0x2e
 800d336:	d10a      	bne.n	800d34e <create_name+0x1ca>
 800d338:	69ba      	ldr	r2, [r7, #24]
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d006      	beq.n	800d34e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d344:	f043 0303 	orr.w	r3, r3, #3
 800d348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d34c:	e07d      	b.n	800d44a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d34e:	6a3a      	ldr	r2, [r7, #32]
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	429a      	cmp	r2, r3
 800d354:	d203      	bcs.n	800d35e <create_name+0x1da>
 800d356:	69ba      	ldr	r2, [r7, #24]
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d123      	bne.n	800d3a6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	2b0b      	cmp	r3, #11
 800d362:	d106      	bne.n	800d372 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d368:	f043 0303 	orr.w	r3, r3, #3
 800d36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d370:	e06f      	b.n	800d452 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d372:	69ba      	ldr	r2, [r7, #24]
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	429a      	cmp	r2, r3
 800d378:	d005      	beq.n	800d386 <create_name+0x202>
 800d37a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d37e:	f043 0303 	orr.w	r3, r3, #3
 800d382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d386:	69ba      	ldr	r2, [r7, #24]
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d860      	bhi.n	800d450 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	61bb      	str	r3, [r7, #24]
 800d392:	2308      	movs	r3, #8
 800d394:	623b      	str	r3, [r7, #32]
 800d396:	230b      	movs	r3, #11
 800d398:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d39a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d3a4:	e051      	b.n	800d44a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d3a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a8:	2b7f      	cmp	r3, #127	; 0x7f
 800d3aa:	d914      	bls.n	800d3d6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d3ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f001 f971 	bl	800e698 <ff_convert>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d3ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d004      	beq.n	800d3ca <create_name+0x246>
 800d3c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3c2:	3b80      	subs	r3, #128	; 0x80
 800d3c4:	4a49      	ldr	r2, [pc, #292]	; (800d4ec <create_name+0x368>)
 800d3c6:	5cd3      	ldrb	r3, [r2, r3]
 800d3c8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d3ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3ce:	f043 0302 	orr.w	r3, r3, #2
 800d3d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d3d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d007      	beq.n	800d3ec <create_name+0x268>
 800d3dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3de:	4619      	mov	r1, r3
 800d3e0:	4843      	ldr	r0, [pc, #268]	; (800d4f0 <create_name+0x36c>)
 800d3e2:	f7fe f9f2 	bl	800b7ca <chk_chr>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d008      	beq.n	800d3fe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d3ec:	235f      	movs	r3, #95	; 0x5f
 800d3ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3f4:	f043 0303 	orr.w	r3, r3, #3
 800d3f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d3fc:	e01b      	b.n	800d436 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d3fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d400:	2b40      	cmp	r3, #64	; 0x40
 800d402:	d909      	bls.n	800d418 <create_name+0x294>
 800d404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d406:	2b5a      	cmp	r3, #90	; 0x5a
 800d408:	d806      	bhi.n	800d418 <create_name+0x294>
					b |= 2;
 800d40a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d40e:	f043 0302 	orr.w	r3, r3, #2
 800d412:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d416:	e00e      	b.n	800d436 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d41a:	2b60      	cmp	r3, #96	; 0x60
 800d41c:	d90b      	bls.n	800d436 <create_name+0x2b2>
 800d41e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d420:	2b7a      	cmp	r3, #122	; 0x7a
 800d422:	d808      	bhi.n	800d436 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d428:	f043 0301 	orr.w	r3, r3, #1
 800d42c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d432:	3b20      	subs	r3, #32
 800d434:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d436:	6a3b      	ldr	r3, [r7, #32]
 800d438:	1c5a      	adds	r2, r3, #1
 800d43a:	623a      	str	r2, [r7, #32]
 800d43c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d43e:	b2d1      	uxtb	r1, r2
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	4413      	add	r3, r2
 800d444:	460a      	mov	r2, r1
 800d446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d44a:	e763      	b.n	800d314 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d44c:	bf00      	nop
 800d44e:	e000      	b.n	800d452 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d450:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d458:	2be5      	cmp	r3, #229	; 0xe5
 800d45a:	d103      	bne.n	800d464 <create_name+0x2e0>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2205      	movs	r2, #5
 800d460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	2b08      	cmp	r3, #8
 800d468:	d104      	bne.n	800d474 <create_name+0x2f0>
 800d46a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d478:	f003 030c 	and.w	r3, r3, #12
 800d47c:	2b0c      	cmp	r3, #12
 800d47e:	d005      	beq.n	800d48c <create_name+0x308>
 800d480:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d484:	f003 0303 	and.w	r3, r3, #3
 800d488:	2b03      	cmp	r3, #3
 800d48a:	d105      	bne.n	800d498 <create_name+0x314>
 800d48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d490:	f043 0302 	orr.w	r3, r3, #2
 800d494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d49c:	f003 0302 	and.w	r3, r3, #2
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d117      	bne.n	800d4d4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d4a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d4a8:	f003 0303 	and.w	r3, r3, #3
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d105      	bne.n	800d4bc <create_name+0x338>
 800d4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b4:	f043 0310 	orr.w	r3, r3, #16
 800d4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d4bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d4c0:	f003 030c 	and.w	r3, r3, #12
 800d4c4:	2b04      	cmp	r3, #4
 800d4c6:	d105      	bne.n	800d4d4 <create_name+0x350>
 800d4c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4cc:	f043 0308 	orr.w	r3, r3, #8
 800d4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d4da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d4de:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3728      	adds	r7, #40	; 0x28
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	08013628 	.word	0x08013628
 800d4ec:	08014a04 	.word	0x08014a04
 800d4f0:	08013634 	.word	0x08013634

0800d4f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b086      	sub	sp, #24
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d508:	e002      	b.n	800d510 <follow_path+0x1c>
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	3301      	adds	r3, #1
 800d50e:	603b      	str	r3, [r7, #0]
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	2b2f      	cmp	r3, #47	; 0x2f
 800d516:	d0f8      	beq.n	800d50a <follow_path+0x16>
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	2b5c      	cmp	r3, #92	; 0x5c
 800d51e:	d0f4      	beq.n	800d50a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	2200      	movs	r2, #0
 800d524:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	2b1f      	cmp	r3, #31
 800d52c:	d80a      	bhi.n	800d544 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2280      	movs	r2, #128	; 0x80
 800d532:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d536:	2100      	movs	r1, #0
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7fe fe91 	bl	800c260 <dir_sdi>
 800d53e:	4603      	mov	r3, r0
 800d540:	75fb      	strb	r3, [r7, #23]
 800d542:	e043      	b.n	800d5cc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d544:	463b      	mov	r3, r7
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7ff fe1b 	bl	800d184 <create_name>
 800d54e:	4603      	mov	r3, r0
 800d550:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d552:	7dfb      	ldrb	r3, [r7, #23]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d134      	bne.n	800d5c2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7ff fadb 	bl	800cb14 <dir_find>
 800d55e:	4603      	mov	r3, r0
 800d560:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d568:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d56a:	7dfb      	ldrb	r3, [r7, #23]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00a      	beq.n	800d586 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d570:	7dfb      	ldrb	r3, [r7, #23]
 800d572:	2b04      	cmp	r3, #4
 800d574:	d127      	bne.n	800d5c6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d576:	7afb      	ldrb	r3, [r7, #11]
 800d578:	f003 0304 	and.w	r3, r3, #4
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d122      	bne.n	800d5c6 <follow_path+0xd2>
 800d580:	2305      	movs	r3, #5
 800d582:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d584:	e01f      	b.n	800d5c6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d586:	7afb      	ldrb	r3, [r7, #11]
 800d588:	f003 0304 	and.w	r3, r3, #4
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d11c      	bne.n	800d5ca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	799b      	ldrb	r3, [r3, #6]
 800d594:	f003 0310 	and.w	r3, r3, #16
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d102      	bne.n	800d5a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d59c:	2305      	movs	r3, #5
 800d59e:	75fb      	strb	r3, [r7, #23]
 800d5a0:	e014      	b.n	800d5cc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	695b      	ldr	r3, [r3, #20]
 800d5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5b0:	4413      	add	r3, r2
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f7fe ffda 	bl	800c56e <ld_clust>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d5c0:	e7c0      	b.n	800d544 <follow_path+0x50>
			if (res != FR_OK) break;
 800d5c2:	bf00      	nop
 800d5c4:	e002      	b.n	800d5cc <follow_path+0xd8>
				break;
 800d5c6:	bf00      	nop
 800d5c8:	e000      	b.n	800d5cc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d5ca:	bf00      	nop
			}
		}
	}

	return res;
 800d5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3718      	adds	r7, #24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d5d6:	b480      	push	{r7}
 800d5d8:	b087      	sub	sp, #28
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d5de:	f04f 33ff 	mov.w	r3, #4294967295
 800d5e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d031      	beq.n	800d650 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	617b      	str	r3, [r7, #20]
 800d5f2:	e002      	b.n	800d5fa <get_ldnumber+0x24>
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	617b      	str	r3, [r7, #20]
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	2b1f      	cmp	r3, #31
 800d600:	d903      	bls.n	800d60a <get_ldnumber+0x34>
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b3a      	cmp	r3, #58	; 0x3a
 800d608:	d1f4      	bne.n	800d5f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	2b3a      	cmp	r3, #58	; 0x3a
 800d610:	d11c      	bne.n	800d64c <get_ldnumber+0x76>
			tp = *path;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	1c5a      	adds	r2, r3, #1
 800d61c:	60fa      	str	r2, [r7, #12]
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	3b30      	subs	r3, #48	; 0x30
 800d622:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	2b09      	cmp	r3, #9
 800d628:	d80e      	bhi.n	800d648 <get_ldnumber+0x72>
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d10a      	bne.n	800d648 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d107      	bne.n	800d648 <get_ldnumber+0x72>
					vol = (int)i;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	3301      	adds	r3, #1
 800d640:	617b      	str	r3, [r7, #20]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	697a      	ldr	r2, [r7, #20]
 800d646:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	e002      	b.n	800d652 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d64c:	2300      	movs	r3, #0
 800d64e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d650:	693b      	ldr	r3, [r7, #16]
}
 800d652:	4618      	mov	r0, r3
 800d654:	371c      	adds	r7, #28
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr
	...

0800d660 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	70da      	strb	r2, [r3, #3]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f04f 32ff 	mov.w	r2, #4294967295
 800d676:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7fe fa70 	bl	800bb60 <move_window>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <check_fs+0x2a>
 800d686:	2304      	movs	r3, #4
 800d688:	e038      	b.n	800d6fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	3334      	adds	r3, #52	; 0x34
 800d68e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d692:	4618      	mov	r0, r3
 800d694:	f7fd ffb4 	bl	800b600 <ld_word>
 800d698:	4603      	mov	r3, r0
 800d69a:	461a      	mov	r2, r3
 800d69c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d001      	beq.n	800d6a8 <check_fs+0x48>
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	e029      	b.n	800d6fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d6ae:	2be9      	cmp	r3, #233	; 0xe9
 800d6b0:	d009      	beq.n	800d6c6 <check_fs+0x66>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d6b8:	2beb      	cmp	r3, #235	; 0xeb
 800d6ba:	d11e      	bne.n	800d6fa <check_fs+0x9a>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d6c2:	2b90      	cmp	r3, #144	; 0x90
 800d6c4:	d119      	bne.n	800d6fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	3334      	adds	r3, #52	; 0x34
 800d6ca:	3336      	adds	r3, #54	; 0x36
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fd ffaf 	bl	800b630 <ld_dword>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d6d8:	4a0a      	ldr	r2, [pc, #40]	; (800d704 <check_fs+0xa4>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d101      	bne.n	800d6e2 <check_fs+0x82>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e00c      	b.n	800d6fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	3334      	adds	r3, #52	; 0x34
 800d6e6:	3352      	adds	r3, #82	; 0x52
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fd ffa1 	bl	800b630 <ld_dword>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	4a05      	ldr	r2, [pc, #20]	; (800d708 <check_fs+0xa8>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d101      	bne.n	800d6fa <check_fs+0x9a>
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	e000      	b.n	800d6fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d6fa:	2302      	movs	r3, #2
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3708      	adds	r7, #8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	00544146 	.word	0x00544146
 800d708:	33544146 	.word	0x33544146

0800d70c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b096      	sub	sp, #88	; 0x58
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	4613      	mov	r3, r2
 800d718:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2200      	movs	r2, #0
 800d71e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f7ff ff58 	bl	800d5d6 <get_ldnumber>
 800d726:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	da01      	bge.n	800d732 <find_volume+0x26>
 800d72e:	230b      	movs	r3, #11
 800d730:	e231      	b.n	800db96 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d732:	4aa8      	ldr	r2, [pc, #672]	; (800d9d4 <find_volume+0x2c8>)
 800d734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d73a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d101      	bne.n	800d746 <find_volume+0x3a>
 800d742:	230c      	movs	r3, #12
 800d744:	e227      	b.n	800db96 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d74a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d74c:	79fb      	ldrb	r3, [r7, #7]
 800d74e:	f023 0301 	bic.w	r3, r3, #1
 800d752:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d01a      	beq.n	800d792 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75e:	785b      	ldrb	r3, [r3, #1]
 800d760:	4618      	mov	r0, r3
 800d762:	f7fd feaf 	bl	800b4c4 <disk_status>
 800d766:	4603      	mov	r3, r0
 800d768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d76c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d770:	f003 0301 	and.w	r3, r3, #1
 800d774:	2b00      	cmp	r3, #0
 800d776:	d10c      	bne.n	800d792 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d778:	79fb      	ldrb	r3, [r7, #7]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d007      	beq.n	800d78e <find_volume+0x82>
 800d77e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d782:	f003 0304 	and.w	r3, r3, #4
 800d786:	2b00      	cmp	r3, #0
 800d788:	d001      	beq.n	800d78e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d78a:	230a      	movs	r3, #10
 800d78c:	e203      	b.n	800db96 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800d78e:	2300      	movs	r3, #0
 800d790:	e201      	b.n	800db96 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d794:	2200      	movs	r2, #0
 800d796:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a2:	785b      	ldrb	r3, [r3, #1]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7fd fea7 	bl	800b4f8 <disk_initialize>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d7b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d7b4:	f003 0301 	and.w	r3, r3, #1
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d001      	beq.n	800d7c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d7bc:	2303      	movs	r3, #3
 800d7be:	e1ea      	b.n	800db96 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d7c0:	79fb      	ldrb	r3, [r7, #7]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d007      	beq.n	800d7d6 <find_volume+0xca>
 800d7c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d7ca:	f003 0304 	and.w	r3, r3, #4
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d7d2:	230a      	movs	r3, #10
 800d7d4:	e1df      	b.n	800db96 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d7da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d7dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7de:	f7ff ff3f 	bl	800d660 <check_fs>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d7e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d14b      	bne.n	800d888 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	643b      	str	r3, [r7, #64]	; 0x40
 800d7f4:	e01f      	b.n	800d836 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d7fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7fe:	011b      	lsls	r3, r3, #4
 800d800:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d804:	4413      	add	r3, r2
 800d806:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80a:	3304      	adds	r3, #4
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d006      	beq.n	800d820 <find_volume+0x114>
 800d812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d814:	3308      	adds	r3, #8
 800d816:	4618      	mov	r0, r3
 800d818:	f7fd ff0a 	bl	800b630 <ld_dword>
 800d81c:	4602      	mov	r2, r0
 800d81e:	e000      	b.n	800d822 <find_volume+0x116>
 800d820:	2200      	movs	r2, #0
 800d822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d82a:	440b      	add	r3, r1
 800d82c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d832:	3301      	adds	r3, #1
 800d834:	643b      	str	r3, [r7, #64]	; 0x40
 800d836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d838:	2b03      	cmp	r3, #3
 800d83a:	d9dc      	bls.n	800d7f6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d83c:	2300      	movs	r3, #0
 800d83e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d842:	2b00      	cmp	r3, #0
 800d844:	d002      	beq.n	800d84c <find_volume+0x140>
 800d846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d848:	3b01      	subs	r3, #1
 800d84a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d854:	4413      	add	r3, r2
 800d856:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d85a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d005      	beq.n	800d86e <find_volume+0x162>
 800d862:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d864:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d866:	f7ff fefb 	bl	800d660 <check_fs>
 800d86a:	4603      	mov	r3, r0
 800d86c:	e000      	b.n	800d870 <find_volume+0x164>
 800d86e:	2303      	movs	r3, #3
 800d870:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d905      	bls.n	800d888 <find_volume+0x17c>
 800d87c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d87e:	3301      	adds	r3, #1
 800d880:	643b      	str	r3, [r7, #64]	; 0x40
 800d882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d884:	2b03      	cmp	r3, #3
 800d886:	d9e1      	bls.n	800d84c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d88c:	2b04      	cmp	r3, #4
 800d88e:	d101      	bne.n	800d894 <find_volume+0x188>
 800d890:	2301      	movs	r3, #1
 800d892:	e180      	b.n	800db96 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d901      	bls.n	800d8a0 <find_volume+0x194>
 800d89c:	230d      	movs	r3, #13
 800d89e:	e17a      	b.n	800db96 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a2:	3334      	adds	r3, #52	; 0x34
 800d8a4:	330b      	adds	r3, #11
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fd feaa 	bl	800b600 <ld_word>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8b2:	d001      	beq.n	800d8b8 <find_volume+0x1ac>
 800d8b4:	230d      	movs	r3, #13
 800d8b6:	e16e      	b.n	800db96 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ba:	3334      	adds	r3, #52	; 0x34
 800d8bc:	3316      	adds	r3, #22
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fd fe9e 	bl	800b600 <ld_word>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d106      	bne.n	800d8dc <find_volume+0x1d0>
 800d8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d0:	3334      	adds	r3, #52	; 0x34
 800d8d2:	3324      	adds	r3, #36	; 0x24
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7fd feab 	bl	800b630 <ld_dword>
 800d8da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d8e0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ee:	789b      	ldrb	r3, [r3, #2]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d005      	beq.n	800d900 <find_volume+0x1f4>
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f6:	789b      	ldrb	r3, [r3, #2]
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d001      	beq.n	800d900 <find_volume+0x1f4>
 800d8fc:	230d      	movs	r3, #13
 800d8fe:	e14a      	b.n	800db96 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	789b      	ldrb	r3, [r3, #2]
 800d904:	461a      	mov	r2, r3
 800d906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d908:	fb02 f303 	mul.w	r3, r2, r3
 800d90c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d914:	b29a      	uxth	r2, r3
 800d916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d918:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91c:	895b      	ldrh	r3, [r3, #10]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d008      	beq.n	800d934 <find_volume+0x228>
 800d922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d924:	895b      	ldrh	r3, [r3, #10]
 800d926:	461a      	mov	r2, r3
 800d928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92a:	895b      	ldrh	r3, [r3, #10]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	4013      	ands	r3, r2
 800d930:	2b00      	cmp	r3, #0
 800d932:	d001      	beq.n	800d938 <find_volume+0x22c>
 800d934:	230d      	movs	r3, #13
 800d936:	e12e      	b.n	800db96 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93a:	3334      	adds	r3, #52	; 0x34
 800d93c:	3311      	adds	r3, #17
 800d93e:	4618      	mov	r0, r3
 800d940:	f7fd fe5e 	bl	800b600 <ld_word>
 800d944:	4603      	mov	r3, r0
 800d946:	461a      	mov	r2, r3
 800d948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94e:	891b      	ldrh	r3, [r3, #8]
 800d950:	f003 030f 	and.w	r3, r3, #15
 800d954:	b29b      	uxth	r3, r3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <find_volume+0x252>
 800d95a:	230d      	movs	r3, #13
 800d95c:	e11b      	b.n	800db96 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d960:	3334      	adds	r3, #52	; 0x34
 800d962:	3313      	adds	r3, #19
 800d964:	4618      	mov	r0, r3
 800d966:	f7fd fe4b 	bl	800b600 <ld_word>
 800d96a:	4603      	mov	r3, r0
 800d96c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d970:	2b00      	cmp	r3, #0
 800d972:	d106      	bne.n	800d982 <find_volume+0x276>
 800d974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d976:	3334      	adds	r3, #52	; 0x34
 800d978:	3320      	adds	r3, #32
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fd fe58 	bl	800b630 <ld_dword>
 800d980:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d984:	3334      	adds	r3, #52	; 0x34
 800d986:	330e      	adds	r3, #14
 800d988:	4618      	mov	r0, r3
 800d98a:	f7fd fe39 	bl	800b600 <ld_word>
 800d98e:	4603      	mov	r3, r0
 800d990:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d992:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d994:	2b00      	cmp	r3, #0
 800d996:	d101      	bne.n	800d99c <find_volume+0x290>
 800d998:	230d      	movs	r3, #13
 800d99a:	e0fc      	b.n	800db96 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d99c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9a0:	4413      	add	r3, r2
 800d9a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9a4:	8912      	ldrh	r2, [r2, #8]
 800d9a6:	0912      	lsrs	r2, r2, #4
 800d9a8:	b292      	uxth	r2, r2
 800d9aa:	4413      	add	r3, r2
 800d9ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d9ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d201      	bcs.n	800d9ba <find_volume+0x2ae>
 800d9b6:	230d      	movs	r3, #13
 800d9b8:	e0ed      	b.n	800db96 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d9ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9c2:	8952      	ldrh	r2, [r2, #10]
 800d9c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d103      	bne.n	800d9d8 <find_volume+0x2cc>
 800d9d0:	230d      	movs	r3, #13
 800d9d2:	e0e0      	b.n	800db96 <find_volume+0x48a>
 800d9d4:	20000768 	.word	0x20000768
		fmt = FS_FAT32;
 800d9d8:	2303      	movs	r3, #3
 800d9da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d802      	bhi.n	800d9ee <find_volume+0x2e2>
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d802      	bhi.n	800d9fe <find_volume+0x2f2>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	1c9a      	adds	r2, r3, #2
 800da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da04:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800da06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da0a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800da0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800da0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da10:	441a      	add	r2, r3
 800da12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da14:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800da16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1a:	441a      	add	r2, r3
 800da1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800da20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da24:	2b03      	cmp	r3, #3
 800da26:	d11e      	bne.n	800da66 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800da28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2a:	3334      	adds	r3, #52	; 0x34
 800da2c:	332a      	adds	r3, #42	; 0x2a
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fd fde6 	bl	800b600 <ld_word>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <find_volume+0x332>
 800da3a:	230d      	movs	r3, #13
 800da3c:	e0ab      	b.n	800db96 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800da3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da40:	891b      	ldrh	r3, [r3, #8]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d001      	beq.n	800da4a <find_volume+0x33e>
 800da46:	230d      	movs	r3, #13
 800da48:	e0a5      	b.n	800db96 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800da4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4c:	3334      	adds	r3, #52	; 0x34
 800da4e:	332c      	adds	r3, #44	; 0x2c
 800da50:	4618      	mov	r0, r3
 800da52:	f7fd fded 	bl	800b630 <ld_dword>
 800da56:	4602      	mov	r2, r0
 800da58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800da5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5e:	699b      	ldr	r3, [r3, #24]
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	647b      	str	r3, [r7, #68]	; 0x44
 800da64:	e01f      	b.n	800daa6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800da66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da68:	891b      	ldrh	r3, [r3, #8]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <find_volume+0x366>
 800da6e:	230d      	movs	r3, #13
 800da70:	e091      	b.n	800db96 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da78:	441a      	add	r2, r3
 800da7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800da7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da82:	2b02      	cmp	r3, #2
 800da84:	d103      	bne.n	800da8e <find_volume+0x382>
 800da86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da88:	699b      	ldr	r3, [r3, #24]
 800da8a:	005b      	lsls	r3, r3, #1
 800da8c:	e00a      	b.n	800daa4 <find_volume+0x398>
 800da8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da90:	699a      	ldr	r2, [r3, #24]
 800da92:	4613      	mov	r3, r2
 800da94:	005b      	lsls	r3, r3, #1
 800da96:	4413      	add	r3, r2
 800da98:	085a      	lsrs	r2, r3, #1
 800da9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800daa4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800daa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa8:	69da      	ldr	r2, [r3, #28]
 800daaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dab0:	0a5b      	lsrs	r3, r3, #9
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d201      	bcs.n	800daba <find_volume+0x3ae>
 800dab6:	230d      	movs	r3, #13
 800dab8:	e06d      	b.n	800db96 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800daba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabc:	f04f 32ff 	mov.w	r2, #4294967295
 800dac0:	615a      	str	r2, [r3, #20]
 800dac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac4:	695a      	ldr	r2, [r3, #20]
 800dac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800daca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dacc:	2280      	movs	r2, #128	; 0x80
 800dace:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dad4:	2b03      	cmp	r3, #3
 800dad6:	d149      	bne.n	800db6c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dada:	3334      	adds	r3, #52	; 0x34
 800dadc:	3330      	adds	r3, #48	; 0x30
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fd fd8e 	bl	800b600 <ld_word>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d140      	bne.n	800db6c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800daea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daec:	3301      	adds	r3, #1
 800daee:	4619      	mov	r1, r3
 800daf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800daf2:	f7fe f835 	bl	800bb60 <move_window>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d137      	bne.n	800db6c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800dafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafe:	2200      	movs	r2, #0
 800db00:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800db02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db04:	3334      	adds	r3, #52	; 0x34
 800db06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fd fd78 	bl	800b600 <ld_word>
 800db10:	4603      	mov	r3, r0
 800db12:	461a      	mov	r2, r3
 800db14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800db18:	429a      	cmp	r2, r3
 800db1a:	d127      	bne.n	800db6c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800db1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1e:	3334      	adds	r3, #52	; 0x34
 800db20:	4618      	mov	r0, r3
 800db22:	f7fd fd85 	bl	800b630 <ld_dword>
 800db26:	4603      	mov	r3, r0
 800db28:	4a1d      	ldr	r2, [pc, #116]	; (800dba0 <find_volume+0x494>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d11e      	bne.n	800db6c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800db2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db30:	3334      	adds	r3, #52	; 0x34
 800db32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800db36:	4618      	mov	r0, r3
 800db38:	f7fd fd7a 	bl	800b630 <ld_dword>
 800db3c:	4603      	mov	r3, r0
 800db3e:	4a19      	ldr	r2, [pc, #100]	; (800dba4 <find_volume+0x498>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d113      	bne.n	800db6c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800db44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db46:	3334      	adds	r3, #52	; 0x34
 800db48:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fd fd6f 	bl	800b630 <ld_dword>
 800db52:	4602      	mov	r2, r0
 800db54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db56:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800db58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5a:	3334      	adds	r3, #52	; 0x34
 800db5c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800db60:	4618      	mov	r0, r3
 800db62:	f7fd fd65 	bl	800b630 <ld_dword>
 800db66:	4602      	mov	r2, r0
 800db68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800db6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800db72:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800db74:	4b0c      	ldr	r3, [pc, #48]	; (800dba8 <find_volume+0x49c>)
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	3301      	adds	r3, #1
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	4b0a      	ldr	r3, [pc, #40]	; (800dba8 <find_volume+0x49c>)
 800db7e:	801a      	strh	r2, [r3, #0]
 800db80:	4b09      	ldr	r3, [pc, #36]	; (800dba8 <find_volume+0x49c>)
 800db82:	881a      	ldrh	r2, [r3, #0]
 800db84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db86:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800db88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8a:	4a08      	ldr	r2, [pc, #32]	; (800dbac <find_volume+0x4a0>)
 800db8c:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800db8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db90:	f7fd ff7e 	bl	800ba90 <clear_lock>
#endif
	return FR_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3758      	adds	r7, #88	; 0x58
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	41615252 	.word	0x41615252
 800dba4:	61417272 	.word	0x61417272
 800dba8:	2000076c 	.word	0x2000076c
 800dbac:	20000790 	.word	0x20000790

0800dbb0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dbba:	2309      	movs	r3, #9
 800dbbc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d01c      	beq.n	800dbfe <validate+0x4e>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d018      	beq.n	800dbfe <validate+0x4e>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d013      	beq.n	800dbfe <validate+0x4e>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	889a      	ldrh	r2, [r3, #4]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	88db      	ldrh	r3, [r3, #6]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d10c      	bne.n	800dbfe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	785b      	ldrb	r3, [r3, #1]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7fd fc6a 	bl	800b4c4 <disk_status>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	f003 0301 	and.w	r3, r3, #1
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d101      	bne.n	800dbfe <validate+0x4e>
			res = FR_OK;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dbfe:	7bfb      	ldrb	r3, [r7, #15]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d102      	bne.n	800dc0a <validate+0x5a>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	e000      	b.n	800dc0c <validate+0x5c>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	683a      	ldr	r2, [r7, #0]
 800dc0e:	6013      	str	r3, [r2, #0]
	return res;
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3710      	adds	r7, #16
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
	...

0800dc1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b088      	sub	sp, #32
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	4613      	mov	r3, r2
 800dc28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dc2e:	f107 0310 	add.w	r3, r7, #16
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7ff fccf 	bl	800d5d6 <get_ldnumber>
 800dc38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	da01      	bge.n	800dc44 <f_mount+0x28>
 800dc40:	230b      	movs	r3, #11
 800dc42:	e02b      	b.n	800dc9c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dc44:	4a17      	ldr	r2, [pc, #92]	; (800dca4 <f_mount+0x88>)
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d005      	beq.n	800dc60 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dc54:	69b8      	ldr	r0, [r7, #24]
 800dc56:	f7fd ff1b 	bl	800ba90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dc5a:	69bb      	ldr	r3, [r7, #24]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d002      	beq.n	800dc6c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	490d      	ldr	r1, [pc, #52]	; (800dca4 <f_mount+0x88>)
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d002      	beq.n	800dc82 <f_mount+0x66>
 800dc7c:	79fb      	ldrb	r3, [r7, #7]
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d001      	beq.n	800dc86 <f_mount+0x6a>
 800dc82:	2300      	movs	r3, #0
 800dc84:	e00a      	b.n	800dc9c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dc86:	f107 010c 	add.w	r1, r7, #12
 800dc8a:	f107 0308 	add.w	r3, r7, #8
 800dc8e:	2200      	movs	r2, #0
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7ff fd3b 	bl	800d70c <find_volume>
 800dc96:	4603      	mov	r3, r0
 800dc98:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3720      	adds	r7, #32
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	20000768 	.word	0x20000768

0800dca8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b09a      	sub	sp, #104	; 0x68
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d101      	bne.n	800dcc0 <f_open+0x18>
 800dcbc:	2309      	movs	r3, #9
 800dcbe:	e1ad      	b.n	800e01c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dcc0:	79fb      	ldrb	r3, [r7, #7]
 800dcc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcc6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dcc8:	79fa      	ldrb	r2, [r7, #7]
 800dcca:	f107 0110 	add.w	r1, r7, #16
 800dcce:	f107 0308 	add.w	r3, r7, #8
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff fd1a 	bl	800d70c <find_volume>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800dcde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f040 8191 	bne.w	800e00a <f_open+0x362>
		dj.obj.fs = fs;
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	f107 0314 	add.w	r3, r7, #20
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7ff fbfd 	bl	800d4f4 <follow_path>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dd00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d11a      	bne.n	800dd3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dd08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd0c:	b25b      	sxtb	r3, r3
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	da03      	bge.n	800dd1a <f_open+0x72>
				res = FR_INVALID_NAME;
 800dd12:	2306      	movs	r3, #6
 800dd14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dd18:	e011      	b.n	800dd3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd1a:	79fb      	ldrb	r3, [r7, #7]
 800dd1c:	f023 0301 	bic.w	r3, r3, #1
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	bf14      	ite	ne
 800dd24:	2301      	movne	r3, #1
 800dd26:	2300      	moveq	r3, #0
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	f107 0314 	add.w	r3, r7, #20
 800dd30:	4611      	mov	r1, r2
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fd fd64 	bl	800b800 <chk_lock>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dd3e:	79fb      	ldrb	r3, [r7, #7]
 800dd40:	f003 031c 	and.w	r3, r3, #28
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d07f      	beq.n	800de48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dd48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d017      	beq.n	800dd80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dd50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd54:	2b04      	cmp	r3, #4
 800dd56:	d10e      	bne.n	800dd76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dd58:	f7fd fdae 	bl	800b8b8 <enq_lock>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d006      	beq.n	800dd70 <f_open+0xc8>
 800dd62:	f107 0314 	add.w	r3, r7, #20
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fe ff94 	bl	800cc94 <dir_register>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	e000      	b.n	800dd72 <f_open+0xca>
 800dd70:	2312      	movs	r3, #18
 800dd72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dd76:	79fb      	ldrb	r3, [r7, #7]
 800dd78:	f043 0308 	orr.w	r3, r3, #8
 800dd7c:	71fb      	strb	r3, [r7, #7]
 800dd7e:	e010      	b.n	800dda2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dd80:	7ebb      	ldrb	r3, [r7, #26]
 800dd82:	f003 0311 	and.w	r3, r3, #17
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d003      	beq.n	800dd92 <f_open+0xea>
					res = FR_DENIED;
 800dd8a:	2307      	movs	r3, #7
 800dd8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dd90:	e007      	b.n	800dda2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dd92:	79fb      	ldrb	r3, [r7, #7]
 800dd94:	f003 0304 	and.w	r3, r3, #4
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d002      	beq.n	800dda2 <f_open+0xfa>
 800dd9c:	2308      	movs	r3, #8
 800dd9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dda2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d168      	bne.n	800de7c <f_open+0x1d4>
 800ddaa:	79fb      	ldrb	r3, [r7, #7]
 800ddac:	f003 0308 	and.w	r3, r3, #8
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d063      	beq.n	800de7c <f_open+0x1d4>
				dw = GET_FATTIME();
 800ddb4:	f7fb ff92 	bl	8009cdc <get_fattime>
 800ddb8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ddba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddbc:	330e      	adds	r3, #14
 800ddbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fd fc73 	bl	800b6ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ddc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddc8:	3316      	adds	r3, #22
 800ddca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fd fc6d 	bl	800b6ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ddd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd4:	330b      	adds	r3, #11
 800ddd6:	2220      	movs	r2, #32
 800ddd8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddde:	4611      	mov	r1, r2
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7fe fbc4 	bl	800c56e <ld_clust>
 800dde6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ddec:	2200      	movs	r2, #0
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fe fbdc 	bl	800c5ac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ddf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddf6:	331c      	adds	r3, #28
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7fd fc56 	bl	800b6ac <st_dword>
					fs->wflag = 1;
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	2201      	movs	r2, #1
 800de04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800de06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d037      	beq.n	800de7c <f_open+0x1d4>
						dw = fs->winsect;
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de10:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800de12:	f107 0314 	add.w	r3, r7, #20
 800de16:	2200      	movs	r2, #0
 800de18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fe f8ef 	bl	800bffe <remove_chain>
 800de20:	4603      	mov	r3, r0
 800de22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800de26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d126      	bne.n	800de7c <f_open+0x1d4>
							res = move_window(fs, dw);
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de32:	4618      	mov	r0, r3
 800de34:	f7fd fe94 	bl	800bb60 <move_window>
 800de38:	4603      	mov	r3, r0
 800de3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de42:	3a01      	subs	r2, #1
 800de44:	611a      	str	r2, [r3, #16]
 800de46:	e019      	b.n	800de7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800de48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d115      	bne.n	800de7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800de50:	7ebb      	ldrb	r3, [r7, #26]
 800de52:	f003 0310 	and.w	r3, r3, #16
 800de56:	2b00      	cmp	r3, #0
 800de58:	d003      	beq.n	800de62 <f_open+0x1ba>
					res = FR_NO_FILE;
 800de5a:	2304      	movs	r3, #4
 800de5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800de60:	e00c      	b.n	800de7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800de62:	79fb      	ldrb	r3, [r7, #7]
 800de64:	f003 0302 	and.w	r3, r3, #2
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d007      	beq.n	800de7c <f_open+0x1d4>
 800de6c:	7ebb      	ldrb	r3, [r7, #26]
 800de6e:	f003 0301 	and.w	r3, r3, #1
 800de72:	2b00      	cmp	r3, #0
 800de74:	d002      	beq.n	800de7c <f_open+0x1d4>
						res = FR_DENIED;
 800de76:	2307      	movs	r3, #7
 800de78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800de7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de80:	2b00      	cmp	r3, #0
 800de82:	d128      	bne.n	800ded6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800de84:	79fb      	ldrb	r3, [r7, #7]
 800de86:	f003 0308 	and.w	r3, r3, #8
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d003      	beq.n	800de96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800de8e:	79fb      	ldrb	r3, [r7, #7]
 800de90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800de9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dea4:	79fb      	ldrb	r3, [r7, #7]
 800dea6:	f023 0301 	bic.w	r3, r3, #1
 800deaa:	2b00      	cmp	r3, #0
 800deac:	bf14      	ite	ne
 800deae:	2301      	movne	r3, #1
 800deb0:	2300      	moveq	r3, #0
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	461a      	mov	r2, r3
 800deb6:	f107 0314 	add.w	r3, r7, #20
 800deba:	4611      	mov	r1, r2
 800debc:	4618      	mov	r0, r3
 800debe:	f7fd fd1d 	bl	800b8fc <inc_lock>
 800dec2:	4602      	mov	r2, r0
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	691b      	ldr	r3, [r3, #16]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d102      	bne.n	800ded6 <f_open+0x22e>
 800ded0:	2302      	movs	r3, #2
 800ded2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ded6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800deda:	2b00      	cmp	r3, #0
 800dedc:	f040 8095 	bne.w	800e00a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dee4:	4611      	mov	r1, r2
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fe fb41 	bl	800c56e <ld_clust>
 800deec:	4602      	mov	r2, r0
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800def2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800def4:	331c      	adds	r3, #28
 800def6:	4618      	mov	r0, r3
 800def8:	f7fd fb9a 	bl	800b630 <ld_dword>
 800defc:	4602      	mov	r2, r0
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2200      	movs	r2, #0
 800df06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800df08:	693a      	ldr	r2, [r7, #16]
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	88da      	ldrh	r2, [r3, #6]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	79fa      	ldrb	r2, [r7, #7]
 800df1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2200      	movs	r2, #0
 800df20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2200      	movs	r2, #0
 800df26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2200      	movs	r2, #0
 800df2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	3330      	adds	r3, #48	; 0x30
 800df32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df36:	2100      	movs	r1, #0
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fd fc04 	bl	800b746 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800df3e:	79fb      	ldrb	r3, [r7, #7]
 800df40:	f003 0320 	and.w	r3, r3, #32
 800df44:	2b00      	cmp	r3, #0
 800df46:	d060      	beq.n	800e00a <f_open+0x362>
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d05c      	beq.n	800e00a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	68da      	ldr	r2, [r3, #12]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	895b      	ldrh	r3, [r3, #10]
 800df5c:	025b      	lsls	r3, r3, #9
 800df5e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df6c:	e016      	b.n	800df9c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800df72:	4618      	mov	r0, r3
 800df74:	f7fd feaf 	bl	800bcd6 <get_fat>
 800df78:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800df7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d802      	bhi.n	800df86 <f_open+0x2de>
 800df80:	2302      	movs	r3, #2
 800df82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800df86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df8c:	d102      	bne.n	800df94 <f_open+0x2ec>
 800df8e:	2301      	movs	r3, #1
 800df90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df98:	1ad3      	subs	r3, r2, r3
 800df9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d103      	bne.n	800dfac <f_open+0x304>
 800dfa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dfa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d8e0      	bhi.n	800df6e <f_open+0x2c6>
				}
				fp->clust = clst;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dfb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d127      	bne.n	800e00a <f_open+0x362>
 800dfba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d022      	beq.n	800e00a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fd fe65 	bl	800bc98 <clust2sect>
 800dfce:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dfd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d103      	bne.n	800dfde <f_open+0x336>
						res = FR_INT_ERR;
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dfdc:	e015      	b.n	800e00a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dfde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfe0:	0a5a      	lsrs	r2, r3, #9
 800dfe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfe4:	441a      	add	r2, r3
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	7858      	ldrb	r0, [r3, #1]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6a1a      	ldr	r2, [r3, #32]
 800dff8:	2301      	movs	r3, #1
 800dffa:	f7fd faa3 	bl	800b544 <disk_read>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <f_open+0x362>
 800e004:	2301      	movs	r3, #1
 800e006:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e00a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d002      	beq.n	800e018 <f_open+0x370>
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e018:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3768      	adds	r7, #104	; 0x68
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b08e      	sub	sp, #56	; 0x38
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
 800e030:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	2200      	movs	r2, #0
 800e03a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f107 0214 	add.w	r2, r7, #20
 800e042:	4611      	mov	r1, r2
 800e044:	4618      	mov	r0, r3
 800e046:	f7ff fdb3 	bl	800dbb0 <validate>
 800e04a:	4603      	mov	r3, r0
 800e04c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e050:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e054:	2b00      	cmp	r3, #0
 800e056:	d107      	bne.n	800e068 <f_read+0x44>
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	7d5b      	ldrb	r3, [r3, #21]
 800e05c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e060:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <f_read+0x4a>
 800e068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e06c:	e115      	b.n	800e29a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	7d1b      	ldrb	r3, [r3, #20]
 800e072:	f003 0301 	and.w	r3, r3, #1
 800e076:	2b00      	cmp	r3, #0
 800e078:	d101      	bne.n	800e07e <f_read+0x5a>
 800e07a:	2307      	movs	r3, #7
 800e07c:	e10d      	b.n	800e29a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	68da      	ldr	r2, [r3, #12]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	699b      	ldr	r3, [r3, #24]
 800e086:	1ad3      	subs	r3, r2, r3
 800e088:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e08a:	687a      	ldr	r2, [r7, #4]
 800e08c:	6a3b      	ldr	r3, [r7, #32]
 800e08e:	429a      	cmp	r2, r3
 800e090:	f240 80fe 	bls.w	800e290 <f_read+0x26c>
 800e094:	6a3b      	ldr	r3, [r7, #32]
 800e096:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e098:	e0fa      	b.n	800e290 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	699b      	ldr	r3, [r3, #24]
 800e09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	f040 80c6 	bne.w	800e234 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	0a5b      	lsrs	r3, r3, #9
 800e0ae:	697a      	ldr	r2, [r7, #20]
 800e0b0:	8952      	ldrh	r2, [r2, #10]
 800e0b2:	3a01      	subs	r2, #1
 800e0b4:	4013      	ands	r3, r2
 800e0b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d12f      	bne.n	800e11e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	699b      	ldr	r3, [r3, #24]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d103      	bne.n	800e0ce <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	633b      	str	r3, [r7, #48]	; 0x30
 800e0cc:	e013      	b.n	800e0f6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d007      	beq.n	800e0e6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	699b      	ldr	r3, [r3, #24]
 800e0da:	4619      	mov	r1, r3
 800e0dc:	68f8      	ldr	r0, [r7, #12]
 800e0de:	f7fe f88b 	bl	800c1f8 <clmt_clust>
 800e0e2:	6338      	str	r0, [r7, #48]	; 0x30
 800e0e4:	e007      	b.n	800e0f6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	69db      	ldr	r3, [r3, #28]
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	4610      	mov	r0, r2
 800e0f0:	f7fd fdf1 	bl	800bcd6 <get_fat>
 800e0f4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d804      	bhi.n	800e106 <f_read+0xe2>
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2202      	movs	r2, #2
 800e100:	755a      	strb	r2, [r3, #21]
 800e102:	2302      	movs	r3, #2
 800e104:	e0c9      	b.n	800e29a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e10c:	d104      	bne.n	800e118 <f_read+0xf4>
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2201      	movs	r2, #1
 800e112:	755a      	strb	r2, [r3, #21]
 800e114:	2301      	movs	r3, #1
 800e116:	e0c0      	b.n	800e29a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e11c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	69db      	ldr	r3, [r3, #28]
 800e124:	4619      	mov	r1, r3
 800e126:	4610      	mov	r0, r2
 800e128:	f7fd fdb6 	bl	800bc98 <clust2sect>
 800e12c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d104      	bne.n	800e13e <f_read+0x11a>
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2202      	movs	r2, #2
 800e138:	755a      	strb	r2, [r3, #21]
 800e13a:	2302      	movs	r3, #2
 800e13c:	e0ad      	b.n	800e29a <f_read+0x276>
			sect += csect;
 800e13e:	69ba      	ldr	r2, [r7, #24]
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	4413      	add	r3, r2
 800e144:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	0a5b      	lsrs	r3, r3, #9
 800e14a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d039      	beq.n	800e1c6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e152:	69fa      	ldr	r2, [r7, #28]
 800e154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e156:	4413      	add	r3, r2
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	8952      	ldrh	r2, [r2, #10]
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d905      	bls.n	800e16c <f_read+0x148>
					cc = fs->csize - csect;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	895b      	ldrh	r3, [r3, #10]
 800e164:	461a      	mov	r2, r3
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	1ad3      	subs	r3, r2, r3
 800e16a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	7858      	ldrb	r0, [r3, #1]
 800e170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e172:	69ba      	ldr	r2, [r7, #24]
 800e174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e176:	f7fd f9e5 	bl	800b544 <disk_read>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d004      	beq.n	800e18a <f_read+0x166>
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2201      	movs	r2, #1
 800e184:	755a      	strb	r2, [r3, #21]
 800e186:	2301      	movs	r3, #1
 800e188:	e087      	b.n	800e29a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	7d1b      	ldrb	r3, [r3, #20]
 800e18e:	b25b      	sxtb	r3, r3
 800e190:	2b00      	cmp	r3, #0
 800e192:	da14      	bge.n	800e1be <f_read+0x19a>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	6a1a      	ldr	r2, [r3, #32]
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	1ad3      	subs	r3, r2, r3
 800e19c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d90d      	bls.n	800e1be <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	6a1a      	ldr	r2, [r3, #32]
 800e1a6:	69bb      	ldr	r3, [r7, #24]
 800e1a8:	1ad3      	subs	r3, r2, r3
 800e1aa:	025b      	lsls	r3, r3, #9
 800e1ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ae:	18d0      	adds	r0, r2, r3
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	3330      	adds	r3, #48	; 0x30
 800e1b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	f7fd faa3 	bl	800b704 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c0:	025b      	lsls	r3, r3, #9
 800e1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e1c4:	e050      	b.n	800e268 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6a1b      	ldr	r3, [r3, #32]
 800e1ca:	69ba      	ldr	r2, [r7, #24]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d02e      	beq.n	800e22e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	7d1b      	ldrb	r3, [r3, #20]
 800e1d4:	b25b      	sxtb	r3, r3
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	da18      	bge.n	800e20c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	7858      	ldrb	r0, [r3, #1]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6a1a      	ldr	r2, [r3, #32]
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	f7fd f9cb 	bl	800b584 <disk_write>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d004      	beq.n	800e1fe <f_read+0x1da>
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	755a      	strb	r2, [r3, #21]
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e04d      	b.n	800e29a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	7d1b      	ldrb	r3, [r3, #20]
 800e202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e206:	b2da      	uxtb	r2, r3
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	7858      	ldrb	r0, [r3, #1]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e216:	2301      	movs	r3, #1
 800e218:	69ba      	ldr	r2, [r7, #24]
 800e21a:	f7fd f993 	bl	800b544 <disk_read>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d004      	beq.n	800e22e <f_read+0x20a>
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2201      	movs	r2, #1
 800e228:	755a      	strb	r2, [r3, #21]
 800e22a:	2301      	movs	r3, #1
 800e22c:	e035      	b.n	800e29a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	69ba      	ldr	r2, [r7, #24]
 800e232:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	699b      	ldr	r3, [r3, #24]
 800e238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e23c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e240:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	429a      	cmp	r2, r3
 800e248:	d901      	bls.n	800e24e <f_read+0x22a>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	699b      	ldr	r3, [r3, #24]
 800e258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e25c:	4413      	add	r3, r2
 800e25e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e260:	4619      	mov	r1, r3
 800e262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e264:	f7fd fa4e 	bl	800b704 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	4413      	add	r3, r2
 800e26e:	627b      	str	r3, [r7, #36]	; 0x24
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	699a      	ldr	r2, [r3, #24]
 800e274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e276:	441a      	add	r2, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	619a      	str	r2, [r3, #24]
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e282:	441a      	add	r2, r3
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	601a      	str	r2, [r3, #0]
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	f47f af01 	bne.w	800e09a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e298:	2300      	movs	r3, #0
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3738      	adds	r7, #56	; 0x38
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b086      	sub	sp, #24
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f107 0208 	add.w	r2, r7, #8
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7ff fc7c 	bl	800dbb0 <validate>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e2bc:	7dfb      	ldrb	r3, [r7, #23]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d168      	bne.n	800e394 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	7d1b      	ldrb	r3, [r3, #20]
 800e2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d062      	beq.n	800e394 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	7d1b      	ldrb	r3, [r3, #20]
 800e2d2:	b25b      	sxtb	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	da15      	bge.n	800e304 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	7858      	ldrb	r0, [r3, #1]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6a1a      	ldr	r2, [r3, #32]
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	f7fd f94c 	bl	800b584 <disk_write>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d001      	beq.n	800e2f6 <f_sync+0x54>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e04f      	b.n	800e396 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	7d1b      	ldrb	r3, [r3, #20]
 800e2fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e304:	f7fb fcea 	bl	8009cdc <get_fattime>
 800e308:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e310:	4619      	mov	r1, r3
 800e312:	4610      	mov	r0, r2
 800e314:	f7fd fc24 	bl	800bb60 <move_window>
 800e318:	4603      	mov	r3, r0
 800e31a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e31c:	7dfb      	ldrb	r3, [r7, #23]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d138      	bne.n	800e394 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e326:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	330b      	adds	r3, #11
 800e32c:	781a      	ldrb	r2, [r3, #0]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	330b      	adds	r3, #11
 800e332:	f042 0220 	orr.w	r2, r2, #32
 800e336:	b2d2      	uxtb	r2, r2
 800e338:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6818      	ldr	r0, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	461a      	mov	r2, r3
 800e344:	68f9      	ldr	r1, [r7, #12]
 800e346:	f7fe f931 	bl	800c5ac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f103 021c 	add.w	r2, r3, #28
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	4619      	mov	r1, r3
 800e356:	4610      	mov	r0, r2
 800e358:	f7fd f9a8 	bl	800b6ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	3316      	adds	r3, #22
 800e360:	6939      	ldr	r1, [r7, #16]
 800e362:	4618      	mov	r0, r3
 800e364:	f7fd f9a2 	bl	800b6ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	3312      	adds	r3, #18
 800e36c:	2100      	movs	r1, #0
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fd f981 	bl	800b676 <st_word>
					fs->wflag = 1;
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	2201      	movs	r2, #1
 800e378:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fd fc1d 	bl	800bbbc <sync_fs>
 800e382:	4603      	mov	r3, r0
 800e384:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	7d1b      	ldrb	r3, [r3, #20]
 800e38a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e38e:	b2da      	uxtb	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e394:	7dfb      	ldrb	r3, [r7, #23]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3718      	adds	r7, #24
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b084      	sub	sp, #16
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f7ff ff7b 	bl	800e2a2 <f_sync>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e3b0:	7bfb      	ldrb	r3, [r7, #15]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d118      	bne.n	800e3e8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f107 0208 	add.w	r2, r7, #8
 800e3bc:	4611      	mov	r1, r2
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7ff fbf6 	bl	800dbb0 <validate>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e3c8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10c      	bne.n	800e3e8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	691b      	ldr	r3, [r3, #16]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fd fb20 	bl	800ba18 <dec_lock>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e3dc:	7bfb      	ldrb	r3, [r7, #15]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d102      	bne.n	800e3e8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3710      	adds	r7, #16
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b086      	sub	sp, #24
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
 800e3fa:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d101      	bne.n	800e406 <f_opendir+0x14>
 800e402:	2309      	movs	r3, #9
 800e404:	e064      	b.n	800e4d0 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e40a:	f107 010c 	add.w	r1, r7, #12
 800e40e:	463b      	mov	r3, r7
 800e410:	2200      	movs	r2, #0
 800e412:	4618      	mov	r0, r3
 800e414:	f7ff f97a 	bl	800d70c <find_volume>
 800e418:	4603      	mov	r3, r0
 800e41a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e41c:	7dfb      	ldrb	r3, [r7, #23]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d14f      	bne.n	800e4c2 <f_opendir+0xd0>
		obj->fs = fs;
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	4619      	mov	r1, r3
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7ff f861 	bl	800d4f4 <follow_path>
 800e432:	4603      	mov	r3, r0
 800e434:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e436:	7dfb      	ldrb	r3, [r7, #23]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d13d      	bne.n	800e4b8 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e442:	b25b      	sxtb	r3, r3
 800e444:	2b00      	cmp	r3, #0
 800e446:	db12      	blt.n	800e46e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	799b      	ldrb	r3, [r3, #6]
 800e44c:	f003 0310 	and.w	r3, r3, #16
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00a      	beq.n	800e46a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e454:	68fa      	ldr	r2, [r7, #12]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6a1b      	ldr	r3, [r3, #32]
 800e45a:	4619      	mov	r1, r3
 800e45c:	4610      	mov	r0, r2
 800e45e:	f7fe f886 	bl	800c56e <ld_clust>
 800e462:	4602      	mov	r2, r0
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	609a      	str	r2, [r3, #8]
 800e468:	e001      	b.n	800e46e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e46a:	2305      	movs	r3, #5
 800e46c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e46e:	7dfb      	ldrb	r3, [r7, #23]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d121      	bne.n	800e4b8 <f_opendir+0xc6>
				obj->id = fs->id;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	88da      	ldrh	r2, [r3, #6]
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e47c:	2100      	movs	r1, #0
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7fd feee 	bl	800c260 <dir_sdi>
 800e484:	4603      	mov	r3, r0
 800e486:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e488:	7dfb      	ldrb	r3, [r7, #23]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d114      	bne.n	800e4b8 <f_opendir+0xc6>
					if (obj->sclust) {
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00d      	beq.n	800e4b2 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e496:	2100      	movs	r1, #0
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7fd fa2f 	bl	800b8fc <inc_lock>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	691b      	ldr	r3, [r3, #16]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d105      	bne.n	800e4b8 <f_opendir+0xc6>
 800e4ac:	2312      	movs	r3, #18
 800e4ae:	75fb      	strb	r3, [r7, #23]
 800e4b0:	e002      	b.n	800e4b8 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e4b8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ba:	2b04      	cmp	r3, #4
 800e4bc:	d101      	bne.n	800e4c2 <f_opendir+0xd0>
 800e4be:	2305      	movs	r3, #5
 800e4c0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e4c2:	7dfb      	ldrb	r3, [r7, #23]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d002      	beq.n	800e4ce <f_opendir+0xdc>
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3718      	adds	r7, #24
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f107 0208 	add.w	r2, r7, #8
 800e4e8:	4611      	mov	r1, r2
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7ff fb60 	bl	800dbb0 <validate>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e4f4:	7bfb      	ldrb	r3, [r7, #15]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d126      	bne.n	800e548 <f_readdir+0x70>
		if (!fno) {
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d106      	bne.n	800e50e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e500:	2100      	movs	r1, #0
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7fd feac 	bl	800c260 <dir_sdi>
 800e508:	4603      	mov	r3, r0
 800e50a:	73fb      	strb	r3, [r7, #15]
 800e50c:	e01c      	b.n	800e548 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e50e:	2100      	movs	r1, #0
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7fe fa58 	bl	800c9c6 <dir_read>
 800e516:	4603      	mov	r3, r0
 800e518:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e51a:	7bfb      	ldrb	r3, [r7, #15]
 800e51c:	2b04      	cmp	r3, #4
 800e51e:	d101      	bne.n	800e524 <f_readdir+0x4c>
 800e520:	2300      	movs	r3, #0
 800e522:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e524:	7bfb      	ldrb	r3, [r7, #15]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d10e      	bne.n	800e548 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e52a:	6839      	ldr	r1, [r7, #0]
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7fe fca9 	bl	800ce84 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e532:	2100      	movs	r1, #0
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7fd ff0e 	bl	800c356 <dir_next>
 800e53a:	4603      	mov	r3, r0
 800e53c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e53e:	7bfb      	ldrb	r3, [r7, #15]
 800e540:	2b04      	cmp	r3, #4
 800e542:	d101      	bne.n	800e548 <f_readdir+0x70>
 800e544:	2300      	movs	r3, #0
 800e546:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e548:	7bfb      	ldrb	r3, [r7, #15]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800e552:	b580      	push	{r7, lr}
 800e554:	b084      	sub	sp, #16
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
 800e55a:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800e55c:	6839      	ldr	r1, [r7, #0]
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7ff ffba 	bl	800e4d8 <f_readdir>
 800e564:	4603      	mov	r3, r0
 800e566:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800e568:	7bfb      	ldrb	r3, [r7, #15]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d114      	bne.n	800e598 <f_findnext+0x46>
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d011      	beq.n	800e598 <f_findnext+0x46>
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	7d9b      	ldrb	r3, [r3, #22]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00d      	beq.n	800e598 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	f103 0116 	add.w	r1, r3, #22
 800e586:	2300      	movs	r3, #0
 800e588:	2200      	movs	r2, #0
 800e58a:	f7fe fd7f 	bl	800d08c <pattern_matching>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d100      	bne.n	800e596 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800e594:	e7e2      	b.n	800e55c <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800e596:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800e598:	7bfb      	ldrb	r3, [r7, #15]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b086      	sub	sp, #24
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	60f8      	str	r0, [r7, #12]
 800e5aa:	60b9      	str	r1, [r7, #8]
 800e5ac:	607a      	str	r2, [r7, #4]
 800e5ae:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	683a      	ldr	r2, [r7, #0]
 800e5b4:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800e5b6:	6879      	ldr	r1, [r7, #4]
 800e5b8:	68f8      	ldr	r0, [r7, #12]
 800e5ba:	f7ff ff1a 	bl	800e3f2 <f_opendir>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e5c2:	7dfb      	ldrb	r3, [r7, #23]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d105      	bne.n	800e5d4 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800e5c8:	68b9      	ldr	r1, [r7, #8]
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f7ff ffc1 	bl	800e552 <f_findnext>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800e5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3718      	adds	r7, #24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
	...

0800e5e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b087      	sub	sp, #28
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	60b9      	str	r1, [r7, #8]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e5f6:	4b1f      	ldr	r3, [pc, #124]	; (800e674 <FATFS_LinkDriverEx+0x94>)
 800e5f8:	7a5b      	ldrb	r3, [r3, #9]
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d131      	bne.n	800e664 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e600:	4b1c      	ldr	r3, [pc, #112]	; (800e674 <FATFS_LinkDriverEx+0x94>)
 800e602:	7a5b      	ldrb	r3, [r3, #9]
 800e604:	b2db      	uxtb	r3, r3
 800e606:	461a      	mov	r2, r3
 800e608:	4b1a      	ldr	r3, [pc, #104]	; (800e674 <FATFS_LinkDriverEx+0x94>)
 800e60a:	2100      	movs	r1, #0
 800e60c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e60e:	4b19      	ldr	r3, [pc, #100]	; (800e674 <FATFS_LinkDriverEx+0x94>)
 800e610:	7a5b      	ldrb	r3, [r3, #9]
 800e612:	b2db      	uxtb	r3, r3
 800e614:	4a17      	ldr	r2, [pc, #92]	; (800e674 <FATFS_LinkDriverEx+0x94>)
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	4413      	add	r3, r2
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e61e:	4b15      	ldr	r3, [pc, #84]	; (800e674 <FATFS_LinkDriverEx+0x94>)
 800e620:	7a5b      	ldrb	r3, [r3, #9]
 800e622:	b2db      	uxtb	r3, r3
 800e624:	461a      	mov	r2, r3
 800e626:	4b13      	ldr	r3, [pc, #76]	; (800e674 <FATFS_LinkDriverEx+0x94>)
 800e628:	4413      	add	r3, r2
 800e62a:	79fa      	ldrb	r2, [r7, #7]
 800e62c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e62e:	4b11      	ldr	r3, [pc, #68]	; (800e674 <FATFS_LinkDriverEx+0x94>)
 800e630:	7a5b      	ldrb	r3, [r3, #9]
 800e632:	b2db      	uxtb	r3, r3
 800e634:	1c5a      	adds	r2, r3, #1
 800e636:	b2d1      	uxtb	r1, r2
 800e638:	4a0e      	ldr	r2, [pc, #56]	; (800e674 <FATFS_LinkDriverEx+0x94>)
 800e63a:	7251      	strb	r1, [r2, #9]
 800e63c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e63e:	7dbb      	ldrb	r3, [r7, #22]
 800e640:	3330      	adds	r3, #48	; 0x30
 800e642:	b2da      	uxtb	r2, r3
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	3301      	adds	r3, #1
 800e64c:	223a      	movs	r2, #58	; 0x3a
 800e64e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	3302      	adds	r3, #2
 800e654:	222f      	movs	r2, #47	; 0x2f
 800e656:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	3303      	adds	r3, #3
 800e65c:	2200      	movs	r2, #0
 800e65e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e664:	7dfb      	ldrb	r3, [r7, #23]
}
 800e666:	4618      	mov	r0, r3
 800e668:	371c      	adds	r7, #28
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr
 800e672:	bf00      	nop
 800e674:	20000990 	.word	0x20000990

0800e678 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e682:	2200      	movs	r2, #0
 800e684:	6839      	ldr	r1, [r7, #0]
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7ff ffaa 	bl	800e5e0 <FATFS_LinkDriverEx>
 800e68c:	4603      	mov	r3, r0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
	...

0800e698 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e698:	b480      	push	{r7}
 800e69a:	b085      	sub	sp, #20
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	4603      	mov	r3, r0
 800e6a0:	6039      	str	r1, [r7, #0]
 800e6a2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e6a4:	88fb      	ldrh	r3, [r7, #6]
 800e6a6:	2b7f      	cmp	r3, #127	; 0x7f
 800e6a8:	d802      	bhi.n	800e6b0 <ff_convert+0x18>
		c = chr;
 800e6aa:	88fb      	ldrh	r3, [r7, #6]
 800e6ac:	81fb      	strh	r3, [r7, #14]
 800e6ae:	e025      	b.n	800e6fc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00b      	beq.n	800e6ce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e6b6:	88fb      	ldrh	r3, [r7, #6]
 800e6b8:	2bff      	cmp	r3, #255	; 0xff
 800e6ba:	d805      	bhi.n	800e6c8 <ff_convert+0x30>
 800e6bc:	88fb      	ldrh	r3, [r7, #6]
 800e6be:	3b80      	subs	r3, #128	; 0x80
 800e6c0:	4a12      	ldr	r2, [pc, #72]	; (800e70c <ff_convert+0x74>)
 800e6c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6c6:	e000      	b.n	800e6ca <ff_convert+0x32>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	81fb      	strh	r3, [r7, #14]
 800e6cc:	e016      	b.n	800e6fc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	81fb      	strh	r3, [r7, #14]
 800e6d2:	e009      	b.n	800e6e8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e6d4:	89fb      	ldrh	r3, [r7, #14]
 800e6d6:	4a0d      	ldr	r2, [pc, #52]	; (800e70c <ff_convert+0x74>)
 800e6d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6dc:	88fa      	ldrh	r2, [r7, #6]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d006      	beq.n	800e6f0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e6e2:	89fb      	ldrh	r3, [r7, #14]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	81fb      	strh	r3, [r7, #14]
 800e6e8:	89fb      	ldrh	r3, [r7, #14]
 800e6ea:	2b7f      	cmp	r3, #127	; 0x7f
 800e6ec:	d9f2      	bls.n	800e6d4 <ff_convert+0x3c>
 800e6ee:	e000      	b.n	800e6f2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e6f0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e6f2:	89fb      	ldrh	r3, [r7, #14]
 800e6f4:	3380      	adds	r3, #128	; 0x80
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e6fc:	89fb      	ldrh	r3, [r7, #14]
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3714      	adds	r7, #20
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	08014a94 	.word	0x08014a94

0800e710 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e710:	b480      	push	{r7}
 800e712:	b087      	sub	sp, #28
 800e714:	af00      	add	r7, sp, #0
 800e716:	4603      	mov	r3, r0
 800e718:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e71a:	88fb      	ldrh	r3, [r7, #6]
 800e71c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e720:	d201      	bcs.n	800e726 <ff_wtoupper+0x16>
 800e722:	4b3e      	ldr	r3, [pc, #248]	; (800e81c <ff_wtoupper+0x10c>)
 800e724:	e000      	b.n	800e728 <ff_wtoupper+0x18>
 800e726:	4b3e      	ldr	r3, [pc, #248]	; (800e820 <ff_wtoupper+0x110>)
 800e728:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	1c9a      	adds	r2, r3, #2
 800e72e:	617a      	str	r2, [r7, #20]
 800e730:	881b      	ldrh	r3, [r3, #0]
 800e732:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e734:	8a7b      	ldrh	r3, [r7, #18]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d068      	beq.n	800e80c <ff_wtoupper+0xfc>
 800e73a:	88fa      	ldrh	r2, [r7, #6]
 800e73c:	8a7b      	ldrh	r3, [r7, #18]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d364      	bcc.n	800e80c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	1c9a      	adds	r2, r3, #2
 800e746:	617a      	str	r2, [r7, #20]
 800e748:	881b      	ldrh	r3, [r3, #0]
 800e74a:	823b      	strh	r3, [r7, #16]
 800e74c:	8a3b      	ldrh	r3, [r7, #16]
 800e74e:	0a1b      	lsrs	r3, r3, #8
 800e750:	81fb      	strh	r3, [r7, #14]
 800e752:	8a3b      	ldrh	r3, [r7, #16]
 800e754:	b2db      	uxtb	r3, r3
 800e756:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e758:	88fa      	ldrh	r2, [r7, #6]
 800e75a:	8a79      	ldrh	r1, [r7, #18]
 800e75c:	8a3b      	ldrh	r3, [r7, #16]
 800e75e:	440b      	add	r3, r1
 800e760:	429a      	cmp	r2, r3
 800e762:	da49      	bge.n	800e7f8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e764:	89fb      	ldrh	r3, [r7, #14]
 800e766:	2b08      	cmp	r3, #8
 800e768:	d84f      	bhi.n	800e80a <ff_wtoupper+0xfa>
 800e76a:	a201      	add	r2, pc, #4	; (adr r2, 800e770 <ff_wtoupper+0x60>)
 800e76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e770:	0800e795 	.word	0x0800e795
 800e774:	0800e7a7 	.word	0x0800e7a7
 800e778:	0800e7bd 	.word	0x0800e7bd
 800e77c:	0800e7c5 	.word	0x0800e7c5
 800e780:	0800e7cd 	.word	0x0800e7cd
 800e784:	0800e7d5 	.word	0x0800e7d5
 800e788:	0800e7dd 	.word	0x0800e7dd
 800e78c:	0800e7e5 	.word	0x0800e7e5
 800e790:	0800e7ed 	.word	0x0800e7ed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e794:	88fa      	ldrh	r2, [r7, #6]
 800e796:	8a7b      	ldrh	r3, [r7, #18]
 800e798:	1ad3      	subs	r3, r2, r3
 800e79a:	005b      	lsls	r3, r3, #1
 800e79c:	697a      	ldr	r2, [r7, #20]
 800e79e:	4413      	add	r3, r2
 800e7a0:	881b      	ldrh	r3, [r3, #0]
 800e7a2:	80fb      	strh	r3, [r7, #6]
 800e7a4:	e027      	b.n	800e7f6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e7a6:	88fa      	ldrh	r2, [r7, #6]
 800e7a8:	8a7b      	ldrh	r3, [r7, #18]
 800e7aa:	1ad3      	subs	r3, r2, r3
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	f003 0301 	and.w	r3, r3, #1
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	88fa      	ldrh	r2, [r7, #6]
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	80fb      	strh	r3, [r7, #6]
 800e7ba:	e01c      	b.n	800e7f6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e7bc:	88fb      	ldrh	r3, [r7, #6]
 800e7be:	3b10      	subs	r3, #16
 800e7c0:	80fb      	strh	r3, [r7, #6]
 800e7c2:	e018      	b.n	800e7f6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e7c4:	88fb      	ldrh	r3, [r7, #6]
 800e7c6:	3b20      	subs	r3, #32
 800e7c8:	80fb      	strh	r3, [r7, #6]
 800e7ca:	e014      	b.n	800e7f6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e7cc:	88fb      	ldrh	r3, [r7, #6]
 800e7ce:	3b30      	subs	r3, #48	; 0x30
 800e7d0:	80fb      	strh	r3, [r7, #6]
 800e7d2:	e010      	b.n	800e7f6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e7d4:	88fb      	ldrh	r3, [r7, #6]
 800e7d6:	3b1a      	subs	r3, #26
 800e7d8:	80fb      	strh	r3, [r7, #6]
 800e7da:	e00c      	b.n	800e7f6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e7dc:	88fb      	ldrh	r3, [r7, #6]
 800e7de:	3308      	adds	r3, #8
 800e7e0:	80fb      	strh	r3, [r7, #6]
 800e7e2:	e008      	b.n	800e7f6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e7e4:	88fb      	ldrh	r3, [r7, #6]
 800e7e6:	3b50      	subs	r3, #80	; 0x50
 800e7e8:	80fb      	strh	r3, [r7, #6]
 800e7ea:	e004      	b.n	800e7f6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e7ec:	88fb      	ldrh	r3, [r7, #6]
 800e7ee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e7f2:	80fb      	strh	r3, [r7, #6]
 800e7f4:	bf00      	nop
			}
			break;
 800e7f6:	e008      	b.n	800e80a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e7f8:	89fb      	ldrh	r3, [r7, #14]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d195      	bne.n	800e72a <ff_wtoupper+0x1a>
 800e7fe:	8a3b      	ldrh	r3, [r7, #16]
 800e800:	005b      	lsls	r3, r3, #1
 800e802:	697a      	ldr	r2, [r7, #20]
 800e804:	4413      	add	r3, r2
 800e806:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e808:	e78f      	b.n	800e72a <ff_wtoupper+0x1a>
			break;
 800e80a:	bf00      	nop
	}

	return chr;
 800e80c:	88fb      	ldrh	r3, [r7, #6]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	371c      	adds	r7, #28
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop
 800e81c:	08014b94 	.word	0x08014b94
 800e820:	08014d88 	.word	0x08014d88

0800e824 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 800e824:	b580      	push	{r7, lr}
 800e826:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800e828:	2200      	movs	r2, #0
 800e82a:	4912      	ldr	r1, [pc, #72]	; (800e874 <MX_USB_DEVICE_Init+0x50>)
 800e82c:	4812      	ldr	r0, [pc, #72]	; (800e878 <MX_USB_DEVICE_Init+0x54>)
 800e82e:	f7fb fcfe 	bl	800a22e <USBD_Init>
 800e832:	4603      	mov	r3, r0
 800e834:	2b00      	cmp	r3, #0
 800e836:	d001      	beq.n	800e83c <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800e838:	f7f2 ffde 	bl	80017f8 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 800e83c:	490f      	ldr	r1, [pc, #60]	; (800e87c <MX_USB_DEVICE_Init+0x58>)
 800e83e:	480e      	ldr	r0, [pc, #56]	; (800e878 <MX_USB_DEVICE_Init+0x54>)
 800e840:	f7fb fd25 	bl	800a28e <USBD_RegisterClass>
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d001      	beq.n	800e84e <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800e84a:	f7f2 ffd5 	bl	80017f8 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 800e84e:	490c      	ldr	r1, [pc, #48]	; (800e880 <MX_USB_DEVICE_Init+0x5c>)
 800e850:	4809      	ldr	r0, [pc, #36]	; (800e878 <MX_USB_DEVICE_Init+0x54>)
 800e852:	f7fb fcd5 	bl	800a200 <USBD_Midi_RegisterInterface>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d001      	beq.n	800e860 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800e85c:	f7f2 ffcc 	bl	80017f8 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e860:	4805      	ldr	r0, [pc, #20]	; (800e878 <MX_USB_DEVICE_Init+0x54>)
 800e862:	f7fb fd3b 	bl	800a2dc <USBD_Start>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d001      	beq.n	800e870 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800e86c:	f7f2 ffc4 	bl	80017f8 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e870:	bf00      	nop
 800e872:	bd80      	pop	{r7, pc}
 800e874:	20000100 	.word	0x20000100
 800e878:	20002bf0 	.word	0x20002bf0
 800e87c:	20000054 	.word	0x20000054
 800e880:	20000150 	.word	0x20000150

0800e884 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	4603      	mov	r3, r0
 800e88c:	71fb      	strb	r3, [r7, #7]
 800e88e:	460b      	mov	r3, r1
 800e890:	71bb      	strb	r3, [r7, #6]
 800e892:	4613      	mov	r3, r2
 800e894:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 800e896:	230b      	movs	r3, #11
 800e898:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 800e89a:	79fb      	ldrb	r3, [r7, #7]
 800e89c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800e8a0:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 800e8a2:	7bfb      	ldrb	r3, [r7, #15]
 800e8a4:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 800e8a6:	7bbb      	ldrb	r3, [r7, #14]
 800e8a8:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 800e8aa:	79bb      	ldrb	r3, [r7, #6]
 800e8ac:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 800e8ae:	797b      	ldrb	r3, [r7, #5]
 800e8b0:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 800e8b2:	f107 0208 	add.w	r2, r7, #8
 800e8b6:	2304      	movs	r3, #4
 800e8b8:	2181      	movs	r1, #129	; 0x81
 800e8ba:	4810      	ldr	r0, [pc, #64]	; (800e8fc <MX_USB_Send_Midi+0x78>)
 800e8bc:	f000 fbb5 	bl	800f02a <USBD_LL_Transmit>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d00a      	beq.n	800e8dc <MX_USB_Send_Midi+0x58>
 800e8c6:	2b03      	cmp	r3, #3
 800e8c8:	dc10      	bgt.n	800e8ec <MX_USB_Send_Midi+0x68>
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d002      	beq.n	800e8d4 <MX_USB_Send_Midi+0x50>
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	d008      	beq.n	800e8e4 <MX_USB_Send_Midi+0x60>
 800e8d2:	e00b      	b.n	800e8ec <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 800e8d4:	480a      	ldr	r0, [pc, #40]	; (800e900 <MX_USB_Send_Midi+0x7c>)
 800e8d6:	f001 fe2f 	bl	8010538 <puts>
        break;
 800e8da:	e00b      	b.n	800e8f4 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 800e8dc:	4809      	ldr	r0, [pc, #36]	; (800e904 <MX_USB_Send_Midi+0x80>)
 800e8de:	f001 fe2b 	bl	8010538 <puts>
        break;
 800e8e2:	e007      	b.n	800e8f4 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 800e8e4:	4808      	ldr	r0, [pc, #32]	; (800e908 <MX_USB_Send_Midi+0x84>)
 800e8e6:	f001 fe27 	bl	8010538 <puts>
        break;
 800e8ea:	e003      	b.n	800e8f4 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 800e8ec:	4807      	ldr	r0, [pc, #28]	; (800e90c <MX_USB_Send_Midi+0x88>)
 800e8ee:	f001 fe23 	bl	8010538 <puts>
    }
}
 800e8f2:	bf00      	nop
 800e8f4:	bf00      	nop
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	20002bf0 	.word	0x20002bf0
 800e900:	08013670 	.word	0x08013670
 800e904:	08013674 	.word	0x08013674
 800e908:	08013684 	.word	0x08013684
 800e90c:	08013694 	.word	0x08013694

0800e910 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	4603      	mov	r3, r0
 800e918:	6039      	str	r1, [r7, #0]
 800e91a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2212      	movs	r2, #18
 800e920:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e922:	4b03      	ldr	r3, [pc, #12]	; (800e930 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e924:	4618      	mov	r0, r3
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr
 800e930:	2000011c 	.word	0x2000011c

0800e934 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	4603      	mov	r3, r0
 800e93c:	6039      	str	r1, [r7, #0]
 800e93e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	2204      	movs	r2, #4
 800e944:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e946:	4b03      	ldr	r3, [pc, #12]	; (800e954 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e948:	4618      	mov	r0, r3
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	20000130 	.word	0x20000130

0800e958 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	4603      	mov	r3, r0
 800e960:	6039      	str	r1, [r7, #0]
 800e962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e964:	79fb      	ldrb	r3, [r7, #7]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d105      	bne.n	800e976 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e96a:	683a      	ldr	r2, [r7, #0]
 800e96c:	4907      	ldr	r1, [pc, #28]	; (800e98c <USBD_FS_ProductStrDescriptor+0x34>)
 800e96e:	4808      	ldr	r0, [pc, #32]	; (800e990 <USBD_FS_ProductStrDescriptor+0x38>)
 800e970:	f7fc fce5 	bl	800b33e <USBD_GetString>
 800e974:	e004      	b.n	800e980 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e976:	683a      	ldr	r2, [r7, #0]
 800e978:	4904      	ldr	r1, [pc, #16]	; (800e98c <USBD_FS_ProductStrDescriptor+0x34>)
 800e97a:	4805      	ldr	r0, [pc, #20]	; (800e990 <USBD_FS_ProductStrDescriptor+0x38>)
 800e97c:	f7fc fcdf 	bl	800b33e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e980:	4b02      	ldr	r3, [pc, #8]	; (800e98c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e982:	4618      	mov	r0, r3
 800e984:	3708      	adds	r7, #8
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	20002ec0 	.word	0x20002ec0
 800e990:	080136b0 	.word	0x080136b0

0800e994 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	4603      	mov	r3, r0
 800e99c:	6039      	str	r1, [r7, #0]
 800e99e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e9a0:	683a      	ldr	r2, [r7, #0]
 800e9a2:	4904      	ldr	r1, [pc, #16]	; (800e9b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e9a4:	4804      	ldr	r0, [pc, #16]	; (800e9b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e9a6:	f7fc fcca 	bl	800b33e <USBD_GetString>
  return USBD_StrDesc;
 800e9aa:	4b02      	ldr	r3, [pc, #8]	; (800e9b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	20002ec0 	.word	0x20002ec0
 800e9b8:	080136c4 	.word	0x080136c4

0800e9bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	6039      	str	r1, [r7, #0]
 800e9c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	221a      	movs	r2, #26
 800e9cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e9ce:	f000 f843 	bl	800ea58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e9d2:	4b02      	ldr	r3, [pc, #8]	; (800e9dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3708      	adds	r7, #8
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	20000134 	.word	0x20000134

0800e9e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	6039      	str	r1, [r7, #0]
 800e9ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e9ec:	79fb      	ldrb	r3, [r7, #7]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d105      	bne.n	800e9fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e9f2:	683a      	ldr	r2, [r7, #0]
 800e9f4:	4907      	ldr	r1, [pc, #28]	; (800ea14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e9f6:	4808      	ldr	r0, [pc, #32]	; (800ea18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e9f8:	f7fc fca1 	bl	800b33e <USBD_GetString>
 800e9fc:	e004      	b.n	800ea08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e9fe:	683a      	ldr	r2, [r7, #0]
 800ea00:	4904      	ldr	r1, [pc, #16]	; (800ea14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ea02:	4805      	ldr	r0, [pc, #20]	; (800ea18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ea04:	f7fc fc9b 	bl	800b33e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea08:	4b02      	ldr	r3, [pc, #8]	; (800ea14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3708      	adds	r7, #8
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	20002ec0 	.word	0x20002ec0
 800ea18:	080136d8 	.word	0x080136d8

0800ea1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	4603      	mov	r3, r0
 800ea24:	6039      	str	r1, [r7, #0]
 800ea26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea28:	79fb      	ldrb	r3, [r7, #7]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d105      	bne.n	800ea3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ea2e:	683a      	ldr	r2, [r7, #0]
 800ea30:	4907      	ldr	r1, [pc, #28]	; (800ea50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ea32:	4808      	ldr	r0, [pc, #32]	; (800ea54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ea34:	f7fc fc83 	bl	800b33e <USBD_GetString>
 800ea38:	e004      	b.n	800ea44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	4904      	ldr	r1, [pc, #16]	; (800ea50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ea3e:	4805      	ldr	r0, [pc, #20]	; (800ea54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ea40:	f7fc fc7d 	bl	800b33e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea44:	4b02      	ldr	r3, [pc, #8]	; (800ea50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	20002ec0 	.word	0x20002ec0
 800ea54:	080136e8 	.word	0x080136e8

0800ea58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ea5e:	4b0f      	ldr	r3, [pc, #60]	; (800ea9c <Get_SerialNum+0x44>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ea64:	4b0e      	ldr	r3, [pc, #56]	; (800eaa0 <Get_SerialNum+0x48>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ea6a:	4b0e      	ldr	r3, [pc, #56]	; (800eaa4 <Get_SerialNum+0x4c>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ea70:	68fa      	ldr	r2, [r7, #12]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4413      	add	r3, r2
 800ea76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d009      	beq.n	800ea92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ea7e:	2208      	movs	r2, #8
 800ea80:	4909      	ldr	r1, [pc, #36]	; (800eaa8 <Get_SerialNum+0x50>)
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f000 f814 	bl	800eab0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ea88:	2204      	movs	r2, #4
 800ea8a:	4908      	ldr	r1, [pc, #32]	; (800eaac <Get_SerialNum+0x54>)
 800ea8c:	68b8      	ldr	r0, [r7, #8]
 800ea8e:	f000 f80f 	bl	800eab0 <IntToUnicode>
  }
}
 800ea92:	bf00      	nop
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	1fff7a10 	.word	0x1fff7a10
 800eaa0:	1fff7a14 	.word	0x1fff7a14
 800eaa4:	1fff7a18 	.word	0x1fff7a18
 800eaa8:	20000136 	.word	0x20000136
 800eaac:	20000146 	.word	0x20000146

0800eab0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	4613      	mov	r3, r2
 800eabc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eac2:	2300      	movs	r3, #0
 800eac4:	75fb      	strb	r3, [r7, #23]
 800eac6:	e027      	b.n	800eb18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	0f1b      	lsrs	r3, r3, #28
 800eacc:	2b09      	cmp	r3, #9
 800eace:	d80b      	bhi.n	800eae8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	0f1b      	lsrs	r3, r3, #28
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	7dfb      	ldrb	r3, [r7, #23]
 800ead8:	005b      	lsls	r3, r3, #1
 800eada:	4619      	mov	r1, r3
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	440b      	add	r3, r1
 800eae0:	3230      	adds	r2, #48	; 0x30
 800eae2:	b2d2      	uxtb	r2, r2
 800eae4:	701a      	strb	r2, [r3, #0]
 800eae6:	e00a      	b.n	800eafe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	0f1b      	lsrs	r3, r3, #28
 800eaec:	b2da      	uxtb	r2, r3
 800eaee:	7dfb      	ldrb	r3, [r7, #23]
 800eaf0:	005b      	lsls	r3, r3, #1
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	440b      	add	r3, r1
 800eaf8:	3237      	adds	r2, #55	; 0x37
 800eafa:	b2d2      	uxtb	r2, r2
 800eafc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	011b      	lsls	r3, r3, #4
 800eb02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eb04:	7dfb      	ldrb	r3, [r7, #23]
 800eb06:	005b      	lsls	r3, r3, #1
 800eb08:	3301      	adds	r3, #1
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	2200      	movs	r2, #0
 800eb10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eb12:	7dfb      	ldrb	r3, [r7, #23]
 800eb14:	3301      	adds	r3, #1
 800eb16:	75fb      	strb	r3, [r7, #23]
 800eb18:	7dfa      	ldrb	r2, [r7, #23]
 800eb1a:	79fb      	ldrb	r3, [r7, #7]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d3d3      	bcc.n	800eac8 <IntToUnicode+0x18>
  }
}
 800eb20:	bf00      	nop
 800eb22:	bf00      	nop
 800eb24:	371c      	adds	r7, #28
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr

0800eb2e <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 800eb2e:	b480      	push	{r7}
 800eb30:	b083      	sub	sp, #12
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
 800eb36:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	370c      	adds	r7, #12
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
	...

0800eb48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b08a      	sub	sp, #40	; 0x28
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb50:	f107 0314 	add.w	r3, r7, #20
 800eb54:	2200      	movs	r2, #0
 800eb56:	601a      	str	r2, [r3, #0]
 800eb58:	605a      	str	r2, [r3, #4]
 800eb5a:	609a      	str	r2, [r3, #8]
 800eb5c:	60da      	str	r2, [r3, #12]
 800eb5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb68:	d13a      	bne.n	800ebe0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	613b      	str	r3, [r7, #16]
 800eb6e:	4b1e      	ldr	r3, [pc, #120]	; (800ebe8 <HAL_PCD_MspInit+0xa0>)
 800eb70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb72:	4a1d      	ldr	r2, [pc, #116]	; (800ebe8 <HAL_PCD_MspInit+0xa0>)
 800eb74:	f043 0301 	orr.w	r3, r3, #1
 800eb78:	6313      	str	r3, [r2, #48]	; 0x30
 800eb7a:	4b1b      	ldr	r3, [pc, #108]	; (800ebe8 <HAL_PCD_MspInit+0xa0>)
 800eb7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	613b      	str	r3, [r7, #16]
 800eb84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800eb86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800eb8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb90:	2300      	movs	r3, #0
 800eb92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb94:	2300      	movs	r3, #0
 800eb96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eb98:	230a      	movs	r3, #10
 800eb9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb9c:	f107 0314 	add.w	r3, r7, #20
 800eba0:	4619      	mov	r1, r3
 800eba2:	4812      	ldr	r0, [pc, #72]	; (800ebec <HAL_PCD_MspInit+0xa4>)
 800eba4:	f7f4 ff2e 	bl	8003a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eba8:	4b0f      	ldr	r3, [pc, #60]	; (800ebe8 <HAL_PCD_MspInit+0xa0>)
 800ebaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebac:	4a0e      	ldr	r2, [pc, #56]	; (800ebe8 <HAL_PCD_MspInit+0xa0>)
 800ebae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebb2:	6353      	str	r3, [r2, #52]	; 0x34
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	60fb      	str	r3, [r7, #12]
 800ebb8:	4b0b      	ldr	r3, [pc, #44]	; (800ebe8 <HAL_PCD_MspInit+0xa0>)
 800ebba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebbc:	4a0a      	ldr	r2, [pc, #40]	; (800ebe8 <HAL_PCD_MspInit+0xa0>)
 800ebbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ebc2:	6453      	str	r3, [r2, #68]	; 0x44
 800ebc4:	4b08      	ldr	r3, [pc, #32]	; (800ebe8 <HAL_PCD_MspInit+0xa0>)
 800ebc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ebcc:	60fb      	str	r3, [r7, #12]
 800ebce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	2043      	movs	r0, #67	; 0x43
 800ebd6:	f7f4 fede 	bl	8003996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ebda:	2043      	movs	r0, #67	; 0x43
 800ebdc:	f7f4 fef7 	bl	80039ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ebe0:	bf00      	nop
 800ebe2:	3728      	adds	r7, #40	; 0x28
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	40023800 	.word	0x40023800
 800ebec:	40020000 	.word	0x40020000

0800ebf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ec04:	4619      	mov	r1, r3
 800ec06:	4610      	mov	r0, r2
 800ec08:	f7fb fbb3 	bl	800a372 <USBD_LL_SetupStage>
}
 800ec0c:	bf00      	nop
 800ec0e:	3708      	adds	r7, #8
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ec26:	78fa      	ldrb	r2, [r7, #3]
 800ec28:	6879      	ldr	r1, [r7, #4]
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	00db      	lsls	r3, r3, #3
 800ec2e:	1a9b      	subs	r3, r3, r2
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	440b      	add	r3, r1
 800ec34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	78fb      	ldrb	r3, [r7, #3]
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	f7fb fbed 	bl	800a41c <USBD_LL_DataOutStage>
}
 800ec42:	bf00      	nop
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b082      	sub	sp, #8
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
 800ec52:	460b      	mov	r3, r1
 800ec54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ec5c:	78fa      	ldrb	r2, [r7, #3]
 800ec5e:	6879      	ldr	r1, [r7, #4]
 800ec60:	4613      	mov	r3, r2
 800ec62:	00db      	lsls	r3, r3, #3
 800ec64:	1a9b      	subs	r3, r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	440b      	add	r3, r1
 800ec6a:	3348      	adds	r3, #72	; 0x48
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	78fb      	ldrb	r3, [r7, #3]
 800ec70:	4619      	mov	r1, r3
 800ec72:	f7fb fc36 	bl	800a4e2 <USBD_LL_DataInStage>
}
 800ec76:	bf00      	nop
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b082      	sub	sp, #8
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fb fd4a 	bl	800a726 <USBD_LL_SOF>
}
 800ec92:	bf00      	nop
 800ec94:	3708      	adds	r7, #8
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b084      	sub	sp, #16
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eca2:	2301      	movs	r3, #1
 800eca4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	68db      	ldr	r3, [r3, #12]
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d001      	beq.n	800ecb2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ecae:	f7f2 fda3 	bl	80017f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ecb8:	7bfa      	ldrb	r2, [r7, #15]
 800ecba:	4611      	mov	r1, r2
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fb fcf4 	bl	800a6aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7fb fca0 	bl	800a60e <USBD_LL_Reset>
}
 800ecce:	bf00      	nop
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
	...

0800ecd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fb fcef 	bl	800a6ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	6812      	ldr	r2, [r2, #0]
 800ecfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ecfe:	f043 0301 	orr.w	r3, r3, #1
 800ed02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6a1b      	ldr	r3, [r3, #32]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d005      	beq.n	800ed18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ed0c:	4b04      	ldr	r3, [pc, #16]	; (800ed20 <HAL_PCD_SuspendCallback+0x48>)
 800ed0e:	691b      	ldr	r3, [r3, #16]
 800ed10:	4a03      	ldr	r2, [pc, #12]	; (800ed20 <HAL_PCD_SuspendCallback+0x48>)
 800ed12:	f043 0306 	orr.w	r3, r3, #6
 800ed16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ed18:	bf00      	nop
 800ed1a:	3708      	adds	r7, #8
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	e000ed00 	.word	0xe000ed00

0800ed24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b082      	sub	sp, #8
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7fb fcdf 	bl	800a6f6 <USBD_LL_Resume>
}
 800ed38:	bf00      	nop
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	460b      	mov	r3, r1
 800ed4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed52:	78fa      	ldrb	r2, [r7, #3]
 800ed54:	4611      	mov	r1, r2
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fb fd2d 	bl	800a7b6 <USBD_LL_IsoOUTIncomplete>
}
 800ed5c:	bf00      	nop
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed76:	78fa      	ldrb	r2, [r7, #3]
 800ed78:	4611      	mov	r1, r2
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fb fcf5 	bl	800a76a <USBD_LL_IsoINIncomplete>
}
 800ed80:	bf00      	nop
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fb fd33 	bl	800a802 <USBD_LL_DevConnected>
}
 800ed9c:	bf00      	nop
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fb fd30 	bl	800a818 <USBD_LL_DevDisconnected>
}
 800edb8:	bf00      	nop
 800edba:	3708      	adds	r7, #8
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d13c      	bne.n	800ee4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800edd0:	4a20      	ldr	r2, [pc, #128]	; (800ee54 <USBD_LL_Init+0x94>)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4a1e      	ldr	r2, [pc, #120]	; (800ee54 <USBD_LL_Init+0x94>)
 800eddc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ede0:	4b1c      	ldr	r3, [pc, #112]	; (800ee54 <USBD_LL_Init+0x94>)
 800ede2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ede6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ede8:	4b1a      	ldr	r3, [pc, #104]	; (800ee54 <USBD_LL_Init+0x94>)
 800edea:	2204      	movs	r2, #4
 800edec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800edee:	4b19      	ldr	r3, [pc, #100]	; (800ee54 <USBD_LL_Init+0x94>)
 800edf0:	2202      	movs	r2, #2
 800edf2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800edf4:	4b17      	ldr	r3, [pc, #92]	; (800ee54 <USBD_LL_Init+0x94>)
 800edf6:	2200      	movs	r2, #0
 800edf8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800edfa:	4b16      	ldr	r3, [pc, #88]	; (800ee54 <USBD_LL_Init+0x94>)
 800edfc:	2202      	movs	r2, #2
 800edfe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ee00:	4b14      	ldr	r3, [pc, #80]	; (800ee54 <USBD_LL_Init+0x94>)
 800ee02:	2200      	movs	r2, #0
 800ee04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ee06:	4b13      	ldr	r3, [pc, #76]	; (800ee54 <USBD_LL_Init+0x94>)
 800ee08:	2200      	movs	r2, #0
 800ee0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ee0c:	4b11      	ldr	r3, [pc, #68]	; (800ee54 <USBD_LL_Init+0x94>)
 800ee0e:	2200      	movs	r2, #0
 800ee10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ee12:	4b10      	ldr	r3, [pc, #64]	; (800ee54 <USBD_LL_Init+0x94>)
 800ee14:	2200      	movs	r2, #0
 800ee16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ee18:	4b0e      	ldr	r3, [pc, #56]	; (800ee54 <USBD_LL_Init+0x94>)
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ee1e:	480d      	ldr	r0, [pc, #52]	; (800ee54 <USBD_LL_Init+0x94>)
 800ee20:	f7f5 fd9b 	bl	800495a <HAL_PCD_Init>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ee2a:	f7f2 fce5 	bl	80017f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ee2e:	2180      	movs	r1, #128	; 0x80
 800ee30:	4808      	ldr	r0, [pc, #32]	; (800ee54 <USBD_LL_Init+0x94>)
 800ee32:	f7f6 fef8 	bl	8005c26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ee36:	2240      	movs	r2, #64	; 0x40
 800ee38:	2100      	movs	r1, #0
 800ee3a:	4806      	ldr	r0, [pc, #24]	; (800ee54 <USBD_LL_Init+0x94>)
 800ee3c:	f7f6 feac 	bl	8005b98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ee40:	2280      	movs	r2, #128	; 0x80
 800ee42:	2101      	movs	r1, #1
 800ee44:	4803      	ldr	r0, [pc, #12]	; (800ee54 <USBD_LL_Init+0x94>)
 800ee46:	f7f6 fea7 	bl	8005b98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ee4a:	2300      	movs	r3, #0
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	200030c0 	.word	0x200030c0

0800ee58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee60:	2300      	movs	r3, #0
 800ee62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee64:	2300      	movs	r3, #0
 800ee66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7f5 fe90 	bl	8004b94 <HAL_PCD_Start>
 800ee74:	4603      	mov	r3, r0
 800ee76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee78:	7bfb      	ldrb	r3, [r7, #15]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f000 f938 	bl	800f0f0 <USBD_Get_USB_Status>
 800ee80:	4603      	mov	r3, r0
 800ee82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b084      	sub	sp, #16
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
 800ee96:	4608      	mov	r0, r1
 800ee98:	4611      	mov	r1, r2
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	70fb      	strb	r3, [r7, #3]
 800eea0:	460b      	mov	r3, r1
 800eea2:	70bb      	strb	r3, [r7, #2]
 800eea4:	4613      	mov	r3, r2
 800eea6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeac:	2300      	movs	r3, #0
 800eeae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eeb6:	78bb      	ldrb	r3, [r7, #2]
 800eeb8:	883a      	ldrh	r2, [r7, #0]
 800eeba:	78f9      	ldrb	r1, [r7, #3]
 800eebc:	f7f6 fa74 	bl	80053a8 <HAL_PCD_EP_Open>
 800eec0:	4603      	mov	r3, r0
 800eec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eec4:	7bfb      	ldrb	r3, [r7, #15]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f000 f912 	bl	800f0f0 <USBD_Get_USB_Status>
 800eecc:	4603      	mov	r3, r0
 800eece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eed0:	7bbb      	ldrb	r3, [r7, #14]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3710      	adds	r7, #16
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b084      	sub	sp, #16
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
 800eee2:	460b      	mov	r3, r1
 800eee4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eee6:	2300      	movs	r3, #0
 800eee8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeea:	2300      	movs	r3, #0
 800eeec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eef4:	78fa      	ldrb	r2, [r7, #3]
 800eef6:	4611      	mov	r1, r2
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7f6 fabd 	bl	8005478 <HAL_PCD_EP_Close>
 800eefe:	4603      	mov	r3, r0
 800ef00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef02:	7bfb      	ldrb	r3, [r7, #15]
 800ef04:	4618      	mov	r0, r3
 800ef06:	f000 f8f3 	bl	800f0f0 <USBD_Get_USB_Status>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	460b      	mov	r3, r1
 800ef22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef24:	2300      	movs	r3, #0
 800ef26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef32:	78fa      	ldrb	r2, [r7, #3]
 800ef34:	4611      	mov	r1, r2
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7f6 fb95 	bl	8005666 <HAL_PCD_EP_SetStall>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef40:	7bfb      	ldrb	r3, [r7, #15]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f000 f8d4 	bl	800f0f0 <USBD_Get_USB_Status>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b084      	sub	sp, #16
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
 800ef5e:	460b      	mov	r3, r1
 800ef60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef62:	2300      	movs	r3, #0
 800ef64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef66:	2300      	movs	r3, #0
 800ef68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef70:	78fa      	ldrb	r2, [r7, #3]
 800ef72:	4611      	mov	r1, r2
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7f6 fbda 	bl	800572e <HAL_PCD_EP_ClrStall>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef7e:	7bfb      	ldrb	r3, [r7, #15]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f000 f8b5 	bl	800f0f0 <USBD_Get_USB_Status>
 800ef86:	4603      	mov	r3, r0
 800ef88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3710      	adds	r7, #16
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b085      	sub	sp, #20
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efa6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800efa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800efac:	2b00      	cmp	r3, #0
 800efae:	da0b      	bge.n	800efc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800efb0:	78fb      	ldrb	r3, [r7, #3]
 800efb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efb6:	68f9      	ldr	r1, [r7, #12]
 800efb8:	4613      	mov	r3, r2
 800efba:	00db      	lsls	r3, r3, #3
 800efbc:	1a9b      	subs	r3, r3, r2
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	440b      	add	r3, r1
 800efc2:	333e      	adds	r3, #62	; 0x3e
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	e00b      	b.n	800efe0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800efc8:	78fb      	ldrb	r3, [r7, #3]
 800efca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efce:	68f9      	ldr	r1, [r7, #12]
 800efd0:	4613      	mov	r3, r2
 800efd2:	00db      	lsls	r3, r3, #3
 800efd4:	1a9b      	subs	r3, r3, r2
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	440b      	add	r3, r1
 800efda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800efde:	781b      	ldrb	r3, [r3, #0]
  }
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3714      	adds	r7, #20
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr

0800efec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	460b      	mov	r3, r1
 800eff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eff8:	2300      	movs	r3, #0
 800effa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800effc:	2300      	movs	r3, #0
 800effe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f006:	78fa      	ldrb	r2, [r7, #3]
 800f008:	4611      	mov	r1, r2
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7f6 f9a7 	bl	800535e <HAL_PCD_SetAddress>
 800f010:	4603      	mov	r3, r0
 800f012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f014:	7bfb      	ldrb	r3, [r7, #15]
 800f016:	4618      	mov	r0, r3
 800f018:	f000 f86a 	bl	800f0f0 <USBD_Get_USB_Status>
 800f01c:	4603      	mov	r3, r0
 800f01e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f020:	7bbb      	ldrb	r3, [r7, #14]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b086      	sub	sp, #24
 800f02e:	af00      	add	r7, sp, #0
 800f030:	60f8      	str	r0, [r7, #12]
 800f032:	607a      	str	r2, [r7, #4]
 800f034:	603b      	str	r3, [r7, #0]
 800f036:	460b      	mov	r3, r1
 800f038:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f03a:	2300      	movs	r3, #0
 800f03c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f048:	7af9      	ldrb	r1, [r7, #11]
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	f7f6 fac0 	bl	80055d2 <HAL_PCD_EP_Transmit>
 800f052:	4603      	mov	r3, r0
 800f054:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f056:	7dfb      	ldrb	r3, [r7, #23]
 800f058:	4618      	mov	r0, r3
 800f05a:	f000 f849 	bl	800f0f0 <USBD_Get_USB_Status>
 800f05e:	4603      	mov	r3, r0
 800f060:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f062:	7dbb      	ldrb	r3, [r7, #22]
}
 800f064:	4618      	mov	r0, r3
 800f066:	3718      	adds	r7, #24
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	607a      	str	r2, [r7, #4]
 800f076:	603b      	str	r3, [r7, #0]
 800f078:	460b      	mov	r3, r1
 800f07a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f07c:	2300      	movs	r3, #0
 800f07e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f080:	2300      	movs	r3, #0
 800f082:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f08a:	7af9      	ldrb	r1, [r7, #11]
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	f7f6 fa3c 	bl	800550c <HAL_PCD_EP_Receive>
 800f094:	4603      	mov	r3, r0
 800f096:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f098:	7dfb      	ldrb	r3, [r7, #23]
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 f828 	bl	800f0f0 <USBD_Get_USB_Status>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f0a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3718      	adds	r7, #24
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}

0800f0ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0ae:	b580      	push	{r7, lr}
 800f0b0:	b082      	sub	sp, #8
 800f0b2:	af00      	add	r7, sp, #0
 800f0b4:	6078      	str	r0, [r7, #4]
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0c0:	78fa      	ldrb	r2, [r7, #3]
 800f0c2:	4611      	mov	r1, r2
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7f6 fa6c 	bl	80055a2 <HAL_PCD_EP_GetRxCount>
 800f0ca:	4603      	mov	r3, r0
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3708      	adds	r7, #8
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f0dc:	4b03      	ldr	r3, [pc, #12]	; (800f0ec <USBD_static_malloc+0x18>)
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	370c      	adds	r7, #12
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e8:	4770      	bx	lr
 800f0ea:	bf00      	nop
 800f0ec:	2000099c 	.word	0x2000099c

0800f0f0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b085      	sub	sp, #20
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f0fe:	79fb      	ldrb	r3, [r7, #7]
 800f100:	2b03      	cmp	r3, #3
 800f102:	d817      	bhi.n	800f134 <USBD_Get_USB_Status+0x44>
 800f104:	a201      	add	r2, pc, #4	; (adr r2, 800f10c <USBD_Get_USB_Status+0x1c>)
 800f106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f10a:	bf00      	nop
 800f10c:	0800f11d 	.word	0x0800f11d
 800f110:	0800f123 	.word	0x0800f123
 800f114:	0800f129 	.word	0x0800f129
 800f118:	0800f12f 	.word	0x0800f12f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f11c:	2300      	movs	r3, #0
 800f11e:	73fb      	strb	r3, [r7, #15]
    break;
 800f120:	e00b      	b.n	800f13a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f122:	2303      	movs	r3, #3
 800f124:	73fb      	strb	r3, [r7, #15]
    break;
 800f126:	e008      	b.n	800f13a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f128:	2301      	movs	r3, #1
 800f12a:	73fb      	strb	r3, [r7, #15]
    break;
 800f12c:	e005      	b.n	800f13a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f12e:	2303      	movs	r3, #3
 800f130:	73fb      	strb	r3, [r7, #15]
    break;
 800f132:	e002      	b.n	800f13a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f134:	2303      	movs	r3, #3
 800f136:	73fb      	strb	r3, [r7, #15]
    break;
 800f138:	bf00      	nop
  }
  return usb_status;
 800f13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <case_insensitive_strcmp+0x16>
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d101      	bne.n	800f162 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800f15e:	2301      	movs	r3, #1
 800f160:	e056      	b.n	800f210 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	429a      	cmp	r2, r3
 800f168:	d10d      	bne.n	800f186 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800f16a:	2300      	movs	r3, #0
 800f16c:	e050      	b.n	800f210 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d101      	bne.n	800f17a <case_insensitive_strcmp+0x32>
        {
            return 0;
 800f176:	2300      	movs	r3, #0
 800f178:	e04a      	b.n	800f210 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	3301      	adds	r3, #1
 800f17e:	607b      	str	r3, [r7, #4]
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	3301      	adds	r3, #1
 800f184:	603b      	str	r3, [r7, #0]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	73fb      	strb	r3, [r7, #15]
 800f18c:	7bfb      	ldrb	r3, [r7, #15]
 800f18e:	3301      	adds	r3, #1
 800f190:	4a22      	ldr	r2, [pc, #136]	; (800f21c <case_insensitive_strcmp+0xd4>)
 800f192:	4413      	add	r3, r2
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	f003 0303 	and.w	r3, r3, #3
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d103      	bne.n	800f1a6 <case_insensitive_strcmp+0x5e>
 800f19e:	7bfb      	ldrb	r3, [r7, #15]
 800f1a0:	f103 0220 	add.w	r2, r3, #32
 800f1a4:	e000      	b.n	800f1a8 <case_insensitive_strcmp+0x60>
 800f1a6:	7bfa      	ldrb	r2, [r7, #15]
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	73bb      	strb	r3, [r7, #14]
 800f1ae:	7bbb      	ldrb	r3, [r7, #14]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	491a      	ldr	r1, [pc, #104]	; (800f21c <case_insensitive_strcmp+0xd4>)
 800f1b4:	440b      	add	r3, r1
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	f003 0303 	and.w	r3, r3, #3
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d102      	bne.n	800f1c6 <case_insensitive_strcmp+0x7e>
 800f1c0:	7bbb      	ldrb	r3, [r7, #14]
 800f1c2:	3320      	adds	r3, #32
 800f1c4:	e000      	b.n	800f1c8 <case_insensitive_strcmp+0x80>
 800f1c6:	7bbb      	ldrb	r3, [r7, #14]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d0d0      	beq.n	800f16e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	737b      	strb	r3, [r7, #13]
 800f1d2:	7b7b      	ldrb	r3, [r7, #13]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	4a11      	ldr	r2, [pc, #68]	; (800f21c <case_insensitive_strcmp+0xd4>)
 800f1d8:	4413      	add	r3, r2
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	f003 0303 	and.w	r3, r3, #3
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d103      	bne.n	800f1ec <case_insensitive_strcmp+0xa4>
 800f1e4:	7b7b      	ldrb	r3, [r7, #13]
 800f1e6:	f103 0220 	add.w	r2, r3, #32
 800f1ea:	e000      	b.n	800f1ee <case_insensitive_strcmp+0xa6>
 800f1ec:	7b7a      	ldrb	r2, [r7, #13]
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	733b      	strb	r3, [r7, #12]
 800f1f4:	7b3b      	ldrb	r3, [r7, #12]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	4908      	ldr	r1, [pc, #32]	; (800f21c <case_insensitive_strcmp+0xd4>)
 800f1fa:	440b      	add	r3, r1
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	f003 0303 	and.w	r3, r3, #3
 800f202:	2b01      	cmp	r3, #1
 800f204:	d102      	bne.n	800f20c <case_insensitive_strcmp+0xc4>
 800f206:	7b3b      	ldrb	r3, [r7, #12]
 800f208:	3320      	adds	r3, #32
 800f20a:	e000      	b.n	800f20e <case_insensitive_strcmp+0xc6>
 800f20c:	7b3b      	ldrb	r3, [r7, #12]
 800f20e:	1ad3      	subs	r3, r2, r3
}
 800f210:	4618      	mov	r0, r3
 800f212:	3714      	adds	r7, #20
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr
 800f21c:	08014e44 	.word	0x08014e44

0800f220 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2028      	movs	r0, #40	; 0x28
 800f22e:	4798      	blx	r3
 800f230:	60f8      	str	r0, [r7, #12]
    if (node)
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d004      	beq.n	800f242 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800f238:	2228      	movs	r2, #40	; 0x28
 800f23a:	2100      	movs	r1, #0
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f001 f85b 	bl	80102f8 <memset>
    }

    return node;
 800f242:	68fb      	ldr	r3, [r7, #12]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800f254:	2300      	movs	r3, #0
 800f256:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800f258:	e037      	b.n	800f2ca <cJSON_Delete+0x7e>
    {
        next = item->next;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d108      	bne.n	800f27e <cJSON_Delete+0x32>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	689b      	ldr	r3, [r3, #8]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d004      	beq.n	800f27e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	689b      	ldr	r3, [r3, #8]
 800f278:	4618      	mov	r0, r3
 800f27a:	f7ff ffe7 	bl	800f24c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f286:	2b00      	cmp	r3, #0
 800f288:	d109      	bne.n	800f29e <cJSON_Delete+0x52>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	691b      	ldr	r3, [r3, #16]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d005      	beq.n	800f29e <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800f292:	4b12      	ldr	r3, [pc, #72]	; (800f2dc <cJSON_Delete+0x90>)
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	687a      	ldr	r2, [r7, #4]
 800f298:	6912      	ldr	r2, [r2, #16]
 800f29a:	4610      	mov	r0, r2
 800f29c:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	68db      	ldr	r3, [r3, #12]
 800f2a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d109      	bne.n	800f2be <cJSON_Delete+0x72>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6a1b      	ldr	r3, [r3, #32]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d005      	beq.n	800f2be <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800f2b2:	4b0a      	ldr	r3, [pc, #40]	; (800f2dc <cJSON_Delete+0x90>)
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	6a12      	ldr	r2, [r2, #32]
 800f2ba:	4610      	mov	r0, r2
 800f2bc:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800f2be:	4b07      	ldr	r3, [pc, #28]	; (800f2dc <cJSON_Delete+0x90>)
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	4798      	blx	r3
        item = next;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d1c4      	bne.n	800f25a <cJSON_Delete+0xe>
    }
}
 800f2d0:	bf00      	nop
 800f2d2:	bf00      	nop
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	20000154 	.word	0x20000154

0800f2e0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800f2e4:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b098      	sub	sp, #96	; 0x60
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
    double number = 0;
 800f2fa:	f04f 0200 	mov.w	r2, #0
 800f2fe:	f04f 0300 	mov.w	r3, #0
 800f302:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800f306:	2300      	movs	r3, #0
 800f308:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800f30a:	f7ff ffe9 	bl	800f2e0 <get_decimal_point>
 800f30e:	4603      	mov	r3, r0
 800f310:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800f314:	2300      	movs	r3, #0
 800f316:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d003      	beq.n	800f326 <parse_number+0x36>
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d101      	bne.n	800f32a <parse_number+0x3a>
    {
        return false;
 800f326:	2300      	movs	r3, #0
 800f328:	e0c6      	b.n	800f4b8 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800f32a:	2300      	movs	r3, #0
 800f32c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f32e:	e063      	b.n	800f3f8 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	6899      	ldr	r1, [r3, #8]
 800f338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f33a:	440b      	add	r3, r1
 800f33c:	4413      	add	r3, r2
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	2b45      	cmp	r3, #69	; 0x45
 800f342:	dc3d      	bgt.n	800f3c0 <parse_number+0xd0>
 800f344:	2b2b      	cmp	r3, #43	; 0x2b
 800f346:	db66      	blt.n	800f416 <parse_number+0x126>
 800f348:	3b2b      	subs	r3, #43	; 0x2b
 800f34a:	2b1a      	cmp	r3, #26
 800f34c:	d863      	bhi.n	800f416 <parse_number+0x126>
 800f34e:	a201      	add	r2, pc, #4	; (adr r2, 800f354 <parse_number+0x64>)
 800f350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f354:	0800f3c5 	.word	0x0800f3c5
 800f358:	0800f417 	.word	0x0800f417
 800f35c:	0800f3c5 	.word	0x0800f3c5
 800f360:	0800f3e3 	.word	0x0800f3e3
 800f364:	0800f417 	.word	0x0800f417
 800f368:	0800f3c5 	.word	0x0800f3c5
 800f36c:	0800f3c5 	.word	0x0800f3c5
 800f370:	0800f3c5 	.word	0x0800f3c5
 800f374:	0800f3c5 	.word	0x0800f3c5
 800f378:	0800f3c5 	.word	0x0800f3c5
 800f37c:	0800f3c5 	.word	0x0800f3c5
 800f380:	0800f3c5 	.word	0x0800f3c5
 800f384:	0800f3c5 	.word	0x0800f3c5
 800f388:	0800f3c5 	.word	0x0800f3c5
 800f38c:	0800f3c5 	.word	0x0800f3c5
 800f390:	0800f417 	.word	0x0800f417
 800f394:	0800f417 	.word	0x0800f417
 800f398:	0800f417 	.word	0x0800f417
 800f39c:	0800f417 	.word	0x0800f417
 800f3a0:	0800f417 	.word	0x0800f417
 800f3a4:	0800f417 	.word	0x0800f417
 800f3a8:	0800f417 	.word	0x0800f417
 800f3ac:	0800f417 	.word	0x0800f417
 800f3b0:	0800f417 	.word	0x0800f417
 800f3b4:	0800f417 	.word	0x0800f417
 800f3b8:	0800f417 	.word	0x0800f417
 800f3bc:	0800f3c5 	.word	0x0800f3c5
 800f3c0:	2b65      	cmp	r3, #101	; 0x65
 800f3c2:	d128      	bne.n	800f416 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	681a      	ldr	r2, [r3, #0]
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	6899      	ldr	r1, [r3, #8]
 800f3cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3ce:	440b      	add	r3, r1
 800f3d0:	4413      	add	r3, r2
 800f3d2:	7819      	ldrb	r1, [r3, #0]
 800f3d4:	f107 0208 	add.w	r2, r7, #8
 800f3d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3da:	4413      	add	r3, r2
 800f3dc:	460a      	mov	r2, r1
 800f3de:	701a      	strb	r2, [r3, #0]
                break;
 800f3e0:	e007      	b.n	800f3f2 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800f3e2:	f107 0208 	add.w	r2, r7, #8
 800f3e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3e8:	4413      	add	r3, r2
 800f3ea:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f3ee:	701a      	strb	r2, [r3, #0]
                break;
 800f3f0:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800f3f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3fa:	2b3e      	cmp	r3, #62	; 0x3e
 800f3fc:	d80d      	bhi.n	800f41a <parse_number+0x12a>
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d00a      	beq.n	800f41a <parse_number+0x12a>
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	689a      	ldr	r2, [r3, #8]
 800f408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f40a:	441a      	add	r2, r3
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	429a      	cmp	r2, r3
 800f412:	d38d      	bcc.n	800f330 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800f414:	e001      	b.n	800f41a <parse_number+0x12a>
                goto loop_end;
 800f416:	bf00      	nop
 800f418:	e000      	b.n	800f41c <parse_number+0x12c>
loop_end:
 800f41a:	bf00      	nop
    number_c_string[i] = '\0';
 800f41c:	f107 0208 	add.w	r2, r7, #8
 800f420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f422:	4413      	add	r3, r2
 800f424:	2200      	movs	r2, #0
 800f426:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800f428:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f42c:	f107 0308 	add.w	r3, r7, #8
 800f430:	4611      	mov	r1, r2
 800f432:	4618      	mov	r0, r3
 800f434:	f001 ff52 	bl	80112dc <strtod>
 800f438:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800f43c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f43e:	f107 0308 	add.w	r3, r7, #8
 800f442:	429a      	cmp	r2, r3
 800f444:	d101      	bne.n	800f44a <parse_number+0x15a>
    {
        return false; /* parse_error */
 800f446:	2300      	movs	r3, #0
 800f448:	e036      	b.n	800f4b8 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800f44a:	6879      	ldr	r1, [r7, #4]
 800f44c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f450:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800f454:	a31b      	add	r3, pc, #108	; (adr r3, 800f4c4 <parse_number+0x1d4>)
 800f456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f45e:	f7f1 fb69 	bl	8000b34 <__aeabi_dcmpge>
 800f462:	4603      	mov	r3, r0
 800f464:	2b00      	cmp	r3, #0
 800f466:	d004      	beq.n	800f472 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f46e:	615a      	str	r2, [r3, #20]
 800f470:	e015      	b.n	800f49e <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800f472:	f04f 0200 	mov.w	r2, #0
 800f476:	4b12      	ldr	r3, [pc, #72]	; (800f4c0 <parse_number+0x1d0>)
 800f478:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f47c:	f7f1 fb50 	bl	8000b20 <__aeabi_dcmple>
 800f480:	4603      	mov	r3, r0
 800f482:	2b00      	cmp	r3, #0
 800f484:	d004      	beq.n	800f490 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f48c:	615a      	str	r2, [r3, #20]
 800f48e:	e006      	b.n	800f49e <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 800f490:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f494:	f7f1 fb62 	bl	8000b5c <__aeabi_d2iz>
 800f498:	4602      	mov	r2, r0
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2208      	movs	r2, #8
 800f4a2:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	689b      	ldr	r3, [r3, #8]
 800f4a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f4aa:	f107 0208 	add.w	r2, r7, #8
 800f4ae:	1a8a      	subs	r2, r1, r2
 800f4b0:	441a      	add	r2, r3
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	609a      	str	r2, [r3, #8]
    return true;
 800f4b6:	2301      	movs	r3, #1
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3760      	adds	r7, #96	; 0x60
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	c1e00000 	.word	0xc1e00000
 800f4c4:	ffc00000 	.word	0xffc00000
 800f4c8:	41dfffff 	.word	0x41dfffff

0800f4cc <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800f4dc:	2300      	movs	r3, #0
 800f4de:	60bb      	str	r3, [r7, #8]
 800f4e0:	e04c      	b.n	800f57c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	4413      	add	r3, r2
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b2f      	cmp	r3, #47	; 0x2f
 800f4ec:	d90f      	bls.n	800f50e <parse_hex4+0x42>
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	2b39      	cmp	r3, #57	; 0x39
 800f4f8:	d809      	bhi.n	800f50e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	4413      	add	r3, r2
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	461a      	mov	r2, r3
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	4413      	add	r3, r2
 800f508:	3b30      	subs	r3, #48	; 0x30
 800f50a:	60fb      	str	r3, [r7, #12]
 800f50c:	e02d      	b.n	800f56a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	4413      	add	r3, r2
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	2b40      	cmp	r3, #64	; 0x40
 800f518:	d90f      	bls.n	800f53a <parse_hex4+0x6e>
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	4413      	add	r3, r2
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	2b46      	cmp	r3, #70	; 0x46
 800f524:	d809      	bhi.n	800f53a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	4413      	add	r3, r2
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	461a      	mov	r2, r3
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	4413      	add	r3, r2
 800f534:	3b37      	subs	r3, #55	; 0x37
 800f536:	60fb      	str	r3, [r7, #12]
 800f538:	e017      	b.n	800f56a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800f53a:	687a      	ldr	r2, [r7, #4]
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	4413      	add	r3, r2
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	2b60      	cmp	r3, #96	; 0x60
 800f544:	d90f      	bls.n	800f566 <parse_hex4+0x9a>
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	4413      	add	r3, r2
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	2b66      	cmp	r3, #102	; 0x66
 800f550:	d809      	bhi.n	800f566 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	4413      	add	r3, r2
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	461a      	mov	r2, r3
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	4413      	add	r3, r2
 800f560:	3b57      	subs	r3, #87	; 0x57
 800f562:	60fb      	str	r3, [r7, #12]
 800f564:	e001      	b.n	800f56a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800f566:	2300      	movs	r3, #0
 800f568:	e00c      	b.n	800f584 <parse_hex4+0xb8>
        }

        if (i < 3)
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	d802      	bhi.n	800f576 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	011b      	lsls	r3, r3, #4
 800f574:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	3301      	adds	r3, #1
 800f57a:	60bb      	str	r3, [r7, #8]
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	2b03      	cmp	r3, #3
 800f580:	d9af      	bls.n	800f4e2 <parse_hex4+0x16>
        }
    }

    return h;
 800f582:	68fb      	ldr	r3, [r7, #12]
}
 800f584:	4618      	mov	r0, r3
 800f586:	3714      	adds	r7, #20
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b08a      	sub	sp, #40	; 0x28
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800f59c:	2300      	movs	r3, #0
 800f59e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800f5c0:	68ba      	ldr	r2, [r7, #8]
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	2b05      	cmp	r3, #5
 800f5c8:	f340 80b7 	ble.w	800f73a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	3302      	adds	r3, #2
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff ff7b 	bl	800f4cc <parse_hex4>
 800f5d6:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f5de:	d304      	bcc.n	800f5ea <utf16_literal_to_utf8+0x5a>
 800f5e0:	69fb      	ldr	r3, [r7, #28]
 800f5e2:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800f5e6:	f0c0 80aa 	bcc.w	800f73e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800f5f0:	d337      	bcc.n	800f662 <utf16_literal_to_utf8+0xd2>
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f5f8:	d233      	bcs.n	800f662 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	3306      	adds	r3, #6
 800f5fe:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800f600:	2300      	movs	r3, #0
 800f602:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800f604:	230c      	movs	r3, #12
 800f606:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800f60a:	68ba      	ldr	r2, [r7, #8]
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	2b05      	cmp	r3, #5
 800f612:	f340 8096 	ble.w	800f742 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	2b5c      	cmp	r3, #92	; 0x5c
 800f61c:	f040 8093 	bne.w	800f746 <utf16_literal_to_utf8+0x1b6>
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	3301      	adds	r3, #1
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	2b75      	cmp	r3, #117	; 0x75
 800f628:	f040 808d 	bne.w	800f746 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	3302      	adds	r3, #2
 800f630:	4618      	mov	r0, r3
 800f632:	f7ff ff4b 	bl	800f4cc <parse_hex4>
 800f636:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f63e:	f0c0 8084 	bcc.w	800f74a <utf16_literal_to_utf8+0x1ba>
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800f648:	d27f      	bcs.n	800f74a <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	029a      	lsls	r2, r3, #10
 800f64e:	4b43      	ldr	r3, [pc, #268]	; (800f75c <utf16_literal_to_utf8+0x1cc>)
 800f650:	4013      	ands	r3, r2
 800f652:	693a      	ldr	r2, [r7, #16]
 800f654:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f658:	4313      	orrs	r3, r2
 800f65a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f65e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800f660:	e004      	b.n	800f66c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800f662:	2306      	movs	r3, #6
 800f664:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800f66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66e:	2b7f      	cmp	r3, #127	; 0x7f
 800f670:	d803      	bhi.n	800f67a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800f672:	2301      	movs	r3, #1
 800f674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f678:	e01f      	b.n	800f6ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800f67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f680:	d206      	bcs.n	800f690 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800f682:	2302      	movs	r3, #2
 800f684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800f688:	23c0      	movs	r3, #192	; 0xc0
 800f68a:	f887 3020 	strb.w	r3, [r7, #32]
 800f68e:	e014      	b.n	800f6ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800f690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f696:	d206      	bcs.n	800f6a6 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800f698:	2303      	movs	r3, #3
 800f69a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800f69e:	23e0      	movs	r3, #224	; 0xe0
 800f6a0:	f887 3020 	strb.w	r3, [r7, #32]
 800f6a4:	e009      	b.n	800f6ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800f6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800f6ac:	d24f      	bcs.n	800f74e <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800f6ae:	2304      	movs	r3, #4
 800f6b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800f6b4:	23f0      	movs	r3, #240	; 0xf0
 800f6b6:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800f6ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f6be:	3b01      	subs	r3, #1
 800f6c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f6c4:	e015      	b.n	800f6f2 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800f6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6ce:	b2da      	uxtb	r2, r3
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6819      	ldr	r1, [r3, #0]
 800f6d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f6d8:	440b      	add	r3, r1
 800f6da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f6de:	b2d2      	uxtb	r2, r2
 800f6e0:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800f6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e4:	099b      	lsrs	r3, r3, #6
 800f6e6:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800f6e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f6f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1e5      	bne.n	800f6c6 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800f6fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d909      	bls.n	800f716 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800f702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f704:	b2d9      	uxtb	r1, r3
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f70e:	430a      	orrs	r2, r1
 800f710:	b2d2      	uxtb	r2, r2
 800f712:	701a      	strb	r2, [r3, #0]
 800f714:	e007      	b.n	800f726 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f718:	b2da      	uxtb	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f722:	b2d2      	uxtb	r2, r2
 800f724:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f72e:	441a      	add	r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800f734:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f738:	e00b      	b.n	800f752 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800f73a:	bf00      	nop
 800f73c:	e008      	b.n	800f750 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800f73e:	bf00      	nop
 800f740:	e006      	b.n	800f750 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f742:	bf00      	nop
 800f744:	e004      	b.n	800f750 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f746:	bf00      	nop
 800f748:	e002      	b.n	800f750 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f74a:	bf00      	nop
 800f74c:	e000      	b.n	800f750 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800f74e:	bf00      	nop

fail:
    return 0;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3728      	adds	r7, #40	; 0x28
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	000ffc00 	.word	0x000ffc00

0800f760 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b08a      	sub	sp, #40	; 0x28
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	689b      	ldr	r3, [r3, #8]
 800f772:	3301      	adds	r3, #1
 800f774:	4413      	add	r3, r2
 800f776:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	681a      	ldr	r2, [r3, #0]
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	3301      	adds	r3, #1
 800f782:	4413      	add	r3, r2
 800f784:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800f786:	2300      	movs	r3, #0
 800f788:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800f78a:	2300      	movs	r3, #0
 800f78c:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	4413      	add	r3, r2
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	2b22      	cmp	r3, #34	; 0x22
 800f79c:	f040 8102 	bne.w	800f9a4 <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800f7a8:	e017      	b.n	800f7da <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800f7aa:	6a3b      	ldr	r3, [r7, #32]
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	2b5c      	cmp	r3, #92	; 0x5c
 800f7b0:	d110      	bne.n	800f7d4 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800f7b2:	6a3b      	ldr	r3, [r7, #32]
 800f7b4:	1c5a      	adds	r2, r3, #1
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	1ad3      	subs	r3, r2, r3
 800f7bc:	461a      	mov	r2, r3
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	f080 80f0 	bcs.w	800f9a8 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	61bb      	str	r3, [r7, #24]
                input_end++;
 800f7ce:	6a3b      	ldr	r3, [r7, #32]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800f7d4:	6a3b      	ldr	r3, [r7, #32]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	6a3a      	ldr	r2, [r7, #32]
 800f7e0:	1ad3      	subs	r3, r2, r3
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d203      	bcs.n	800f7f4 <parse_string+0x94>
 800f7ec:	6a3b      	ldr	r3, [r7, #32]
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	2b22      	cmp	r3, #34	; 0x22
 800f7f2:	d1da      	bne.n	800f7aa <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	6a3a      	ldr	r2, [r7, #32]
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	429a      	cmp	r2, r3
 800f804:	f080 80d2 	bcs.w	800f9ac <parse_string+0x24c>
 800f808:	6a3b      	ldr	r3, [r7, #32]
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	2b22      	cmp	r3, #34	; 0x22
 800f80e:	f040 80cd 	bne.w	800f9ac <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	4413      	add	r3, r2
 800f81c:	6a3a      	ldr	r2, [r7, #32]
 800f81e:	1ad3      	subs	r3, r2, r3
 800f820:	461a      	mov	r2, r3
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	1ad3      	subs	r3, r2, r3
 800f826:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	691b      	ldr	r3, [r3, #16]
 800f82c:	693a      	ldr	r2, [r7, #16]
 800f82e:	3201      	adds	r2, #1
 800f830:	4610      	mov	r0, r2
 800f832:	4798      	blx	r3
 800f834:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	f000 80b9 	beq.w	800f9b0 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800f842:	e093      	b.n	800f96c <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800f844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	2b5c      	cmp	r3, #92	; 0x5c
 800f84a:	d008      	beq.n	800f85e <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800f84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f84e:	1c53      	adds	r3, r2, #1
 800f850:	627b      	str	r3, [r7, #36]	; 0x24
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	1c59      	adds	r1, r3, #1
 800f856:	60f9      	str	r1, [r7, #12]
 800f858:	7812      	ldrb	r2, [r2, #0]
 800f85a:	701a      	strb	r2, [r3, #0]
 800f85c:	e086      	b.n	800f96c <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800f85e:	2302      	movs	r3, #2
 800f860:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800f862:	6a3a      	ldr	r2, [r7, #32]
 800f864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	2b00      	cmp	r3, #0
 800f86a:	f340 80a3 	ble.w	800f9b4 <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800f86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f870:	3301      	adds	r3, #1
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	2b75      	cmp	r3, #117	; 0x75
 800f876:	f300 809f 	bgt.w	800f9b8 <parse_string+0x258>
 800f87a:	2b5c      	cmp	r3, #92	; 0x5c
 800f87c:	da04      	bge.n	800f888 <parse_string+0x128>
 800f87e:	2b22      	cmp	r3, #34	; 0x22
 800f880:	d05c      	beq.n	800f93c <parse_string+0x1dc>
 800f882:	2b2f      	cmp	r3, #47	; 0x2f
 800f884:	d05a      	beq.n	800f93c <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800f886:	e097      	b.n	800f9b8 <parse_string+0x258>
 800f888:	3b5c      	subs	r3, #92	; 0x5c
 800f88a:	2b19      	cmp	r3, #25
 800f88c:	f200 8094 	bhi.w	800f9b8 <parse_string+0x258>
 800f890:	a201      	add	r2, pc, #4	; (adr r2, 800f898 <parse_string+0x138>)
 800f892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f896:	bf00      	nop
 800f898:	0800f93d 	.word	0x0800f93d
 800f89c:	0800f9b9 	.word	0x0800f9b9
 800f8a0:	0800f9b9 	.word	0x0800f9b9
 800f8a4:	0800f9b9 	.word	0x0800f9b9
 800f8a8:	0800f9b9 	.word	0x0800f9b9
 800f8ac:	0800f9b9 	.word	0x0800f9b9
 800f8b0:	0800f901 	.word	0x0800f901
 800f8b4:	0800f9b9 	.word	0x0800f9b9
 800f8b8:	0800f9b9 	.word	0x0800f9b9
 800f8bc:	0800f9b9 	.word	0x0800f9b9
 800f8c0:	0800f90d 	.word	0x0800f90d
 800f8c4:	0800f9b9 	.word	0x0800f9b9
 800f8c8:	0800f9b9 	.word	0x0800f9b9
 800f8cc:	0800f9b9 	.word	0x0800f9b9
 800f8d0:	0800f9b9 	.word	0x0800f9b9
 800f8d4:	0800f9b9 	.word	0x0800f9b9
 800f8d8:	0800f9b9 	.word	0x0800f9b9
 800f8dc:	0800f9b9 	.word	0x0800f9b9
 800f8e0:	0800f919 	.word	0x0800f919
 800f8e4:	0800f9b9 	.word	0x0800f9b9
 800f8e8:	0800f9b9 	.word	0x0800f9b9
 800f8ec:	0800f9b9 	.word	0x0800f9b9
 800f8f0:	0800f925 	.word	0x0800f925
 800f8f4:	0800f9b9 	.word	0x0800f9b9
 800f8f8:	0800f931 	.word	0x0800f931
 800f8fc:	0800f94b 	.word	0x0800f94b
                    *output_pointer++ = '\b';
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	1c5a      	adds	r2, r3, #1
 800f904:	60fa      	str	r2, [r7, #12]
 800f906:	2208      	movs	r2, #8
 800f908:	701a      	strb	r2, [r3, #0]
                    break;
 800f90a:	e02b      	b.n	800f964 <parse_string+0x204>
                    *output_pointer++ = '\f';
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	1c5a      	adds	r2, r3, #1
 800f910:	60fa      	str	r2, [r7, #12]
 800f912:	220c      	movs	r2, #12
 800f914:	701a      	strb	r2, [r3, #0]
                    break;
 800f916:	e025      	b.n	800f964 <parse_string+0x204>
                    *output_pointer++ = '\n';
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	1c5a      	adds	r2, r3, #1
 800f91c:	60fa      	str	r2, [r7, #12]
 800f91e:	220a      	movs	r2, #10
 800f920:	701a      	strb	r2, [r3, #0]
                    break;
 800f922:	e01f      	b.n	800f964 <parse_string+0x204>
                    *output_pointer++ = '\r';
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	1c5a      	adds	r2, r3, #1
 800f928:	60fa      	str	r2, [r7, #12]
 800f92a:	220d      	movs	r2, #13
 800f92c:	701a      	strb	r2, [r3, #0]
                    break;
 800f92e:	e019      	b.n	800f964 <parse_string+0x204>
                    *output_pointer++ = '\t';
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	1c5a      	adds	r2, r3, #1
 800f934:	60fa      	str	r2, [r7, #12]
 800f936:	2209      	movs	r2, #9
 800f938:	701a      	strb	r2, [r3, #0]
                    break;
 800f93a:	e013      	b.n	800f964 <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	1c5a      	adds	r2, r3, #1
 800f940:	60fa      	str	r2, [r7, #12]
 800f942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f944:	7852      	ldrb	r2, [r2, #1]
 800f946:	701a      	strb	r2, [r3, #0]
                    break;
 800f948:	e00c      	b.n	800f964 <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800f94a:	f107 030c 	add.w	r3, r7, #12
 800f94e:	461a      	mov	r2, r3
 800f950:	6a39      	ldr	r1, [r7, #32]
 800f952:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f954:	f7ff fe1c 	bl	800f590 <utf16_literal_to_utf8>
 800f958:	4603      	mov	r3, r0
 800f95a:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800f95c:	7dfb      	ldrb	r3, [r7, #23]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d02c      	beq.n	800f9bc <parse_string+0x25c>
                    break;
 800f962:	bf00      	nop
            }
            input_pointer += sequence_length;
 800f964:	7dfb      	ldrb	r3, [r7, #23]
 800f966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f968:	4413      	add	r3, r2
 800f96a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800f96c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f96e:	6a3b      	ldr	r3, [r7, #32]
 800f970:	429a      	cmp	r2, r3
 800f972:	f4ff af67 	bcc.w	800f844 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2210      	movs	r2, #16
 800f980:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	69fa      	ldr	r2, [r7, #28]
 800f986:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	6a3a      	ldr	r2, [r7, #32]
 800f98e:	1ad3      	subs	r3, r2, r3
 800f990:	461a      	mov	r2, r3
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	1c5a      	adds	r2, r3, #1
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	609a      	str	r2, [r3, #8]

    return true;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	e01e      	b.n	800f9e2 <parse_string+0x282>
        goto fail;
 800f9a4:	bf00      	nop
 800f9a6:	e00a      	b.n	800f9be <parse_string+0x25e>
                    goto fail;
 800f9a8:	bf00      	nop
 800f9aa:	e008      	b.n	800f9be <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 800f9ac:	bf00      	nop
 800f9ae:	e006      	b.n	800f9be <parse_string+0x25e>
            goto fail; /* allocation failure */
 800f9b0:	bf00      	nop
 800f9b2:	e004      	b.n	800f9be <parse_string+0x25e>
                goto fail;
 800f9b4:	bf00      	nop
 800f9b6:	e002      	b.n	800f9be <parse_string+0x25e>
                    goto fail;
 800f9b8:	bf00      	nop
 800f9ba:	e000      	b.n	800f9be <parse_string+0x25e>
                        goto fail;
 800f9bc:	bf00      	nop

fail:
    if (output != NULL)
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d003      	beq.n	800f9cc <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	695b      	ldr	r3, [r3, #20]
 800f9c8:	69f8      	ldr	r0, [r7, #28]
 800f9ca:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800f9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d006      	beq.n	800f9e0 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9d8:	1ad3      	subs	r3, r2, r3
 800f9da:	461a      	mov	r2, r3
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	609a      	str	r2, [r3, #8]
    }

    return false;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3728      	adds	r7, #40	; 0x28
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop

0800f9ec <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d003      	beq.n	800fa02 <buffer_skip_whitespace+0x16>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d101      	bne.n	800fa06 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800fa02:	2300      	movs	r3, #0
 800fa04:	e02c      	b.n	800fa60 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d005      	beq.n	800fa18 <buffer_skip_whitespace+0x2c>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	689a      	ldr	r2, [r3, #8]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d306      	bcc.n	800fa26 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	e021      	b.n	800fa60 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	689b      	ldr	r3, [r3, #8]
 800fa20:	1c5a      	adds	r2, r3, #1
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d00d      	beq.n	800fa48 <buffer_skip_whitespace+0x5c>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	689a      	ldr	r2, [r3, #8]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d207      	bcs.n	800fa48 <buffer_skip_whitespace+0x5c>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	689b      	ldr	r3, [r3, #8]
 800fa40:	4413      	add	r3, r2
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	2b20      	cmp	r3, #32
 800fa46:	d9e9      	bls.n	800fa1c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	689a      	ldr	r2, [r3, #8]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d104      	bne.n	800fa5e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	689b      	ldr	r3, [r3, #8]
 800fa58:	1e5a      	subs	r2, r3, #1
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800fa5e:	687b      	ldr	r3, [r7, #4]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d007      	beq.n	800fa8a <skip_utf8_bom+0x1e>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d003      	beq.n	800fa8a <skip_utf8_bom+0x1e>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	689b      	ldr	r3, [r3, #8]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d001      	beq.n	800fa8e <skip_utf8_bom+0x22>
    {
        return NULL;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	e01c      	b.n	800fac8 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d018      	beq.n	800fac6 <skip_utf8_bom+0x5a>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	689b      	ldr	r3, [r3, #8]
 800fa98:	1d1a      	adds	r2, r3, #4
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d211      	bcs.n	800fac6 <skip_utf8_bom+0x5a>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681a      	ldr	r2, [r3, #0]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	4413      	add	r3, r2
 800faac:	2203      	movs	r2, #3
 800faae:	4908      	ldr	r1, [pc, #32]	; (800fad0 <skip_utf8_bom+0x64>)
 800fab0:	4618      	mov	r0, r3
 800fab2:	f000 fdd8 	bl	8010666 <strncmp>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d104      	bne.n	800fac6 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	1cda      	adds	r2, r3, #3
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800fac6:	687b      	ldr	r3, [r7, #4]
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}
 800fad0:	0801372c 	.word	0x0801372c

0800fad4 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b086      	sub	sp, #24
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d101      	bne.n	800faea <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800fae6:	2300      	movs	r3, #0
 800fae8:	e00c      	b.n	800fb04 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800faea:	68f8      	ldr	r0, [r7, #12]
 800faec:	f7f0 fb82 	bl	80001f4 <strlen>
 800faf0:	4603      	mov	r3, r0
 800faf2:	3301      	adds	r3, #1
 800faf4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	68ba      	ldr	r2, [r7, #8]
 800fafa:	6979      	ldr	r1, [r7, #20]
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f000 f805 	bl	800fb0c <cJSON_ParseWithLengthOpts>
 800fb02:	4603      	mov	r3, r0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3718      	adds	r7, #24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b08e      	sub	sp, #56	; 0x38
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
 800fb18:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800fb1a:	f107 0318 	add.w	r3, r7, #24
 800fb1e:	2200      	movs	r2, #0
 800fb20:	601a      	str	r2, [r3, #0]
 800fb22:	605a      	str	r2, [r3, #4]
 800fb24:	609a      	str	r2, [r3, #8]
 800fb26:	60da      	str	r2, [r3, #12]
 800fb28:	611a      	str	r2, [r3, #16]
 800fb2a:	615a      	str	r2, [r3, #20]
 800fb2c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800fb32:	4b41      	ldr	r3, [pc, #260]	; (800fc38 <cJSON_ParseWithLengthOpts+0x12c>)
 800fb34:	2200      	movs	r2, #0
 800fb36:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800fb38:	4b3f      	ldr	r3, [pc, #252]	; (800fc38 <cJSON_ParseWithLengthOpts+0x12c>)
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d042      	beq.n	800fbca <cJSON_ParseWithLengthOpts+0xbe>
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d03f      	beq.n	800fbca <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800fb52:	2300      	movs	r3, #0
 800fb54:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800fb56:	4a39      	ldr	r2, [pc, #228]	; (800fc3c <cJSON_ParseWithLengthOpts+0x130>)
 800fb58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb5c:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800fb62:	4836      	ldr	r0, [pc, #216]	; (800fc3c <cJSON_ParseWithLengthOpts+0x130>)
 800fb64:	f7ff fb5c 	bl	800f220 <cJSON_New_Item>
 800fb68:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800fb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d02e      	beq.n	800fbce <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800fb70:	f107 0318 	add.w	r3, r7, #24
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7ff ff79 	bl	800fa6c <skip_utf8_bom>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7ff ff35 	bl	800f9ec <buffer_skip_whitespace>
 800fb82:	4603      	mov	r3, r0
 800fb84:	4619      	mov	r1, r3
 800fb86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb88:	f000 f868 	bl	800fc5c <parse_value>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d01f      	beq.n	800fbd2 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d00e      	beq.n	800fbb6 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800fb98:	f107 0318 	add.w	r3, r7, #24
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7ff ff25 	bl	800f9ec <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800fba2:	6a3a      	ldr	r2, [r7, #32]
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d215      	bcs.n	800fbd6 <cJSON_ParseWithLengthOpts+0xca>
 800fbaa:	69ba      	ldr	r2, [r7, #24]
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	4413      	add	r3, r2
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d10f      	bne.n	800fbd6 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d004      	beq.n	800fbc6 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800fbbc:	69ba      	ldr	r2, [r7, #24]
 800fbbe:	6a3b      	ldr	r3, [r7, #32]
 800fbc0:	441a      	add	r2, r3
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	601a      	str	r2, [r3, #0]
    }

    return item;
 800fbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbc8:	e031      	b.n	800fc2e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800fbca:	bf00      	nop
 800fbcc:	e004      	b.n	800fbd8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800fbce:	bf00      	nop
 800fbd0:	e002      	b.n	800fbd8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800fbd2:	bf00      	nop
 800fbd4:	e000      	b.n	800fbd8 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800fbd6:	bf00      	nop

fail:
    if (item != NULL)
 800fbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d002      	beq.n	800fbe4 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800fbde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fbe0:	f7ff fb34 	bl	800f24c <cJSON_Delete>
    }

    if (value != NULL)
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d020      	beq.n	800fc2c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800fbf2:	6a3a      	ldr	r2, [r7, #32]
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d202      	bcs.n	800fc00 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800fbfa:	6a3b      	ldr	r3, [r7, #32]
 800fbfc:	617b      	str	r3, [r7, #20]
 800fbfe:	e005      	b.n	800fc0c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d002      	beq.n	800fc0c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	3b01      	subs	r3, #1
 800fc0a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d004      	beq.n	800fc1c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800fc12:	693a      	ldr	r2, [r7, #16]
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	441a      	add	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800fc1c:	4b06      	ldr	r3, [pc, #24]	; (800fc38 <cJSON_ParseWithLengthOpts+0x12c>)
 800fc1e:	461a      	mov	r2, r3
 800fc20:	f107 0310 	add.w	r3, r7, #16
 800fc24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc28:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3738      	adds	r7, #56	; 0x38
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	20002570 	.word	0x20002570
 800fc3c:	20000154 	.word	0x20000154

0800fc40 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f7ff ff41 	bl	800fad4 <cJSON_ParseWithOpts>
 800fc52:	4603      	mov	r3, r0
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d003      	beq.n	800fc74 <parse_value+0x18>
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d101      	bne.n	800fc78 <parse_value+0x1c>
    {
        return false; /* no input */
 800fc74:	2300      	movs	r3, #0
 800fc76:	e0d2      	b.n	800fe1e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d01d      	beq.n	800fcba <parse_value+0x5e>
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	1d1a      	adds	r2, r3, #4
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d816      	bhi.n	800fcba <parse_value+0x5e>
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	689b      	ldr	r3, [r3, #8]
 800fc94:	4413      	add	r3, r2
 800fc96:	2204      	movs	r2, #4
 800fc98:	4963      	ldr	r1, [pc, #396]	; (800fe28 <parse_value+0x1cc>)
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f000 fce3 	bl	8010666 <strncmp>
 800fca0:	4603      	mov	r3, r0
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d109      	bne.n	800fcba <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2204      	movs	r2, #4
 800fcaa:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	1d1a      	adds	r2, r3, #4
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	609a      	str	r2, [r3, #8]
        return true;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e0b1      	b.n	800fe1e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d01d      	beq.n	800fcfc <parse_value+0xa0>
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	689b      	ldr	r3, [r3, #8]
 800fcc4:	1d5a      	adds	r2, r3, #5
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	685b      	ldr	r3, [r3, #4]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d816      	bhi.n	800fcfc <parse_value+0xa0>
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	689b      	ldr	r3, [r3, #8]
 800fcd6:	4413      	add	r3, r2
 800fcd8:	2205      	movs	r2, #5
 800fcda:	4954      	ldr	r1, [pc, #336]	; (800fe2c <parse_value+0x1d0>)
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f000 fcc2 	bl	8010666 <strncmp>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d109      	bne.n	800fcfc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2201      	movs	r2, #1
 800fcec:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	1d5a      	adds	r2, r3, #5
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	609a      	str	r2, [r3, #8]
        return true;
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	e090      	b.n	800fe1e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d020      	beq.n	800fd44 <parse_value+0xe8>
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	689b      	ldr	r3, [r3, #8]
 800fd06:	1d1a      	adds	r2, r3, #4
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d819      	bhi.n	800fd44 <parse_value+0xe8>
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	689b      	ldr	r3, [r3, #8]
 800fd18:	4413      	add	r3, r2
 800fd1a:	2204      	movs	r2, #4
 800fd1c:	4944      	ldr	r1, [pc, #272]	; (800fe30 <parse_value+0x1d4>)
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f000 fca1 	bl	8010666 <strncmp>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d10c      	bne.n	800fd44 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2202      	movs	r2, #2
 800fd2e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2201      	movs	r2, #1
 800fd34:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	689b      	ldr	r3, [r3, #8]
 800fd3a:	1d1a      	adds	r2, r3, #4
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	609a      	str	r2, [r3, #8]
        return true;
 800fd40:	2301      	movs	r3, #1
 800fd42:	e06c      	b.n	800fe1e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d013      	beq.n	800fd72 <parse_value+0x116>
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	689a      	ldr	r2, [r3, #8]
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d20d      	bcs.n	800fd72 <parse_value+0x116>
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	4413      	add	r3, r2
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	2b22      	cmp	r3, #34	; 0x22
 800fd64:	d105      	bne.n	800fd72 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800fd66:	6839      	ldr	r1, [r7, #0]
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f7ff fcf9 	bl	800f760 <parse_string>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	e055      	b.n	800fe1e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d023      	beq.n	800fdc0 <parse_value+0x164>
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	689a      	ldr	r2, [r3, #8]
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d21d      	bcs.n	800fdc0 <parse_value+0x164>
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	689b      	ldr	r3, [r3, #8]
 800fd8c:	4413      	add	r3, r2
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	2b2d      	cmp	r3, #45	; 0x2d
 800fd92:	d00f      	beq.n	800fdb4 <parse_value+0x158>
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	681a      	ldr	r2, [r3, #0]
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	4413      	add	r3, r2
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	2b2f      	cmp	r3, #47	; 0x2f
 800fda2:	d90d      	bls.n	800fdc0 <parse_value+0x164>
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	4413      	add	r3, r2
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	2b39      	cmp	r3, #57	; 0x39
 800fdb2:	d805      	bhi.n	800fdc0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800fdb4:	6839      	ldr	r1, [r7, #0]
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7ff fa9a 	bl	800f2f0 <parse_number>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	e02e      	b.n	800fe1e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d013      	beq.n	800fdee <parse_value+0x192>
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	689a      	ldr	r2, [r3, #8]
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d20d      	bcs.n	800fdee <parse_value+0x192>
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	4413      	add	r3, r2
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	2b5b      	cmp	r3, #91	; 0x5b
 800fde0:	d105      	bne.n	800fdee <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800fde2:	6839      	ldr	r1, [r7, #0]
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 f825 	bl	800fe34 <parse_array>
 800fdea:	4603      	mov	r3, r0
 800fdec:	e017      	b.n	800fe1e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d013      	beq.n	800fe1c <parse_value+0x1c0>
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	689a      	ldr	r2, [r3, #8]
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d20d      	bcs.n	800fe1c <parse_value+0x1c0>
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	689b      	ldr	r3, [r3, #8]
 800fe08:	4413      	add	r3, r2
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	2b7b      	cmp	r3, #123	; 0x7b
 800fe0e:	d105      	bne.n	800fe1c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800fe10:	6839      	ldr	r1, [r7, #0]
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f000 f8d2 	bl	800ffbc <parse_object>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	e000      	b.n	800fe1e <parse_value+0x1c2>
    }

    return false;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3708      	adds	r7, #8
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	08013704 	.word	0x08013704
 800fe2c:	08013730 	.word	0x08013730
 800fe30:	08013738 	.word	0x08013738

0800fe34 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b086      	sub	sp, #24
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800fe3e:	2300      	movs	r3, #0
 800fe40:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800fe42:	2300      	movs	r3, #0
 800fe44:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fe4e:	d301      	bcc.n	800fe54 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800fe50:	2300      	movs	r3, #0
 800fe52:	e0af      	b.n	800ffb4 <parse_array+0x180>
    }
    input_buffer->depth++;
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	68db      	ldr	r3, [r3, #12]
 800fe58:	1c5a      	adds	r2, r3, #1
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	689b      	ldr	r3, [r3, #8]
 800fe66:	4413      	add	r3, r2
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	2b5b      	cmp	r3, #91	; 0x5b
 800fe6c:	f040 8094 	bne.w	800ff98 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	689b      	ldr	r3, [r3, #8]
 800fe74:	1c5a      	adds	r2, r3, #1
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800fe7a:	6838      	ldr	r0, [r7, #0]
 800fe7c:	f7ff fdb6 	bl	800f9ec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d00d      	beq.n	800fea2 <parse_array+0x6e>
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	689a      	ldr	r2, [r3, #8]
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d207      	bcs.n	800fea2 <parse_array+0x6e>
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	689b      	ldr	r3, [r3, #8]
 800fe9a:	4413      	add	r3, r2
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	2b5d      	cmp	r3, #93	; 0x5d
 800fea0:	d061      	beq.n	800ff66 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d005      	beq.n	800feb4 <parse_array+0x80>
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	689a      	ldr	r2, [r3, #8]
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d305      	bcc.n	800fec0 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	689b      	ldr	r3, [r3, #8]
 800feb8:	1e5a      	subs	r2, r3, #1
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	609a      	str	r2, [r3, #8]
        goto fail;
 800febe:	e072      	b.n	800ffa6 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	689b      	ldr	r3, [r3, #8]
 800fec4:	1e5a      	subs	r2, r3, #1
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	3310      	adds	r3, #16
 800fece:	4618      	mov	r0, r3
 800fed0:	f7ff f9a6 	bl	800f220 <cJSON_New_Item>
 800fed4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d05f      	beq.n	800ff9c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d104      	bne.n	800feec <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	617b      	str	r3, [r7, #20]
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	613b      	str	r3, [r7, #16]
 800feea:	e007      	b.n	800fefc <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	68fa      	ldr	r2, [r7, #12]
 800fef0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	693a      	ldr	r2, [r7, #16]
 800fef6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800ff06:	6838      	ldr	r0, [r7, #0]
 800ff08:	f7ff fd70 	bl	800f9ec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800ff0c:	6839      	ldr	r1, [r7, #0]
 800ff0e:	6938      	ldr	r0, [r7, #16]
 800ff10:	f7ff fea4 	bl	800fc5c <parse_value>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d042      	beq.n	800ffa0 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800ff1a:	6838      	ldr	r0, [r7, #0]
 800ff1c:	f7ff fd66 	bl	800f9ec <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d00d      	beq.n	800ff42 <parse_array+0x10e>
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	689a      	ldr	r2, [r3, #8]
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d207      	bcs.n	800ff42 <parse_array+0x10e>
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	689b      	ldr	r3, [r3, #8]
 800ff3a:	4413      	add	r3, r2
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	2b2c      	cmp	r3, #44	; 0x2c
 800ff40:	d0c3      	beq.n	800feca <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d02d      	beq.n	800ffa4 <parse_array+0x170>
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	689a      	ldr	r2, [r3, #8]
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d227      	bcs.n	800ffa4 <parse_array+0x170>
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	2b5d      	cmp	r3, #93	; 0x5d
 800ff62:	d11f      	bne.n	800ffa4 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800ff64:	e000      	b.n	800ff68 <parse_array+0x134>
        goto success;
 800ff66:	bf00      	nop
    input_buffer->depth--;
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	1e5a      	subs	r2, r3, #1
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d002      	beq.n	800ff7e <parse_array+0x14a>
        head->prev = current_item;
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	693a      	ldr	r2, [r7, #16]
 800ff7c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2220      	movs	r2, #32
 800ff82:	60da      	str	r2, [r3, #12]
    item->child = head;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	697a      	ldr	r2, [r7, #20]
 800ff88:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	689b      	ldr	r3, [r3, #8]
 800ff8e:	1c5a      	adds	r2, r3, #1
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	609a      	str	r2, [r3, #8]

    return true;
 800ff94:	2301      	movs	r3, #1
 800ff96:	e00d      	b.n	800ffb4 <parse_array+0x180>
        goto fail;
 800ff98:	bf00      	nop
 800ff9a:	e004      	b.n	800ffa6 <parse_array+0x172>
            goto fail; /* allocation failure */
 800ff9c:	bf00      	nop
 800ff9e:	e002      	b.n	800ffa6 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800ffa0:	bf00      	nop
 800ffa2:	e000      	b.n	800ffa6 <parse_array+0x172>
        goto fail; /* expected end of array */
 800ffa4:	bf00      	nop

fail:
    if (head != NULL)
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d002      	beq.n	800ffb2 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800ffac:	6978      	ldr	r0, [r7, #20]
 800ffae:	f7ff f94d 	bl	800f24c <cJSON_Delete>
    }

    return false;
 800ffb2:	2300      	movs	r3, #0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3718      	adds	r7, #24
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b086      	sub	sp, #24
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ffd6:	d301      	bcc.n	800ffdc <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800ffd8:	2300      	movs	r3, #0
 800ffda:	e0ea      	b.n	80101b2 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	1c5a      	adds	r2, r3, #1
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	f000 80d0 	beq.w	801018e <parse_object+0x1d2>
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	689a      	ldr	r2, [r3, #8]
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	f080 80c9 	bcs.w	801018e <parse_object+0x1d2>
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	689b      	ldr	r3, [r3, #8]
 8010004:	4413      	add	r3, r2
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	2b7b      	cmp	r3, #123	; 0x7b
 801000a:	f040 80c0 	bne.w	801018e <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	1c5a      	adds	r2, r3, #1
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8010018:	6838      	ldr	r0, [r7, #0]
 801001a:	f7ff fce7 	bl	800f9ec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d00e      	beq.n	8010042 <parse_object+0x86>
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	689a      	ldr	r2, [r3, #8]
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	429a      	cmp	r2, r3
 801002e:	d208      	bcs.n	8010042 <parse_object+0x86>
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	689b      	ldr	r3, [r3, #8]
 8010038:	4413      	add	r3, r2
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	2b7d      	cmp	r3, #125	; 0x7d
 801003e:	f000 808d 	beq.w	801015c <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d005      	beq.n	8010054 <parse_object+0x98>
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	689a      	ldr	r2, [r3, #8]
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	429a      	cmp	r2, r3
 8010052:	d305      	bcc.n	8010060 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	689b      	ldr	r3, [r3, #8]
 8010058:	1e5a      	subs	r2, r3, #1
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	609a      	str	r2, [r3, #8]
        goto fail;
 801005e:	e0a1      	b.n	80101a4 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	1e5a      	subs	r2, r3, #1
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	3310      	adds	r3, #16
 801006e:	4618      	mov	r0, r3
 8010070:	f7ff f8d6 	bl	800f220 <cJSON_New_Item>
 8010074:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2b00      	cmp	r3, #0
 801007a:	f000 808a 	beq.w	8010192 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d104      	bne.n	801008e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	617b      	str	r3, [r7, #20]
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	613b      	str	r3, [r7, #16]
 801008c:	e007      	b.n	801009e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	693a      	ldr	r2, [r7, #16]
 8010098:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	689b      	ldr	r3, [r3, #8]
 80100a2:	1c5a      	adds	r2, r3, #1
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80100a8:	6838      	ldr	r0, [r7, #0]
 80100aa:	f7ff fc9f 	bl	800f9ec <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80100ae:	6839      	ldr	r1, [r7, #0]
 80100b0:	6938      	ldr	r0, [r7, #16]
 80100b2:	f7ff fb55 	bl	800f760 <parse_string>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d06c      	beq.n	8010196 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 80100bc:	6838      	ldr	r0, [r7, #0]
 80100be:	f7ff fc95 	bl	800f9ec <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	691a      	ldr	r2, [r3, #16]
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	2200      	movs	r2, #0
 80100ce:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d061      	beq.n	801019a <parse_object+0x1de>
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	689a      	ldr	r2, [r3, #8]
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d25b      	bcs.n	801019a <parse_object+0x1de>
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	689b      	ldr	r3, [r3, #8]
 80100ea:	4413      	add	r3, r2
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	2b3a      	cmp	r3, #58	; 0x3a
 80100f0:	d153      	bne.n	801019a <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	689b      	ldr	r3, [r3, #8]
 80100f6:	1c5a      	adds	r2, r3, #1
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80100fc:	6838      	ldr	r0, [r7, #0]
 80100fe:	f7ff fc75 	bl	800f9ec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8010102:	6839      	ldr	r1, [r7, #0]
 8010104:	6938      	ldr	r0, [r7, #16]
 8010106:	f7ff fda9 	bl	800fc5c <parse_value>
 801010a:	4603      	mov	r3, r0
 801010c:	2b00      	cmp	r3, #0
 801010e:	d046      	beq.n	801019e <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8010110:	6838      	ldr	r0, [r7, #0]
 8010112:	f7ff fc6b 	bl	800f9ec <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d00d      	beq.n	8010138 <parse_object+0x17c>
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	689a      	ldr	r2, [r3, #8]
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	429a      	cmp	r2, r3
 8010126:	d207      	bcs.n	8010138 <parse_object+0x17c>
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	4413      	add	r3, r2
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	2b2c      	cmp	r3, #44	; 0x2c
 8010136:	d098      	beq.n	801006a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d031      	beq.n	80101a2 <parse_object+0x1e6>
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	689a      	ldr	r2, [r3, #8]
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	429a      	cmp	r2, r3
 8010148:	d22b      	bcs.n	80101a2 <parse_object+0x1e6>
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	689b      	ldr	r3, [r3, #8]
 8010152:	4413      	add	r3, r2
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	2b7d      	cmp	r3, #125	; 0x7d
 8010158:	d123      	bne.n	80101a2 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 801015a:	e000      	b.n	801015e <parse_object+0x1a2>
        goto success; /* empty object */
 801015c:	bf00      	nop
    input_buffer->depth--;
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	1e5a      	subs	r2, r3, #1
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d002      	beq.n	8010174 <parse_object+0x1b8>
        head->prev = current_item;
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	693a      	ldr	r2, [r7, #16]
 8010172:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2240      	movs	r2, #64	; 0x40
 8010178:	60da      	str	r2, [r3, #12]
    item->child = head;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	697a      	ldr	r2, [r7, #20]
 801017e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	1c5a      	adds	r2, r3, #1
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	609a      	str	r2, [r3, #8]
    return true;
 801018a:	2301      	movs	r3, #1
 801018c:	e011      	b.n	80101b2 <parse_object+0x1f6>
        goto fail; /* not an object */
 801018e:	bf00      	nop
 8010190:	e008      	b.n	80101a4 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8010192:	bf00      	nop
 8010194:	e006      	b.n	80101a4 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8010196:	bf00      	nop
 8010198:	e004      	b.n	80101a4 <parse_object+0x1e8>
            goto fail; /* invalid object */
 801019a:	bf00      	nop
 801019c:	e002      	b.n	80101a4 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 801019e:	bf00      	nop
 80101a0:	e000      	b.n	80101a4 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 80101a2:	bf00      	nop

fail:
    if (head != NULL)
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d002      	beq.n	80101b0 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 80101aa:	6978      	ldr	r0, [r7, #20]
 80101ac:	f7ff f84e 	bl	800f24c <cJSON_Delete>
    }

    return false;
 80101b0:	2300      	movs	r3, #0
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3718      	adds	r7, #24
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b086      	sub	sp, #24
 80101be:	af00      	add	r7, sp, #0
 80101c0:	60f8      	str	r0, [r7, #12]
 80101c2:	60b9      	str	r1, [r7, #8]
 80101c4:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80101c6:	2300      	movs	r3, #0
 80101c8:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d002      	beq.n	80101d6 <get_object_item+0x1c>
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d101      	bne.n	80101da <get_object_item+0x20>
    {
        return NULL;
 80101d6:	2300      	movs	r3, #0
 80101d8:	e033      	b.n	8010242 <get_object_item+0x88>
    }

    current_element = object->child;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	689b      	ldr	r3, [r3, #8]
 80101de:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d017      	beq.n	8010216 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80101e6:	e002      	b.n	80101ee <get_object_item+0x34>
        {
            current_element = current_element->next;
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d01c      	beq.n	801022e <get_object_item+0x74>
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	6a1b      	ldr	r3, [r3, #32]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d018      	beq.n	801022e <get_object_item+0x74>
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	6a1b      	ldr	r3, [r3, #32]
 8010200:	4619      	mov	r1, r3
 8010202:	68b8      	ldr	r0, [r7, #8]
 8010204:	f7ef ffec 	bl	80001e0 <strcmp>
 8010208:	4603      	mov	r3, r0
 801020a:	2b00      	cmp	r3, #0
 801020c:	d1ec      	bne.n	80101e8 <get_object_item+0x2e>
 801020e:	e00e      	b.n	801022e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d008      	beq.n	801022e <get_object_item+0x74>
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	6a1b      	ldr	r3, [r3, #32]
 8010220:	4619      	mov	r1, r3
 8010222:	68b8      	ldr	r0, [r7, #8]
 8010224:	f7fe ff90 	bl	800f148 <case_insensitive_strcmp>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1f0      	bne.n	8010210 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d003      	beq.n	801023c <get_object_item+0x82>
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	6a1b      	ldr	r3, [r3, #32]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d101      	bne.n	8010240 <get_object_item+0x86>
        return NULL;
 801023c:	2300      	movs	r3, #0
 801023e:	e000      	b.n	8010242 <get_object_item+0x88>
    }

    return current_element;
 8010240:	697b      	ldr	r3, [r7, #20]
}
 8010242:	4618      	mov	r0, r3
 8010244:	3718      	adds	r7, #24
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}

0801024a <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 801024a:	b580      	push	{r7, lr}
 801024c:	b082      	sub	sp, #8
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
 8010252:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8010254:	2201      	movs	r2, #1
 8010256:	6839      	ldr	r1, [r7, #0]
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f7ff ffae 	bl	80101ba <get_object_item>
 801025e:	4603      	mov	r3, r0
}
 8010260:	4618      	mov	r0, r3
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <__errno>:
 8010268:	4b01      	ldr	r3, [pc, #4]	; (8010270 <__errno+0x8>)
 801026a:	6818      	ldr	r0, [r3, #0]
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop
 8010270:	20000160 	.word	0x20000160

08010274 <__libc_init_array>:
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	4d0d      	ldr	r5, [pc, #52]	; (80102ac <__libc_init_array+0x38>)
 8010278:	4c0d      	ldr	r4, [pc, #52]	; (80102b0 <__libc_init_array+0x3c>)
 801027a:	1b64      	subs	r4, r4, r5
 801027c:	10a4      	asrs	r4, r4, #2
 801027e:	2600      	movs	r6, #0
 8010280:	42a6      	cmp	r6, r4
 8010282:	d109      	bne.n	8010298 <__libc_init_array+0x24>
 8010284:	4d0b      	ldr	r5, [pc, #44]	; (80102b4 <__libc_init_array+0x40>)
 8010286:	4c0c      	ldr	r4, [pc, #48]	; (80102b8 <__libc_init_array+0x44>)
 8010288:	f003 f8f8 	bl	801347c <_init>
 801028c:	1b64      	subs	r4, r4, r5
 801028e:	10a4      	asrs	r4, r4, #2
 8010290:	2600      	movs	r6, #0
 8010292:	42a6      	cmp	r6, r4
 8010294:	d105      	bne.n	80102a2 <__libc_init_array+0x2e>
 8010296:	bd70      	pop	{r4, r5, r6, pc}
 8010298:	f855 3b04 	ldr.w	r3, [r5], #4
 801029c:	4798      	blx	r3
 801029e:	3601      	adds	r6, #1
 80102a0:	e7ee      	b.n	8010280 <__libc_init_array+0xc>
 80102a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80102a6:	4798      	blx	r3
 80102a8:	3601      	adds	r6, #1
 80102aa:	e7f2      	b.n	8010292 <__libc_init_array+0x1e>
 80102ac:	08015284 	.word	0x08015284
 80102b0:	08015284 	.word	0x08015284
 80102b4:	08015284 	.word	0x08015284
 80102b8:	08015288 	.word	0x08015288

080102bc <malloc>:
 80102bc:	4b02      	ldr	r3, [pc, #8]	; (80102c8 <malloc+0xc>)
 80102be:	4601      	mov	r1, r0
 80102c0:	6818      	ldr	r0, [r3, #0]
 80102c2:	f000 b871 	b.w	80103a8 <_malloc_r>
 80102c6:	bf00      	nop
 80102c8:	20000160 	.word	0x20000160

080102cc <free>:
 80102cc:	4b02      	ldr	r3, [pc, #8]	; (80102d8 <free+0xc>)
 80102ce:	4601      	mov	r1, r0
 80102d0:	6818      	ldr	r0, [r3, #0]
 80102d2:	f000 b819 	b.w	8010308 <_free_r>
 80102d6:	bf00      	nop
 80102d8:	20000160 	.word	0x20000160

080102dc <memcpy>:
 80102dc:	440a      	add	r2, r1
 80102de:	4291      	cmp	r1, r2
 80102e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80102e4:	d100      	bne.n	80102e8 <memcpy+0xc>
 80102e6:	4770      	bx	lr
 80102e8:	b510      	push	{r4, lr}
 80102ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102f2:	4291      	cmp	r1, r2
 80102f4:	d1f9      	bne.n	80102ea <memcpy+0xe>
 80102f6:	bd10      	pop	{r4, pc}

080102f8 <memset>:
 80102f8:	4402      	add	r2, r0
 80102fa:	4603      	mov	r3, r0
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d100      	bne.n	8010302 <memset+0xa>
 8010300:	4770      	bx	lr
 8010302:	f803 1b01 	strb.w	r1, [r3], #1
 8010306:	e7f9      	b.n	80102fc <memset+0x4>

08010308 <_free_r>:
 8010308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801030a:	2900      	cmp	r1, #0
 801030c:	d048      	beq.n	80103a0 <_free_r+0x98>
 801030e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010312:	9001      	str	r0, [sp, #4]
 8010314:	2b00      	cmp	r3, #0
 8010316:	f1a1 0404 	sub.w	r4, r1, #4
 801031a:	bfb8      	it	lt
 801031c:	18e4      	addlt	r4, r4, r3
 801031e:	f001 fe7d 	bl	801201c <__malloc_lock>
 8010322:	4a20      	ldr	r2, [pc, #128]	; (80103a4 <_free_r+0x9c>)
 8010324:	9801      	ldr	r0, [sp, #4]
 8010326:	6813      	ldr	r3, [r2, #0]
 8010328:	4615      	mov	r5, r2
 801032a:	b933      	cbnz	r3, 801033a <_free_r+0x32>
 801032c:	6063      	str	r3, [r4, #4]
 801032e:	6014      	str	r4, [r2, #0]
 8010330:	b003      	add	sp, #12
 8010332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010336:	f001 be77 	b.w	8012028 <__malloc_unlock>
 801033a:	42a3      	cmp	r3, r4
 801033c:	d90b      	bls.n	8010356 <_free_r+0x4e>
 801033e:	6821      	ldr	r1, [r4, #0]
 8010340:	1862      	adds	r2, r4, r1
 8010342:	4293      	cmp	r3, r2
 8010344:	bf04      	itt	eq
 8010346:	681a      	ldreq	r2, [r3, #0]
 8010348:	685b      	ldreq	r3, [r3, #4]
 801034a:	6063      	str	r3, [r4, #4]
 801034c:	bf04      	itt	eq
 801034e:	1852      	addeq	r2, r2, r1
 8010350:	6022      	streq	r2, [r4, #0]
 8010352:	602c      	str	r4, [r5, #0]
 8010354:	e7ec      	b.n	8010330 <_free_r+0x28>
 8010356:	461a      	mov	r2, r3
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	b10b      	cbz	r3, 8010360 <_free_r+0x58>
 801035c:	42a3      	cmp	r3, r4
 801035e:	d9fa      	bls.n	8010356 <_free_r+0x4e>
 8010360:	6811      	ldr	r1, [r2, #0]
 8010362:	1855      	adds	r5, r2, r1
 8010364:	42a5      	cmp	r5, r4
 8010366:	d10b      	bne.n	8010380 <_free_r+0x78>
 8010368:	6824      	ldr	r4, [r4, #0]
 801036a:	4421      	add	r1, r4
 801036c:	1854      	adds	r4, r2, r1
 801036e:	42a3      	cmp	r3, r4
 8010370:	6011      	str	r1, [r2, #0]
 8010372:	d1dd      	bne.n	8010330 <_free_r+0x28>
 8010374:	681c      	ldr	r4, [r3, #0]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	6053      	str	r3, [r2, #4]
 801037a:	4421      	add	r1, r4
 801037c:	6011      	str	r1, [r2, #0]
 801037e:	e7d7      	b.n	8010330 <_free_r+0x28>
 8010380:	d902      	bls.n	8010388 <_free_r+0x80>
 8010382:	230c      	movs	r3, #12
 8010384:	6003      	str	r3, [r0, #0]
 8010386:	e7d3      	b.n	8010330 <_free_r+0x28>
 8010388:	6825      	ldr	r5, [r4, #0]
 801038a:	1961      	adds	r1, r4, r5
 801038c:	428b      	cmp	r3, r1
 801038e:	bf04      	itt	eq
 8010390:	6819      	ldreq	r1, [r3, #0]
 8010392:	685b      	ldreq	r3, [r3, #4]
 8010394:	6063      	str	r3, [r4, #4]
 8010396:	bf04      	itt	eq
 8010398:	1949      	addeq	r1, r1, r5
 801039a:	6021      	streq	r1, [r4, #0]
 801039c:	6054      	str	r4, [r2, #4]
 801039e:	e7c7      	b.n	8010330 <_free_r+0x28>
 80103a0:	b003      	add	sp, #12
 80103a2:	bd30      	pop	{r4, r5, pc}
 80103a4:	20002578 	.word	0x20002578

080103a8 <_malloc_r>:
 80103a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103aa:	1ccd      	adds	r5, r1, #3
 80103ac:	f025 0503 	bic.w	r5, r5, #3
 80103b0:	3508      	adds	r5, #8
 80103b2:	2d0c      	cmp	r5, #12
 80103b4:	bf38      	it	cc
 80103b6:	250c      	movcc	r5, #12
 80103b8:	2d00      	cmp	r5, #0
 80103ba:	4606      	mov	r6, r0
 80103bc:	db01      	blt.n	80103c2 <_malloc_r+0x1a>
 80103be:	42a9      	cmp	r1, r5
 80103c0:	d903      	bls.n	80103ca <_malloc_r+0x22>
 80103c2:	230c      	movs	r3, #12
 80103c4:	6033      	str	r3, [r6, #0]
 80103c6:	2000      	movs	r0, #0
 80103c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103ca:	f001 fe27 	bl	801201c <__malloc_lock>
 80103ce:	4921      	ldr	r1, [pc, #132]	; (8010454 <_malloc_r+0xac>)
 80103d0:	680a      	ldr	r2, [r1, #0]
 80103d2:	4614      	mov	r4, r2
 80103d4:	b99c      	cbnz	r4, 80103fe <_malloc_r+0x56>
 80103d6:	4f20      	ldr	r7, [pc, #128]	; (8010458 <_malloc_r+0xb0>)
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	b923      	cbnz	r3, 80103e6 <_malloc_r+0x3e>
 80103dc:	4621      	mov	r1, r4
 80103de:	4630      	mov	r0, r6
 80103e0:	f000 f8ba 	bl	8010558 <_sbrk_r>
 80103e4:	6038      	str	r0, [r7, #0]
 80103e6:	4629      	mov	r1, r5
 80103e8:	4630      	mov	r0, r6
 80103ea:	f000 f8b5 	bl	8010558 <_sbrk_r>
 80103ee:	1c43      	adds	r3, r0, #1
 80103f0:	d123      	bne.n	801043a <_malloc_r+0x92>
 80103f2:	230c      	movs	r3, #12
 80103f4:	6033      	str	r3, [r6, #0]
 80103f6:	4630      	mov	r0, r6
 80103f8:	f001 fe16 	bl	8012028 <__malloc_unlock>
 80103fc:	e7e3      	b.n	80103c6 <_malloc_r+0x1e>
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	1b5b      	subs	r3, r3, r5
 8010402:	d417      	bmi.n	8010434 <_malloc_r+0x8c>
 8010404:	2b0b      	cmp	r3, #11
 8010406:	d903      	bls.n	8010410 <_malloc_r+0x68>
 8010408:	6023      	str	r3, [r4, #0]
 801040a:	441c      	add	r4, r3
 801040c:	6025      	str	r5, [r4, #0]
 801040e:	e004      	b.n	801041a <_malloc_r+0x72>
 8010410:	6863      	ldr	r3, [r4, #4]
 8010412:	42a2      	cmp	r2, r4
 8010414:	bf0c      	ite	eq
 8010416:	600b      	streq	r3, [r1, #0]
 8010418:	6053      	strne	r3, [r2, #4]
 801041a:	4630      	mov	r0, r6
 801041c:	f001 fe04 	bl	8012028 <__malloc_unlock>
 8010420:	f104 000b 	add.w	r0, r4, #11
 8010424:	1d23      	adds	r3, r4, #4
 8010426:	f020 0007 	bic.w	r0, r0, #7
 801042a:	1ac2      	subs	r2, r0, r3
 801042c:	d0cc      	beq.n	80103c8 <_malloc_r+0x20>
 801042e:	1a1b      	subs	r3, r3, r0
 8010430:	50a3      	str	r3, [r4, r2]
 8010432:	e7c9      	b.n	80103c8 <_malloc_r+0x20>
 8010434:	4622      	mov	r2, r4
 8010436:	6864      	ldr	r4, [r4, #4]
 8010438:	e7cc      	b.n	80103d4 <_malloc_r+0x2c>
 801043a:	1cc4      	adds	r4, r0, #3
 801043c:	f024 0403 	bic.w	r4, r4, #3
 8010440:	42a0      	cmp	r0, r4
 8010442:	d0e3      	beq.n	801040c <_malloc_r+0x64>
 8010444:	1a21      	subs	r1, r4, r0
 8010446:	4630      	mov	r0, r6
 8010448:	f000 f886 	bl	8010558 <_sbrk_r>
 801044c:	3001      	adds	r0, #1
 801044e:	d1dd      	bne.n	801040c <_malloc_r+0x64>
 8010450:	e7cf      	b.n	80103f2 <_malloc_r+0x4a>
 8010452:	bf00      	nop
 8010454:	20002578 	.word	0x20002578
 8010458:	2000257c 	.word	0x2000257c

0801045c <_puts_r>:
 801045c:	b570      	push	{r4, r5, r6, lr}
 801045e:	460e      	mov	r6, r1
 8010460:	4605      	mov	r5, r0
 8010462:	b118      	cbz	r0, 801046c <_puts_r+0x10>
 8010464:	6983      	ldr	r3, [r0, #24]
 8010466:	b90b      	cbnz	r3, 801046c <_puts_r+0x10>
 8010468:	f001 f940 	bl	80116ec <__sinit>
 801046c:	69ab      	ldr	r3, [r5, #24]
 801046e:	68ac      	ldr	r4, [r5, #8]
 8010470:	b913      	cbnz	r3, 8010478 <_puts_r+0x1c>
 8010472:	4628      	mov	r0, r5
 8010474:	f001 f93a 	bl	80116ec <__sinit>
 8010478:	4b2c      	ldr	r3, [pc, #176]	; (801052c <_puts_r+0xd0>)
 801047a:	429c      	cmp	r4, r3
 801047c:	d120      	bne.n	80104c0 <_puts_r+0x64>
 801047e:	686c      	ldr	r4, [r5, #4]
 8010480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010482:	07db      	lsls	r3, r3, #31
 8010484:	d405      	bmi.n	8010492 <_puts_r+0x36>
 8010486:	89a3      	ldrh	r3, [r4, #12]
 8010488:	0598      	lsls	r0, r3, #22
 801048a:	d402      	bmi.n	8010492 <_puts_r+0x36>
 801048c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801048e:	f001 fd3a 	bl	8011f06 <__retarget_lock_acquire_recursive>
 8010492:	89a3      	ldrh	r3, [r4, #12]
 8010494:	0719      	lsls	r1, r3, #28
 8010496:	d51d      	bpl.n	80104d4 <_puts_r+0x78>
 8010498:	6923      	ldr	r3, [r4, #16]
 801049a:	b1db      	cbz	r3, 80104d4 <_puts_r+0x78>
 801049c:	3e01      	subs	r6, #1
 801049e:	68a3      	ldr	r3, [r4, #8]
 80104a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80104a4:	3b01      	subs	r3, #1
 80104a6:	60a3      	str	r3, [r4, #8]
 80104a8:	bb39      	cbnz	r1, 80104fa <_puts_r+0x9e>
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	da38      	bge.n	8010520 <_puts_r+0xc4>
 80104ae:	4622      	mov	r2, r4
 80104b0:	210a      	movs	r1, #10
 80104b2:	4628      	mov	r0, r5
 80104b4:	f000 ff1e 	bl	80112f4 <__swbuf_r>
 80104b8:	3001      	adds	r0, #1
 80104ba:	d011      	beq.n	80104e0 <_puts_r+0x84>
 80104bc:	250a      	movs	r5, #10
 80104be:	e011      	b.n	80104e4 <_puts_r+0x88>
 80104c0:	4b1b      	ldr	r3, [pc, #108]	; (8010530 <_puts_r+0xd4>)
 80104c2:	429c      	cmp	r4, r3
 80104c4:	d101      	bne.n	80104ca <_puts_r+0x6e>
 80104c6:	68ac      	ldr	r4, [r5, #8]
 80104c8:	e7da      	b.n	8010480 <_puts_r+0x24>
 80104ca:	4b1a      	ldr	r3, [pc, #104]	; (8010534 <_puts_r+0xd8>)
 80104cc:	429c      	cmp	r4, r3
 80104ce:	bf08      	it	eq
 80104d0:	68ec      	ldreq	r4, [r5, #12]
 80104d2:	e7d5      	b.n	8010480 <_puts_r+0x24>
 80104d4:	4621      	mov	r1, r4
 80104d6:	4628      	mov	r0, r5
 80104d8:	f000 ff70 	bl	80113bc <__swsetup_r>
 80104dc:	2800      	cmp	r0, #0
 80104de:	d0dd      	beq.n	801049c <_puts_r+0x40>
 80104e0:	f04f 35ff 	mov.w	r5, #4294967295
 80104e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104e6:	07da      	lsls	r2, r3, #31
 80104e8:	d405      	bmi.n	80104f6 <_puts_r+0x9a>
 80104ea:	89a3      	ldrh	r3, [r4, #12]
 80104ec:	059b      	lsls	r3, r3, #22
 80104ee:	d402      	bmi.n	80104f6 <_puts_r+0x9a>
 80104f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104f2:	f001 fd09 	bl	8011f08 <__retarget_lock_release_recursive>
 80104f6:	4628      	mov	r0, r5
 80104f8:	bd70      	pop	{r4, r5, r6, pc}
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	da04      	bge.n	8010508 <_puts_r+0xac>
 80104fe:	69a2      	ldr	r2, [r4, #24]
 8010500:	429a      	cmp	r2, r3
 8010502:	dc06      	bgt.n	8010512 <_puts_r+0xb6>
 8010504:	290a      	cmp	r1, #10
 8010506:	d004      	beq.n	8010512 <_puts_r+0xb6>
 8010508:	6823      	ldr	r3, [r4, #0]
 801050a:	1c5a      	adds	r2, r3, #1
 801050c:	6022      	str	r2, [r4, #0]
 801050e:	7019      	strb	r1, [r3, #0]
 8010510:	e7c5      	b.n	801049e <_puts_r+0x42>
 8010512:	4622      	mov	r2, r4
 8010514:	4628      	mov	r0, r5
 8010516:	f000 feed 	bl	80112f4 <__swbuf_r>
 801051a:	3001      	adds	r0, #1
 801051c:	d1bf      	bne.n	801049e <_puts_r+0x42>
 801051e:	e7df      	b.n	80104e0 <_puts_r+0x84>
 8010520:	6823      	ldr	r3, [r4, #0]
 8010522:	250a      	movs	r5, #10
 8010524:	1c5a      	adds	r2, r3, #1
 8010526:	6022      	str	r2, [r4, #0]
 8010528:	701d      	strb	r5, [r3, #0]
 801052a:	e7db      	b.n	80104e4 <_puts_r+0x88>
 801052c:	08014fc8 	.word	0x08014fc8
 8010530:	08014fe8 	.word	0x08014fe8
 8010534:	08014fa8 	.word	0x08014fa8

08010538 <puts>:
 8010538:	4b02      	ldr	r3, [pc, #8]	; (8010544 <puts+0xc>)
 801053a:	4601      	mov	r1, r0
 801053c:	6818      	ldr	r0, [r3, #0]
 801053e:	f7ff bf8d 	b.w	801045c <_puts_r>
 8010542:	bf00      	nop
 8010544:	20000160 	.word	0x20000160

08010548 <realloc>:
 8010548:	4b02      	ldr	r3, [pc, #8]	; (8010554 <realloc+0xc>)
 801054a:	460a      	mov	r2, r1
 801054c:	4601      	mov	r1, r0
 801054e:	6818      	ldr	r0, [r3, #0]
 8010550:	f002 ba3a 	b.w	80129c8 <_realloc_r>
 8010554:	20000160 	.word	0x20000160

08010558 <_sbrk_r>:
 8010558:	b538      	push	{r3, r4, r5, lr}
 801055a:	4d06      	ldr	r5, [pc, #24]	; (8010574 <_sbrk_r+0x1c>)
 801055c:	2300      	movs	r3, #0
 801055e:	4604      	mov	r4, r0
 8010560:	4608      	mov	r0, r1
 8010562:	602b      	str	r3, [r5, #0]
 8010564:	f7f2 fbc2 	bl	8002cec <_sbrk>
 8010568:	1c43      	adds	r3, r0, #1
 801056a:	d102      	bne.n	8010572 <_sbrk_r+0x1a>
 801056c:	682b      	ldr	r3, [r5, #0]
 801056e:	b103      	cbz	r3, 8010572 <_sbrk_r+0x1a>
 8010570:	6023      	str	r3, [r4, #0]
 8010572:	bd38      	pop	{r3, r4, r5, pc}
 8010574:	200034d4 	.word	0x200034d4

08010578 <sniprintf>:
 8010578:	b40c      	push	{r2, r3}
 801057a:	b530      	push	{r4, r5, lr}
 801057c:	4b17      	ldr	r3, [pc, #92]	; (80105dc <sniprintf+0x64>)
 801057e:	1e0c      	subs	r4, r1, #0
 8010580:	681d      	ldr	r5, [r3, #0]
 8010582:	b09d      	sub	sp, #116	; 0x74
 8010584:	da08      	bge.n	8010598 <sniprintf+0x20>
 8010586:	238b      	movs	r3, #139	; 0x8b
 8010588:	602b      	str	r3, [r5, #0]
 801058a:	f04f 30ff 	mov.w	r0, #4294967295
 801058e:	b01d      	add	sp, #116	; 0x74
 8010590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010594:	b002      	add	sp, #8
 8010596:	4770      	bx	lr
 8010598:	f44f 7302 	mov.w	r3, #520	; 0x208
 801059c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80105a0:	bf14      	ite	ne
 80105a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80105a6:	4623      	moveq	r3, r4
 80105a8:	9304      	str	r3, [sp, #16]
 80105aa:	9307      	str	r3, [sp, #28]
 80105ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105b0:	9002      	str	r0, [sp, #8]
 80105b2:	9006      	str	r0, [sp, #24]
 80105b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80105b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80105ba:	ab21      	add	r3, sp, #132	; 0x84
 80105bc:	a902      	add	r1, sp, #8
 80105be:	4628      	mov	r0, r5
 80105c0:	9301      	str	r3, [sp, #4]
 80105c2:	f002 fa83 	bl	8012acc <_svfiprintf_r>
 80105c6:	1c43      	adds	r3, r0, #1
 80105c8:	bfbc      	itt	lt
 80105ca:	238b      	movlt	r3, #139	; 0x8b
 80105cc:	602b      	strlt	r3, [r5, #0]
 80105ce:	2c00      	cmp	r4, #0
 80105d0:	d0dd      	beq.n	801058e <sniprintf+0x16>
 80105d2:	9b02      	ldr	r3, [sp, #8]
 80105d4:	2200      	movs	r2, #0
 80105d6:	701a      	strb	r2, [r3, #0]
 80105d8:	e7d9      	b.n	801058e <sniprintf+0x16>
 80105da:	bf00      	nop
 80105dc:	20000160 	.word	0x20000160

080105e0 <__sread>:
 80105e0:	b510      	push	{r4, lr}
 80105e2:	460c      	mov	r4, r1
 80105e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105e8:	f002 fe5e 	bl	80132a8 <_read_r>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	bfab      	itete	ge
 80105f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80105f2:	89a3      	ldrhlt	r3, [r4, #12]
 80105f4:	181b      	addge	r3, r3, r0
 80105f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80105fa:	bfac      	ite	ge
 80105fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80105fe:	81a3      	strhlt	r3, [r4, #12]
 8010600:	bd10      	pop	{r4, pc}

08010602 <__swrite>:
 8010602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010606:	461f      	mov	r7, r3
 8010608:	898b      	ldrh	r3, [r1, #12]
 801060a:	05db      	lsls	r3, r3, #23
 801060c:	4605      	mov	r5, r0
 801060e:	460c      	mov	r4, r1
 8010610:	4616      	mov	r6, r2
 8010612:	d505      	bpl.n	8010620 <__swrite+0x1e>
 8010614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010618:	2302      	movs	r3, #2
 801061a:	2200      	movs	r2, #0
 801061c:	f001 fc76 	bl	8011f0c <_lseek_r>
 8010620:	89a3      	ldrh	r3, [r4, #12]
 8010622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801062a:	81a3      	strh	r3, [r4, #12]
 801062c:	4632      	mov	r2, r6
 801062e:	463b      	mov	r3, r7
 8010630:	4628      	mov	r0, r5
 8010632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010636:	f000 beaf 	b.w	8011398 <_write_r>

0801063a <__sseek>:
 801063a:	b510      	push	{r4, lr}
 801063c:	460c      	mov	r4, r1
 801063e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010642:	f001 fc63 	bl	8011f0c <_lseek_r>
 8010646:	1c43      	adds	r3, r0, #1
 8010648:	89a3      	ldrh	r3, [r4, #12]
 801064a:	bf15      	itete	ne
 801064c:	6560      	strne	r0, [r4, #84]	; 0x54
 801064e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010656:	81a3      	strheq	r3, [r4, #12]
 8010658:	bf18      	it	ne
 801065a:	81a3      	strhne	r3, [r4, #12]
 801065c:	bd10      	pop	{r4, pc}

0801065e <__sclose>:
 801065e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010662:	f000 bf19 	b.w	8011498 <_close_r>

08010666 <strncmp>:
 8010666:	b510      	push	{r4, lr}
 8010668:	b16a      	cbz	r2, 8010686 <strncmp+0x20>
 801066a:	3901      	subs	r1, #1
 801066c:	1884      	adds	r4, r0, r2
 801066e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010672:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010676:	4293      	cmp	r3, r2
 8010678:	d103      	bne.n	8010682 <strncmp+0x1c>
 801067a:	42a0      	cmp	r0, r4
 801067c:	d001      	beq.n	8010682 <strncmp+0x1c>
 801067e:	2b00      	cmp	r3, #0
 8010680:	d1f5      	bne.n	801066e <strncmp+0x8>
 8010682:	1a98      	subs	r0, r3, r2
 8010684:	bd10      	pop	{r4, pc}
 8010686:	4610      	mov	r0, r2
 8010688:	e7fc      	b.n	8010684 <strncmp+0x1e>

0801068a <sulp>:
 801068a:	b570      	push	{r4, r5, r6, lr}
 801068c:	4604      	mov	r4, r0
 801068e:	460d      	mov	r5, r1
 8010690:	ec45 4b10 	vmov	d0, r4, r5
 8010694:	4616      	mov	r6, r2
 8010696:	f002 f839 	bl	801270c <__ulp>
 801069a:	ec51 0b10 	vmov	r0, r1, d0
 801069e:	b17e      	cbz	r6, 80106c0 <sulp+0x36>
 80106a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80106a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	dd09      	ble.n	80106c0 <sulp+0x36>
 80106ac:	051b      	lsls	r3, r3, #20
 80106ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80106b2:	2400      	movs	r4, #0
 80106b4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80106b8:	4622      	mov	r2, r4
 80106ba:	462b      	mov	r3, r5
 80106bc:	f7ef ffb4 	bl	8000628 <__aeabi_dmul>
 80106c0:	bd70      	pop	{r4, r5, r6, pc}
 80106c2:	0000      	movs	r0, r0
 80106c4:	0000      	movs	r0, r0
	...

080106c8 <_strtod_l>:
 80106c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106cc:	b0a3      	sub	sp, #140	; 0x8c
 80106ce:	461f      	mov	r7, r3
 80106d0:	2300      	movs	r3, #0
 80106d2:	931e      	str	r3, [sp, #120]	; 0x78
 80106d4:	4ba4      	ldr	r3, [pc, #656]	; (8010968 <_strtod_l+0x2a0>)
 80106d6:	9219      	str	r2, [sp, #100]	; 0x64
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	9307      	str	r3, [sp, #28]
 80106dc:	4604      	mov	r4, r0
 80106de:	4618      	mov	r0, r3
 80106e0:	4688      	mov	r8, r1
 80106e2:	f7ef fd87 	bl	80001f4 <strlen>
 80106e6:	f04f 0a00 	mov.w	sl, #0
 80106ea:	4605      	mov	r5, r0
 80106ec:	f04f 0b00 	mov.w	fp, #0
 80106f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80106f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80106f6:	781a      	ldrb	r2, [r3, #0]
 80106f8:	2a2b      	cmp	r2, #43	; 0x2b
 80106fa:	d04c      	beq.n	8010796 <_strtod_l+0xce>
 80106fc:	d839      	bhi.n	8010772 <_strtod_l+0xaa>
 80106fe:	2a0d      	cmp	r2, #13
 8010700:	d832      	bhi.n	8010768 <_strtod_l+0xa0>
 8010702:	2a08      	cmp	r2, #8
 8010704:	d832      	bhi.n	801076c <_strtod_l+0xa4>
 8010706:	2a00      	cmp	r2, #0
 8010708:	d03c      	beq.n	8010784 <_strtod_l+0xbc>
 801070a:	2300      	movs	r3, #0
 801070c:	930e      	str	r3, [sp, #56]	; 0x38
 801070e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010710:	7833      	ldrb	r3, [r6, #0]
 8010712:	2b30      	cmp	r3, #48	; 0x30
 8010714:	f040 80b4 	bne.w	8010880 <_strtod_l+0x1b8>
 8010718:	7873      	ldrb	r3, [r6, #1]
 801071a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801071e:	2b58      	cmp	r3, #88	; 0x58
 8010720:	d16c      	bne.n	80107fc <_strtod_l+0x134>
 8010722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010724:	9301      	str	r3, [sp, #4]
 8010726:	ab1e      	add	r3, sp, #120	; 0x78
 8010728:	9702      	str	r7, [sp, #8]
 801072a:	9300      	str	r3, [sp, #0]
 801072c:	4a8f      	ldr	r2, [pc, #572]	; (801096c <_strtod_l+0x2a4>)
 801072e:	ab1f      	add	r3, sp, #124	; 0x7c
 8010730:	a91d      	add	r1, sp, #116	; 0x74
 8010732:	4620      	mov	r0, r4
 8010734:	f001 f8de 	bl	80118f4 <__gethex>
 8010738:	f010 0707 	ands.w	r7, r0, #7
 801073c:	4605      	mov	r5, r0
 801073e:	d005      	beq.n	801074c <_strtod_l+0x84>
 8010740:	2f06      	cmp	r7, #6
 8010742:	d12a      	bne.n	801079a <_strtod_l+0xd2>
 8010744:	3601      	adds	r6, #1
 8010746:	2300      	movs	r3, #0
 8010748:	961d      	str	r6, [sp, #116]	; 0x74
 801074a:	930e      	str	r3, [sp, #56]	; 0x38
 801074c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801074e:	2b00      	cmp	r3, #0
 8010750:	f040 8596 	bne.w	8011280 <_strtod_l+0xbb8>
 8010754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010756:	b1db      	cbz	r3, 8010790 <_strtod_l+0xc8>
 8010758:	4652      	mov	r2, sl
 801075a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801075e:	ec43 2b10 	vmov	d0, r2, r3
 8010762:	b023      	add	sp, #140	; 0x8c
 8010764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010768:	2a20      	cmp	r2, #32
 801076a:	d1ce      	bne.n	801070a <_strtod_l+0x42>
 801076c:	3301      	adds	r3, #1
 801076e:	931d      	str	r3, [sp, #116]	; 0x74
 8010770:	e7c0      	b.n	80106f4 <_strtod_l+0x2c>
 8010772:	2a2d      	cmp	r2, #45	; 0x2d
 8010774:	d1c9      	bne.n	801070a <_strtod_l+0x42>
 8010776:	2201      	movs	r2, #1
 8010778:	920e      	str	r2, [sp, #56]	; 0x38
 801077a:	1c5a      	adds	r2, r3, #1
 801077c:	921d      	str	r2, [sp, #116]	; 0x74
 801077e:	785b      	ldrb	r3, [r3, #1]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d1c4      	bne.n	801070e <_strtod_l+0x46>
 8010784:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010786:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801078a:	2b00      	cmp	r3, #0
 801078c:	f040 8576 	bne.w	801127c <_strtod_l+0xbb4>
 8010790:	4652      	mov	r2, sl
 8010792:	465b      	mov	r3, fp
 8010794:	e7e3      	b.n	801075e <_strtod_l+0x96>
 8010796:	2200      	movs	r2, #0
 8010798:	e7ee      	b.n	8010778 <_strtod_l+0xb0>
 801079a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801079c:	b13a      	cbz	r2, 80107ae <_strtod_l+0xe6>
 801079e:	2135      	movs	r1, #53	; 0x35
 80107a0:	a820      	add	r0, sp, #128	; 0x80
 80107a2:	f002 f8be 	bl	8012922 <__copybits>
 80107a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80107a8:	4620      	mov	r0, r4
 80107aa:	f001 fc83 	bl	80120b4 <_Bfree>
 80107ae:	3f01      	subs	r7, #1
 80107b0:	2f05      	cmp	r7, #5
 80107b2:	d807      	bhi.n	80107c4 <_strtod_l+0xfc>
 80107b4:	e8df f007 	tbb	[pc, r7]
 80107b8:	1d180b0e 	.word	0x1d180b0e
 80107bc:	030e      	.short	0x030e
 80107be:	f04f 0b00 	mov.w	fp, #0
 80107c2:	46da      	mov	sl, fp
 80107c4:	0728      	lsls	r0, r5, #28
 80107c6:	d5c1      	bpl.n	801074c <_strtod_l+0x84>
 80107c8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80107cc:	e7be      	b.n	801074c <_strtod_l+0x84>
 80107ce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80107d2:	e7f7      	b.n	80107c4 <_strtod_l+0xfc>
 80107d4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80107d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80107da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80107de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80107e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80107e6:	e7ed      	b.n	80107c4 <_strtod_l+0xfc>
 80107e8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010970 <_strtod_l+0x2a8>
 80107ec:	f04f 0a00 	mov.w	sl, #0
 80107f0:	e7e8      	b.n	80107c4 <_strtod_l+0xfc>
 80107f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80107f6:	f04f 3aff 	mov.w	sl, #4294967295
 80107fa:	e7e3      	b.n	80107c4 <_strtod_l+0xfc>
 80107fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107fe:	1c5a      	adds	r2, r3, #1
 8010800:	921d      	str	r2, [sp, #116]	; 0x74
 8010802:	785b      	ldrb	r3, [r3, #1]
 8010804:	2b30      	cmp	r3, #48	; 0x30
 8010806:	d0f9      	beq.n	80107fc <_strtod_l+0x134>
 8010808:	2b00      	cmp	r3, #0
 801080a:	d09f      	beq.n	801074c <_strtod_l+0x84>
 801080c:	2301      	movs	r3, #1
 801080e:	f04f 0900 	mov.w	r9, #0
 8010812:	9304      	str	r3, [sp, #16]
 8010814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010816:	930a      	str	r3, [sp, #40]	; 0x28
 8010818:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801081c:	464f      	mov	r7, r9
 801081e:	220a      	movs	r2, #10
 8010820:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010822:	7806      	ldrb	r6, [r0, #0]
 8010824:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010828:	b2d9      	uxtb	r1, r3
 801082a:	2909      	cmp	r1, #9
 801082c:	d92a      	bls.n	8010884 <_strtod_l+0x1bc>
 801082e:	9907      	ldr	r1, [sp, #28]
 8010830:	462a      	mov	r2, r5
 8010832:	f7ff ff18 	bl	8010666 <strncmp>
 8010836:	b398      	cbz	r0, 80108a0 <_strtod_l+0x1d8>
 8010838:	2000      	movs	r0, #0
 801083a:	4633      	mov	r3, r6
 801083c:	463d      	mov	r5, r7
 801083e:	9007      	str	r0, [sp, #28]
 8010840:	4602      	mov	r2, r0
 8010842:	2b65      	cmp	r3, #101	; 0x65
 8010844:	d001      	beq.n	801084a <_strtod_l+0x182>
 8010846:	2b45      	cmp	r3, #69	; 0x45
 8010848:	d118      	bne.n	801087c <_strtod_l+0x1b4>
 801084a:	b91d      	cbnz	r5, 8010854 <_strtod_l+0x18c>
 801084c:	9b04      	ldr	r3, [sp, #16]
 801084e:	4303      	orrs	r3, r0
 8010850:	d098      	beq.n	8010784 <_strtod_l+0xbc>
 8010852:	2500      	movs	r5, #0
 8010854:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010858:	f108 0301 	add.w	r3, r8, #1
 801085c:	931d      	str	r3, [sp, #116]	; 0x74
 801085e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010862:	2b2b      	cmp	r3, #43	; 0x2b
 8010864:	d075      	beq.n	8010952 <_strtod_l+0x28a>
 8010866:	2b2d      	cmp	r3, #45	; 0x2d
 8010868:	d07b      	beq.n	8010962 <_strtod_l+0x29a>
 801086a:	f04f 0c00 	mov.w	ip, #0
 801086e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010872:	2909      	cmp	r1, #9
 8010874:	f240 8082 	bls.w	801097c <_strtod_l+0x2b4>
 8010878:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801087c:	2600      	movs	r6, #0
 801087e:	e09d      	b.n	80109bc <_strtod_l+0x2f4>
 8010880:	2300      	movs	r3, #0
 8010882:	e7c4      	b.n	801080e <_strtod_l+0x146>
 8010884:	2f08      	cmp	r7, #8
 8010886:	bfd8      	it	le
 8010888:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801088a:	f100 0001 	add.w	r0, r0, #1
 801088e:	bfda      	itte	le
 8010890:	fb02 3301 	mlale	r3, r2, r1, r3
 8010894:	9309      	strle	r3, [sp, #36]	; 0x24
 8010896:	fb02 3909 	mlagt	r9, r2, r9, r3
 801089a:	3701      	adds	r7, #1
 801089c:	901d      	str	r0, [sp, #116]	; 0x74
 801089e:	e7bf      	b.n	8010820 <_strtod_l+0x158>
 80108a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80108a2:	195a      	adds	r2, r3, r5
 80108a4:	921d      	str	r2, [sp, #116]	; 0x74
 80108a6:	5d5b      	ldrb	r3, [r3, r5]
 80108a8:	2f00      	cmp	r7, #0
 80108aa:	d037      	beq.n	801091c <_strtod_l+0x254>
 80108ac:	9007      	str	r0, [sp, #28]
 80108ae:	463d      	mov	r5, r7
 80108b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80108b4:	2a09      	cmp	r2, #9
 80108b6:	d912      	bls.n	80108de <_strtod_l+0x216>
 80108b8:	2201      	movs	r2, #1
 80108ba:	e7c2      	b.n	8010842 <_strtod_l+0x17a>
 80108bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80108be:	1c5a      	adds	r2, r3, #1
 80108c0:	921d      	str	r2, [sp, #116]	; 0x74
 80108c2:	785b      	ldrb	r3, [r3, #1]
 80108c4:	3001      	adds	r0, #1
 80108c6:	2b30      	cmp	r3, #48	; 0x30
 80108c8:	d0f8      	beq.n	80108bc <_strtod_l+0x1f4>
 80108ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80108ce:	2a08      	cmp	r2, #8
 80108d0:	f200 84db 	bhi.w	801128a <_strtod_l+0xbc2>
 80108d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80108d6:	9007      	str	r0, [sp, #28]
 80108d8:	2000      	movs	r0, #0
 80108da:	920a      	str	r2, [sp, #40]	; 0x28
 80108dc:	4605      	mov	r5, r0
 80108de:	3b30      	subs	r3, #48	; 0x30
 80108e0:	f100 0201 	add.w	r2, r0, #1
 80108e4:	d014      	beq.n	8010910 <_strtod_l+0x248>
 80108e6:	9907      	ldr	r1, [sp, #28]
 80108e8:	4411      	add	r1, r2
 80108ea:	9107      	str	r1, [sp, #28]
 80108ec:	462a      	mov	r2, r5
 80108ee:	eb00 0e05 	add.w	lr, r0, r5
 80108f2:	210a      	movs	r1, #10
 80108f4:	4572      	cmp	r2, lr
 80108f6:	d113      	bne.n	8010920 <_strtod_l+0x258>
 80108f8:	182a      	adds	r2, r5, r0
 80108fa:	2a08      	cmp	r2, #8
 80108fc:	f105 0501 	add.w	r5, r5, #1
 8010900:	4405      	add	r5, r0
 8010902:	dc1c      	bgt.n	801093e <_strtod_l+0x276>
 8010904:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010906:	220a      	movs	r2, #10
 8010908:	fb02 3301 	mla	r3, r2, r1, r3
 801090c:	9309      	str	r3, [sp, #36]	; 0x24
 801090e:	2200      	movs	r2, #0
 8010910:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010912:	1c59      	adds	r1, r3, #1
 8010914:	911d      	str	r1, [sp, #116]	; 0x74
 8010916:	785b      	ldrb	r3, [r3, #1]
 8010918:	4610      	mov	r0, r2
 801091a:	e7c9      	b.n	80108b0 <_strtod_l+0x1e8>
 801091c:	4638      	mov	r0, r7
 801091e:	e7d2      	b.n	80108c6 <_strtod_l+0x1fe>
 8010920:	2a08      	cmp	r2, #8
 8010922:	dc04      	bgt.n	801092e <_strtod_l+0x266>
 8010924:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010926:	434e      	muls	r6, r1
 8010928:	9609      	str	r6, [sp, #36]	; 0x24
 801092a:	3201      	adds	r2, #1
 801092c:	e7e2      	b.n	80108f4 <_strtod_l+0x22c>
 801092e:	f102 0c01 	add.w	ip, r2, #1
 8010932:	f1bc 0f10 	cmp.w	ip, #16
 8010936:	bfd8      	it	le
 8010938:	fb01 f909 	mulle.w	r9, r1, r9
 801093c:	e7f5      	b.n	801092a <_strtod_l+0x262>
 801093e:	2d10      	cmp	r5, #16
 8010940:	bfdc      	itt	le
 8010942:	220a      	movle	r2, #10
 8010944:	fb02 3909 	mlale	r9, r2, r9, r3
 8010948:	e7e1      	b.n	801090e <_strtod_l+0x246>
 801094a:	2300      	movs	r3, #0
 801094c:	9307      	str	r3, [sp, #28]
 801094e:	2201      	movs	r2, #1
 8010950:	e77c      	b.n	801084c <_strtod_l+0x184>
 8010952:	f04f 0c00 	mov.w	ip, #0
 8010956:	f108 0302 	add.w	r3, r8, #2
 801095a:	931d      	str	r3, [sp, #116]	; 0x74
 801095c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010960:	e785      	b.n	801086e <_strtod_l+0x1a6>
 8010962:	f04f 0c01 	mov.w	ip, #1
 8010966:	e7f6      	b.n	8010956 <_strtod_l+0x28e>
 8010968:	08015084 	.word	0x08015084
 801096c:	08014f58 	.word	0x08014f58
 8010970:	7ff00000 	.word	0x7ff00000
 8010974:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010976:	1c59      	adds	r1, r3, #1
 8010978:	911d      	str	r1, [sp, #116]	; 0x74
 801097a:	785b      	ldrb	r3, [r3, #1]
 801097c:	2b30      	cmp	r3, #48	; 0x30
 801097e:	d0f9      	beq.n	8010974 <_strtod_l+0x2ac>
 8010980:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8010984:	2908      	cmp	r1, #8
 8010986:	f63f af79 	bhi.w	801087c <_strtod_l+0x1b4>
 801098a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801098e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010990:	9308      	str	r3, [sp, #32]
 8010992:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010994:	1c59      	adds	r1, r3, #1
 8010996:	911d      	str	r1, [sp, #116]	; 0x74
 8010998:	785b      	ldrb	r3, [r3, #1]
 801099a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801099e:	2e09      	cmp	r6, #9
 80109a0:	d937      	bls.n	8010a12 <_strtod_l+0x34a>
 80109a2:	9e08      	ldr	r6, [sp, #32]
 80109a4:	1b89      	subs	r1, r1, r6
 80109a6:	2908      	cmp	r1, #8
 80109a8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80109ac:	dc02      	bgt.n	80109b4 <_strtod_l+0x2ec>
 80109ae:	4576      	cmp	r6, lr
 80109b0:	bfa8      	it	ge
 80109b2:	4676      	movge	r6, lr
 80109b4:	f1bc 0f00 	cmp.w	ip, #0
 80109b8:	d000      	beq.n	80109bc <_strtod_l+0x2f4>
 80109ba:	4276      	negs	r6, r6
 80109bc:	2d00      	cmp	r5, #0
 80109be:	d14f      	bne.n	8010a60 <_strtod_l+0x398>
 80109c0:	9904      	ldr	r1, [sp, #16]
 80109c2:	4301      	orrs	r1, r0
 80109c4:	f47f aec2 	bne.w	801074c <_strtod_l+0x84>
 80109c8:	2a00      	cmp	r2, #0
 80109ca:	f47f aedb 	bne.w	8010784 <_strtod_l+0xbc>
 80109ce:	2b69      	cmp	r3, #105	; 0x69
 80109d0:	d027      	beq.n	8010a22 <_strtod_l+0x35a>
 80109d2:	dc24      	bgt.n	8010a1e <_strtod_l+0x356>
 80109d4:	2b49      	cmp	r3, #73	; 0x49
 80109d6:	d024      	beq.n	8010a22 <_strtod_l+0x35a>
 80109d8:	2b4e      	cmp	r3, #78	; 0x4e
 80109da:	f47f aed3 	bne.w	8010784 <_strtod_l+0xbc>
 80109de:	499e      	ldr	r1, [pc, #632]	; (8010c58 <_strtod_l+0x590>)
 80109e0:	a81d      	add	r0, sp, #116	; 0x74
 80109e2:	f001 f9df 	bl	8011da4 <__match>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	f43f aecc 	beq.w	8010784 <_strtod_l+0xbc>
 80109ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	2b28      	cmp	r3, #40	; 0x28
 80109f2:	d12d      	bne.n	8010a50 <_strtod_l+0x388>
 80109f4:	4999      	ldr	r1, [pc, #612]	; (8010c5c <_strtod_l+0x594>)
 80109f6:	aa20      	add	r2, sp, #128	; 0x80
 80109f8:	a81d      	add	r0, sp, #116	; 0x74
 80109fa:	f001 f9e7 	bl	8011dcc <__hexnan>
 80109fe:	2805      	cmp	r0, #5
 8010a00:	d126      	bne.n	8010a50 <_strtod_l+0x388>
 8010a02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a04:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010a08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010a0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010a10:	e69c      	b.n	801074c <_strtod_l+0x84>
 8010a12:	210a      	movs	r1, #10
 8010a14:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010a18:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010a1c:	e7b9      	b.n	8010992 <_strtod_l+0x2ca>
 8010a1e:	2b6e      	cmp	r3, #110	; 0x6e
 8010a20:	e7db      	b.n	80109da <_strtod_l+0x312>
 8010a22:	498f      	ldr	r1, [pc, #572]	; (8010c60 <_strtod_l+0x598>)
 8010a24:	a81d      	add	r0, sp, #116	; 0x74
 8010a26:	f001 f9bd 	bl	8011da4 <__match>
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	f43f aeaa 	beq.w	8010784 <_strtod_l+0xbc>
 8010a30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a32:	498c      	ldr	r1, [pc, #560]	; (8010c64 <_strtod_l+0x59c>)
 8010a34:	3b01      	subs	r3, #1
 8010a36:	a81d      	add	r0, sp, #116	; 0x74
 8010a38:	931d      	str	r3, [sp, #116]	; 0x74
 8010a3a:	f001 f9b3 	bl	8011da4 <__match>
 8010a3e:	b910      	cbnz	r0, 8010a46 <_strtod_l+0x37e>
 8010a40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a42:	3301      	adds	r3, #1
 8010a44:	931d      	str	r3, [sp, #116]	; 0x74
 8010a46:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8010c74 <_strtod_l+0x5ac>
 8010a4a:	f04f 0a00 	mov.w	sl, #0
 8010a4e:	e67d      	b.n	801074c <_strtod_l+0x84>
 8010a50:	4885      	ldr	r0, [pc, #532]	; (8010c68 <_strtod_l+0x5a0>)
 8010a52:	f002 fc3d 	bl	80132d0 <nan>
 8010a56:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010a5a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010a5e:	e675      	b.n	801074c <_strtod_l+0x84>
 8010a60:	9b07      	ldr	r3, [sp, #28]
 8010a62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a64:	1af3      	subs	r3, r6, r3
 8010a66:	2f00      	cmp	r7, #0
 8010a68:	bf08      	it	eq
 8010a6a:	462f      	moveq	r7, r5
 8010a6c:	2d10      	cmp	r5, #16
 8010a6e:	9308      	str	r3, [sp, #32]
 8010a70:	46a8      	mov	r8, r5
 8010a72:	bfa8      	it	ge
 8010a74:	f04f 0810 	movge.w	r8, #16
 8010a78:	f7ef fd5c 	bl	8000534 <__aeabi_ui2d>
 8010a7c:	2d09      	cmp	r5, #9
 8010a7e:	4682      	mov	sl, r0
 8010a80:	468b      	mov	fp, r1
 8010a82:	dd13      	ble.n	8010aac <_strtod_l+0x3e4>
 8010a84:	4b79      	ldr	r3, [pc, #484]	; (8010c6c <_strtod_l+0x5a4>)
 8010a86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010a8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010a8e:	f7ef fdcb 	bl	8000628 <__aeabi_dmul>
 8010a92:	4682      	mov	sl, r0
 8010a94:	4648      	mov	r0, r9
 8010a96:	468b      	mov	fp, r1
 8010a98:	f7ef fd4c 	bl	8000534 <__aeabi_ui2d>
 8010a9c:	4602      	mov	r2, r0
 8010a9e:	460b      	mov	r3, r1
 8010aa0:	4650      	mov	r0, sl
 8010aa2:	4659      	mov	r1, fp
 8010aa4:	f7ef fc0a 	bl	80002bc <__adddf3>
 8010aa8:	4682      	mov	sl, r0
 8010aaa:	468b      	mov	fp, r1
 8010aac:	2d0f      	cmp	r5, #15
 8010aae:	dc38      	bgt.n	8010b22 <_strtod_l+0x45a>
 8010ab0:	9b08      	ldr	r3, [sp, #32]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f43f ae4a 	beq.w	801074c <_strtod_l+0x84>
 8010ab8:	dd24      	ble.n	8010b04 <_strtod_l+0x43c>
 8010aba:	2b16      	cmp	r3, #22
 8010abc:	dc0b      	bgt.n	8010ad6 <_strtod_l+0x40e>
 8010abe:	4d6b      	ldr	r5, [pc, #428]	; (8010c6c <_strtod_l+0x5a4>)
 8010ac0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010ac4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010ac8:	4652      	mov	r2, sl
 8010aca:	465b      	mov	r3, fp
 8010acc:	f7ef fdac 	bl	8000628 <__aeabi_dmul>
 8010ad0:	4682      	mov	sl, r0
 8010ad2:	468b      	mov	fp, r1
 8010ad4:	e63a      	b.n	801074c <_strtod_l+0x84>
 8010ad6:	9a08      	ldr	r2, [sp, #32]
 8010ad8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010adc:	4293      	cmp	r3, r2
 8010ade:	db20      	blt.n	8010b22 <_strtod_l+0x45a>
 8010ae0:	4c62      	ldr	r4, [pc, #392]	; (8010c6c <_strtod_l+0x5a4>)
 8010ae2:	f1c5 050f 	rsb	r5, r5, #15
 8010ae6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010aea:	4652      	mov	r2, sl
 8010aec:	465b      	mov	r3, fp
 8010aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010af2:	f7ef fd99 	bl	8000628 <__aeabi_dmul>
 8010af6:	9b08      	ldr	r3, [sp, #32]
 8010af8:	1b5d      	subs	r5, r3, r5
 8010afa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010afe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010b02:	e7e3      	b.n	8010acc <_strtod_l+0x404>
 8010b04:	9b08      	ldr	r3, [sp, #32]
 8010b06:	3316      	adds	r3, #22
 8010b08:	db0b      	blt.n	8010b22 <_strtod_l+0x45a>
 8010b0a:	9b07      	ldr	r3, [sp, #28]
 8010b0c:	4a57      	ldr	r2, [pc, #348]	; (8010c6c <_strtod_l+0x5a4>)
 8010b0e:	1b9e      	subs	r6, r3, r6
 8010b10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010b14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010b18:	4650      	mov	r0, sl
 8010b1a:	4659      	mov	r1, fp
 8010b1c:	f7ef feae 	bl	800087c <__aeabi_ddiv>
 8010b20:	e7d6      	b.n	8010ad0 <_strtod_l+0x408>
 8010b22:	9b08      	ldr	r3, [sp, #32]
 8010b24:	eba5 0808 	sub.w	r8, r5, r8
 8010b28:	4498      	add	r8, r3
 8010b2a:	f1b8 0f00 	cmp.w	r8, #0
 8010b2e:	dd71      	ble.n	8010c14 <_strtod_l+0x54c>
 8010b30:	f018 030f 	ands.w	r3, r8, #15
 8010b34:	d00a      	beq.n	8010b4c <_strtod_l+0x484>
 8010b36:	494d      	ldr	r1, [pc, #308]	; (8010c6c <_strtod_l+0x5a4>)
 8010b38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b3c:	4652      	mov	r2, sl
 8010b3e:	465b      	mov	r3, fp
 8010b40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b44:	f7ef fd70 	bl	8000628 <__aeabi_dmul>
 8010b48:	4682      	mov	sl, r0
 8010b4a:	468b      	mov	fp, r1
 8010b4c:	f038 080f 	bics.w	r8, r8, #15
 8010b50:	d04d      	beq.n	8010bee <_strtod_l+0x526>
 8010b52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010b56:	dd22      	ble.n	8010b9e <_strtod_l+0x4d6>
 8010b58:	2500      	movs	r5, #0
 8010b5a:	462e      	mov	r6, r5
 8010b5c:	9509      	str	r5, [sp, #36]	; 0x24
 8010b5e:	9507      	str	r5, [sp, #28]
 8010b60:	2322      	movs	r3, #34	; 0x22
 8010b62:	f8df b110 	ldr.w	fp, [pc, #272]	; 8010c74 <_strtod_l+0x5ac>
 8010b66:	6023      	str	r3, [r4, #0]
 8010b68:	f04f 0a00 	mov.w	sl, #0
 8010b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	f43f adec 	beq.w	801074c <_strtod_l+0x84>
 8010b74:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010b76:	4620      	mov	r0, r4
 8010b78:	f001 fa9c 	bl	80120b4 <_Bfree>
 8010b7c:	9907      	ldr	r1, [sp, #28]
 8010b7e:	4620      	mov	r0, r4
 8010b80:	f001 fa98 	bl	80120b4 <_Bfree>
 8010b84:	4631      	mov	r1, r6
 8010b86:	4620      	mov	r0, r4
 8010b88:	f001 fa94 	bl	80120b4 <_Bfree>
 8010b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f001 fa90 	bl	80120b4 <_Bfree>
 8010b94:	4629      	mov	r1, r5
 8010b96:	4620      	mov	r0, r4
 8010b98:	f001 fa8c 	bl	80120b4 <_Bfree>
 8010b9c:	e5d6      	b.n	801074c <_strtod_l+0x84>
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010ba4:	4650      	mov	r0, sl
 8010ba6:	4659      	mov	r1, fp
 8010ba8:	4699      	mov	r9, r3
 8010baa:	f1b8 0f01 	cmp.w	r8, #1
 8010bae:	dc21      	bgt.n	8010bf4 <_strtod_l+0x52c>
 8010bb0:	b10b      	cbz	r3, 8010bb6 <_strtod_l+0x4ee>
 8010bb2:	4682      	mov	sl, r0
 8010bb4:	468b      	mov	fp, r1
 8010bb6:	4b2e      	ldr	r3, [pc, #184]	; (8010c70 <_strtod_l+0x5a8>)
 8010bb8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010bbc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010bc0:	4652      	mov	r2, sl
 8010bc2:	465b      	mov	r3, fp
 8010bc4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010bc8:	f7ef fd2e 	bl	8000628 <__aeabi_dmul>
 8010bcc:	4b29      	ldr	r3, [pc, #164]	; (8010c74 <_strtod_l+0x5ac>)
 8010bce:	460a      	mov	r2, r1
 8010bd0:	400b      	ands	r3, r1
 8010bd2:	4929      	ldr	r1, [pc, #164]	; (8010c78 <_strtod_l+0x5b0>)
 8010bd4:	428b      	cmp	r3, r1
 8010bd6:	4682      	mov	sl, r0
 8010bd8:	d8be      	bhi.n	8010b58 <_strtod_l+0x490>
 8010bda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010bde:	428b      	cmp	r3, r1
 8010be0:	bf86      	itte	hi
 8010be2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010c7c <_strtod_l+0x5b4>
 8010be6:	f04f 3aff 	movhi.w	sl, #4294967295
 8010bea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010bee:	2300      	movs	r3, #0
 8010bf0:	9304      	str	r3, [sp, #16]
 8010bf2:	e081      	b.n	8010cf8 <_strtod_l+0x630>
 8010bf4:	f018 0f01 	tst.w	r8, #1
 8010bf8:	d007      	beq.n	8010c0a <_strtod_l+0x542>
 8010bfa:	4b1d      	ldr	r3, [pc, #116]	; (8010c70 <_strtod_l+0x5a8>)
 8010bfc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c04:	f7ef fd10 	bl	8000628 <__aeabi_dmul>
 8010c08:	2301      	movs	r3, #1
 8010c0a:	f109 0901 	add.w	r9, r9, #1
 8010c0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010c12:	e7ca      	b.n	8010baa <_strtod_l+0x4e2>
 8010c14:	d0eb      	beq.n	8010bee <_strtod_l+0x526>
 8010c16:	f1c8 0800 	rsb	r8, r8, #0
 8010c1a:	f018 020f 	ands.w	r2, r8, #15
 8010c1e:	d00a      	beq.n	8010c36 <_strtod_l+0x56e>
 8010c20:	4b12      	ldr	r3, [pc, #72]	; (8010c6c <_strtod_l+0x5a4>)
 8010c22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c26:	4650      	mov	r0, sl
 8010c28:	4659      	mov	r1, fp
 8010c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2e:	f7ef fe25 	bl	800087c <__aeabi_ddiv>
 8010c32:	4682      	mov	sl, r0
 8010c34:	468b      	mov	fp, r1
 8010c36:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010c3a:	d0d8      	beq.n	8010bee <_strtod_l+0x526>
 8010c3c:	f1b8 0f1f 	cmp.w	r8, #31
 8010c40:	dd1e      	ble.n	8010c80 <_strtod_l+0x5b8>
 8010c42:	2500      	movs	r5, #0
 8010c44:	462e      	mov	r6, r5
 8010c46:	9509      	str	r5, [sp, #36]	; 0x24
 8010c48:	9507      	str	r5, [sp, #28]
 8010c4a:	2322      	movs	r3, #34	; 0x22
 8010c4c:	f04f 0a00 	mov.w	sl, #0
 8010c50:	f04f 0b00 	mov.w	fp, #0
 8010c54:	6023      	str	r3, [r4, #0]
 8010c56:	e789      	b.n	8010b6c <_strtod_l+0x4a4>
 8010c58:	08014f55 	.word	0x08014f55
 8010c5c:	08014f6c 	.word	0x08014f6c
 8010c60:	08014f4c 	.word	0x08014f4c
 8010c64:	08014f4f 	.word	0x08014f4f
 8010c68:	0801527a 	.word	0x0801527a
 8010c6c:	08015138 	.word	0x08015138
 8010c70:	08015110 	.word	0x08015110
 8010c74:	7ff00000 	.word	0x7ff00000
 8010c78:	7ca00000 	.word	0x7ca00000
 8010c7c:	7fefffff 	.word	0x7fefffff
 8010c80:	f018 0310 	ands.w	r3, r8, #16
 8010c84:	bf18      	it	ne
 8010c86:	236a      	movne	r3, #106	; 0x6a
 8010c88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011040 <_strtod_l+0x978>
 8010c8c:	9304      	str	r3, [sp, #16]
 8010c8e:	4650      	mov	r0, sl
 8010c90:	4659      	mov	r1, fp
 8010c92:	2300      	movs	r3, #0
 8010c94:	f018 0f01 	tst.w	r8, #1
 8010c98:	d004      	beq.n	8010ca4 <_strtod_l+0x5dc>
 8010c9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010c9e:	f7ef fcc3 	bl	8000628 <__aeabi_dmul>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010ca8:	f109 0908 	add.w	r9, r9, #8
 8010cac:	d1f2      	bne.n	8010c94 <_strtod_l+0x5cc>
 8010cae:	b10b      	cbz	r3, 8010cb4 <_strtod_l+0x5ec>
 8010cb0:	4682      	mov	sl, r0
 8010cb2:	468b      	mov	fp, r1
 8010cb4:	9b04      	ldr	r3, [sp, #16]
 8010cb6:	b1bb      	cbz	r3, 8010ce8 <_strtod_l+0x620>
 8010cb8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010cbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	4659      	mov	r1, fp
 8010cc4:	dd10      	ble.n	8010ce8 <_strtod_l+0x620>
 8010cc6:	2b1f      	cmp	r3, #31
 8010cc8:	f340 8128 	ble.w	8010f1c <_strtod_l+0x854>
 8010ccc:	2b34      	cmp	r3, #52	; 0x34
 8010cce:	bfde      	ittt	le
 8010cd0:	3b20      	suble	r3, #32
 8010cd2:	f04f 32ff 	movle.w	r2, #4294967295
 8010cd6:	fa02 f303 	lslle.w	r3, r2, r3
 8010cda:	f04f 0a00 	mov.w	sl, #0
 8010cde:	bfcc      	ite	gt
 8010ce0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010ce4:	ea03 0b01 	andle.w	fp, r3, r1
 8010ce8:	2200      	movs	r2, #0
 8010cea:	2300      	movs	r3, #0
 8010cec:	4650      	mov	r0, sl
 8010cee:	4659      	mov	r1, fp
 8010cf0:	f7ef ff02 	bl	8000af8 <__aeabi_dcmpeq>
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	d1a4      	bne.n	8010c42 <_strtod_l+0x57a>
 8010cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cfa:	9300      	str	r3, [sp, #0]
 8010cfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010cfe:	462b      	mov	r3, r5
 8010d00:	463a      	mov	r2, r7
 8010d02:	4620      	mov	r0, r4
 8010d04:	f001 fa42 	bl	801218c <__s2b>
 8010d08:	9009      	str	r0, [sp, #36]	; 0x24
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	f43f af24 	beq.w	8010b58 <_strtod_l+0x490>
 8010d10:	9b07      	ldr	r3, [sp, #28]
 8010d12:	1b9e      	subs	r6, r3, r6
 8010d14:	9b08      	ldr	r3, [sp, #32]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	bfb4      	ite	lt
 8010d1a:	4633      	movlt	r3, r6
 8010d1c:	2300      	movge	r3, #0
 8010d1e:	9310      	str	r3, [sp, #64]	; 0x40
 8010d20:	9b08      	ldr	r3, [sp, #32]
 8010d22:	2500      	movs	r5, #0
 8010d24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010d28:	9318      	str	r3, [sp, #96]	; 0x60
 8010d2a:	462e      	mov	r6, r5
 8010d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d2e:	4620      	mov	r0, r4
 8010d30:	6859      	ldr	r1, [r3, #4]
 8010d32:	f001 f97f 	bl	8012034 <_Balloc>
 8010d36:	9007      	str	r0, [sp, #28]
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	f43f af11 	beq.w	8010b60 <_strtod_l+0x498>
 8010d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d40:	691a      	ldr	r2, [r3, #16]
 8010d42:	3202      	adds	r2, #2
 8010d44:	f103 010c 	add.w	r1, r3, #12
 8010d48:	0092      	lsls	r2, r2, #2
 8010d4a:	300c      	adds	r0, #12
 8010d4c:	f7ff fac6 	bl	80102dc <memcpy>
 8010d50:	ec4b ab10 	vmov	d0, sl, fp
 8010d54:	aa20      	add	r2, sp, #128	; 0x80
 8010d56:	a91f      	add	r1, sp, #124	; 0x7c
 8010d58:	4620      	mov	r0, r4
 8010d5a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8010d5e:	f001 fd51 	bl	8012804 <__d2b>
 8010d62:	901e      	str	r0, [sp, #120]	; 0x78
 8010d64:	2800      	cmp	r0, #0
 8010d66:	f43f aefb 	beq.w	8010b60 <_strtod_l+0x498>
 8010d6a:	2101      	movs	r1, #1
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f001 faa7 	bl	80122c0 <__i2b>
 8010d72:	4606      	mov	r6, r0
 8010d74:	2800      	cmp	r0, #0
 8010d76:	f43f aef3 	beq.w	8010b60 <_strtod_l+0x498>
 8010d7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010d7c:	9904      	ldr	r1, [sp, #16]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	bfab      	itete	ge
 8010d82:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8010d84:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8010d86:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010d88:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8010d8c:	bfac      	ite	ge
 8010d8e:	eb03 0902 	addge.w	r9, r3, r2
 8010d92:	1ad7      	sublt	r7, r2, r3
 8010d94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010d96:	eba3 0801 	sub.w	r8, r3, r1
 8010d9a:	4490      	add	r8, r2
 8010d9c:	4ba3      	ldr	r3, [pc, #652]	; (801102c <_strtod_l+0x964>)
 8010d9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010da2:	4598      	cmp	r8, r3
 8010da4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010da8:	f280 80cc 	bge.w	8010f44 <_strtod_l+0x87c>
 8010dac:	eba3 0308 	sub.w	r3, r3, r8
 8010db0:	2b1f      	cmp	r3, #31
 8010db2:	eba2 0203 	sub.w	r2, r2, r3
 8010db6:	f04f 0101 	mov.w	r1, #1
 8010dba:	f300 80b6 	bgt.w	8010f2a <_strtod_l+0x862>
 8010dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8010dc2:	9311      	str	r3, [sp, #68]	; 0x44
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8010dc8:	eb09 0802 	add.w	r8, r9, r2
 8010dcc:	9b04      	ldr	r3, [sp, #16]
 8010dce:	45c1      	cmp	r9, r8
 8010dd0:	4417      	add	r7, r2
 8010dd2:	441f      	add	r7, r3
 8010dd4:	464b      	mov	r3, r9
 8010dd6:	bfa8      	it	ge
 8010dd8:	4643      	movge	r3, r8
 8010dda:	42bb      	cmp	r3, r7
 8010ddc:	bfa8      	it	ge
 8010dde:	463b      	movge	r3, r7
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	bfc2      	ittt	gt
 8010de4:	eba8 0803 	subgt.w	r8, r8, r3
 8010de8:	1aff      	subgt	r7, r7, r3
 8010dea:	eba9 0903 	subgt.w	r9, r9, r3
 8010dee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	dd17      	ble.n	8010e24 <_strtod_l+0x75c>
 8010df4:	4631      	mov	r1, r6
 8010df6:	461a      	mov	r2, r3
 8010df8:	4620      	mov	r0, r4
 8010dfa:	f001 fb1d 	bl	8012438 <__pow5mult>
 8010dfe:	4606      	mov	r6, r0
 8010e00:	2800      	cmp	r0, #0
 8010e02:	f43f aead 	beq.w	8010b60 <_strtod_l+0x498>
 8010e06:	4601      	mov	r1, r0
 8010e08:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	f001 fa6e 	bl	80122ec <__multiply>
 8010e10:	900f      	str	r0, [sp, #60]	; 0x3c
 8010e12:	2800      	cmp	r0, #0
 8010e14:	f43f aea4 	beq.w	8010b60 <_strtod_l+0x498>
 8010e18:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f001 f94a 	bl	80120b4 <_Bfree>
 8010e20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e22:	931e      	str	r3, [sp, #120]	; 0x78
 8010e24:	f1b8 0f00 	cmp.w	r8, #0
 8010e28:	f300 8091 	bgt.w	8010f4e <_strtod_l+0x886>
 8010e2c:	9b08      	ldr	r3, [sp, #32]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	dd08      	ble.n	8010e44 <_strtod_l+0x77c>
 8010e32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010e34:	9907      	ldr	r1, [sp, #28]
 8010e36:	4620      	mov	r0, r4
 8010e38:	f001 fafe 	bl	8012438 <__pow5mult>
 8010e3c:	9007      	str	r0, [sp, #28]
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	f43f ae8e 	beq.w	8010b60 <_strtod_l+0x498>
 8010e44:	2f00      	cmp	r7, #0
 8010e46:	dd08      	ble.n	8010e5a <_strtod_l+0x792>
 8010e48:	9907      	ldr	r1, [sp, #28]
 8010e4a:	463a      	mov	r2, r7
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f001 fb4d 	bl	80124ec <__lshift>
 8010e52:	9007      	str	r0, [sp, #28]
 8010e54:	2800      	cmp	r0, #0
 8010e56:	f43f ae83 	beq.w	8010b60 <_strtod_l+0x498>
 8010e5a:	f1b9 0f00 	cmp.w	r9, #0
 8010e5e:	dd08      	ble.n	8010e72 <_strtod_l+0x7aa>
 8010e60:	4631      	mov	r1, r6
 8010e62:	464a      	mov	r2, r9
 8010e64:	4620      	mov	r0, r4
 8010e66:	f001 fb41 	bl	80124ec <__lshift>
 8010e6a:	4606      	mov	r6, r0
 8010e6c:	2800      	cmp	r0, #0
 8010e6e:	f43f ae77 	beq.w	8010b60 <_strtod_l+0x498>
 8010e72:	9a07      	ldr	r2, [sp, #28]
 8010e74:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010e76:	4620      	mov	r0, r4
 8010e78:	f001 fbc0 	bl	80125fc <__mdiff>
 8010e7c:	4605      	mov	r5, r0
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	f43f ae6e 	beq.w	8010b60 <_strtod_l+0x498>
 8010e84:	68c3      	ldr	r3, [r0, #12]
 8010e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e88:	2300      	movs	r3, #0
 8010e8a:	60c3      	str	r3, [r0, #12]
 8010e8c:	4631      	mov	r1, r6
 8010e8e:	f001 fb99 	bl	80125c4 <__mcmp>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	da65      	bge.n	8010f62 <_strtod_l+0x89a>
 8010e96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e98:	ea53 030a 	orrs.w	r3, r3, sl
 8010e9c:	f040 8087 	bne.w	8010fae <_strtod_l+0x8e6>
 8010ea0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f040 8082 	bne.w	8010fae <_strtod_l+0x8e6>
 8010eaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010eae:	0d1b      	lsrs	r3, r3, #20
 8010eb0:	051b      	lsls	r3, r3, #20
 8010eb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010eb6:	d97a      	bls.n	8010fae <_strtod_l+0x8e6>
 8010eb8:	696b      	ldr	r3, [r5, #20]
 8010eba:	b913      	cbnz	r3, 8010ec2 <_strtod_l+0x7fa>
 8010ebc:	692b      	ldr	r3, [r5, #16]
 8010ebe:	2b01      	cmp	r3, #1
 8010ec0:	dd75      	ble.n	8010fae <_strtod_l+0x8e6>
 8010ec2:	4629      	mov	r1, r5
 8010ec4:	2201      	movs	r2, #1
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f001 fb10 	bl	80124ec <__lshift>
 8010ecc:	4631      	mov	r1, r6
 8010ece:	4605      	mov	r5, r0
 8010ed0:	f001 fb78 	bl	80125c4 <__mcmp>
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	dd6a      	ble.n	8010fae <_strtod_l+0x8e6>
 8010ed8:	9904      	ldr	r1, [sp, #16]
 8010eda:	4a55      	ldr	r2, [pc, #340]	; (8011030 <_strtod_l+0x968>)
 8010edc:	465b      	mov	r3, fp
 8010ede:	2900      	cmp	r1, #0
 8010ee0:	f000 8085 	beq.w	8010fee <_strtod_l+0x926>
 8010ee4:	ea02 010b 	and.w	r1, r2, fp
 8010ee8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010eec:	dc7f      	bgt.n	8010fee <_strtod_l+0x926>
 8010eee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010ef2:	f77f aeaa 	ble.w	8010c4a <_strtod_l+0x582>
 8010ef6:	4a4f      	ldr	r2, [pc, #316]	; (8011034 <_strtod_l+0x96c>)
 8010ef8:	2300      	movs	r3, #0
 8010efa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010efe:	4650      	mov	r0, sl
 8010f00:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8010f04:	4659      	mov	r1, fp
 8010f06:	f7ef fb8f 	bl	8000628 <__aeabi_dmul>
 8010f0a:	460b      	mov	r3, r1
 8010f0c:	4303      	orrs	r3, r0
 8010f0e:	bf08      	it	eq
 8010f10:	2322      	moveq	r3, #34	; 0x22
 8010f12:	4682      	mov	sl, r0
 8010f14:	468b      	mov	fp, r1
 8010f16:	bf08      	it	eq
 8010f18:	6023      	streq	r3, [r4, #0]
 8010f1a:	e62b      	b.n	8010b74 <_strtod_l+0x4ac>
 8010f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f20:	fa02 f303 	lsl.w	r3, r2, r3
 8010f24:	ea03 0a0a 	and.w	sl, r3, sl
 8010f28:	e6de      	b.n	8010ce8 <_strtod_l+0x620>
 8010f2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010f2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010f32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010f36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010f3a:	fa01 f308 	lsl.w	r3, r1, r8
 8010f3e:	930c      	str	r3, [sp, #48]	; 0x30
 8010f40:	9111      	str	r1, [sp, #68]	; 0x44
 8010f42:	e741      	b.n	8010dc8 <_strtod_l+0x700>
 8010f44:	2300      	movs	r3, #0
 8010f46:	930c      	str	r3, [sp, #48]	; 0x30
 8010f48:	2301      	movs	r3, #1
 8010f4a:	9311      	str	r3, [sp, #68]	; 0x44
 8010f4c:	e73c      	b.n	8010dc8 <_strtod_l+0x700>
 8010f4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010f50:	4642      	mov	r2, r8
 8010f52:	4620      	mov	r0, r4
 8010f54:	f001 faca 	bl	80124ec <__lshift>
 8010f58:	901e      	str	r0, [sp, #120]	; 0x78
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	f47f af66 	bne.w	8010e2c <_strtod_l+0x764>
 8010f60:	e5fe      	b.n	8010b60 <_strtod_l+0x498>
 8010f62:	465f      	mov	r7, fp
 8010f64:	d16e      	bne.n	8011044 <_strtod_l+0x97c>
 8010f66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010f68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f6c:	b342      	cbz	r2, 8010fc0 <_strtod_l+0x8f8>
 8010f6e:	4a32      	ldr	r2, [pc, #200]	; (8011038 <_strtod_l+0x970>)
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d128      	bne.n	8010fc6 <_strtod_l+0x8fe>
 8010f74:	9b04      	ldr	r3, [sp, #16]
 8010f76:	4650      	mov	r0, sl
 8010f78:	b1eb      	cbz	r3, 8010fb6 <_strtod_l+0x8ee>
 8010f7a:	4a2d      	ldr	r2, [pc, #180]	; (8011030 <_strtod_l+0x968>)
 8010f7c:	403a      	ands	r2, r7
 8010f7e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010f82:	f04f 31ff 	mov.w	r1, #4294967295
 8010f86:	d819      	bhi.n	8010fbc <_strtod_l+0x8f4>
 8010f88:	0d12      	lsrs	r2, r2, #20
 8010f8a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8010f92:	4298      	cmp	r0, r3
 8010f94:	d117      	bne.n	8010fc6 <_strtod_l+0x8fe>
 8010f96:	4b29      	ldr	r3, [pc, #164]	; (801103c <_strtod_l+0x974>)
 8010f98:	429f      	cmp	r7, r3
 8010f9a:	d102      	bne.n	8010fa2 <_strtod_l+0x8da>
 8010f9c:	3001      	adds	r0, #1
 8010f9e:	f43f addf 	beq.w	8010b60 <_strtod_l+0x498>
 8010fa2:	4b23      	ldr	r3, [pc, #140]	; (8011030 <_strtod_l+0x968>)
 8010fa4:	403b      	ands	r3, r7
 8010fa6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010faa:	f04f 0a00 	mov.w	sl, #0
 8010fae:	9b04      	ldr	r3, [sp, #16]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d1a0      	bne.n	8010ef6 <_strtod_l+0x82e>
 8010fb4:	e5de      	b.n	8010b74 <_strtod_l+0x4ac>
 8010fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8010fba:	e7ea      	b.n	8010f92 <_strtod_l+0x8ca>
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	e7e8      	b.n	8010f92 <_strtod_l+0x8ca>
 8010fc0:	ea53 030a 	orrs.w	r3, r3, sl
 8010fc4:	d088      	beq.n	8010ed8 <_strtod_l+0x810>
 8010fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010fc8:	b1db      	cbz	r3, 8011002 <_strtod_l+0x93a>
 8010fca:	423b      	tst	r3, r7
 8010fcc:	d0ef      	beq.n	8010fae <_strtod_l+0x8e6>
 8010fce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fd0:	9a04      	ldr	r2, [sp, #16]
 8010fd2:	4650      	mov	r0, sl
 8010fd4:	4659      	mov	r1, fp
 8010fd6:	b1c3      	cbz	r3, 801100a <_strtod_l+0x942>
 8010fd8:	f7ff fb57 	bl	801068a <sulp>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	460b      	mov	r3, r1
 8010fe0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010fe4:	f7ef f96a 	bl	80002bc <__adddf3>
 8010fe8:	4682      	mov	sl, r0
 8010fea:	468b      	mov	fp, r1
 8010fec:	e7df      	b.n	8010fae <_strtod_l+0x8e6>
 8010fee:	4013      	ands	r3, r2
 8010ff0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010ff4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010ff8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010ffc:	f04f 3aff 	mov.w	sl, #4294967295
 8011000:	e7d5      	b.n	8010fae <_strtod_l+0x8e6>
 8011002:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011004:	ea13 0f0a 	tst.w	r3, sl
 8011008:	e7e0      	b.n	8010fcc <_strtod_l+0x904>
 801100a:	f7ff fb3e 	bl	801068a <sulp>
 801100e:	4602      	mov	r2, r0
 8011010:	460b      	mov	r3, r1
 8011012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011016:	f7ef f94f 	bl	80002b8 <__aeabi_dsub>
 801101a:	2200      	movs	r2, #0
 801101c:	2300      	movs	r3, #0
 801101e:	4682      	mov	sl, r0
 8011020:	468b      	mov	fp, r1
 8011022:	f7ef fd69 	bl	8000af8 <__aeabi_dcmpeq>
 8011026:	2800      	cmp	r0, #0
 8011028:	d0c1      	beq.n	8010fae <_strtod_l+0x8e6>
 801102a:	e60e      	b.n	8010c4a <_strtod_l+0x582>
 801102c:	fffffc02 	.word	0xfffffc02
 8011030:	7ff00000 	.word	0x7ff00000
 8011034:	39500000 	.word	0x39500000
 8011038:	000fffff 	.word	0x000fffff
 801103c:	7fefffff 	.word	0x7fefffff
 8011040:	08014f80 	.word	0x08014f80
 8011044:	4631      	mov	r1, r6
 8011046:	4628      	mov	r0, r5
 8011048:	f001 fc38 	bl	80128bc <__ratio>
 801104c:	ec59 8b10 	vmov	r8, r9, d0
 8011050:	ee10 0a10 	vmov	r0, s0
 8011054:	2200      	movs	r2, #0
 8011056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801105a:	4649      	mov	r1, r9
 801105c:	f7ef fd60 	bl	8000b20 <__aeabi_dcmple>
 8011060:	2800      	cmp	r0, #0
 8011062:	d07c      	beq.n	801115e <_strtod_l+0xa96>
 8011064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011066:	2b00      	cmp	r3, #0
 8011068:	d04c      	beq.n	8011104 <_strtod_l+0xa3c>
 801106a:	4b95      	ldr	r3, [pc, #596]	; (80112c0 <_strtod_l+0xbf8>)
 801106c:	2200      	movs	r2, #0
 801106e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011072:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80112c0 <_strtod_l+0xbf8>
 8011076:	f04f 0800 	mov.w	r8, #0
 801107a:	4b92      	ldr	r3, [pc, #584]	; (80112c4 <_strtod_l+0xbfc>)
 801107c:	403b      	ands	r3, r7
 801107e:	9311      	str	r3, [sp, #68]	; 0x44
 8011080:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011082:	4b91      	ldr	r3, [pc, #580]	; (80112c8 <_strtod_l+0xc00>)
 8011084:	429a      	cmp	r2, r3
 8011086:	f040 80b2 	bne.w	80111ee <_strtod_l+0xb26>
 801108a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801108e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011092:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011096:	ec4b ab10 	vmov	d0, sl, fp
 801109a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801109e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80110a2:	f001 fb33 	bl	801270c <__ulp>
 80110a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80110aa:	ec53 2b10 	vmov	r2, r3, d0
 80110ae:	f7ef fabb 	bl	8000628 <__aeabi_dmul>
 80110b2:	4652      	mov	r2, sl
 80110b4:	465b      	mov	r3, fp
 80110b6:	f7ef f901 	bl	80002bc <__adddf3>
 80110ba:	460b      	mov	r3, r1
 80110bc:	4981      	ldr	r1, [pc, #516]	; (80112c4 <_strtod_l+0xbfc>)
 80110be:	4a83      	ldr	r2, [pc, #524]	; (80112cc <_strtod_l+0xc04>)
 80110c0:	4019      	ands	r1, r3
 80110c2:	4291      	cmp	r1, r2
 80110c4:	4682      	mov	sl, r0
 80110c6:	d95e      	bls.n	8011186 <_strtod_l+0xabe>
 80110c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d103      	bne.n	80110da <_strtod_l+0xa12>
 80110d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110d4:	3301      	adds	r3, #1
 80110d6:	f43f ad43 	beq.w	8010b60 <_strtod_l+0x498>
 80110da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80112d8 <_strtod_l+0xc10>
 80110de:	f04f 3aff 	mov.w	sl, #4294967295
 80110e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80110e4:	4620      	mov	r0, r4
 80110e6:	f000 ffe5 	bl	80120b4 <_Bfree>
 80110ea:	9907      	ldr	r1, [sp, #28]
 80110ec:	4620      	mov	r0, r4
 80110ee:	f000 ffe1 	bl	80120b4 <_Bfree>
 80110f2:	4631      	mov	r1, r6
 80110f4:	4620      	mov	r0, r4
 80110f6:	f000 ffdd 	bl	80120b4 <_Bfree>
 80110fa:	4629      	mov	r1, r5
 80110fc:	4620      	mov	r0, r4
 80110fe:	f000 ffd9 	bl	80120b4 <_Bfree>
 8011102:	e613      	b.n	8010d2c <_strtod_l+0x664>
 8011104:	f1ba 0f00 	cmp.w	sl, #0
 8011108:	d11b      	bne.n	8011142 <_strtod_l+0xa7a>
 801110a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801110e:	b9f3      	cbnz	r3, 801114e <_strtod_l+0xa86>
 8011110:	4b6b      	ldr	r3, [pc, #428]	; (80112c0 <_strtod_l+0xbf8>)
 8011112:	2200      	movs	r2, #0
 8011114:	4640      	mov	r0, r8
 8011116:	4649      	mov	r1, r9
 8011118:	f7ef fcf8 	bl	8000b0c <__aeabi_dcmplt>
 801111c:	b9d0      	cbnz	r0, 8011154 <_strtod_l+0xa8c>
 801111e:	4640      	mov	r0, r8
 8011120:	4649      	mov	r1, r9
 8011122:	4b6b      	ldr	r3, [pc, #428]	; (80112d0 <_strtod_l+0xc08>)
 8011124:	2200      	movs	r2, #0
 8011126:	f7ef fa7f 	bl	8000628 <__aeabi_dmul>
 801112a:	4680      	mov	r8, r0
 801112c:	4689      	mov	r9, r1
 801112e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011132:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011136:	931b      	str	r3, [sp, #108]	; 0x6c
 8011138:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801113c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011140:	e79b      	b.n	801107a <_strtod_l+0x9b2>
 8011142:	f1ba 0f01 	cmp.w	sl, #1
 8011146:	d102      	bne.n	801114e <_strtod_l+0xa86>
 8011148:	2f00      	cmp	r7, #0
 801114a:	f43f ad7e 	beq.w	8010c4a <_strtod_l+0x582>
 801114e:	4b61      	ldr	r3, [pc, #388]	; (80112d4 <_strtod_l+0xc0c>)
 8011150:	2200      	movs	r2, #0
 8011152:	e78c      	b.n	801106e <_strtod_l+0x9a6>
 8011154:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80112d0 <_strtod_l+0xc08>
 8011158:	f04f 0800 	mov.w	r8, #0
 801115c:	e7e7      	b.n	801112e <_strtod_l+0xa66>
 801115e:	4b5c      	ldr	r3, [pc, #368]	; (80112d0 <_strtod_l+0xc08>)
 8011160:	4640      	mov	r0, r8
 8011162:	4649      	mov	r1, r9
 8011164:	2200      	movs	r2, #0
 8011166:	f7ef fa5f 	bl	8000628 <__aeabi_dmul>
 801116a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801116c:	4680      	mov	r8, r0
 801116e:	4689      	mov	r9, r1
 8011170:	b933      	cbnz	r3, 8011180 <_strtod_l+0xab8>
 8011172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011176:	9012      	str	r0, [sp, #72]	; 0x48
 8011178:	9313      	str	r3, [sp, #76]	; 0x4c
 801117a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801117e:	e7dd      	b.n	801113c <_strtod_l+0xa74>
 8011180:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011184:	e7f9      	b.n	801117a <_strtod_l+0xab2>
 8011186:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801118a:	9b04      	ldr	r3, [sp, #16]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d1a8      	bne.n	80110e2 <_strtod_l+0xa1a>
 8011190:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011194:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011196:	0d1b      	lsrs	r3, r3, #20
 8011198:	051b      	lsls	r3, r3, #20
 801119a:	429a      	cmp	r2, r3
 801119c:	d1a1      	bne.n	80110e2 <_strtod_l+0xa1a>
 801119e:	4640      	mov	r0, r8
 80111a0:	4649      	mov	r1, r9
 80111a2:	f7ef fd8b 	bl	8000cbc <__aeabi_d2lz>
 80111a6:	f7ef fa11 	bl	80005cc <__aeabi_l2d>
 80111aa:	4602      	mov	r2, r0
 80111ac:	460b      	mov	r3, r1
 80111ae:	4640      	mov	r0, r8
 80111b0:	4649      	mov	r1, r9
 80111b2:	f7ef f881 	bl	80002b8 <__aeabi_dsub>
 80111b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80111b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111bc:	ea43 030a 	orr.w	r3, r3, sl
 80111c0:	4313      	orrs	r3, r2
 80111c2:	4680      	mov	r8, r0
 80111c4:	4689      	mov	r9, r1
 80111c6:	d053      	beq.n	8011270 <_strtod_l+0xba8>
 80111c8:	a335      	add	r3, pc, #212	; (adr r3, 80112a0 <_strtod_l+0xbd8>)
 80111ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ce:	f7ef fc9d 	bl	8000b0c <__aeabi_dcmplt>
 80111d2:	2800      	cmp	r0, #0
 80111d4:	f47f acce 	bne.w	8010b74 <_strtod_l+0x4ac>
 80111d8:	a333      	add	r3, pc, #204	; (adr r3, 80112a8 <_strtod_l+0xbe0>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	4640      	mov	r0, r8
 80111e0:	4649      	mov	r1, r9
 80111e2:	f7ef fcb1 	bl	8000b48 <__aeabi_dcmpgt>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	f43f af7b 	beq.w	80110e2 <_strtod_l+0xa1a>
 80111ec:	e4c2      	b.n	8010b74 <_strtod_l+0x4ac>
 80111ee:	9b04      	ldr	r3, [sp, #16]
 80111f0:	b333      	cbz	r3, 8011240 <_strtod_l+0xb78>
 80111f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80111f8:	d822      	bhi.n	8011240 <_strtod_l+0xb78>
 80111fa:	a32d      	add	r3, pc, #180	; (adr r3, 80112b0 <_strtod_l+0xbe8>)
 80111fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011200:	4640      	mov	r0, r8
 8011202:	4649      	mov	r1, r9
 8011204:	f7ef fc8c 	bl	8000b20 <__aeabi_dcmple>
 8011208:	b1a0      	cbz	r0, 8011234 <_strtod_l+0xb6c>
 801120a:	4649      	mov	r1, r9
 801120c:	4640      	mov	r0, r8
 801120e:	f7ef fccd 	bl	8000bac <__aeabi_d2uiz>
 8011212:	2801      	cmp	r0, #1
 8011214:	bf38      	it	cc
 8011216:	2001      	movcc	r0, #1
 8011218:	f7ef f98c 	bl	8000534 <__aeabi_ui2d>
 801121c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801121e:	4680      	mov	r8, r0
 8011220:	4689      	mov	r9, r1
 8011222:	bb13      	cbnz	r3, 801126a <_strtod_l+0xba2>
 8011224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011228:	9014      	str	r0, [sp, #80]	; 0x50
 801122a:	9315      	str	r3, [sp, #84]	; 0x54
 801122c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011230:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011236:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011238:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801123c:	1a9b      	subs	r3, r3, r2
 801123e:	930d      	str	r3, [sp, #52]	; 0x34
 8011240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011244:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011248:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801124c:	f001 fa5e 	bl	801270c <__ulp>
 8011250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011254:	ec53 2b10 	vmov	r2, r3, d0
 8011258:	f7ef f9e6 	bl	8000628 <__aeabi_dmul>
 801125c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011260:	f7ef f82c 	bl	80002bc <__adddf3>
 8011264:	4682      	mov	sl, r0
 8011266:	468b      	mov	fp, r1
 8011268:	e78f      	b.n	801118a <_strtod_l+0xac2>
 801126a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801126e:	e7dd      	b.n	801122c <_strtod_l+0xb64>
 8011270:	a311      	add	r3, pc, #68	; (adr r3, 80112b8 <_strtod_l+0xbf0>)
 8011272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011276:	f7ef fc49 	bl	8000b0c <__aeabi_dcmplt>
 801127a:	e7b4      	b.n	80111e6 <_strtod_l+0xb1e>
 801127c:	2300      	movs	r3, #0
 801127e:	930e      	str	r3, [sp, #56]	; 0x38
 8011280:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011282:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011284:	6013      	str	r3, [r2, #0]
 8011286:	f7ff ba65 	b.w	8010754 <_strtod_l+0x8c>
 801128a:	2b65      	cmp	r3, #101	; 0x65
 801128c:	f43f ab5d 	beq.w	801094a <_strtod_l+0x282>
 8011290:	2b45      	cmp	r3, #69	; 0x45
 8011292:	f43f ab5a 	beq.w	801094a <_strtod_l+0x282>
 8011296:	2201      	movs	r2, #1
 8011298:	f7ff bb92 	b.w	80109c0 <_strtod_l+0x2f8>
 801129c:	f3af 8000 	nop.w
 80112a0:	94a03595 	.word	0x94a03595
 80112a4:	3fdfffff 	.word	0x3fdfffff
 80112a8:	35afe535 	.word	0x35afe535
 80112ac:	3fe00000 	.word	0x3fe00000
 80112b0:	ffc00000 	.word	0xffc00000
 80112b4:	41dfffff 	.word	0x41dfffff
 80112b8:	94a03595 	.word	0x94a03595
 80112bc:	3fcfffff 	.word	0x3fcfffff
 80112c0:	3ff00000 	.word	0x3ff00000
 80112c4:	7ff00000 	.word	0x7ff00000
 80112c8:	7fe00000 	.word	0x7fe00000
 80112cc:	7c9fffff 	.word	0x7c9fffff
 80112d0:	3fe00000 	.word	0x3fe00000
 80112d4:	bff00000 	.word	0xbff00000
 80112d8:	7fefffff 	.word	0x7fefffff

080112dc <strtod>:
 80112dc:	460a      	mov	r2, r1
 80112de:	4601      	mov	r1, r0
 80112e0:	4802      	ldr	r0, [pc, #8]	; (80112ec <strtod+0x10>)
 80112e2:	4b03      	ldr	r3, [pc, #12]	; (80112f0 <strtod+0x14>)
 80112e4:	6800      	ldr	r0, [r0, #0]
 80112e6:	f7ff b9ef 	b.w	80106c8 <_strtod_l>
 80112ea:	bf00      	nop
 80112ec:	20000160 	.word	0x20000160
 80112f0:	200001c8 	.word	0x200001c8

080112f4 <__swbuf_r>:
 80112f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f6:	460e      	mov	r6, r1
 80112f8:	4614      	mov	r4, r2
 80112fa:	4605      	mov	r5, r0
 80112fc:	b118      	cbz	r0, 8011306 <__swbuf_r+0x12>
 80112fe:	6983      	ldr	r3, [r0, #24]
 8011300:	b90b      	cbnz	r3, 8011306 <__swbuf_r+0x12>
 8011302:	f000 f9f3 	bl	80116ec <__sinit>
 8011306:	4b21      	ldr	r3, [pc, #132]	; (801138c <__swbuf_r+0x98>)
 8011308:	429c      	cmp	r4, r3
 801130a:	d12b      	bne.n	8011364 <__swbuf_r+0x70>
 801130c:	686c      	ldr	r4, [r5, #4]
 801130e:	69a3      	ldr	r3, [r4, #24]
 8011310:	60a3      	str	r3, [r4, #8]
 8011312:	89a3      	ldrh	r3, [r4, #12]
 8011314:	071a      	lsls	r2, r3, #28
 8011316:	d52f      	bpl.n	8011378 <__swbuf_r+0x84>
 8011318:	6923      	ldr	r3, [r4, #16]
 801131a:	b36b      	cbz	r3, 8011378 <__swbuf_r+0x84>
 801131c:	6923      	ldr	r3, [r4, #16]
 801131e:	6820      	ldr	r0, [r4, #0]
 8011320:	1ac0      	subs	r0, r0, r3
 8011322:	6963      	ldr	r3, [r4, #20]
 8011324:	b2f6      	uxtb	r6, r6
 8011326:	4283      	cmp	r3, r0
 8011328:	4637      	mov	r7, r6
 801132a:	dc04      	bgt.n	8011336 <__swbuf_r+0x42>
 801132c:	4621      	mov	r1, r4
 801132e:	4628      	mov	r0, r5
 8011330:	f000 f948 	bl	80115c4 <_fflush_r>
 8011334:	bb30      	cbnz	r0, 8011384 <__swbuf_r+0x90>
 8011336:	68a3      	ldr	r3, [r4, #8]
 8011338:	3b01      	subs	r3, #1
 801133a:	60a3      	str	r3, [r4, #8]
 801133c:	6823      	ldr	r3, [r4, #0]
 801133e:	1c5a      	adds	r2, r3, #1
 8011340:	6022      	str	r2, [r4, #0]
 8011342:	701e      	strb	r6, [r3, #0]
 8011344:	6963      	ldr	r3, [r4, #20]
 8011346:	3001      	adds	r0, #1
 8011348:	4283      	cmp	r3, r0
 801134a:	d004      	beq.n	8011356 <__swbuf_r+0x62>
 801134c:	89a3      	ldrh	r3, [r4, #12]
 801134e:	07db      	lsls	r3, r3, #31
 8011350:	d506      	bpl.n	8011360 <__swbuf_r+0x6c>
 8011352:	2e0a      	cmp	r6, #10
 8011354:	d104      	bne.n	8011360 <__swbuf_r+0x6c>
 8011356:	4621      	mov	r1, r4
 8011358:	4628      	mov	r0, r5
 801135a:	f000 f933 	bl	80115c4 <_fflush_r>
 801135e:	b988      	cbnz	r0, 8011384 <__swbuf_r+0x90>
 8011360:	4638      	mov	r0, r7
 8011362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011364:	4b0a      	ldr	r3, [pc, #40]	; (8011390 <__swbuf_r+0x9c>)
 8011366:	429c      	cmp	r4, r3
 8011368:	d101      	bne.n	801136e <__swbuf_r+0x7a>
 801136a:	68ac      	ldr	r4, [r5, #8]
 801136c:	e7cf      	b.n	801130e <__swbuf_r+0x1a>
 801136e:	4b09      	ldr	r3, [pc, #36]	; (8011394 <__swbuf_r+0xa0>)
 8011370:	429c      	cmp	r4, r3
 8011372:	bf08      	it	eq
 8011374:	68ec      	ldreq	r4, [r5, #12]
 8011376:	e7ca      	b.n	801130e <__swbuf_r+0x1a>
 8011378:	4621      	mov	r1, r4
 801137a:	4628      	mov	r0, r5
 801137c:	f000 f81e 	bl	80113bc <__swsetup_r>
 8011380:	2800      	cmp	r0, #0
 8011382:	d0cb      	beq.n	801131c <__swbuf_r+0x28>
 8011384:	f04f 37ff 	mov.w	r7, #4294967295
 8011388:	e7ea      	b.n	8011360 <__swbuf_r+0x6c>
 801138a:	bf00      	nop
 801138c:	08014fc8 	.word	0x08014fc8
 8011390:	08014fe8 	.word	0x08014fe8
 8011394:	08014fa8 	.word	0x08014fa8

08011398 <_write_r>:
 8011398:	b538      	push	{r3, r4, r5, lr}
 801139a:	4d07      	ldr	r5, [pc, #28]	; (80113b8 <_write_r+0x20>)
 801139c:	4604      	mov	r4, r0
 801139e:	4608      	mov	r0, r1
 80113a0:	4611      	mov	r1, r2
 80113a2:	2200      	movs	r2, #0
 80113a4:	602a      	str	r2, [r5, #0]
 80113a6:	461a      	mov	r2, r3
 80113a8:	f7f1 fc4f 	bl	8002c4a <_write>
 80113ac:	1c43      	adds	r3, r0, #1
 80113ae:	d102      	bne.n	80113b6 <_write_r+0x1e>
 80113b0:	682b      	ldr	r3, [r5, #0]
 80113b2:	b103      	cbz	r3, 80113b6 <_write_r+0x1e>
 80113b4:	6023      	str	r3, [r4, #0]
 80113b6:	bd38      	pop	{r3, r4, r5, pc}
 80113b8:	200034d4 	.word	0x200034d4

080113bc <__swsetup_r>:
 80113bc:	4b32      	ldr	r3, [pc, #200]	; (8011488 <__swsetup_r+0xcc>)
 80113be:	b570      	push	{r4, r5, r6, lr}
 80113c0:	681d      	ldr	r5, [r3, #0]
 80113c2:	4606      	mov	r6, r0
 80113c4:	460c      	mov	r4, r1
 80113c6:	b125      	cbz	r5, 80113d2 <__swsetup_r+0x16>
 80113c8:	69ab      	ldr	r3, [r5, #24]
 80113ca:	b913      	cbnz	r3, 80113d2 <__swsetup_r+0x16>
 80113cc:	4628      	mov	r0, r5
 80113ce:	f000 f98d 	bl	80116ec <__sinit>
 80113d2:	4b2e      	ldr	r3, [pc, #184]	; (801148c <__swsetup_r+0xd0>)
 80113d4:	429c      	cmp	r4, r3
 80113d6:	d10f      	bne.n	80113f8 <__swsetup_r+0x3c>
 80113d8:	686c      	ldr	r4, [r5, #4]
 80113da:	89a3      	ldrh	r3, [r4, #12]
 80113dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113e0:	0719      	lsls	r1, r3, #28
 80113e2:	d42c      	bmi.n	801143e <__swsetup_r+0x82>
 80113e4:	06dd      	lsls	r5, r3, #27
 80113e6:	d411      	bmi.n	801140c <__swsetup_r+0x50>
 80113e8:	2309      	movs	r3, #9
 80113ea:	6033      	str	r3, [r6, #0]
 80113ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80113f0:	81a3      	strh	r3, [r4, #12]
 80113f2:	f04f 30ff 	mov.w	r0, #4294967295
 80113f6:	e03e      	b.n	8011476 <__swsetup_r+0xba>
 80113f8:	4b25      	ldr	r3, [pc, #148]	; (8011490 <__swsetup_r+0xd4>)
 80113fa:	429c      	cmp	r4, r3
 80113fc:	d101      	bne.n	8011402 <__swsetup_r+0x46>
 80113fe:	68ac      	ldr	r4, [r5, #8]
 8011400:	e7eb      	b.n	80113da <__swsetup_r+0x1e>
 8011402:	4b24      	ldr	r3, [pc, #144]	; (8011494 <__swsetup_r+0xd8>)
 8011404:	429c      	cmp	r4, r3
 8011406:	bf08      	it	eq
 8011408:	68ec      	ldreq	r4, [r5, #12]
 801140a:	e7e6      	b.n	80113da <__swsetup_r+0x1e>
 801140c:	0758      	lsls	r0, r3, #29
 801140e:	d512      	bpl.n	8011436 <__swsetup_r+0x7a>
 8011410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011412:	b141      	cbz	r1, 8011426 <__swsetup_r+0x6a>
 8011414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011418:	4299      	cmp	r1, r3
 801141a:	d002      	beq.n	8011422 <__swsetup_r+0x66>
 801141c:	4630      	mov	r0, r6
 801141e:	f7fe ff73 	bl	8010308 <_free_r>
 8011422:	2300      	movs	r3, #0
 8011424:	6363      	str	r3, [r4, #52]	; 0x34
 8011426:	89a3      	ldrh	r3, [r4, #12]
 8011428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801142c:	81a3      	strh	r3, [r4, #12]
 801142e:	2300      	movs	r3, #0
 8011430:	6063      	str	r3, [r4, #4]
 8011432:	6923      	ldr	r3, [r4, #16]
 8011434:	6023      	str	r3, [r4, #0]
 8011436:	89a3      	ldrh	r3, [r4, #12]
 8011438:	f043 0308 	orr.w	r3, r3, #8
 801143c:	81a3      	strh	r3, [r4, #12]
 801143e:	6923      	ldr	r3, [r4, #16]
 8011440:	b94b      	cbnz	r3, 8011456 <__swsetup_r+0x9a>
 8011442:	89a3      	ldrh	r3, [r4, #12]
 8011444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801144c:	d003      	beq.n	8011456 <__swsetup_r+0x9a>
 801144e:	4621      	mov	r1, r4
 8011450:	4630      	mov	r0, r6
 8011452:	f000 fd91 	bl	8011f78 <__smakebuf_r>
 8011456:	89a0      	ldrh	r0, [r4, #12]
 8011458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801145c:	f010 0301 	ands.w	r3, r0, #1
 8011460:	d00a      	beq.n	8011478 <__swsetup_r+0xbc>
 8011462:	2300      	movs	r3, #0
 8011464:	60a3      	str	r3, [r4, #8]
 8011466:	6963      	ldr	r3, [r4, #20]
 8011468:	425b      	negs	r3, r3
 801146a:	61a3      	str	r3, [r4, #24]
 801146c:	6923      	ldr	r3, [r4, #16]
 801146e:	b943      	cbnz	r3, 8011482 <__swsetup_r+0xc6>
 8011470:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011474:	d1ba      	bne.n	80113ec <__swsetup_r+0x30>
 8011476:	bd70      	pop	{r4, r5, r6, pc}
 8011478:	0781      	lsls	r1, r0, #30
 801147a:	bf58      	it	pl
 801147c:	6963      	ldrpl	r3, [r4, #20]
 801147e:	60a3      	str	r3, [r4, #8]
 8011480:	e7f4      	b.n	801146c <__swsetup_r+0xb0>
 8011482:	2000      	movs	r0, #0
 8011484:	e7f7      	b.n	8011476 <__swsetup_r+0xba>
 8011486:	bf00      	nop
 8011488:	20000160 	.word	0x20000160
 801148c:	08014fc8 	.word	0x08014fc8
 8011490:	08014fe8 	.word	0x08014fe8
 8011494:	08014fa8 	.word	0x08014fa8

08011498 <_close_r>:
 8011498:	b538      	push	{r3, r4, r5, lr}
 801149a:	4d06      	ldr	r5, [pc, #24]	; (80114b4 <_close_r+0x1c>)
 801149c:	2300      	movs	r3, #0
 801149e:	4604      	mov	r4, r0
 80114a0:	4608      	mov	r0, r1
 80114a2:	602b      	str	r3, [r5, #0]
 80114a4:	f7f1 fbed 	bl	8002c82 <_close>
 80114a8:	1c43      	adds	r3, r0, #1
 80114aa:	d102      	bne.n	80114b2 <_close_r+0x1a>
 80114ac:	682b      	ldr	r3, [r5, #0]
 80114ae:	b103      	cbz	r3, 80114b2 <_close_r+0x1a>
 80114b0:	6023      	str	r3, [r4, #0]
 80114b2:	bd38      	pop	{r3, r4, r5, pc}
 80114b4:	200034d4 	.word	0x200034d4

080114b8 <__sflush_r>:
 80114b8:	898a      	ldrh	r2, [r1, #12]
 80114ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114be:	4605      	mov	r5, r0
 80114c0:	0710      	lsls	r0, r2, #28
 80114c2:	460c      	mov	r4, r1
 80114c4:	d458      	bmi.n	8011578 <__sflush_r+0xc0>
 80114c6:	684b      	ldr	r3, [r1, #4]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	dc05      	bgt.n	80114d8 <__sflush_r+0x20>
 80114cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	dc02      	bgt.n	80114d8 <__sflush_r+0x20>
 80114d2:	2000      	movs	r0, #0
 80114d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114da:	2e00      	cmp	r6, #0
 80114dc:	d0f9      	beq.n	80114d2 <__sflush_r+0x1a>
 80114de:	2300      	movs	r3, #0
 80114e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80114e4:	682f      	ldr	r7, [r5, #0]
 80114e6:	602b      	str	r3, [r5, #0]
 80114e8:	d032      	beq.n	8011550 <__sflush_r+0x98>
 80114ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80114ec:	89a3      	ldrh	r3, [r4, #12]
 80114ee:	075a      	lsls	r2, r3, #29
 80114f0:	d505      	bpl.n	80114fe <__sflush_r+0x46>
 80114f2:	6863      	ldr	r3, [r4, #4]
 80114f4:	1ac0      	subs	r0, r0, r3
 80114f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114f8:	b10b      	cbz	r3, 80114fe <__sflush_r+0x46>
 80114fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80114fc:	1ac0      	subs	r0, r0, r3
 80114fe:	2300      	movs	r3, #0
 8011500:	4602      	mov	r2, r0
 8011502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011504:	6a21      	ldr	r1, [r4, #32]
 8011506:	4628      	mov	r0, r5
 8011508:	47b0      	blx	r6
 801150a:	1c43      	adds	r3, r0, #1
 801150c:	89a3      	ldrh	r3, [r4, #12]
 801150e:	d106      	bne.n	801151e <__sflush_r+0x66>
 8011510:	6829      	ldr	r1, [r5, #0]
 8011512:	291d      	cmp	r1, #29
 8011514:	d82c      	bhi.n	8011570 <__sflush_r+0xb8>
 8011516:	4a2a      	ldr	r2, [pc, #168]	; (80115c0 <__sflush_r+0x108>)
 8011518:	40ca      	lsrs	r2, r1
 801151a:	07d6      	lsls	r6, r2, #31
 801151c:	d528      	bpl.n	8011570 <__sflush_r+0xb8>
 801151e:	2200      	movs	r2, #0
 8011520:	6062      	str	r2, [r4, #4]
 8011522:	04d9      	lsls	r1, r3, #19
 8011524:	6922      	ldr	r2, [r4, #16]
 8011526:	6022      	str	r2, [r4, #0]
 8011528:	d504      	bpl.n	8011534 <__sflush_r+0x7c>
 801152a:	1c42      	adds	r2, r0, #1
 801152c:	d101      	bne.n	8011532 <__sflush_r+0x7a>
 801152e:	682b      	ldr	r3, [r5, #0]
 8011530:	b903      	cbnz	r3, 8011534 <__sflush_r+0x7c>
 8011532:	6560      	str	r0, [r4, #84]	; 0x54
 8011534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011536:	602f      	str	r7, [r5, #0]
 8011538:	2900      	cmp	r1, #0
 801153a:	d0ca      	beq.n	80114d2 <__sflush_r+0x1a>
 801153c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011540:	4299      	cmp	r1, r3
 8011542:	d002      	beq.n	801154a <__sflush_r+0x92>
 8011544:	4628      	mov	r0, r5
 8011546:	f7fe fedf 	bl	8010308 <_free_r>
 801154a:	2000      	movs	r0, #0
 801154c:	6360      	str	r0, [r4, #52]	; 0x34
 801154e:	e7c1      	b.n	80114d4 <__sflush_r+0x1c>
 8011550:	6a21      	ldr	r1, [r4, #32]
 8011552:	2301      	movs	r3, #1
 8011554:	4628      	mov	r0, r5
 8011556:	47b0      	blx	r6
 8011558:	1c41      	adds	r1, r0, #1
 801155a:	d1c7      	bne.n	80114ec <__sflush_r+0x34>
 801155c:	682b      	ldr	r3, [r5, #0]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d0c4      	beq.n	80114ec <__sflush_r+0x34>
 8011562:	2b1d      	cmp	r3, #29
 8011564:	d001      	beq.n	801156a <__sflush_r+0xb2>
 8011566:	2b16      	cmp	r3, #22
 8011568:	d101      	bne.n	801156e <__sflush_r+0xb6>
 801156a:	602f      	str	r7, [r5, #0]
 801156c:	e7b1      	b.n	80114d2 <__sflush_r+0x1a>
 801156e:	89a3      	ldrh	r3, [r4, #12]
 8011570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011574:	81a3      	strh	r3, [r4, #12]
 8011576:	e7ad      	b.n	80114d4 <__sflush_r+0x1c>
 8011578:	690f      	ldr	r7, [r1, #16]
 801157a:	2f00      	cmp	r7, #0
 801157c:	d0a9      	beq.n	80114d2 <__sflush_r+0x1a>
 801157e:	0793      	lsls	r3, r2, #30
 8011580:	680e      	ldr	r6, [r1, #0]
 8011582:	bf08      	it	eq
 8011584:	694b      	ldreq	r3, [r1, #20]
 8011586:	600f      	str	r7, [r1, #0]
 8011588:	bf18      	it	ne
 801158a:	2300      	movne	r3, #0
 801158c:	eba6 0807 	sub.w	r8, r6, r7
 8011590:	608b      	str	r3, [r1, #8]
 8011592:	f1b8 0f00 	cmp.w	r8, #0
 8011596:	dd9c      	ble.n	80114d2 <__sflush_r+0x1a>
 8011598:	6a21      	ldr	r1, [r4, #32]
 801159a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801159c:	4643      	mov	r3, r8
 801159e:	463a      	mov	r2, r7
 80115a0:	4628      	mov	r0, r5
 80115a2:	47b0      	blx	r6
 80115a4:	2800      	cmp	r0, #0
 80115a6:	dc06      	bgt.n	80115b6 <__sflush_r+0xfe>
 80115a8:	89a3      	ldrh	r3, [r4, #12]
 80115aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115ae:	81a3      	strh	r3, [r4, #12]
 80115b0:	f04f 30ff 	mov.w	r0, #4294967295
 80115b4:	e78e      	b.n	80114d4 <__sflush_r+0x1c>
 80115b6:	4407      	add	r7, r0
 80115b8:	eba8 0800 	sub.w	r8, r8, r0
 80115bc:	e7e9      	b.n	8011592 <__sflush_r+0xda>
 80115be:	bf00      	nop
 80115c0:	20400001 	.word	0x20400001

080115c4 <_fflush_r>:
 80115c4:	b538      	push	{r3, r4, r5, lr}
 80115c6:	690b      	ldr	r3, [r1, #16]
 80115c8:	4605      	mov	r5, r0
 80115ca:	460c      	mov	r4, r1
 80115cc:	b913      	cbnz	r3, 80115d4 <_fflush_r+0x10>
 80115ce:	2500      	movs	r5, #0
 80115d0:	4628      	mov	r0, r5
 80115d2:	bd38      	pop	{r3, r4, r5, pc}
 80115d4:	b118      	cbz	r0, 80115de <_fflush_r+0x1a>
 80115d6:	6983      	ldr	r3, [r0, #24]
 80115d8:	b90b      	cbnz	r3, 80115de <_fflush_r+0x1a>
 80115da:	f000 f887 	bl	80116ec <__sinit>
 80115de:	4b14      	ldr	r3, [pc, #80]	; (8011630 <_fflush_r+0x6c>)
 80115e0:	429c      	cmp	r4, r3
 80115e2:	d11b      	bne.n	801161c <_fflush_r+0x58>
 80115e4:	686c      	ldr	r4, [r5, #4]
 80115e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d0ef      	beq.n	80115ce <_fflush_r+0xa>
 80115ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80115f0:	07d0      	lsls	r0, r2, #31
 80115f2:	d404      	bmi.n	80115fe <_fflush_r+0x3a>
 80115f4:	0599      	lsls	r1, r3, #22
 80115f6:	d402      	bmi.n	80115fe <_fflush_r+0x3a>
 80115f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115fa:	f000 fc84 	bl	8011f06 <__retarget_lock_acquire_recursive>
 80115fe:	4628      	mov	r0, r5
 8011600:	4621      	mov	r1, r4
 8011602:	f7ff ff59 	bl	80114b8 <__sflush_r>
 8011606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011608:	07da      	lsls	r2, r3, #31
 801160a:	4605      	mov	r5, r0
 801160c:	d4e0      	bmi.n	80115d0 <_fflush_r+0xc>
 801160e:	89a3      	ldrh	r3, [r4, #12]
 8011610:	059b      	lsls	r3, r3, #22
 8011612:	d4dd      	bmi.n	80115d0 <_fflush_r+0xc>
 8011614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011616:	f000 fc77 	bl	8011f08 <__retarget_lock_release_recursive>
 801161a:	e7d9      	b.n	80115d0 <_fflush_r+0xc>
 801161c:	4b05      	ldr	r3, [pc, #20]	; (8011634 <_fflush_r+0x70>)
 801161e:	429c      	cmp	r4, r3
 8011620:	d101      	bne.n	8011626 <_fflush_r+0x62>
 8011622:	68ac      	ldr	r4, [r5, #8]
 8011624:	e7df      	b.n	80115e6 <_fflush_r+0x22>
 8011626:	4b04      	ldr	r3, [pc, #16]	; (8011638 <_fflush_r+0x74>)
 8011628:	429c      	cmp	r4, r3
 801162a:	bf08      	it	eq
 801162c:	68ec      	ldreq	r4, [r5, #12]
 801162e:	e7da      	b.n	80115e6 <_fflush_r+0x22>
 8011630:	08014fc8 	.word	0x08014fc8
 8011634:	08014fe8 	.word	0x08014fe8
 8011638:	08014fa8 	.word	0x08014fa8

0801163c <std>:
 801163c:	2300      	movs	r3, #0
 801163e:	b510      	push	{r4, lr}
 8011640:	4604      	mov	r4, r0
 8011642:	e9c0 3300 	strd	r3, r3, [r0]
 8011646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801164a:	6083      	str	r3, [r0, #8]
 801164c:	8181      	strh	r1, [r0, #12]
 801164e:	6643      	str	r3, [r0, #100]	; 0x64
 8011650:	81c2      	strh	r2, [r0, #14]
 8011652:	6183      	str	r3, [r0, #24]
 8011654:	4619      	mov	r1, r3
 8011656:	2208      	movs	r2, #8
 8011658:	305c      	adds	r0, #92	; 0x5c
 801165a:	f7fe fe4d 	bl	80102f8 <memset>
 801165e:	4b05      	ldr	r3, [pc, #20]	; (8011674 <std+0x38>)
 8011660:	6263      	str	r3, [r4, #36]	; 0x24
 8011662:	4b05      	ldr	r3, [pc, #20]	; (8011678 <std+0x3c>)
 8011664:	62a3      	str	r3, [r4, #40]	; 0x28
 8011666:	4b05      	ldr	r3, [pc, #20]	; (801167c <std+0x40>)
 8011668:	62e3      	str	r3, [r4, #44]	; 0x2c
 801166a:	4b05      	ldr	r3, [pc, #20]	; (8011680 <std+0x44>)
 801166c:	6224      	str	r4, [r4, #32]
 801166e:	6323      	str	r3, [r4, #48]	; 0x30
 8011670:	bd10      	pop	{r4, pc}
 8011672:	bf00      	nop
 8011674:	080105e1 	.word	0x080105e1
 8011678:	08010603 	.word	0x08010603
 801167c:	0801063b 	.word	0x0801063b
 8011680:	0801065f 	.word	0x0801065f

08011684 <_cleanup_r>:
 8011684:	4901      	ldr	r1, [pc, #4]	; (801168c <_cleanup_r+0x8>)
 8011686:	f000 b8af 	b.w	80117e8 <_fwalk_reent>
 801168a:	bf00      	nop
 801168c:	080115c5 	.word	0x080115c5

08011690 <__sfmoreglue>:
 8011690:	b570      	push	{r4, r5, r6, lr}
 8011692:	1e4a      	subs	r2, r1, #1
 8011694:	2568      	movs	r5, #104	; 0x68
 8011696:	4355      	muls	r5, r2
 8011698:	460e      	mov	r6, r1
 801169a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801169e:	f7fe fe83 	bl	80103a8 <_malloc_r>
 80116a2:	4604      	mov	r4, r0
 80116a4:	b140      	cbz	r0, 80116b8 <__sfmoreglue+0x28>
 80116a6:	2100      	movs	r1, #0
 80116a8:	e9c0 1600 	strd	r1, r6, [r0]
 80116ac:	300c      	adds	r0, #12
 80116ae:	60a0      	str	r0, [r4, #8]
 80116b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80116b4:	f7fe fe20 	bl	80102f8 <memset>
 80116b8:	4620      	mov	r0, r4
 80116ba:	bd70      	pop	{r4, r5, r6, pc}

080116bc <__sfp_lock_acquire>:
 80116bc:	4801      	ldr	r0, [pc, #4]	; (80116c4 <__sfp_lock_acquire+0x8>)
 80116be:	f000 bc22 	b.w	8011f06 <__retarget_lock_acquire_recursive>
 80116c2:	bf00      	nop
 80116c4:	200034d0 	.word	0x200034d0

080116c8 <__sfp_lock_release>:
 80116c8:	4801      	ldr	r0, [pc, #4]	; (80116d0 <__sfp_lock_release+0x8>)
 80116ca:	f000 bc1d 	b.w	8011f08 <__retarget_lock_release_recursive>
 80116ce:	bf00      	nop
 80116d0:	200034d0 	.word	0x200034d0

080116d4 <__sinit_lock_acquire>:
 80116d4:	4801      	ldr	r0, [pc, #4]	; (80116dc <__sinit_lock_acquire+0x8>)
 80116d6:	f000 bc16 	b.w	8011f06 <__retarget_lock_acquire_recursive>
 80116da:	bf00      	nop
 80116dc:	200034cb 	.word	0x200034cb

080116e0 <__sinit_lock_release>:
 80116e0:	4801      	ldr	r0, [pc, #4]	; (80116e8 <__sinit_lock_release+0x8>)
 80116e2:	f000 bc11 	b.w	8011f08 <__retarget_lock_release_recursive>
 80116e6:	bf00      	nop
 80116e8:	200034cb 	.word	0x200034cb

080116ec <__sinit>:
 80116ec:	b510      	push	{r4, lr}
 80116ee:	4604      	mov	r4, r0
 80116f0:	f7ff fff0 	bl	80116d4 <__sinit_lock_acquire>
 80116f4:	69a3      	ldr	r3, [r4, #24]
 80116f6:	b11b      	cbz	r3, 8011700 <__sinit+0x14>
 80116f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116fc:	f7ff bff0 	b.w	80116e0 <__sinit_lock_release>
 8011700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011704:	6523      	str	r3, [r4, #80]	; 0x50
 8011706:	4b13      	ldr	r3, [pc, #76]	; (8011754 <__sinit+0x68>)
 8011708:	4a13      	ldr	r2, [pc, #76]	; (8011758 <__sinit+0x6c>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	62a2      	str	r2, [r4, #40]	; 0x28
 801170e:	42a3      	cmp	r3, r4
 8011710:	bf04      	itt	eq
 8011712:	2301      	moveq	r3, #1
 8011714:	61a3      	streq	r3, [r4, #24]
 8011716:	4620      	mov	r0, r4
 8011718:	f000 f820 	bl	801175c <__sfp>
 801171c:	6060      	str	r0, [r4, #4]
 801171e:	4620      	mov	r0, r4
 8011720:	f000 f81c 	bl	801175c <__sfp>
 8011724:	60a0      	str	r0, [r4, #8]
 8011726:	4620      	mov	r0, r4
 8011728:	f000 f818 	bl	801175c <__sfp>
 801172c:	2200      	movs	r2, #0
 801172e:	60e0      	str	r0, [r4, #12]
 8011730:	2104      	movs	r1, #4
 8011732:	6860      	ldr	r0, [r4, #4]
 8011734:	f7ff ff82 	bl	801163c <std>
 8011738:	68a0      	ldr	r0, [r4, #8]
 801173a:	2201      	movs	r2, #1
 801173c:	2109      	movs	r1, #9
 801173e:	f7ff ff7d 	bl	801163c <std>
 8011742:	68e0      	ldr	r0, [r4, #12]
 8011744:	2202      	movs	r2, #2
 8011746:	2112      	movs	r1, #18
 8011748:	f7ff ff78 	bl	801163c <std>
 801174c:	2301      	movs	r3, #1
 801174e:	61a3      	str	r3, [r4, #24]
 8011750:	e7d2      	b.n	80116f8 <__sinit+0xc>
 8011752:	bf00      	nop
 8011754:	08014f48 	.word	0x08014f48
 8011758:	08011685 	.word	0x08011685

0801175c <__sfp>:
 801175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801175e:	4607      	mov	r7, r0
 8011760:	f7ff ffac 	bl	80116bc <__sfp_lock_acquire>
 8011764:	4b1e      	ldr	r3, [pc, #120]	; (80117e0 <__sfp+0x84>)
 8011766:	681e      	ldr	r6, [r3, #0]
 8011768:	69b3      	ldr	r3, [r6, #24]
 801176a:	b913      	cbnz	r3, 8011772 <__sfp+0x16>
 801176c:	4630      	mov	r0, r6
 801176e:	f7ff ffbd 	bl	80116ec <__sinit>
 8011772:	3648      	adds	r6, #72	; 0x48
 8011774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011778:	3b01      	subs	r3, #1
 801177a:	d503      	bpl.n	8011784 <__sfp+0x28>
 801177c:	6833      	ldr	r3, [r6, #0]
 801177e:	b30b      	cbz	r3, 80117c4 <__sfp+0x68>
 8011780:	6836      	ldr	r6, [r6, #0]
 8011782:	e7f7      	b.n	8011774 <__sfp+0x18>
 8011784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011788:	b9d5      	cbnz	r5, 80117c0 <__sfp+0x64>
 801178a:	4b16      	ldr	r3, [pc, #88]	; (80117e4 <__sfp+0x88>)
 801178c:	60e3      	str	r3, [r4, #12]
 801178e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011792:	6665      	str	r5, [r4, #100]	; 0x64
 8011794:	f000 fbb6 	bl	8011f04 <__retarget_lock_init_recursive>
 8011798:	f7ff ff96 	bl	80116c8 <__sfp_lock_release>
 801179c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80117a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80117a4:	6025      	str	r5, [r4, #0]
 80117a6:	61a5      	str	r5, [r4, #24]
 80117a8:	2208      	movs	r2, #8
 80117aa:	4629      	mov	r1, r5
 80117ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80117b0:	f7fe fda2 	bl	80102f8 <memset>
 80117b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80117b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80117bc:	4620      	mov	r0, r4
 80117be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117c0:	3468      	adds	r4, #104	; 0x68
 80117c2:	e7d9      	b.n	8011778 <__sfp+0x1c>
 80117c4:	2104      	movs	r1, #4
 80117c6:	4638      	mov	r0, r7
 80117c8:	f7ff ff62 	bl	8011690 <__sfmoreglue>
 80117cc:	4604      	mov	r4, r0
 80117ce:	6030      	str	r0, [r6, #0]
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d1d5      	bne.n	8011780 <__sfp+0x24>
 80117d4:	f7ff ff78 	bl	80116c8 <__sfp_lock_release>
 80117d8:	230c      	movs	r3, #12
 80117da:	603b      	str	r3, [r7, #0]
 80117dc:	e7ee      	b.n	80117bc <__sfp+0x60>
 80117de:	bf00      	nop
 80117e0:	08014f48 	.word	0x08014f48
 80117e4:	ffff0001 	.word	0xffff0001

080117e8 <_fwalk_reent>:
 80117e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117ec:	4606      	mov	r6, r0
 80117ee:	4688      	mov	r8, r1
 80117f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80117f4:	2700      	movs	r7, #0
 80117f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80117fa:	f1b9 0901 	subs.w	r9, r9, #1
 80117fe:	d505      	bpl.n	801180c <_fwalk_reent+0x24>
 8011800:	6824      	ldr	r4, [r4, #0]
 8011802:	2c00      	cmp	r4, #0
 8011804:	d1f7      	bne.n	80117f6 <_fwalk_reent+0xe>
 8011806:	4638      	mov	r0, r7
 8011808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801180c:	89ab      	ldrh	r3, [r5, #12]
 801180e:	2b01      	cmp	r3, #1
 8011810:	d907      	bls.n	8011822 <_fwalk_reent+0x3a>
 8011812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011816:	3301      	adds	r3, #1
 8011818:	d003      	beq.n	8011822 <_fwalk_reent+0x3a>
 801181a:	4629      	mov	r1, r5
 801181c:	4630      	mov	r0, r6
 801181e:	47c0      	blx	r8
 8011820:	4307      	orrs	r7, r0
 8011822:	3568      	adds	r5, #104	; 0x68
 8011824:	e7e9      	b.n	80117fa <_fwalk_reent+0x12>

08011826 <rshift>:
 8011826:	6903      	ldr	r3, [r0, #16]
 8011828:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801182c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011830:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011834:	f100 0414 	add.w	r4, r0, #20
 8011838:	dd45      	ble.n	80118c6 <rshift+0xa0>
 801183a:	f011 011f 	ands.w	r1, r1, #31
 801183e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011842:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011846:	d10c      	bne.n	8011862 <rshift+0x3c>
 8011848:	f100 0710 	add.w	r7, r0, #16
 801184c:	4629      	mov	r1, r5
 801184e:	42b1      	cmp	r1, r6
 8011850:	d334      	bcc.n	80118bc <rshift+0x96>
 8011852:	1a9b      	subs	r3, r3, r2
 8011854:	009b      	lsls	r3, r3, #2
 8011856:	1eea      	subs	r2, r5, #3
 8011858:	4296      	cmp	r6, r2
 801185a:	bf38      	it	cc
 801185c:	2300      	movcc	r3, #0
 801185e:	4423      	add	r3, r4
 8011860:	e015      	b.n	801188e <rshift+0x68>
 8011862:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011866:	f1c1 0820 	rsb	r8, r1, #32
 801186a:	40cf      	lsrs	r7, r1
 801186c:	f105 0e04 	add.w	lr, r5, #4
 8011870:	46a1      	mov	r9, r4
 8011872:	4576      	cmp	r6, lr
 8011874:	46f4      	mov	ip, lr
 8011876:	d815      	bhi.n	80118a4 <rshift+0x7e>
 8011878:	1a9b      	subs	r3, r3, r2
 801187a:	009a      	lsls	r2, r3, #2
 801187c:	3a04      	subs	r2, #4
 801187e:	3501      	adds	r5, #1
 8011880:	42ae      	cmp	r6, r5
 8011882:	bf38      	it	cc
 8011884:	2200      	movcc	r2, #0
 8011886:	18a3      	adds	r3, r4, r2
 8011888:	50a7      	str	r7, [r4, r2]
 801188a:	b107      	cbz	r7, 801188e <rshift+0x68>
 801188c:	3304      	adds	r3, #4
 801188e:	1b1a      	subs	r2, r3, r4
 8011890:	42a3      	cmp	r3, r4
 8011892:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011896:	bf08      	it	eq
 8011898:	2300      	moveq	r3, #0
 801189a:	6102      	str	r2, [r0, #16]
 801189c:	bf08      	it	eq
 801189e:	6143      	streq	r3, [r0, #20]
 80118a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118a4:	f8dc c000 	ldr.w	ip, [ip]
 80118a8:	fa0c fc08 	lsl.w	ip, ip, r8
 80118ac:	ea4c 0707 	orr.w	r7, ip, r7
 80118b0:	f849 7b04 	str.w	r7, [r9], #4
 80118b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80118b8:	40cf      	lsrs	r7, r1
 80118ba:	e7da      	b.n	8011872 <rshift+0x4c>
 80118bc:	f851 cb04 	ldr.w	ip, [r1], #4
 80118c0:	f847 cf04 	str.w	ip, [r7, #4]!
 80118c4:	e7c3      	b.n	801184e <rshift+0x28>
 80118c6:	4623      	mov	r3, r4
 80118c8:	e7e1      	b.n	801188e <rshift+0x68>

080118ca <__hexdig_fun>:
 80118ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80118ce:	2b09      	cmp	r3, #9
 80118d0:	d802      	bhi.n	80118d8 <__hexdig_fun+0xe>
 80118d2:	3820      	subs	r0, #32
 80118d4:	b2c0      	uxtb	r0, r0
 80118d6:	4770      	bx	lr
 80118d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80118dc:	2b05      	cmp	r3, #5
 80118de:	d801      	bhi.n	80118e4 <__hexdig_fun+0x1a>
 80118e0:	3847      	subs	r0, #71	; 0x47
 80118e2:	e7f7      	b.n	80118d4 <__hexdig_fun+0xa>
 80118e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80118e8:	2b05      	cmp	r3, #5
 80118ea:	d801      	bhi.n	80118f0 <__hexdig_fun+0x26>
 80118ec:	3827      	subs	r0, #39	; 0x27
 80118ee:	e7f1      	b.n	80118d4 <__hexdig_fun+0xa>
 80118f0:	2000      	movs	r0, #0
 80118f2:	4770      	bx	lr

080118f4 <__gethex>:
 80118f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118f8:	ed2d 8b02 	vpush	{d8}
 80118fc:	b089      	sub	sp, #36	; 0x24
 80118fe:	ee08 0a10 	vmov	s16, r0
 8011902:	9304      	str	r3, [sp, #16]
 8011904:	4bbc      	ldr	r3, [pc, #752]	; (8011bf8 <__gethex+0x304>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	9301      	str	r3, [sp, #4]
 801190a:	4618      	mov	r0, r3
 801190c:	468b      	mov	fp, r1
 801190e:	4690      	mov	r8, r2
 8011910:	f7ee fc70 	bl	80001f4 <strlen>
 8011914:	9b01      	ldr	r3, [sp, #4]
 8011916:	f8db 2000 	ldr.w	r2, [fp]
 801191a:	4403      	add	r3, r0
 801191c:	4682      	mov	sl, r0
 801191e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011922:	9305      	str	r3, [sp, #20]
 8011924:	1c93      	adds	r3, r2, #2
 8011926:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801192a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801192e:	32fe      	adds	r2, #254	; 0xfe
 8011930:	18d1      	adds	r1, r2, r3
 8011932:	461f      	mov	r7, r3
 8011934:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011938:	9100      	str	r1, [sp, #0]
 801193a:	2830      	cmp	r0, #48	; 0x30
 801193c:	d0f8      	beq.n	8011930 <__gethex+0x3c>
 801193e:	f7ff ffc4 	bl	80118ca <__hexdig_fun>
 8011942:	4604      	mov	r4, r0
 8011944:	2800      	cmp	r0, #0
 8011946:	d13a      	bne.n	80119be <__gethex+0xca>
 8011948:	9901      	ldr	r1, [sp, #4]
 801194a:	4652      	mov	r2, sl
 801194c:	4638      	mov	r0, r7
 801194e:	f7fe fe8a 	bl	8010666 <strncmp>
 8011952:	4605      	mov	r5, r0
 8011954:	2800      	cmp	r0, #0
 8011956:	d168      	bne.n	8011a2a <__gethex+0x136>
 8011958:	f817 000a 	ldrb.w	r0, [r7, sl]
 801195c:	eb07 060a 	add.w	r6, r7, sl
 8011960:	f7ff ffb3 	bl	80118ca <__hexdig_fun>
 8011964:	2800      	cmp	r0, #0
 8011966:	d062      	beq.n	8011a2e <__gethex+0x13a>
 8011968:	4633      	mov	r3, r6
 801196a:	7818      	ldrb	r0, [r3, #0]
 801196c:	2830      	cmp	r0, #48	; 0x30
 801196e:	461f      	mov	r7, r3
 8011970:	f103 0301 	add.w	r3, r3, #1
 8011974:	d0f9      	beq.n	801196a <__gethex+0x76>
 8011976:	f7ff ffa8 	bl	80118ca <__hexdig_fun>
 801197a:	2301      	movs	r3, #1
 801197c:	fab0 f480 	clz	r4, r0
 8011980:	0964      	lsrs	r4, r4, #5
 8011982:	4635      	mov	r5, r6
 8011984:	9300      	str	r3, [sp, #0]
 8011986:	463a      	mov	r2, r7
 8011988:	4616      	mov	r6, r2
 801198a:	3201      	adds	r2, #1
 801198c:	7830      	ldrb	r0, [r6, #0]
 801198e:	f7ff ff9c 	bl	80118ca <__hexdig_fun>
 8011992:	2800      	cmp	r0, #0
 8011994:	d1f8      	bne.n	8011988 <__gethex+0x94>
 8011996:	9901      	ldr	r1, [sp, #4]
 8011998:	4652      	mov	r2, sl
 801199a:	4630      	mov	r0, r6
 801199c:	f7fe fe63 	bl	8010666 <strncmp>
 80119a0:	b980      	cbnz	r0, 80119c4 <__gethex+0xd0>
 80119a2:	b94d      	cbnz	r5, 80119b8 <__gethex+0xc4>
 80119a4:	eb06 050a 	add.w	r5, r6, sl
 80119a8:	462a      	mov	r2, r5
 80119aa:	4616      	mov	r6, r2
 80119ac:	3201      	adds	r2, #1
 80119ae:	7830      	ldrb	r0, [r6, #0]
 80119b0:	f7ff ff8b 	bl	80118ca <__hexdig_fun>
 80119b4:	2800      	cmp	r0, #0
 80119b6:	d1f8      	bne.n	80119aa <__gethex+0xb6>
 80119b8:	1bad      	subs	r5, r5, r6
 80119ba:	00ad      	lsls	r5, r5, #2
 80119bc:	e004      	b.n	80119c8 <__gethex+0xd4>
 80119be:	2400      	movs	r4, #0
 80119c0:	4625      	mov	r5, r4
 80119c2:	e7e0      	b.n	8011986 <__gethex+0x92>
 80119c4:	2d00      	cmp	r5, #0
 80119c6:	d1f7      	bne.n	80119b8 <__gethex+0xc4>
 80119c8:	7833      	ldrb	r3, [r6, #0]
 80119ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80119ce:	2b50      	cmp	r3, #80	; 0x50
 80119d0:	d13b      	bne.n	8011a4a <__gethex+0x156>
 80119d2:	7873      	ldrb	r3, [r6, #1]
 80119d4:	2b2b      	cmp	r3, #43	; 0x2b
 80119d6:	d02c      	beq.n	8011a32 <__gethex+0x13e>
 80119d8:	2b2d      	cmp	r3, #45	; 0x2d
 80119da:	d02e      	beq.n	8011a3a <__gethex+0x146>
 80119dc:	1c71      	adds	r1, r6, #1
 80119de:	f04f 0900 	mov.w	r9, #0
 80119e2:	7808      	ldrb	r0, [r1, #0]
 80119e4:	f7ff ff71 	bl	80118ca <__hexdig_fun>
 80119e8:	1e43      	subs	r3, r0, #1
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	2b18      	cmp	r3, #24
 80119ee:	d82c      	bhi.n	8011a4a <__gethex+0x156>
 80119f0:	f1a0 0210 	sub.w	r2, r0, #16
 80119f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80119f8:	f7ff ff67 	bl	80118ca <__hexdig_fun>
 80119fc:	1e43      	subs	r3, r0, #1
 80119fe:	b2db      	uxtb	r3, r3
 8011a00:	2b18      	cmp	r3, #24
 8011a02:	d91d      	bls.n	8011a40 <__gethex+0x14c>
 8011a04:	f1b9 0f00 	cmp.w	r9, #0
 8011a08:	d000      	beq.n	8011a0c <__gethex+0x118>
 8011a0a:	4252      	negs	r2, r2
 8011a0c:	4415      	add	r5, r2
 8011a0e:	f8cb 1000 	str.w	r1, [fp]
 8011a12:	b1e4      	cbz	r4, 8011a4e <__gethex+0x15a>
 8011a14:	9b00      	ldr	r3, [sp, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	bf14      	ite	ne
 8011a1a:	2700      	movne	r7, #0
 8011a1c:	2706      	moveq	r7, #6
 8011a1e:	4638      	mov	r0, r7
 8011a20:	b009      	add	sp, #36	; 0x24
 8011a22:	ecbd 8b02 	vpop	{d8}
 8011a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a2a:	463e      	mov	r6, r7
 8011a2c:	4625      	mov	r5, r4
 8011a2e:	2401      	movs	r4, #1
 8011a30:	e7ca      	b.n	80119c8 <__gethex+0xd4>
 8011a32:	f04f 0900 	mov.w	r9, #0
 8011a36:	1cb1      	adds	r1, r6, #2
 8011a38:	e7d3      	b.n	80119e2 <__gethex+0xee>
 8011a3a:	f04f 0901 	mov.w	r9, #1
 8011a3e:	e7fa      	b.n	8011a36 <__gethex+0x142>
 8011a40:	230a      	movs	r3, #10
 8011a42:	fb03 0202 	mla	r2, r3, r2, r0
 8011a46:	3a10      	subs	r2, #16
 8011a48:	e7d4      	b.n	80119f4 <__gethex+0x100>
 8011a4a:	4631      	mov	r1, r6
 8011a4c:	e7df      	b.n	8011a0e <__gethex+0x11a>
 8011a4e:	1bf3      	subs	r3, r6, r7
 8011a50:	3b01      	subs	r3, #1
 8011a52:	4621      	mov	r1, r4
 8011a54:	2b07      	cmp	r3, #7
 8011a56:	dc0b      	bgt.n	8011a70 <__gethex+0x17c>
 8011a58:	ee18 0a10 	vmov	r0, s16
 8011a5c:	f000 faea 	bl	8012034 <_Balloc>
 8011a60:	4604      	mov	r4, r0
 8011a62:	b940      	cbnz	r0, 8011a76 <__gethex+0x182>
 8011a64:	4b65      	ldr	r3, [pc, #404]	; (8011bfc <__gethex+0x308>)
 8011a66:	4602      	mov	r2, r0
 8011a68:	21de      	movs	r1, #222	; 0xde
 8011a6a:	4865      	ldr	r0, [pc, #404]	; (8011c00 <__gethex+0x30c>)
 8011a6c:	f001 fc46 	bl	80132fc <__assert_func>
 8011a70:	3101      	adds	r1, #1
 8011a72:	105b      	asrs	r3, r3, #1
 8011a74:	e7ee      	b.n	8011a54 <__gethex+0x160>
 8011a76:	f100 0914 	add.w	r9, r0, #20
 8011a7a:	f04f 0b00 	mov.w	fp, #0
 8011a7e:	f1ca 0301 	rsb	r3, sl, #1
 8011a82:	f8cd 9008 	str.w	r9, [sp, #8]
 8011a86:	f8cd b000 	str.w	fp, [sp]
 8011a8a:	9306      	str	r3, [sp, #24]
 8011a8c:	42b7      	cmp	r7, r6
 8011a8e:	d340      	bcc.n	8011b12 <__gethex+0x21e>
 8011a90:	9802      	ldr	r0, [sp, #8]
 8011a92:	9b00      	ldr	r3, [sp, #0]
 8011a94:	f840 3b04 	str.w	r3, [r0], #4
 8011a98:	eba0 0009 	sub.w	r0, r0, r9
 8011a9c:	1080      	asrs	r0, r0, #2
 8011a9e:	0146      	lsls	r6, r0, #5
 8011aa0:	6120      	str	r0, [r4, #16]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f000 fbbc 	bl	8012220 <__hi0bits>
 8011aa8:	1a30      	subs	r0, r6, r0
 8011aaa:	f8d8 6000 	ldr.w	r6, [r8]
 8011aae:	42b0      	cmp	r0, r6
 8011ab0:	dd63      	ble.n	8011b7a <__gethex+0x286>
 8011ab2:	1b87      	subs	r7, r0, r6
 8011ab4:	4639      	mov	r1, r7
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	f000 ff56 	bl	8012968 <__any_on>
 8011abc:	4682      	mov	sl, r0
 8011abe:	b1a8      	cbz	r0, 8011aec <__gethex+0x1f8>
 8011ac0:	1e7b      	subs	r3, r7, #1
 8011ac2:	1159      	asrs	r1, r3, #5
 8011ac4:	f003 021f 	and.w	r2, r3, #31
 8011ac8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011acc:	f04f 0a01 	mov.w	sl, #1
 8011ad0:	fa0a f202 	lsl.w	r2, sl, r2
 8011ad4:	420a      	tst	r2, r1
 8011ad6:	d009      	beq.n	8011aec <__gethex+0x1f8>
 8011ad8:	4553      	cmp	r3, sl
 8011ada:	dd05      	ble.n	8011ae8 <__gethex+0x1f4>
 8011adc:	1eb9      	subs	r1, r7, #2
 8011ade:	4620      	mov	r0, r4
 8011ae0:	f000 ff42 	bl	8012968 <__any_on>
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d145      	bne.n	8011b74 <__gethex+0x280>
 8011ae8:	f04f 0a02 	mov.w	sl, #2
 8011aec:	4639      	mov	r1, r7
 8011aee:	4620      	mov	r0, r4
 8011af0:	f7ff fe99 	bl	8011826 <rshift>
 8011af4:	443d      	add	r5, r7
 8011af6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011afa:	42ab      	cmp	r3, r5
 8011afc:	da4c      	bge.n	8011b98 <__gethex+0x2a4>
 8011afe:	ee18 0a10 	vmov	r0, s16
 8011b02:	4621      	mov	r1, r4
 8011b04:	f000 fad6 	bl	80120b4 <_Bfree>
 8011b08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	6013      	str	r3, [r2, #0]
 8011b0e:	27a3      	movs	r7, #163	; 0xa3
 8011b10:	e785      	b.n	8011a1e <__gethex+0x12a>
 8011b12:	1e73      	subs	r3, r6, #1
 8011b14:	9a05      	ldr	r2, [sp, #20]
 8011b16:	9303      	str	r3, [sp, #12]
 8011b18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	d019      	beq.n	8011b54 <__gethex+0x260>
 8011b20:	f1bb 0f20 	cmp.w	fp, #32
 8011b24:	d107      	bne.n	8011b36 <__gethex+0x242>
 8011b26:	9b02      	ldr	r3, [sp, #8]
 8011b28:	9a00      	ldr	r2, [sp, #0]
 8011b2a:	f843 2b04 	str.w	r2, [r3], #4
 8011b2e:	9302      	str	r3, [sp, #8]
 8011b30:	2300      	movs	r3, #0
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	469b      	mov	fp, r3
 8011b36:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011b3a:	f7ff fec6 	bl	80118ca <__hexdig_fun>
 8011b3e:	9b00      	ldr	r3, [sp, #0]
 8011b40:	f000 000f 	and.w	r0, r0, #15
 8011b44:	fa00 f00b 	lsl.w	r0, r0, fp
 8011b48:	4303      	orrs	r3, r0
 8011b4a:	9300      	str	r3, [sp, #0]
 8011b4c:	f10b 0b04 	add.w	fp, fp, #4
 8011b50:	9b03      	ldr	r3, [sp, #12]
 8011b52:	e00d      	b.n	8011b70 <__gethex+0x27c>
 8011b54:	9b03      	ldr	r3, [sp, #12]
 8011b56:	9a06      	ldr	r2, [sp, #24]
 8011b58:	4413      	add	r3, r2
 8011b5a:	42bb      	cmp	r3, r7
 8011b5c:	d3e0      	bcc.n	8011b20 <__gethex+0x22c>
 8011b5e:	4618      	mov	r0, r3
 8011b60:	9901      	ldr	r1, [sp, #4]
 8011b62:	9307      	str	r3, [sp, #28]
 8011b64:	4652      	mov	r2, sl
 8011b66:	f7fe fd7e 	bl	8010666 <strncmp>
 8011b6a:	9b07      	ldr	r3, [sp, #28]
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	d1d7      	bne.n	8011b20 <__gethex+0x22c>
 8011b70:	461e      	mov	r6, r3
 8011b72:	e78b      	b.n	8011a8c <__gethex+0x198>
 8011b74:	f04f 0a03 	mov.w	sl, #3
 8011b78:	e7b8      	b.n	8011aec <__gethex+0x1f8>
 8011b7a:	da0a      	bge.n	8011b92 <__gethex+0x29e>
 8011b7c:	1a37      	subs	r7, r6, r0
 8011b7e:	4621      	mov	r1, r4
 8011b80:	ee18 0a10 	vmov	r0, s16
 8011b84:	463a      	mov	r2, r7
 8011b86:	f000 fcb1 	bl	80124ec <__lshift>
 8011b8a:	1bed      	subs	r5, r5, r7
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	f100 0914 	add.w	r9, r0, #20
 8011b92:	f04f 0a00 	mov.w	sl, #0
 8011b96:	e7ae      	b.n	8011af6 <__gethex+0x202>
 8011b98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011b9c:	42a8      	cmp	r0, r5
 8011b9e:	dd72      	ble.n	8011c86 <__gethex+0x392>
 8011ba0:	1b45      	subs	r5, r0, r5
 8011ba2:	42ae      	cmp	r6, r5
 8011ba4:	dc36      	bgt.n	8011c14 <__gethex+0x320>
 8011ba6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011baa:	2b02      	cmp	r3, #2
 8011bac:	d02a      	beq.n	8011c04 <__gethex+0x310>
 8011bae:	2b03      	cmp	r3, #3
 8011bb0:	d02c      	beq.n	8011c0c <__gethex+0x318>
 8011bb2:	2b01      	cmp	r3, #1
 8011bb4:	d115      	bne.n	8011be2 <__gethex+0x2ee>
 8011bb6:	42ae      	cmp	r6, r5
 8011bb8:	d113      	bne.n	8011be2 <__gethex+0x2ee>
 8011bba:	2e01      	cmp	r6, #1
 8011bbc:	d10b      	bne.n	8011bd6 <__gethex+0x2e2>
 8011bbe:	9a04      	ldr	r2, [sp, #16]
 8011bc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011bc4:	6013      	str	r3, [r2, #0]
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	6123      	str	r3, [r4, #16]
 8011bca:	f8c9 3000 	str.w	r3, [r9]
 8011bce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011bd0:	2762      	movs	r7, #98	; 0x62
 8011bd2:	601c      	str	r4, [r3, #0]
 8011bd4:	e723      	b.n	8011a1e <__gethex+0x12a>
 8011bd6:	1e71      	subs	r1, r6, #1
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f000 fec5 	bl	8012968 <__any_on>
 8011bde:	2800      	cmp	r0, #0
 8011be0:	d1ed      	bne.n	8011bbe <__gethex+0x2ca>
 8011be2:	ee18 0a10 	vmov	r0, s16
 8011be6:	4621      	mov	r1, r4
 8011be8:	f000 fa64 	bl	80120b4 <_Bfree>
 8011bec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011bee:	2300      	movs	r3, #0
 8011bf0:	6013      	str	r3, [r2, #0]
 8011bf2:	2750      	movs	r7, #80	; 0x50
 8011bf4:	e713      	b.n	8011a1e <__gethex+0x12a>
 8011bf6:	bf00      	nop
 8011bf8:	08015084 	.word	0x08015084
 8011bfc:	08015008 	.word	0x08015008
 8011c00:	08015019 	.word	0x08015019
 8011c04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d1eb      	bne.n	8011be2 <__gethex+0x2ee>
 8011c0a:	e7d8      	b.n	8011bbe <__gethex+0x2ca>
 8011c0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d1d5      	bne.n	8011bbe <__gethex+0x2ca>
 8011c12:	e7e6      	b.n	8011be2 <__gethex+0x2ee>
 8011c14:	1e6f      	subs	r7, r5, #1
 8011c16:	f1ba 0f00 	cmp.w	sl, #0
 8011c1a:	d131      	bne.n	8011c80 <__gethex+0x38c>
 8011c1c:	b127      	cbz	r7, 8011c28 <__gethex+0x334>
 8011c1e:	4639      	mov	r1, r7
 8011c20:	4620      	mov	r0, r4
 8011c22:	f000 fea1 	bl	8012968 <__any_on>
 8011c26:	4682      	mov	sl, r0
 8011c28:	117b      	asrs	r3, r7, #5
 8011c2a:	2101      	movs	r1, #1
 8011c2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011c30:	f007 071f 	and.w	r7, r7, #31
 8011c34:	fa01 f707 	lsl.w	r7, r1, r7
 8011c38:	421f      	tst	r7, r3
 8011c3a:	4629      	mov	r1, r5
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	bf18      	it	ne
 8011c40:	f04a 0a02 	orrne.w	sl, sl, #2
 8011c44:	1b76      	subs	r6, r6, r5
 8011c46:	f7ff fdee 	bl	8011826 <rshift>
 8011c4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011c4e:	2702      	movs	r7, #2
 8011c50:	f1ba 0f00 	cmp.w	sl, #0
 8011c54:	d048      	beq.n	8011ce8 <__gethex+0x3f4>
 8011c56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c5a:	2b02      	cmp	r3, #2
 8011c5c:	d015      	beq.n	8011c8a <__gethex+0x396>
 8011c5e:	2b03      	cmp	r3, #3
 8011c60:	d017      	beq.n	8011c92 <__gethex+0x39e>
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d109      	bne.n	8011c7a <__gethex+0x386>
 8011c66:	f01a 0f02 	tst.w	sl, #2
 8011c6a:	d006      	beq.n	8011c7a <__gethex+0x386>
 8011c6c:	f8d9 0000 	ldr.w	r0, [r9]
 8011c70:	ea4a 0a00 	orr.w	sl, sl, r0
 8011c74:	f01a 0f01 	tst.w	sl, #1
 8011c78:	d10e      	bne.n	8011c98 <__gethex+0x3a4>
 8011c7a:	f047 0710 	orr.w	r7, r7, #16
 8011c7e:	e033      	b.n	8011ce8 <__gethex+0x3f4>
 8011c80:	f04f 0a01 	mov.w	sl, #1
 8011c84:	e7d0      	b.n	8011c28 <__gethex+0x334>
 8011c86:	2701      	movs	r7, #1
 8011c88:	e7e2      	b.n	8011c50 <__gethex+0x35c>
 8011c8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c8c:	f1c3 0301 	rsb	r3, r3, #1
 8011c90:	9315      	str	r3, [sp, #84]	; 0x54
 8011c92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d0f0      	beq.n	8011c7a <__gethex+0x386>
 8011c98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011c9c:	f104 0314 	add.w	r3, r4, #20
 8011ca0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011ca4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011ca8:	f04f 0c00 	mov.w	ip, #0
 8011cac:	4618      	mov	r0, r3
 8011cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cb2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011cb6:	d01c      	beq.n	8011cf2 <__gethex+0x3fe>
 8011cb8:	3201      	adds	r2, #1
 8011cba:	6002      	str	r2, [r0, #0]
 8011cbc:	2f02      	cmp	r7, #2
 8011cbe:	f104 0314 	add.w	r3, r4, #20
 8011cc2:	d13f      	bne.n	8011d44 <__gethex+0x450>
 8011cc4:	f8d8 2000 	ldr.w	r2, [r8]
 8011cc8:	3a01      	subs	r2, #1
 8011cca:	42b2      	cmp	r2, r6
 8011ccc:	d10a      	bne.n	8011ce4 <__gethex+0x3f0>
 8011cce:	1171      	asrs	r1, r6, #5
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011cd6:	f006 061f 	and.w	r6, r6, #31
 8011cda:	fa02 f606 	lsl.w	r6, r2, r6
 8011cde:	421e      	tst	r6, r3
 8011ce0:	bf18      	it	ne
 8011ce2:	4617      	movne	r7, r2
 8011ce4:	f047 0720 	orr.w	r7, r7, #32
 8011ce8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011cea:	601c      	str	r4, [r3, #0]
 8011cec:	9b04      	ldr	r3, [sp, #16]
 8011cee:	601d      	str	r5, [r3, #0]
 8011cf0:	e695      	b.n	8011a1e <__gethex+0x12a>
 8011cf2:	4299      	cmp	r1, r3
 8011cf4:	f843 cc04 	str.w	ip, [r3, #-4]
 8011cf8:	d8d8      	bhi.n	8011cac <__gethex+0x3b8>
 8011cfa:	68a3      	ldr	r3, [r4, #8]
 8011cfc:	459b      	cmp	fp, r3
 8011cfe:	db19      	blt.n	8011d34 <__gethex+0x440>
 8011d00:	6861      	ldr	r1, [r4, #4]
 8011d02:	ee18 0a10 	vmov	r0, s16
 8011d06:	3101      	adds	r1, #1
 8011d08:	f000 f994 	bl	8012034 <_Balloc>
 8011d0c:	4681      	mov	r9, r0
 8011d0e:	b918      	cbnz	r0, 8011d18 <__gethex+0x424>
 8011d10:	4b1a      	ldr	r3, [pc, #104]	; (8011d7c <__gethex+0x488>)
 8011d12:	4602      	mov	r2, r0
 8011d14:	2184      	movs	r1, #132	; 0x84
 8011d16:	e6a8      	b.n	8011a6a <__gethex+0x176>
 8011d18:	6922      	ldr	r2, [r4, #16]
 8011d1a:	3202      	adds	r2, #2
 8011d1c:	f104 010c 	add.w	r1, r4, #12
 8011d20:	0092      	lsls	r2, r2, #2
 8011d22:	300c      	adds	r0, #12
 8011d24:	f7fe fada 	bl	80102dc <memcpy>
 8011d28:	4621      	mov	r1, r4
 8011d2a:	ee18 0a10 	vmov	r0, s16
 8011d2e:	f000 f9c1 	bl	80120b4 <_Bfree>
 8011d32:	464c      	mov	r4, r9
 8011d34:	6923      	ldr	r3, [r4, #16]
 8011d36:	1c5a      	adds	r2, r3, #1
 8011d38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011d3c:	6122      	str	r2, [r4, #16]
 8011d3e:	2201      	movs	r2, #1
 8011d40:	615a      	str	r2, [r3, #20]
 8011d42:	e7bb      	b.n	8011cbc <__gethex+0x3c8>
 8011d44:	6922      	ldr	r2, [r4, #16]
 8011d46:	455a      	cmp	r2, fp
 8011d48:	dd0b      	ble.n	8011d62 <__gethex+0x46e>
 8011d4a:	2101      	movs	r1, #1
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f7ff fd6a 	bl	8011826 <rshift>
 8011d52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d56:	3501      	adds	r5, #1
 8011d58:	42ab      	cmp	r3, r5
 8011d5a:	f6ff aed0 	blt.w	8011afe <__gethex+0x20a>
 8011d5e:	2701      	movs	r7, #1
 8011d60:	e7c0      	b.n	8011ce4 <__gethex+0x3f0>
 8011d62:	f016 061f 	ands.w	r6, r6, #31
 8011d66:	d0fa      	beq.n	8011d5e <__gethex+0x46a>
 8011d68:	449a      	add	sl, r3
 8011d6a:	f1c6 0620 	rsb	r6, r6, #32
 8011d6e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011d72:	f000 fa55 	bl	8012220 <__hi0bits>
 8011d76:	42b0      	cmp	r0, r6
 8011d78:	dbe7      	blt.n	8011d4a <__gethex+0x456>
 8011d7a:	e7f0      	b.n	8011d5e <__gethex+0x46a>
 8011d7c:	08015008 	.word	0x08015008

08011d80 <L_shift>:
 8011d80:	f1c2 0208 	rsb	r2, r2, #8
 8011d84:	0092      	lsls	r2, r2, #2
 8011d86:	b570      	push	{r4, r5, r6, lr}
 8011d88:	f1c2 0620 	rsb	r6, r2, #32
 8011d8c:	6843      	ldr	r3, [r0, #4]
 8011d8e:	6804      	ldr	r4, [r0, #0]
 8011d90:	fa03 f506 	lsl.w	r5, r3, r6
 8011d94:	432c      	orrs	r4, r5
 8011d96:	40d3      	lsrs	r3, r2
 8011d98:	6004      	str	r4, [r0, #0]
 8011d9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8011d9e:	4288      	cmp	r0, r1
 8011da0:	d3f4      	bcc.n	8011d8c <L_shift+0xc>
 8011da2:	bd70      	pop	{r4, r5, r6, pc}

08011da4 <__match>:
 8011da4:	b530      	push	{r4, r5, lr}
 8011da6:	6803      	ldr	r3, [r0, #0]
 8011da8:	3301      	adds	r3, #1
 8011daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dae:	b914      	cbnz	r4, 8011db6 <__match+0x12>
 8011db0:	6003      	str	r3, [r0, #0]
 8011db2:	2001      	movs	r0, #1
 8011db4:	bd30      	pop	{r4, r5, pc}
 8011db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011dbe:	2d19      	cmp	r5, #25
 8011dc0:	bf98      	it	ls
 8011dc2:	3220      	addls	r2, #32
 8011dc4:	42a2      	cmp	r2, r4
 8011dc6:	d0f0      	beq.n	8011daa <__match+0x6>
 8011dc8:	2000      	movs	r0, #0
 8011dca:	e7f3      	b.n	8011db4 <__match+0x10>

08011dcc <__hexnan>:
 8011dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd0:	680b      	ldr	r3, [r1, #0]
 8011dd2:	6801      	ldr	r1, [r0, #0]
 8011dd4:	115e      	asrs	r6, r3, #5
 8011dd6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011dda:	f013 031f 	ands.w	r3, r3, #31
 8011dde:	b087      	sub	sp, #28
 8011de0:	bf18      	it	ne
 8011de2:	3604      	addne	r6, #4
 8011de4:	2500      	movs	r5, #0
 8011de6:	1f37      	subs	r7, r6, #4
 8011de8:	4682      	mov	sl, r0
 8011dea:	4690      	mov	r8, r2
 8011dec:	9301      	str	r3, [sp, #4]
 8011dee:	f846 5c04 	str.w	r5, [r6, #-4]
 8011df2:	46b9      	mov	r9, r7
 8011df4:	463c      	mov	r4, r7
 8011df6:	9502      	str	r5, [sp, #8]
 8011df8:	46ab      	mov	fp, r5
 8011dfa:	784a      	ldrb	r2, [r1, #1]
 8011dfc:	1c4b      	adds	r3, r1, #1
 8011dfe:	9303      	str	r3, [sp, #12]
 8011e00:	b342      	cbz	r2, 8011e54 <__hexnan+0x88>
 8011e02:	4610      	mov	r0, r2
 8011e04:	9105      	str	r1, [sp, #20]
 8011e06:	9204      	str	r2, [sp, #16]
 8011e08:	f7ff fd5f 	bl	80118ca <__hexdig_fun>
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	d14f      	bne.n	8011eb0 <__hexnan+0xe4>
 8011e10:	9a04      	ldr	r2, [sp, #16]
 8011e12:	9905      	ldr	r1, [sp, #20]
 8011e14:	2a20      	cmp	r2, #32
 8011e16:	d818      	bhi.n	8011e4a <__hexnan+0x7e>
 8011e18:	9b02      	ldr	r3, [sp, #8]
 8011e1a:	459b      	cmp	fp, r3
 8011e1c:	dd13      	ble.n	8011e46 <__hexnan+0x7a>
 8011e1e:	454c      	cmp	r4, r9
 8011e20:	d206      	bcs.n	8011e30 <__hexnan+0x64>
 8011e22:	2d07      	cmp	r5, #7
 8011e24:	dc04      	bgt.n	8011e30 <__hexnan+0x64>
 8011e26:	462a      	mov	r2, r5
 8011e28:	4649      	mov	r1, r9
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	f7ff ffa8 	bl	8011d80 <L_shift>
 8011e30:	4544      	cmp	r4, r8
 8011e32:	d950      	bls.n	8011ed6 <__hexnan+0x10a>
 8011e34:	2300      	movs	r3, #0
 8011e36:	f1a4 0904 	sub.w	r9, r4, #4
 8011e3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e3e:	f8cd b008 	str.w	fp, [sp, #8]
 8011e42:	464c      	mov	r4, r9
 8011e44:	461d      	mov	r5, r3
 8011e46:	9903      	ldr	r1, [sp, #12]
 8011e48:	e7d7      	b.n	8011dfa <__hexnan+0x2e>
 8011e4a:	2a29      	cmp	r2, #41	; 0x29
 8011e4c:	d156      	bne.n	8011efc <__hexnan+0x130>
 8011e4e:	3102      	adds	r1, #2
 8011e50:	f8ca 1000 	str.w	r1, [sl]
 8011e54:	f1bb 0f00 	cmp.w	fp, #0
 8011e58:	d050      	beq.n	8011efc <__hexnan+0x130>
 8011e5a:	454c      	cmp	r4, r9
 8011e5c:	d206      	bcs.n	8011e6c <__hexnan+0xa0>
 8011e5e:	2d07      	cmp	r5, #7
 8011e60:	dc04      	bgt.n	8011e6c <__hexnan+0xa0>
 8011e62:	462a      	mov	r2, r5
 8011e64:	4649      	mov	r1, r9
 8011e66:	4620      	mov	r0, r4
 8011e68:	f7ff ff8a 	bl	8011d80 <L_shift>
 8011e6c:	4544      	cmp	r4, r8
 8011e6e:	d934      	bls.n	8011eda <__hexnan+0x10e>
 8011e70:	f1a8 0204 	sub.w	r2, r8, #4
 8011e74:	4623      	mov	r3, r4
 8011e76:	f853 1b04 	ldr.w	r1, [r3], #4
 8011e7a:	f842 1f04 	str.w	r1, [r2, #4]!
 8011e7e:	429f      	cmp	r7, r3
 8011e80:	d2f9      	bcs.n	8011e76 <__hexnan+0xaa>
 8011e82:	1b3b      	subs	r3, r7, r4
 8011e84:	f023 0303 	bic.w	r3, r3, #3
 8011e88:	3304      	adds	r3, #4
 8011e8a:	3401      	adds	r4, #1
 8011e8c:	3e03      	subs	r6, #3
 8011e8e:	42b4      	cmp	r4, r6
 8011e90:	bf88      	it	hi
 8011e92:	2304      	movhi	r3, #4
 8011e94:	4443      	add	r3, r8
 8011e96:	2200      	movs	r2, #0
 8011e98:	f843 2b04 	str.w	r2, [r3], #4
 8011e9c:	429f      	cmp	r7, r3
 8011e9e:	d2fb      	bcs.n	8011e98 <__hexnan+0xcc>
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	b91b      	cbnz	r3, 8011eac <__hexnan+0xe0>
 8011ea4:	4547      	cmp	r7, r8
 8011ea6:	d127      	bne.n	8011ef8 <__hexnan+0x12c>
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	603b      	str	r3, [r7, #0]
 8011eac:	2005      	movs	r0, #5
 8011eae:	e026      	b.n	8011efe <__hexnan+0x132>
 8011eb0:	3501      	adds	r5, #1
 8011eb2:	2d08      	cmp	r5, #8
 8011eb4:	f10b 0b01 	add.w	fp, fp, #1
 8011eb8:	dd06      	ble.n	8011ec8 <__hexnan+0xfc>
 8011eba:	4544      	cmp	r4, r8
 8011ebc:	d9c3      	bls.n	8011e46 <__hexnan+0x7a>
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ec4:	2501      	movs	r5, #1
 8011ec6:	3c04      	subs	r4, #4
 8011ec8:	6822      	ldr	r2, [r4, #0]
 8011eca:	f000 000f 	and.w	r0, r0, #15
 8011ece:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011ed2:	6022      	str	r2, [r4, #0]
 8011ed4:	e7b7      	b.n	8011e46 <__hexnan+0x7a>
 8011ed6:	2508      	movs	r5, #8
 8011ed8:	e7b5      	b.n	8011e46 <__hexnan+0x7a>
 8011eda:	9b01      	ldr	r3, [sp, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d0df      	beq.n	8011ea0 <__hexnan+0xd4>
 8011ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ee4:	f1c3 0320 	rsb	r3, r3, #32
 8011ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8011eec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011ef0:	401a      	ands	r2, r3
 8011ef2:	f846 2c04 	str.w	r2, [r6, #-4]
 8011ef6:	e7d3      	b.n	8011ea0 <__hexnan+0xd4>
 8011ef8:	3f04      	subs	r7, #4
 8011efa:	e7d1      	b.n	8011ea0 <__hexnan+0xd4>
 8011efc:	2004      	movs	r0, #4
 8011efe:	b007      	add	sp, #28
 8011f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f04 <__retarget_lock_init_recursive>:
 8011f04:	4770      	bx	lr

08011f06 <__retarget_lock_acquire_recursive>:
 8011f06:	4770      	bx	lr

08011f08 <__retarget_lock_release_recursive>:
 8011f08:	4770      	bx	lr
	...

08011f0c <_lseek_r>:
 8011f0c:	b538      	push	{r3, r4, r5, lr}
 8011f0e:	4d07      	ldr	r5, [pc, #28]	; (8011f2c <_lseek_r+0x20>)
 8011f10:	4604      	mov	r4, r0
 8011f12:	4608      	mov	r0, r1
 8011f14:	4611      	mov	r1, r2
 8011f16:	2200      	movs	r2, #0
 8011f18:	602a      	str	r2, [r5, #0]
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	f7f0 fed8 	bl	8002cd0 <_lseek>
 8011f20:	1c43      	adds	r3, r0, #1
 8011f22:	d102      	bne.n	8011f2a <_lseek_r+0x1e>
 8011f24:	682b      	ldr	r3, [r5, #0]
 8011f26:	b103      	cbz	r3, 8011f2a <_lseek_r+0x1e>
 8011f28:	6023      	str	r3, [r4, #0]
 8011f2a:	bd38      	pop	{r3, r4, r5, pc}
 8011f2c:	200034d4 	.word	0x200034d4

08011f30 <__swhatbuf_r>:
 8011f30:	b570      	push	{r4, r5, r6, lr}
 8011f32:	460e      	mov	r6, r1
 8011f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f38:	2900      	cmp	r1, #0
 8011f3a:	b096      	sub	sp, #88	; 0x58
 8011f3c:	4614      	mov	r4, r2
 8011f3e:	461d      	mov	r5, r3
 8011f40:	da07      	bge.n	8011f52 <__swhatbuf_r+0x22>
 8011f42:	2300      	movs	r3, #0
 8011f44:	602b      	str	r3, [r5, #0]
 8011f46:	89b3      	ldrh	r3, [r6, #12]
 8011f48:	061a      	lsls	r2, r3, #24
 8011f4a:	d410      	bmi.n	8011f6e <__swhatbuf_r+0x3e>
 8011f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f50:	e00e      	b.n	8011f70 <__swhatbuf_r+0x40>
 8011f52:	466a      	mov	r2, sp
 8011f54:	f001 fa02 	bl	801335c <_fstat_r>
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	dbf2      	blt.n	8011f42 <__swhatbuf_r+0x12>
 8011f5c:	9a01      	ldr	r2, [sp, #4]
 8011f5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f66:	425a      	negs	r2, r3
 8011f68:	415a      	adcs	r2, r3
 8011f6a:	602a      	str	r2, [r5, #0]
 8011f6c:	e7ee      	b.n	8011f4c <__swhatbuf_r+0x1c>
 8011f6e:	2340      	movs	r3, #64	; 0x40
 8011f70:	2000      	movs	r0, #0
 8011f72:	6023      	str	r3, [r4, #0]
 8011f74:	b016      	add	sp, #88	; 0x58
 8011f76:	bd70      	pop	{r4, r5, r6, pc}

08011f78 <__smakebuf_r>:
 8011f78:	898b      	ldrh	r3, [r1, #12]
 8011f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f7c:	079d      	lsls	r5, r3, #30
 8011f7e:	4606      	mov	r6, r0
 8011f80:	460c      	mov	r4, r1
 8011f82:	d507      	bpl.n	8011f94 <__smakebuf_r+0x1c>
 8011f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f88:	6023      	str	r3, [r4, #0]
 8011f8a:	6123      	str	r3, [r4, #16]
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	6163      	str	r3, [r4, #20]
 8011f90:	b002      	add	sp, #8
 8011f92:	bd70      	pop	{r4, r5, r6, pc}
 8011f94:	ab01      	add	r3, sp, #4
 8011f96:	466a      	mov	r2, sp
 8011f98:	f7ff ffca 	bl	8011f30 <__swhatbuf_r>
 8011f9c:	9900      	ldr	r1, [sp, #0]
 8011f9e:	4605      	mov	r5, r0
 8011fa0:	4630      	mov	r0, r6
 8011fa2:	f7fe fa01 	bl	80103a8 <_malloc_r>
 8011fa6:	b948      	cbnz	r0, 8011fbc <__smakebuf_r+0x44>
 8011fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fac:	059a      	lsls	r2, r3, #22
 8011fae:	d4ef      	bmi.n	8011f90 <__smakebuf_r+0x18>
 8011fb0:	f023 0303 	bic.w	r3, r3, #3
 8011fb4:	f043 0302 	orr.w	r3, r3, #2
 8011fb8:	81a3      	strh	r3, [r4, #12]
 8011fba:	e7e3      	b.n	8011f84 <__smakebuf_r+0xc>
 8011fbc:	4b0d      	ldr	r3, [pc, #52]	; (8011ff4 <__smakebuf_r+0x7c>)
 8011fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8011fc0:	89a3      	ldrh	r3, [r4, #12]
 8011fc2:	6020      	str	r0, [r4, #0]
 8011fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fc8:	81a3      	strh	r3, [r4, #12]
 8011fca:	9b00      	ldr	r3, [sp, #0]
 8011fcc:	6163      	str	r3, [r4, #20]
 8011fce:	9b01      	ldr	r3, [sp, #4]
 8011fd0:	6120      	str	r0, [r4, #16]
 8011fd2:	b15b      	cbz	r3, 8011fec <__smakebuf_r+0x74>
 8011fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fd8:	4630      	mov	r0, r6
 8011fda:	f001 f9d1 	bl	8013380 <_isatty_r>
 8011fde:	b128      	cbz	r0, 8011fec <__smakebuf_r+0x74>
 8011fe0:	89a3      	ldrh	r3, [r4, #12]
 8011fe2:	f023 0303 	bic.w	r3, r3, #3
 8011fe6:	f043 0301 	orr.w	r3, r3, #1
 8011fea:	81a3      	strh	r3, [r4, #12]
 8011fec:	89a0      	ldrh	r0, [r4, #12]
 8011fee:	4305      	orrs	r5, r0
 8011ff0:	81a5      	strh	r5, [r4, #12]
 8011ff2:	e7cd      	b.n	8011f90 <__smakebuf_r+0x18>
 8011ff4:	08011685 	.word	0x08011685

08011ff8 <__ascii_mbtowc>:
 8011ff8:	b082      	sub	sp, #8
 8011ffa:	b901      	cbnz	r1, 8011ffe <__ascii_mbtowc+0x6>
 8011ffc:	a901      	add	r1, sp, #4
 8011ffe:	b142      	cbz	r2, 8012012 <__ascii_mbtowc+0x1a>
 8012000:	b14b      	cbz	r3, 8012016 <__ascii_mbtowc+0x1e>
 8012002:	7813      	ldrb	r3, [r2, #0]
 8012004:	600b      	str	r3, [r1, #0]
 8012006:	7812      	ldrb	r2, [r2, #0]
 8012008:	1e10      	subs	r0, r2, #0
 801200a:	bf18      	it	ne
 801200c:	2001      	movne	r0, #1
 801200e:	b002      	add	sp, #8
 8012010:	4770      	bx	lr
 8012012:	4610      	mov	r0, r2
 8012014:	e7fb      	b.n	801200e <__ascii_mbtowc+0x16>
 8012016:	f06f 0001 	mvn.w	r0, #1
 801201a:	e7f8      	b.n	801200e <__ascii_mbtowc+0x16>

0801201c <__malloc_lock>:
 801201c:	4801      	ldr	r0, [pc, #4]	; (8012024 <__malloc_lock+0x8>)
 801201e:	f7ff bf72 	b.w	8011f06 <__retarget_lock_acquire_recursive>
 8012022:	bf00      	nop
 8012024:	200034cc 	.word	0x200034cc

08012028 <__malloc_unlock>:
 8012028:	4801      	ldr	r0, [pc, #4]	; (8012030 <__malloc_unlock+0x8>)
 801202a:	f7ff bf6d 	b.w	8011f08 <__retarget_lock_release_recursive>
 801202e:	bf00      	nop
 8012030:	200034cc 	.word	0x200034cc

08012034 <_Balloc>:
 8012034:	b570      	push	{r4, r5, r6, lr}
 8012036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012038:	4604      	mov	r4, r0
 801203a:	460d      	mov	r5, r1
 801203c:	b976      	cbnz	r6, 801205c <_Balloc+0x28>
 801203e:	2010      	movs	r0, #16
 8012040:	f7fe f93c 	bl	80102bc <malloc>
 8012044:	4602      	mov	r2, r0
 8012046:	6260      	str	r0, [r4, #36]	; 0x24
 8012048:	b920      	cbnz	r0, 8012054 <_Balloc+0x20>
 801204a:	4b18      	ldr	r3, [pc, #96]	; (80120ac <_Balloc+0x78>)
 801204c:	4818      	ldr	r0, [pc, #96]	; (80120b0 <_Balloc+0x7c>)
 801204e:	2166      	movs	r1, #102	; 0x66
 8012050:	f001 f954 	bl	80132fc <__assert_func>
 8012054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012058:	6006      	str	r6, [r0, #0]
 801205a:	60c6      	str	r6, [r0, #12]
 801205c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801205e:	68f3      	ldr	r3, [r6, #12]
 8012060:	b183      	cbz	r3, 8012084 <_Balloc+0x50>
 8012062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012064:	68db      	ldr	r3, [r3, #12]
 8012066:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801206a:	b9b8      	cbnz	r0, 801209c <_Balloc+0x68>
 801206c:	2101      	movs	r1, #1
 801206e:	fa01 f605 	lsl.w	r6, r1, r5
 8012072:	1d72      	adds	r2, r6, #5
 8012074:	0092      	lsls	r2, r2, #2
 8012076:	4620      	mov	r0, r4
 8012078:	f000 fc97 	bl	80129aa <_calloc_r>
 801207c:	b160      	cbz	r0, 8012098 <_Balloc+0x64>
 801207e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012082:	e00e      	b.n	80120a2 <_Balloc+0x6e>
 8012084:	2221      	movs	r2, #33	; 0x21
 8012086:	2104      	movs	r1, #4
 8012088:	4620      	mov	r0, r4
 801208a:	f000 fc8e 	bl	80129aa <_calloc_r>
 801208e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012090:	60f0      	str	r0, [r6, #12]
 8012092:	68db      	ldr	r3, [r3, #12]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d1e4      	bne.n	8012062 <_Balloc+0x2e>
 8012098:	2000      	movs	r0, #0
 801209a:	bd70      	pop	{r4, r5, r6, pc}
 801209c:	6802      	ldr	r2, [r0, #0]
 801209e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80120a2:	2300      	movs	r3, #0
 80120a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80120a8:	e7f7      	b.n	801209a <_Balloc+0x66>
 80120aa:	bf00      	nop
 80120ac:	08015098 	.word	0x08015098
 80120b0:	080150af 	.word	0x080150af

080120b4 <_Bfree>:
 80120b4:	b570      	push	{r4, r5, r6, lr}
 80120b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120b8:	4605      	mov	r5, r0
 80120ba:	460c      	mov	r4, r1
 80120bc:	b976      	cbnz	r6, 80120dc <_Bfree+0x28>
 80120be:	2010      	movs	r0, #16
 80120c0:	f7fe f8fc 	bl	80102bc <malloc>
 80120c4:	4602      	mov	r2, r0
 80120c6:	6268      	str	r0, [r5, #36]	; 0x24
 80120c8:	b920      	cbnz	r0, 80120d4 <_Bfree+0x20>
 80120ca:	4b09      	ldr	r3, [pc, #36]	; (80120f0 <_Bfree+0x3c>)
 80120cc:	4809      	ldr	r0, [pc, #36]	; (80120f4 <_Bfree+0x40>)
 80120ce:	218a      	movs	r1, #138	; 0x8a
 80120d0:	f001 f914 	bl	80132fc <__assert_func>
 80120d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120d8:	6006      	str	r6, [r0, #0]
 80120da:	60c6      	str	r6, [r0, #12]
 80120dc:	b13c      	cbz	r4, 80120ee <_Bfree+0x3a>
 80120de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80120e0:	6862      	ldr	r2, [r4, #4]
 80120e2:	68db      	ldr	r3, [r3, #12]
 80120e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80120e8:	6021      	str	r1, [r4, #0]
 80120ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80120ee:	bd70      	pop	{r4, r5, r6, pc}
 80120f0:	08015098 	.word	0x08015098
 80120f4:	080150af 	.word	0x080150af

080120f8 <__multadd>:
 80120f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120fc:	690e      	ldr	r6, [r1, #16]
 80120fe:	4607      	mov	r7, r0
 8012100:	4698      	mov	r8, r3
 8012102:	460c      	mov	r4, r1
 8012104:	f101 0014 	add.w	r0, r1, #20
 8012108:	2300      	movs	r3, #0
 801210a:	6805      	ldr	r5, [r0, #0]
 801210c:	b2a9      	uxth	r1, r5
 801210e:	fb02 8101 	mla	r1, r2, r1, r8
 8012112:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012116:	0c2d      	lsrs	r5, r5, #16
 8012118:	fb02 c505 	mla	r5, r2, r5, ip
 801211c:	b289      	uxth	r1, r1
 801211e:	3301      	adds	r3, #1
 8012120:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012124:	429e      	cmp	r6, r3
 8012126:	f840 1b04 	str.w	r1, [r0], #4
 801212a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801212e:	dcec      	bgt.n	801210a <__multadd+0x12>
 8012130:	f1b8 0f00 	cmp.w	r8, #0
 8012134:	d022      	beq.n	801217c <__multadd+0x84>
 8012136:	68a3      	ldr	r3, [r4, #8]
 8012138:	42b3      	cmp	r3, r6
 801213a:	dc19      	bgt.n	8012170 <__multadd+0x78>
 801213c:	6861      	ldr	r1, [r4, #4]
 801213e:	4638      	mov	r0, r7
 8012140:	3101      	adds	r1, #1
 8012142:	f7ff ff77 	bl	8012034 <_Balloc>
 8012146:	4605      	mov	r5, r0
 8012148:	b928      	cbnz	r0, 8012156 <__multadd+0x5e>
 801214a:	4602      	mov	r2, r0
 801214c:	4b0d      	ldr	r3, [pc, #52]	; (8012184 <__multadd+0x8c>)
 801214e:	480e      	ldr	r0, [pc, #56]	; (8012188 <__multadd+0x90>)
 8012150:	21b5      	movs	r1, #181	; 0xb5
 8012152:	f001 f8d3 	bl	80132fc <__assert_func>
 8012156:	6922      	ldr	r2, [r4, #16]
 8012158:	3202      	adds	r2, #2
 801215a:	f104 010c 	add.w	r1, r4, #12
 801215e:	0092      	lsls	r2, r2, #2
 8012160:	300c      	adds	r0, #12
 8012162:	f7fe f8bb 	bl	80102dc <memcpy>
 8012166:	4621      	mov	r1, r4
 8012168:	4638      	mov	r0, r7
 801216a:	f7ff ffa3 	bl	80120b4 <_Bfree>
 801216e:	462c      	mov	r4, r5
 8012170:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012174:	3601      	adds	r6, #1
 8012176:	f8c3 8014 	str.w	r8, [r3, #20]
 801217a:	6126      	str	r6, [r4, #16]
 801217c:	4620      	mov	r0, r4
 801217e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012182:	bf00      	nop
 8012184:	08015008 	.word	0x08015008
 8012188:	080150af 	.word	0x080150af

0801218c <__s2b>:
 801218c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012190:	460c      	mov	r4, r1
 8012192:	4615      	mov	r5, r2
 8012194:	461f      	mov	r7, r3
 8012196:	2209      	movs	r2, #9
 8012198:	3308      	adds	r3, #8
 801219a:	4606      	mov	r6, r0
 801219c:	fb93 f3f2 	sdiv	r3, r3, r2
 80121a0:	2100      	movs	r1, #0
 80121a2:	2201      	movs	r2, #1
 80121a4:	429a      	cmp	r2, r3
 80121a6:	db09      	blt.n	80121bc <__s2b+0x30>
 80121a8:	4630      	mov	r0, r6
 80121aa:	f7ff ff43 	bl	8012034 <_Balloc>
 80121ae:	b940      	cbnz	r0, 80121c2 <__s2b+0x36>
 80121b0:	4602      	mov	r2, r0
 80121b2:	4b19      	ldr	r3, [pc, #100]	; (8012218 <__s2b+0x8c>)
 80121b4:	4819      	ldr	r0, [pc, #100]	; (801221c <__s2b+0x90>)
 80121b6:	21ce      	movs	r1, #206	; 0xce
 80121b8:	f001 f8a0 	bl	80132fc <__assert_func>
 80121bc:	0052      	lsls	r2, r2, #1
 80121be:	3101      	adds	r1, #1
 80121c0:	e7f0      	b.n	80121a4 <__s2b+0x18>
 80121c2:	9b08      	ldr	r3, [sp, #32]
 80121c4:	6143      	str	r3, [r0, #20]
 80121c6:	2d09      	cmp	r5, #9
 80121c8:	f04f 0301 	mov.w	r3, #1
 80121cc:	6103      	str	r3, [r0, #16]
 80121ce:	dd16      	ble.n	80121fe <__s2b+0x72>
 80121d0:	f104 0909 	add.w	r9, r4, #9
 80121d4:	46c8      	mov	r8, r9
 80121d6:	442c      	add	r4, r5
 80121d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80121dc:	4601      	mov	r1, r0
 80121de:	3b30      	subs	r3, #48	; 0x30
 80121e0:	220a      	movs	r2, #10
 80121e2:	4630      	mov	r0, r6
 80121e4:	f7ff ff88 	bl	80120f8 <__multadd>
 80121e8:	45a0      	cmp	r8, r4
 80121ea:	d1f5      	bne.n	80121d8 <__s2b+0x4c>
 80121ec:	f1a5 0408 	sub.w	r4, r5, #8
 80121f0:	444c      	add	r4, r9
 80121f2:	1b2d      	subs	r5, r5, r4
 80121f4:	1963      	adds	r3, r4, r5
 80121f6:	42bb      	cmp	r3, r7
 80121f8:	db04      	blt.n	8012204 <__s2b+0x78>
 80121fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121fe:	340a      	adds	r4, #10
 8012200:	2509      	movs	r5, #9
 8012202:	e7f6      	b.n	80121f2 <__s2b+0x66>
 8012204:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012208:	4601      	mov	r1, r0
 801220a:	3b30      	subs	r3, #48	; 0x30
 801220c:	220a      	movs	r2, #10
 801220e:	4630      	mov	r0, r6
 8012210:	f7ff ff72 	bl	80120f8 <__multadd>
 8012214:	e7ee      	b.n	80121f4 <__s2b+0x68>
 8012216:	bf00      	nop
 8012218:	08015008 	.word	0x08015008
 801221c:	080150af 	.word	0x080150af

08012220 <__hi0bits>:
 8012220:	0c03      	lsrs	r3, r0, #16
 8012222:	041b      	lsls	r3, r3, #16
 8012224:	b9d3      	cbnz	r3, 801225c <__hi0bits+0x3c>
 8012226:	0400      	lsls	r0, r0, #16
 8012228:	2310      	movs	r3, #16
 801222a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801222e:	bf04      	itt	eq
 8012230:	0200      	lsleq	r0, r0, #8
 8012232:	3308      	addeq	r3, #8
 8012234:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012238:	bf04      	itt	eq
 801223a:	0100      	lsleq	r0, r0, #4
 801223c:	3304      	addeq	r3, #4
 801223e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012242:	bf04      	itt	eq
 8012244:	0080      	lsleq	r0, r0, #2
 8012246:	3302      	addeq	r3, #2
 8012248:	2800      	cmp	r0, #0
 801224a:	db05      	blt.n	8012258 <__hi0bits+0x38>
 801224c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012250:	f103 0301 	add.w	r3, r3, #1
 8012254:	bf08      	it	eq
 8012256:	2320      	moveq	r3, #32
 8012258:	4618      	mov	r0, r3
 801225a:	4770      	bx	lr
 801225c:	2300      	movs	r3, #0
 801225e:	e7e4      	b.n	801222a <__hi0bits+0xa>

08012260 <__lo0bits>:
 8012260:	6803      	ldr	r3, [r0, #0]
 8012262:	f013 0207 	ands.w	r2, r3, #7
 8012266:	4601      	mov	r1, r0
 8012268:	d00b      	beq.n	8012282 <__lo0bits+0x22>
 801226a:	07da      	lsls	r2, r3, #31
 801226c:	d424      	bmi.n	80122b8 <__lo0bits+0x58>
 801226e:	0798      	lsls	r0, r3, #30
 8012270:	bf49      	itett	mi
 8012272:	085b      	lsrmi	r3, r3, #1
 8012274:	089b      	lsrpl	r3, r3, #2
 8012276:	2001      	movmi	r0, #1
 8012278:	600b      	strmi	r3, [r1, #0]
 801227a:	bf5c      	itt	pl
 801227c:	600b      	strpl	r3, [r1, #0]
 801227e:	2002      	movpl	r0, #2
 8012280:	4770      	bx	lr
 8012282:	b298      	uxth	r0, r3
 8012284:	b9b0      	cbnz	r0, 80122b4 <__lo0bits+0x54>
 8012286:	0c1b      	lsrs	r3, r3, #16
 8012288:	2010      	movs	r0, #16
 801228a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801228e:	bf04      	itt	eq
 8012290:	0a1b      	lsreq	r3, r3, #8
 8012292:	3008      	addeq	r0, #8
 8012294:	071a      	lsls	r2, r3, #28
 8012296:	bf04      	itt	eq
 8012298:	091b      	lsreq	r3, r3, #4
 801229a:	3004      	addeq	r0, #4
 801229c:	079a      	lsls	r2, r3, #30
 801229e:	bf04      	itt	eq
 80122a0:	089b      	lsreq	r3, r3, #2
 80122a2:	3002      	addeq	r0, #2
 80122a4:	07da      	lsls	r2, r3, #31
 80122a6:	d403      	bmi.n	80122b0 <__lo0bits+0x50>
 80122a8:	085b      	lsrs	r3, r3, #1
 80122aa:	f100 0001 	add.w	r0, r0, #1
 80122ae:	d005      	beq.n	80122bc <__lo0bits+0x5c>
 80122b0:	600b      	str	r3, [r1, #0]
 80122b2:	4770      	bx	lr
 80122b4:	4610      	mov	r0, r2
 80122b6:	e7e8      	b.n	801228a <__lo0bits+0x2a>
 80122b8:	2000      	movs	r0, #0
 80122ba:	4770      	bx	lr
 80122bc:	2020      	movs	r0, #32
 80122be:	4770      	bx	lr

080122c0 <__i2b>:
 80122c0:	b510      	push	{r4, lr}
 80122c2:	460c      	mov	r4, r1
 80122c4:	2101      	movs	r1, #1
 80122c6:	f7ff feb5 	bl	8012034 <_Balloc>
 80122ca:	4602      	mov	r2, r0
 80122cc:	b928      	cbnz	r0, 80122da <__i2b+0x1a>
 80122ce:	4b05      	ldr	r3, [pc, #20]	; (80122e4 <__i2b+0x24>)
 80122d0:	4805      	ldr	r0, [pc, #20]	; (80122e8 <__i2b+0x28>)
 80122d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80122d6:	f001 f811 	bl	80132fc <__assert_func>
 80122da:	2301      	movs	r3, #1
 80122dc:	6144      	str	r4, [r0, #20]
 80122de:	6103      	str	r3, [r0, #16]
 80122e0:	bd10      	pop	{r4, pc}
 80122e2:	bf00      	nop
 80122e4:	08015008 	.word	0x08015008
 80122e8:	080150af 	.word	0x080150af

080122ec <__multiply>:
 80122ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f0:	4614      	mov	r4, r2
 80122f2:	690a      	ldr	r2, [r1, #16]
 80122f4:	6923      	ldr	r3, [r4, #16]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	bfb8      	it	lt
 80122fa:	460b      	movlt	r3, r1
 80122fc:	460d      	mov	r5, r1
 80122fe:	bfbc      	itt	lt
 8012300:	4625      	movlt	r5, r4
 8012302:	461c      	movlt	r4, r3
 8012304:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012308:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801230c:	68ab      	ldr	r3, [r5, #8]
 801230e:	6869      	ldr	r1, [r5, #4]
 8012310:	eb0a 0709 	add.w	r7, sl, r9
 8012314:	42bb      	cmp	r3, r7
 8012316:	b085      	sub	sp, #20
 8012318:	bfb8      	it	lt
 801231a:	3101      	addlt	r1, #1
 801231c:	f7ff fe8a 	bl	8012034 <_Balloc>
 8012320:	b930      	cbnz	r0, 8012330 <__multiply+0x44>
 8012322:	4602      	mov	r2, r0
 8012324:	4b42      	ldr	r3, [pc, #264]	; (8012430 <__multiply+0x144>)
 8012326:	4843      	ldr	r0, [pc, #268]	; (8012434 <__multiply+0x148>)
 8012328:	f240 115d 	movw	r1, #349	; 0x15d
 801232c:	f000 ffe6 	bl	80132fc <__assert_func>
 8012330:	f100 0614 	add.w	r6, r0, #20
 8012334:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012338:	4633      	mov	r3, r6
 801233a:	2200      	movs	r2, #0
 801233c:	4543      	cmp	r3, r8
 801233e:	d31e      	bcc.n	801237e <__multiply+0x92>
 8012340:	f105 0c14 	add.w	ip, r5, #20
 8012344:	f104 0314 	add.w	r3, r4, #20
 8012348:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801234c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012350:	9202      	str	r2, [sp, #8]
 8012352:	ebac 0205 	sub.w	r2, ip, r5
 8012356:	3a15      	subs	r2, #21
 8012358:	f022 0203 	bic.w	r2, r2, #3
 801235c:	3204      	adds	r2, #4
 801235e:	f105 0115 	add.w	r1, r5, #21
 8012362:	458c      	cmp	ip, r1
 8012364:	bf38      	it	cc
 8012366:	2204      	movcc	r2, #4
 8012368:	9201      	str	r2, [sp, #4]
 801236a:	9a02      	ldr	r2, [sp, #8]
 801236c:	9303      	str	r3, [sp, #12]
 801236e:	429a      	cmp	r2, r3
 8012370:	d808      	bhi.n	8012384 <__multiply+0x98>
 8012372:	2f00      	cmp	r7, #0
 8012374:	dc55      	bgt.n	8012422 <__multiply+0x136>
 8012376:	6107      	str	r7, [r0, #16]
 8012378:	b005      	add	sp, #20
 801237a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801237e:	f843 2b04 	str.w	r2, [r3], #4
 8012382:	e7db      	b.n	801233c <__multiply+0x50>
 8012384:	f8b3 a000 	ldrh.w	sl, [r3]
 8012388:	f1ba 0f00 	cmp.w	sl, #0
 801238c:	d020      	beq.n	80123d0 <__multiply+0xe4>
 801238e:	f105 0e14 	add.w	lr, r5, #20
 8012392:	46b1      	mov	r9, r6
 8012394:	2200      	movs	r2, #0
 8012396:	f85e 4b04 	ldr.w	r4, [lr], #4
 801239a:	f8d9 b000 	ldr.w	fp, [r9]
 801239e:	b2a1      	uxth	r1, r4
 80123a0:	fa1f fb8b 	uxth.w	fp, fp
 80123a4:	fb0a b101 	mla	r1, sl, r1, fp
 80123a8:	4411      	add	r1, r2
 80123aa:	f8d9 2000 	ldr.w	r2, [r9]
 80123ae:	0c24      	lsrs	r4, r4, #16
 80123b0:	0c12      	lsrs	r2, r2, #16
 80123b2:	fb0a 2404 	mla	r4, sl, r4, r2
 80123b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80123ba:	b289      	uxth	r1, r1
 80123bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80123c0:	45f4      	cmp	ip, lr
 80123c2:	f849 1b04 	str.w	r1, [r9], #4
 80123c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80123ca:	d8e4      	bhi.n	8012396 <__multiply+0xaa>
 80123cc:	9901      	ldr	r1, [sp, #4]
 80123ce:	5072      	str	r2, [r6, r1]
 80123d0:	9a03      	ldr	r2, [sp, #12]
 80123d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80123d6:	3304      	adds	r3, #4
 80123d8:	f1b9 0f00 	cmp.w	r9, #0
 80123dc:	d01f      	beq.n	801241e <__multiply+0x132>
 80123de:	6834      	ldr	r4, [r6, #0]
 80123e0:	f105 0114 	add.w	r1, r5, #20
 80123e4:	46b6      	mov	lr, r6
 80123e6:	f04f 0a00 	mov.w	sl, #0
 80123ea:	880a      	ldrh	r2, [r1, #0]
 80123ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 80123f0:	fb09 b202 	mla	r2, r9, r2, fp
 80123f4:	4492      	add	sl, r2
 80123f6:	b2a4      	uxth	r4, r4
 80123f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80123fc:	f84e 4b04 	str.w	r4, [lr], #4
 8012400:	f851 4b04 	ldr.w	r4, [r1], #4
 8012404:	f8be 2000 	ldrh.w	r2, [lr]
 8012408:	0c24      	lsrs	r4, r4, #16
 801240a:	fb09 2404 	mla	r4, r9, r4, r2
 801240e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012412:	458c      	cmp	ip, r1
 8012414:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012418:	d8e7      	bhi.n	80123ea <__multiply+0xfe>
 801241a:	9a01      	ldr	r2, [sp, #4]
 801241c:	50b4      	str	r4, [r6, r2]
 801241e:	3604      	adds	r6, #4
 8012420:	e7a3      	b.n	801236a <__multiply+0x7e>
 8012422:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012426:	2b00      	cmp	r3, #0
 8012428:	d1a5      	bne.n	8012376 <__multiply+0x8a>
 801242a:	3f01      	subs	r7, #1
 801242c:	e7a1      	b.n	8012372 <__multiply+0x86>
 801242e:	bf00      	nop
 8012430:	08015008 	.word	0x08015008
 8012434:	080150af 	.word	0x080150af

08012438 <__pow5mult>:
 8012438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801243c:	4615      	mov	r5, r2
 801243e:	f012 0203 	ands.w	r2, r2, #3
 8012442:	4606      	mov	r6, r0
 8012444:	460f      	mov	r7, r1
 8012446:	d007      	beq.n	8012458 <__pow5mult+0x20>
 8012448:	4c25      	ldr	r4, [pc, #148]	; (80124e0 <__pow5mult+0xa8>)
 801244a:	3a01      	subs	r2, #1
 801244c:	2300      	movs	r3, #0
 801244e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012452:	f7ff fe51 	bl	80120f8 <__multadd>
 8012456:	4607      	mov	r7, r0
 8012458:	10ad      	asrs	r5, r5, #2
 801245a:	d03d      	beq.n	80124d8 <__pow5mult+0xa0>
 801245c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801245e:	b97c      	cbnz	r4, 8012480 <__pow5mult+0x48>
 8012460:	2010      	movs	r0, #16
 8012462:	f7fd ff2b 	bl	80102bc <malloc>
 8012466:	4602      	mov	r2, r0
 8012468:	6270      	str	r0, [r6, #36]	; 0x24
 801246a:	b928      	cbnz	r0, 8012478 <__pow5mult+0x40>
 801246c:	4b1d      	ldr	r3, [pc, #116]	; (80124e4 <__pow5mult+0xac>)
 801246e:	481e      	ldr	r0, [pc, #120]	; (80124e8 <__pow5mult+0xb0>)
 8012470:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012474:	f000 ff42 	bl	80132fc <__assert_func>
 8012478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801247c:	6004      	str	r4, [r0, #0]
 801247e:	60c4      	str	r4, [r0, #12]
 8012480:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012488:	b94c      	cbnz	r4, 801249e <__pow5mult+0x66>
 801248a:	f240 2171 	movw	r1, #625	; 0x271
 801248e:	4630      	mov	r0, r6
 8012490:	f7ff ff16 	bl	80122c0 <__i2b>
 8012494:	2300      	movs	r3, #0
 8012496:	f8c8 0008 	str.w	r0, [r8, #8]
 801249a:	4604      	mov	r4, r0
 801249c:	6003      	str	r3, [r0, #0]
 801249e:	f04f 0900 	mov.w	r9, #0
 80124a2:	07eb      	lsls	r3, r5, #31
 80124a4:	d50a      	bpl.n	80124bc <__pow5mult+0x84>
 80124a6:	4639      	mov	r1, r7
 80124a8:	4622      	mov	r2, r4
 80124aa:	4630      	mov	r0, r6
 80124ac:	f7ff ff1e 	bl	80122ec <__multiply>
 80124b0:	4639      	mov	r1, r7
 80124b2:	4680      	mov	r8, r0
 80124b4:	4630      	mov	r0, r6
 80124b6:	f7ff fdfd 	bl	80120b4 <_Bfree>
 80124ba:	4647      	mov	r7, r8
 80124bc:	106d      	asrs	r5, r5, #1
 80124be:	d00b      	beq.n	80124d8 <__pow5mult+0xa0>
 80124c0:	6820      	ldr	r0, [r4, #0]
 80124c2:	b938      	cbnz	r0, 80124d4 <__pow5mult+0x9c>
 80124c4:	4622      	mov	r2, r4
 80124c6:	4621      	mov	r1, r4
 80124c8:	4630      	mov	r0, r6
 80124ca:	f7ff ff0f 	bl	80122ec <__multiply>
 80124ce:	6020      	str	r0, [r4, #0]
 80124d0:	f8c0 9000 	str.w	r9, [r0]
 80124d4:	4604      	mov	r4, r0
 80124d6:	e7e4      	b.n	80124a2 <__pow5mult+0x6a>
 80124d8:	4638      	mov	r0, r7
 80124da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124de:	bf00      	nop
 80124e0:	08015200 	.word	0x08015200
 80124e4:	08015098 	.word	0x08015098
 80124e8:	080150af 	.word	0x080150af

080124ec <__lshift>:
 80124ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124f0:	460c      	mov	r4, r1
 80124f2:	6849      	ldr	r1, [r1, #4]
 80124f4:	6923      	ldr	r3, [r4, #16]
 80124f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80124fa:	68a3      	ldr	r3, [r4, #8]
 80124fc:	4607      	mov	r7, r0
 80124fe:	4691      	mov	r9, r2
 8012500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012504:	f108 0601 	add.w	r6, r8, #1
 8012508:	42b3      	cmp	r3, r6
 801250a:	db0b      	blt.n	8012524 <__lshift+0x38>
 801250c:	4638      	mov	r0, r7
 801250e:	f7ff fd91 	bl	8012034 <_Balloc>
 8012512:	4605      	mov	r5, r0
 8012514:	b948      	cbnz	r0, 801252a <__lshift+0x3e>
 8012516:	4602      	mov	r2, r0
 8012518:	4b28      	ldr	r3, [pc, #160]	; (80125bc <__lshift+0xd0>)
 801251a:	4829      	ldr	r0, [pc, #164]	; (80125c0 <__lshift+0xd4>)
 801251c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012520:	f000 feec 	bl	80132fc <__assert_func>
 8012524:	3101      	adds	r1, #1
 8012526:	005b      	lsls	r3, r3, #1
 8012528:	e7ee      	b.n	8012508 <__lshift+0x1c>
 801252a:	2300      	movs	r3, #0
 801252c:	f100 0114 	add.w	r1, r0, #20
 8012530:	f100 0210 	add.w	r2, r0, #16
 8012534:	4618      	mov	r0, r3
 8012536:	4553      	cmp	r3, sl
 8012538:	db33      	blt.n	80125a2 <__lshift+0xb6>
 801253a:	6920      	ldr	r0, [r4, #16]
 801253c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012540:	f104 0314 	add.w	r3, r4, #20
 8012544:	f019 091f 	ands.w	r9, r9, #31
 8012548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801254c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012550:	d02b      	beq.n	80125aa <__lshift+0xbe>
 8012552:	f1c9 0e20 	rsb	lr, r9, #32
 8012556:	468a      	mov	sl, r1
 8012558:	2200      	movs	r2, #0
 801255a:	6818      	ldr	r0, [r3, #0]
 801255c:	fa00 f009 	lsl.w	r0, r0, r9
 8012560:	4302      	orrs	r2, r0
 8012562:	f84a 2b04 	str.w	r2, [sl], #4
 8012566:	f853 2b04 	ldr.w	r2, [r3], #4
 801256a:	459c      	cmp	ip, r3
 801256c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012570:	d8f3      	bhi.n	801255a <__lshift+0x6e>
 8012572:	ebac 0304 	sub.w	r3, ip, r4
 8012576:	3b15      	subs	r3, #21
 8012578:	f023 0303 	bic.w	r3, r3, #3
 801257c:	3304      	adds	r3, #4
 801257e:	f104 0015 	add.w	r0, r4, #21
 8012582:	4584      	cmp	ip, r0
 8012584:	bf38      	it	cc
 8012586:	2304      	movcc	r3, #4
 8012588:	50ca      	str	r2, [r1, r3]
 801258a:	b10a      	cbz	r2, 8012590 <__lshift+0xa4>
 801258c:	f108 0602 	add.w	r6, r8, #2
 8012590:	3e01      	subs	r6, #1
 8012592:	4638      	mov	r0, r7
 8012594:	612e      	str	r6, [r5, #16]
 8012596:	4621      	mov	r1, r4
 8012598:	f7ff fd8c 	bl	80120b4 <_Bfree>
 801259c:	4628      	mov	r0, r5
 801259e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80125a6:	3301      	adds	r3, #1
 80125a8:	e7c5      	b.n	8012536 <__lshift+0x4a>
 80125aa:	3904      	subs	r1, #4
 80125ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80125b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80125b4:	459c      	cmp	ip, r3
 80125b6:	d8f9      	bhi.n	80125ac <__lshift+0xc0>
 80125b8:	e7ea      	b.n	8012590 <__lshift+0xa4>
 80125ba:	bf00      	nop
 80125bc:	08015008 	.word	0x08015008
 80125c0:	080150af 	.word	0x080150af

080125c4 <__mcmp>:
 80125c4:	b530      	push	{r4, r5, lr}
 80125c6:	6902      	ldr	r2, [r0, #16]
 80125c8:	690c      	ldr	r4, [r1, #16]
 80125ca:	1b12      	subs	r2, r2, r4
 80125cc:	d10e      	bne.n	80125ec <__mcmp+0x28>
 80125ce:	f100 0314 	add.w	r3, r0, #20
 80125d2:	3114      	adds	r1, #20
 80125d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80125d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80125dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80125e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80125e4:	42a5      	cmp	r5, r4
 80125e6:	d003      	beq.n	80125f0 <__mcmp+0x2c>
 80125e8:	d305      	bcc.n	80125f6 <__mcmp+0x32>
 80125ea:	2201      	movs	r2, #1
 80125ec:	4610      	mov	r0, r2
 80125ee:	bd30      	pop	{r4, r5, pc}
 80125f0:	4283      	cmp	r3, r0
 80125f2:	d3f3      	bcc.n	80125dc <__mcmp+0x18>
 80125f4:	e7fa      	b.n	80125ec <__mcmp+0x28>
 80125f6:	f04f 32ff 	mov.w	r2, #4294967295
 80125fa:	e7f7      	b.n	80125ec <__mcmp+0x28>

080125fc <__mdiff>:
 80125fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012600:	460c      	mov	r4, r1
 8012602:	4606      	mov	r6, r0
 8012604:	4611      	mov	r1, r2
 8012606:	4620      	mov	r0, r4
 8012608:	4617      	mov	r7, r2
 801260a:	f7ff ffdb 	bl	80125c4 <__mcmp>
 801260e:	1e05      	subs	r5, r0, #0
 8012610:	d110      	bne.n	8012634 <__mdiff+0x38>
 8012612:	4629      	mov	r1, r5
 8012614:	4630      	mov	r0, r6
 8012616:	f7ff fd0d 	bl	8012034 <_Balloc>
 801261a:	b930      	cbnz	r0, 801262a <__mdiff+0x2e>
 801261c:	4b39      	ldr	r3, [pc, #228]	; (8012704 <__mdiff+0x108>)
 801261e:	4602      	mov	r2, r0
 8012620:	f240 2132 	movw	r1, #562	; 0x232
 8012624:	4838      	ldr	r0, [pc, #224]	; (8012708 <__mdiff+0x10c>)
 8012626:	f000 fe69 	bl	80132fc <__assert_func>
 801262a:	2301      	movs	r3, #1
 801262c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012634:	bfa4      	itt	ge
 8012636:	463b      	movge	r3, r7
 8012638:	4627      	movge	r7, r4
 801263a:	4630      	mov	r0, r6
 801263c:	6879      	ldr	r1, [r7, #4]
 801263e:	bfa6      	itte	ge
 8012640:	461c      	movge	r4, r3
 8012642:	2500      	movge	r5, #0
 8012644:	2501      	movlt	r5, #1
 8012646:	f7ff fcf5 	bl	8012034 <_Balloc>
 801264a:	b920      	cbnz	r0, 8012656 <__mdiff+0x5a>
 801264c:	4b2d      	ldr	r3, [pc, #180]	; (8012704 <__mdiff+0x108>)
 801264e:	4602      	mov	r2, r0
 8012650:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012654:	e7e6      	b.n	8012624 <__mdiff+0x28>
 8012656:	693e      	ldr	r6, [r7, #16]
 8012658:	60c5      	str	r5, [r0, #12]
 801265a:	6925      	ldr	r5, [r4, #16]
 801265c:	f107 0114 	add.w	r1, r7, #20
 8012660:	f104 0914 	add.w	r9, r4, #20
 8012664:	f100 0e14 	add.w	lr, r0, #20
 8012668:	f107 0210 	add.w	r2, r7, #16
 801266c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012670:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012674:	46f2      	mov	sl, lr
 8012676:	2700      	movs	r7, #0
 8012678:	f859 3b04 	ldr.w	r3, [r9], #4
 801267c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012680:	fa1f f883 	uxth.w	r8, r3
 8012684:	fa17 f78b 	uxtah	r7, r7, fp
 8012688:	0c1b      	lsrs	r3, r3, #16
 801268a:	eba7 0808 	sub.w	r8, r7, r8
 801268e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012692:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012696:	fa1f f888 	uxth.w	r8, r8
 801269a:	141f      	asrs	r7, r3, #16
 801269c:	454d      	cmp	r5, r9
 801269e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80126a2:	f84a 3b04 	str.w	r3, [sl], #4
 80126a6:	d8e7      	bhi.n	8012678 <__mdiff+0x7c>
 80126a8:	1b2b      	subs	r3, r5, r4
 80126aa:	3b15      	subs	r3, #21
 80126ac:	f023 0303 	bic.w	r3, r3, #3
 80126b0:	3304      	adds	r3, #4
 80126b2:	3415      	adds	r4, #21
 80126b4:	42a5      	cmp	r5, r4
 80126b6:	bf38      	it	cc
 80126b8:	2304      	movcc	r3, #4
 80126ba:	4419      	add	r1, r3
 80126bc:	4473      	add	r3, lr
 80126be:	469e      	mov	lr, r3
 80126c0:	460d      	mov	r5, r1
 80126c2:	4565      	cmp	r5, ip
 80126c4:	d30e      	bcc.n	80126e4 <__mdiff+0xe8>
 80126c6:	f10c 0203 	add.w	r2, ip, #3
 80126ca:	1a52      	subs	r2, r2, r1
 80126cc:	f022 0203 	bic.w	r2, r2, #3
 80126d0:	3903      	subs	r1, #3
 80126d2:	458c      	cmp	ip, r1
 80126d4:	bf38      	it	cc
 80126d6:	2200      	movcc	r2, #0
 80126d8:	441a      	add	r2, r3
 80126da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80126de:	b17b      	cbz	r3, 8012700 <__mdiff+0x104>
 80126e0:	6106      	str	r6, [r0, #16]
 80126e2:	e7a5      	b.n	8012630 <__mdiff+0x34>
 80126e4:	f855 8b04 	ldr.w	r8, [r5], #4
 80126e8:	fa17 f488 	uxtah	r4, r7, r8
 80126ec:	1422      	asrs	r2, r4, #16
 80126ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80126f2:	b2a4      	uxth	r4, r4
 80126f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80126f8:	f84e 4b04 	str.w	r4, [lr], #4
 80126fc:	1417      	asrs	r7, r2, #16
 80126fe:	e7e0      	b.n	80126c2 <__mdiff+0xc6>
 8012700:	3e01      	subs	r6, #1
 8012702:	e7ea      	b.n	80126da <__mdiff+0xde>
 8012704:	08015008 	.word	0x08015008
 8012708:	080150af 	.word	0x080150af

0801270c <__ulp>:
 801270c:	b082      	sub	sp, #8
 801270e:	ed8d 0b00 	vstr	d0, [sp]
 8012712:	9b01      	ldr	r3, [sp, #4]
 8012714:	4912      	ldr	r1, [pc, #72]	; (8012760 <__ulp+0x54>)
 8012716:	4019      	ands	r1, r3
 8012718:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801271c:	2900      	cmp	r1, #0
 801271e:	dd05      	ble.n	801272c <__ulp+0x20>
 8012720:	2200      	movs	r2, #0
 8012722:	460b      	mov	r3, r1
 8012724:	ec43 2b10 	vmov	d0, r2, r3
 8012728:	b002      	add	sp, #8
 801272a:	4770      	bx	lr
 801272c:	4249      	negs	r1, r1
 801272e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012732:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012736:	f04f 0200 	mov.w	r2, #0
 801273a:	f04f 0300 	mov.w	r3, #0
 801273e:	da04      	bge.n	801274a <__ulp+0x3e>
 8012740:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012744:	fa41 f300 	asr.w	r3, r1, r0
 8012748:	e7ec      	b.n	8012724 <__ulp+0x18>
 801274a:	f1a0 0114 	sub.w	r1, r0, #20
 801274e:	291e      	cmp	r1, #30
 8012750:	bfda      	itte	le
 8012752:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012756:	fa20 f101 	lsrle.w	r1, r0, r1
 801275a:	2101      	movgt	r1, #1
 801275c:	460a      	mov	r2, r1
 801275e:	e7e1      	b.n	8012724 <__ulp+0x18>
 8012760:	7ff00000 	.word	0x7ff00000

08012764 <__b2d>:
 8012764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012766:	6905      	ldr	r5, [r0, #16]
 8012768:	f100 0714 	add.w	r7, r0, #20
 801276c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012770:	1f2e      	subs	r6, r5, #4
 8012772:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012776:	4620      	mov	r0, r4
 8012778:	f7ff fd52 	bl	8012220 <__hi0bits>
 801277c:	f1c0 0320 	rsb	r3, r0, #32
 8012780:	280a      	cmp	r0, #10
 8012782:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012800 <__b2d+0x9c>
 8012786:	600b      	str	r3, [r1, #0]
 8012788:	dc14      	bgt.n	80127b4 <__b2d+0x50>
 801278a:	f1c0 0e0b 	rsb	lr, r0, #11
 801278e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012792:	42b7      	cmp	r7, r6
 8012794:	ea41 030c 	orr.w	r3, r1, ip
 8012798:	bf34      	ite	cc
 801279a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801279e:	2100      	movcs	r1, #0
 80127a0:	3015      	adds	r0, #21
 80127a2:	fa04 f000 	lsl.w	r0, r4, r0
 80127a6:	fa21 f10e 	lsr.w	r1, r1, lr
 80127aa:	ea40 0201 	orr.w	r2, r0, r1
 80127ae:	ec43 2b10 	vmov	d0, r2, r3
 80127b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127b4:	42b7      	cmp	r7, r6
 80127b6:	bf3a      	itte	cc
 80127b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80127bc:	f1a5 0608 	subcc.w	r6, r5, #8
 80127c0:	2100      	movcs	r1, #0
 80127c2:	380b      	subs	r0, #11
 80127c4:	d017      	beq.n	80127f6 <__b2d+0x92>
 80127c6:	f1c0 0c20 	rsb	ip, r0, #32
 80127ca:	fa04 f500 	lsl.w	r5, r4, r0
 80127ce:	42be      	cmp	r6, r7
 80127d0:	fa21 f40c 	lsr.w	r4, r1, ip
 80127d4:	ea45 0504 	orr.w	r5, r5, r4
 80127d8:	bf8c      	ite	hi
 80127da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80127de:	2400      	movls	r4, #0
 80127e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80127e4:	fa01 f000 	lsl.w	r0, r1, r0
 80127e8:	fa24 f40c 	lsr.w	r4, r4, ip
 80127ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80127f0:	ea40 0204 	orr.w	r2, r0, r4
 80127f4:	e7db      	b.n	80127ae <__b2d+0x4a>
 80127f6:	ea44 030c 	orr.w	r3, r4, ip
 80127fa:	460a      	mov	r2, r1
 80127fc:	e7d7      	b.n	80127ae <__b2d+0x4a>
 80127fe:	bf00      	nop
 8012800:	3ff00000 	.word	0x3ff00000

08012804 <__d2b>:
 8012804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012808:	4689      	mov	r9, r1
 801280a:	2101      	movs	r1, #1
 801280c:	ec57 6b10 	vmov	r6, r7, d0
 8012810:	4690      	mov	r8, r2
 8012812:	f7ff fc0f 	bl	8012034 <_Balloc>
 8012816:	4604      	mov	r4, r0
 8012818:	b930      	cbnz	r0, 8012828 <__d2b+0x24>
 801281a:	4602      	mov	r2, r0
 801281c:	4b25      	ldr	r3, [pc, #148]	; (80128b4 <__d2b+0xb0>)
 801281e:	4826      	ldr	r0, [pc, #152]	; (80128b8 <__d2b+0xb4>)
 8012820:	f240 310a 	movw	r1, #778	; 0x30a
 8012824:	f000 fd6a 	bl	80132fc <__assert_func>
 8012828:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801282c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012830:	bb35      	cbnz	r5, 8012880 <__d2b+0x7c>
 8012832:	2e00      	cmp	r6, #0
 8012834:	9301      	str	r3, [sp, #4]
 8012836:	d028      	beq.n	801288a <__d2b+0x86>
 8012838:	4668      	mov	r0, sp
 801283a:	9600      	str	r6, [sp, #0]
 801283c:	f7ff fd10 	bl	8012260 <__lo0bits>
 8012840:	9900      	ldr	r1, [sp, #0]
 8012842:	b300      	cbz	r0, 8012886 <__d2b+0x82>
 8012844:	9a01      	ldr	r2, [sp, #4]
 8012846:	f1c0 0320 	rsb	r3, r0, #32
 801284a:	fa02 f303 	lsl.w	r3, r2, r3
 801284e:	430b      	orrs	r3, r1
 8012850:	40c2      	lsrs	r2, r0
 8012852:	6163      	str	r3, [r4, #20]
 8012854:	9201      	str	r2, [sp, #4]
 8012856:	9b01      	ldr	r3, [sp, #4]
 8012858:	61a3      	str	r3, [r4, #24]
 801285a:	2b00      	cmp	r3, #0
 801285c:	bf14      	ite	ne
 801285e:	2202      	movne	r2, #2
 8012860:	2201      	moveq	r2, #1
 8012862:	6122      	str	r2, [r4, #16]
 8012864:	b1d5      	cbz	r5, 801289c <__d2b+0x98>
 8012866:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801286a:	4405      	add	r5, r0
 801286c:	f8c9 5000 	str.w	r5, [r9]
 8012870:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012874:	f8c8 0000 	str.w	r0, [r8]
 8012878:	4620      	mov	r0, r4
 801287a:	b003      	add	sp, #12
 801287c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012884:	e7d5      	b.n	8012832 <__d2b+0x2e>
 8012886:	6161      	str	r1, [r4, #20]
 8012888:	e7e5      	b.n	8012856 <__d2b+0x52>
 801288a:	a801      	add	r0, sp, #4
 801288c:	f7ff fce8 	bl	8012260 <__lo0bits>
 8012890:	9b01      	ldr	r3, [sp, #4]
 8012892:	6163      	str	r3, [r4, #20]
 8012894:	2201      	movs	r2, #1
 8012896:	6122      	str	r2, [r4, #16]
 8012898:	3020      	adds	r0, #32
 801289a:	e7e3      	b.n	8012864 <__d2b+0x60>
 801289c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128a4:	f8c9 0000 	str.w	r0, [r9]
 80128a8:	6918      	ldr	r0, [r3, #16]
 80128aa:	f7ff fcb9 	bl	8012220 <__hi0bits>
 80128ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128b2:	e7df      	b.n	8012874 <__d2b+0x70>
 80128b4:	08015008 	.word	0x08015008
 80128b8:	080150af 	.word	0x080150af

080128bc <__ratio>:
 80128bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c0:	4688      	mov	r8, r1
 80128c2:	4669      	mov	r1, sp
 80128c4:	4681      	mov	r9, r0
 80128c6:	f7ff ff4d 	bl	8012764 <__b2d>
 80128ca:	a901      	add	r1, sp, #4
 80128cc:	4640      	mov	r0, r8
 80128ce:	ec55 4b10 	vmov	r4, r5, d0
 80128d2:	f7ff ff47 	bl	8012764 <__b2d>
 80128d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80128da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80128de:	eba3 0c02 	sub.w	ip, r3, r2
 80128e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80128e6:	1a9b      	subs	r3, r3, r2
 80128e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80128ec:	ec51 0b10 	vmov	r0, r1, d0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	bfd6      	itet	le
 80128f4:	460a      	movle	r2, r1
 80128f6:	462a      	movgt	r2, r5
 80128f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80128fc:	468b      	mov	fp, r1
 80128fe:	462f      	mov	r7, r5
 8012900:	bfd4      	ite	le
 8012902:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012906:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801290a:	4620      	mov	r0, r4
 801290c:	ee10 2a10 	vmov	r2, s0
 8012910:	465b      	mov	r3, fp
 8012912:	4639      	mov	r1, r7
 8012914:	f7ed ffb2 	bl	800087c <__aeabi_ddiv>
 8012918:	ec41 0b10 	vmov	d0, r0, r1
 801291c:	b003      	add	sp, #12
 801291e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012922 <__copybits>:
 8012922:	3901      	subs	r1, #1
 8012924:	b570      	push	{r4, r5, r6, lr}
 8012926:	1149      	asrs	r1, r1, #5
 8012928:	6914      	ldr	r4, [r2, #16]
 801292a:	3101      	adds	r1, #1
 801292c:	f102 0314 	add.w	r3, r2, #20
 8012930:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012934:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012938:	1f05      	subs	r5, r0, #4
 801293a:	42a3      	cmp	r3, r4
 801293c:	d30c      	bcc.n	8012958 <__copybits+0x36>
 801293e:	1aa3      	subs	r3, r4, r2
 8012940:	3b11      	subs	r3, #17
 8012942:	f023 0303 	bic.w	r3, r3, #3
 8012946:	3211      	adds	r2, #17
 8012948:	42a2      	cmp	r2, r4
 801294a:	bf88      	it	hi
 801294c:	2300      	movhi	r3, #0
 801294e:	4418      	add	r0, r3
 8012950:	2300      	movs	r3, #0
 8012952:	4288      	cmp	r0, r1
 8012954:	d305      	bcc.n	8012962 <__copybits+0x40>
 8012956:	bd70      	pop	{r4, r5, r6, pc}
 8012958:	f853 6b04 	ldr.w	r6, [r3], #4
 801295c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012960:	e7eb      	b.n	801293a <__copybits+0x18>
 8012962:	f840 3b04 	str.w	r3, [r0], #4
 8012966:	e7f4      	b.n	8012952 <__copybits+0x30>

08012968 <__any_on>:
 8012968:	f100 0214 	add.w	r2, r0, #20
 801296c:	6900      	ldr	r0, [r0, #16]
 801296e:	114b      	asrs	r3, r1, #5
 8012970:	4298      	cmp	r0, r3
 8012972:	b510      	push	{r4, lr}
 8012974:	db11      	blt.n	801299a <__any_on+0x32>
 8012976:	dd0a      	ble.n	801298e <__any_on+0x26>
 8012978:	f011 011f 	ands.w	r1, r1, #31
 801297c:	d007      	beq.n	801298e <__any_on+0x26>
 801297e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012982:	fa24 f001 	lsr.w	r0, r4, r1
 8012986:	fa00 f101 	lsl.w	r1, r0, r1
 801298a:	428c      	cmp	r4, r1
 801298c:	d10b      	bne.n	80129a6 <__any_on+0x3e>
 801298e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012992:	4293      	cmp	r3, r2
 8012994:	d803      	bhi.n	801299e <__any_on+0x36>
 8012996:	2000      	movs	r0, #0
 8012998:	bd10      	pop	{r4, pc}
 801299a:	4603      	mov	r3, r0
 801299c:	e7f7      	b.n	801298e <__any_on+0x26>
 801299e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80129a2:	2900      	cmp	r1, #0
 80129a4:	d0f5      	beq.n	8012992 <__any_on+0x2a>
 80129a6:	2001      	movs	r0, #1
 80129a8:	e7f6      	b.n	8012998 <__any_on+0x30>

080129aa <_calloc_r>:
 80129aa:	b513      	push	{r0, r1, r4, lr}
 80129ac:	434a      	muls	r2, r1
 80129ae:	4611      	mov	r1, r2
 80129b0:	9201      	str	r2, [sp, #4]
 80129b2:	f7fd fcf9 	bl	80103a8 <_malloc_r>
 80129b6:	4604      	mov	r4, r0
 80129b8:	b118      	cbz	r0, 80129c2 <_calloc_r+0x18>
 80129ba:	9a01      	ldr	r2, [sp, #4]
 80129bc:	2100      	movs	r1, #0
 80129be:	f7fd fc9b 	bl	80102f8 <memset>
 80129c2:	4620      	mov	r0, r4
 80129c4:	b002      	add	sp, #8
 80129c6:	bd10      	pop	{r4, pc}

080129c8 <_realloc_r>:
 80129c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ca:	4607      	mov	r7, r0
 80129cc:	4614      	mov	r4, r2
 80129ce:	460e      	mov	r6, r1
 80129d0:	b921      	cbnz	r1, 80129dc <_realloc_r+0x14>
 80129d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80129d6:	4611      	mov	r1, r2
 80129d8:	f7fd bce6 	b.w	80103a8 <_malloc_r>
 80129dc:	b922      	cbnz	r2, 80129e8 <_realloc_r+0x20>
 80129de:	f7fd fc93 	bl	8010308 <_free_r>
 80129e2:	4625      	mov	r5, r4
 80129e4:	4628      	mov	r0, r5
 80129e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129e8:	f000 fcf4 	bl	80133d4 <_malloc_usable_size_r>
 80129ec:	42a0      	cmp	r0, r4
 80129ee:	d20f      	bcs.n	8012a10 <_realloc_r+0x48>
 80129f0:	4621      	mov	r1, r4
 80129f2:	4638      	mov	r0, r7
 80129f4:	f7fd fcd8 	bl	80103a8 <_malloc_r>
 80129f8:	4605      	mov	r5, r0
 80129fa:	2800      	cmp	r0, #0
 80129fc:	d0f2      	beq.n	80129e4 <_realloc_r+0x1c>
 80129fe:	4631      	mov	r1, r6
 8012a00:	4622      	mov	r2, r4
 8012a02:	f7fd fc6b 	bl	80102dc <memcpy>
 8012a06:	4631      	mov	r1, r6
 8012a08:	4638      	mov	r0, r7
 8012a0a:	f7fd fc7d 	bl	8010308 <_free_r>
 8012a0e:	e7e9      	b.n	80129e4 <_realloc_r+0x1c>
 8012a10:	4635      	mov	r5, r6
 8012a12:	e7e7      	b.n	80129e4 <_realloc_r+0x1c>

08012a14 <__ssputs_r>:
 8012a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a18:	688e      	ldr	r6, [r1, #8]
 8012a1a:	429e      	cmp	r6, r3
 8012a1c:	4682      	mov	sl, r0
 8012a1e:	460c      	mov	r4, r1
 8012a20:	4690      	mov	r8, r2
 8012a22:	461f      	mov	r7, r3
 8012a24:	d838      	bhi.n	8012a98 <__ssputs_r+0x84>
 8012a26:	898a      	ldrh	r2, [r1, #12]
 8012a28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012a2c:	d032      	beq.n	8012a94 <__ssputs_r+0x80>
 8012a2e:	6825      	ldr	r5, [r4, #0]
 8012a30:	6909      	ldr	r1, [r1, #16]
 8012a32:	eba5 0901 	sub.w	r9, r5, r1
 8012a36:	6965      	ldr	r5, [r4, #20]
 8012a38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a40:	3301      	adds	r3, #1
 8012a42:	444b      	add	r3, r9
 8012a44:	106d      	asrs	r5, r5, #1
 8012a46:	429d      	cmp	r5, r3
 8012a48:	bf38      	it	cc
 8012a4a:	461d      	movcc	r5, r3
 8012a4c:	0553      	lsls	r3, r2, #21
 8012a4e:	d531      	bpl.n	8012ab4 <__ssputs_r+0xa0>
 8012a50:	4629      	mov	r1, r5
 8012a52:	f7fd fca9 	bl	80103a8 <_malloc_r>
 8012a56:	4606      	mov	r6, r0
 8012a58:	b950      	cbnz	r0, 8012a70 <__ssputs_r+0x5c>
 8012a5a:	230c      	movs	r3, #12
 8012a5c:	f8ca 3000 	str.w	r3, [sl]
 8012a60:	89a3      	ldrh	r3, [r4, #12]
 8012a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a66:	81a3      	strh	r3, [r4, #12]
 8012a68:	f04f 30ff 	mov.w	r0, #4294967295
 8012a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a70:	6921      	ldr	r1, [r4, #16]
 8012a72:	464a      	mov	r2, r9
 8012a74:	f7fd fc32 	bl	80102dc <memcpy>
 8012a78:	89a3      	ldrh	r3, [r4, #12]
 8012a7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a82:	81a3      	strh	r3, [r4, #12]
 8012a84:	6126      	str	r6, [r4, #16]
 8012a86:	6165      	str	r5, [r4, #20]
 8012a88:	444e      	add	r6, r9
 8012a8a:	eba5 0509 	sub.w	r5, r5, r9
 8012a8e:	6026      	str	r6, [r4, #0]
 8012a90:	60a5      	str	r5, [r4, #8]
 8012a92:	463e      	mov	r6, r7
 8012a94:	42be      	cmp	r6, r7
 8012a96:	d900      	bls.n	8012a9a <__ssputs_r+0x86>
 8012a98:	463e      	mov	r6, r7
 8012a9a:	4632      	mov	r2, r6
 8012a9c:	6820      	ldr	r0, [r4, #0]
 8012a9e:	4641      	mov	r1, r8
 8012aa0:	f000 fc7e 	bl	80133a0 <memmove>
 8012aa4:	68a3      	ldr	r3, [r4, #8]
 8012aa6:	6822      	ldr	r2, [r4, #0]
 8012aa8:	1b9b      	subs	r3, r3, r6
 8012aaa:	4432      	add	r2, r6
 8012aac:	60a3      	str	r3, [r4, #8]
 8012aae:	6022      	str	r2, [r4, #0]
 8012ab0:	2000      	movs	r0, #0
 8012ab2:	e7db      	b.n	8012a6c <__ssputs_r+0x58>
 8012ab4:	462a      	mov	r2, r5
 8012ab6:	f7ff ff87 	bl	80129c8 <_realloc_r>
 8012aba:	4606      	mov	r6, r0
 8012abc:	2800      	cmp	r0, #0
 8012abe:	d1e1      	bne.n	8012a84 <__ssputs_r+0x70>
 8012ac0:	6921      	ldr	r1, [r4, #16]
 8012ac2:	4650      	mov	r0, sl
 8012ac4:	f7fd fc20 	bl	8010308 <_free_r>
 8012ac8:	e7c7      	b.n	8012a5a <__ssputs_r+0x46>
	...

08012acc <_svfiprintf_r>:
 8012acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ad0:	4698      	mov	r8, r3
 8012ad2:	898b      	ldrh	r3, [r1, #12]
 8012ad4:	061b      	lsls	r3, r3, #24
 8012ad6:	b09d      	sub	sp, #116	; 0x74
 8012ad8:	4607      	mov	r7, r0
 8012ada:	460d      	mov	r5, r1
 8012adc:	4614      	mov	r4, r2
 8012ade:	d50e      	bpl.n	8012afe <_svfiprintf_r+0x32>
 8012ae0:	690b      	ldr	r3, [r1, #16]
 8012ae2:	b963      	cbnz	r3, 8012afe <_svfiprintf_r+0x32>
 8012ae4:	2140      	movs	r1, #64	; 0x40
 8012ae6:	f7fd fc5f 	bl	80103a8 <_malloc_r>
 8012aea:	6028      	str	r0, [r5, #0]
 8012aec:	6128      	str	r0, [r5, #16]
 8012aee:	b920      	cbnz	r0, 8012afa <_svfiprintf_r+0x2e>
 8012af0:	230c      	movs	r3, #12
 8012af2:	603b      	str	r3, [r7, #0]
 8012af4:	f04f 30ff 	mov.w	r0, #4294967295
 8012af8:	e0d1      	b.n	8012c9e <_svfiprintf_r+0x1d2>
 8012afa:	2340      	movs	r3, #64	; 0x40
 8012afc:	616b      	str	r3, [r5, #20]
 8012afe:	2300      	movs	r3, #0
 8012b00:	9309      	str	r3, [sp, #36]	; 0x24
 8012b02:	2320      	movs	r3, #32
 8012b04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b08:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b0c:	2330      	movs	r3, #48	; 0x30
 8012b0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012cb8 <_svfiprintf_r+0x1ec>
 8012b12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b16:	f04f 0901 	mov.w	r9, #1
 8012b1a:	4623      	mov	r3, r4
 8012b1c:	469a      	mov	sl, r3
 8012b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b22:	b10a      	cbz	r2, 8012b28 <_svfiprintf_r+0x5c>
 8012b24:	2a25      	cmp	r2, #37	; 0x25
 8012b26:	d1f9      	bne.n	8012b1c <_svfiprintf_r+0x50>
 8012b28:	ebba 0b04 	subs.w	fp, sl, r4
 8012b2c:	d00b      	beq.n	8012b46 <_svfiprintf_r+0x7a>
 8012b2e:	465b      	mov	r3, fp
 8012b30:	4622      	mov	r2, r4
 8012b32:	4629      	mov	r1, r5
 8012b34:	4638      	mov	r0, r7
 8012b36:	f7ff ff6d 	bl	8012a14 <__ssputs_r>
 8012b3a:	3001      	adds	r0, #1
 8012b3c:	f000 80aa 	beq.w	8012c94 <_svfiprintf_r+0x1c8>
 8012b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b42:	445a      	add	r2, fp
 8012b44:	9209      	str	r2, [sp, #36]	; 0x24
 8012b46:	f89a 3000 	ldrb.w	r3, [sl]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	f000 80a2 	beq.w	8012c94 <_svfiprintf_r+0x1c8>
 8012b50:	2300      	movs	r3, #0
 8012b52:	f04f 32ff 	mov.w	r2, #4294967295
 8012b56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b5a:	f10a 0a01 	add.w	sl, sl, #1
 8012b5e:	9304      	str	r3, [sp, #16]
 8012b60:	9307      	str	r3, [sp, #28]
 8012b62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b66:	931a      	str	r3, [sp, #104]	; 0x68
 8012b68:	4654      	mov	r4, sl
 8012b6a:	2205      	movs	r2, #5
 8012b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b70:	4851      	ldr	r0, [pc, #324]	; (8012cb8 <_svfiprintf_r+0x1ec>)
 8012b72:	f7ed fb4d 	bl	8000210 <memchr>
 8012b76:	9a04      	ldr	r2, [sp, #16]
 8012b78:	b9d8      	cbnz	r0, 8012bb2 <_svfiprintf_r+0xe6>
 8012b7a:	06d0      	lsls	r0, r2, #27
 8012b7c:	bf44      	itt	mi
 8012b7e:	2320      	movmi	r3, #32
 8012b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b84:	0711      	lsls	r1, r2, #28
 8012b86:	bf44      	itt	mi
 8012b88:	232b      	movmi	r3, #43	; 0x2b
 8012b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8012b92:	2b2a      	cmp	r3, #42	; 0x2a
 8012b94:	d015      	beq.n	8012bc2 <_svfiprintf_r+0xf6>
 8012b96:	9a07      	ldr	r2, [sp, #28]
 8012b98:	4654      	mov	r4, sl
 8012b9a:	2000      	movs	r0, #0
 8012b9c:	f04f 0c0a 	mov.w	ip, #10
 8012ba0:	4621      	mov	r1, r4
 8012ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ba6:	3b30      	subs	r3, #48	; 0x30
 8012ba8:	2b09      	cmp	r3, #9
 8012baa:	d94e      	bls.n	8012c4a <_svfiprintf_r+0x17e>
 8012bac:	b1b0      	cbz	r0, 8012bdc <_svfiprintf_r+0x110>
 8012bae:	9207      	str	r2, [sp, #28]
 8012bb0:	e014      	b.n	8012bdc <_svfiprintf_r+0x110>
 8012bb2:	eba0 0308 	sub.w	r3, r0, r8
 8012bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	9304      	str	r3, [sp, #16]
 8012bbe:	46a2      	mov	sl, r4
 8012bc0:	e7d2      	b.n	8012b68 <_svfiprintf_r+0x9c>
 8012bc2:	9b03      	ldr	r3, [sp, #12]
 8012bc4:	1d19      	adds	r1, r3, #4
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	9103      	str	r1, [sp, #12]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	bfbb      	ittet	lt
 8012bce:	425b      	neglt	r3, r3
 8012bd0:	f042 0202 	orrlt.w	r2, r2, #2
 8012bd4:	9307      	strge	r3, [sp, #28]
 8012bd6:	9307      	strlt	r3, [sp, #28]
 8012bd8:	bfb8      	it	lt
 8012bda:	9204      	strlt	r2, [sp, #16]
 8012bdc:	7823      	ldrb	r3, [r4, #0]
 8012bde:	2b2e      	cmp	r3, #46	; 0x2e
 8012be0:	d10c      	bne.n	8012bfc <_svfiprintf_r+0x130>
 8012be2:	7863      	ldrb	r3, [r4, #1]
 8012be4:	2b2a      	cmp	r3, #42	; 0x2a
 8012be6:	d135      	bne.n	8012c54 <_svfiprintf_r+0x188>
 8012be8:	9b03      	ldr	r3, [sp, #12]
 8012bea:	1d1a      	adds	r2, r3, #4
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	9203      	str	r2, [sp, #12]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	bfb8      	it	lt
 8012bf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bf8:	3402      	adds	r4, #2
 8012bfa:	9305      	str	r3, [sp, #20]
 8012bfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012cc8 <_svfiprintf_r+0x1fc>
 8012c00:	7821      	ldrb	r1, [r4, #0]
 8012c02:	2203      	movs	r2, #3
 8012c04:	4650      	mov	r0, sl
 8012c06:	f7ed fb03 	bl	8000210 <memchr>
 8012c0a:	b140      	cbz	r0, 8012c1e <_svfiprintf_r+0x152>
 8012c0c:	2340      	movs	r3, #64	; 0x40
 8012c0e:	eba0 000a 	sub.w	r0, r0, sl
 8012c12:	fa03 f000 	lsl.w	r0, r3, r0
 8012c16:	9b04      	ldr	r3, [sp, #16]
 8012c18:	4303      	orrs	r3, r0
 8012c1a:	3401      	adds	r4, #1
 8012c1c:	9304      	str	r3, [sp, #16]
 8012c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c22:	4826      	ldr	r0, [pc, #152]	; (8012cbc <_svfiprintf_r+0x1f0>)
 8012c24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c28:	2206      	movs	r2, #6
 8012c2a:	f7ed faf1 	bl	8000210 <memchr>
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	d038      	beq.n	8012ca4 <_svfiprintf_r+0x1d8>
 8012c32:	4b23      	ldr	r3, [pc, #140]	; (8012cc0 <_svfiprintf_r+0x1f4>)
 8012c34:	bb1b      	cbnz	r3, 8012c7e <_svfiprintf_r+0x1b2>
 8012c36:	9b03      	ldr	r3, [sp, #12]
 8012c38:	3307      	adds	r3, #7
 8012c3a:	f023 0307 	bic.w	r3, r3, #7
 8012c3e:	3308      	adds	r3, #8
 8012c40:	9303      	str	r3, [sp, #12]
 8012c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c44:	4433      	add	r3, r6
 8012c46:	9309      	str	r3, [sp, #36]	; 0x24
 8012c48:	e767      	b.n	8012b1a <_svfiprintf_r+0x4e>
 8012c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c4e:	460c      	mov	r4, r1
 8012c50:	2001      	movs	r0, #1
 8012c52:	e7a5      	b.n	8012ba0 <_svfiprintf_r+0xd4>
 8012c54:	2300      	movs	r3, #0
 8012c56:	3401      	adds	r4, #1
 8012c58:	9305      	str	r3, [sp, #20]
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	f04f 0c0a 	mov.w	ip, #10
 8012c60:	4620      	mov	r0, r4
 8012c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c66:	3a30      	subs	r2, #48	; 0x30
 8012c68:	2a09      	cmp	r2, #9
 8012c6a:	d903      	bls.n	8012c74 <_svfiprintf_r+0x1a8>
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d0c5      	beq.n	8012bfc <_svfiprintf_r+0x130>
 8012c70:	9105      	str	r1, [sp, #20]
 8012c72:	e7c3      	b.n	8012bfc <_svfiprintf_r+0x130>
 8012c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c78:	4604      	mov	r4, r0
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	e7f0      	b.n	8012c60 <_svfiprintf_r+0x194>
 8012c7e:	ab03      	add	r3, sp, #12
 8012c80:	9300      	str	r3, [sp, #0]
 8012c82:	462a      	mov	r2, r5
 8012c84:	4b0f      	ldr	r3, [pc, #60]	; (8012cc4 <_svfiprintf_r+0x1f8>)
 8012c86:	a904      	add	r1, sp, #16
 8012c88:	4638      	mov	r0, r7
 8012c8a:	f3af 8000 	nop.w
 8012c8e:	1c42      	adds	r2, r0, #1
 8012c90:	4606      	mov	r6, r0
 8012c92:	d1d6      	bne.n	8012c42 <_svfiprintf_r+0x176>
 8012c94:	89ab      	ldrh	r3, [r5, #12]
 8012c96:	065b      	lsls	r3, r3, #25
 8012c98:	f53f af2c 	bmi.w	8012af4 <_svfiprintf_r+0x28>
 8012c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c9e:	b01d      	add	sp, #116	; 0x74
 8012ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca4:	ab03      	add	r3, sp, #12
 8012ca6:	9300      	str	r3, [sp, #0]
 8012ca8:	462a      	mov	r2, r5
 8012caa:	4b06      	ldr	r3, [pc, #24]	; (8012cc4 <_svfiprintf_r+0x1f8>)
 8012cac:	a904      	add	r1, sp, #16
 8012cae:	4638      	mov	r0, r7
 8012cb0:	f000 f9d4 	bl	801305c <_printf_i>
 8012cb4:	e7eb      	b.n	8012c8e <_svfiprintf_r+0x1c2>
 8012cb6:	bf00      	nop
 8012cb8:	0801520c 	.word	0x0801520c
 8012cbc:	08015216 	.word	0x08015216
 8012cc0:	00000000 	.word	0x00000000
 8012cc4:	08012a15 	.word	0x08012a15
 8012cc8:	08015212 	.word	0x08015212

08012ccc <__sfputc_r>:
 8012ccc:	6893      	ldr	r3, [r2, #8]
 8012cce:	3b01      	subs	r3, #1
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	b410      	push	{r4}
 8012cd4:	6093      	str	r3, [r2, #8]
 8012cd6:	da08      	bge.n	8012cea <__sfputc_r+0x1e>
 8012cd8:	6994      	ldr	r4, [r2, #24]
 8012cda:	42a3      	cmp	r3, r4
 8012cdc:	db01      	blt.n	8012ce2 <__sfputc_r+0x16>
 8012cde:	290a      	cmp	r1, #10
 8012ce0:	d103      	bne.n	8012cea <__sfputc_r+0x1e>
 8012ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ce6:	f7fe bb05 	b.w	80112f4 <__swbuf_r>
 8012cea:	6813      	ldr	r3, [r2, #0]
 8012cec:	1c58      	adds	r0, r3, #1
 8012cee:	6010      	str	r0, [r2, #0]
 8012cf0:	7019      	strb	r1, [r3, #0]
 8012cf2:	4608      	mov	r0, r1
 8012cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cf8:	4770      	bx	lr

08012cfa <__sfputs_r>:
 8012cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cfc:	4606      	mov	r6, r0
 8012cfe:	460f      	mov	r7, r1
 8012d00:	4614      	mov	r4, r2
 8012d02:	18d5      	adds	r5, r2, r3
 8012d04:	42ac      	cmp	r4, r5
 8012d06:	d101      	bne.n	8012d0c <__sfputs_r+0x12>
 8012d08:	2000      	movs	r0, #0
 8012d0a:	e007      	b.n	8012d1c <__sfputs_r+0x22>
 8012d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d10:	463a      	mov	r2, r7
 8012d12:	4630      	mov	r0, r6
 8012d14:	f7ff ffda 	bl	8012ccc <__sfputc_r>
 8012d18:	1c43      	adds	r3, r0, #1
 8012d1a:	d1f3      	bne.n	8012d04 <__sfputs_r+0xa>
 8012d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012d20 <_vfiprintf_r>:
 8012d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d24:	460d      	mov	r5, r1
 8012d26:	b09d      	sub	sp, #116	; 0x74
 8012d28:	4614      	mov	r4, r2
 8012d2a:	4698      	mov	r8, r3
 8012d2c:	4606      	mov	r6, r0
 8012d2e:	b118      	cbz	r0, 8012d38 <_vfiprintf_r+0x18>
 8012d30:	6983      	ldr	r3, [r0, #24]
 8012d32:	b90b      	cbnz	r3, 8012d38 <_vfiprintf_r+0x18>
 8012d34:	f7fe fcda 	bl	80116ec <__sinit>
 8012d38:	4b89      	ldr	r3, [pc, #548]	; (8012f60 <_vfiprintf_r+0x240>)
 8012d3a:	429d      	cmp	r5, r3
 8012d3c:	d11b      	bne.n	8012d76 <_vfiprintf_r+0x56>
 8012d3e:	6875      	ldr	r5, [r6, #4]
 8012d40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d42:	07d9      	lsls	r1, r3, #31
 8012d44:	d405      	bmi.n	8012d52 <_vfiprintf_r+0x32>
 8012d46:	89ab      	ldrh	r3, [r5, #12]
 8012d48:	059a      	lsls	r2, r3, #22
 8012d4a:	d402      	bmi.n	8012d52 <_vfiprintf_r+0x32>
 8012d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d4e:	f7ff f8da 	bl	8011f06 <__retarget_lock_acquire_recursive>
 8012d52:	89ab      	ldrh	r3, [r5, #12]
 8012d54:	071b      	lsls	r3, r3, #28
 8012d56:	d501      	bpl.n	8012d5c <_vfiprintf_r+0x3c>
 8012d58:	692b      	ldr	r3, [r5, #16]
 8012d5a:	b9eb      	cbnz	r3, 8012d98 <_vfiprintf_r+0x78>
 8012d5c:	4629      	mov	r1, r5
 8012d5e:	4630      	mov	r0, r6
 8012d60:	f7fe fb2c 	bl	80113bc <__swsetup_r>
 8012d64:	b1c0      	cbz	r0, 8012d98 <_vfiprintf_r+0x78>
 8012d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d68:	07dc      	lsls	r4, r3, #31
 8012d6a:	d50e      	bpl.n	8012d8a <_vfiprintf_r+0x6a>
 8012d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d70:	b01d      	add	sp, #116	; 0x74
 8012d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d76:	4b7b      	ldr	r3, [pc, #492]	; (8012f64 <_vfiprintf_r+0x244>)
 8012d78:	429d      	cmp	r5, r3
 8012d7a:	d101      	bne.n	8012d80 <_vfiprintf_r+0x60>
 8012d7c:	68b5      	ldr	r5, [r6, #8]
 8012d7e:	e7df      	b.n	8012d40 <_vfiprintf_r+0x20>
 8012d80:	4b79      	ldr	r3, [pc, #484]	; (8012f68 <_vfiprintf_r+0x248>)
 8012d82:	429d      	cmp	r5, r3
 8012d84:	bf08      	it	eq
 8012d86:	68f5      	ldreq	r5, [r6, #12]
 8012d88:	e7da      	b.n	8012d40 <_vfiprintf_r+0x20>
 8012d8a:	89ab      	ldrh	r3, [r5, #12]
 8012d8c:	0598      	lsls	r0, r3, #22
 8012d8e:	d4ed      	bmi.n	8012d6c <_vfiprintf_r+0x4c>
 8012d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d92:	f7ff f8b9 	bl	8011f08 <__retarget_lock_release_recursive>
 8012d96:	e7e9      	b.n	8012d6c <_vfiprintf_r+0x4c>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8012d9c:	2320      	movs	r3, #32
 8012d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012da6:	2330      	movs	r3, #48	; 0x30
 8012da8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012f6c <_vfiprintf_r+0x24c>
 8012dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012db0:	f04f 0901 	mov.w	r9, #1
 8012db4:	4623      	mov	r3, r4
 8012db6:	469a      	mov	sl, r3
 8012db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dbc:	b10a      	cbz	r2, 8012dc2 <_vfiprintf_r+0xa2>
 8012dbe:	2a25      	cmp	r2, #37	; 0x25
 8012dc0:	d1f9      	bne.n	8012db6 <_vfiprintf_r+0x96>
 8012dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8012dc6:	d00b      	beq.n	8012de0 <_vfiprintf_r+0xc0>
 8012dc8:	465b      	mov	r3, fp
 8012dca:	4622      	mov	r2, r4
 8012dcc:	4629      	mov	r1, r5
 8012dce:	4630      	mov	r0, r6
 8012dd0:	f7ff ff93 	bl	8012cfa <__sfputs_r>
 8012dd4:	3001      	adds	r0, #1
 8012dd6:	f000 80aa 	beq.w	8012f2e <_vfiprintf_r+0x20e>
 8012dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ddc:	445a      	add	r2, fp
 8012dde:	9209      	str	r2, [sp, #36]	; 0x24
 8012de0:	f89a 3000 	ldrb.w	r3, [sl]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	f000 80a2 	beq.w	8012f2e <_vfiprintf_r+0x20e>
 8012dea:	2300      	movs	r3, #0
 8012dec:	f04f 32ff 	mov.w	r2, #4294967295
 8012df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012df4:	f10a 0a01 	add.w	sl, sl, #1
 8012df8:	9304      	str	r3, [sp, #16]
 8012dfa:	9307      	str	r3, [sp, #28]
 8012dfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e00:	931a      	str	r3, [sp, #104]	; 0x68
 8012e02:	4654      	mov	r4, sl
 8012e04:	2205      	movs	r2, #5
 8012e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e0a:	4858      	ldr	r0, [pc, #352]	; (8012f6c <_vfiprintf_r+0x24c>)
 8012e0c:	f7ed fa00 	bl	8000210 <memchr>
 8012e10:	9a04      	ldr	r2, [sp, #16]
 8012e12:	b9d8      	cbnz	r0, 8012e4c <_vfiprintf_r+0x12c>
 8012e14:	06d1      	lsls	r1, r2, #27
 8012e16:	bf44      	itt	mi
 8012e18:	2320      	movmi	r3, #32
 8012e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e1e:	0713      	lsls	r3, r2, #28
 8012e20:	bf44      	itt	mi
 8012e22:	232b      	movmi	r3, #43	; 0x2b
 8012e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e28:	f89a 3000 	ldrb.w	r3, [sl]
 8012e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8012e2e:	d015      	beq.n	8012e5c <_vfiprintf_r+0x13c>
 8012e30:	9a07      	ldr	r2, [sp, #28]
 8012e32:	4654      	mov	r4, sl
 8012e34:	2000      	movs	r0, #0
 8012e36:	f04f 0c0a 	mov.w	ip, #10
 8012e3a:	4621      	mov	r1, r4
 8012e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e40:	3b30      	subs	r3, #48	; 0x30
 8012e42:	2b09      	cmp	r3, #9
 8012e44:	d94e      	bls.n	8012ee4 <_vfiprintf_r+0x1c4>
 8012e46:	b1b0      	cbz	r0, 8012e76 <_vfiprintf_r+0x156>
 8012e48:	9207      	str	r2, [sp, #28]
 8012e4a:	e014      	b.n	8012e76 <_vfiprintf_r+0x156>
 8012e4c:	eba0 0308 	sub.w	r3, r0, r8
 8012e50:	fa09 f303 	lsl.w	r3, r9, r3
 8012e54:	4313      	orrs	r3, r2
 8012e56:	9304      	str	r3, [sp, #16]
 8012e58:	46a2      	mov	sl, r4
 8012e5a:	e7d2      	b.n	8012e02 <_vfiprintf_r+0xe2>
 8012e5c:	9b03      	ldr	r3, [sp, #12]
 8012e5e:	1d19      	adds	r1, r3, #4
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	9103      	str	r1, [sp, #12]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	bfbb      	ittet	lt
 8012e68:	425b      	neglt	r3, r3
 8012e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8012e6e:	9307      	strge	r3, [sp, #28]
 8012e70:	9307      	strlt	r3, [sp, #28]
 8012e72:	bfb8      	it	lt
 8012e74:	9204      	strlt	r2, [sp, #16]
 8012e76:	7823      	ldrb	r3, [r4, #0]
 8012e78:	2b2e      	cmp	r3, #46	; 0x2e
 8012e7a:	d10c      	bne.n	8012e96 <_vfiprintf_r+0x176>
 8012e7c:	7863      	ldrb	r3, [r4, #1]
 8012e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8012e80:	d135      	bne.n	8012eee <_vfiprintf_r+0x1ce>
 8012e82:	9b03      	ldr	r3, [sp, #12]
 8012e84:	1d1a      	adds	r2, r3, #4
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	9203      	str	r2, [sp, #12]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	bfb8      	it	lt
 8012e8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e92:	3402      	adds	r4, #2
 8012e94:	9305      	str	r3, [sp, #20]
 8012e96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012f7c <_vfiprintf_r+0x25c>
 8012e9a:	7821      	ldrb	r1, [r4, #0]
 8012e9c:	2203      	movs	r2, #3
 8012e9e:	4650      	mov	r0, sl
 8012ea0:	f7ed f9b6 	bl	8000210 <memchr>
 8012ea4:	b140      	cbz	r0, 8012eb8 <_vfiprintf_r+0x198>
 8012ea6:	2340      	movs	r3, #64	; 0x40
 8012ea8:	eba0 000a 	sub.w	r0, r0, sl
 8012eac:	fa03 f000 	lsl.w	r0, r3, r0
 8012eb0:	9b04      	ldr	r3, [sp, #16]
 8012eb2:	4303      	orrs	r3, r0
 8012eb4:	3401      	adds	r4, #1
 8012eb6:	9304      	str	r3, [sp, #16]
 8012eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ebc:	482c      	ldr	r0, [pc, #176]	; (8012f70 <_vfiprintf_r+0x250>)
 8012ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ec2:	2206      	movs	r2, #6
 8012ec4:	f7ed f9a4 	bl	8000210 <memchr>
 8012ec8:	2800      	cmp	r0, #0
 8012eca:	d03f      	beq.n	8012f4c <_vfiprintf_r+0x22c>
 8012ecc:	4b29      	ldr	r3, [pc, #164]	; (8012f74 <_vfiprintf_r+0x254>)
 8012ece:	bb1b      	cbnz	r3, 8012f18 <_vfiprintf_r+0x1f8>
 8012ed0:	9b03      	ldr	r3, [sp, #12]
 8012ed2:	3307      	adds	r3, #7
 8012ed4:	f023 0307 	bic.w	r3, r3, #7
 8012ed8:	3308      	adds	r3, #8
 8012eda:	9303      	str	r3, [sp, #12]
 8012edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ede:	443b      	add	r3, r7
 8012ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ee2:	e767      	b.n	8012db4 <_vfiprintf_r+0x94>
 8012ee4:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ee8:	460c      	mov	r4, r1
 8012eea:	2001      	movs	r0, #1
 8012eec:	e7a5      	b.n	8012e3a <_vfiprintf_r+0x11a>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	3401      	adds	r4, #1
 8012ef2:	9305      	str	r3, [sp, #20]
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	f04f 0c0a 	mov.w	ip, #10
 8012efa:	4620      	mov	r0, r4
 8012efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f00:	3a30      	subs	r2, #48	; 0x30
 8012f02:	2a09      	cmp	r2, #9
 8012f04:	d903      	bls.n	8012f0e <_vfiprintf_r+0x1ee>
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d0c5      	beq.n	8012e96 <_vfiprintf_r+0x176>
 8012f0a:	9105      	str	r1, [sp, #20]
 8012f0c:	e7c3      	b.n	8012e96 <_vfiprintf_r+0x176>
 8012f0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f12:	4604      	mov	r4, r0
 8012f14:	2301      	movs	r3, #1
 8012f16:	e7f0      	b.n	8012efa <_vfiprintf_r+0x1da>
 8012f18:	ab03      	add	r3, sp, #12
 8012f1a:	9300      	str	r3, [sp, #0]
 8012f1c:	462a      	mov	r2, r5
 8012f1e:	4b16      	ldr	r3, [pc, #88]	; (8012f78 <_vfiprintf_r+0x258>)
 8012f20:	a904      	add	r1, sp, #16
 8012f22:	4630      	mov	r0, r6
 8012f24:	f3af 8000 	nop.w
 8012f28:	4607      	mov	r7, r0
 8012f2a:	1c78      	adds	r0, r7, #1
 8012f2c:	d1d6      	bne.n	8012edc <_vfiprintf_r+0x1bc>
 8012f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f30:	07d9      	lsls	r1, r3, #31
 8012f32:	d405      	bmi.n	8012f40 <_vfiprintf_r+0x220>
 8012f34:	89ab      	ldrh	r3, [r5, #12]
 8012f36:	059a      	lsls	r2, r3, #22
 8012f38:	d402      	bmi.n	8012f40 <_vfiprintf_r+0x220>
 8012f3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f3c:	f7fe ffe4 	bl	8011f08 <__retarget_lock_release_recursive>
 8012f40:	89ab      	ldrh	r3, [r5, #12]
 8012f42:	065b      	lsls	r3, r3, #25
 8012f44:	f53f af12 	bmi.w	8012d6c <_vfiprintf_r+0x4c>
 8012f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f4a:	e711      	b.n	8012d70 <_vfiprintf_r+0x50>
 8012f4c:	ab03      	add	r3, sp, #12
 8012f4e:	9300      	str	r3, [sp, #0]
 8012f50:	462a      	mov	r2, r5
 8012f52:	4b09      	ldr	r3, [pc, #36]	; (8012f78 <_vfiprintf_r+0x258>)
 8012f54:	a904      	add	r1, sp, #16
 8012f56:	4630      	mov	r0, r6
 8012f58:	f000 f880 	bl	801305c <_printf_i>
 8012f5c:	e7e4      	b.n	8012f28 <_vfiprintf_r+0x208>
 8012f5e:	bf00      	nop
 8012f60:	08014fc8 	.word	0x08014fc8
 8012f64:	08014fe8 	.word	0x08014fe8
 8012f68:	08014fa8 	.word	0x08014fa8
 8012f6c:	0801520c 	.word	0x0801520c
 8012f70:	08015216 	.word	0x08015216
 8012f74:	00000000 	.word	0x00000000
 8012f78:	08012cfb 	.word	0x08012cfb
 8012f7c:	08015212 	.word	0x08015212

08012f80 <_printf_common>:
 8012f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f84:	4616      	mov	r6, r2
 8012f86:	4699      	mov	r9, r3
 8012f88:	688a      	ldr	r2, [r1, #8]
 8012f8a:	690b      	ldr	r3, [r1, #16]
 8012f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f90:	4293      	cmp	r3, r2
 8012f92:	bfb8      	it	lt
 8012f94:	4613      	movlt	r3, r2
 8012f96:	6033      	str	r3, [r6, #0]
 8012f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f9c:	4607      	mov	r7, r0
 8012f9e:	460c      	mov	r4, r1
 8012fa0:	b10a      	cbz	r2, 8012fa6 <_printf_common+0x26>
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	6033      	str	r3, [r6, #0]
 8012fa6:	6823      	ldr	r3, [r4, #0]
 8012fa8:	0699      	lsls	r1, r3, #26
 8012faa:	bf42      	ittt	mi
 8012fac:	6833      	ldrmi	r3, [r6, #0]
 8012fae:	3302      	addmi	r3, #2
 8012fb0:	6033      	strmi	r3, [r6, #0]
 8012fb2:	6825      	ldr	r5, [r4, #0]
 8012fb4:	f015 0506 	ands.w	r5, r5, #6
 8012fb8:	d106      	bne.n	8012fc8 <_printf_common+0x48>
 8012fba:	f104 0a19 	add.w	sl, r4, #25
 8012fbe:	68e3      	ldr	r3, [r4, #12]
 8012fc0:	6832      	ldr	r2, [r6, #0]
 8012fc2:	1a9b      	subs	r3, r3, r2
 8012fc4:	42ab      	cmp	r3, r5
 8012fc6:	dc26      	bgt.n	8013016 <_printf_common+0x96>
 8012fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012fcc:	1e13      	subs	r3, r2, #0
 8012fce:	6822      	ldr	r2, [r4, #0]
 8012fd0:	bf18      	it	ne
 8012fd2:	2301      	movne	r3, #1
 8012fd4:	0692      	lsls	r2, r2, #26
 8012fd6:	d42b      	bmi.n	8013030 <_printf_common+0xb0>
 8012fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012fdc:	4649      	mov	r1, r9
 8012fde:	4638      	mov	r0, r7
 8012fe0:	47c0      	blx	r8
 8012fe2:	3001      	adds	r0, #1
 8012fe4:	d01e      	beq.n	8013024 <_printf_common+0xa4>
 8012fe6:	6823      	ldr	r3, [r4, #0]
 8012fe8:	68e5      	ldr	r5, [r4, #12]
 8012fea:	6832      	ldr	r2, [r6, #0]
 8012fec:	f003 0306 	and.w	r3, r3, #6
 8012ff0:	2b04      	cmp	r3, #4
 8012ff2:	bf08      	it	eq
 8012ff4:	1aad      	subeq	r5, r5, r2
 8012ff6:	68a3      	ldr	r3, [r4, #8]
 8012ff8:	6922      	ldr	r2, [r4, #16]
 8012ffa:	bf0c      	ite	eq
 8012ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013000:	2500      	movne	r5, #0
 8013002:	4293      	cmp	r3, r2
 8013004:	bfc4      	itt	gt
 8013006:	1a9b      	subgt	r3, r3, r2
 8013008:	18ed      	addgt	r5, r5, r3
 801300a:	2600      	movs	r6, #0
 801300c:	341a      	adds	r4, #26
 801300e:	42b5      	cmp	r5, r6
 8013010:	d11a      	bne.n	8013048 <_printf_common+0xc8>
 8013012:	2000      	movs	r0, #0
 8013014:	e008      	b.n	8013028 <_printf_common+0xa8>
 8013016:	2301      	movs	r3, #1
 8013018:	4652      	mov	r2, sl
 801301a:	4649      	mov	r1, r9
 801301c:	4638      	mov	r0, r7
 801301e:	47c0      	blx	r8
 8013020:	3001      	adds	r0, #1
 8013022:	d103      	bne.n	801302c <_printf_common+0xac>
 8013024:	f04f 30ff 	mov.w	r0, #4294967295
 8013028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801302c:	3501      	adds	r5, #1
 801302e:	e7c6      	b.n	8012fbe <_printf_common+0x3e>
 8013030:	18e1      	adds	r1, r4, r3
 8013032:	1c5a      	adds	r2, r3, #1
 8013034:	2030      	movs	r0, #48	; 0x30
 8013036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801303a:	4422      	add	r2, r4
 801303c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013044:	3302      	adds	r3, #2
 8013046:	e7c7      	b.n	8012fd8 <_printf_common+0x58>
 8013048:	2301      	movs	r3, #1
 801304a:	4622      	mov	r2, r4
 801304c:	4649      	mov	r1, r9
 801304e:	4638      	mov	r0, r7
 8013050:	47c0      	blx	r8
 8013052:	3001      	adds	r0, #1
 8013054:	d0e6      	beq.n	8013024 <_printf_common+0xa4>
 8013056:	3601      	adds	r6, #1
 8013058:	e7d9      	b.n	801300e <_printf_common+0x8e>
	...

0801305c <_printf_i>:
 801305c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013060:	460c      	mov	r4, r1
 8013062:	4691      	mov	r9, r2
 8013064:	7e27      	ldrb	r7, [r4, #24]
 8013066:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013068:	2f78      	cmp	r7, #120	; 0x78
 801306a:	4680      	mov	r8, r0
 801306c:	469a      	mov	sl, r3
 801306e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013072:	d807      	bhi.n	8013084 <_printf_i+0x28>
 8013074:	2f62      	cmp	r7, #98	; 0x62
 8013076:	d80a      	bhi.n	801308e <_printf_i+0x32>
 8013078:	2f00      	cmp	r7, #0
 801307a:	f000 80d8 	beq.w	801322e <_printf_i+0x1d2>
 801307e:	2f58      	cmp	r7, #88	; 0x58
 8013080:	f000 80a3 	beq.w	80131ca <_printf_i+0x16e>
 8013084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801308c:	e03a      	b.n	8013104 <_printf_i+0xa8>
 801308e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013092:	2b15      	cmp	r3, #21
 8013094:	d8f6      	bhi.n	8013084 <_printf_i+0x28>
 8013096:	a001      	add	r0, pc, #4	; (adr r0, 801309c <_printf_i+0x40>)
 8013098:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801309c:	080130f5 	.word	0x080130f5
 80130a0:	08013109 	.word	0x08013109
 80130a4:	08013085 	.word	0x08013085
 80130a8:	08013085 	.word	0x08013085
 80130ac:	08013085 	.word	0x08013085
 80130b0:	08013085 	.word	0x08013085
 80130b4:	08013109 	.word	0x08013109
 80130b8:	08013085 	.word	0x08013085
 80130bc:	08013085 	.word	0x08013085
 80130c0:	08013085 	.word	0x08013085
 80130c4:	08013085 	.word	0x08013085
 80130c8:	08013215 	.word	0x08013215
 80130cc:	08013139 	.word	0x08013139
 80130d0:	080131f7 	.word	0x080131f7
 80130d4:	08013085 	.word	0x08013085
 80130d8:	08013085 	.word	0x08013085
 80130dc:	08013237 	.word	0x08013237
 80130e0:	08013085 	.word	0x08013085
 80130e4:	08013139 	.word	0x08013139
 80130e8:	08013085 	.word	0x08013085
 80130ec:	08013085 	.word	0x08013085
 80130f0:	080131ff 	.word	0x080131ff
 80130f4:	680b      	ldr	r3, [r1, #0]
 80130f6:	1d1a      	adds	r2, r3, #4
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	600a      	str	r2, [r1, #0]
 80130fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013104:	2301      	movs	r3, #1
 8013106:	e0a3      	b.n	8013250 <_printf_i+0x1f4>
 8013108:	6825      	ldr	r5, [r4, #0]
 801310a:	6808      	ldr	r0, [r1, #0]
 801310c:	062e      	lsls	r6, r5, #24
 801310e:	f100 0304 	add.w	r3, r0, #4
 8013112:	d50a      	bpl.n	801312a <_printf_i+0xce>
 8013114:	6805      	ldr	r5, [r0, #0]
 8013116:	600b      	str	r3, [r1, #0]
 8013118:	2d00      	cmp	r5, #0
 801311a:	da03      	bge.n	8013124 <_printf_i+0xc8>
 801311c:	232d      	movs	r3, #45	; 0x2d
 801311e:	426d      	negs	r5, r5
 8013120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013124:	485e      	ldr	r0, [pc, #376]	; (80132a0 <_printf_i+0x244>)
 8013126:	230a      	movs	r3, #10
 8013128:	e019      	b.n	801315e <_printf_i+0x102>
 801312a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801312e:	6805      	ldr	r5, [r0, #0]
 8013130:	600b      	str	r3, [r1, #0]
 8013132:	bf18      	it	ne
 8013134:	b22d      	sxthne	r5, r5
 8013136:	e7ef      	b.n	8013118 <_printf_i+0xbc>
 8013138:	680b      	ldr	r3, [r1, #0]
 801313a:	6825      	ldr	r5, [r4, #0]
 801313c:	1d18      	adds	r0, r3, #4
 801313e:	6008      	str	r0, [r1, #0]
 8013140:	0628      	lsls	r0, r5, #24
 8013142:	d501      	bpl.n	8013148 <_printf_i+0xec>
 8013144:	681d      	ldr	r5, [r3, #0]
 8013146:	e002      	b.n	801314e <_printf_i+0xf2>
 8013148:	0669      	lsls	r1, r5, #25
 801314a:	d5fb      	bpl.n	8013144 <_printf_i+0xe8>
 801314c:	881d      	ldrh	r5, [r3, #0]
 801314e:	4854      	ldr	r0, [pc, #336]	; (80132a0 <_printf_i+0x244>)
 8013150:	2f6f      	cmp	r7, #111	; 0x6f
 8013152:	bf0c      	ite	eq
 8013154:	2308      	moveq	r3, #8
 8013156:	230a      	movne	r3, #10
 8013158:	2100      	movs	r1, #0
 801315a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801315e:	6866      	ldr	r6, [r4, #4]
 8013160:	60a6      	str	r6, [r4, #8]
 8013162:	2e00      	cmp	r6, #0
 8013164:	bfa2      	ittt	ge
 8013166:	6821      	ldrge	r1, [r4, #0]
 8013168:	f021 0104 	bicge.w	r1, r1, #4
 801316c:	6021      	strge	r1, [r4, #0]
 801316e:	b90d      	cbnz	r5, 8013174 <_printf_i+0x118>
 8013170:	2e00      	cmp	r6, #0
 8013172:	d04d      	beq.n	8013210 <_printf_i+0x1b4>
 8013174:	4616      	mov	r6, r2
 8013176:	fbb5 f1f3 	udiv	r1, r5, r3
 801317a:	fb03 5711 	mls	r7, r3, r1, r5
 801317e:	5dc7      	ldrb	r7, [r0, r7]
 8013180:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013184:	462f      	mov	r7, r5
 8013186:	42bb      	cmp	r3, r7
 8013188:	460d      	mov	r5, r1
 801318a:	d9f4      	bls.n	8013176 <_printf_i+0x11a>
 801318c:	2b08      	cmp	r3, #8
 801318e:	d10b      	bne.n	80131a8 <_printf_i+0x14c>
 8013190:	6823      	ldr	r3, [r4, #0]
 8013192:	07df      	lsls	r7, r3, #31
 8013194:	d508      	bpl.n	80131a8 <_printf_i+0x14c>
 8013196:	6923      	ldr	r3, [r4, #16]
 8013198:	6861      	ldr	r1, [r4, #4]
 801319a:	4299      	cmp	r1, r3
 801319c:	bfde      	ittt	le
 801319e:	2330      	movle	r3, #48	; 0x30
 80131a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80131a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80131a8:	1b92      	subs	r2, r2, r6
 80131aa:	6122      	str	r2, [r4, #16]
 80131ac:	f8cd a000 	str.w	sl, [sp]
 80131b0:	464b      	mov	r3, r9
 80131b2:	aa03      	add	r2, sp, #12
 80131b4:	4621      	mov	r1, r4
 80131b6:	4640      	mov	r0, r8
 80131b8:	f7ff fee2 	bl	8012f80 <_printf_common>
 80131bc:	3001      	adds	r0, #1
 80131be:	d14c      	bne.n	801325a <_printf_i+0x1fe>
 80131c0:	f04f 30ff 	mov.w	r0, #4294967295
 80131c4:	b004      	add	sp, #16
 80131c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ca:	4835      	ldr	r0, [pc, #212]	; (80132a0 <_printf_i+0x244>)
 80131cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80131d0:	6823      	ldr	r3, [r4, #0]
 80131d2:	680e      	ldr	r6, [r1, #0]
 80131d4:	061f      	lsls	r7, r3, #24
 80131d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80131da:	600e      	str	r6, [r1, #0]
 80131dc:	d514      	bpl.n	8013208 <_printf_i+0x1ac>
 80131de:	07d9      	lsls	r1, r3, #31
 80131e0:	bf44      	itt	mi
 80131e2:	f043 0320 	orrmi.w	r3, r3, #32
 80131e6:	6023      	strmi	r3, [r4, #0]
 80131e8:	b91d      	cbnz	r5, 80131f2 <_printf_i+0x196>
 80131ea:	6823      	ldr	r3, [r4, #0]
 80131ec:	f023 0320 	bic.w	r3, r3, #32
 80131f0:	6023      	str	r3, [r4, #0]
 80131f2:	2310      	movs	r3, #16
 80131f4:	e7b0      	b.n	8013158 <_printf_i+0xfc>
 80131f6:	6823      	ldr	r3, [r4, #0]
 80131f8:	f043 0320 	orr.w	r3, r3, #32
 80131fc:	6023      	str	r3, [r4, #0]
 80131fe:	2378      	movs	r3, #120	; 0x78
 8013200:	4828      	ldr	r0, [pc, #160]	; (80132a4 <_printf_i+0x248>)
 8013202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013206:	e7e3      	b.n	80131d0 <_printf_i+0x174>
 8013208:	065e      	lsls	r6, r3, #25
 801320a:	bf48      	it	mi
 801320c:	b2ad      	uxthmi	r5, r5
 801320e:	e7e6      	b.n	80131de <_printf_i+0x182>
 8013210:	4616      	mov	r6, r2
 8013212:	e7bb      	b.n	801318c <_printf_i+0x130>
 8013214:	680b      	ldr	r3, [r1, #0]
 8013216:	6826      	ldr	r6, [r4, #0]
 8013218:	6960      	ldr	r0, [r4, #20]
 801321a:	1d1d      	adds	r5, r3, #4
 801321c:	600d      	str	r5, [r1, #0]
 801321e:	0635      	lsls	r5, r6, #24
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	d501      	bpl.n	8013228 <_printf_i+0x1cc>
 8013224:	6018      	str	r0, [r3, #0]
 8013226:	e002      	b.n	801322e <_printf_i+0x1d2>
 8013228:	0671      	lsls	r1, r6, #25
 801322a:	d5fb      	bpl.n	8013224 <_printf_i+0x1c8>
 801322c:	8018      	strh	r0, [r3, #0]
 801322e:	2300      	movs	r3, #0
 8013230:	6123      	str	r3, [r4, #16]
 8013232:	4616      	mov	r6, r2
 8013234:	e7ba      	b.n	80131ac <_printf_i+0x150>
 8013236:	680b      	ldr	r3, [r1, #0]
 8013238:	1d1a      	adds	r2, r3, #4
 801323a:	600a      	str	r2, [r1, #0]
 801323c:	681e      	ldr	r6, [r3, #0]
 801323e:	6862      	ldr	r2, [r4, #4]
 8013240:	2100      	movs	r1, #0
 8013242:	4630      	mov	r0, r6
 8013244:	f7ec ffe4 	bl	8000210 <memchr>
 8013248:	b108      	cbz	r0, 801324e <_printf_i+0x1f2>
 801324a:	1b80      	subs	r0, r0, r6
 801324c:	6060      	str	r0, [r4, #4]
 801324e:	6863      	ldr	r3, [r4, #4]
 8013250:	6123      	str	r3, [r4, #16]
 8013252:	2300      	movs	r3, #0
 8013254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013258:	e7a8      	b.n	80131ac <_printf_i+0x150>
 801325a:	6923      	ldr	r3, [r4, #16]
 801325c:	4632      	mov	r2, r6
 801325e:	4649      	mov	r1, r9
 8013260:	4640      	mov	r0, r8
 8013262:	47d0      	blx	sl
 8013264:	3001      	adds	r0, #1
 8013266:	d0ab      	beq.n	80131c0 <_printf_i+0x164>
 8013268:	6823      	ldr	r3, [r4, #0]
 801326a:	079b      	lsls	r3, r3, #30
 801326c:	d413      	bmi.n	8013296 <_printf_i+0x23a>
 801326e:	68e0      	ldr	r0, [r4, #12]
 8013270:	9b03      	ldr	r3, [sp, #12]
 8013272:	4298      	cmp	r0, r3
 8013274:	bfb8      	it	lt
 8013276:	4618      	movlt	r0, r3
 8013278:	e7a4      	b.n	80131c4 <_printf_i+0x168>
 801327a:	2301      	movs	r3, #1
 801327c:	4632      	mov	r2, r6
 801327e:	4649      	mov	r1, r9
 8013280:	4640      	mov	r0, r8
 8013282:	47d0      	blx	sl
 8013284:	3001      	adds	r0, #1
 8013286:	d09b      	beq.n	80131c0 <_printf_i+0x164>
 8013288:	3501      	adds	r5, #1
 801328a:	68e3      	ldr	r3, [r4, #12]
 801328c:	9903      	ldr	r1, [sp, #12]
 801328e:	1a5b      	subs	r3, r3, r1
 8013290:	42ab      	cmp	r3, r5
 8013292:	dcf2      	bgt.n	801327a <_printf_i+0x21e>
 8013294:	e7eb      	b.n	801326e <_printf_i+0x212>
 8013296:	2500      	movs	r5, #0
 8013298:	f104 0619 	add.w	r6, r4, #25
 801329c:	e7f5      	b.n	801328a <_printf_i+0x22e>
 801329e:	bf00      	nop
 80132a0:	0801521d 	.word	0x0801521d
 80132a4:	0801522e 	.word	0x0801522e

080132a8 <_read_r>:
 80132a8:	b538      	push	{r3, r4, r5, lr}
 80132aa:	4d07      	ldr	r5, [pc, #28]	; (80132c8 <_read_r+0x20>)
 80132ac:	4604      	mov	r4, r0
 80132ae:	4608      	mov	r0, r1
 80132b0:	4611      	mov	r1, r2
 80132b2:	2200      	movs	r2, #0
 80132b4:	602a      	str	r2, [r5, #0]
 80132b6:	461a      	mov	r2, r3
 80132b8:	f7ef fcaa 	bl	8002c10 <_read>
 80132bc:	1c43      	adds	r3, r0, #1
 80132be:	d102      	bne.n	80132c6 <_read_r+0x1e>
 80132c0:	682b      	ldr	r3, [r5, #0]
 80132c2:	b103      	cbz	r3, 80132c6 <_read_r+0x1e>
 80132c4:	6023      	str	r3, [r4, #0]
 80132c6:	bd38      	pop	{r3, r4, r5, pc}
 80132c8:	200034d4 	.word	0x200034d4
 80132cc:	00000000 	.word	0x00000000

080132d0 <nan>:
 80132d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80132d8 <nan+0x8>
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop
 80132d8:	00000000 	.word	0x00000000
 80132dc:	7ff80000 	.word	0x7ff80000

080132e0 <__ascii_wctomb>:
 80132e0:	b149      	cbz	r1, 80132f6 <__ascii_wctomb+0x16>
 80132e2:	2aff      	cmp	r2, #255	; 0xff
 80132e4:	bf85      	ittet	hi
 80132e6:	238a      	movhi	r3, #138	; 0x8a
 80132e8:	6003      	strhi	r3, [r0, #0]
 80132ea:	700a      	strbls	r2, [r1, #0]
 80132ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80132f0:	bf98      	it	ls
 80132f2:	2001      	movls	r0, #1
 80132f4:	4770      	bx	lr
 80132f6:	4608      	mov	r0, r1
 80132f8:	4770      	bx	lr
	...

080132fc <__assert_func>:
 80132fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80132fe:	4614      	mov	r4, r2
 8013300:	461a      	mov	r2, r3
 8013302:	4b09      	ldr	r3, [pc, #36]	; (8013328 <__assert_func+0x2c>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	4605      	mov	r5, r0
 8013308:	68d8      	ldr	r0, [r3, #12]
 801330a:	b14c      	cbz	r4, 8013320 <__assert_func+0x24>
 801330c:	4b07      	ldr	r3, [pc, #28]	; (801332c <__assert_func+0x30>)
 801330e:	9100      	str	r1, [sp, #0]
 8013310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013314:	4906      	ldr	r1, [pc, #24]	; (8013330 <__assert_func+0x34>)
 8013316:	462b      	mov	r3, r5
 8013318:	f000 f80e 	bl	8013338 <fiprintf>
 801331c:	f000 f862 	bl	80133e4 <abort>
 8013320:	4b04      	ldr	r3, [pc, #16]	; (8013334 <__assert_func+0x38>)
 8013322:	461c      	mov	r4, r3
 8013324:	e7f3      	b.n	801330e <__assert_func+0x12>
 8013326:	bf00      	nop
 8013328:	20000160 	.word	0x20000160
 801332c:	0801523f 	.word	0x0801523f
 8013330:	0801524c 	.word	0x0801524c
 8013334:	0801527a 	.word	0x0801527a

08013338 <fiprintf>:
 8013338:	b40e      	push	{r1, r2, r3}
 801333a:	b503      	push	{r0, r1, lr}
 801333c:	4601      	mov	r1, r0
 801333e:	ab03      	add	r3, sp, #12
 8013340:	4805      	ldr	r0, [pc, #20]	; (8013358 <fiprintf+0x20>)
 8013342:	f853 2b04 	ldr.w	r2, [r3], #4
 8013346:	6800      	ldr	r0, [r0, #0]
 8013348:	9301      	str	r3, [sp, #4]
 801334a:	f7ff fce9 	bl	8012d20 <_vfiprintf_r>
 801334e:	b002      	add	sp, #8
 8013350:	f85d eb04 	ldr.w	lr, [sp], #4
 8013354:	b003      	add	sp, #12
 8013356:	4770      	bx	lr
 8013358:	20000160 	.word	0x20000160

0801335c <_fstat_r>:
 801335c:	b538      	push	{r3, r4, r5, lr}
 801335e:	4d07      	ldr	r5, [pc, #28]	; (801337c <_fstat_r+0x20>)
 8013360:	2300      	movs	r3, #0
 8013362:	4604      	mov	r4, r0
 8013364:	4608      	mov	r0, r1
 8013366:	4611      	mov	r1, r2
 8013368:	602b      	str	r3, [r5, #0]
 801336a:	f7ef fc96 	bl	8002c9a <_fstat>
 801336e:	1c43      	adds	r3, r0, #1
 8013370:	d102      	bne.n	8013378 <_fstat_r+0x1c>
 8013372:	682b      	ldr	r3, [r5, #0]
 8013374:	b103      	cbz	r3, 8013378 <_fstat_r+0x1c>
 8013376:	6023      	str	r3, [r4, #0]
 8013378:	bd38      	pop	{r3, r4, r5, pc}
 801337a:	bf00      	nop
 801337c:	200034d4 	.word	0x200034d4

08013380 <_isatty_r>:
 8013380:	b538      	push	{r3, r4, r5, lr}
 8013382:	4d06      	ldr	r5, [pc, #24]	; (801339c <_isatty_r+0x1c>)
 8013384:	2300      	movs	r3, #0
 8013386:	4604      	mov	r4, r0
 8013388:	4608      	mov	r0, r1
 801338a:	602b      	str	r3, [r5, #0]
 801338c:	f7ef fc95 	bl	8002cba <_isatty>
 8013390:	1c43      	adds	r3, r0, #1
 8013392:	d102      	bne.n	801339a <_isatty_r+0x1a>
 8013394:	682b      	ldr	r3, [r5, #0]
 8013396:	b103      	cbz	r3, 801339a <_isatty_r+0x1a>
 8013398:	6023      	str	r3, [r4, #0]
 801339a:	bd38      	pop	{r3, r4, r5, pc}
 801339c:	200034d4 	.word	0x200034d4

080133a0 <memmove>:
 80133a0:	4288      	cmp	r0, r1
 80133a2:	b510      	push	{r4, lr}
 80133a4:	eb01 0402 	add.w	r4, r1, r2
 80133a8:	d902      	bls.n	80133b0 <memmove+0x10>
 80133aa:	4284      	cmp	r4, r0
 80133ac:	4623      	mov	r3, r4
 80133ae:	d807      	bhi.n	80133c0 <memmove+0x20>
 80133b0:	1e43      	subs	r3, r0, #1
 80133b2:	42a1      	cmp	r1, r4
 80133b4:	d008      	beq.n	80133c8 <memmove+0x28>
 80133b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80133ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80133be:	e7f8      	b.n	80133b2 <memmove+0x12>
 80133c0:	4402      	add	r2, r0
 80133c2:	4601      	mov	r1, r0
 80133c4:	428a      	cmp	r2, r1
 80133c6:	d100      	bne.n	80133ca <memmove+0x2a>
 80133c8:	bd10      	pop	{r4, pc}
 80133ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80133ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80133d2:	e7f7      	b.n	80133c4 <memmove+0x24>

080133d4 <_malloc_usable_size_r>:
 80133d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80133d8:	1f18      	subs	r0, r3, #4
 80133da:	2b00      	cmp	r3, #0
 80133dc:	bfbc      	itt	lt
 80133de:	580b      	ldrlt	r3, [r1, r0]
 80133e0:	18c0      	addlt	r0, r0, r3
 80133e2:	4770      	bx	lr

080133e4 <abort>:
 80133e4:	b508      	push	{r3, lr}
 80133e6:	2006      	movs	r0, #6
 80133e8:	f000 f82c 	bl	8013444 <raise>
 80133ec:	2001      	movs	r0, #1
 80133ee:	f7ef fc05 	bl	8002bfc <_exit>

080133f2 <_raise_r>:
 80133f2:	291f      	cmp	r1, #31
 80133f4:	b538      	push	{r3, r4, r5, lr}
 80133f6:	4604      	mov	r4, r0
 80133f8:	460d      	mov	r5, r1
 80133fa:	d904      	bls.n	8013406 <_raise_r+0x14>
 80133fc:	2316      	movs	r3, #22
 80133fe:	6003      	str	r3, [r0, #0]
 8013400:	f04f 30ff 	mov.w	r0, #4294967295
 8013404:	bd38      	pop	{r3, r4, r5, pc}
 8013406:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013408:	b112      	cbz	r2, 8013410 <_raise_r+0x1e>
 801340a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801340e:	b94b      	cbnz	r3, 8013424 <_raise_r+0x32>
 8013410:	4620      	mov	r0, r4
 8013412:	f000 f831 	bl	8013478 <_getpid_r>
 8013416:	462a      	mov	r2, r5
 8013418:	4601      	mov	r1, r0
 801341a:	4620      	mov	r0, r4
 801341c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013420:	f000 b818 	b.w	8013454 <_kill_r>
 8013424:	2b01      	cmp	r3, #1
 8013426:	d00a      	beq.n	801343e <_raise_r+0x4c>
 8013428:	1c59      	adds	r1, r3, #1
 801342a:	d103      	bne.n	8013434 <_raise_r+0x42>
 801342c:	2316      	movs	r3, #22
 801342e:	6003      	str	r3, [r0, #0]
 8013430:	2001      	movs	r0, #1
 8013432:	e7e7      	b.n	8013404 <_raise_r+0x12>
 8013434:	2400      	movs	r4, #0
 8013436:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801343a:	4628      	mov	r0, r5
 801343c:	4798      	blx	r3
 801343e:	2000      	movs	r0, #0
 8013440:	e7e0      	b.n	8013404 <_raise_r+0x12>
	...

08013444 <raise>:
 8013444:	4b02      	ldr	r3, [pc, #8]	; (8013450 <raise+0xc>)
 8013446:	4601      	mov	r1, r0
 8013448:	6818      	ldr	r0, [r3, #0]
 801344a:	f7ff bfd2 	b.w	80133f2 <_raise_r>
 801344e:	bf00      	nop
 8013450:	20000160 	.word	0x20000160

08013454 <_kill_r>:
 8013454:	b538      	push	{r3, r4, r5, lr}
 8013456:	4d07      	ldr	r5, [pc, #28]	; (8013474 <_kill_r+0x20>)
 8013458:	2300      	movs	r3, #0
 801345a:	4604      	mov	r4, r0
 801345c:	4608      	mov	r0, r1
 801345e:	4611      	mov	r1, r2
 8013460:	602b      	str	r3, [r5, #0]
 8013462:	f7ef fbbb 	bl	8002bdc <_kill>
 8013466:	1c43      	adds	r3, r0, #1
 8013468:	d102      	bne.n	8013470 <_kill_r+0x1c>
 801346a:	682b      	ldr	r3, [r5, #0]
 801346c:	b103      	cbz	r3, 8013470 <_kill_r+0x1c>
 801346e:	6023      	str	r3, [r4, #0]
 8013470:	bd38      	pop	{r3, r4, r5, pc}
 8013472:	bf00      	nop
 8013474:	200034d4 	.word	0x200034d4

08013478 <_getpid_r>:
 8013478:	f7ef bba8 	b.w	8002bcc <_getpid>

0801347c <_init>:
 801347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801347e:	bf00      	nop
 8013480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013482:	bc08      	pop	{r3}
 8013484:	469e      	mov	lr, r3
 8013486:	4770      	bx	lr

08013488 <_fini>:
 8013488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801348a:	bf00      	nop
 801348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801348e:	bc08      	pop	{r3}
 8013490:	469e      	mov	lr, r3
 8013492:	4770      	bx	lr
