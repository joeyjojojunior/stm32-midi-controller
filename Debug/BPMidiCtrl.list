
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a564  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea4  0800a704  0800a704  0001a704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5a8  0800b5a8  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5a8  0800b5a8  0001b5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5b0  0800b5b0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b0  0800b5b0  0001b5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800b5b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bf8  20000184  0800b73c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d7c  0800b73c  00022d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb7e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fff  00000000  00000000  0003bd32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0003fd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  00040f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd04  00000000  00000000  00041f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d90  00000000  00000000  0005ec94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1cc7  00000000  00000000  00077a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001196eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a0  00000000  00000000  00119740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a6ec 	.word	0x0800a6ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800a6ec 	.word	0x0800a6ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295
 80009b0:	f000 b96e 	b.w	8000c90 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	9d08      	ldr	r5, [sp, #32]
 80009d2:	4604      	mov	r4, r0
 80009d4:	468c      	mov	ip, r1
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 8083 	bne.w	8000ae2 <__udivmoddi4+0x116>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d947      	bls.n	8000a72 <__udivmoddi4+0xa6>
 80009e2:	fab2 f282 	clz	r2, r2
 80009e6:	b142      	cbz	r2, 80009fa <__udivmoddi4+0x2e>
 80009e8:	f1c2 0020 	rsb	r0, r2, #32
 80009ec:	fa24 f000 	lsr.w	r0, r4, r0
 80009f0:	4091      	lsls	r1, r2
 80009f2:	4097      	lsls	r7, r2
 80009f4:	ea40 0c01 	orr.w	ip, r0, r1
 80009f8:	4094      	lsls	r4, r2
 80009fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80009fe:	0c23      	lsrs	r3, r4, #16
 8000a00:	fbbc f6f8 	udiv	r6, ip, r8
 8000a04:	fa1f fe87 	uxth.w	lr, r7
 8000a08:	fb08 c116 	mls	r1, r8, r6, ip
 8000a0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a10:	fb06 f10e 	mul.w	r1, r6, lr
 8000a14:	4299      	cmp	r1, r3
 8000a16:	d909      	bls.n	8000a2c <__udivmoddi4+0x60>
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a1e:	f080 8119 	bcs.w	8000c54 <__udivmoddi4+0x288>
 8000a22:	4299      	cmp	r1, r3
 8000a24:	f240 8116 	bls.w	8000c54 <__udivmoddi4+0x288>
 8000a28:	3e02      	subs	r6, #2
 8000a2a:	443b      	add	r3, r7
 8000a2c:	1a5b      	subs	r3, r3, r1
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a34:	fb08 3310 	mls	r3, r8, r0, r3
 8000a38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x8c>
 8000a44:	193c      	adds	r4, r7, r4
 8000a46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a4a:	f080 8105 	bcs.w	8000c58 <__udivmoddi4+0x28c>
 8000a4e:	45a6      	cmp	lr, r4
 8000a50:	f240 8102 	bls.w	8000c58 <__udivmoddi4+0x28c>
 8000a54:	3802      	subs	r0, #2
 8000a56:	443c      	add	r4, r7
 8000a58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	2600      	movs	r6, #0
 8000a62:	b11d      	cbz	r5, 8000a6c <__udivmoddi4+0xa0>
 8000a64:	40d4      	lsrs	r4, r2
 8000a66:	2300      	movs	r3, #0
 8000a68:	e9c5 4300 	strd	r4, r3, [r5]
 8000a6c:	4631      	mov	r1, r6
 8000a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a72:	b902      	cbnz	r2, 8000a76 <__udivmoddi4+0xaa>
 8000a74:	deff      	udf	#255	; 0xff
 8000a76:	fab2 f282 	clz	r2, r2
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d150      	bne.n	8000b20 <__udivmoddi4+0x154>
 8000a7e:	1bcb      	subs	r3, r1, r7
 8000a80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a84:	fa1f f887 	uxth.w	r8, r7
 8000a88:	2601      	movs	r6, #1
 8000a8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a8e:	0c21      	lsrs	r1, r4, #16
 8000a90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a98:	fb08 f30c 	mul.w	r3, r8, ip
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	d907      	bls.n	8000ab0 <__udivmoddi4+0xe4>
 8000aa0:	1879      	adds	r1, r7, r1
 8000aa2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0xe2>
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	f200 80e9 	bhi.w	8000c80 <__udivmoddi4+0x2b4>
 8000aae:	4684      	mov	ip, r0
 8000ab0:	1ac9      	subs	r1, r1, r3
 8000ab2:	b2a3      	uxth	r3, r4
 8000ab4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ab8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000abc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac0:	fb08 f800 	mul.w	r8, r8, r0
 8000ac4:	45a0      	cmp	r8, r4
 8000ac6:	d907      	bls.n	8000ad8 <__udivmoddi4+0x10c>
 8000ac8:	193c      	adds	r4, r7, r4
 8000aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ace:	d202      	bcs.n	8000ad6 <__udivmoddi4+0x10a>
 8000ad0:	45a0      	cmp	r8, r4
 8000ad2:	f200 80d9 	bhi.w	8000c88 <__udivmoddi4+0x2bc>
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	eba4 0408 	sub.w	r4, r4, r8
 8000adc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae0:	e7bf      	b.n	8000a62 <__udivmoddi4+0x96>
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d909      	bls.n	8000afa <__udivmoddi4+0x12e>
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	f000 80b1 	beq.w	8000c4e <__udivmoddi4+0x282>
 8000aec:	2600      	movs	r6, #0
 8000aee:	e9c5 0100 	strd	r0, r1, [r5]
 8000af2:	4630      	mov	r0, r6
 8000af4:	4631      	mov	r1, r6
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	fab3 f683 	clz	r6, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d14a      	bne.n	8000b98 <__udivmoddi4+0x1cc>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d302      	bcc.n	8000b0c <__udivmoddi4+0x140>
 8000b06:	4282      	cmp	r2, r0
 8000b08:	f200 80b8 	bhi.w	8000c7c <__udivmoddi4+0x2b0>
 8000b0c:	1a84      	subs	r4, r0, r2
 8000b0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	468c      	mov	ip, r1
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d0a8      	beq.n	8000a6c <__udivmoddi4+0xa0>
 8000b1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b1e:	e7a5      	b.n	8000a6c <__udivmoddi4+0xa0>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f603 	lsr.w	r6, r0, r3
 8000b28:	4097      	lsls	r7, r2
 8000b2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b32:	40d9      	lsrs	r1, r3
 8000b34:	4330      	orrs	r0, r6
 8000b36:	0c03      	lsrs	r3, r0, #16
 8000b38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b3c:	fa1f f887 	uxth.w	r8, r7
 8000b40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b48:	fb06 f108 	mul.w	r1, r6, r8
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x19c>
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b5a:	f080 808d 	bcs.w	8000c78 <__udivmoddi4+0x2ac>
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	f240 808a 	bls.w	8000c78 <__udivmoddi4+0x2ac>
 8000b64:	3e02      	subs	r6, #2
 8000b66:	443b      	add	r3, r7
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b281      	uxth	r1, r0
 8000b6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb00 f308 	mul.w	r3, r0, r8
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0x1c4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b86:	d273      	bcs.n	8000c70 <__udivmoddi4+0x2a4>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	d971      	bls.n	8000c70 <__udivmoddi4+0x2a4>
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	4439      	add	r1, r7
 8000b90:	1acb      	subs	r3, r1, r3
 8000b92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b96:	e778      	b.n	8000a8a <__udivmoddi4+0xbe>
 8000b98:	f1c6 0c20 	rsb	ip, r6, #32
 8000b9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ba4:	431c      	orrs	r4, r3
 8000ba6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000baa:	fa01 f306 	lsl.w	r3, r1, r6
 8000bae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bb2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bb6:	431f      	orrs	r7, r3
 8000bb8:	0c3b      	lsrs	r3, r7, #16
 8000bba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bbe:	fa1f f884 	uxth.w	r8, r4
 8000bc2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bca:	fb09 fa08 	mul.w	sl, r9, r8
 8000bce:	458a      	cmp	sl, r1
 8000bd0:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd4:	fa00 f306 	lsl.w	r3, r0, r6
 8000bd8:	d908      	bls.n	8000bec <__udivmoddi4+0x220>
 8000bda:	1861      	adds	r1, r4, r1
 8000bdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be0:	d248      	bcs.n	8000c74 <__udivmoddi4+0x2a8>
 8000be2:	458a      	cmp	sl, r1
 8000be4:	d946      	bls.n	8000c74 <__udivmoddi4+0x2a8>
 8000be6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bea:	4421      	add	r1, r4
 8000bec:	eba1 010a 	sub.w	r1, r1, sl
 8000bf0:	b2bf      	uxth	r7, r7
 8000bf2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000bfe:	fb00 f808 	mul.w	r8, r0, r8
 8000c02:	45b8      	cmp	r8, r7
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x24a>
 8000c06:	19e7      	adds	r7, r4, r7
 8000c08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0c:	d22e      	bcs.n	8000c6c <__udivmoddi4+0x2a0>
 8000c0e:	45b8      	cmp	r8, r7
 8000c10:	d92c      	bls.n	8000c6c <__udivmoddi4+0x2a0>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4427      	add	r7, r4
 8000c16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c1a:	eba7 0708 	sub.w	r7, r7, r8
 8000c1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c22:	454f      	cmp	r7, r9
 8000c24:	46c6      	mov	lr, r8
 8000c26:	4649      	mov	r1, r9
 8000c28:	d31a      	bcc.n	8000c60 <__udivmoddi4+0x294>
 8000c2a:	d017      	beq.n	8000c5c <__udivmoddi4+0x290>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x27a>
 8000c2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c32:	eb67 0701 	sbc.w	r7, r7, r1
 8000c36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c3a:	40f2      	lsrs	r2, r6
 8000c3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c40:	40f7      	lsrs	r7, r6
 8000c42:	e9c5 2700 	strd	r2, r7, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	462e      	mov	r6, r5
 8000c50:	4628      	mov	r0, r5
 8000c52:	e70b      	b.n	8000a6c <__udivmoddi4+0xa0>
 8000c54:	4606      	mov	r6, r0
 8000c56:	e6e9      	b.n	8000a2c <__udivmoddi4+0x60>
 8000c58:	4618      	mov	r0, r3
 8000c5a:	e6fd      	b.n	8000a58 <__udivmoddi4+0x8c>
 8000c5c:	4543      	cmp	r3, r8
 8000c5e:	d2e5      	bcs.n	8000c2c <__udivmoddi4+0x260>
 8000c60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c64:	eb69 0104 	sbc.w	r1, r9, r4
 8000c68:	3801      	subs	r0, #1
 8000c6a:	e7df      	b.n	8000c2c <__udivmoddi4+0x260>
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	e7d2      	b.n	8000c16 <__udivmoddi4+0x24a>
 8000c70:	4660      	mov	r0, ip
 8000c72:	e78d      	b.n	8000b90 <__udivmoddi4+0x1c4>
 8000c74:	4681      	mov	r9, r0
 8000c76:	e7b9      	b.n	8000bec <__udivmoddi4+0x220>
 8000c78:	4666      	mov	r6, ip
 8000c7a:	e775      	b.n	8000b68 <__udivmoddi4+0x19c>
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	e74a      	b.n	8000b16 <__udivmoddi4+0x14a>
 8000c80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c84:	4439      	add	r1, r7
 8000c86:	e713      	b.n	8000ab0 <__udivmoddi4+0xe4>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	443c      	add	r4, r7
 8000c8c:	e724      	b.n	8000ad8 <__udivmoddi4+0x10c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <ADC_DMA_average>:
void i2c_select(uint8_t mux_addr, uint8_t i);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_DMA_average(int channel) {
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum;
	int i;

	adc_sum = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
	if (channel < NUM_ADC_CHANNELS) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	dc14      	bgt.n	8000cd0 <ADC_DMA_average+0x3c>
		for (i = 0; i < NUM_ADC_SAMPLES; i++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	e00d      	b.n	8000cc8 <ADC_DMA_average+0x34>
			adc_sum += adcBuf[channel + i * NUM_ADC_CHANNELS];
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	009a      	lsls	r2, r3, #2
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ce8 <ADC_DMA_average+0x54>)
 8000cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < NUM_ADC_SAMPLES; i++)
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	2b1f      	cmp	r3, #31
 8000ccc:	ddee      	ble.n	8000cac <ADC_DMA_average+0x18>
 8000cce:	e001      	b.n	8000cd4 <ADC_DMA_average+0x40>
	} else
		return 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e002      	b.n	8000cda <ADC_DMA_average+0x46>

	return adc_sum / NUM_ADC_SAMPLES;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	b29b      	uxth	r3, r3
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	200001a4 	.word	0x200001a4
 8000cec:	00000000 	.word	0x00000000

08000cf0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cf6:	f000 fde3 	bl	80018c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cfa:	f000 f999 	bl	8001030 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cfe:	f000 fb0d 	bl	800131c <MX_GPIO_Init>
	MX_RTC_Init();
 8000d02:	f000 fac5 	bl	8001290 <MX_RTC_Init>
	MX_DMA_Init();
 8000d06:	f000 fae9 	bl	80012dc <MX_DMA_Init>
	MX_ADC1_Init();
 8000d0a:	f000 fa17 	bl	800113c <MX_ADC1_Init>
	MX_I2C1_Init();
 8000d0e:	f000 fa91 	bl	8001234 <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 8000d12:	f007 ffb9 	bl	8008c88 <MX_USB_DEVICE_Init>
	//MX_SDIO_SD_Init();

	/* USER CODE BEGIN 2 */
	i2c_select(I2C_MUX_MASTER, 0);
 8000d16:	2100      	movs	r1, #0
 8000d18:	20e2      	movs	r0, #226	; 0xe2
 8000d1a:	f000 fb79 	bl	8001410 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, 0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	20e0      	movs	r0, #224	; 0xe0
 8000d22:	f000 fb75 	bl	8001410 <i2c_select>
	ssd1306_Init(&hi2c1, I2C_OLED_ADDR);
 8000d26:	2178      	movs	r1, #120	; 0x78
 8000d28:	48b3      	ldr	r0, [pc, #716]	; (8000ff8 <main+0x308>)
 8000d2a:	f007 fcd5 	bl	80086d8 <ssd1306_Init>
	HAL_Delay(1000);
 8000d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d32:	f000 fe37 	bl	80019a4 <HAL_Delay>
	ssd1306_Fill(Black);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f007 fe2a 	bl	8008990 <ssd1306_Fill>
	ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 8000d3c:	2178      	movs	r1, #120	; 0x78
 8000d3e:	48ae      	ldr	r0, [pc, #696]	; (8000ff8 <main+0x308>)
 8000d40:	f007 fe4a 	bl	80089d8 <ssd1306_UpdateScreen>

	i2c_select(I2C_MUX_MASTER, 0);
 8000d44:	2100      	movs	r1, #0
 8000d46:	20e2      	movs	r0, #226	; 0xe2
 8000d48:	f000 fb62 	bl	8001410 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, 1);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	20e0      	movs	r0, #224	; 0xe0
 8000d50:	f000 fb5e 	bl	8001410 <i2c_select>
	ssd1306_Init(&hi2c1, I2C_OLED_ADDR);
 8000d54:	2178      	movs	r1, #120	; 0x78
 8000d56:	48a8      	ldr	r0, [pc, #672]	; (8000ff8 <main+0x308>)
 8000d58:	f007 fcbe 	bl	80086d8 <ssd1306_Init>
	HAL_Delay(1000);
 8000d5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d60:	f000 fe20 	bl	80019a4 <HAL_Delay>
	ssd1306_Fill(Black);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f007 fe13 	bl	8008990 <ssd1306_Fill>
	ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 8000d6a:	2178      	movs	r1, #120	; 0x78
 8000d6c:	48a2      	ldr	r0, [pc, #648]	; (8000ff8 <main+0x308>)
 8000d6e:	f007 fe33 	bl	80089d8 <ssd1306_UpdateScreen>

	i2c_select(I2C_MUX_MASTER, 1);
 8000d72:	2101      	movs	r1, #1
 8000d74:	20e2      	movs	r0, #226	; 0xe2
 8000d76:	f000 fb4b 	bl	8001410 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, 0);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	20e0      	movs	r0, #224	; 0xe0
 8000d7e:	f000 fb47 	bl	8001410 <i2c_select>
	ssd1306_Init(&hi2c1, I2C_OLED_ADDR);
 8000d82:	2178      	movs	r1, #120	; 0x78
 8000d84:	489c      	ldr	r0, [pc, #624]	; (8000ff8 <main+0x308>)
 8000d86:	f007 fca7 	bl	80086d8 <ssd1306_Init>
	HAL_Delay(1000);
 8000d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d8e:	f000 fe09 	bl	80019a4 <HAL_Delay>
	ssd1306_Fill(Black);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f007 fdfc 	bl	8008990 <ssd1306_Fill>
	ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 8000d98:	2178      	movs	r1, #120	; 0x78
 8000d9a:	4897      	ldr	r0, [pc, #604]	; (8000ff8 <main+0x308>)
 8000d9c:	f007 fe1c 	bl	80089d8 <ssd1306_UpdateScreen>

	i2c_select(I2C_MUX_MASTER, 1);
 8000da0:	2101      	movs	r1, #1
 8000da2:	20e2      	movs	r0, #226	; 0xe2
 8000da4:	f000 fb34 	bl	8001410 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, 1);
 8000da8:	2101      	movs	r1, #1
 8000daa:	20e0      	movs	r0, #224	; 0xe0
 8000dac:	f000 fb30 	bl	8001410 <i2c_select>
	ssd1306_Init(&hi2c1, I2C_OLED_ADDR);
 8000db0:	2178      	movs	r1, #120	; 0x78
 8000db2:	4891      	ldr	r0, [pc, #580]	; (8000ff8 <main+0x308>)
 8000db4:	f007 fc90 	bl	80086d8 <ssd1306_Init>
	HAL_Delay(1000);
 8000db8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dbc:	f000 fdf2 	bl	80019a4 <HAL_Delay>
	ssd1306_Fill(Black);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f007 fde5 	bl	8008990 <ssd1306_Fill>
	ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 8000dc6:	2178      	movs	r1, #120	; 0x78
 8000dc8:	488b      	ldr	r0, [pc, #556]	; (8000ff8 <main+0x308>)
 8000dca:	f007 fe05 	bl	80089d8 <ssd1306_UpdateScreen>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_ADC_Start(&hadc1);
 8000dce:	488b      	ldr	r0, [pc, #556]	; (8000ffc <main+0x30c>)
 8000dd0:	f000 fe50 	bl	8001a74 <HAL_ADC_Start>
	while (1) {
		//if (!processing_data) HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	498a      	ldr	r1, [pc, #552]	; (8001000 <main+0x310>)
 8000dd8:	4888      	ldr	r0, [pc, #544]	; (8000ffc <main+0x30c>)
 8000dda:	f000 feff 	bl	8001bdc <HAL_ADC_Start_DMA>
		for (int i = 0; i < 4; i++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	e0fd      	b.n	8000fe0 <main+0x2f0>
			processing_data = 1;
 8000de4:	4b87      	ldr	r3, [pc, #540]	; (8001004 <main+0x314>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
			adcFilteredPrev[i] = adcFiltered[i];
 8000dea:	4a87      	ldr	r2, [pc, #540]	; (8001008 <main+0x318>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000df2:	4a86      	ldr	r2, [pc, #536]	; (800100c <main+0x31c>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			midiValuesPrev[i] = midiValues[i];
 8000dfa:	4a85      	ldr	r2, [pc, #532]	; (8001010 <main+0x320>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e02:	4984      	ldr	r1, [pc, #528]	; (8001014 <main+0x324>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			//adcFiltered[i] = (EMA_A * adcBuf[i]) + ((1 - EMA_A) * adcFiltered[i]);
			adcFiltered[i] = ADC_DMA_average(i);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff42 	bl	8000c94 <ADC_DMA_average>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4619      	mov	r1, r3
 8000e14:	4a7c      	ldr	r2, [pc, #496]	; (8001008 <main+0x318>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			midiValues[i] = MIN((EMA_A_M * slope * adcFiltered[i]) + ((1 - EMA_A_M) * midiValues[i]), 127);
 8000e1c:	4b7e      	ldr	r3, [pc, #504]	; (8001018 <main+0x328>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fcbb 	bl	800079c <__aeabi_f2d>
 8000e26:	4b7d      	ldr	r3, [pc, #500]	; (800101c <main+0x32c>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	f7ff fa28 	bl	8000280 <__aeabi_dmul>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	4614      	mov	r4, r2
 8000e36:	461d      	mov	r5, r3
 8000e38:	4a73      	ldr	r2, [pc, #460]	; (8001008 <main+0x318>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fc99 	bl	8000778 <__aeabi_i2d>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	4629      	mov	r1, r5
 8000e4e:	f7ff fa17 	bl	8000280 <__aeabi_dmul>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4614      	mov	r4, r2
 8000e58:	461d      	mov	r5, r3
 8000e5a:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <main+0x328>)
 8000e5c:	edd3 7a00 	vldr	s15, [r3]
 8000e60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e68:	4a69      	ldr	r2, [pc, #420]	; (8001010 <main+0x320>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e70:	ee07 3a90 	vmov	s15, r3
 8000e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7c:	ee17 0a90 	vmov	r0, s15
 8000e80:	f7ff fc8c 	bl	800079c <__aeabi_f2d>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4620      	mov	r0, r4
 8000e8a:	4629      	mov	r1, r5
 8000e8c:	f7ff fb28 	bl	80004e0 <__adddf3>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	a355      	add	r3, pc, #340	; (adr r3, 8000ff0 <main+0x300>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f7ff fd35 	bl	800090c <__aeabi_dcmplt>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d041      	beq.n	8000f2c <main+0x23c>
 8000ea8:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <main+0x328>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc75 	bl	800079c <__aeabi_f2d>
 8000eb2:	4b5a      	ldr	r3, [pc, #360]	; (800101c <main+0x32c>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff f9e2 	bl	8000280 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4614      	mov	r4, r2
 8000ec2:	461d      	mov	r5, r3
 8000ec4:	4a50      	ldr	r2, [pc, #320]	; (8001008 <main+0x318>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fc53 	bl	8000778 <__aeabi_i2d>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	4629      	mov	r1, r5
 8000eda:	f7ff f9d1 	bl	8000280 <__aeabi_dmul>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4614      	mov	r4, r2
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	4b4c      	ldr	r3, [pc, #304]	; (8001018 <main+0x328>)
 8000ee8:	edd3 7a00 	vldr	s15, [r3]
 8000eec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ef0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ef4:	4a46      	ldr	r2, [pc, #280]	; (8001010 <main+0x320>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f08:	ee17 0a90 	vmov	r0, s15
 8000f0c:	f7ff fc46 	bl	800079c <__aeabi_f2d>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4620      	mov	r0, r4
 8000f16:	4629      	mov	r1, r5
 8000f18:	f7ff fae2 	bl	80004e0 <__adddf3>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fd1a 	bl	800095c <__aeabi_d2uiz>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	e000      	b.n	8000f2e <main+0x23e>
 8000f2c:	237f      	movs	r3, #127	; 0x7f
 8000f2e:	4938      	ldr	r1, [pc, #224]	; (8001010 <main+0x320>)
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
			if (midiValuesPrev[i] != midiValues[i]) {
 8000f36:	4a37      	ldr	r2, [pc, #220]	; (8001014 <main+0x324>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f3e:	4934      	ldr	r1, [pc, #208]	; (8001010 <main+0x320>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d047      	beq.n	8000fda <main+0x2ea>
				sprintf(adcStrings[i], "%.3d", (int) adcFiltered[i]);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4a34      	ldr	r2, [pc, #208]	; (8001020 <main+0x330>)
 8000f50:	1898      	adds	r0, r3, r2
 8000f52:	4a2d      	ldr	r2, [pc, #180]	; (8001008 <main+0x318>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4931      	ldr	r1, [pc, #196]	; (8001024 <main+0x334>)
 8000f5e:	f008 fc0f 	bl	8009780 <siprintf>
				sprintf(midiStrings[i], "%.3d", (int) midiValues[i]);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4a30      	ldr	r2, [pc, #192]	; (8001028 <main+0x338>)
 8000f68:	1898      	adds	r0, r3, r2
 8000f6a:	4a29      	ldr	r2, [pc, #164]	; (8001010 <main+0x320>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	461a      	mov	r2, r3
 8000f74:	492b      	ldr	r1, [pc, #172]	; (8001024 <main+0x334>)
 8000f76:	f008 fc03 	bl	8009780 <siprintf>
				dmux_select(i);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fa12 	bl	80013a4 <dmux_select>
				ssd1306_Fill(Black);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f007 fd05 	bl	8008990 <ssd1306_Fill>
				ssd1306_SetCursor(0, 0);
 8000f86:	2100      	movs	r1, #0
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f007 fe65 	bl	8008c58 <ssd1306_SetCursor>
				//ssd1306_WriteString(labelStrings[i], Font_11x18, White);
				ssd1306_WriteString(midiStrings[i], Font_11x18, White);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4a25      	ldr	r2, [pc, #148]	; (8001028 <main+0x338>)
 8000f94:	1898      	adds	r0, r3, r2
 8000f96:	4a25      	ldr	r2, [pc, #148]	; (800102c <main+0x33c>)
 8000f98:	2301      	movs	r3, #1
 8000f9a:	ca06      	ldmia	r2, {r1, r2}
 8000f9c:	f007 fe36 	bl	8008c0c <ssd1306_WriteString>
				ssd1306_SetCursor(0, 36);
 8000fa0:	2124      	movs	r1, #36	; 0x24
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f007 fe58 	bl	8008c58 <ssd1306_SetCursor>
				ssd1306_WriteString(adcStrings[i], Font_11x18, White);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <main+0x330>)
 8000fae:	1898      	adds	r0, r3, r2
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	; (800102c <main+0x33c>)
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	ca06      	ldmia	r2, {r1, r2}
 8000fb6:	f007 fe29 	bl	8008c0c <ssd1306_WriteString>
				ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 8000fba:	2178      	movs	r1, #120	; 0x78
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <main+0x308>)
 8000fbe:	f007 fd0b 	bl	80089d8 <ssd1306_UpdateScreen>
				MX_USB_Send_Midi((uint8_t) midiValues[i], i + 17);
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <main+0x320>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3311      	adds	r3, #17
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	f007 fe87 	bl	8008ce8 <MX_USB_Send_Midi>
		for (int i = 0; i < 4; i++) {
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	f77f aefe 	ble.w	8000de4 <main+0xf4>
				//HAL_Delay(1);
			}
		}
		processing_data = 0;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <main+0x314>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 8000fee:	e6f1      	b.n	8000dd4 <main+0xe4>
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	405fc000 	.word	0x405fc000
 8000ff8:	200022a4 	.word	0x200022a4
 8000ffc:	20002318 	.word	0x20002318
 8001000:	200001a4 	.word	0x200001a4
 8001004:	200001a0 	.word	0x200001a0
 8001008:	200002a4 	.word	0x200002a4
 800100c:	200002ac 	.word	0x200002ac
 8001010:	20002308 	.word	0x20002308
 8001014:	2000247c 	.word	0x2000247c
 8001018:	20000008 	.word	0x20000008
 800101c:	20000000 	.word	0x20000000
 8001020:	2000246c 	.word	0x2000246c
 8001024:	0800a704 	.word	0x0800a704
 8001028:	200022f8 	.word	0x200022f8
 800102c:	200000c4 	.word	0x200000c4

08001030 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b09a      	sub	sp, #104	; 0x68
 8001034:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001036:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800103a:	2230      	movs	r2, #48	; 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f008 fb20 	bl	8009684 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <SystemClock_Config+0x104>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a31      	ldr	r2, [pc, #196]	; (8001134 <SystemClock_Config+0x104>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <SystemClock_Config+0x104>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <SystemClock_Config+0x108>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <SystemClock_Config+0x108>)
 800108c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <SystemClock_Config+0x108>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800109e:	230b      	movs	r3, #11
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ac:	2310      	movs	r3, #16
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010b0:	2301      	movs	r3, #1
 80010b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010bc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 15;
 80010be:	230f      	movs	r3, #15
 80010c0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 144;
 80010c2:	2390      	movs	r3, #144	; 0x90
 80010c4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80010ca:	2305      	movs	r3, #5
 80010cc:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 ff5a 	bl	8004f8c <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xb2>
		Error_Handler();
 80010de:	f000 f9ce 	bl	800147e <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010e2:	230f      	movs	r3, #15
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 f9bd 	bl	800547c <HAL_RCC_ClockConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xdc>
		Error_Handler();
 8001108:	f000 f9b9 	bl	800147e <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800110c:	2302      	movs	r3, #2
 800110e:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001114:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4618      	mov	r0, r3
 800111c:	f004 fb6a 	bl	80057f4 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xfa>
		Error_Handler();
 8001126:	f000 f9aa 	bl	800147e <Error_Handler>
	}
}
 800112a:	bf00      	nop
 800112c:	3768      	adds	r7, #104	; 0x68
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800114e:	4b36      	ldr	r3, [pc, #216]	; (8001228 <MX_ADC1_Init+0xec>)
 8001150:	4a36      	ldr	r2, [pc, #216]	; (800122c <MX_ADC1_Init+0xf0>)
 8001152:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <MX_ADC1_Init+0xec>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800115a:	4b33      	ldr	r3, [pc, #204]	; (8001228 <MX_ADC1_Init+0xec>)
 800115c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001160:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <MX_ADC1_Init+0xec>)
 8001164:	2201      	movs	r2, #1
 8001166:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001168:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <MX_ADC1_Init+0xec>)
 800116a:	2201      	movs	r2, #1
 800116c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <MX_ADC1_Init+0xec>)
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001176:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <MX_ADC1_Init+0xec>)
 8001178:	2200      	movs	r2, #0
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_ADC1_Init+0xec>)
 800117e:	4a2c      	ldr	r2, [pc, #176]	; (8001230 <MX_ADC1_Init+0xf4>)
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001182:	4b29      	ldr	r3, [pc, #164]	; (8001228 <MX_ADC1_Init+0xec>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 4;
 8001188:	4b27      	ldr	r3, [pc, #156]	; (8001228 <MX_ADC1_Init+0xec>)
 800118a:	2204      	movs	r2, #4
 800118c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MX_ADC1_Init+0xec>)
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <MX_ADC1_Init+0xec>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800119c:	4822      	ldr	r0, [pc, #136]	; (8001228 <MX_ADC1_Init+0xec>)
 800119e:	f000 fc25 	bl	80019ec <HAL_ADC_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0x70>
		Error_Handler();
 80011a8:	f000 f969 	bl	800147e <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011b4:	2301      	movs	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	481a      	ldr	r0, [pc, #104]	; (8001228 <MX_ADC1_Init+0xec>)
 80011be:	f000 fe61 	bl	8001e84 <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0x90>
		Error_Handler();
 80011c8:	f000 f959 	bl	800147e <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4813      	ldr	r0, [pc, #76]	; (8001228 <MX_ADC1_Init+0xec>)
 80011da:	f000 fe53 	bl	8001e84 <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0xac>
		Error_Handler();
 80011e4:	f000 f94b 	bl	800147e <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 80011ec:	2303      	movs	r3, #3
 80011ee:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_ADC1_Init+0xec>)
 80011f6:	f000 fe45 	bl	8001e84 <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0xc8>
		Error_Handler();
 8001200:	f000 f93d 	bl	800147e <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001204:	2303      	movs	r3, #3
 8001206:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8001208:	2304      	movs	r3, #4
 800120a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_ADC1_Init+0xec>)
 8001212:	f000 fe37 	bl	8001e84 <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0xe4>
		Error_Handler();
 800121c:	f000 f92f 	bl	800147e <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20002318 	.word	0x20002318
 800122c:	40012000 	.word	0x40012000
 8001230:	0f000001 	.word	0x0f000001

08001234 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_I2C1_Init+0x50>)
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MX_I2C1_Init+0x54>)
 800123c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_I2C1_Init+0x50>)
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_I2C1_Init+0x58>)
 8001242:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_I2C1_Init+0x50>)
 8001252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001256:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_I2C1_Init+0x50>)
 8001272:	f001 ff2d 	bl	80030d0 <HAL_I2C_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800127c:	f000 f8ff 	bl	800147e <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200022a4 	.word	0x200022a4
 8001288:	40005400 	.word	0x40005400
 800128c:	00061a80 	.word	0x00061a80

08001290 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_RTC_Init+0x44>)
 8001296:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <MX_RTC_Init+0x48>)
 8001298:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_RTC_Init+0x44>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_RTC_Init+0x44>)
 80012a2:	227f      	movs	r2, #127	; 0x7f
 80012a4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_RTC_Init+0x44>)
 80012a8:	22ff      	movs	r2, #255	; 0xff
 80012aa:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_RTC_Init+0x44>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_RTC_Init+0x44>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_RTC_Init+0x44>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_RTC_Init+0x44>)
 80012c0:	f004 fb88 	bl	80059d4 <HAL_RTC_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_RTC_Init+0x3e>
		Error_Handler();
 80012ca:	f000 f8d8 	bl	800147e <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200023c0 	.word	0x200023c0
 80012d8:	40002800 	.word	0x40002800

080012dc <MX_DMA_Init>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_DMA_Init+0x3c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <MX_DMA_Init+0x3c>)
 80012ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_DMA_Init+0x3c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2038      	movs	r0, #56	; 0x38
 8001304:	f001 f949 	bl	800259a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001308:	2038      	movs	r0, #56	; 0x38
 800130a:	f001 f962 	bl	80025d2 <HAL_NVIC_EnableIRQ>

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_GPIO_Init+0x84>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <MX_GPIO_Init+0x84>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_GPIO_Init+0x84>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_GPIO_Init+0x84>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <MX_GPIO_Init+0x84>)
 8001348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_GPIO_Init+0x84>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_GPIO_Init+0x84>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <MX_GPIO_Init+0x84>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <MX_GPIO_Init+0x84>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_GPIO_Init+0x84>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <MX_GPIO_Init+0x84>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_GPIO_Init+0x84>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <dmux_select>:

void dmux_select(uint8_t n) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	uint8_t master_mux_i;
	uint8_t slave_mux_i;
	switch (n) {
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d81f      	bhi.n	80013f4 <dmux_select+0x50>
 80013b4:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <dmux_select+0x18>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	080013cd 	.word	0x080013cd
 80013c0:	080013d7 	.word	0x080013d7
 80013c4:	080013e1 	.word	0x080013e1
 80013c8:	080013eb 	.word	0x080013eb
	case 0:
		master_mux_i = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
		slave_mux_i = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]
		break;
 80013d4:	e00e      	b.n	80013f4 <dmux_select+0x50>
	case 1:
		master_mux_i = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
		slave_mux_i = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	73bb      	strb	r3, [r7, #14]
		break;
 80013de:	e009      	b.n	80013f4 <dmux_select+0x50>
	case 2:
		master_mux_i = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
		slave_mux_i = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73bb      	strb	r3, [r7, #14]
		break;
 80013e8:	e004      	b.n	80013f4 <dmux_select+0x50>
	case 3:
		master_mux_i = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
		slave_mux_i = 1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73bb      	strb	r3, [r7, #14]
		break;
 80013f2:	bf00      	nop
	}
	i2c_select(I2C_MUX_MASTER, master_mux_i);
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	4619      	mov	r1, r3
 80013f8:	20e2      	movs	r0, #226	; 0xe2
 80013fa:	f000 f809 	bl	8001410 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, slave_mux_i);
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4619      	mov	r1, r3
 8001402:	20e0      	movs	r0, #224	; 0xe0
 8001404:	f000 f804 	bl	8001410 <i2c_select>
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <i2c_select>:

/* USER CODE BEGIN 4 */
void i2c_select(uint8_t mux_addr, uint8_t i) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af02      	add	r7, sp, #8
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	71bb      	strb	r3, [r7, #6]
	if (i > 7) return;
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	2b07      	cmp	r3, #7
 8001424:	d810      	bhi.n	8001448 <i2c_select+0x38>
	unsigned char temp[1];
	temp[0] = 1 << i;
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	2201      	movs	r2, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, mux_addr, temp, 1, 100);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	b299      	uxth	r1, r3
 8001436:	f107 020c 	add.w	r2, r7, #12
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2301      	movs	r3, #1
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <i2c_select+0x40>)
 8001442:	f001 ff89 	bl	8003358 <HAL_I2C_Master_Transmit>
 8001446:	e000      	b.n	800144a <i2c_select+0x3a>
	if (i > 7) return;
 8001448:	bf00      	nop
}
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200022a4 	.word	0x200022a4

08001454 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 fca3 	bl	8001dbc <HAL_ADC_Stop_DMA>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001482:	b672      	cpsid	i
}
 8001484:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001486:	e7fe      	b.n	8001486 <Error_Handler+0x8>

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <HAL_MspInit+0x4c>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_MspInit+0x4c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_MspInit+0x4c>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <HAL_ADC_MspInit+0xdc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d157      	bne.n	80015aa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_ADC_MspInit+0xe0>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <HAL_ADC_MspInit+0xe0>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_ADC_MspInit+0xe0>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <HAL_ADC_MspInit+0xe0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a26      	ldr	r2, [pc, #152]	; (80015b8 <HAL_ADC_MspInit+0xe0>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_ADC_MspInit+0xe0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001532:	230f      	movs	r3, #15
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001536:	2303      	movs	r3, #3
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	481d      	ldr	r0, [pc, #116]	; (80015bc <HAL_ADC_MspInit+0xe4>)
 8001546:	f001 fc3f 	bl	8002dc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 800154c:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_ADC_MspInit+0xec>)
 800154e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 8001564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001568:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 800156c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001570:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 8001574:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001578:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 800157c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001580:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800158e:	480c      	ldr	r0, [pc, #48]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 8001590:	f001 f83a 	bl	8002608 <HAL_DMA_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800159a:	f7ff ff70 	bl	800147e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_ADC_MspInit+0xe8>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40012000 	.word	0x40012000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	20002360 	.word	0x20002360
 80015c4:	40026410 	.word	0x40026410

080015c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a19      	ldr	r2, [pc, #100]	; (800164c <HAL_I2C_MspInit+0x84>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12b      	bne.n	8001642 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_I2C_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_I2C_MspInit+0x88>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_I2C_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001606:	23c0      	movs	r3, #192	; 0xc0
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160a:	2312      	movs	r3, #18
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160e:	2301      	movs	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001616:	2304      	movs	r3, #4
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <HAL_I2C_MspInit+0x8c>)
 8001622:	f001 fbd1 	bl	8002dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_I2C_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_I2C_MspInit+0x88>)
 8001630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_I2C_MspInit+0x88>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40005400 	.word	0x40005400
 8001650:	40023800 	.word	0x40023800
 8001654:	40020400 	.word	0x40020400

08001658 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <HAL_RTC_MspInit+0x24>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d102      	bne.n	8001670 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_RTC_MspInit+0x28>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40002800 	.word	0x40002800
 8001680:	42470e3c 	.word	0x42470e3c

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d0:	f000 f948 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <DMA2_Stream0_IRQHandler+0x10>)
 80016de:	f001 f909 	bl	80028f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20002360 	.word	0x20002360

080016ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <OTG_FS_IRQHandler+0x10>)
 80016f2:	f002 fc18 	bl	8003f26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20002964 	.word	0x20002964

08001700 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e00a      	b.n	8001728 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001712:	f3af 8000 	nop.w
 8001716:	4601      	mov	r1, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	b2ca      	uxtb	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf0      	blt.n	8001712 <_read+0x12>
	}

return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e009      	b.n	8001760 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	60ba      	str	r2, [r7, #8]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf1      	blt.n	800174c <_write+0x12>
	}
	return len;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_close>:

int _close(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	return -1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179a:	605a      	str	r2, [r3, #4]
	return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_isatty>:

int _isatty(int file)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	return 1;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
	return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800180c:	f007 ff10 	bl	8009630 <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <_sbrk+0x64>)
 800182c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20020000 	.word	0x20020000
 800183c:	00000400 	.word	0x00000400
 8001840:	200002b4 	.word	0x200002b4
 8001844:	20002d80 	.word	0x20002d80

08001848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <SystemInit+0x20>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <SystemInit+0x20>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001872:	490e      	ldr	r1, [pc, #56]	; (80018ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001888:	4c0b      	ldr	r4, [pc, #44]	; (80018b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001896:	f7ff ffd7 	bl	8001848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189a:	f007 fecf 	bl	800963c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189e:	f7ff fa27 	bl	8000cf0 <main>
  bx  lr    
 80018a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80018b0:	0800b5b8 	.word	0x0800b5b8
  ldr r2, =_sbss
 80018b4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80018b8:	20002d7c 	.word	0x20002d7c

080018bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <HAL_Init+0x40>)
 80018ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_Init+0x40>)
 80018d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a07      	ldr	r2, [pc, #28]	; (8001900 <HAL_Init+0x40>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e8:	2003      	movs	r0, #3
 80018ea:	f000 fe4b 	bl	8002584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f808 	bl	8001904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f4:	f7ff fdc8 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023c00 	.word	0x40023c00

08001904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x54>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x58>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	fbb3 f3f1 	udiv	r3, r3, r1
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fe63 	bl	80025ee <HAL_SYSTICK_Config>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e00e      	b.n	8001950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d80a      	bhi.n	800194e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f000 fe2b 	bl	800259a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001944:	4a06      	ldr	r2, [pc, #24]	; (8001960 <HAL_InitTick+0x5c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	e000      	b.n	8001950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000000c 	.word	0x2000000c
 800195c:	20000014 	.word	0x20000014
 8001960:	20000010 	.word	0x20000010

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x20>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x24>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_IncTick+0x24>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000014 	.word	0x20000014
 8001988:	20002490 	.word	0x20002490

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20002490 	.word	0x20002490

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ca:	bf00      	nop
 80019cc:	f7ff ffde 	bl	800198c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000014 	.word	0x20000014

080019ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e033      	b.n	8001a6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fd64 	bl	80014d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a32:	f023 0302 	bic.w	r3, r3, #2
 8001a36:	f043 0202 	orr.w	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fb52 	bl	80020e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f023 0303 	bic.w	r3, r3, #3
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
 8001a5a:	e001      	b.n	8001a60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_Start+0x1a>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e097      	b.n	8001bbe <HAL_ADC_Start+0x14a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d018      	beq.n	8001ad6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab4:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <HAL_ADC_Start+0x158>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a45      	ldr	r2, [pc, #276]	; (8001bd0 <HAL_ADC_Start+0x15c>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9a      	lsrs	r2, r3, #18
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ac8:	e002      	b.n	8001ad0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f9      	bne.n	8001aca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d15f      	bne.n	8001ba4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b22:	d106      	bne.n	8001b32 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f023 0206 	bic.w	r2, r3, #6
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b30:	e002      	b.n	8001b38 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_ADC_Start+0x160>)
 8001b42:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b4c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d129      	bne.n	8001bbc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	e020      	b.n	8001bbc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a16      	ldr	r2, [pc, #88]	; (8001bd8 <HAL_ADC_Start+0x164>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d11b      	bne.n	8001bbc <HAL_ADC_Start+0x148>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d114      	bne.n	8001bbc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	e00b      	b.n	8001bbc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f043 0210 	orr.w	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	2000000c 	.word	0x2000000c
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	40012300 	.word	0x40012300
 8001bd8:	40012000 	.word	0x40012000

08001bdc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_Start_DMA+0x1e>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e0ce      	b.n	8001d98 <HAL_ADC_Start_DMA+0x1bc>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d018      	beq.n	8001c42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c20:	4b5f      	ldr	r3, [pc, #380]	; (8001da0 <HAL_ADC_Start_DMA+0x1c4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a5f      	ldr	r2, [pc, #380]	; (8001da4 <HAL_ADC_Start_DMA+0x1c8>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	0c9a      	lsrs	r2, r3, #18
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c34:	e002      	b.n	8001c3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f9      	bne.n	8001c36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c50:	d107      	bne.n	8001c62 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c60:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	f040 8086 	bne.w	8001d7e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb0:	d106      	bne.n	8001cc0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f023 0206 	bic.w	r2, r3, #6
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
 8001cbe:	e002      	b.n	8001cc6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cce:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <HAL_ADC_Start_DMA+0x1cc>)
 8001cd0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	4a35      	ldr	r2, [pc, #212]	; (8001dac <HAL_ADC_Start_DMA+0x1d0>)
 8001cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	4a34      	ldr	r2, [pc, #208]	; (8001db0 <HAL_ADC_Start_DMA+0x1d4>)
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	4a33      	ldr	r2, [pc, #204]	; (8001db4 <HAL_ADC_Start_DMA+0x1d8>)
 8001ce8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d02:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d12:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	334c      	adds	r3, #76	; 0x4c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f000 fd1e 	bl	8002764 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10f      	bne.n	8001d54 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d129      	bne.n	8001d96 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	e020      	b.n	8001d96 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <HAL_ADC_Start_DMA+0x1dc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d11b      	bne.n	8001d96 <HAL_ADC_Start_DMA+0x1ba>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d114      	bne.n	8001d96 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	e00b      	b.n	8001d96 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	2000000c 	.word	0x2000000c
 8001da4:	431bde83 	.word	0x431bde83
 8001da8:	40012300 	.word	0x40012300
 8001dac:	080022e1 	.word	0x080022e1
 8001db0:	0800239b 	.word	0x0800239b
 8001db4:	080023b7 	.word	0x080023b7
 8001db8:	40012000 	.word	0x40012000

08001dbc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Stop_DMA+0x1a>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e048      	b.n	8001e68 <HAL_ADC_Stop_DMA+0xac>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d130      	bne.n	8001e5e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e0a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d10f      	bne.n	8001e3a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fcf8 	bl	8002814 <HAL_DMA_Abort>
 8001e24:	4603      	mov	r3, r0
 8001e26:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001e48:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1c>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e113      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x244>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b09      	cmp	r3, #9
 8001eae:	d925      	bls.n	8001efc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68d9      	ldr	r1, [r3, #12]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b1e      	subs	r3, #30
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68d9      	ldr	r1, [r3, #12]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	4603      	mov	r3, r0
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4403      	add	r3, r0
 8001eee:	3b1e      	subs	r3, #30
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	e022      	b.n	8001f42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6919      	ldr	r1, [r3, #16]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	2207      	movs	r2, #7
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6919      	ldr	r1, [r3, #16]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4403      	add	r3, r0
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d824      	bhi.n	8001f94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b05      	subs	r3, #5
 8001f5c:	221f      	movs	r2, #31
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	400a      	ands	r2, r1
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b05      	subs	r3, #5
 8001f86:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34
 8001f92:	e04c      	b.n	800202e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d824      	bhi.n	8001fe6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	3b23      	subs	r3, #35	; 0x23
 8001fae:	221f      	movs	r2, #31
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	400a      	ands	r2, r1
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b23      	subs	r3, #35	; 0x23
 8001fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe4:	e023      	b.n	800202e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b41      	subs	r3, #65	; 0x41
 8001ff8:	221f      	movs	r2, #31
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	400a      	ands	r2, r1
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	4618      	mov	r0, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	3b41      	subs	r3, #65	; 0x41
 8002022:	fa00 f203 	lsl.w	r2, r0, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800202e:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <HAL_ADC_ConfigChannel+0x250>)
 8002030:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a28      	ldr	r2, [pc, #160]	; (80020d8 <HAL_ADC_ConfigChannel+0x254>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10f      	bne.n	800205c <HAL_ADC_ConfigChannel+0x1d8>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b12      	cmp	r3, #18
 8002042:	d10b      	bne.n	800205c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_ADC_ConfigChannel+0x254>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d12b      	bne.n	80020be <HAL_ADC_ConfigChannel+0x23a>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <HAL_ADC_ConfigChannel+0x258>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d003      	beq.n	8002078 <HAL_ADC_ConfigChannel+0x1f4>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b11      	cmp	r3, #17
 8002076:	d122      	bne.n	80020be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x258>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d111      	bne.n	80020be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_ADC_ConfigChannel+0x25c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_ADC_ConfigChannel+0x260>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	0c9a      	lsrs	r2, r3, #18
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020b0:	e002      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f9      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40012300 	.word	0x40012300
 80020d8:	40012000 	.word	0x40012000
 80020dc:	10000012 	.word	0x10000012
 80020e0:	2000000c 	.word	0x2000000c
 80020e4:	431bde83 	.word	0x431bde83

080020e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020f0:	4b79      	ldr	r3, [pc, #484]	; (80022d8 <ADC_Init+0x1f0>)
 80020f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	431a      	orrs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800211c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	021a      	lsls	r2, r3, #8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002140:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6899      	ldr	r1, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	4a58      	ldr	r2, [pc, #352]	; (80022dc <ADC_Init+0x1f4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d022      	beq.n	80021c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800218e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6899      	ldr	r1, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6899      	ldr	r1, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	e00f      	b.n	80021e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0202 	bic.w	r2, r2, #2
 80021f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e1b      	ldrb	r3, [r3, #24]
 8002200:	005a      	lsls	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002222:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002232:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6859      	ldr	r1, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	3b01      	subs	r3, #1
 8002240:	035a      	lsls	r2, r3, #13
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	e007      	b.n	800225c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	3b01      	subs	r3, #1
 8002278:	051a      	lsls	r2, r3, #20
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6899      	ldr	r1, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800229e:	025a      	lsls	r2, r3, #9
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	029a      	lsls	r2, r3, #10
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40012300 	.word	0x40012300
 80022dc:	0f000001 	.word	0x0f000001

080022e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d13c      	bne.n	8002374 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d12b      	bne.n	800236c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d127      	bne.n	800236c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002334:	2b00      	cmp	r3, #0
 8002336:	d119      	bne.n	800236c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0220 	bic.w	r2, r2, #32
 8002346:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f7ff f87b 	bl	8001468 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002372:	e00e      	b.n	8002392 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fd75 	bl	8001e70 <HAL_ADC_ErrorCallback>
}
 8002386:	e004      	b.n	8002392 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff f853 	bl	8001454 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2240      	movs	r2, #64	; 0x40
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f043 0204 	orr.w	r2, r3, #4
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff fd4a 	bl	8001e70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002400:	4013      	ands	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800240c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002416:	4a04      	ldr	r2, [pc, #16]	; (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	60d3      	str	r3, [r2, #12]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <__NVIC_GetPriorityGrouping+0x18>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	f003 0307 	and.w	r3, r3, #7
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	2b00      	cmp	r3, #0
 8002458:	db0b      	blt.n	8002472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	4907      	ldr	r1, [pc, #28]	; (8002480 <__NVIC_EnableIRQ+0x38>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	2001      	movs	r0, #1
 800246a:	fa00 f202 	lsl.w	r2, r0, r2
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0a      	blt.n	80024ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	490c      	ldr	r1, [pc, #48]	; (80024d0 <__NVIC_SetPriority+0x4c>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	440b      	add	r3, r1
 80024a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ac:	e00a      	b.n	80024c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4908      	ldr	r1, [pc, #32]	; (80024d4 <__NVIC_SetPriority+0x50>)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3b04      	subs	r3, #4
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	440b      	add	r3, r1
 80024c2:	761a      	strb	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f1c3 0307 	rsb	r3, r3, #7
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf28      	it	cs
 80024f6:	2304      	movcs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <NVIC_EncodePriority+0x30>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b03      	subs	r3, #3
 8002506:	e000      	b.n	800250a <NVIC_EncodePriority+0x32>
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 32ff 	mov.w	r2, #4294967295
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	401a      	ands	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43d9      	mvns	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	4313      	orrs	r3, r2
         );
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002550:	d301      	bcc.n	8002556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002552:	2301      	movs	r3, #1
 8002554:	e00f      	b.n	8002576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <SysTick_Config+0x40>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255e:	210f      	movs	r1, #15
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	f7ff ff8e 	bl	8002484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <SysTick_Config+0x40>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <SysTick_Config+0x40>)
 8002570:	2207      	movs	r2, #7
 8002572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	e000e010 	.word	0xe000e010

08002584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff29 	bl	80023e4 <__NVIC_SetPriorityGrouping>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ac:	f7ff ff3e 	bl	800242c <__NVIC_GetPriorityGrouping>
 80025b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	6978      	ldr	r0, [r7, #20]
 80025b8:	f7ff ff8e 	bl	80024d8 <NVIC_EncodePriority>
 80025bc:	4602      	mov	r2, r0
 80025be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff5d 	bl	8002484 <__NVIC_SetPriority>
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff31 	bl	8002448 <__NVIC_EnableIRQ>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ffa2 	bl	8002540 <SysTick_Config>
 80025fc:	4603      	mov	r3, r0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff f9ba 	bl	800198c <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e099      	b.n	8002758 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002644:	e00f      	b.n	8002666 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002646:	f7ff f9a1 	bl	800198c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b05      	cmp	r3, #5
 8002652:	d908      	bls.n	8002666 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2203      	movs	r2, #3
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e078      	b.n	8002758 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e8      	bne.n	8002646 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	4b38      	ldr	r3, [pc, #224]	; (8002760 <HAL_DMA_Init+0x158>)
 8002680:	4013      	ands	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002692:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d107      	bne.n	80026d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	4313      	orrs	r3, r2
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0307 	bic.w	r3, r3, #7
 80026e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d117      	bne.n	800272a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00e      	beq.n	800272a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fadf 	bl	8002cd0 <DMA_CheckFifoParam>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2240      	movs	r2, #64	; 0x40
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002726:	2301      	movs	r3, #1
 8002728:	e016      	b.n	8002758 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fa96 	bl	8002c64 <DMA_CalcBaseAndBitshift>
 8002738:	4603      	mov	r3, r0
 800273a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	223f      	movs	r2, #63	; 0x3f
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	f010803f 	.word	0xf010803f

08002764 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_DMA_Start_IT+0x26>
 8002786:	2302      	movs	r3, #2
 8002788:	e040      	b.n	800280c <HAL_DMA_Start_IT+0xa8>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d12f      	bne.n	80027fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2202      	movs	r2, #2
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fa28 	bl	8002c08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	223f      	movs	r2, #63	; 0x3f
 80027be:	409a      	lsls	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0216 	orr.w	r2, r2, #22
 80027d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0208 	orr.w	r2, r2, #8
 80027ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e005      	b.n	800280a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002806:	2302      	movs	r3, #2
 8002808:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800280a:	7dfb      	ldrb	r3, [r7, #23]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002822:	f7ff f8b3 	bl	800198c <HAL_GetTick>
 8002826:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d008      	beq.n	8002846 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e052      	b.n	80028ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0216 	bic.w	r2, r2, #22
 8002854:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002864:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <HAL_DMA_Abort+0x62>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0208 	bic.w	r2, r2, #8
 8002884:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002896:	e013      	b.n	80028c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002898:	f7ff f878 	bl	800198c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b05      	cmp	r3, #5
 80028a4:	d90c      	bls.n	80028c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2203      	movs	r2, #3
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e015      	b.n	80028ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1e4      	bne.n	8002898 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	223f      	movs	r2, #63	; 0x3f
 80028d4:	409a      	lsls	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002900:	4b92      	ldr	r3, [pc, #584]	; (8002b4c <HAL_DMA_IRQHandler+0x258>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a92      	ldr	r2, [pc, #584]	; (8002b50 <HAL_DMA_IRQHandler+0x25c>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0a9b      	lsrs	r3, r3, #10
 800290c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	2208      	movs	r2, #8
 8002920:	409a      	lsls	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d01a      	beq.n	8002960 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0204 	bic.w	r2, r2, #4
 8002946:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	2208      	movs	r2, #8
 800294e:	409a      	lsls	r2, r3
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f043 0201 	orr.w	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	2201      	movs	r2, #1
 8002966:	409a      	lsls	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d012      	beq.n	8002996 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	2201      	movs	r2, #1
 8002984:	409a      	lsls	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	f043 0202 	orr.w	r2, r3, #2
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	2204      	movs	r2, #4
 800299c:	409a      	lsls	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d012      	beq.n	80029cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00b      	beq.n	80029cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	2204      	movs	r2, #4
 80029ba:	409a      	lsls	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f043 0204 	orr.w	r2, r3, #4
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	2210      	movs	r2, #16
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d043      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d03c      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	2210      	movs	r2, #16
 80029f0:	409a      	lsls	r2, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d018      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d108      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d024      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	4798      	blx	r3
 8002a22:	e01f      	b.n	8002a64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01b      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
 8002a34:	e016      	b.n	8002a64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d107      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0208 	bic.w	r2, r2, #8
 8002a52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	2220      	movs	r2, #32
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 808e 	beq.w	8002b92 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8086 	beq.w	8002b92 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b05      	cmp	r3, #5
 8002a9c:	d136      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0216 	bic.w	r2, r2, #22
 8002aac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002abc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <HAL_DMA_IRQHandler+0x1da>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0208 	bic.w	r2, r2, #8
 8002adc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	223f      	movs	r2, #63	; 0x3f
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d07d      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
        }
        return;
 8002b0a:	e078      	b.n	8002bfe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d01c      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d108      	bne.n	8002b3a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d030      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
 8002b38:	e02b      	b.n	8002b92 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d027      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
 8002b4a:	e022      	b.n	8002b92 <HAL_DMA_IRQHandler+0x29e>
 8002b4c:	2000000c 	.word	0x2000000c
 8002b50:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10f      	bne.n	8002b82 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0210 	bic.w	r2, r2, #16
 8002b70:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d032      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d022      	beq.n	8002bec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2205      	movs	r2, #5
 8002baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d307      	bcc.n	8002bda <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f2      	bne.n	8002bbe <HAL_DMA_IRQHandler+0x2ca>
 8002bd8:	e000      	b.n	8002bdc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bda:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
 8002bfc:	e000      	b.n	8002c00 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bfe:	bf00      	nop
    }
  }
}
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop

08002c08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d108      	bne.n	8002c48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c46:	e007      	b.n	8002c58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	60da      	str	r2, [r3, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3b10      	subs	r3, #16
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c7e:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <DMA_CalcBaseAndBitshift+0x68>)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d909      	bls.n	8002ca6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	1d1a      	adds	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ca4:	e007      	b.n	8002cb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	aaaaaaab 	.word	0xaaaaaaab
 8002ccc:	0800a7ac 	.word	0x0800a7ac

08002cd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11f      	bne.n	8002d2a <DMA_CheckFifoParam+0x5a>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d856      	bhi.n	8002d9e <DMA_CheckFifoParam+0xce>
 8002cf0:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <DMA_CheckFifoParam+0x28>)
 8002cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf6:	bf00      	nop
 8002cf8:	08002d09 	.word	0x08002d09
 8002cfc:	08002d1b 	.word	0x08002d1b
 8002d00:	08002d09 	.word	0x08002d09
 8002d04:	08002d9f 	.word	0x08002d9f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d046      	beq.n	8002da2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d18:	e043      	b.n	8002da2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d22:	d140      	bne.n	8002da6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d28:	e03d      	b.n	8002da6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d32:	d121      	bne.n	8002d78 <DMA_CheckFifoParam+0xa8>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d837      	bhi.n	8002daa <DMA_CheckFifoParam+0xda>
 8002d3a:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <DMA_CheckFifoParam+0x70>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002d51 	.word	0x08002d51
 8002d44:	08002d57 	.word	0x08002d57
 8002d48:	08002d51 	.word	0x08002d51
 8002d4c:	08002d69 	.word	0x08002d69
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      break;
 8002d54:	e030      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d025      	beq.n	8002dae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d66:	e022      	b.n	8002dae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d70:	d11f      	bne.n	8002db2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d76:	e01c      	b.n	8002db2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d903      	bls.n	8002d86 <DMA_CheckFifoParam+0xb6>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d003      	beq.n	8002d8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d84:	e018      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8a:	e015      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9c:	e00b      	b.n	8002db6 <DMA_CheckFifoParam+0xe6>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e00a      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
 8002da4:	e008      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e006      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e004      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e002      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002db2:	bf00      	nop
 8002db4:	e000      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002db6:	bf00      	nop
    }
  } 
  
  return status; 
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop

08002dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	; 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	e159      	b.n	8003098 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de4:	2201      	movs	r2, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f040 8148 	bne.w	8003092 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d005      	beq.n	8002e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d130      	bne.n	8002e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e50:	2201      	movs	r2, #1
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 0201 	and.w	r2, r3, #1
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d017      	beq.n	8002eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d123      	bne.n	8002f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	08da      	lsrs	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3208      	adds	r2, #8
 8002ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	220f      	movs	r2, #15
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	08da      	lsrs	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3208      	adds	r2, #8
 8002f06:	69b9      	ldr	r1, [r7, #24]
 8002f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0203 	and.w	r2, r3, #3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a2 	beq.w	8003092 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b57      	ldr	r3, [pc, #348]	; (80030b0 <HAL_GPIO_Init+0x2e8>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a56      	ldr	r2, [pc, #344]	; (80030b0 <HAL_GPIO_Init+0x2e8>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b54      	ldr	r3, [pc, #336]	; (80030b0 <HAL_GPIO_Init+0x2e8>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f6a:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_GPIO_Init+0x2ec>)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a49      	ldr	r2, [pc, #292]	; (80030b8 <HAL_GPIO_Init+0x2f0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d019      	beq.n	8002fca <HAL_GPIO_Init+0x202>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a48      	ldr	r2, [pc, #288]	; (80030bc <HAL_GPIO_Init+0x2f4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <HAL_GPIO_Init+0x1fe>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a47      	ldr	r2, [pc, #284]	; (80030c0 <HAL_GPIO_Init+0x2f8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_GPIO_Init+0x1fa>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a46      	ldr	r2, [pc, #280]	; (80030c4 <HAL_GPIO_Init+0x2fc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d007      	beq.n	8002fbe <HAL_GPIO_Init+0x1f6>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a45      	ldr	r2, [pc, #276]	; (80030c8 <HAL_GPIO_Init+0x300>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_GPIO_Init+0x1f2>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e008      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fba:	2307      	movs	r3, #7
 8002fbc:	e006      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e004      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e002      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	f002 0203 	and.w	r2, r2, #3
 8002fd2:	0092      	lsls	r2, r2, #2
 8002fd4:	4093      	lsls	r3, r2
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fdc:	4935      	ldr	r1, [pc, #212]	; (80030b4 <HAL_GPIO_Init+0x2ec>)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fea:	4b38      	ldr	r3, [pc, #224]	; (80030cc <HAL_GPIO_Init+0x304>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800300e:	4a2f      	ldr	r2, [pc, #188]	; (80030cc <HAL_GPIO_Init+0x304>)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003014:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_GPIO_Init+0x304>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003038:	4a24      	ldr	r2, [pc, #144]	; (80030cc <HAL_GPIO_Init+0x304>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800303e:	4b23      	ldr	r3, [pc, #140]	; (80030cc <HAL_GPIO_Init+0x304>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003062:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <HAL_GPIO_Init+0x304>)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003068:	4b18      	ldr	r3, [pc, #96]	; (80030cc <HAL_GPIO_Init+0x304>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800308c:	4a0f      	ldr	r2, [pc, #60]	; (80030cc <HAL_GPIO_Init+0x304>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3301      	adds	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	f67f aea2 	bls.w	8002de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40013800 	.word	0x40013800
 80030b8:	40020000 	.word	0x40020000
 80030bc:	40020400 	.word	0x40020400
 80030c0:	40020800 	.word	0x40020800
 80030c4:	40020c00 	.word	0x40020c00
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40013c00 	.word	0x40013c00

080030d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e12b      	b.n	800333a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe fa66 	bl	80015c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003134:	f002 fb4a 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a81      	ldr	r2, [pc, #516]	; (8003344 <HAL_I2C_Init+0x274>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d807      	bhi.n	8003154 <HAL_I2C_Init+0x84>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a80      	ldr	r2, [pc, #512]	; (8003348 <HAL_I2C_Init+0x278>)
 8003148:	4293      	cmp	r3, r2
 800314a:	bf94      	ite	ls
 800314c:	2301      	movls	r3, #1
 800314e:	2300      	movhi	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e006      	b.n	8003162 <HAL_I2C_Init+0x92>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a7d      	ldr	r2, [pc, #500]	; (800334c <HAL_I2C_Init+0x27c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	bf94      	ite	ls
 800315c:	2301      	movls	r3, #1
 800315e:	2300      	movhi	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0e7      	b.n	800333a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a78      	ldr	r2, [pc, #480]	; (8003350 <HAL_I2C_Init+0x280>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9b      	lsrs	r3, r3, #18
 8003174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_I2C_Init+0x274>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d802      	bhi.n	80031a4 <HAL_I2C_Init+0xd4>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3301      	adds	r3, #1
 80031a2:	e009      	b.n	80031b8 <HAL_I2C_Init+0xe8>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	4a69      	ldr	r2, [pc, #420]	; (8003354 <HAL_I2C_Init+0x284>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	3301      	adds	r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	430b      	orrs	r3, r1
 80031be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	495c      	ldr	r1, [pc, #368]	; (8003344 <HAL_I2C_Init+0x274>)
 80031d4:	428b      	cmp	r3, r1
 80031d6:	d819      	bhi.n	800320c <HAL_I2C_Init+0x13c>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e59      	subs	r1, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e6:	1c59      	adds	r1, r3, #1
 80031e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031ec:	400b      	ands	r3, r1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_I2C_Init+0x138>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e59      	subs	r1, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	e051      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003208:	2304      	movs	r3, #4
 800320a:	e04f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d111      	bne.n	8003238 <HAL_I2C_Init+0x168>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	440b      	add	r3, r1
 8003222:	fbb0 f3f3 	udiv	r3, r0, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e012      	b.n	800325e <HAL_I2C_Init+0x18e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	0099      	lsls	r1, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Init+0x196>
 8003262:	2301      	movs	r3, #1
 8003264:	e022      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10e      	bne.n	800328c <HAL_I2C_Init+0x1bc>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1e58      	subs	r0, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	440b      	add	r3, r1
 800327c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	e00f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	0099      	lsls	r1, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	6809      	ldr	r1, [r1, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6911      	ldr	r1, [r2, #16]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	000186a0 	.word	0x000186a0
 8003348:	001e847f 	.word	0x001e847f
 800334c:	003d08ff 	.word	0x003d08ff
 8003350:	431bde83 	.word	0x431bde83
 8003354:	10624dd3 	.word	0x10624dd3

08003358 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	461a      	mov	r2, r3
 8003364:	460b      	mov	r3, r1
 8003366:	817b      	strh	r3, [r7, #10]
 8003368:	4613      	mov	r3, r2
 800336a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800336c:	f7fe fb0e 	bl	800198c <HAL_GetTick>
 8003370:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b20      	cmp	r3, #32
 800337c:	f040 80e0 	bne.w	8003540 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	2319      	movs	r3, #25
 8003386:	2201      	movs	r2, #1
 8003388:	4970      	ldr	r1, [pc, #448]	; (800354c <HAL_I2C_Master_Transmit+0x1f4>)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 faf4 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
 8003398:	e0d3      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_I2C_Master_Transmit+0x50>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e0cc      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d007      	beq.n	80033ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2221      	movs	r2, #33	; 0x21
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2210      	movs	r2, #16
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	893a      	ldrh	r2, [r7, #8]
 80033fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a50      	ldr	r2, [pc, #320]	; (8003550 <HAL_I2C_Master_Transmit+0x1f8>)
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003410:	8979      	ldrh	r1, [r7, #10]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f996 	bl	8003748 <I2C_MasterRequestWrite>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e08d      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800343c:	e066      	b.n	800350c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	6a39      	ldr	r1, [r7, #32]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fb6e 	bl	8003b24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b04      	cmp	r3, #4
 8003454:	d107      	bne.n	8003466 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06b      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d11b      	bne.n	80034e0 <HAL_I2C_Master_Transmit+0x188>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d017      	beq.n	80034e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	6a39      	ldr	r1, [r7, #32]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fb5e 	bl	8003ba6 <I2C_WaitOnBTFFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d107      	bne.n	8003508 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e01a      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d194      	bne.n	800343e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	00100002 	.word	0x00100002
 8003550:	ffff0000 	.word	0xffff0000

08003554 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	4608      	mov	r0, r1
 800355e:	4611      	mov	r1, r2
 8003560:	461a      	mov	r2, r3
 8003562:	4603      	mov	r3, r0
 8003564:	817b      	strh	r3, [r7, #10]
 8003566:	460b      	mov	r3, r1
 8003568:	813b      	strh	r3, [r7, #8]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800356e:	f7fe fa0d 	bl	800198c <HAL_GetTick>
 8003572:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b20      	cmp	r3, #32
 800357e:	f040 80d9 	bne.w	8003734 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2319      	movs	r3, #25
 8003588:	2201      	movs	r2, #1
 800358a:	496d      	ldr	r1, [pc, #436]	; (8003740 <HAL_I2C_Mem_Write+0x1ec>)
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f9f3 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
 800359a:	e0cc      	b.n	8003736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_I2C_Mem_Write+0x56>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e0c5      	b.n	8003736 <HAL_I2C_Mem_Write+0x1e2>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d007      	beq.n	80035d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2221      	movs	r2, #33	; 0x21
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a3a      	ldr	r2, [r7, #32]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003600:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a4d      	ldr	r2, [pc, #308]	; (8003744 <HAL_I2C_Mem_Write+0x1f0>)
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003612:	88f8      	ldrh	r0, [r7, #6]
 8003614:	893a      	ldrh	r2, [r7, #8]
 8003616:	8979      	ldrh	r1, [r7, #10]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	4603      	mov	r3, r0
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f912 	bl	800384c <I2C_RequestMemoryWrite>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d052      	beq.n	80036d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e081      	b.n	8003736 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fa74 	bl	8003b24 <I2C_WaitOnTXEFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00d      	beq.n	800365e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b04      	cmp	r3, #4
 8003648:	d107      	bne.n	800365a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e06b      	b.n	8003736 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	781a      	ldrb	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b04      	cmp	r3, #4
 800369a:	d11b      	bne.n	80036d4 <HAL_I2C_Mem_Write+0x180>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d017      	beq.n	80036d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	781a      	ldrb	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1aa      	bne.n	8003632 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fa60 	bl	8003ba6 <I2C_WaitOnBTFFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00d      	beq.n	8003708 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d107      	bne.n	8003704 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003702:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e016      	b.n	8003736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	00100002 	.word	0x00100002
 8003744:	ffff0000 	.word	0xffff0000

08003748 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	460b      	mov	r3, r1
 8003756:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d006      	beq.n	8003772 <I2C_MasterRequestWrite+0x2a>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d003      	beq.n	8003772 <I2C_MasterRequestWrite+0x2a>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003770:	d108      	bne.n	8003784 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e00b      	b.n	800379c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	2b12      	cmp	r3, #18
 800378a:	d107      	bne.n	800379c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800379a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f8e5 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00d      	beq.n	80037d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c2:	d103      	bne.n	80037cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e035      	b.n	800383c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d8:	d108      	bne.n	80037ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037da:	897b      	ldrh	r3, [r7, #10]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037e8:	611a      	str	r2, [r3, #16]
 80037ea:	e01b      	b.n	8003824 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037ec:	897b      	ldrh	r3, [r7, #10]
 80037ee:	11db      	asrs	r3, r3, #7
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 0306 	and.w	r3, r3, #6
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f063 030f 	orn	r3, r3, #15
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	490e      	ldr	r1, [pc, #56]	; (8003844 <I2C_MasterRequestWrite+0xfc>)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f90b 	bl	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e010      	b.n	800383c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800381a:	897b      	ldrh	r3, [r7, #10]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4907      	ldr	r1, [pc, #28]	; (8003848 <I2C_MasterRequestWrite+0x100>)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f8fb 	bl	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	00010008 	.word	0x00010008
 8003848:	00010002 	.word	0x00010002

0800384c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	4608      	mov	r0, r1
 8003856:	4611      	mov	r1, r2
 8003858:	461a      	mov	r2, r3
 800385a:	4603      	mov	r3, r0
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	460b      	mov	r3, r1
 8003860:	813b      	strh	r3, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003874:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	2200      	movs	r2, #0
 800387e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f878 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389c:	d103      	bne.n	80038a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e05f      	b.n	800396a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038aa:	897b      	ldrh	r3, [r7, #10]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	6a3a      	ldr	r2, [r7, #32]
 80038be:	492d      	ldr	r1, [pc, #180]	; (8003974 <I2C_RequestMemoryWrite+0x128>)
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f8b0 	bl	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e04c      	b.n	800396a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	6a39      	ldr	r1, [r7, #32]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f91a 	bl	8003b24 <I2C_WaitOnTXEFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00d      	beq.n	8003912 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d107      	bne.n	800390e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e02b      	b.n	800396a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d105      	bne.n	8003924 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003918:	893b      	ldrh	r3, [r7, #8]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	611a      	str	r2, [r3, #16]
 8003922:	e021      	b.n	8003968 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003924:	893b      	ldrh	r3, [r7, #8]
 8003926:	0a1b      	lsrs	r3, r3, #8
 8003928:	b29b      	uxth	r3, r3
 800392a:	b2da      	uxtb	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	6a39      	ldr	r1, [r7, #32]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f8f4 	bl	8003b24 <I2C_WaitOnTXEFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	2b04      	cmp	r3, #4
 8003948:	d107      	bne.n	800395a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003958:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e005      	b.n	800396a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800395e:	893b      	ldrh	r3, [r7, #8]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	00010002 	.word	0x00010002

08003978 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003988:	e025      	b.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d021      	beq.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fd fffb 	bl	800198c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d116      	bne.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f043 0220 	orr.w	r2, r3, #32
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e023      	b.n	8003a1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d10d      	bne.n	80039fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	43da      	mvns	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	bf0c      	ite	eq
 80039f2:	2301      	moveq	r3, #1
 80039f4:	2300      	movne	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	e00c      	b.n	8003a16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4013      	ands	r3, r2
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bf0c      	ite	eq
 8003a0e:	2301      	moveq	r3, #1
 8003a10:	2300      	movne	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d0b6      	beq.n	800398a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a34:	e051      	b.n	8003ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a44:	d123      	bne.n	8003a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f043 0204 	orr.w	r2, r3, #4
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e046      	b.n	8003b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d021      	beq.n	8003ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7fd ff79 	bl	800198c <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d116      	bne.n	8003ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e020      	b.n	8003b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d10c      	bne.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	43da      	mvns	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4013      	ands	r3, r2
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf14      	ite	ne
 8003af6:	2301      	movne	r3, #1
 8003af8:	2300      	moveq	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	e00b      	b.n	8003b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	43da      	mvns	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d18d      	bne.n	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b30:	e02d      	b.n	8003b8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f878 	bl	8003c28 <I2C_IsAcknowledgeFailed>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e02d      	b.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d021      	beq.n	8003b8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4a:	f7fd ff1f 	bl	800198c <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d116      	bne.n	8003b8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f043 0220 	orr.w	r2, r3, #32
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e007      	b.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b98:	2b80      	cmp	r3, #128	; 0x80
 8003b9a:	d1ca      	bne.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb2:	e02d      	b.n	8003c10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f837 	bl	8003c28 <I2C_IsAcknowledgeFailed>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e02d      	b.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d021      	beq.n	8003c10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bcc:	f7fd fede 	bl	800198c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d302      	bcc.n	8003be2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d116      	bne.n	8003c10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f043 0220 	orr.w	r2, r3, #32
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e007      	b.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d1ca      	bne.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3e:	d11b      	bne.n	8003c78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f043 0204 	orr.w	r2, r3, #4
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c88:	b08f      	sub	sp, #60	; 0x3c
 8003c8a:	af0a      	add	r7, sp, #40	; 0x28
 8003c8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e10f      	b.n	8003eb8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f005 f9bc 	bl	8009030 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2203      	movs	r2, #3
 8003cbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 f875 	bl	8005dc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	687e      	ldr	r6, [r7, #4]
 8003ce4:	466d      	mov	r5, sp
 8003ce6:	f106 0410 	add.w	r4, r6, #16
 8003cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cfa:	1d33      	adds	r3, r6, #4
 8003cfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cfe:	6838      	ldr	r0, [r7, #0]
 8003d00:	f001 ff4d 	bl	8005b9e <USB_CoreInit>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e0d0      	b.n	8003eb8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f002 f863 	bl	8005de8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
 8003d26:	e04a      	b.n	8003dbe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d28:	7bfa      	ldrb	r2, [r7, #15]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	333d      	adds	r3, #61	; 0x3d
 8003d38:	2201      	movs	r2, #1
 8003d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	333c      	adds	r3, #60	; 0x3c
 8003d4c:	7bfa      	ldrb	r2, [r7, #15]
 8003d4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d50:	7bfa      	ldrb	r2, [r7, #15]
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	b298      	uxth	r0, r3
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3342      	adds	r3, #66	; 0x42
 8003d64:	4602      	mov	r2, r0
 8003d66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d68:	7bfa      	ldrb	r2, [r7, #15]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	333f      	adds	r3, #63	; 0x3f
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	3344      	adds	r3, #68	; 0x44
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3348      	adds	r3, #72	; 0x48
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3350      	adds	r3, #80	; 0x50
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d3af      	bcc.n	8003d28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	e044      	b.n	8003e58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dfa:	7bfa      	ldrb	r2, [r7, #15]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	3301      	adds	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d3b5      	bcc.n	8003dce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	687e      	ldr	r6, [r7, #4]
 8003e6a:	466d      	mov	r5, sp
 8003e6c:	f106 0410 	add.w	r4, r6, #16
 8003e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e80:	1d33      	adds	r3, r6, #4
 8003e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e84:	6838      	ldr	r0, [r7, #0]
 8003e86:	f001 ffd9 	bl	8005e3c <USB_DevInit>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e00d      	b.n	8003eb8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f003 f821 	bl	8006ef8 <USB_DevDisconnect>

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ec0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_PCD_Start+0x1c>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e020      	b.n	8003f1e <HAL_PCD_Start+0x5e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d109      	bne.n	8003f00 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d005      	beq.n	8003f00 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 ff4d 	bl	8005da4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f002 ffd1 	bl	8006eb6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f26:	b590      	push	{r4, r7, lr}
 8003f28:	b08d      	sub	sp, #52	; 0x34
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f003 f88f 	bl	8007060 <USB_GetMode>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f040 839d 	bne.w	8004684 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f002 fff3 	bl	8006f3a <USB_ReadInterrupts>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8393 	beq.w	8004682 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f002 ffea 	bl	8006f3a <USB_ReadInterrupts>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d107      	bne.n	8003f80 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f002 0202 	and.w	r2, r2, #2
 8003f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f002 ffd8 	bl	8006f3a <USB_ReadInterrupts>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d161      	bne.n	8004058 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0210 	bic.w	r2, r2, #16
 8003fa2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f003 020f 	and.w	r2, r3, #15
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	0c5b      	lsrs	r3, r3, #17
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d124      	bne.n	800401a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d035      	beq.n	8004048 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	6a38      	ldr	r0, [r7, #32]
 8003ff0:	f002 fe3e 	bl	8006c70 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004000:	441a      	add	r2, r3
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004012:	441a      	add	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	619a      	str	r2, [r3, #24]
 8004018:	e016      	b.n	8004048 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	0c5b      	lsrs	r3, r3, #17
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	2b06      	cmp	r3, #6
 8004024:	d110      	bne.n	8004048 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800402c:	2208      	movs	r2, #8
 800402e:	4619      	mov	r1, r3
 8004030:	6a38      	ldr	r0, [r7, #32]
 8004032:	f002 fe1d 	bl	8006c70 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004042:	441a      	add	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0210 	orr.w	r2, r2, #16
 8004056:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f002 ff6c 	bl	8006f3a <USB_ReadInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004068:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800406c:	d16e      	bne.n	800414c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f002 ff72 	bl	8006f60 <USB_ReadDevAllOutEpInterrupt>
 800407c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800407e:	e062      	b.n	8004146 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d057      	beq.n	800413a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f002 ff97 	bl	8006fc8 <USB_ReadDevOutEPInterrupt>
 800409a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	461a      	mov	r2, r3
 80040b4:	2301      	movs	r3, #1
 80040b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80040b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fdb0 	bl	8004c20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00c      	beq.n	80040e4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d6:	461a      	mov	r2, r3
 80040d8:	2308      	movs	r3, #8
 80040da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 feaa 	bl	8004e38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	461a      	mov	r2, r3
 80040fc:	2310      	movs	r3, #16
 80040fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004116:	461a      	mov	r2, r3
 8004118:	2320      	movs	r3, #32
 800411a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004132:	461a      	mov	r2, r3
 8004134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004138:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	3301      	adds	r3, #1
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	085b      	lsrs	r3, r3, #1
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d199      	bne.n	8004080 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f002 fef2 	bl	8006f3a <USB_ReadInterrupts>
 8004156:	4603      	mov	r3, r0
 8004158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004160:	f040 80c0 	bne.w	80042e4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f002 ff13 	bl	8006f94 <USB_ReadDevAllInEpInterrupt>
 800416e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004174:	e0b2      	b.n	80042dc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80a7 	beq.w	80042d0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f002 ff39 	bl	8007004 <USB_ReadDevInEPInterrupt>
 8004192:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d057      	beq.n	800424e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	2201      	movs	r2, #1
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69f9      	ldr	r1, [r7, #28]
 80041ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041be:	4013      	ands	r3, r2
 80041c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ce:	461a      	mov	r2, r3
 80041d0:	2301      	movs	r3, #1
 80041d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d132      	bne.n	8004242 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e0:	4613      	mov	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	3348      	adds	r3, #72	; 0x48
 80041ec:	6819      	ldr	r1, [r3, #0]
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4403      	add	r3, r0
 80041fc:	3344      	adds	r3, #68	; 0x44
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4419      	add	r1, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4403      	add	r3, r0
 8004210:	3348      	adds	r3, #72	; 0x48
 8004212:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	2b00      	cmp	r3, #0
 8004218:	d113      	bne.n	8004242 <HAL_PCD_IRQHandler+0x31c>
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	3350      	adds	r3, #80	; 0x50
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d108      	bne.n	8004242 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800423a:	461a      	mov	r2, r3
 800423c:	2101      	movs	r1, #1
 800423e:	f002 ff41 	bl	80070c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	b2db      	uxtb	r3, r3
 8004246:	4619      	mov	r1, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f004 ff72 	bl	8009132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004264:	461a      	mov	r2, r3
 8004266:	2308      	movs	r3, #8
 8004268:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	461a      	mov	r2, r3
 8004282:	2310      	movs	r3, #16
 8004284:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429c:	461a      	mov	r2, r3
 800429e:	2340      	movs	r3, #64	; 0x40
 80042a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	461a      	mov	r2, r3
 80042ba:	2302      	movs	r3, #2
 80042bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80042c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fc1b 	bl	8004b06 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	3301      	adds	r3, #1
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	085b      	lsrs	r3, r3, #1
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f47f af49 	bne.w	8004176 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f002 fe26 	bl	8006f3a <USB_ReadInterrupts>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f8:	d122      	bne.n	8004340 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004314:	2b01      	cmp	r3, #1
 8004316:	d108      	bne.n	800432a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004320:	2100      	movs	r1, #0
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fe26 	bl	8004f74 <HAL_PCDEx_LPM_Callback>
 8004328:	e002      	b.n	8004330 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f004 ff6e 	bl	800920c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800433e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f002 fdf8 	bl	8006f3a <USB_ReadInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004354:	d112      	bne.n	800437c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b01      	cmp	r3, #1
 8004364:	d102      	bne.n	800436c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f004 ff2a 	bl	80091c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800437a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f002 fdda 	bl	8006f3a <USB_ReadInterrupts>
 8004386:	4603      	mov	r3, r0
 8004388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004390:	f040 80c7 	bne.w	8004522 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2110      	movs	r1, #16
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 fea8 	bl	8006104 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043b4:	2300      	movs	r3, #0
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b8:	e056      	b.n	8004468 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c6:	461a      	mov	r2, r3
 80043c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043de:	0151      	lsls	r1, r2, #5
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	440a      	add	r2, r1
 80043e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043ec:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043fe:	0151      	lsls	r1, r2, #5
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	440a      	add	r2, r1
 8004404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004408:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800440c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441a:	461a      	mov	r2, r3
 800441c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004420:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	440a      	add	r2, r1
 8004438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800443c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004440:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004452:	0151      	lsls	r1, r2, #5
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	440a      	add	r2, r1
 8004458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800445c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004460:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	3301      	adds	r3, #1
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446e:	429a      	cmp	r2, r3
 8004470:	d3a3      	bcc.n	80043ba <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004480:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004484:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	2b00      	cmp	r3, #0
 800448c:	d016      	beq.n	80044bc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800449e:	f043 030b 	orr.w	r3, r3, #11
 80044a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044b4:	f043 030b 	orr.w	r3, r3, #11
 80044b8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ba:	e015      	b.n	80044e8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80044d2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044e2:	f043 030b 	orr.w	r3, r3, #11
 80044e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80044fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800450c:	461a      	mov	r2, r3
 800450e:	f002 fdd9 	bl	80070c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695a      	ldr	r2, [r3, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004520:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f002 fd07 	bl	8006f3a <USB_ReadInterrupts>
 800452c:	4603      	mov	r3, r0
 800452e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004536:	d124      	bne.n	8004582 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f002 fd9d 	bl	800707c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f001 fe3d 	bl	80061c6 <USB_GetDevSpeed>
 800454c:	4603      	mov	r3, r0
 800454e:	461a      	mov	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681c      	ldr	r4, [r3, #0]
 8004558:	f001 f92c 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 800455c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004562:	b2db      	uxtb	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	4620      	mov	r0, r4
 8004568:	f001 fb7a 	bl	8005c60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f004 fe08 	bl	8009182 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004580:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f002 fcd7 	bl	8006f3a <USB_ReadInterrupts>
 800458c:	4603      	mov	r3, r0
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b08      	cmp	r3, #8
 8004594:	d10a      	bne.n	80045ac <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f004 fde5 	bl	8009166 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f002 0208 	and.w	r2, r2, #8
 80045aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f002 fcc2 	bl	8006f3a <USB_ReadInterrupts>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c0:	d10f      	bne.n	80045e2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	4619      	mov	r1, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f004 fe3d 	bl	800924c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695a      	ldr	r2, [r3, #20]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80045e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f002 fca7 	bl	8006f3a <USB_ReadInterrupts>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045f6:	d10f      	bne.n	8004618 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	4619      	mov	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f004 fe10 	bl	8009228 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695a      	ldr	r2, [r3, #20]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004616:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f002 fc8c 	bl	8006f3a <USB_ReadInterrupts>
 8004622:	4603      	mov	r3, r0
 8004624:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462c:	d10a      	bne.n	8004644 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f004 fe1e 	bl	8009270 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004642:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f002 fc76 	bl	8006f3a <USB_ReadInterrupts>
 800464e:	4603      	mov	r3, r0
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b04      	cmp	r3, #4
 8004656:	d115      	bne.n	8004684 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f004 fe0e 	bl	800928c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
 8004680:	e000      	b.n	8004684 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004682:	bf00      	nop
    }
  }
}
 8004684:	3734      	adds	r7, #52	; 0x34
 8004686:	46bd      	mov	sp, r7
 8004688:	bd90      	pop	{r4, r7, pc}

0800468a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_PCD_SetAddress+0x1a>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e013      	b.n	80046cc <HAL_PCD_SetAddress+0x42>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f002 fbd4 	bl	8006e6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	4608      	mov	r0, r1
 80046de:	4611      	mov	r1, r2
 80046e0:	461a      	mov	r2, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	70fb      	strb	r3, [r7, #3]
 80046e6:	460b      	mov	r3, r1
 80046e8:	803b      	strh	r3, [r7, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da0f      	bge.n	800471a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	f003 020f 	and.w	r2, r3, #15
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	3338      	adds	r3, #56	; 0x38
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4413      	add	r3, r2
 800470e:	3304      	adds	r3, #4
 8004710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	705a      	strb	r2, [r3, #1]
 8004718:	e00f      	b.n	800473a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	f003 020f 	and.w	r2, r3, #15
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	3304      	adds	r3, #4
 8004732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004746:	883a      	ldrh	r2, [r7, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	78ba      	ldrb	r2, [r7, #2]
 8004750:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004764:	78bb      	ldrb	r3, [r7, #2]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d102      	bne.n	8004770 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_PCD_EP_Open+0xaa>
 800477a:	2302      	movs	r3, #2
 800477c:	e00e      	b.n	800479c <HAL_PCD_EP_Open+0xc8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	4618      	mov	r0, r3
 800478e:	f001 fd3f 	bl	8006210 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800479a:	7afb      	ldrb	r3, [r7, #11]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	da0f      	bge.n	80047d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	f003 020f 	and.w	r2, r3, #15
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	3338      	adds	r3, #56	; 0x38
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	4413      	add	r3, r2
 80047cc:	3304      	adds	r3, #4
 80047ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	705a      	strb	r2, [r3, #1]
 80047d6:	e00f      	b.n	80047f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	f003 020f 	and.w	r2, r3, #15
 80047de:	4613      	mov	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	4413      	add	r3, r2
 80047ee:	3304      	adds	r3, #4
 80047f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_PCD_EP_Close+0x6e>
 800480e:	2302      	movs	r3, #2
 8004810:	e00e      	b.n	8004830 <HAL_PCD_EP_Close+0x8c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	4618      	mov	r0, r3
 8004822:	f001 fd7d 	bl	8006320 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	460b      	mov	r3, r1
 8004846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004848:	7afb      	ldrb	r3, [r7, #11]
 800484a:	f003 020f 	and.w	r2, r3, #15
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	3304      	adds	r3, #4
 8004860:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800487a:	7afb      	ldrb	r3, [r7, #11]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	b2da      	uxtb	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d102      	bne.n	8004894 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004894:	7afb      	ldrb	r3, [r7, #11]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	6979      	ldr	r1, [r7, #20]
 80048ac:	f002 f858 	bl	8006960 <USB_EP0StartXfer>
 80048b0:	e008      	b.n	80048c4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	6979      	ldr	r1, [r7, #20]
 80048c0:	f001 fe0a 	bl	80064d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	460b      	mov	r3, r1
 80048d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	f003 020f 	and.w	r2, r3, #15
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048f0:	681b      	ldr	r3, [r3, #0]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
 800490a:	460b      	mov	r3, r1
 800490c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800490e:	7afb      	ldrb	r3, [r7, #11]
 8004910:	f003 020f 	and.w	r2, r3, #15
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	3338      	adds	r3, #56	; 0x38
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	3304      	adds	r3, #4
 8004924:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2200      	movs	r2, #0
 8004936:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2201      	movs	r2, #1
 800493c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800493e:	7afb      	ldrb	r3, [r7, #11]
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	b2da      	uxtb	r2, r3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d102      	bne.n	8004958 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004958:	7afb      	ldrb	r3, [r7, #11]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	6979      	ldr	r1, [r7, #20]
 8004970:	f001 fff6 	bl	8006960 <USB_EP0StartXfer>
 8004974:	e008      	b.n	8004988 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	f001 fda8 	bl	80064d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	f003 020f 	and.w	r2, r3, #15
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d901      	bls.n	80049b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e050      	b.n	8004a52 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	da0f      	bge.n	80049d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	f003 020f 	and.w	r2, r3, #15
 80049be:	4613      	mov	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	3338      	adds	r3, #56	; 0x38
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	4413      	add	r3, r2
 80049cc:	3304      	adds	r3, #4
 80049ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	705a      	strb	r2, [r3, #1]
 80049d6:	e00d      	b.n	80049f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049d8:	78fa      	ldrb	r2, [r7, #3]
 80049da:	4613      	mov	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	3304      	adds	r3, #4
 80049ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_PCD_EP_SetStall+0x82>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e01e      	b.n	8004a52 <HAL_PCD_EP_SetStall+0xc0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68f9      	ldr	r1, [r7, #12]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f002 f94d 	bl	8006cc2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	b2d9      	uxtb	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a42:	461a      	mov	r2, r3
 8004a44:	f002 fb3e 	bl	80070c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	f003 020f 	and.w	r2, r3, #15
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d901      	bls.n	8004a78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e042      	b.n	8004afe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	da0f      	bge.n	8004aa0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	f003 020f 	and.w	r2, r3, #15
 8004a86:	4613      	mov	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	3338      	adds	r3, #56	; 0x38
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	4413      	add	r3, r2
 8004a94:	3304      	adds	r3, #4
 8004a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	705a      	strb	r2, [r3, #1]
 8004a9e:	e00f      	b.n	8004ac0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	f003 020f 	and.w	r2, r3, #15
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_PCD_EP_ClrStall+0x86>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e00e      	b.n	8004afe <HAL_PCD_EP_ClrStall+0xa4>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68f9      	ldr	r1, [r7, #12]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f002 f955 	bl	8006d9e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b08a      	sub	sp, #40	; 0x28
 8004b0a:	af02      	add	r7, sp, #8
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	3338      	adds	r3, #56	; 0x38
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	4413      	add	r3, r2
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d901      	bls.n	8004b3e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e06c      	b.n	8004c18 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d902      	bls.n	8004b5a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	3303      	adds	r3, #3
 8004b5e:	089b      	lsrs	r3, r3, #2
 8004b60:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b62:	e02b      	b.n	8004bbc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	695a      	ldr	r2, [r3, #20]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d902      	bls.n	8004b80 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	3303      	adds	r3, #3
 8004b84:	089b      	lsrs	r3, r3, #2
 8004b86:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68d9      	ldr	r1, [r3, #12]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	6978      	ldr	r0, [r7, #20]
 8004ba0:	f002 f831 	bl	8006c06 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	441a      	add	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	441a      	add	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d809      	bhi.n	8004be6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d203      	bcs.n	8004be6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1be      	bne.n	8004b64 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d811      	bhi.n	8004c16 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	6939      	ldr	r1, [r7, #16]
 8004c0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c12:	4013      	ands	r3, r2
 8004c14:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3720      	adds	r7, #32
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	333c      	adds	r3, #60	; 0x3c
 8004c38:	3304      	adds	r3, #4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	f040 80a0 	bne.w	8004d98 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d015      	beq.n	8004c8e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a72      	ldr	r2, [pc, #456]	; (8004e30 <PCD_EP_OutXfrComplete_int+0x210>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	f240 80dd 	bls.w	8004e26 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80d7 	beq.w	8004e26 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c84:	461a      	mov	r2, r3
 8004c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c8a:	6093      	str	r3, [r2, #8]
 8004c8c:	e0cb      	b.n	8004e26 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2320      	movs	r3, #32
 8004ca8:	6093      	str	r3, [r2, #8]
 8004caa:	e0bc      	b.n	8004e26 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f040 80b7 	bne.w	8004e26 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a5d      	ldr	r2, [pc, #372]	; (8004e30 <PCD_EP_OutXfrComplete_int+0x210>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d90f      	bls.n	8004ce0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cdc:	6093      	str	r3, [r2, #8]
 8004cde:	e0a2      	b.n	8004e26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004cf2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	0159      	lsls	r1, r3, #5
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004d06:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4403      	add	r3, r0
 8004d16:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004d1a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d2e:	6819      	ldr	r1, [r3, #0]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4403      	add	r3, r0
 8004d3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4419      	add	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4403      	add	r3, r0
 8004d54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d58:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d114      	bne.n	8004d8a <PCD_EP_OutXfrComplete_int+0x16a>
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d108      	bne.n	8004d8a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d82:	461a      	mov	r2, r3
 8004d84:	2101      	movs	r1, #1
 8004d86:	f002 f99d 	bl	80070c4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f004 f9b3 	bl	80090fc <HAL_PCD_DataOutStageCallback>
 8004d96:	e046      	b.n	8004e26 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a26      	ldr	r2, [pc, #152]	; (8004e34 <PCD_EP_OutXfrComplete_int+0x214>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d124      	bne.n	8004dea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	461a      	mov	r2, r3
 8004db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dbc:	6093      	str	r3, [r2, #8]
 8004dbe:	e032      	b.n	8004e26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2320      	movs	r3, #32
 8004dda:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f004 f98a 	bl	80090fc <HAL_PCD_DataOutStageCallback>
 8004de8:	e01d      	b.n	8004e26 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d114      	bne.n	8004e1a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d108      	bne.n	8004e1a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e12:	461a      	mov	r2, r3
 8004e14:	2100      	movs	r1, #0
 8004e16:	f002 f955 	bl	80070c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f004 f96b 	bl	80090fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	4f54300a 	.word	0x4f54300a
 8004e34:	4f54310a 	.word	0x4f54310a

08004e38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	333c      	adds	r3, #60	; 0x3c
 8004e50:	3304      	adds	r3, #4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d90e      	bls.n	8004e8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	461a      	mov	r2, r3
 8004e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f004 f923 	bl	80090d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d90c      	bls.n	8004eb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d108      	bne.n	8004eb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004eac:	461a      	mov	r2, r3
 8004eae:	2101      	movs	r1, #1
 8004eb0:	f002 f908 	bl	80070c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	4f54300a 	.word	0x4f54300a

08004ec4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d107      	bne.n	8004ef2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ee2:	883b      	ldrh	r3, [r7, #0]
 8004ee4:	0419      	lsls	r1, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
 8004ef0:	e028      	b.n	8004f44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4413      	add	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f00:	2300      	movs	r3, #0
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e00d      	b.n	8004f22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	3340      	adds	r3, #64	; 0x40
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	4413      	add	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	73fb      	strb	r3, [r7, #15]
 8004f22:	7bfa      	ldrb	r2, [r7, #15]
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d3ec      	bcc.n	8004f06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f2c:	883b      	ldrh	r3, [r7, #0]
 8004f2e:	0418      	lsls	r0, r3, #16
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	4302      	orrs	r2, r0
 8004f3c:	3340      	adds	r3, #64	; 0x40
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	887a      	ldrh	r2, [r7, #2]
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e264      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d075      	beq.n	8005096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004faa:	4ba3      	ldr	r3, [pc, #652]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb6:	4ba0      	ldr	r3, [pc, #640]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d112      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fc2:	4b9d      	ldr	r3, [pc, #628]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fce:	d10b      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd0:	4b99      	ldr	r3, [pc, #612]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d05b      	beq.n	8005094 <HAL_RCC_OscConfig+0x108>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d157      	bne.n	8005094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e23f      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff0:	d106      	bne.n	8005000 <HAL_RCC_OscConfig+0x74>
 8004ff2:	4b91      	ldr	r3, [pc, #580]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a90      	ldr	r2, [pc, #576]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e01d      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x98>
 800500a:	4b8b      	ldr	r3, [pc, #556]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a8a      	ldr	r2, [pc, #552]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b88      	ldr	r3, [pc, #544]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a87      	ldr	r2, [pc, #540]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e00b      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005024:	4b84      	ldr	r3, [pc, #528]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a83      	ldr	r2, [pc, #524]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 800502a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b81      	ldr	r3, [pc, #516]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a80      	ldr	r2, [pc, #512]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800503a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fc fca2 	bl	800198c <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800504c:	f7fc fc9e 	bl	800198c <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	; 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e204      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505e:	4b76      	ldr	r3, [pc, #472]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0xc0>
 800506a:	e014      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506c:	f7fc fc8e 	bl	800198c <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005074:	f7fc fc8a 	bl	800198c <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	; 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e1f0      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005086:	4b6c      	ldr	r3, [pc, #432]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0xe8>
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d063      	beq.n	800516a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050a2:	4b65      	ldr	r3, [pc, #404]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ae:	4b62      	ldr	r3, [pc, #392]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d11c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ba:	4b5f      	ldr	r3, [pc, #380]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d116      	bne.n	80050f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c6:	4b5c      	ldr	r3, [pc, #368]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_RCC_OscConfig+0x152>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e1c4      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050de:	4b56      	ldr	r3, [pc, #344]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4952      	ldr	r1, [pc, #328]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f2:	e03a      	b.n	800516a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050fc:	4b4f      	ldr	r3, [pc, #316]	; (800523c <HAL_RCC_OscConfig+0x2b0>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fc fc43 	bl	800198c <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800510a:	f7fc fc3f 	bl	800198c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1a5      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511c:	4b46      	ldr	r3, [pc, #280]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005128:	4b43      	ldr	r3, [pc, #268]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4940      	ldr	r1, [pc, #256]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]
 800513c:	e015      	b.n	800516a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800513e:	4b3f      	ldr	r3, [pc, #252]	; (800523c <HAL_RCC_OscConfig+0x2b0>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fc fc22 	bl	800198c <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800514c:	f7fc fc1e 	bl	800198c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e184      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515e:	4b36      	ldr	r3, [pc, #216]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d030      	beq.n	80051d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d016      	beq.n	80051ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517e:	4b30      	ldr	r3, [pc, #192]	; (8005240 <HAL_RCC_OscConfig+0x2b4>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005184:	f7fc fc02 	bl	800198c <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800518c:	f7fc fbfe 	bl	800198c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e164      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519e:	4b26      	ldr	r3, [pc, #152]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80051a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x200>
 80051aa:	e015      	b.n	80051d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ac:	4b24      	ldr	r3, [pc, #144]	; (8005240 <HAL_RCC_OscConfig+0x2b4>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b2:	f7fc fbeb 	bl	800198c <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ba:	f7fc fbe7 	bl	800198c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e14d      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051cc:	4b1a      	ldr	r3, [pc, #104]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80051ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f0      	bne.n	80051ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80a0 	beq.w	8005326 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051e6:	2300      	movs	r3, #0
 80051e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ea:	4b13      	ldr	r3, [pc, #76]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10f      	bne.n	8005216 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	4a0e      	ldr	r2, [pc, #56]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005204:	6413      	str	r3, [r2, #64]	; 0x40
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005216:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <HAL_RCC_OscConfig+0x2b8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d121      	bne.n	8005266 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005222:	4b08      	ldr	r3, [pc, #32]	; (8005244 <HAL_RCC_OscConfig+0x2b8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a07      	ldr	r2, [pc, #28]	; (8005244 <HAL_RCC_OscConfig+0x2b8>)
 8005228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800522e:	f7fc fbad 	bl	800198c <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005234:	e011      	b.n	800525a <HAL_RCC_OscConfig+0x2ce>
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800
 800523c:	42470000 	.word	0x42470000
 8005240:	42470e80 	.word	0x42470e80
 8005244:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005248:	f7fc fba0 	bl	800198c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e106      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	4b85      	ldr	r3, [pc, #532]	; (8005470 <HAL_RCC_OscConfig+0x4e4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0f0      	beq.n	8005248 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d106      	bne.n	800527c <HAL_RCC_OscConfig+0x2f0>
 800526e:	4b81      	ldr	r3, [pc, #516]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	4a80      	ldr	r2, [pc, #512]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	6713      	str	r3, [r2, #112]	; 0x70
 800527a:	e01c      	b.n	80052b6 <HAL_RCC_OscConfig+0x32a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b05      	cmp	r3, #5
 8005282:	d10c      	bne.n	800529e <HAL_RCC_OscConfig+0x312>
 8005284:	4b7b      	ldr	r3, [pc, #492]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	4a7a      	ldr	r2, [pc, #488]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 800528a:	f043 0304 	orr.w	r3, r3, #4
 800528e:	6713      	str	r3, [r2, #112]	; 0x70
 8005290:	4b78      	ldr	r3, [pc, #480]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	4a77      	ldr	r2, [pc, #476]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	6713      	str	r3, [r2, #112]	; 0x70
 800529c:	e00b      	b.n	80052b6 <HAL_RCC_OscConfig+0x32a>
 800529e:	4b75      	ldr	r3, [pc, #468]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	4a74      	ldr	r2, [pc, #464]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	6713      	str	r3, [r2, #112]	; 0x70
 80052aa:	4b72      	ldr	r3, [pc, #456]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	4a71      	ldr	r2, [pc, #452]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 80052b0:	f023 0304 	bic.w	r3, r3, #4
 80052b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052be:	f7fc fb65 	bl	800198c <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c4:	e00a      	b.n	80052dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fc fb61 	bl	800198c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e0c5      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	4b65      	ldr	r3, [pc, #404]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ee      	beq.n	80052c6 <HAL_RCC_OscConfig+0x33a>
 80052e8:	e014      	b.n	8005314 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ea:	f7fc fb4f 	bl	800198c <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f2:	f7fc fb4b 	bl	800198c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e0af      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005308:	4b5a      	ldr	r3, [pc, #360]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ee      	bne.n	80052f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d105      	bne.n	8005326 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531a:	4b56      	ldr	r3, [pc, #344]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	4a55      	ldr	r2, [pc, #340]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 8005320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005324:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 809b 	beq.w	8005466 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005330:	4b50      	ldr	r3, [pc, #320]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 030c 	and.w	r3, r3, #12
 8005338:	2b08      	cmp	r3, #8
 800533a:	d05c      	beq.n	80053f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d141      	bne.n	80053c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005344:	4b4c      	ldr	r3, [pc, #304]	; (8005478 <HAL_RCC_OscConfig+0x4ec>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534a:	f7fc fb1f 	bl	800198c <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005352:	f7fc fb1b 	bl	800198c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e081      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005364:	4b43      	ldr	r3, [pc, #268]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f0      	bne.n	8005352 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	019b      	lsls	r3, r3, #6
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	3b01      	subs	r3, #1
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	061b      	lsls	r3, r3, #24
 8005394:	4937      	ldr	r1, [pc, #220]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800539a:	4b37      	ldr	r3, [pc, #220]	; (8005478 <HAL_RCC_OscConfig+0x4ec>)
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a0:	f7fc faf4 	bl	800198c <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a8:	f7fc faf0 	bl	800198c <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e056      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ba:	4b2e      	ldr	r3, [pc, #184]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0x41c>
 80053c6:	e04e      	b.n	8005466 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c8:	4b2b      	ldr	r3, [pc, #172]	; (8005478 <HAL_RCC_OscConfig+0x4ec>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fc fadd 	bl	800198c <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fc fad9 	bl	800198c <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e03f      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e8:	4b22      	ldr	r3, [pc, #136]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f0      	bne.n	80053d6 <HAL_RCC_OscConfig+0x44a>
 80053f4:	e037      	b.n	8005466 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e032      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <HAL_RCC_OscConfig+0x4e8>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d028      	beq.n	8005462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d121      	bne.n	8005462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d11a      	bne.n	8005462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005432:	4013      	ands	r3, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005438:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800543a:	4293      	cmp	r3, r2
 800543c:	d111      	bne.n	8005462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	3b01      	subs	r3, #1
 800544c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d107      	bne.n	8005462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800545e:	429a      	cmp	r2, r3
 8005460:	d001      	beq.n	8005466 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40007000 	.word	0x40007000
 8005474:	40023800 	.word	0x40023800
 8005478:	42470060 	.word	0x42470060

0800547c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0cc      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005490:	4b68      	ldr	r3, [pc, #416]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d90c      	bls.n	80054b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549e:	4b65      	ldr	r3, [pc, #404]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a6:	4b63      	ldr	r3, [pc, #396]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d001      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0b8      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054d0:	4b59      	ldr	r3, [pc, #356]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4a58      	ldr	r2, [pc, #352]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054e8:	4b53      	ldr	r3, [pc, #332]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4a52      	ldr	r2, [pc, #328]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f4:	4b50      	ldr	r3, [pc, #320]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	494d      	ldr	r1, [pc, #308]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d044      	beq.n	800559c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d107      	bne.n	800552a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551a:	4b47      	ldr	r3, [pc, #284]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d119      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e07f      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d003      	beq.n	800553a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005536:	2b03      	cmp	r3, #3
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800553a:	4b3f      	ldr	r3, [pc, #252]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e06f      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554a:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e067      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800555a:	4b37      	ldr	r3, [pc, #220]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f023 0203 	bic.w	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4934      	ldr	r1, [pc, #208]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 8005568:	4313      	orrs	r3, r2
 800556a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800556c:	f7fc fa0e 	bl	800198c <HAL_GetTick>
 8005570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005572:	e00a      	b.n	800558a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005574:	f7fc fa0a 	bl	800198c <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e04f      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	4b2b      	ldr	r3, [pc, #172]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 020c 	and.w	r2, r3, #12
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	429a      	cmp	r2, r3
 800559a:	d1eb      	bne.n	8005574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800559c:	4b25      	ldr	r3, [pc, #148]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d20c      	bcs.n	80055c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	4b22      	ldr	r3, [pc, #136]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b2:	4b20      	ldr	r3, [pc, #128]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e032      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d0:	4b19      	ldr	r3, [pc, #100]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4916      	ldr	r1, [pc, #88]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ee:	4b12      	ldr	r3, [pc, #72]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	490e      	ldr	r1, [pc, #56]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005602:	f000 f821 	bl	8005648 <HAL_RCC_GetSysClockFreq>
 8005606:	4602      	mov	r2, r0
 8005608:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	490a      	ldr	r1, [pc, #40]	; (800563c <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	5ccb      	ldrb	r3, [r1, r3]
 8005616:	fa22 f303 	lsr.w	r3, r2, r3
 800561a:	4a09      	ldr	r2, [pc, #36]	; (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 800561c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800561e:	4b09      	ldr	r3, [pc, #36]	; (8005644 <HAL_RCC_ClockConfig+0x1c8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f7fc f96e 	bl	8001904 <HAL_InitTick>

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40023c00 	.word	0x40023c00
 8005638:	40023800 	.word	0x40023800
 800563c:	0800a794 	.word	0x0800a794
 8005640:	2000000c 	.word	0x2000000c
 8005644:	20000010 	.word	0x20000010

08005648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005648:	b5b0      	push	{r4, r5, r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800564e:	2100      	movs	r1, #0
 8005650:	6079      	str	r1, [r7, #4]
 8005652:	2100      	movs	r1, #0
 8005654:	60f9      	str	r1, [r7, #12]
 8005656:	2100      	movs	r1, #0
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800565a:	2100      	movs	r1, #0
 800565c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800565e:	4952      	ldr	r1, [pc, #328]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005660:	6889      	ldr	r1, [r1, #8]
 8005662:	f001 010c 	and.w	r1, r1, #12
 8005666:	2908      	cmp	r1, #8
 8005668:	d00d      	beq.n	8005686 <HAL_RCC_GetSysClockFreq+0x3e>
 800566a:	2908      	cmp	r1, #8
 800566c:	f200 8094 	bhi.w	8005798 <HAL_RCC_GetSysClockFreq+0x150>
 8005670:	2900      	cmp	r1, #0
 8005672:	d002      	beq.n	800567a <HAL_RCC_GetSysClockFreq+0x32>
 8005674:	2904      	cmp	r1, #4
 8005676:	d003      	beq.n	8005680 <HAL_RCC_GetSysClockFreq+0x38>
 8005678:	e08e      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800567a:	4b4c      	ldr	r3, [pc, #304]	; (80057ac <HAL_RCC_GetSysClockFreq+0x164>)
 800567c:	60bb      	str	r3, [r7, #8]
       break;
 800567e:	e08e      	b.n	800579e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005680:	4b4b      	ldr	r3, [pc, #300]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005682:	60bb      	str	r3, [r7, #8]
      break;
 8005684:	e08b      	b.n	800579e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005686:	4948      	ldr	r1, [pc, #288]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005688:	6849      	ldr	r1, [r1, #4]
 800568a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800568e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005690:	4945      	ldr	r1, [pc, #276]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005692:	6849      	ldr	r1, [r1, #4]
 8005694:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005698:	2900      	cmp	r1, #0
 800569a:	d024      	beq.n	80056e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800569c:	4942      	ldr	r1, [pc, #264]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800569e:	6849      	ldr	r1, [r1, #4]
 80056a0:	0989      	lsrs	r1, r1, #6
 80056a2:	4608      	mov	r0, r1
 80056a4:	f04f 0100 	mov.w	r1, #0
 80056a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80056ac:	f04f 0500 	mov.w	r5, #0
 80056b0:	ea00 0204 	and.w	r2, r0, r4
 80056b4:	ea01 0305 	and.w	r3, r1, r5
 80056b8:	493d      	ldr	r1, [pc, #244]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80056ba:	fb01 f003 	mul.w	r0, r1, r3
 80056be:	2100      	movs	r1, #0
 80056c0:	fb01 f102 	mul.w	r1, r1, r2
 80056c4:	1844      	adds	r4, r0, r1
 80056c6:	493a      	ldr	r1, [pc, #232]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80056c8:	fba2 0101 	umull	r0, r1, r2, r1
 80056cc:	1863      	adds	r3, r4, r1
 80056ce:	4619      	mov	r1, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	f7fb f960 	bl	800099c <__aeabi_uldivmod>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4613      	mov	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e04a      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056e6:	4b30      	ldr	r3, [pc, #192]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	099b      	lsrs	r3, r3, #6
 80056ec:	461a      	mov	r2, r3
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	ea02 0400 	and.w	r4, r2, r0
 80056fe:	ea03 0501 	and.w	r5, r3, r1
 8005702:	4620      	mov	r0, r4
 8005704:	4629      	mov	r1, r5
 8005706:	f04f 0200 	mov.w	r2, #0
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	014b      	lsls	r3, r1, #5
 8005710:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005714:	0142      	lsls	r2, r0, #5
 8005716:	4610      	mov	r0, r2
 8005718:	4619      	mov	r1, r3
 800571a:	1b00      	subs	r0, r0, r4
 800571c:	eb61 0105 	sbc.w	r1, r1, r5
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	018b      	lsls	r3, r1, #6
 800572a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800572e:	0182      	lsls	r2, r0, #6
 8005730:	1a12      	subs	r2, r2, r0
 8005732:	eb63 0301 	sbc.w	r3, r3, r1
 8005736:	f04f 0000 	mov.w	r0, #0
 800573a:	f04f 0100 	mov.w	r1, #0
 800573e:	00d9      	lsls	r1, r3, #3
 8005740:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005744:	00d0      	lsls	r0, r2, #3
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	1912      	adds	r2, r2, r4
 800574c:	eb45 0303 	adc.w	r3, r5, r3
 8005750:	f04f 0000 	mov.w	r0, #0
 8005754:	f04f 0100 	mov.w	r1, #0
 8005758:	0299      	lsls	r1, r3, #10
 800575a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800575e:	0290      	lsls	r0, r2, #10
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4610      	mov	r0, r2
 8005766:	4619      	mov	r1, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	461a      	mov	r2, r3
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	f7fb f914 	bl	800099c <__aeabi_uldivmod>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4613      	mov	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	0c1b      	lsrs	r3, r3, #16
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	3301      	adds	r3, #1
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	fbb2 f3f3 	udiv	r3, r2, r3
 8005794:	60bb      	str	r3, [r7, #8]
      break;
 8005796:	e002      	b.n	800579e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005798:	4b04      	ldr	r3, [pc, #16]	; (80057ac <HAL_RCC_GetSysClockFreq+0x164>)
 800579a:	60bb      	str	r3, [r7, #8]
      break;
 800579c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800579e:	68bb      	ldr	r3, [r7, #8]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bdb0      	pop	{r4, r5, r7, pc}
 80057a8:	40023800 	.word	0x40023800
 80057ac:	00f42400 	.word	0x00f42400
 80057b0:	017d7840 	.word	0x017d7840

080057b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057b8:	4b03      	ldr	r3, [pc, #12]	; (80057c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ba:	681b      	ldr	r3, [r3, #0]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	2000000c 	.word	0x2000000c

080057cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057d0:	f7ff fff0 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	0a9b      	lsrs	r3, r3, #10
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	4903      	ldr	r1, [pc, #12]	; (80057f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40023800 	.word	0x40023800
 80057f0:	0800a7a4 	.word	0x0800a7a4

080057f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005818:	2b00      	cmp	r3, #0
 800581a:	d038      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800581c:	4b68      	ldr	r3, [pc, #416]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005822:	f7fc f8b3 	bl	800198c <HAL_GetTick>
 8005826:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005828:	e008      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800582a:	f7fc f8af 	bl	800198c <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e0bd      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800583c:	4b61      	ldr	r3, [pc, #388]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f0      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	071b      	lsls	r3, r3, #28
 800585a:	495a      	ldr	r1, [pc, #360]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005862:	4b57      	ldr	r3, [pc, #348]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005868:	f7fc f890 	bl	800198c <HAL_GetTick>
 800586c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005870:	f7fc f88c 	bl	800198c <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e09a      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005882:	4b50      	ldr	r3, [pc, #320]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 8083 	beq.w	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	4b48      	ldr	r3, [pc, #288]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	4a47      	ldr	r2, [pc, #284]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058aa:	6413      	str	r3, [r2, #64]	; 0x40
 80058ac:	4b45      	ldr	r3, [pc, #276]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058b8:	4b43      	ldr	r3, [pc, #268]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a42      	ldr	r2, [pc, #264]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058c4:	f7fc f862 	bl	800198c <HAL_GetTick>
 80058c8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058cc:	f7fc f85e 	bl	800198c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e06c      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058de:	4b3a      	ldr	r3, [pc, #232]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058ea:	4b36      	ldr	r3, [pc, #216]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d02f      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	429a      	cmp	r2, r3
 8005906:	d028      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005908:	4b2e      	ldr	r3, [pc, #184]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005910:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005912:	4b2e      	ldr	r3, [pc, #184]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800591e:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005924:	4b27      	ldr	r3, [pc, #156]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b01      	cmp	r3, #1
 800592e:	d114      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005930:	f7fc f82c 	bl	800198c <HAL_GetTick>
 8005934:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005936:	e00a      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005938:	f7fc f828 	bl	800198c <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	f241 3288 	movw	r2, #5000	; 0x1388
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e034      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0ee      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005966:	d10d      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005968:	4b16      	ldr	r3, [pc, #88]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597c:	4911      	ldr	r1, [pc, #68]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597e:	4313      	orrs	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
 8005982:	e005      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4a0e      	ldr	r2, [pc, #56]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800598e:	6093      	str	r3, [r2, #8]
 8005990:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599c:	4909      	ldr	r1, [pc, #36]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	7d1a      	ldrb	r2, [r3, #20]
 80059b2:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80059b4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	42470068 	.word	0x42470068
 80059c4:	40023800 	.word	0x40023800
 80059c8:	40007000 	.word	0x40007000
 80059cc:	42470e40 	.word	0x42470e40
 80059d0:	424711e0 	.word	0x424711e0

080059d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e083      	b.n	8005aee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	7f5b      	ldrb	r3, [r3, #29]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d105      	bne.n	80059fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fb fe2e 	bl	8001658 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	22ca      	movs	r2, #202	; 0xca
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2253      	movs	r2, #83	; 0x53
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f897 	bl	8005b46 <RTC_EnterInitMode>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	22ff      	movs	r2, #255	; 0xff
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2204      	movs	r2, #4
 8005a2a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e05e      	b.n	8005aee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a42:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6899      	ldr	r1, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	68d2      	ldr	r2, [r2, #12]
 8005a6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6919      	ldr	r1, [r3, #16]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	041a      	lsls	r2, r3, #16
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a8e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10e      	bne.n	8005abc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f829 	bl	8005af6 <HAL_RTC_WaitForSynchro>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	22ff      	movs	r2, #255	; 0xff
 8005ab0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e018      	b.n	8005aee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	22ff      	movs	r2, #255	; 0xff
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005aec:	2300      	movs	r3, #0
  }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b10:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b12:	f7fb ff3b 	bl	800198c <HAL_GetTick>
 8005b16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005b18:	e009      	b.n	8005b2e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b1a:	f7fb ff37 	bl	800198c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b28:	d901      	bls.n	8005b2e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e007      	b.n	8005b3e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0ee      	beq.n	8005b1a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d119      	bne.n	8005b94 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f04f 32ff 	mov.w	r2, #4294967295
 8005b68:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b6a:	f7fb ff0f 	bl	800198c <HAL_GetTick>
 8005b6e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005b70:	e009      	b.n	8005b86 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b72:	f7fb ff0b 	bl	800198c <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b80:	d901      	bls.n	8005b86 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e007      	b.n	8005b96 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0ee      	beq.n	8005b72 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	f107 001c 	add.w	r0, r7, #28
 8005bac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d122      	bne.n	8005bfc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d105      	bne.n	8005bf0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 fac5 	bl	8007180 <USB_CoreReset>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]
 8005bfa:	e01a      	b.n	8005c32 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 fab9 	bl	8007180 <USB_CoreReset>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
 8005c24:	e005      	b.n	8005c32 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d10b      	bne.n	8005c50 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f043 0206 	orr.w	r2, r3, #6
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f043 0220 	orr.w	r2, r3, #32
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c5c:	b004      	add	sp, #16
 8005c5e:	4770      	bx	lr

08005c60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d165      	bne.n	8005d40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4a41      	ldr	r2, [pc, #260]	; (8005d7c <USB_SetTurnaroundTime+0x11c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d906      	bls.n	8005c8a <USB_SetTurnaroundTime+0x2a>
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4a40      	ldr	r2, [pc, #256]	; (8005d80 <USB_SetTurnaroundTime+0x120>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d202      	bcs.n	8005c8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c84:	230f      	movs	r3, #15
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e062      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4a3c      	ldr	r2, [pc, #240]	; (8005d80 <USB_SetTurnaroundTime+0x120>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d306      	bcc.n	8005ca0 <USB_SetTurnaroundTime+0x40>
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4a3b      	ldr	r2, [pc, #236]	; (8005d84 <USB_SetTurnaroundTime+0x124>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d202      	bcs.n	8005ca0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c9a:	230e      	movs	r3, #14
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e057      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4a38      	ldr	r2, [pc, #224]	; (8005d84 <USB_SetTurnaroundTime+0x124>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d306      	bcc.n	8005cb6 <USB_SetTurnaroundTime+0x56>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4a37      	ldr	r2, [pc, #220]	; (8005d88 <USB_SetTurnaroundTime+0x128>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d202      	bcs.n	8005cb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005cb0:	230d      	movs	r3, #13
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	e04c      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4a33      	ldr	r2, [pc, #204]	; (8005d88 <USB_SetTurnaroundTime+0x128>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d306      	bcc.n	8005ccc <USB_SetTurnaroundTime+0x6c>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4a32      	ldr	r2, [pc, #200]	; (8005d8c <USB_SetTurnaroundTime+0x12c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d802      	bhi.n	8005ccc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e041      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4a2f      	ldr	r2, [pc, #188]	; (8005d8c <USB_SetTurnaroundTime+0x12c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d906      	bls.n	8005ce2 <USB_SetTurnaroundTime+0x82>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4a2e      	ldr	r2, [pc, #184]	; (8005d90 <USB_SetTurnaroundTime+0x130>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d802      	bhi.n	8005ce2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005cdc:	230b      	movs	r3, #11
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e036      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4a2a      	ldr	r2, [pc, #168]	; (8005d90 <USB_SetTurnaroundTime+0x130>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d906      	bls.n	8005cf8 <USB_SetTurnaroundTime+0x98>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4a29      	ldr	r2, [pc, #164]	; (8005d94 <USB_SetTurnaroundTime+0x134>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d802      	bhi.n	8005cf8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005cf2:	230a      	movs	r3, #10
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	e02b      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <USB_SetTurnaroundTime+0x134>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d906      	bls.n	8005d0e <USB_SetTurnaroundTime+0xae>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4a25      	ldr	r2, [pc, #148]	; (8005d98 <USB_SetTurnaroundTime+0x138>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d202      	bcs.n	8005d0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005d08:	2309      	movs	r3, #9
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	e020      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	4a21      	ldr	r2, [pc, #132]	; (8005d98 <USB_SetTurnaroundTime+0x138>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d306      	bcc.n	8005d24 <USB_SetTurnaroundTime+0xc4>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4a20      	ldr	r2, [pc, #128]	; (8005d9c <USB_SetTurnaroundTime+0x13c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d802      	bhi.n	8005d24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005d1e:	2308      	movs	r3, #8
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	e015      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4a1d      	ldr	r2, [pc, #116]	; (8005d9c <USB_SetTurnaroundTime+0x13c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d906      	bls.n	8005d3a <USB_SetTurnaroundTime+0xda>
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <USB_SetTurnaroundTime+0x140>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d202      	bcs.n	8005d3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d34:	2307      	movs	r3, #7
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e00a      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d3a:	2306      	movs	r3, #6
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	e007      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d46:	2309      	movs	r3, #9
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	e001      	b.n	8005d50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d4c:	2309      	movs	r3, #9
 8005d4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	029b      	lsls	r3, r3, #10
 8005d64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	00d8acbf 	.word	0x00d8acbf
 8005d80:	00e4e1c0 	.word	0x00e4e1c0
 8005d84:	00f42400 	.word	0x00f42400
 8005d88:	01067380 	.word	0x01067380
 8005d8c:	011a499f 	.word	0x011a499f
 8005d90:	01312cff 	.word	0x01312cff
 8005d94:	014ca43f 	.word	0x014ca43f
 8005d98:	016e3600 	.word	0x016e3600
 8005d9c:	01a6ab1f 	.word	0x01a6ab1f
 8005da0:	01e84800 	.word	0x01e84800

08005da4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f043 0201 	orr.w	r2, r3, #1
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f023 0201 	bic.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d106      	bne.n	8005e14 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60da      	str	r2, [r3, #12]
 8005e12:	e00b      	b.n	8005e2c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60da      	str	r2, [r3, #12]
 8005e26:	e001      	b.n	8005e2c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e003      	b.n	8005e34 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005e2c:	2032      	movs	r0, #50	; 0x32
 8005e2e:	f7fb fdb9 	bl	80019a4 <HAL_Delay>

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b086      	sub	sp, #24
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e009      	b.n	8005e70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	3340      	adds	r3, #64	; 0x40
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	2200      	movs	r2, #0
 8005e68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2b0e      	cmp	r3, #14
 8005e74:	d9f2      	bls.n	8005e5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d11c      	bne.n	8005eb6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8a:	f043 0302 	orr.w	r3, r3, #2
 8005e8e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38
 8005eb4:	e00b      	b.n	8005ece <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee8:	461a      	mov	r2, r3
 8005eea:	680b      	ldr	r3, [r1, #0]
 8005eec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d10c      	bne.n	8005f0e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005efa:	2100      	movs	r1, #0
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f949 	bl	8006194 <USB_SetDevSpeed>
 8005f02:	e008      	b.n	8005f16 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f04:	2101      	movs	r1, #1
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f944 	bl	8006194 <USB_SetDevSpeed>
 8005f0c:	e003      	b.n	8005f16 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f0e:	2103      	movs	r1, #3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f93f 	bl	8006194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f16:	2110      	movs	r1, #16
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f8f3 	bl	8006104 <USB_FlushTxFifo>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f911 	bl	8006150 <USB_FlushRxFifo>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f56:	461a      	mov	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	e043      	b.n	8005fea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f78:	d118      	bne.n	8005fac <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	e013      	b.n	8005fbe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e008      	b.n	8005fbe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	461a      	mov	r2, r3
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d3b7      	bcc.n	8005f62 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	e043      	b.n	8006080 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800600a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800600e:	d118      	bne.n	8006042 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	461a      	mov	r2, r3
 8006024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	e013      	b.n	8006054 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	461a      	mov	r2, r3
 800603a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e008      	b.n	8006054 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604e:	461a      	mov	r2, r3
 8006050:	2300      	movs	r3, #0
 8006052:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006060:	461a      	mov	r2, r3
 8006062:	2300      	movs	r3, #0
 8006064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006072:	461a      	mov	r2, r3
 8006074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	429a      	cmp	r2, r3
 8006086:	d3b7      	bcc.n	8005ff8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800609a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d105      	bne.n	80060bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f043 0210 	orr.w	r2, r3, #16
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <USB_DevInit+0x2c4>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	f043 0208 	orr.w	r2, r3, #8
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d107      	bne.n	80060f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060e8:	f043 0304 	orr.w	r3, r3, #4
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060fc:	b004      	add	sp, #16
 80060fe:	4770      	bx	lr
 8006100:	803c3800 	.word	0x803c3800

08006104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	019b      	lsls	r3, r3, #6
 8006116:	f043 0220 	orr.w	r2, r3, #32
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3301      	adds	r3, #1
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4a09      	ldr	r2, [pc, #36]	; (800614c <USB_FlushTxFifo+0x48>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d901      	bls.n	8006130 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e006      	b.n	800613e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b20      	cmp	r3, #32
 800613a:	d0f0      	beq.n	800611e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	00030d40 	.word	0x00030d40

08006150 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2210      	movs	r2, #16
 8006160:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3301      	adds	r3, #1
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4a09      	ldr	r2, [pc, #36]	; (8006190 <USB_FlushRxFifo+0x40>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e006      	b.n	8006182 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b10      	cmp	r3, #16
 800617e:	d0f0      	beq.n	8006162 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	00030d40 	.word	0x00030d40

08006194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	68f9      	ldr	r1, [r7, #12]
 80061b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061b4:	4313      	orrs	r3, r2
 80061b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b087      	sub	sp, #28
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 0306 	and.w	r3, r3, #6
 80061de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80061e6:	2300      	movs	r3, #0
 80061e8:	75fb      	strb	r3, [r7, #23]
 80061ea:	e00a      	b.n	8006202 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d002      	beq.n	80061f8 <USB_GetDevSpeed+0x32>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b06      	cmp	r3, #6
 80061f6:	d102      	bne.n	80061fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061f8:	2302      	movs	r3, #2
 80061fa:	75fb      	strb	r3, [r7, #23]
 80061fc:	e001      	b.n	8006202 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061fe:	230f      	movs	r3, #15
 8006200:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006202:	7dfb      	ldrb	r3, [r7, #23]
}
 8006204:	4618      	mov	r0, r3
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	785b      	ldrb	r3, [r3, #1]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d13a      	bne.n	80062a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	2101      	movs	r1, #1
 800623e:	fa01 f303 	lsl.w	r3, r1, r3
 8006242:	b29b      	uxth	r3, r3
 8006244:	68f9      	ldr	r1, [r7, #12]
 8006246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800624a:	4313      	orrs	r3, r2
 800624c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d155      	bne.n	8006310 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	78db      	ldrb	r3, [r3, #3]
 800627e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006280:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	059b      	lsls	r3, r3, #22
 8006286:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006288:	4313      	orrs	r3, r2
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	440a      	add	r2, r1
 8006292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e036      	b.n	8006310 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a8:	69da      	ldr	r2, [r3, #28]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	2101      	movs	r1, #1
 80062b4:	fa01 f303 	lsl.w	r3, r1, r3
 80062b8:	041b      	lsls	r3, r3, #16
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062c0:	4313      	orrs	r3, r2
 80062c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d11a      	bne.n	8006310 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	78db      	ldrb	r3, [r3, #3]
 80062f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062f6:	430b      	orrs	r3, r1
 80062f8:	4313      	orrs	r3, r2
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	440a      	add	r2, r1
 8006302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800630a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
	...

08006320 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d161      	bne.n	8006400 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800634e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006352:	d11f      	bne.n	8006394 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006372:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006392:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	2101      	movs	r1, #1
 80063a6:	fa01 f303 	lsl.w	r3, r1, r3
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	68f9      	ldr	r1, [r7, #12]
 80063b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063b4:	4013      	ands	r3, r2
 80063b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	2101      	movs	r1, #1
 80063ca:	fa01 f303 	lsl.w	r3, r1, r3
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	43db      	mvns	r3, r3
 80063d2:	68f9      	ldr	r1, [r7, #12]
 80063d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d8:	4013      	ands	r3, r2
 80063da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	0159      	lsls	r1, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	440b      	add	r3, r1
 80063f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f6:	4619      	mov	r1, r3
 80063f8:	4b35      	ldr	r3, [pc, #212]	; (80064d0 <USB_DeactivateEndpoint+0x1b0>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]
 80063fe:	e060      	b.n	80064c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006416:	d11f      	bne.n	8006458 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	440a      	add	r2, r1
 800642e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006432:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006436:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006456:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	2101      	movs	r1, #1
 800646a:	fa01 f303 	lsl.w	r3, r1, r3
 800646e:	041b      	lsls	r3, r3, #16
 8006470:	43db      	mvns	r3, r3
 8006472:	68f9      	ldr	r1, [r7, #12]
 8006474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006478:	4013      	ands	r3, r2
 800647a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	2101      	movs	r1, #1
 800648e:	fa01 f303 	lsl.w	r3, r1, r3
 8006492:	041b      	lsls	r3, r3, #16
 8006494:	43db      	mvns	r3, r3
 8006496:	68f9      	ldr	r1, [r7, #12]
 8006498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800649c:	4013      	ands	r3, r2
 800649e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	0159      	lsls	r1, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	440b      	add	r3, r1
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	4619      	mov	r1, r3
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <USB_DeactivateEndpoint+0x1b4>)
 80064be:	4013      	ands	r3, r2
 80064c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	ec337800 	.word	0xec337800
 80064d4:	eff37800 	.word	0xeff37800

080064d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08a      	sub	sp, #40	; 0x28
 80064dc:	af02      	add	r7, sp, #8
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	4613      	mov	r3, r2
 80064e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	f040 815c 	bne.w	80067b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d132      	bne.n	8006568 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800651c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006520:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006524:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	0151      	lsls	r1, r2, #5
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	440a      	add	r2, r1
 800653c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006544:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	0151      	lsls	r1, r2, #5
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	440a      	add	r2, r1
 800655c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006560:	0cdb      	lsrs	r3, r3, #19
 8006562:	04db      	lsls	r3, r3, #19
 8006564:	6113      	str	r3, [r2, #16]
 8006566:	e074      	b.n	8006652 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	440a      	add	r2, r1
 800657e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006582:	0cdb      	lsrs	r3, r3, #19
 8006584:	04db      	lsls	r3, r3, #19
 8006586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b8:	691a      	ldr	r2, [r3, #16]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6959      	ldr	r1, [r3, #20]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	440b      	add	r3, r1
 80065c4:	1e59      	subs	r1, r3, #1
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80065ce:	04d9      	lsls	r1, r3, #19
 80065d0:	4b9d      	ldr	r3, [pc, #628]	; (8006848 <USB_EPStartXfer+0x370>)
 80065d2:	400b      	ands	r3, r1
 80065d4:	69b9      	ldr	r1, [r7, #24]
 80065d6:	0148      	lsls	r0, r1, #5
 80065d8:	69f9      	ldr	r1, [r7, #28]
 80065da:	4401      	add	r1, r0
 80065dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065e0:	4313      	orrs	r3, r2
 80065e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f0:	691a      	ldr	r2, [r3, #16]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065fa:	69b9      	ldr	r1, [r7, #24]
 80065fc:	0148      	lsls	r0, r1, #5
 80065fe:	69f9      	ldr	r1, [r7, #28]
 8006600:	4401      	add	r1, r0
 8006602:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006606:	4313      	orrs	r3, r2
 8006608:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	78db      	ldrb	r3, [r3, #3]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d11f      	bne.n	8006652 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	0151      	lsls	r1, r2, #5
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	440a      	add	r2, r1
 8006628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006630:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	0151      	lsls	r1, r2, #5
 8006644:	69fa      	ldr	r2, [r7, #28]
 8006646:	440a      	add	r2, r1
 8006648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800664c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006650:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d14b      	bne.n	80066f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666c:	461a      	mov	r2, r3
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	78db      	ldrb	r3, [r3, #3]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d128      	bne.n	80066ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d110      	bne.n	80066ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	e00f      	b.n	80066ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	0151      	lsls	r1, r2, #5
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	440a      	add	r2, r1
 80066c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	e12f      	b.n	8006950 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800670e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	78db      	ldrb	r3, [r3, #3]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d015      	beq.n	8006744 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8117 	beq.w	8006950 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	2101      	movs	r1, #1
 8006734:	fa01 f303 	lsl.w	r3, r1, r3
 8006738:	69f9      	ldr	r1, [r7, #28]
 800673a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800673e:	4313      	orrs	r3, r2
 8006740:	634b      	str	r3, [r1, #52]	; 0x34
 8006742:	e105      	b.n	8006950 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006750:	2b00      	cmp	r3, #0
 8006752:	d110      	bne.n	8006776 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	0151      	lsls	r1, r2, #5
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	440a      	add	r2, r1
 800676a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	e00f      	b.n	8006796 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	440a      	add	r2, r1
 800678c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006794:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	68d9      	ldr	r1, [r3, #12]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	b298      	uxth	r0, r3
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	4603      	mov	r3, r0
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 fa2b 	bl	8006c06 <USB_WritePacket>
 80067b0:	e0ce      	b.n	8006950 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067cc:	0cdb      	lsrs	r3, r3, #19
 80067ce:	04db      	lsls	r3, r3, #19
 80067d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d126      	bne.n	800684c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006814:	69b9      	ldr	r1, [r7, #24]
 8006816:	0148      	lsls	r0, r1, #5
 8006818:	69f9      	ldr	r1, [r7, #28]
 800681a:	4401      	add	r1, r0
 800681c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006820:	4313      	orrs	r3, r2
 8006822:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	0151      	lsls	r1, r2, #5
 8006836:	69fa      	ldr	r2, [r7, #28]
 8006838:	440a      	add	r2, r1
 800683a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800683e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006842:	6113      	str	r3, [r2, #16]
 8006844:	e036      	b.n	80068b4 <USB_EPStartXfer+0x3dc>
 8006846:	bf00      	nop
 8006848:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	695a      	ldr	r2, [r3, #20]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4413      	add	r3, r2
 8006856:	1e5a      	subs	r2, r3, #1
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006860:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	8afb      	ldrh	r3, [r7, #22]
 8006872:	04d9      	lsls	r1, r3, #19
 8006874:	4b39      	ldr	r3, [pc, #228]	; (800695c <USB_EPStartXfer+0x484>)
 8006876:	400b      	ands	r3, r1
 8006878:	69b9      	ldr	r1, [r7, #24]
 800687a:	0148      	lsls	r0, r1, #5
 800687c:	69f9      	ldr	r1, [r7, #28]
 800687e:	4401      	add	r1, r0
 8006880:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006884:	4313      	orrs	r3, r2
 8006886:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	8af9      	ldrh	r1, [r7, #22]
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a4:	69b9      	ldr	r1, [r7, #24]
 80068a6:	0148      	lsls	r0, r1, #5
 80068a8:	69f9      	ldr	r1, [r7, #28]
 80068aa:	4401      	add	r1, r0
 80068ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068b0:	4313      	orrs	r3, r2
 80068b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068b4:	79fb      	ldrb	r3, [r7, #7]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d10d      	bne.n	80068d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d009      	beq.n	80068d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	68d9      	ldr	r1, [r3, #12]
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d2:	460a      	mov	r2, r1
 80068d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	78db      	ldrb	r3, [r3, #3]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d128      	bne.n	8006930 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d110      	bne.n	8006910 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006908:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	e00f      	b.n	8006930 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	440a      	add	r2, r1
 8006926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800692e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800694a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800694e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	1ff80000 	.word	0x1ff80000

08006960 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	4613      	mov	r3, r2
 800696c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	785b      	ldrb	r3, [r3, #1]
 800697c:	2b01      	cmp	r3, #1
 800697e:	f040 80cd 	bne.w	8006b1c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d132      	bne.n	80069f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e8:	0cdb      	lsrs	r3, r3, #19
 80069ea:	04db      	lsls	r3, r3, #19
 80069ec:	6113      	str	r3, [r2, #16]
 80069ee:	e04e      	b.n	8006a8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	0151      	lsls	r1, r2, #5
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	440a      	add	r2, r1
 8006a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0a:	0cdb      	lsrs	r3, r3, #19
 8006a0c:	04db      	lsls	r3, r3, #19
 8006a0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a32:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	695a      	ldr	r2, [r3, #20]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d903      	bls.n	8006a48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a7e:	6939      	ldr	r1, [r7, #16]
 8006a80:	0148      	lsls	r0, r1, #5
 8006a82:	6979      	ldr	r1, [r7, #20]
 8006a84:	4401      	add	r1, r0
 8006a86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d11e      	bne.n	8006ad2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	e092      	b.n	8006bf8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006af0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d07e      	beq.n	8006bf8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b10:	6979      	ldr	r1, [r7, #20]
 8006b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b16:	4313      	orrs	r3, r2
 8006b18:	634b      	str	r3, [r1, #52]	; 0x34
 8006b1a:	e06d      	b.n	8006bf8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b36:	0cdb      	lsrs	r3, r3, #19
 8006b38:	04db      	lsls	r3, r3, #19
 8006b3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	0151      	lsls	r1, r2, #5
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	440a      	add	r2, r1
 8006b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b5e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ba6:	6939      	ldr	r1, [r7, #16]
 8006ba8:	0148      	lsls	r0, r1, #5
 8006baa:	6979      	ldr	r1, [r7, #20]
 8006bac:	4401      	add	r1, r0
 8006bae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d10d      	bne.n	8006bd8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d009      	beq.n	8006bd8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	68d9      	ldr	r1, [r3, #12]
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd4:	460a      	mov	r2, r1
 8006bd6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b089      	sub	sp, #36	; 0x24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	4611      	mov	r1, r2
 8006c12:	461a      	mov	r2, r3
 8006c14:	460b      	mov	r3, r1
 8006c16:	71fb      	strb	r3, [r7, #7]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006c24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d11a      	bne.n	8006c62 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c2c:	88bb      	ldrh	r3, [r7, #4]
 8006c2e:	3303      	adds	r3, #3
 8006c30:	089b      	lsrs	r3, r3, #2
 8006c32:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c34:	2300      	movs	r3, #0
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	e00f      	b.n	8006c5a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	031a      	lsls	r2, r3, #12
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c46:	461a      	mov	r2, r3
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	3304      	adds	r3, #4
 8006c52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	3301      	adds	r3, #1
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d3eb      	bcc.n	8006c3a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3724      	adds	r7, #36	; 0x24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b089      	sub	sp, #36	; 0x24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006c86:	88fb      	ldrh	r3, [r7, #6]
 8006c88:	3303      	adds	r3, #3
 8006c8a:	089b      	lsrs	r3, r3, #2
 8006c8c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	e00b      	b.n	8006cac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	61bb      	str	r3, [r7, #24]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d3ef      	bcc.n	8006c94 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006cb4:	69fb      	ldr	r3, [r7, #28]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3724      	adds	r7, #36	; 0x24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	785b      	ldrb	r3, [r3, #1]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d12c      	bne.n	8006d38 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	db12      	blt.n	8006d16 <USB_EPSetStall+0x54>
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00f      	beq.n	8006d16 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	0151      	lsls	r1, r2, #5
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	440a      	add	r2, r1
 8006d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d14:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	0151      	lsls	r1, r2, #5
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	440a      	add	r2, r1
 8006d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	e02b      	b.n	8006d90 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	db12      	blt.n	8006d70 <USB_EPSetStall+0xae>
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00f      	beq.n	8006d70 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d6e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	0151      	lsls	r1, r2, #5
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	440a      	add	r2, r1
 8006d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d128      	bne.n	8006e0c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dd8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	78db      	ldrb	r3, [r3, #3]
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d003      	beq.n	8006dea <USB_EPClearStall+0x4c>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	78db      	ldrb	r3, [r3, #3]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d138      	bne.n	8006e5c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	0151      	lsls	r1, r2, #5
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	440a      	add	r2, r1
 8006e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	e027      	b.n	8006e5c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	78db      	ldrb	r3, [r3, #3]
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d003      	beq.n	8006e3c <USB_EPClearStall+0x9e>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	78db      	ldrb	r3, [r3, #3]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d10f      	bne.n	8006e5c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e8c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b085      	sub	sp, #20
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ed0:	f023 0303 	bic.w	r3, r3, #3
 8006ed4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ee4:	f023 0302 	bic.w	r3, r3, #2
 8006ee8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f12:	f023 0303 	bic.w	r3, r3, #3
 8006f16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f26:	f043 0302 	orr.w	r3, r3, #2
 8006f2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f52:	68fb      	ldr	r3, [r7, #12]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4013      	ands	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	0c1b      	lsrs	r3, r3, #16
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	b29b      	uxth	r3, r3
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	fa22 f303 	lsr.w	r3, r2, r3
 8007034:	01db      	lsls	r3, r3, #7
 8007036:	b2db      	uxtb	r3, r3
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800703e:	78fb      	ldrb	r3, [r7, #3]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4013      	ands	r3, r2
 8007050:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007052:	68bb      	ldr	r3, [r7, #8]
}
 8007054:	4618      	mov	r0, r3
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	f003 0301 	and.w	r3, r3, #1
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007096:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800709a:	f023 0307 	bic.w	r3, r3, #7
 800709e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	460b      	mov	r3, r1
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	333c      	adds	r3, #60	; 0x3c
 80070da:	3304      	adds	r3, #4
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	4a26      	ldr	r2, [pc, #152]	; (800717c <USB_EP0_OutStart+0xb8>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d90a      	bls.n	80070fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f8:	d101      	bne.n	80070fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e037      	b.n	800716e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007104:	461a      	mov	r2, r3
 8007106:	2300      	movs	r3, #0
 8007108:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800711c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800712c:	f043 0318 	orr.w	r3, r3, #24
 8007130:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007140:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007144:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007146:	7afb      	ldrb	r3, [r7, #11]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d10f      	bne.n	800716c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007152:	461a      	mov	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007166:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800716a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	371c      	adds	r7, #28
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	4f54300a 	.word	0x4f54300a

08007180 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4a13      	ldr	r2, [pc, #76]	; (80071e4 <USB_CoreReset+0x64>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d901      	bls.n	800719e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e01b      	b.n	80071d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	daf2      	bge.n	800718c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f043 0201 	orr.w	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3301      	adds	r3, #1
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4a09      	ldr	r2, [pc, #36]	; (80071e4 <USB_CoreReset+0x64>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d901      	bls.n	80071c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e006      	b.n	80071d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d0f0      	beq.n	80071b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	00030d40 	.word	0x00030d40

080071e8 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 80071f4:	2044      	movs	r0, #68	; 0x44
 80071f6:	f002 f9e1 	bl	80095bc <USBD_static_malloc>
 80071fa:	4602      	mov	r2, r0
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 800720c:	2303      	movs	r3, #3
 800720e:	e016      	b.n	800723e <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007216:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	2202      	movs	r2, #2
 800721c:	2181      	movs	r1, #129	; 0x81
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f002 f8a9 	bl	8009376 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 8007224:	2340      	movs	r3, #64	; 0x40
 8007226:	2202      	movs	r2, #2
 8007228:	2101      	movs	r1, #1
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f002 f8a3 	bl	8009376 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8007230:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 8007232:	2340      	movs	r3, #64	; 0x40
 8007234:	2101      	movs	r1, #1
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f002 f98c 	bl	8009554 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800723c:	2300      	movs	r3, #0
  }
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 8007252:	2181      	movs	r1, #129	; 0x81
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f002 f8b4 	bl	80093c2 <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 800725a:	2101      	movs	r1, #1
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f002 f8b0 	bl	80093c2 <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800727e:	2b00      	cmp	r3, #0
 8007280:	d007      	beq.n	8007292 <USBD_Midi_Setup+0x26>
 8007282:	2b20      	cmp	r3, #32
 8007284:	d10b      	bne.n	800729e <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f937 	bl	80084fc <USBD_CtlError>
      return USBD_FAIL;
 800728e:	2303      	movs	r3, #3
 8007290:	e006      	b.n	80072a0 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 f931 	bl	80084fc <USBD_CtlError>
      return USBD_FAIL;
 800729a:	2303      	movs	r3, #3
 800729c:	e000      	b.n	80072a0 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2265      	movs	r2, #101	; 0x65
 80072b4:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 80072b6:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <USBD_Midi_GetCfgDesc+0x1c>)
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	20000050 	.word	0x20000050

080072c8 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800736a:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f002 f910 	bl	8009596 <USBD_LL_GetRxDataSize>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	e00c      	b.n	80073a0 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68f9      	ldr	r1, [r7, #12]
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	440a      	add	r2, r1
 8007394:	2104      	movs	r1, #4
 8007396:	4610      	mov	r0, r2
 8007398:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	3304      	adds	r3, #4
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d3ed      	bcc.n	8007386 <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 80073aa:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 80073ac:	2340      	movs	r3, #64	; 0x40
 80073ae:	2101      	movs	r1, #1
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f002 f8cf 	bl	8009554 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	220a      	movs	r2, #10
 80073cc:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 80073ce:	4b03      	ldr	r3, [pc, #12]	; (80073dc <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	200000b8 	.word	0x200000b8

080073e0 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80073ea:	2303      	movs	r3, #3
 80073ec:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b086      	sub	sp, #24
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	4613      	mov	r3, r2
 800741a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007422:	2303      	movs	r3, #3
 8007424:	e01f      	b.n	8007466 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	79fa      	ldrb	r2, [r7, #7]
 8007458:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f001 ff24 	bl	80092a8 <USBD_LL_Init>
 8007460:	4603      	mov	r3, r0
 8007462:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007464:	7dfb      	ldrb	r3, [r7, #23]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007482:	2303      	movs	r3, #3
 8007484:	e016      	b.n	80074b4 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	f107 020e 	add.w	r2, r7, #14
 80074a6:	4610      	mov	r0, r2
 80074a8:	4798      	blx	r3
 80074aa:	4602      	mov	r2, r0
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 ff3b 	bl	8009340 <USBD_LL_Start>
 80074ca:	4603      	mov	r3, r0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	460b      	mov	r3, r1
 80074f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80074f6:	2303      	movs	r3, #3
 80074f8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	78fa      	ldrb	r2, [r7, #3]
 800750e:	4611      	mov	r1, r2
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	4798      	blx	r3
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	78fa      	ldrb	r2, [r7, #3]
 8007542:	4611      	mov	r1, r2
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	4798      	blx	r3
  }

  return USBD_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 ff8f 	bl	8008488 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007578:	461a      	mov	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007586:	f003 031f 	and.w	r3, r3, #31
 800758a:	2b02      	cmp	r3, #2
 800758c:	d01a      	beq.n	80075c4 <USBD_LL_SetupStage+0x72>
 800758e:	2b02      	cmp	r3, #2
 8007590:	d822      	bhi.n	80075d8 <USBD_LL_SetupStage+0x86>
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <USBD_LL_SetupStage+0x4a>
 8007596:	2b01      	cmp	r3, #1
 8007598:	d00a      	beq.n	80075b0 <USBD_LL_SetupStage+0x5e>
 800759a:	e01d      	b.n	80075d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fa61 	bl	8007a6c <USBD_StdDevReq>
 80075aa:	4603      	mov	r3, r0
 80075ac:	73fb      	strb	r3, [r7, #15]
      break;
 80075ae:	e020      	b.n	80075f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fac5 	bl	8007b48 <USBD_StdItfReq>
 80075be:	4603      	mov	r3, r0
 80075c0:	73fb      	strb	r3, [r7, #15]
      break;
 80075c2:	e016      	b.n	80075f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fb04 	bl	8007bda <USBD_StdEPReq>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73fb      	strb	r3, [r7, #15]
      break;
 80075d6:	e00c      	b.n	80075f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 ff0a 	bl	8009400 <USBD_LL_StallEP>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]
      break;
 80075f0:	bf00      	nop
  }

  return ret;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	460b      	mov	r3, r1
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800760a:	7afb      	ldrb	r3, [r7, #11]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d138      	bne.n	8007682 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007616:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800761e:	2b03      	cmp	r3, #3
 8007620:	d14a      	bne.n	80076b8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	429a      	cmp	r2, r3
 800762c:	d913      	bls.n	8007656 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4293      	cmp	r3, r2
 8007646:	bf28      	it	cs
 8007648:	4613      	movcs	r3, r2
 800764a:	461a      	mov	r2, r3
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fff1 	bl	8008636 <USBD_CtlContinueRx>
 8007654:	e030      	b.n	80076b8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b03      	cmp	r3, #3
 8007660:	d10b      	bne.n	800767a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 ffec 	bl	8008658 <USBD_CtlSendStatus>
 8007680:	e01a      	b.n	80076b8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b03      	cmp	r3, #3
 800768c:	d114      	bne.n	80076b8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	7afa      	ldrb	r2, [r7, #11]
 80076a4:	4611      	mov	r1, r2
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	4798      	blx	r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	e000      	b.n	80076ba <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b086      	sub	sp, #24
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	460b      	mov	r3, r1
 80076cc:	607a      	str	r2, [r7, #4]
 80076ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d16b      	bne.n	80077ae <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3314      	adds	r3, #20
 80076da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d156      	bne.n	8007794 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d914      	bls.n	800771c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	1ad2      	subs	r2, r2, r3
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	461a      	mov	r2, r3
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 ff83 	bl	8008614 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800770e:	2300      	movs	r3, #0
 8007710:	2200      	movs	r2, #0
 8007712:	2100      	movs	r1, #0
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f001 ff1d 	bl	8009554 <USBD_LL_PrepareReceive>
 800771a:	e03b      	b.n	8007794 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	429a      	cmp	r2, r3
 8007726:	d11c      	bne.n	8007762 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007730:	429a      	cmp	r2, r3
 8007732:	d316      	bcc.n	8007762 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800773e:	429a      	cmp	r2, r3
 8007740:	d20f      	bcs.n	8007762 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007742:	2200      	movs	r2, #0
 8007744:	2100      	movs	r1, #0
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 ff64 	bl	8008614 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007754:	2300      	movs	r3, #0
 8007756:	2200      	movs	r2, #0
 8007758:	2100      	movs	r1, #0
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f001 fefa 	bl	8009554 <USBD_LL_PrepareReceive>
 8007760:	e018      	b.n	8007794 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b03      	cmp	r3, #3
 800776c:	d10b      	bne.n	8007786 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007786:	2180      	movs	r1, #128	; 0x80
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f001 fe39 	bl	8009400 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 ff75 	bl	800867e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800779a:	2b01      	cmp	r3, #1
 800779c:	d122      	bne.n	80077e4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7ff fe98 	bl	80074d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80077ac:	e01a      	b.n	80077e4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d114      	bne.n	80077e4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00e      	beq.n	80077e4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	7afa      	ldrb	r2, [r7, #11]
 80077d0:	4611      	mov	r1, r2
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	4798      	blx	r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
 80077e2:	e000      	b.n	80077e6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800781e:	2303      	movs	r3, #3
 8007820:	e02f      	b.n	8007882 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00f      	beq.n	800784c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d009      	beq.n	800784c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6852      	ldr	r2, [r2, #4]
 8007844:	b2d2      	uxtb	r2, r2
 8007846:	4611      	mov	r1, r2
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800784c:	2340      	movs	r3, #64	; 0x40
 800784e:	2200      	movs	r2, #0
 8007850:	2100      	movs	r1, #0
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 fd8f 	bl	8009376 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2240      	movs	r2, #64	; 0x40
 8007864:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007868:	2340      	movs	r3, #64	; 0x40
 800786a:	2200      	movs	r2, #0
 800786c:	2180      	movs	r1, #128	; 0x80
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fd81 	bl	8009376 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2240      	movs	r2, #64	; 0x40
 800787e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	78fa      	ldrb	r2, [r7, #3]
 800789a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2204      	movs	r2, #4
 80078c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d106      	bne.n	80078f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b082      	sub	sp, #8
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007918:	2303      	movs	r3, #3
 800791a:	e012      	b.n	8007942 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b03      	cmp	r3, #3
 8007926:	d10b      	bne.n	8007940 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	460b      	mov	r3, r1
 8007954:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007960:	2303      	movs	r3, #3
 8007962:	e014      	b.n	800798e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b03      	cmp	r3, #3
 800796e:	d10d      	bne.n	800798c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	4611      	mov	r1, r2
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e014      	b.n	80079da <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d10d      	bne.n	80079d8 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	4611      	mov	r1, r2
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6852      	ldr	r2, [r2, #4]
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	4611      	mov	r1, r2
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
  }

  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	3301      	adds	r3, #1
 8007a46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a4e:	8a3b      	ldrh	r3, [r7, #16]
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	b21a      	sxth	r2, r3
 8007a54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	b21b      	sxth	r3, r3
 8007a5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a5e:	89fb      	ldrh	r3, [r7, #14]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a82:	2b40      	cmp	r3, #64	; 0x40
 8007a84:	d005      	beq.n	8007a92 <USBD_StdDevReq+0x26>
 8007a86:	2b40      	cmp	r3, #64	; 0x40
 8007a88:	d853      	bhi.n	8007b32 <USBD_StdDevReq+0xc6>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <USBD_StdDevReq+0x3a>
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d14f      	bne.n	8007b32 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	4798      	blx	r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa4:	e04a      	b.n	8007b3c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	2b09      	cmp	r3, #9
 8007aac:	d83b      	bhi.n	8007b26 <USBD_StdDevReq+0xba>
 8007aae:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <USBD_StdDevReq+0x48>)
 8007ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab4:	08007b09 	.word	0x08007b09
 8007ab8:	08007b1d 	.word	0x08007b1d
 8007abc:	08007b27 	.word	0x08007b27
 8007ac0:	08007b13 	.word	0x08007b13
 8007ac4:	08007b27 	.word	0x08007b27
 8007ac8:	08007ae7 	.word	0x08007ae7
 8007acc:	08007add 	.word	0x08007add
 8007ad0:	08007b27 	.word	0x08007b27
 8007ad4:	08007aff 	.word	0x08007aff
 8007ad8:	08007af1 	.word	0x08007af1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f9de 	bl	8007ea0 <USBD_GetDescriptor>
          break;
 8007ae4:	e024      	b.n	8007b30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fb43 	bl	8008174 <USBD_SetAddress>
          break;
 8007aee:	e01f      	b.n	8007b30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fb82 	bl	80081fc <USBD_SetConfig>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73fb      	strb	r3, [r7, #15]
          break;
 8007afc:	e018      	b.n	8007b30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fc21 	bl	8008348 <USBD_GetConfig>
          break;
 8007b06:	e013      	b.n	8007b30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fc52 	bl	80083b4 <USBD_GetStatus>
          break;
 8007b10:	e00e      	b.n	8007b30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fc81 	bl	800841c <USBD_SetFeature>
          break;
 8007b1a:	e009      	b.n	8007b30 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fc90 	bl	8008444 <USBD_ClrFeature>
          break;
 8007b24:	e004      	b.n	8007b30 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fce7 	bl	80084fc <USBD_CtlError>
          break;
 8007b2e:	bf00      	nop
      }
      break;
 8007b30:	e004      	b.n	8007b3c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fce1 	bl	80084fc <USBD_CtlError>
      break;
 8007b3a:	bf00      	nop
  }

  return ret;
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop

08007b48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b5e:	2b40      	cmp	r3, #64	; 0x40
 8007b60:	d005      	beq.n	8007b6e <USBD_StdItfReq+0x26>
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d82f      	bhi.n	8007bc6 <USBD_StdItfReq+0x7e>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <USBD_StdItfReq+0x26>
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	d12b      	bne.n	8007bc6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d81d      	bhi.n	8007bb8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	889b      	ldrh	r3, [r3, #4]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d813      	bhi.n	8007bae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	88db      	ldrh	r3, [r3, #6]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d110      	bne.n	8007bc2 <USBD_StdItfReq+0x7a>
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10d      	bne.n	8007bc2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fd56 	bl	8008658 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bac:	e009      	b.n	8007bc2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fca3 	bl	80084fc <USBD_CtlError>
          break;
 8007bb6:	e004      	b.n	8007bc2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fc9e 	bl	80084fc <USBD_CtlError>
          break;
 8007bc0:	e000      	b.n	8007bc4 <USBD_StdItfReq+0x7c>
          break;
 8007bc2:	bf00      	nop
      }
      break;
 8007bc4:	e004      	b.n	8007bd0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fc97 	bl	80084fc <USBD_CtlError>
      break;
 8007bce:	bf00      	nop
  }

  return ret;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	889b      	ldrh	r3, [r3, #4]
 8007bec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bf6:	2b40      	cmp	r3, #64	; 0x40
 8007bf8:	d007      	beq.n	8007c0a <USBD_StdEPReq+0x30>
 8007bfa:	2b40      	cmp	r3, #64	; 0x40
 8007bfc:	f200 8145 	bhi.w	8007e8a <USBD_StdEPReq+0x2b0>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00c      	beq.n	8007c1e <USBD_StdEPReq+0x44>
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	f040 8140 	bne.w	8007e8a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	4798      	blx	r3
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1c:	e13a      	b.n	8007e94 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d007      	beq.n	8007c36 <USBD_StdEPReq+0x5c>
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	f300 8129 	bgt.w	8007e7e <USBD_StdEPReq+0x2a4>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d07f      	beq.n	8007d30 <USBD_StdEPReq+0x156>
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d03c      	beq.n	8007cae <USBD_StdEPReq+0xd4>
 8007c34:	e123      	b.n	8007e7e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d002      	beq.n	8007c48 <USBD_StdEPReq+0x6e>
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d016      	beq.n	8007c74 <USBD_StdEPReq+0x9a>
 8007c46:	e02c      	b.n	8007ca2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00d      	beq.n	8007c6a <USBD_StdEPReq+0x90>
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	2b80      	cmp	r3, #128	; 0x80
 8007c52:	d00a      	beq.n	8007c6a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f001 fbd1 	bl	8009400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c5e:	2180      	movs	r1, #128	; 0x80
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 fbcd 	bl	8009400 <USBD_LL_StallEP>
 8007c66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c68:	e020      	b.n	8007cac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fc45 	bl	80084fc <USBD_CtlError>
              break;
 8007c72:	e01b      	b.n	8007cac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	885b      	ldrh	r3, [r3, #2]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10e      	bne.n	8007c9a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <USBD_StdEPReq+0xc0>
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b80      	cmp	r3, #128	; 0x80
 8007c86:	d008      	beq.n	8007c9a <USBD_StdEPReq+0xc0>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	88db      	ldrh	r3, [r3, #6]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d104      	bne.n	8007c9a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 fbb3 	bl	8009400 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fcdc 	bl	8008658 <USBD_CtlSendStatus>

              break;
 8007ca0:	e004      	b.n	8007cac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fc29 	bl	80084fc <USBD_CtlError>
              break;
 8007caa:	bf00      	nop
          }
          break;
 8007cac:	e0ec      	b.n	8007e88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d002      	beq.n	8007cc0 <USBD_StdEPReq+0xe6>
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d016      	beq.n	8007cec <USBD_StdEPReq+0x112>
 8007cbe:	e030      	b.n	8007d22 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00d      	beq.n	8007ce2 <USBD_StdEPReq+0x108>
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b80      	cmp	r3, #128	; 0x80
 8007cca:	d00a      	beq.n	8007ce2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 fb95 	bl	8009400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cd6:	2180      	movs	r1, #128	; 0x80
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 fb91 	bl	8009400 <USBD_LL_StallEP>
 8007cde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ce0:	e025      	b.n	8007d2e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fc09 	bl	80084fc <USBD_CtlError>
              break;
 8007cea:	e020      	b.n	8007d2e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	885b      	ldrh	r3, [r3, #2]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d11b      	bne.n	8007d2c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d004      	beq.n	8007d08 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fb9b 	bl	800943e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fca5 	bl	8008658 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	4798      	blx	r3
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007d20:	e004      	b.n	8007d2c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fbe9 	bl	80084fc <USBD_CtlError>
              break;
 8007d2a:	e000      	b.n	8007d2e <USBD_StdEPReq+0x154>
              break;
 8007d2c:	bf00      	nop
          }
          break;
 8007d2e:	e0ab      	b.n	8007e88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d002      	beq.n	8007d42 <USBD_StdEPReq+0x168>
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d032      	beq.n	8007da6 <USBD_StdEPReq+0x1cc>
 8007d40:	e097      	b.n	8007e72 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <USBD_StdEPReq+0x17e>
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2b80      	cmp	r3, #128	; 0x80
 8007d4c:	d004      	beq.n	8007d58 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fbd3 	bl	80084fc <USBD_CtlError>
                break;
 8007d56:	e091      	b.n	8007e7c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	da0b      	bge.n	8007d78 <USBD_StdEPReq+0x19e>
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	3310      	adds	r3, #16
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	4413      	add	r3, r2
 8007d74:	3304      	adds	r3, #4
 8007d76:	e00b      	b.n	8007d90 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	3304      	adds	r3, #4
 8007d90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fc1d 	bl	80085de <USBD_CtlSendData>
              break;
 8007da4:	e06a      	b.n	8007e7c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007da6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	da11      	bge.n	8007dd2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	f003 020f 	and.w	r2, r3, #15
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	3324      	adds	r3, #36	; 0x24
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d117      	bne.n	8007df8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fb96 	bl	80084fc <USBD_CtlError>
                  break;
 8007dd0:	e054      	b.n	8007e7c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	f003 020f 	and.w	r2, r3, #15
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	440b      	add	r3, r1
 8007de4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d104      	bne.n	8007df8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fb83 	bl	80084fc <USBD_CtlError>
                  break;
 8007df6:	e041      	b.n	8007e7c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	da0b      	bge.n	8007e18 <USBD_StdEPReq+0x23e>
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	3310      	adds	r3, #16
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	4413      	add	r3, r2
 8007e14:	3304      	adds	r3, #4
 8007e16:	e00b      	b.n	8007e30 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e1e:	4613      	mov	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	3304      	adds	r3, #4
 8007e30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <USBD_StdEPReq+0x264>
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	2b80      	cmp	r3, #128	; 0x80
 8007e3c:	d103      	bne.n	8007e46 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	e00e      	b.n	8007e64 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 fb16 	bl	800947c <USBD_LL_IsStallEP>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	e002      	b.n	8007e64 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2202      	movs	r2, #2
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fbb7 	bl	80085de <USBD_CtlSendData>
              break;
 8007e70:	e004      	b.n	8007e7c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fb41 	bl	80084fc <USBD_CtlError>
              break;
 8007e7a:	bf00      	nop
          }
          break;
 8007e7c:	e004      	b.n	8007e88 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fb3b 	bl	80084fc <USBD_CtlError>
          break;
 8007e86:	bf00      	nop
      }
      break;
 8007e88:	e004      	b.n	8007e94 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fb35 	bl	80084fc <USBD_CtlError>
      break;
 8007e92:	bf00      	nop
  }

  return ret;
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	885b      	ldrh	r3, [r3, #2]
 8007eba:	0a1b      	lsrs	r3, r3, #8
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	2b06      	cmp	r3, #6
 8007ec2:	f200 8128 	bhi.w	8008116 <USBD_GetDescriptor+0x276>
 8007ec6:	a201      	add	r2, pc, #4	; (adr r2, 8007ecc <USBD_GetDescriptor+0x2c>)
 8007ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ecc:	08007ee9 	.word	0x08007ee9
 8007ed0:	08007f01 	.word	0x08007f01
 8007ed4:	08007f41 	.word	0x08007f41
 8007ed8:	08008117 	.word	0x08008117
 8007edc:	08008117 	.word	0x08008117
 8007ee0:	080080b7 	.word	0x080080b7
 8007ee4:	080080e3 	.word	0x080080e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	7c12      	ldrb	r2, [r2, #16]
 8007ef4:	f107 0108 	add.w	r1, r7, #8
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4798      	blx	r3
 8007efc:	60f8      	str	r0, [r7, #12]
      break;
 8007efe:	e112      	b.n	8008126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7c1b      	ldrb	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10d      	bne.n	8007f24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	f107 0208 	add.w	r2, r7, #8
 8007f14:	4610      	mov	r0, r2
 8007f16:	4798      	blx	r3
 8007f18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	2202      	movs	r2, #2
 8007f20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f22:	e100      	b.n	8008126 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	f107 0208 	add.w	r2, r7, #8
 8007f30:	4610      	mov	r0, r2
 8007f32:	4798      	blx	r3
 8007f34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	701a      	strb	r2, [r3, #0]
      break;
 8007f3e:	e0f2      	b.n	8008126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	885b      	ldrh	r3, [r3, #2]
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	f200 80ac 	bhi.w	80080a4 <USBD_GetDescriptor+0x204>
 8007f4c:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <USBD_GetDescriptor+0xb4>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	08007f6d 	.word	0x08007f6d
 8007f58:	08007fa1 	.word	0x08007fa1
 8007f5c:	08007fd5 	.word	0x08007fd5
 8007f60:	08008009 	.word	0x08008009
 8007f64:	0800803d 	.word	0x0800803d
 8007f68:	08008071 	.word	0x08008071
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00b      	beq.n	8007f90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	7c12      	ldrb	r2, [r2, #16]
 8007f84:	f107 0108 	add.w	r1, r7, #8
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4798      	blx	r3
 8007f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f8e:	e091      	b.n	80080b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fab2 	bl	80084fc <USBD_CtlError>
            err++;
 8007f98:	7afb      	ldrb	r3, [r7, #11]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f9e:	e089      	b.n	80080b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00b      	beq.n	8007fc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	7c12      	ldrb	r2, [r2, #16]
 8007fb8:	f107 0108 	add.w	r1, r7, #8
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	4798      	blx	r3
 8007fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fc2:	e077      	b.n	80080b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fa98 	bl	80084fc <USBD_CtlError>
            err++;
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fd2:	e06f      	b.n	80080b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00b      	beq.n	8007ff8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	7c12      	ldrb	r2, [r2, #16]
 8007fec:	f107 0108 	add.w	r1, r7, #8
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4798      	blx	r3
 8007ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ff6:	e05d      	b.n	80080b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fa7e 	bl	80084fc <USBD_CtlError>
            err++;
 8008000:	7afb      	ldrb	r3, [r7, #11]
 8008002:	3301      	adds	r3, #1
 8008004:	72fb      	strb	r3, [r7, #11]
          break;
 8008006:	e055      	b.n	80080b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	7c12      	ldrb	r2, [r2, #16]
 8008020:	f107 0108 	add.w	r1, r7, #8
 8008024:	4610      	mov	r0, r2
 8008026:	4798      	blx	r3
 8008028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800802a:	e043      	b.n	80080b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa64 	bl	80084fc <USBD_CtlError>
            err++;
 8008034:	7afb      	ldrb	r3, [r7, #11]
 8008036:	3301      	adds	r3, #1
 8008038:	72fb      	strb	r3, [r7, #11]
          break;
 800803a:	e03b      	b.n	80080b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00b      	beq.n	8008060 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	7c12      	ldrb	r2, [r2, #16]
 8008054:	f107 0108 	add.w	r1, r7, #8
 8008058:	4610      	mov	r0, r2
 800805a:	4798      	blx	r3
 800805c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800805e:	e029      	b.n	80080b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa4a 	bl	80084fc <USBD_CtlError>
            err++;
 8008068:	7afb      	ldrb	r3, [r7, #11]
 800806a:	3301      	adds	r3, #1
 800806c:	72fb      	strb	r3, [r7, #11]
          break;
 800806e:	e021      	b.n	80080b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	7c12      	ldrb	r2, [r2, #16]
 8008088:	f107 0108 	add.w	r1, r7, #8
 800808c:	4610      	mov	r0, r2
 800808e:	4798      	blx	r3
 8008090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008092:	e00f      	b.n	80080b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fa30 	bl	80084fc <USBD_CtlError>
            err++;
 800809c:	7afb      	ldrb	r3, [r7, #11]
 800809e:	3301      	adds	r3, #1
 80080a0:	72fb      	strb	r3, [r7, #11]
          break;
 80080a2:	e007      	b.n	80080b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fa28 	bl	80084fc <USBD_CtlError>
          err++;
 80080ac:	7afb      	ldrb	r3, [r7, #11]
 80080ae:	3301      	adds	r3, #1
 80080b0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80080b2:	bf00      	nop
      }
      break;
 80080b4:	e037      	b.n	8008126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	7c1b      	ldrb	r3, [r3, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d109      	bne.n	80080d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	f107 0208 	add.w	r2, r7, #8
 80080ca:	4610      	mov	r0, r2
 80080cc:	4798      	blx	r3
 80080ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080d0:	e029      	b.n	8008126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa11 	bl	80084fc <USBD_CtlError>
        err++;
 80080da:	7afb      	ldrb	r3, [r7, #11]
 80080dc:	3301      	adds	r3, #1
 80080de:	72fb      	strb	r3, [r7, #11]
      break;
 80080e0:	e021      	b.n	8008126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	7c1b      	ldrb	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10d      	bne.n	8008106 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	f107 0208 	add.w	r2, r7, #8
 80080f6:	4610      	mov	r0, r2
 80080f8:	4798      	blx	r3
 80080fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3301      	adds	r3, #1
 8008100:	2207      	movs	r2, #7
 8008102:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008104:	e00f      	b.n	8008126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f9f7 	bl	80084fc <USBD_CtlError>
        err++;
 800810e:	7afb      	ldrb	r3, [r7, #11]
 8008110:	3301      	adds	r3, #1
 8008112:	72fb      	strb	r3, [r7, #11]
      break;
 8008114:	e007      	b.n	8008126 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f9ef 	bl	80084fc <USBD_CtlError>
      err++;
 800811e:	7afb      	ldrb	r3, [r7, #11]
 8008120:	3301      	adds	r3, #1
 8008122:	72fb      	strb	r3, [r7, #11]
      break;
 8008124:	bf00      	nop
  }

  if (err != 0U)
 8008126:	7afb      	ldrb	r3, [r7, #11]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d11e      	bne.n	800816a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	88db      	ldrh	r3, [r3, #6]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d016      	beq.n	8008162 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008134:	893b      	ldrh	r3, [r7, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00e      	beq.n	8008158 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	88da      	ldrh	r2, [r3, #6]
 800813e:	893b      	ldrh	r3, [r7, #8]
 8008140:	4293      	cmp	r3, r2
 8008142:	bf28      	it	cs
 8008144:	4613      	movcs	r3, r2
 8008146:	b29b      	uxth	r3, r3
 8008148:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800814a:	893b      	ldrh	r3, [r7, #8]
 800814c:	461a      	mov	r2, r3
 800814e:	68f9      	ldr	r1, [r7, #12]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fa44 	bl	80085de <USBD_CtlSendData>
 8008156:	e009      	b.n	800816c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f9ce 	bl	80084fc <USBD_CtlError>
 8008160:	e004      	b.n	800816c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa78 	bl	8008658 <USBD_CtlSendStatus>
 8008168:	e000      	b.n	800816c <USBD_GetDescriptor+0x2cc>
    return;
 800816a:	bf00      	nop
  }
}
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop

08008174 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	889b      	ldrh	r3, [r3, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d131      	bne.n	80081ea <USBD_SetAddress+0x76>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	88db      	ldrh	r3, [r3, #6]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d12d      	bne.n	80081ea <USBD_SetAddress+0x76>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	885b      	ldrh	r3, [r3, #2]
 8008192:	2b7f      	cmp	r3, #127	; 0x7f
 8008194:	d829      	bhi.n	80081ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	885b      	ldrh	r3, [r3, #2]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b03      	cmp	r3, #3
 80081ac:	d104      	bne.n	80081b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f9a3 	bl	80084fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b6:	e01d      	b.n	80081f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	7bfa      	ldrb	r2, [r7, #15]
 80081bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f001 f985 	bl	80094d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa44 	bl	8008658 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d004      	beq.n	80081e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2202      	movs	r2, #2
 80081da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081de:	e009      	b.n	80081f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e8:	e004      	b.n	80081f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f985 	bl	80084fc <USBD_CtlError>
  }
}
 80081f2:	bf00      	nop
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	885b      	ldrh	r3, [r3, #2]
 800820e:	b2da      	uxtb	r2, r3
 8008210:	4b4c      	ldr	r3, [pc, #304]	; (8008344 <USBD_SetConfig+0x148>)
 8008212:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008214:	4b4b      	ldr	r3, [pc, #300]	; (8008344 <USBD_SetConfig+0x148>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d905      	bls.n	8008228 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f96c 	bl	80084fc <USBD_CtlError>
    return USBD_FAIL;
 8008224:	2303      	movs	r3, #3
 8008226:	e088      	b.n	800833a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b02      	cmp	r3, #2
 8008232:	d002      	beq.n	800823a <USBD_SetConfig+0x3e>
 8008234:	2b03      	cmp	r3, #3
 8008236:	d025      	beq.n	8008284 <USBD_SetConfig+0x88>
 8008238:	e071      	b.n	800831e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800823a:	4b42      	ldr	r3, [pc, #264]	; (8008344 <USBD_SetConfig+0x148>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d01c      	beq.n	800827c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008242:	4b40      	ldr	r3, [pc, #256]	; (8008344 <USBD_SetConfig+0x148>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800824c:	4b3d      	ldr	r3, [pc, #244]	; (8008344 <USBD_SetConfig+0x148>)
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff f949 	bl	80074ea <USBD_SetClassConfig>
 8008258:	4603      	mov	r3, r0
 800825a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d004      	beq.n	800826c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f949 	bl	80084fc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800826a:	e065      	b.n	8008338 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f9f3 	bl	8008658 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2203      	movs	r2, #3
 8008276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800827a:	e05d      	b.n	8008338 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f9eb 	bl	8008658 <USBD_CtlSendStatus>
      break;
 8008282:	e059      	b.n	8008338 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008284:	4b2f      	ldr	r3, [pc, #188]	; (8008344 <USBD_SetConfig+0x148>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d112      	bne.n	80082b2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008294:	4b2b      	ldr	r3, [pc, #172]	; (8008344 <USBD_SetConfig+0x148>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	461a      	mov	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800829e:	4b29      	ldr	r3, [pc, #164]	; (8008344 <USBD_SetConfig+0x148>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7ff f93c 	bl	8007522 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f9d4 	bl	8008658 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082b0:	e042      	b.n	8008338 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80082b2:	4b24      	ldr	r3, [pc, #144]	; (8008344 <USBD_SetConfig+0x148>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d02a      	beq.n	8008316 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff f92a 	bl	8007522 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80082ce:	4b1d      	ldr	r3, [pc, #116]	; (8008344 <USBD_SetConfig+0x148>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082d8:	4b1a      	ldr	r3, [pc, #104]	; (8008344 <USBD_SetConfig+0x148>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7ff f903 	bl	80074ea <USBD_SetClassConfig>
 80082e4:	4603      	mov	r3, r0
 80082e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00f      	beq.n	800830e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f903 	bl	80084fc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff f90f 	bl	8007522 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800830c:	e014      	b.n	8008338 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f9a2 	bl	8008658 <USBD_CtlSendStatus>
      break;
 8008314:	e010      	b.n	8008338 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f99e 	bl	8008658 <USBD_CtlSendStatus>
      break;
 800831c:	e00c      	b.n	8008338 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8eb 	bl	80084fc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008326:	4b07      	ldr	r3, [pc, #28]	; (8008344 <USBD_SetConfig+0x148>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff f8f8 	bl	8007522 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008332:	2303      	movs	r3, #3
 8008334:	73fb      	strb	r3, [r7, #15]
      break;
 8008336:	bf00      	nop
  }

  return ret;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200002b8 	.word	0x200002b8

08008348 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	88db      	ldrh	r3, [r3, #6]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d004      	beq.n	8008364 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f8cd 	bl	80084fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008362:	e023      	b.n	80083ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b02      	cmp	r3, #2
 800836e:	dc02      	bgt.n	8008376 <USBD_GetConfig+0x2e>
 8008370:	2b00      	cmp	r3, #0
 8008372:	dc03      	bgt.n	800837c <USBD_GetConfig+0x34>
 8008374:	e015      	b.n	80083a2 <USBD_GetConfig+0x5a>
 8008376:	2b03      	cmp	r3, #3
 8008378:	d00b      	beq.n	8008392 <USBD_GetConfig+0x4a>
 800837a:	e012      	b.n	80083a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3308      	adds	r3, #8
 8008386:	2201      	movs	r2, #1
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f927 	bl	80085de <USBD_CtlSendData>
        break;
 8008390:	e00c      	b.n	80083ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3304      	adds	r3, #4
 8008396:	2201      	movs	r2, #1
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f91f 	bl	80085de <USBD_CtlSendData>
        break;
 80083a0:	e004      	b.n	80083ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f8a9 	bl	80084fc <USBD_CtlError>
        break;
 80083aa:	bf00      	nop
}
 80083ac:	bf00      	nop
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	3b01      	subs	r3, #1
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d81e      	bhi.n	800840a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	88db      	ldrh	r3, [r3, #6]
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d004      	beq.n	80083de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f890 	bl	80084fc <USBD_CtlError>
        break;
 80083dc:	e01a      	b.n	8008414 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	f043 0202 	orr.w	r2, r3, #2
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	330c      	adds	r3, #12
 80083fe:	2202      	movs	r2, #2
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f8eb 	bl	80085de <USBD_CtlSendData>
      break;
 8008408:	e004      	b.n	8008414 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f875 	bl	80084fc <USBD_CtlError>
      break;
 8008412:	bf00      	nop
  }
}
 8008414:	bf00      	nop
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	885b      	ldrh	r3, [r3, #2]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d106      	bne.n	800843c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f90e 	bl	8008658 <USBD_CtlSendStatus>
  }
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008454:	b2db      	uxtb	r3, r3
 8008456:	3b01      	subs	r3, #1
 8008458:	2b02      	cmp	r3, #2
 800845a:	d80b      	bhi.n	8008474 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	885b      	ldrh	r3, [r3, #2]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d10c      	bne.n	800847e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f8f3 	bl	8008658 <USBD_CtlSendStatus>
      }
      break;
 8008472:	e004      	b.n	800847e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f840 	bl	80084fc <USBD_CtlError>
      break;
 800847c:	e000      	b.n	8008480 <USBD_ClrFeature+0x3c>
      break;
 800847e:	bf00      	nop
  }
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	781a      	ldrb	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3301      	adds	r3, #1
 80084a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	781a      	ldrb	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3301      	adds	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7ff fabc 	bl	8007a30 <SWAPBYTE>
 80084b8:	4603      	mov	r3, r0
 80084ba:	461a      	mov	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3301      	adds	r3, #1
 80084c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3301      	adds	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f7ff faaf 	bl	8007a30 <SWAPBYTE>
 80084d2:	4603      	mov	r3, r0
 80084d4:	461a      	mov	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3301      	adds	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3301      	adds	r3, #1
 80084e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff faa2 	bl	8007a30 <SWAPBYTE>
 80084ec:	4603      	mov	r3, r0
 80084ee:	461a      	mov	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	80da      	strh	r2, [r3, #6]
}
 80084f4:	bf00      	nop
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008506:	2180      	movs	r1, #128	; 0x80
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 ff79 	bl	8009400 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800850e:	2100      	movs	r1, #0
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 ff75 	bl	8009400 <USBD_LL_StallEP>
}
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b086      	sub	sp, #24
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d036      	beq.n	80085a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008538:	6938      	ldr	r0, [r7, #16]
 800853a:	f000 f836 	bl	80085aa <USBD_GetLen>
 800853e:	4603      	mov	r3, r0
 8008540:	3301      	adds	r3, #1
 8008542:	b29b      	uxth	r3, r3
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	4413      	add	r3, r2
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	7812      	ldrb	r2, [r2, #0]
 8008556:	701a      	strb	r2, [r3, #0]
  idx++;
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	3301      	adds	r3, #1
 800855c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	4413      	add	r3, r2
 8008564:	2203      	movs	r2, #3
 8008566:	701a      	strb	r2, [r3, #0]
  idx++;
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	3301      	adds	r3, #1
 800856c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800856e:	e013      	b.n	8008598 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008570:	7dfb      	ldrb	r3, [r7, #23]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	4413      	add	r3, r2
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	7812      	ldrb	r2, [r2, #0]
 800857a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	3301      	adds	r3, #1
 8008580:	613b      	str	r3, [r7, #16]
    idx++;
 8008582:	7dfb      	ldrb	r3, [r7, #23]
 8008584:	3301      	adds	r3, #1
 8008586:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	4413      	add	r3, r2
 800858e:	2200      	movs	r2, #0
 8008590:	701a      	strb	r2, [r3, #0]
    idx++;
 8008592:	7dfb      	ldrb	r3, [r7, #23]
 8008594:	3301      	adds	r3, #1
 8008596:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e7      	bne.n	8008570 <USBD_GetString+0x52>
 80085a0:	e000      	b.n	80085a4 <USBD_GetString+0x86>
    return;
 80085a2:	bf00      	nop
  }
}
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80085ba:	e005      	b.n	80085c8 <USBD_GetLen+0x1e>
  {
    len++;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	3301      	adds	r3, #1
 80085c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	3301      	adds	r3, #1
 80085c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1f5      	bne.n	80085bc <USBD_GetLen+0x12>
  }

  return len;
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2202      	movs	r2, #2
 80085ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	2100      	movs	r1, #0
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 ff84 	bl	8009512 <USBD_LL_Transmit>

  return USBD_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	2100      	movs	r1, #0
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 ff73 	bl	8009512 <USBD_LL_Transmit>

  return USBD_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	2100      	movs	r1, #0
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 ff83 	bl	8009554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2204      	movs	r2, #4
 8008664:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008668:	2300      	movs	r3, #0
 800866a:	2200      	movs	r2, #0
 800866c:	2100      	movs	r1, #0
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 ff4f 	bl	8009512 <USBD_LL_Transmit>

  return USBD_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2205      	movs	r2, #5
 800868a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800868e:	2300      	movs	r3, #0
 8008690:	2200      	movs	r2, #0
 8008692:	2100      	movs	r1, #0
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 ff5d 	bl	8009554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t i2c_addr, uint8_t command)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af04      	add	r7, sp, #16
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
 80086b0:	4613      	mov	r3, r2
 80086b2:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, 0x00, 1, &command, 1, 10);
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	b299      	uxth	r1, r3
 80086b8:	230a      	movs	r3, #10
 80086ba:	9302      	str	r3, [sp, #8]
 80086bc:	2301      	movs	r3, #1
 80086be:	9301      	str	r3, [sp, #4]
 80086c0:	1cbb      	adds	r3, r7, #2
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	2301      	movs	r3, #1
 80086c6:	2200      	movs	r2, #0
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7fa ff43 	bl	8003554 <HAL_I2C_Mem_Write>
 80086ce:	4603      	mov	r3, r0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, uint8_t i2c_addr)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70fb      	strb	r3, [r7, #3]
    // Wait for the screen to boot
    HAL_Delay(100);
 80086e4:	2064      	movs	r0, #100	; 0x64
 80086e6:	f7f9 f95d 	bl	80019a4 <HAL_Delay>
    int status = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xAE);   // Display off
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	22ae      	movs	r2, #174	; 0xae
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff ffd5 	bl	80086a4 <ssd1306_WriteCommand>
 80086fa:	4603      	mov	r3, r0
 80086fc:	461a      	mov	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x20);   // Set Memory Addressing Mode
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	2220      	movs	r2, #32
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff ffca 	bl	80086a4 <ssd1306_WriteCommand>
 8008710:	4603      	mov	r3, r0
 8008712:	461a      	mov	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	2210      	movs	r2, #16
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff ffbf 	bl	80086a4 <ssd1306_WriteCommand>
 8008726:	4603      	mov	r3, r0
 8008728:	461a      	mov	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8008730:	78fb      	ldrb	r3, [r7, #3]
 8008732:	22b0      	movs	r2, #176	; 0xb0
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff ffb4 	bl	80086a4 <ssd1306_WriteCommand>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4413      	add	r3, r2
 8008744:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xC8);   // Set COM Output Scan Direction
 8008746:	78fb      	ldrb	r3, [r7, #3]
 8008748:	22c8      	movs	r2, #200	; 0xc8
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff ffa9 	bl	80086a4 <ssd1306_WriteCommand>
 8008752:	4603      	mov	r3, r0
 8008754:	461a      	mov	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4413      	add	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x00);   // Set low column address
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	2200      	movs	r2, #0
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff ff9e 	bl	80086a4 <ssd1306_WriteCommand>
 8008768:	4603      	mov	r3, r0
 800876a:	461a      	mov	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x10);   // Set high column address
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	2210      	movs	r2, #16
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff ff93 	bl	80086a4 <ssd1306_WriteCommand>
 800877e:	4603      	mov	r3, r0
 8008780:	461a      	mov	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x40);   // Set start line address
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	2240      	movs	r2, #64	; 0x40
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff ff88 	bl	80086a4 <ssd1306_WriteCommand>
 8008794:	4603      	mov	r3, r0
 8008796:	461a      	mov	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x81);   // set contrast control register
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	2281      	movs	r2, #129	; 0x81
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7ff ff7d 	bl	80086a4 <ssd1306_WriteCommand>
 80087aa:	4603      	mov	r3, r0
 80087ac:	461a      	mov	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	4413      	add	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x40);
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	2240      	movs	r2, #64	; 0x40
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff ff72 	bl	80086a4 <ssd1306_WriteCommand>
 80087c0:	4603      	mov	r3, r0
 80087c2:	461a      	mov	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4413      	add	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA1);   // Set segment re-map 0 to 127
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	22a1      	movs	r2, #161	; 0xa1
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff ff67 	bl	80086a4 <ssd1306_WriteCommand>
 80087d6:	4603      	mov	r3, r0
 80087d8:	461a      	mov	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4413      	add	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA6);   // Set normal display
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	22a6      	movs	r2, #166	; 0xa6
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff ff5c 	bl	80086a4 <ssd1306_WriteCommand>
 80087ec:	4603      	mov	r3, r0
 80087ee:	461a      	mov	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4413      	add	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA8);   // Set multiplex ratio(1 to 64)
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	22a8      	movs	r2, #168	; 0xa8
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7ff ff51 	bl	80086a4 <ssd1306_WriteCommand>
 8008802:	4603      	mov	r3, r0
 8008804:	461a      	mov	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	4413      	add	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, SSD1306_HEIGHT - 1);
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	223f      	movs	r2, #63	; 0x3f
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff ff46 	bl	80086a4 <ssd1306_WriteCommand>
 8008818:	4603      	mov	r3, r0
 800881a:	461a      	mov	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	22a4      	movs	r2, #164	; 0xa4
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff ff3b 	bl	80086a4 <ssd1306_WriteCommand>
 800882e:	4603      	mov	r3, r0
 8008830:	461a      	mov	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	4413      	add	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xD3);   // Set display offset
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	22d3      	movs	r2, #211	; 0xd3
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff ff30 	bl	80086a4 <ssd1306_WriteCommand>
 8008844:	4603      	mov	r3, r0
 8008846:	461a      	mov	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4413      	add	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x00);   // No offset
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	2200      	movs	r2, #0
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff ff25 	bl	80086a4 <ssd1306_WriteCommand>
 800885a:	4603      	mov	r3, r0
 800885c:	461a      	mov	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4413      	add	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	22d5      	movs	r2, #213	; 0xd5
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7ff ff1a 	bl	80086a4 <ssd1306_WriteCommand>
 8008870:	4603      	mov	r3, r0
 8008872:	461a      	mov	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4413      	add	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xF0);   // Set divide ratio
 800887a:	78fb      	ldrb	r3, [r7, #3]
 800887c:	22f0      	movs	r2, #240	; 0xf0
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff ff0f 	bl	80086a4 <ssd1306_WriteCommand>
 8008886:	4603      	mov	r3, r0
 8008888:	461a      	mov	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4413      	add	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xD9);   // Set pre-charge period
 8008890:	78fb      	ldrb	r3, [r7, #3]
 8008892:	22d9      	movs	r2, #217	; 0xd9
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff ff04 	bl	80086a4 <ssd1306_WriteCommand>
 800889c:	4603      	mov	r3, r0
 800889e:	461a      	mov	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x22);
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	2222      	movs	r2, #34	; 0x22
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7ff fef9 	bl	80086a4 <ssd1306_WriteCommand>
 80088b2:	4603      	mov	r3, r0
 80088b4:	461a      	mov	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4413      	add	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xDA);   // Set com pins hardware configuration
 80088bc:	78fb      	ldrb	r3, [r7, #3]
 80088be:	22da      	movs	r2, #218	; 0xda
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff feee 	bl	80086a4 <ssd1306_WriteCommand>
 80088c8:	4603      	mov	r3, r0
 80088ca:	461a      	mov	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x12);   // Do not use COM left/right remap
 80088d2:	78fb      	ldrb	r3, [r7, #3]
 80088d4:	2212      	movs	r2, #18
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff fee3 	bl	80086a4 <ssd1306_WriteCommand>
 80088de:	4603      	mov	r3, r0
 80088e0:	461a      	mov	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4413      	add	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xDB);   // Set vcomh
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	22db      	movs	r2, #219	; 0xdb
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff fed8 	bl	80086a4 <ssd1306_WriteCommand>
 80088f4:	4603      	mov	r3, r0
 80088f6:	461a      	mov	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4413      	add	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x20);   // 0x20,0.77xVcc
 80088fe:	78fb      	ldrb	r3, [r7, #3]
 8008900:	2220      	movs	r2, #32
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7ff fecd 	bl	80086a4 <ssd1306_WriteCommand>
 800890a:	4603      	mov	r3, r0
 800890c:	461a      	mov	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4413      	add	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x8D);   // Set DC-DC enable
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	228d      	movs	r2, #141	; 0x8d
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fec2 	bl	80086a4 <ssd1306_WriteCommand>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4413      	add	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x14);   //
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	2214      	movs	r2, #20
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7ff feb7 	bl	80086a4 <ssd1306_WriteCommand>
 8008936:	4603      	mov	r3, r0
 8008938:	461a      	mov	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4413      	add	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xAF);   // Turn on SSD1306 panel
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	22af      	movs	r2, #175	; 0xaf
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7ff feac 	bl	80086a4 <ssd1306_WriteCommand>
 800894c:	4603      	mov	r3, r0
 800894e:	461a      	mov	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <ssd1306_Init+0x288>
        return 1;
 800895c:	2301      	movs	r3, #1
 800895e:	e011      	b.n	8008984 <ssd1306_Init+0x2ac>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8008960:	2000      	movs	r0, #0
 8008962:	f000 f815 	bl	8008990 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c, i2c_addr);
 8008966:	78fb      	ldrb	r3, [r7, #3]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f834 	bl	80089d8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <ssd1306_Init+0x2b4>)
 8008972:	2200      	movs	r2, #0
 8008974:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8008976:	4b05      	ldr	r3, [pc, #20]	; (800898c <ssd1306_Init+0x2b4>)
 8008978:	2200      	movs	r2, #0
 800897a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800897c:	4b03      	ldr	r3, [pc, #12]	; (800898c <ssd1306_Init+0x2b4>)
 800897e:	2201      	movs	r2, #1
 8008980:	715a      	strb	r2, [r3, #5]

    return 0;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	200006bc 	.word	0x200006bc

08008990 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	e00d      	b.n	80089bc <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <ssd1306_Fill+0x1a>
 80089a6:	2100      	movs	r1, #0
 80089a8:	e000      	b.n	80089ac <ssd1306_Fill+0x1c>
 80089aa:	21ff      	movs	r1, #255	; 0xff
 80089ac:	4a09      	ldr	r2, [pc, #36]	; (80089d4 <ssd1306_Fill+0x44>)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	460a      	mov	r2, r1
 80089b4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3301      	adds	r3, #1
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089c2:	d3ed      	bcc.n	80089a0 <ssd1306_Fill+0x10>
    }
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	200002bc 	.word	0x200002bc

080089d8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c, uint8_t i2c_addr)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b088      	sub	sp, #32
 80089dc:	af04      	add	r7, sp, #16
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
 80089e8:	e026      	b.n	8008a38 <ssd1306_UpdateScreen+0x60>
        ssd1306_WriteCommand(hi2c, i2c_addr, 0xB0 + i);
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	3b50      	subs	r3, #80	; 0x50
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7ff fe55 	bl	80086a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, i2c_addr, 0x00);
 80089fa:	78fb      	ldrb	r3, [r7, #3]
 80089fc:	2200      	movs	r2, #0
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff fe4f 	bl	80086a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, i2c_addr, 0x10);
 8008a06:	78fb      	ldrb	r3, [r7, #3]
 8008a08:	2210      	movs	r2, #16
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff fe49 	bl	80086a4 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, i2c_addr, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8008a12:	78fb      	ldrb	r3, [r7, #3]
 8008a14:	b299      	uxth	r1, r3
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	01db      	lsls	r3, r3, #7
 8008a1a:	4a0b      	ldr	r2, [pc, #44]	; (8008a48 <ssd1306_UpdateScreen+0x70>)
 8008a1c:	4413      	add	r3, r2
 8008a1e:	2264      	movs	r2, #100	; 0x64
 8008a20:	9202      	str	r2, [sp, #8]
 8008a22:	2280      	movs	r2, #128	; 0x80
 8008a24:	9201      	str	r2, [sp, #4]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	2301      	movs	r3, #1
 8008a2a:	2240      	movs	r2, #64	; 0x40
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7fa fd91 	bl	8003554 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	3301      	adds	r3, #1
 8008a36:	73fb      	strb	r3, [r7, #15]
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	2b07      	cmp	r3, #7
 8008a3c:	d9d5      	bls.n	80089ea <ssd1306_UpdateScreen+0x12>
    }
}
 8008a3e:	bf00      	nop
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	200002bc 	.word	0x200002bc

08008a4c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	71fb      	strb	r3, [r7, #7]
 8008a56:	460b      	mov	r3, r1
 8008a58:	71bb      	strb	r3, [r7, #6]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8008a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	db48      	blt.n	8008af8 <ssd1306_DrawPixel+0xac>
 8008a66:	79bb      	ldrb	r3, [r7, #6]
 8008a68:	2b3f      	cmp	r3, #63	; 0x3f
 8008a6a:	d845      	bhi.n	8008af8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8008a6c:	4b25      	ldr	r3, [pc, #148]	; (8008b04 <ssd1306_DrawPixel+0xb8>)
 8008a6e:	791b      	ldrb	r3, [r3, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d006      	beq.n	8008a82 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8008a74:	797b      	ldrb	r3, [r7, #5]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bf0c      	ite	eq
 8008a7a:	2301      	moveq	r3, #1
 8008a7c:	2300      	movne	r3, #0
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8008a82:	797b      	ldrb	r3, [r7, #5]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d11a      	bne.n	8008abe <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008a88:	79fa      	ldrb	r2, [r7, #7]
 8008a8a:	79bb      	ldrb	r3, [r7, #6]
 8008a8c:	08db      	lsrs	r3, r3, #3
 8008a8e:	b2d8      	uxtb	r0, r3
 8008a90:	4603      	mov	r3, r0
 8008a92:	01db      	lsls	r3, r3, #7
 8008a94:	4413      	add	r3, r2
 8008a96:	4a1c      	ldr	r2, [pc, #112]	; (8008b08 <ssd1306_DrawPixel+0xbc>)
 8008a98:	5cd3      	ldrb	r3, [r2, r3]
 8008a9a:	b25a      	sxtb	r2, r3
 8008a9c:	79bb      	ldrb	r3, [r7, #6]
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	b259      	sxtb	r1, r3
 8008aae:	79fa      	ldrb	r2, [r7, #7]
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	01db      	lsls	r3, r3, #7
 8008ab4:	4413      	add	r3, r2
 8008ab6:	b2c9      	uxtb	r1, r1
 8008ab8:	4a13      	ldr	r2, [pc, #76]	; (8008b08 <ssd1306_DrawPixel+0xbc>)
 8008aba:	54d1      	strb	r1, [r2, r3]
 8008abc:	e01d      	b.n	8008afa <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008abe:	79fa      	ldrb	r2, [r7, #7]
 8008ac0:	79bb      	ldrb	r3, [r7, #6]
 8008ac2:	08db      	lsrs	r3, r3, #3
 8008ac4:	b2d8      	uxtb	r0, r3
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	01db      	lsls	r3, r3, #7
 8008aca:	4413      	add	r3, r2
 8008acc:	4a0e      	ldr	r2, [pc, #56]	; (8008b08 <ssd1306_DrawPixel+0xbc>)
 8008ace:	5cd3      	ldrb	r3, [r2, r3]
 8008ad0:	b25a      	sxtb	r2, r3
 8008ad2:	79bb      	ldrb	r3, [r7, #6]
 8008ad4:	f003 0307 	and.w	r3, r3, #7
 8008ad8:	2101      	movs	r1, #1
 8008ada:	fa01 f303 	lsl.w	r3, r1, r3
 8008ade:	b25b      	sxtb	r3, r3
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	b25b      	sxtb	r3, r3
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	b259      	sxtb	r1, r3
 8008ae8:	79fa      	ldrb	r2, [r7, #7]
 8008aea:	4603      	mov	r3, r0
 8008aec:	01db      	lsls	r3, r3, #7
 8008aee:	4413      	add	r3, r2
 8008af0:	b2c9      	uxtb	r1, r1
 8008af2:	4a05      	ldr	r2, [pc, #20]	; (8008b08 <ssd1306_DrawPixel+0xbc>)
 8008af4:	54d1      	strb	r1, [r2, r3]
 8008af6:	e000      	b.n	8008afa <ssd1306_DrawPixel+0xae>
        return;
 8008af8:	bf00      	nop
    }
}
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	200006bc 	.word	0x200006bc
 8008b08:	200002bc 	.word	0x200002bc

08008b0c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8008b0c:	b590      	push	{r4, r7, lr}
 8008b0e:	b089      	sub	sp, #36	; 0x24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4604      	mov	r4, r0
 8008b14:	1d38      	adds	r0, r7, #4
 8008b16:	e880 0006 	stmia.w	r0, {r1, r2}
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	4623      	mov	r3, r4
 8008b1e:	73fb      	strb	r3, [r7, #15]
 8008b20:	4613      	mov	r3, r2
 8008b22:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8008b24:	4b38      	ldr	r3, [pc, #224]	; (8008c08 <ssd1306_WriteChar+0xfc>)
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	793b      	ldrb	r3, [r7, #4]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b30:	dc06      	bgt.n	8008b40 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8008b32:	4b35      	ldr	r3, [pc, #212]	; (8008c08 <ssd1306_WriteChar+0xfc>)
 8008b34:	885b      	ldrh	r3, [r3, #2]
 8008b36:	461a      	mov	r2, r3
 8008b38:	797b      	ldrb	r3, [r7, #5]
 8008b3a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8008b3c:	2b3f      	cmp	r3, #63	; 0x3f
 8008b3e:	dd01      	ble.n	8008b44 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	e05d      	b.n	8008c00 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8008b44:	2300      	movs	r3, #0
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	e04c      	b.n	8008be4 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	3b20      	subs	r3, #32
 8008b50:	7979      	ldrb	r1, [r7, #5]
 8008b52:	fb01 f303 	mul.w	r3, r1, r3
 8008b56:	4619      	mov	r1, r3
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	440b      	add	r3, r1
 8008b5c:	005b      	lsls	r3, r3, #1
 8008b5e:	4413      	add	r3, r2
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8008b64:	2300      	movs	r3, #0
 8008b66:	61bb      	str	r3, [r7, #24]
 8008b68:	e034      	b.n	8008bd4 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d012      	beq.n	8008ba0 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008b7a:	4b23      	ldr	r3, [pc, #140]	; (8008c08 <ssd1306_WriteChar+0xfc>)
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	4413      	add	r3, r2
 8008b86:	b2d8      	uxtb	r0, r3
 8008b88:	4b1f      	ldr	r3, [pc, #124]	; (8008c08 <ssd1306_WriteChar+0xfc>)
 8008b8a:	885b      	ldrh	r3, [r3, #2]
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	4413      	add	r3, r2
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	7bba      	ldrb	r2, [r7, #14]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	f7ff ff57 	bl	8008a4c <ssd1306_DrawPixel>
 8008b9e:	e016      	b.n	8008bce <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008ba0:	4b19      	ldr	r3, [pc, #100]	; (8008c08 <ssd1306_WriteChar+0xfc>)
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	4413      	add	r3, r2
 8008bac:	b2d8      	uxtb	r0, r3
 8008bae:	4b16      	ldr	r3, [pc, #88]	; (8008c08 <ssd1306_WriteChar+0xfc>)
 8008bb0:	885b      	ldrh	r3, [r3, #2]
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	4413      	add	r3, r2
 8008bba:	b2d9      	uxtb	r1, r3
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bf0c      	ite	eq
 8008bc2:	2301      	moveq	r3, #1
 8008bc4:	2300      	movne	r3, #0
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	461a      	mov	r2, r3
 8008bca:	f7ff ff3f 	bl	8008a4c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	61bb      	str	r3, [r7, #24]
 8008bd4:	793b      	ldrb	r3, [r7, #4]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d3c5      	bcc.n	8008b6a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	3301      	adds	r3, #1
 8008be2:	61fb      	str	r3, [r7, #28]
 8008be4:	797b      	ldrb	r3, [r7, #5]
 8008be6:	461a      	mov	r2, r3
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d3ad      	bcc.n	8008b4a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008bee:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <ssd1306_WriteChar+0xfc>)
 8008bf0:	881a      	ldrh	r2, [r3, #0]
 8008bf2:	793b      	ldrb	r3, [r7, #4]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	4413      	add	r3, r2
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	4b03      	ldr	r3, [pc, #12]	; (8008c08 <ssd1306_WriteChar+0xfc>)
 8008bfc:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3724      	adds	r7, #36	; 0x24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd90      	pop	{r4, r7, pc}
 8008c08:	200006bc 	.word	0x200006bc

08008c0c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	1d38      	adds	r0, r7, #4
 8008c16:	e880 0006 	stmia.w	r0, {r1, r2}
 8008c1a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8008c1c:	e012      	b.n	8008c44 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	7818      	ldrb	r0, [r3, #0]
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	1d3a      	adds	r2, r7, #4
 8008c26:	ca06      	ldmia	r2, {r1, r2}
 8008c28:	f7ff ff70 	bl	8008b0c <ssd1306_WriteChar>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	461a      	mov	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d002      	beq.n	8008c3e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	e008      	b.n	8008c50 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3301      	adds	r3, #1
 8008c42:	60fb      	str	r3, [r7, #12]
    while (*str)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e8      	bne.n	8008c1e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	460a      	mov	r2, r1
 8008c62:	71fb      	strb	r3, [r7, #7]
 8008c64:	4613      	mov	r3, r2
 8008c66:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <ssd1306_SetCursor+0x2c>)
 8008c6e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8008c70:	79bb      	ldrb	r3, [r7, #6]
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	4b03      	ldr	r3, [pc, #12]	; (8008c84 <ssd1306_SetCursor+0x2c>)
 8008c76:	805a      	strh	r2, [r3, #2]
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	200006bc 	.word	0x200006bc

08008c88 <MX_USB_DEVICE_Init>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4912      	ldr	r1, [pc, #72]	; (8008cd8 <MX_USB_DEVICE_Init+0x50>)
 8008c90:	4812      	ldr	r0, [pc, #72]	; (8008cdc <MX_USB_DEVICE_Init+0x54>)
 8008c92:	f7fe fbbc 	bl	800740e <USBD_Init>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c9c:	f7f8 fbef 	bl	800147e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK)
 8008ca0:	490f      	ldr	r1, [pc, #60]	; (8008ce0 <MX_USB_DEVICE_Init+0x58>)
 8008ca2:	480e      	ldr	r0, [pc, #56]	; (8008cdc <MX_USB_DEVICE_Init+0x54>)
 8008ca4:	f7fe fbe3 	bl	800746e <USBD_RegisterClass>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cae:	f7f8 fbe6 	bl	800147e <Error_Handler>
  }
  if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK)
 8008cb2:	490c      	ldr	r1, [pc, #48]	; (8008ce4 <MX_USB_DEVICE_Init+0x5c>)
 8008cb4:	4809      	ldr	r0, [pc, #36]	; (8008cdc <MX_USB_DEVICE_Init+0x54>)
 8008cb6:	f7fe fb93 	bl	80073e0 <USBD_Midi_RegisterInterface>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008cc0:	f7f8 fbdd 	bl	800147e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cc4:	4805      	ldr	r0, [pc, #20]	; (8008cdc <MX_USB_DEVICE_Init+0x54>)
 8008cc6:	f7fe fbf9 	bl	80074bc <USBD_Start>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cd0:	f7f8 fbd5 	bl	800147e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cd4:	bf00      	nop
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	200000cc 	.word	0x200000cc
 8008cdc:	20002494 	.word	0x20002494
 8008ce0:	20000018 	.word	0x20000018
 8008ce4:	2000011c 	.word	0x2000011c

08008ce8 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t value, uint8_t cc) {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	460a      	mov	r2, r1
 8008cf2:	71fb      	strb	r3, [r7, #7]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	71bb      	strb	r3, [r7, #6]
		  uint8_t buffer[4];
		  const uint8_t usbFrame = (0 << 4) | 0x0B;
 8008cf8:	230b      	movs	r3, #11
 8008cfa:	73fb      	strb	r3, [r7, #15]
		  const uint8_t midiCommand = 0xB0 | 0x00;
 8008cfc:	23b0      	movs	r3, #176	; 0xb0
 8008cfe:	73bb      	strb	r3, [r7, #14]
		  const uint8_t controlChannel = cc;
 8008d00:	79bb      	ldrb	r3, [r7, #6]
 8008d02:	737b      	strb	r3, [r7, #13]
		  //const uint8_t value = 30;
		  buffer[0] = usbFrame;
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	723b      	strb	r3, [r7, #8]
		  buffer[1] = midiCommand;
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	727b      	strb	r3, [r7, #9]
		  buffer[2] = controlChannel;
 8008d0c:	7b7b      	ldrb	r3, [r7, #13]
 8008d0e:	72bb      	strb	r3, [r7, #10]
		  buffer[3] = value;
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	72fb      	strb	r3, [r7, #11]

		  switch(USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4))
 8008d14:	f107 0208 	add.w	r2, r7, #8
 8008d18:	2304      	movs	r3, #4
 8008d1a:	2181      	movs	r1, #129	; 0x81
 8008d1c:	4810      	ldr	r0, [pc, #64]	; (8008d60 <MX_USB_Send_Midi+0x78>)
 8008d1e:	f000 fbf8 	bl	8009512 <USBD_LL_Transmit>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d00a      	beq.n	8008d3e <MX_USB_Send_Midi+0x56>
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	dc10      	bgt.n	8008d4e <MX_USB_Send_Midi+0x66>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <MX_USB_Send_Midi+0x4e>
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d008      	beq.n	8008d46 <MX_USB_Send_Midi+0x5e>
 8008d34:	e00b      	b.n	8008d4e <MX_USB_Send_Midi+0x66>
		  {
		  	  //FIXME use errorhandler!
		  	  case USBD_OK:
		  		  printf("ok\n");
 8008d36:	480b      	ldr	r0, [pc, #44]	; (8008d64 <MX_USB_Send_Midi+0x7c>)
 8008d38:	f000 fd1a 	bl	8009770 <puts>
		  		  break;
 8008d3c:	e00b      	b.n	8008d56 <MX_USB_Send_Midi+0x6e>
		  	  case USBD_FAIL:
		  		  printf("USB SEND FAIL\n");
 8008d3e:	480a      	ldr	r0, [pc, #40]	; (8008d68 <MX_USB_Send_Midi+0x80>)
 8008d40:	f000 fd16 	bl	8009770 <puts>
		  		  break;
 8008d44:	e007      	b.n	8008d56 <MX_USB_Send_Midi+0x6e>
		  	  case USBD_BUSY:
		  		  printf("USB SEND BUS\n");
 8008d46:	4809      	ldr	r0, [pc, #36]	; (8008d6c <MX_USB_Send_Midi+0x84>)
 8008d48:	f000 fd12 	bl	8009770 <puts>
		  		  break;
 8008d4c:	e003      	b.n	8008d56 <MX_USB_Send_Midi+0x6e>
		  	  default:
		  		  printf("USB SEND ERROR DEFAULT CASE\n");
 8008d4e:	4808      	ldr	r0, [pc, #32]	; (8008d70 <MX_USB_Send_Midi+0x88>)
 8008d50:	f000 fd0e 	bl	8009770 <puts>
		  }
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20002494 	.word	0x20002494
 8008d64:	0800a70c 	.word	0x0800a70c
 8008d68:	0800a710 	.word	0x0800a710
 8008d6c:	0800a720 	.word	0x0800a720
 8008d70:	0800a730 	.word	0x0800a730

08008d74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	6039      	str	r1, [r7, #0]
 8008d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2212      	movs	r2, #18
 8008d84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d86:	4b03      	ldr	r3, [pc, #12]	; (8008d94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	200000e8 	.word	0x200000e8

08008d98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	6039      	str	r1, [r7, #0]
 8008da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2204      	movs	r2, #4
 8008da8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008daa:	4b03      	ldr	r3, [pc, #12]	; (8008db8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	200000fc 	.word	0x200000fc

08008dbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	6039      	str	r1, [r7, #0]
 8008dc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d105      	bne.n	8008dda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	4907      	ldr	r1, [pc, #28]	; (8008df0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dd2:	4808      	ldr	r0, [pc, #32]	; (8008df4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008dd4:	f7ff fba3 	bl	800851e <USBD_GetString>
 8008dd8:	e004      	b.n	8008de4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	4904      	ldr	r1, [pc, #16]	; (8008df0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dde:	4805      	ldr	r0, [pc, #20]	; (8008df4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008de0:	f7ff fb9d 	bl	800851e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008de4:	4b02      	ldr	r3, [pc, #8]	; (8008df0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20002764 	.word	0x20002764
 8008df4:	0800a74c 	.word	0x0800a74c

08008df8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	6039      	str	r1, [r7, #0]
 8008e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	4904      	ldr	r1, [pc, #16]	; (8008e18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e08:	4804      	ldr	r0, [pc, #16]	; (8008e1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e0a:	f7ff fb88 	bl	800851e <USBD_GetString>
  return USBD_StrDesc;
 8008e0e:	4b02      	ldr	r3, [pc, #8]	; (8008e18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20002764 	.word	0x20002764
 8008e1c:	0800a760 	.word	0x0800a760

08008e20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	6039      	str	r1, [r7, #0]
 8008e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	221a      	movs	r2, #26
 8008e30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e32:	f000 f843 	bl	8008ebc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e36:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20000100 	.word	0x20000100

08008e44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	6039      	str	r1, [r7, #0]
 8008e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e50:	79fb      	ldrb	r3, [r7, #7]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d105      	bne.n	8008e62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	4907      	ldr	r1, [pc, #28]	; (8008e78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e5a:	4808      	ldr	r0, [pc, #32]	; (8008e7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e5c:	f7ff fb5f 	bl	800851e <USBD_GetString>
 8008e60:	e004      	b.n	8008e6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	4904      	ldr	r1, [pc, #16]	; (8008e78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e66:	4805      	ldr	r0, [pc, #20]	; (8008e7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e68:	f7ff fb59 	bl	800851e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e6c:	4b02      	ldr	r3, [pc, #8]	; (8008e78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20002764 	.word	0x20002764
 8008e7c:	0800a774 	.word	0x0800a774

08008e80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	6039      	str	r1, [r7, #0]
 8008e8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d105      	bne.n	8008e9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	4907      	ldr	r1, [pc, #28]	; (8008eb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e96:	4808      	ldr	r0, [pc, #32]	; (8008eb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e98:	f7ff fb41 	bl	800851e <USBD_GetString>
 8008e9c:	e004      	b.n	8008ea8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	4904      	ldr	r1, [pc, #16]	; (8008eb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ea2:	4805      	ldr	r0, [pc, #20]	; (8008eb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ea4:	f7ff fb3b 	bl	800851e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ea8:	4b02      	ldr	r3, [pc, #8]	; (8008eb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20002764 	.word	0x20002764
 8008eb8:	0800a784 	.word	0x0800a784

08008ebc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ec2:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <Get_SerialNum+0x44>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ec8:	4b0e      	ldr	r3, [pc, #56]	; (8008f04 <Get_SerialNum+0x48>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ece:	4b0e      	ldr	r3, [pc, #56]	; (8008f08 <Get_SerialNum+0x4c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4413      	add	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d009      	beq.n	8008ef6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	4909      	ldr	r1, [pc, #36]	; (8008f0c <Get_SerialNum+0x50>)
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 f814 	bl	8008f14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008eec:	2204      	movs	r2, #4
 8008eee:	4908      	ldr	r1, [pc, #32]	; (8008f10 <Get_SerialNum+0x54>)
 8008ef0:	68b8      	ldr	r0, [r7, #8]
 8008ef2:	f000 f80f 	bl	8008f14 <IntToUnicode>
  }
}
 8008ef6:	bf00      	nop
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	1fff7a10 	.word	0x1fff7a10
 8008f04:	1fff7a14 	.word	0x1fff7a14
 8008f08:	1fff7a18 	.word	0x1fff7a18
 8008f0c:	20000102 	.word	0x20000102
 8008f10:	20000112 	.word	0x20000112

08008f14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b087      	sub	sp, #28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]
 8008f2a:	e027      	b.n	8008f7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	0f1b      	lsrs	r3, r3, #28
 8008f30:	2b09      	cmp	r3, #9
 8008f32:	d80b      	bhi.n	8008f4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	0f1b      	lsrs	r3, r3, #28
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	4619      	mov	r1, r3
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	440b      	add	r3, r1
 8008f44:	3230      	adds	r2, #48	; 0x30
 8008f46:	b2d2      	uxtb	r2, r2
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	e00a      	b.n	8008f62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	0f1b      	lsrs	r3, r3, #28
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	4619      	mov	r1, r3
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	440b      	add	r3, r1
 8008f5c:	3237      	adds	r2, #55	; 0x37
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	4413      	add	r3, r2
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	75fb      	strb	r3, [r7, #23]
 8008f7c:	7dfa      	ldrb	r2, [r7, #23]
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d3d3      	bcc.n	8008f2c <IntToUnicode+0x18>
  }
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 8008f92:	b480      	push	{r7}
 8008f94:	b085      	sub	sp, #20
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]

	uint8_t chan = msg[1] & 0xf;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	f003 030f 	and.w	r3, r3, #15
 8008fa6:	73fb      	strb	r3, [r7, #15]
	uint8_t msgtype = msg[1] & 0xf0;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3301      	adds	r3, #1
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	f023 030f 	bic.w	r3, r3, #15
 8008fb2:	73bb      	strb	r3, [r7, #14]
	uint8_t b1 =  msg[2];
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	789b      	ldrb	r3, [r3, #2]
 8008fb8:	737b      	strb	r3, [r7, #13]
	uint8_t b2 =  msg[3];
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	78db      	ldrb	r3, [r3, #3]
 8008fbe:	733b      	strb	r3, [r7, #12]
	uint16_t b = ((b2 & 0x7f) << 7) | (b1 & 0x7f);
 8008fc0:	7b3b      	ldrb	r3, [r7, #12]
 8008fc2:	01db      	lsls	r3, r3, #7
 8008fc4:	b21b      	sxth	r3, r3
 8008fc6:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8008fca:	b21a      	sxth	r2, r3
 8008fcc:	7b7b      	ldrb	r3, [r7, #13]
 8008fce:	b21b      	sxth	r3, r3
 8008fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fd4:	b21b      	sxth	r3, r3
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	b21b      	sxth	r3, r3
 8008fda:	817b      	strh	r3, [r7, #10]

	switch (msgtype) {
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	2be0      	cmp	r3, #224	; 0xe0
 8008fe0:	d012      	beq.n	8009008 <Midi_Receive+0x76>
 8008fe2:	2be0      	cmp	r3, #224	; 0xe0
 8008fe4:	dc12      	bgt.n	800900c <Midi_Receive+0x7a>
 8008fe6:	2bd0      	cmp	r3, #208	; 0xd0
 8008fe8:	d012      	beq.n	8009010 <Midi_Receive+0x7e>
 8008fea:	2bd0      	cmp	r3, #208	; 0xd0
 8008fec:	dc0e      	bgt.n	800900c <Midi_Receive+0x7a>
 8008fee:	2bc0      	cmp	r3, #192	; 0xc0
 8008ff0:	d010      	beq.n	8009014 <Midi_Receive+0x82>
 8008ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8008ff4:	dc0a      	bgt.n	800900c <Midi_Receive+0x7a>
 8008ff6:	2bb0      	cmp	r3, #176	; 0xb0
 8008ff8:	d00e      	beq.n	8009018 <Midi_Receive+0x86>
 8008ffa:	2bb0      	cmp	r3, #176	; 0xb0
 8008ffc:	dc06      	bgt.n	800900c <Midi_Receive+0x7a>
 8008ffe:	2b80      	cmp	r3, #128	; 0x80
 8009000:	d00c      	beq.n	800901c <Midi_Receive+0x8a>
 8009002:	2b90      	cmp	r3, #144	; 0x90
 8009004:	d00c      	beq.n	8009020 <Midi_Receive+0x8e>
		break;
	case 0xE0:
//		fluid_synth_pitch_bend(synth, chan, b);
		break;
	default:
		break;
 8009006:	e001      	b.n	800900c <Midi_Receive+0x7a>
		break;
 8009008:	bf00      	nop
 800900a:	e00a      	b.n	8009022 <Midi_Receive+0x90>
		break;
 800900c:	bf00      	nop
 800900e:	e008      	b.n	8009022 <Midi_Receive+0x90>
		break;
 8009010:	bf00      	nop
 8009012:	e006      	b.n	8009022 <Midi_Receive+0x90>
		break;
 8009014:	bf00      	nop
 8009016:	e004      	b.n	8009022 <Midi_Receive+0x90>
		break;
 8009018:	bf00      	nop
 800901a:	e002      	b.n	8009022 <Midi_Receive+0x90>
		break;
 800901c:	bf00      	nop
 800901e:	e000      	b.n	8009022 <Midi_Receive+0x90>
		break;
 8009020:	bf00      	nop
	}

	return 0;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08a      	sub	sp, #40	; 0x28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009038:	f107 0314 	add.w	r3, r7, #20
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	605a      	str	r2, [r3, #4]
 8009042:	609a      	str	r2, [r3, #8]
 8009044:	60da      	str	r2, [r3, #12]
 8009046:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009050:	d13a      	bne.n	80090c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009052:	2300      	movs	r3, #0
 8009054:	613b      	str	r3, [r7, #16]
 8009056:	4b1e      	ldr	r3, [pc, #120]	; (80090d0 <HAL_PCD_MspInit+0xa0>)
 8009058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905a:	4a1d      	ldr	r2, [pc, #116]	; (80090d0 <HAL_PCD_MspInit+0xa0>)
 800905c:	f043 0301 	orr.w	r3, r3, #1
 8009060:	6313      	str	r3, [r2, #48]	; 0x30
 8009062:	4b1b      	ldr	r3, [pc, #108]	; (80090d0 <HAL_PCD_MspInit+0xa0>)
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	613b      	str	r3, [r7, #16]
 800906c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800906e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009074:	2302      	movs	r3, #2
 8009076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009078:	2300      	movs	r3, #0
 800907a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800907c:	2300      	movs	r3, #0
 800907e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009080:	230a      	movs	r3, #10
 8009082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009084:	f107 0314 	add.w	r3, r7, #20
 8009088:	4619      	mov	r1, r3
 800908a:	4812      	ldr	r0, [pc, #72]	; (80090d4 <HAL_PCD_MspInit+0xa4>)
 800908c:	f7f9 fe9c 	bl	8002dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009090:	4b0f      	ldr	r3, [pc, #60]	; (80090d0 <HAL_PCD_MspInit+0xa0>)
 8009092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009094:	4a0e      	ldr	r2, [pc, #56]	; (80090d0 <HAL_PCD_MspInit+0xa0>)
 8009096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800909a:	6353      	str	r3, [r2, #52]	; 0x34
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	4b0b      	ldr	r3, [pc, #44]	; (80090d0 <HAL_PCD_MspInit+0xa0>)
 80090a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a4:	4a0a      	ldr	r2, [pc, #40]	; (80090d0 <HAL_PCD_MspInit+0xa0>)
 80090a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090aa:	6453      	str	r3, [r2, #68]	; 0x44
 80090ac:	4b08      	ldr	r3, [pc, #32]	; (80090d0 <HAL_PCD_MspInit+0xa0>)
 80090ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090b8:	2200      	movs	r2, #0
 80090ba:	2100      	movs	r1, #0
 80090bc:	2043      	movs	r0, #67	; 0x43
 80090be:	f7f9 fa6c 	bl	800259a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090c2:	2043      	movs	r0, #67	; 0x43
 80090c4:	f7f9 fa85 	bl	80025d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090c8:	bf00      	nop
 80090ca:	3728      	adds	r7, #40	; 0x28
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	40023800 	.word	0x40023800
 80090d4:	40020000 	.word	0x40020000

080090d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f7fe fa2f 	bl	8007552 <USBD_LL_SetupStage>
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800910e:	78fa      	ldrb	r2, [r7, #3]
 8009110:	6879      	ldr	r1, [r7, #4]
 8009112:	4613      	mov	r3, r2
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	1a9b      	subs	r3, r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	440b      	add	r3, r1
 800911c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	78fb      	ldrb	r3, [r7, #3]
 8009124:	4619      	mov	r1, r3
 8009126:	f7fe fa69 	bl	80075fc <USBD_LL_DataOutStage>
}
 800912a:	bf00      	nop
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	460b      	mov	r3, r1
 800913c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009144:	78fa      	ldrb	r2, [r7, #3]
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	4613      	mov	r3, r2
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	1a9b      	subs	r3, r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	440b      	add	r3, r1
 8009152:	3348      	adds	r3, #72	; 0x48
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	78fb      	ldrb	r3, [r7, #3]
 8009158:	4619      	mov	r1, r3
 800915a:	f7fe fab2 	bl	80076c2 <USBD_LL_DataInStage>
}
 800915e:	bf00      	nop
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b082      	sub	sp, #8
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009174:	4618      	mov	r0, r3
 8009176:	f7fe fbc6 	bl	8007906 <USBD_LL_SOF>
}
 800917a:	bf00      	nop
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800918a:	2301      	movs	r3, #1
 800918c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	2b02      	cmp	r3, #2
 8009194:	d001      	beq.n	800919a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009196:	f7f8 f972 	bl	800147e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091a0:	7bfa      	ldrb	r2, [r7, #15]
 80091a2:	4611      	mov	r1, r2
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe fb70 	bl	800788a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fe fb1c 	bl	80077ee <USBD_LL_Reset>
}
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe fb6b 	bl	80078aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	6812      	ldr	r2, [r2, #0]
 80091e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091e6:	f043 0301 	orr.w	r3, r3, #1
 80091ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a1b      	ldr	r3, [r3, #32]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091f4:	4b04      	ldr	r3, [pc, #16]	; (8009208 <HAL_PCD_SuspendCallback+0x48>)
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	4a03      	ldr	r2, [pc, #12]	; (8009208 <HAL_PCD_SuspendCallback+0x48>)
 80091fa:	f043 0306 	orr.w	r3, r3, #6
 80091fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	e000ed00 	.word	0xe000ed00

0800920c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fb5b 	bl	80078d6 <USBD_LL_Resume>
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7fe fba9 	bl	8007996 <USBD_LL_IsoOUTIncomplete>
}
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe fb71 	bl	800794a <USBD_LL_IsoINIncomplete>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe fbaf 	bl	80079e2 <USBD_LL_DevConnected>
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fbac 	bl	80079f8 <USBD_LL_DevDisconnected>
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d13c      	bne.n	8009332 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092b8:	4a20      	ldr	r2, [pc, #128]	; (800933c <USBD_LL_Init+0x94>)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a1e      	ldr	r2, [pc, #120]	; (800933c <USBD_LL_Init+0x94>)
 80092c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092c8:	4b1c      	ldr	r3, [pc, #112]	; (800933c <USBD_LL_Init+0x94>)
 80092ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80092ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80092d0:	4b1a      	ldr	r3, [pc, #104]	; (800933c <USBD_LL_Init+0x94>)
 80092d2:	2204      	movs	r2, #4
 80092d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80092d6:	4b19      	ldr	r3, [pc, #100]	; (800933c <USBD_LL_Init+0x94>)
 80092d8:	2202      	movs	r2, #2
 80092da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092dc:	4b17      	ldr	r3, [pc, #92]	; (800933c <USBD_LL_Init+0x94>)
 80092de:	2200      	movs	r2, #0
 80092e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092e2:	4b16      	ldr	r3, [pc, #88]	; (800933c <USBD_LL_Init+0x94>)
 80092e4:	2202      	movs	r2, #2
 80092e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80092e8:	4b14      	ldr	r3, [pc, #80]	; (800933c <USBD_LL_Init+0x94>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80092ee:	4b13      	ldr	r3, [pc, #76]	; (800933c <USBD_LL_Init+0x94>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80092f4:	4b11      	ldr	r3, [pc, #68]	; (800933c <USBD_LL_Init+0x94>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80092fa:	4b10      	ldr	r3, [pc, #64]	; (800933c <USBD_LL_Init+0x94>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009300:	4b0e      	ldr	r3, [pc, #56]	; (800933c <USBD_LL_Init+0x94>)
 8009302:	2200      	movs	r2, #0
 8009304:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009306:	480d      	ldr	r0, [pc, #52]	; (800933c <USBD_LL_Init+0x94>)
 8009308:	f7fa fcbd 	bl	8003c86 <HAL_PCD_Init>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009312:	f7f8 f8b4 	bl	800147e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009316:	2180      	movs	r1, #128	; 0x80
 8009318:	4808      	ldr	r0, [pc, #32]	; (800933c <USBD_LL_Init+0x94>)
 800931a:	f7fb fe1a 	bl	8004f52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800931e:	2240      	movs	r2, #64	; 0x40
 8009320:	2100      	movs	r1, #0
 8009322:	4806      	ldr	r0, [pc, #24]	; (800933c <USBD_LL_Init+0x94>)
 8009324:	f7fb fdce 	bl	8004ec4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009328:	2280      	movs	r2, #128	; 0x80
 800932a:	2101      	movs	r1, #1
 800932c:	4803      	ldr	r0, [pc, #12]	; (800933c <USBD_LL_Init+0x94>)
 800932e:	f7fb fdc9 	bl	8004ec4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20002964 	.word	0x20002964

08009340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009356:	4618      	mov	r0, r3
 8009358:	f7fa fdb2 	bl	8003ec0 <HAL_PCD_Start>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f938 	bl	80095d8 <USBD_Get_USB_Status>
 8009368:	4603      	mov	r3, r0
 800936a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800936c:	7bbb      	ldrb	r3, [r7, #14]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	4608      	mov	r0, r1
 8009380:	4611      	mov	r1, r2
 8009382:	461a      	mov	r2, r3
 8009384:	4603      	mov	r3, r0
 8009386:	70fb      	strb	r3, [r7, #3]
 8009388:	460b      	mov	r3, r1
 800938a:	70bb      	strb	r3, [r7, #2]
 800938c:	4613      	mov	r3, r2
 800938e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800939e:	78bb      	ldrb	r3, [r7, #2]
 80093a0:	883a      	ldrh	r2, [r7, #0]
 80093a2:	78f9      	ldrb	r1, [r7, #3]
 80093a4:	f7fb f996 	bl	80046d4 <HAL_PCD_EP_Open>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 f912 	bl	80095d8 <USBD_Get_USB_Status>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	460b      	mov	r3, r1
 80093cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fb f9df 	bl	80047a4 <HAL_PCD_EP_Close>
 80093e6:	4603      	mov	r3, r0
 80093e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 f8f3 	bl	80095d8 <USBD_Get_USB_Status>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f7fb fab7 	bl	8004992 <HAL_PCD_EP_SetStall>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f8d4 	bl	80095d8 <USBD_Get_USB_Status>
 8009430:	4603      	mov	r3, r0
 8009432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009434:	7bbb      	ldrb	r3, [r7, #14]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009458:	78fa      	ldrb	r2, [r7, #3]
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f7fb fafc 	bl	8004a5a <HAL_PCD_EP_ClrStall>
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 f8b5 	bl	80095d8 <USBD_Get_USB_Status>
 800946e:	4603      	mov	r3, r0
 8009470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009472:	7bbb      	ldrb	r3, [r7, #14]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800948e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009494:	2b00      	cmp	r3, #0
 8009496:	da0b      	bge.n	80094b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800949e:	68f9      	ldr	r1, [r7, #12]
 80094a0:	4613      	mov	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	333e      	adds	r3, #62	; 0x3e
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	e00b      	b.n	80094c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094b6:	68f9      	ldr	r1, [r7, #12]
 80094b8:	4613      	mov	r3, r2
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	1a9b      	subs	r3, r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094ee:	78fa      	ldrb	r2, [r7, #3]
 80094f0:	4611      	mov	r1, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fb f8c9 	bl	800468a <HAL_PCD_SetAddress>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f86a 	bl	80095d8 <USBD_Get_USB_Status>
 8009504:	4603      	mov	r3, r0
 8009506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009508:	7bbb      	ldrb	r3, [r7, #14]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b086      	sub	sp, #24
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
 800951e:	460b      	mov	r3, r1
 8009520:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009530:	7af9      	ldrb	r1, [r7, #11]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	f7fb f9e2 	bl	80048fe <HAL_PCD_EP_Transmit>
 800953a:	4603      	mov	r3, r0
 800953c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	4618      	mov	r0, r3
 8009542:	f000 f849 	bl	80095d8 <USBD_Get_USB_Status>
 8009546:	4603      	mov	r3, r0
 8009548:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800954a:	7dbb      	ldrb	r3, [r7, #22]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	607a      	str	r2, [r7, #4]
 800955e:	603b      	str	r3, [r7, #0]
 8009560:	460b      	mov	r3, r1
 8009562:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009572:	7af9      	ldrb	r1, [r7, #11]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	f7fb f95e 	bl	8004838 <HAL_PCD_EP_Receive>
 800957c:	4603      	mov	r3, r0
 800957e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	4618      	mov	r0, r3
 8009584:	f000 f828 	bl	80095d8 <USBD_Get_USB_Status>
 8009588:	4603      	mov	r3, r0
 800958a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800958c:	7dbb      	ldrb	r3, [r7, #22]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095a8:	78fa      	ldrb	r2, [r7, #3]
 80095aa:	4611      	mov	r1, r2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fb f98e 	bl	80048ce <HAL_PCD_EP_GetRxCount>
 80095b2:	4603      	mov	r3, r0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095c4:	4b03      	ldr	r3, [pc, #12]	; (80095d4 <USBD_static_malloc+0x18>)
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	200006c4 	.word	0x200006c4

080095d8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d817      	bhi.n	800961c <USBD_Get_USB_Status+0x44>
 80095ec:	a201      	add	r2, pc, #4	; (adr r2, 80095f4 <USBD_Get_USB_Status+0x1c>)
 80095ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f2:	bf00      	nop
 80095f4:	08009605 	.word	0x08009605
 80095f8:	0800960b 	.word	0x0800960b
 80095fc:	08009611 	.word	0x08009611
 8009600:	08009617 	.word	0x08009617
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	73fb      	strb	r3, [r7, #15]
    break;
 8009608:	e00b      	b.n	8009622 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800960a:	2303      	movs	r3, #3
 800960c:	73fb      	strb	r3, [r7, #15]
    break;
 800960e:	e008      	b.n	8009622 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009610:	2301      	movs	r3, #1
 8009612:	73fb      	strb	r3, [r7, #15]
    break;
 8009614:	e005      	b.n	8009622 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009616:	2303      	movs	r3, #3
 8009618:	73fb      	strb	r3, [r7, #15]
    break;
 800961a:	e002      	b.n	8009622 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800961c:	2303      	movs	r3, #3
 800961e:	73fb      	strb	r3, [r7, #15]
    break;
 8009620:	bf00      	nop
  }
  return usb_status;
 8009622:	7bfb      	ldrb	r3, [r7, #15]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <__errno>:
 8009630:	4b01      	ldr	r3, [pc, #4]	; (8009638 <__errno+0x8>)
 8009632:	6818      	ldr	r0, [r3, #0]
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000120 	.word	0x20000120

0800963c <__libc_init_array>:
 800963c:	b570      	push	{r4, r5, r6, lr}
 800963e:	4d0d      	ldr	r5, [pc, #52]	; (8009674 <__libc_init_array+0x38>)
 8009640:	4c0d      	ldr	r4, [pc, #52]	; (8009678 <__libc_init_array+0x3c>)
 8009642:	1b64      	subs	r4, r4, r5
 8009644:	10a4      	asrs	r4, r4, #2
 8009646:	2600      	movs	r6, #0
 8009648:	42a6      	cmp	r6, r4
 800964a:	d109      	bne.n	8009660 <__libc_init_array+0x24>
 800964c:	4d0b      	ldr	r5, [pc, #44]	; (800967c <__libc_init_array+0x40>)
 800964e:	4c0c      	ldr	r4, [pc, #48]	; (8009680 <__libc_init_array+0x44>)
 8009650:	f001 f84c 	bl	800a6ec <_init>
 8009654:	1b64      	subs	r4, r4, r5
 8009656:	10a4      	asrs	r4, r4, #2
 8009658:	2600      	movs	r6, #0
 800965a:	42a6      	cmp	r6, r4
 800965c:	d105      	bne.n	800966a <__libc_init_array+0x2e>
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	f855 3b04 	ldr.w	r3, [r5], #4
 8009664:	4798      	blx	r3
 8009666:	3601      	adds	r6, #1
 8009668:	e7ee      	b.n	8009648 <__libc_init_array+0xc>
 800966a:	f855 3b04 	ldr.w	r3, [r5], #4
 800966e:	4798      	blx	r3
 8009670:	3601      	adds	r6, #1
 8009672:	e7f2      	b.n	800965a <__libc_init_array+0x1e>
 8009674:	0800b5b0 	.word	0x0800b5b0
 8009678:	0800b5b0 	.word	0x0800b5b0
 800967c:	0800b5b0 	.word	0x0800b5b0
 8009680:	0800b5b4 	.word	0x0800b5b4

08009684 <memset>:
 8009684:	4402      	add	r2, r0
 8009686:	4603      	mov	r3, r0
 8009688:	4293      	cmp	r3, r2
 800968a:	d100      	bne.n	800968e <memset+0xa>
 800968c:	4770      	bx	lr
 800968e:	f803 1b01 	strb.w	r1, [r3], #1
 8009692:	e7f9      	b.n	8009688 <memset+0x4>

08009694 <_puts_r>:
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	460e      	mov	r6, r1
 8009698:	4605      	mov	r5, r0
 800969a:	b118      	cbz	r0, 80096a4 <_puts_r+0x10>
 800969c:	6983      	ldr	r3, [r0, #24]
 800969e:	b90b      	cbnz	r3, 80096a4 <_puts_r+0x10>
 80096a0:	f000 fa68 	bl	8009b74 <__sinit>
 80096a4:	69ab      	ldr	r3, [r5, #24]
 80096a6:	68ac      	ldr	r4, [r5, #8]
 80096a8:	b913      	cbnz	r3, 80096b0 <_puts_r+0x1c>
 80096aa:	4628      	mov	r0, r5
 80096ac:	f000 fa62 	bl	8009b74 <__sinit>
 80096b0:	4b2c      	ldr	r3, [pc, #176]	; (8009764 <_puts_r+0xd0>)
 80096b2:	429c      	cmp	r4, r3
 80096b4:	d120      	bne.n	80096f8 <_puts_r+0x64>
 80096b6:	686c      	ldr	r4, [r5, #4]
 80096b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096ba:	07db      	lsls	r3, r3, #31
 80096bc:	d405      	bmi.n	80096ca <_puts_r+0x36>
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	0598      	lsls	r0, r3, #22
 80096c2:	d402      	bmi.n	80096ca <_puts_r+0x36>
 80096c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096c6:	f000 faf3 	bl	8009cb0 <__retarget_lock_acquire_recursive>
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	0719      	lsls	r1, r3, #28
 80096ce:	d51d      	bpl.n	800970c <_puts_r+0x78>
 80096d0:	6923      	ldr	r3, [r4, #16]
 80096d2:	b1db      	cbz	r3, 800970c <_puts_r+0x78>
 80096d4:	3e01      	subs	r6, #1
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096dc:	3b01      	subs	r3, #1
 80096de:	60a3      	str	r3, [r4, #8]
 80096e0:	bb39      	cbnz	r1, 8009732 <_puts_r+0x9e>
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	da38      	bge.n	8009758 <_puts_r+0xc4>
 80096e6:	4622      	mov	r2, r4
 80096e8:	210a      	movs	r1, #10
 80096ea:	4628      	mov	r0, r5
 80096ec:	f000 f868 	bl	80097c0 <__swbuf_r>
 80096f0:	3001      	adds	r0, #1
 80096f2:	d011      	beq.n	8009718 <_puts_r+0x84>
 80096f4:	250a      	movs	r5, #10
 80096f6:	e011      	b.n	800971c <_puts_r+0x88>
 80096f8:	4b1b      	ldr	r3, [pc, #108]	; (8009768 <_puts_r+0xd4>)
 80096fa:	429c      	cmp	r4, r3
 80096fc:	d101      	bne.n	8009702 <_puts_r+0x6e>
 80096fe:	68ac      	ldr	r4, [r5, #8]
 8009700:	e7da      	b.n	80096b8 <_puts_r+0x24>
 8009702:	4b1a      	ldr	r3, [pc, #104]	; (800976c <_puts_r+0xd8>)
 8009704:	429c      	cmp	r4, r3
 8009706:	bf08      	it	eq
 8009708:	68ec      	ldreq	r4, [r5, #12]
 800970a:	e7d5      	b.n	80096b8 <_puts_r+0x24>
 800970c:	4621      	mov	r1, r4
 800970e:	4628      	mov	r0, r5
 8009710:	f000 f8a8 	bl	8009864 <__swsetup_r>
 8009714:	2800      	cmp	r0, #0
 8009716:	d0dd      	beq.n	80096d4 <_puts_r+0x40>
 8009718:	f04f 35ff 	mov.w	r5, #4294967295
 800971c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800971e:	07da      	lsls	r2, r3, #31
 8009720:	d405      	bmi.n	800972e <_puts_r+0x9a>
 8009722:	89a3      	ldrh	r3, [r4, #12]
 8009724:	059b      	lsls	r3, r3, #22
 8009726:	d402      	bmi.n	800972e <_puts_r+0x9a>
 8009728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800972a:	f000 fac2 	bl	8009cb2 <__retarget_lock_release_recursive>
 800972e:	4628      	mov	r0, r5
 8009730:	bd70      	pop	{r4, r5, r6, pc}
 8009732:	2b00      	cmp	r3, #0
 8009734:	da04      	bge.n	8009740 <_puts_r+0xac>
 8009736:	69a2      	ldr	r2, [r4, #24]
 8009738:	429a      	cmp	r2, r3
 800973a:	dc06      	bgt.n	800974a <_puts_r+0xb6>
 800973c:	290a      	cmp	r1, #10
 800973e:	d004      	beq.n	800974a <_puts_r+0xb6>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	6022      	str	r2, [r4, #0]
 8009746:	7019      	strb	r1, [r3, #0]
 8009748:	e7c5      	b.n	80096d6 <_puts_r+0x42>
 800974a:	4622      	mov	r2, r4
 800974c:	4628      	mov	r0, r5
 800974e:	f000 f837 	bl	80097c0 <__swbuf_r>
 8009752:	3001      	adds	r0, #1
 8009754:	d1bf      	bne.n	80096d6 <_puts_r+0x42>
 8009756:	e7df      	b.n	8009718 <_puts_r+0x84>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	250a      	movs	r5, #10
 800975c:	1c5a      	adds	r2, r3, #1
 800975e:	6022      	str	r2, [r4, #0]
 8009760:	701d      	strb	r5, [r3, #0]
 8009762:	e7db      	b.n	800971c <_puts_r+0x88>
 8009764:	0800b534 	.word	0x0800b534
 8009768:	0800b554 	.word	0x0800b554
 800976c:	0800b514 	.word	0x0800b514

08009770 <puts>:
 8009770:	4b02      	ldr	r3, [pc, #8]	; (800977c <puts+0xc>)
 8009772:	4601      	mov	r1, r0
 8009774:	6818      	ldr	r0, [r3, #0]
 8009776:	f7ff bf8d 	b.w	8009694 <_puts_r>
 800977a:	bf00      	nop
 800977c:	20000120 	.word	0x20000120

08009780 <siprintf>:
 8009780:	b40e      	push	{r1, r2, r3}
 8009782:	b500      	push	{lr}
 8009784:	b09c      	sub	sp, #112	; 0x70
 8009786:	ab1d      	add	r3, sp, #116	; 0x74
 8009788:	9002      	str	r0, [sp, #8]
 800978a:	9006      	str	r0, [sp, #24]
 800978c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009790:	4809      	ldr	r0, [pc, #36]	; (80097b8 <siprintf+0x38>)
 8009792:	9107      	str	r1, [sp, #28]
 8009794:	9104      	str	r1, [sp, #16]
 8009796:	4909      	ldr	r1, [pc, #36]	; (80097bc <siprintf+0x3c>)
 8009798:	f853 2b04 	ldr.w	r2, [r3], #4
 800979c:	9105      	str	r1, [sp, #20]
 800979e:	6800      	ldr	r0, [r0, #0]
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	a902      	add	r1, sp, #8
 80097a4:	f000 fbf0 	bl	8009f88 <_svfiprintf_r>
 80097a8:	9b02      	ldr	r3, [sp, #8]
 80097aa:	2200      	movs	r2, #0
 80097ac:	701a      	strb	r2, [r3, #0]
 80097ae:	b01c      	add	sp, #112	; 0x70
 80097b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097b4:	b003      	add	sp, #12
 80097b6:	4770      	bx	lr
 80097b8:	20000120 	.word	0x20000120
 80097bc:	ffff0208 	.word	0xffff0208

080097c0 <__swbuf_r>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	460e      	mov	r6, r1
 80097c4:	4614      	mov	r4, r2
 80097c6:	4605      	mov	r5, r0
 80097c8:	b118      	cbz	r0, 80097d2 <__swbuf_r+0x12>
 80097ca:	6983      	ldr	r3, [r0, #24]
 80097cc:	b90b      	cbnz	r3, 80097d2 <__swbuf_r+0x12>
 80097ce:	f000 f9d1 	bl	8009b74 <__sinit>
 80097d2:	4b21      	ldr	r3, [pc, #132]	; (8009858 <__swbuf_r+0x98>)
 80097d4:	429c      	cmp	r4, r3
 80097d6:	d12b      	bne.n	8009830 <__swbuf_r+0x70>
 80097d8:	686c      	ldr	r4, [r5, #4]
 80097da:	69a3      	ldr	r3, [r4, #24]
 80097dc:	60a3      	str	r3, [r4, #8]
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	071a      	lsls	r2, r3, #28
 80097e2:	d52f      	bpl.n	8009844 <__swbuf_r+0x84>
 80097e4:	6923      	ldr	r3, [r4, #16]
 80097e6:	b36b      	cbz	r3, 8009844 <__swbuf_r+0x84>
 80097e8:	6923      	ldr	r3, [r4, #16]
 80097ea:	6820      	ldr	r0, [r4, #0]
 80097ec:	1ac0      	subs	r0, r0, r3
 80097ee:	6963      	ldr	r3, [r4, #20]
 80097f0:	b2f6      	uxtb	r6, r6
 80097f2:	4283      	cmp	r3, r0
 80097f4:	4637      	mov	r7, r6
 80097f6:	dc04      	bgt.n	8009802 <__swbuf_r+0x42>
 80097f8:	4621      	mov	r1, r4
 80097fa:	4628      	mov	r0, r5
 80097fc:	f000 f926 	bl	8009a4c <_fflush_r>
 8009800:	bb30      	cbnz	r0, 8009850 <__swbuf_r+0x90>
 8009802:	68a3      	ldr	r3, [r4, #8]
 8009804:	3b01      	subs	r3, #1
 8009806:	60a3      	str	r3, [r4, #8]
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	6022      	str	r2, [r4, #0]
 800980e:	701e      	strb	r6, [r3, #0]
 8009810:	6963      	ldr	r3, [r4, #20]
 8009812:	3001      	adds	r0, #1
 8009814:	4283      	cmp	r3, r0
 8009816:	d004      	beq.n	8009822 <__swbuf_r+0x62>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	07db      	lsls	r3, r3, #31
 800981c:	d506      	bpl.n	800982c <__swbuf_r+0x6c>
 800981e:	2e0a      	cmp	r6, #10
 8009820:	d104      	bne.n	800982c <__swbuf_r+0x6c>
 8009822:	4621      	mov	r1, r4
 8009824:	4628      	mov	r0, r5
 8009826:	f000 f911 	bl	8009a4c <_fflush_r>
 800982a:	b988      	cbnz	r0, 8009850 <__swbuf_r+0x90>
 800982c:	4638      	mov	r0, r7
 800982e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009830:	4b0a      	ldr	r3, [pc, #40]	; (800985c <__swbuf_r+0x9c>)
 8009832:	429c      	cmp	r4, r3
 8009834:	d101      	bne.n	800983a <__swbuf_r+0x7a>
 8009836:	68ac      	ldr	r4, [r5, #8]
 8009838:	e7cf      	b.n	80097da <__swbuf_r+0x1a>
 800983a:	4b09      	ldr	r3, [pc, #36]	; (8009860 <__swbuf_r+0xa0>)
 800983c:	429c      	cmp	r4, r3
 800983e:	bf08      	it	eq
 8009840:	68ec      	ldreq	r4, [r5, #12]
 8009842:	e7ca      	b.n	80097da <__swbuf_r+0x1a>
 8009844:	4621      	mov	r1, r4
 8009846:	4628      	mov	r0, r5
 8009848:	f000 f80c 	bl	8009864 <__swsetup_r>
 800984c:	2800      	cmp	r0, #0
 800984e:	d0cb      	beq.n	80097e8 <__swbuf_r+0x28>
 8009850:	f04f 37ff 	mov.w	r7, #4294967295
 8009854:	e7ea      	b.n	800982c <__swbuf_r+0x6c>
 8009856:	bf00      	nop
 8009858:	0800b534 	.word	0x0800b534
 800985c:	0800b554 	.word	0x0800b554
 8009860:	0800b514 	.word	0x0800b514

08009864 <__swsetup_r>:
 8009864:	4b32      	ldr	r3, [pc, #200]	; (8009930 <__swsetup_r+0xcc>)
 8009866:	b570      	push	{r4, r5, r6, lr}
 8009868:	681d      	ldr	r5, [r3, #0]
 800986a:	4606      	mov	r6, r0
 800986c:	460c      	mov	r4, r1
 800986e:	b125      	cbz	r5, 800987a <__swsetup_r+0x16>
 8009870:	69ab      	ldr	r3, [r5, #24]
 8009872:	b913      	cbnz	r3, 800987a <__swsetup_r+0x16>
 8009874:	4628      	mov	r0, r5
 8009876:	f000 f97d 	bl	8009b74 <__sinit>
 800987a:	4b2e      	ldr	r3, [pc, #184]	; (8009934 <__swsetup_r+0xd0>)
 800987c:	429c      	cmp	r4, r3
 800987e:	d10f      	bne.n	80098a0 <__swsetup_r+0x3c>
 8009880:	686c      	ldr	r4, [r5, #4]
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009888:	0719      	lsls	r1, r3, #28
 800988a:	d42c      	bmi.n	80098e6 <__swsetup_r+0x82>
 800988c:	06dd      	lsls	r5, r3, #27
 800988e:	d411      	bmi.n	80098b4 <__swsetup_r+0x50>
 8009890:	2309      	movs	r3, #9
 8009892:	6033      	str	r3, [r6, #0]
 8009894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	f04f 30ff 	mov.w	r0, #4294967295
 800989e:	e03e      	b.n	800991e <__swsetup_r+0xba>
 80098a0:	4b25      	ldr	r3, [pc, #148]	; (8009938 <__swsetup_r+0xd4>)
 80098a2:	429c      	cmp	r4, r3
 80098a4:	d101      	bne.n	80098aa <__swsetup_r+0x46>
 80098a6:	68ac      	ldr	r4, [r5, #8]
 80098a8:	e7eb      	b.n	8009882 <__swsetup_r+0x1e>
 80098aa:	4b24      	ldr	r3, [pc, #144]	; (800993c <__swsetup_r+0xd8>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	bf08      	it	eq
 80098b0:	68ec      	ldreq	r4, [r5, #12]
 80098b2:	e7e6      	b.n	8009882 <__swsetup_r+0x1e>
 80098b4:	0758      	lsls	r0, r3, #29
 80098b6:	d512      	bpl.n	80098de <__swsetup_r+0x7a>
 80098b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ba:	b141      	cbz	r1, 80098ce <__swsetup_r+0x6a>
 80098bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098c0:	4299      	cmp	r1, r3
 80098c2:	d002      	beq.n	80098ca <__swsetup_r+0x66>
 80098c4:	4630      	mov	r0, r6
 80098c6:	f000 fa59 	bl	8009d7c <_free_r>
 80098ca:	2300      	movs	r3, #0
 80098cc:	6363      	str	r3, [r4, #52]	; 0x34
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098d4:	81a3      	strh	r3, [r4, #12]
 80098d6:	2300      	movs	r3, #0
 80098d8:	6063      	str	r3, [r4, #4]
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f043 0308 	orr.w	r3, r3, #8
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	6923      	ldr	r3, [r4, #16]
 80098e8:	b94b      	cbnz	r3, 80098fe <__swsetup_r+0x9a>
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098f4:	d003      	beq.n	80098fe <__swsetup_r+0x9a>
 80098f6:	4621      	mov	r1, r4
 80098f8:	4630      	mov	r0, r6
 80098fa:	f000 f9ff 	bl	8009cfc <__smakebuf_r>
 80098fe:	89a0      	ldrh	r0, [r4, #12]
 8009900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009904:	f010 0301 	ands.w	r3, r0, #1
 8009908:	d00a      	beq.n	8009920 <__swsetup_r+0xbc>
 800990a:	2300      	movs	r3, #0
 800990c:	60a3      	str	r3, [r4, #8]
 800990e:	6963      	ldr	r3, [r4, #20]
 8009910:	425b      	negs	r3, r3
 8009912:	61a3      	str	r3, [r4, #24]
 8009914:	6923      	ldr	r3, [r4, #16]
 8009916:	b943      	cbnz	r3, 800992a <__swsetup_r+0xc6>
 8009918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800991c:	d1ba      	bne.n	8009894 <__swsetup_r+0x30>
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	0781      	lsls	r1, r0, #30
 8009922:	bf58      	it	pl
 8009924:	6963      	ldrpl	r3, [r4, #20]
 8009926:	60a3      	str	r3, [r4, #8]
 8009928:	e7f4      	b.n	8009914 <__swsetup_r+0xb0>
 800992a:	2000      	movs	r0, #0
 800992c:	e7f7      	b.n	800991e <__swsetup_r+0xba>
 800992e:	bf00      	nop
 8009930:	20000120 	.word	0x20000120
 8009934:	0800b534 	.word	0x0800b534
 8009938:	0800b554 	.word	0x0800b554
 800993c:	0800b514 	.word	0x0800b514

08009940 <__sflush_r>:
 8009940:	898a      	ldrh	r2, [r1, #12]
 8009942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009946:	4605      	mov	r5, r0
 8009948:	0710      	lsls	r0, r2, #28
 800994a:	460c      	mov	r4, r1
 800994c:	d458      	bmi.n	8009a00 <__sflush_r+0xc0>
 800994e:	684b      	ldr	r3, [r1, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	dc05      	bgt.n	8009960 <__sflush_r+0x20>
 8009954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009956:	2b00      	cmp	r3, #0
 8009958:	dc02      	bgt.n	8009960 <__sflush_r+0x20>
 800995a:	2000      	movs	r0, #0
 800995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009962:	2e00      	cmp	r6, #0
 8009964:	d0f9      	beq.n	800995a <__sflush_r+0x1a>
 8009966:	2300      	movs	r3, #0
 8009968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800996c:	682f      	ldr	r7, [r5, #0]
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	d032      	beq.n	80099d8 <__sflush_r+0x98>
 8009972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009974:	89a3      	ldrh	r3, [r4, #12]
 8009976:	075a      	lsls	r2, r3, #29
 8009978:	d505      	bpl.n	8009986 <__sflush_r+0x46>
 800997a:	6863      	ldr	r3, [r4, #4]
 800997c:	1ac0      	subs	r0, r0, r3
 800997e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009980:	b10b      	cbz	r3, 8009986 <__sflush_r+0x46>
 8009982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009984:	1ac0      	subs	r0, r0, r3
 8009986:	2300      	movs	r3, #0
 8009988:	4602      	mov	r2, r0
 800998a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800998c:	6a21      	ldr	r1, [r4, #32]
 800998e:	4628      	mov	r0, r5
 8009990:	47b0      	blx	r6
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	d106      	bne.n	80099a6 <__sflush_r+0x66>
 8009998:	6829      	ldr	r1, [r5, #0]
 800999a:	291d      	cmp	r1, #29
 800999c:	d82c      	bhi.n	80099f8 <__sflush_r+0xb8>
 800999e:	4a2a      	ldr	r2, [pc, #168]	; (8009a48 <__sflush_r+0x108>)
 80099a0:	40ca      	lsrs	r2, r1
 80099a2:	07d6      	lsls	r6, r2, #31
 80099a4:	d528      	bpl.n	80099f8 <__sflush_r+0xb8>
 80099a6:	2200      	movs	r2, #0
 80099a8:	6062      	str	r2, [r4, #4]
 80099aa:	04d9      	lsls	r1, r3, #19
 80099ac:	6922      	ldr	r2, [r4, #16]
 80099ae:	6022      	str	r2, [r4, #0]
 80099b0:	d504      	bpl.n	80099bc <__sflush_r+0x7c>
 80099b2:	1c42      	adds	r2, r0, #1
 80099b4:	d101      	bne.n	80099ba <__sflush_r+0x7a>
 80099b6:	682b      	ldr	r3, [r5, #0]
 80099b8:	b903      	cbnz	r3, 80099bc <__sflush_r+0x7c>
 80099ba:	6560      	str	r0, [r4, #84]	; 0x54
 80099bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099be:	602f      	str	r7, [r5, #0]
 80099c0:	2900      	cmp	r1, #0
 80099c2:	d0ca      	beq.n	800995a <__sflush_r+0x1a>
 80099c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099c8:	4299      	cmp	r1, r3
 80099ca:	d002      	beq.n	80099d2 <__sflush_r+0x92>
 80099cc:	4628      	mov	r0, r5
 80099ce:	f000 f9d5 	bl	8009d7c <_free_r>
 80099d2:	2000      	movs	r0, #0
 80099d4:	6360      	str	r0, [r4, #52]	; 0x34
 80099d6:	e7c1      	b.n	800995c <__sflush_r+0x1c>
 80099d8:	6a21      	ldr	r1, [r4, #32]
 80099da:	2301      	movs	r3, #1
 80099dc:	4628      	mov	r0, r5
 80099de:	47b0      	blx	r6
 80099e0:	1c41      	adds	r1, r0, #1
 80099e2:	d1c7      	bne.n	8009974 <__sflush_r+0x34>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0c4      	beq.n	8009974 <__sflush_r+0x34>
 80099ea:	2b1d      	cmp	r3, #29
 80099ec:	d001      	beq.n	80099f2 <__sflush_r+0xb2>
 80099ee:	2b16      	cmp	r3, #22
 80099f0:	d101      	bne.n	80099f6 <__sflush_r+0xb6>
 80099f2:	602f      	str	r7, [r5, #0]
 80099f4:	e7b1      	b.n	800995a <__sflush_r+0x1a>
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	e7ad      	b.n	800995c <__sflush_r+0x1c>
 8009a00:	690f      	ldr	r7, [r1, #16]
 8009a02:	2f00      	cmp	r7, #0
 8009a04:	d0a9      	beq.n	800995a <__sflush_r+0x1a>
 8009a06:	0793      	lsls	r3, r2, #30
 8009a08:	680e      	ldr	r6, [r1, #0]
 8009a0a:	bf08      	it	eq
 8009a0c:	694b      	ldreq	r3, [r1, #20]
 8009a0e:	600f      	str	r7, [r1, #0]
 8009a10:	bf18      	it	ne
 8009a12:	2300      	movne	r3, #0
 8009a14:	eba6 0807 	sub.w	r8, r6, r7
 8009a18:	608b      	str	r3, [r1, #8]
 8009a1a:	f1b8 0f00 	cmp.w	r8, #0
 8009a1e:	dd9c      	ble.n	800995a <__sflush_r+0x1a>
 8009a20:	6a21      	ldr	r1, [r4, #32]
 8009a22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a24:	4643      	mov	r3, r8
 8009a26:	463a      	mov	r2, r7
 8009a28:	4628      	mov	r0, r5
 8009a2a:	47b0      	blx	r6
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	dc06      	bgt.n	8009a3e <__sflush_r+0xfe>
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a36:	81a3      	strh	r3, [r4, #12]
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	e78e      	b.n	800995c <__sflush_r+0x1c>
 8009a3e:	4407      	add	r7, r0
 8009a40:	eba8 0800 	sub.w	r8, r8, r0
 8009a44:	e7e9      	b.n	8009a1a <__sflush_r+0xda>
 8009a46:	bf00      	nop
 8009a48:	20400001 	.word	0x20400001

08009a4c <_fflush_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	690b      	ldr	r3, [r1, #16]
 8009a50:	4605      	mov	r5, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	b913      	cbnz	r3, 8009a5c <_fflush_r+0x10>
 8009a56:	2500      	movs	r5, #0
 8009a58:	4628      	mov	r0, r5
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	b118      	cbz	r0, 8009a66 <_fflush_r+0x1a>
 8009a5e:	6983      	ldr	r3, [r0, #24]
 8009a60:	b90b      	cbnz	r3, 8009a66 <_fflush_r+0x1a>
 8009a62:	f000 f887 	bl	8009b74 <__sinit>
 8009a66:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <_fflush_r+0x6c>)
 8009a68:	429c      	cmp	r4, r3
 8009a6a:	d11b      	bne.n	8009aa4 <_fflush_r+0x58>
 8009a6c:	686c      	ldr	r4, [r5, #4]
 8009a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0ef      	beq.n	8009a56 <_fflush_r+0xa>
 8009a76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a78:	07d0      	lsls	r0, r2, #31
 8009a7a:	d404      	bmi.n	8009a86 <_fflush_r+0x3a>
 8009a7c:	0599      	lsls	r1, r3, #22
 8009a7e:	d402      	bmi.n	8009a86 <_fflush_r+0x3a>
 8009a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a82:	f000 f915 	bl	8009cb0 <__retarget_lock_acquire_recursive>
 8009a86:	4628      	mov	r0, r5
 8009a88:	4621      	mov	r1, r4
 8009a8a:	f7ff ff59 	bl	8009940 <__sflush_r>
 8009a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a90:	07da      	lsls	r2, r3, #31
 8009a92:	4605      	mov	r5, r0
 8009a94:	d4e0      	bmi.n	8009a58 <_fflush_r+0xc>
 8009a96:	89a3      	ldrh	r3, [r4, #12]
 8009a98:	059b      	lsls	r3, r3, #22
 8009a9a:	d4dd      	bmi.n	8009a58 <_fflush_r+0xc>
 8009a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a9e:	f000 f908 	bl	8009cb2 <__retarget_lock_release_recursive>
 8009aa2:	e7d9      	b.n	8009a58 <_fflush_r+0xc>
 8009aa4:	4b05      	ldr	r3, [pc, #20]	; (8009abc <_fflush_r+0x70>)
 8009aa6:	429c      	cmp	r4, r3
 8009aa8:	d101      	bne.n	8009aae <_fflush_r+0x62>
 8009aaa:	68ac      	ldr	r4, [r5, #8]
 8009aac:	e7df      	b.n	8009a6e <_fflush_r+0x22>
 8009aae:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <_fflush_r+0x74>)
 8009ab0:	429c      	cmp	r4, r3
 8009ab2:	bf08      	it	eq
 8009ab4:	68ec      	ldreq	r4, [r5, #12]
 8009ab6:	e7da      	b.n	8009a6e <_fflush_r+0x22>
 8009ab8:	0800b534 	.word	0x0800b534
 8009abc:	0800b554 	.word	0x0800b554
 8009ac0:	0800b514 	.word	0x0800b514

08009ac4 <std>:
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	b510      	push	{r4, lr}
 8009ac8:	4604      	mov	r4, r0
 8009aca:	e9c0 3300 	strd	r3, r3, [r0]
 8009ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ad2:	6083      	str	r3, [r0, #8]
 8009ad4:	8181      	strh	r1, [r0, #12]
 8009ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8009ad8:	81c2      	strh	r2, [r0, #14]
 8009ada:	6183      	str	r3, [r0, #24]
 8009adc:	4619      	mov	r1, r3
 8009ade:	2208      	movs	r2, #8
 8009ae0:	305c      	adds	r0, #92	; 0x5c
 8009ae2:	f7ff fdcf 	bl	8009684 <memset>
 8009ae6:	4b05      	ldr	r3, [pc, #20]	; (8009afc <std+0x38>)
 8009ae8:	6263      	str	r3, [r4, #36]	; 0x24
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <std+0x3c>)
 8009aec:	62a3      	str	r3, [r4, #40]	; 0x28
 8009aee:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <std+0x40>)
 8009af0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009af2:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <std+0x44>)
 8009af4:	6224      	str	r4, [r4, #32]
 8009af6:	6323      	str	r3, [r4, #48]	; 0x30
 8009af8:	bd10      	pop	{r4, pc}
 8009afa:	bf00      	nop
 8009afc:	0800a4d1 	.word	0x0800a4d1
 8009b00:	0800a4f3 	.word	0x0800a4f3
 8009b04:	0800a52b 	.word	0x0800a52b
 8009b08:	0800a54f 	.word	0x0800a54f

08009b0c <_cleanup_r>:
 8009b0c:	4901      	ldr	r1, [pc, #4]	; (8009b14 <_cleanup_r+0x8>)
 8009b0e:	f000 b8af 	b.w	8009c70 <_fwalk_reent>
 8009b12:	bf00      	nop
 8009b14:	08009a4d 	.word	0x08009a4d

08009b18 <__sfmoreglue>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	1e4a      	subs	r2, r1, #1
 8009b1c:	2568      	movs	r5, #104	; 0x68
 8009b1e:	4355      	muls	r5, r2
 8009b20:	460e      	mov	r6, r1
 8009b22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b26:	f000 f979 	bl	8009e1c <_malloc_r>
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	b140      	cbz	r0, 8009b40 <__sfmoreglue+0x28>
 8009b2e:	2100      	movs	r1, #0
 8009b30:	e9c0 1600 	strd	r1, r6, [r0]
 8009b34:	300c      	adds	r0, #12
 8009b36:	60a0      	str	r0, [r4, #8]
 8009b38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b3c:	f7ff fda2 	bl	8009684 <memset>
 8009b40:	4620      	mov	r0, r4
 8009b42:	bd70      	pop	{r4, r5, r6, pc}

08009b44 <__sfp_lock_acquire>:
 8009b44:	4801      	ldr	r0, [pc, #4]	; (8009b4c <__sfp_lock_acquire+0x8>)
 8009b46:	f000 b8b3 	b.w	8009cb0 <__retarget_lock_acquire_recursive>
 8009b4a:	bf00      	nop
 8009b4c:	20002d74 	.word	0x20002d74

08009b50 <__sfp_lock_release>:
 8009b50:	4801      	ldr	r0, [pc, #4]	; (8009b58 <__sfp_lock_release+0x8>)
 8009b52:	f000 b8ae 	b.w	8009cb2 <__retarget_lock_release_recursive>
 8009b56:	bf00      	nop
 8009b58:	20002d74 	.word	0x20002d74

08009b5c <__sinit_lock_acquire>:
 8009b5c:	4801      	ldr	r0, [pc, #4]	; (8009b64 <__sinit_lock_acquire+0x8>)
 8009b5e:	f000 b8a7 	b.w	8009cb0 <__retarget_lock_acquire_recursive>
 8009b62:	bf00      	nop
 8009b64:	20002d6f 	.word	0x20002d6f

08009b68 <__sinit_lock_release>:
 8009b68:	4801      	ldr	r0, [pc, #4]	; (8009b70 <__sinit_lock_release+0x8>)
 8009b6a:	f000 b8a2 	b.w	8009cb2 <__retarget_lock_release_recursive>
 8009b6e:	bf00      	nop
 8009b70:	20002d6f 	.word	0x20002d6f

08009b74 <__sinit>:
 8009b74:	b510      	push	{r4, lr}
 8009b76:	4604      	mov	r4, r0
 8009b78:	f7ff fff0 	bl	8009b5c <__sinit_lock_acquire>
 8009b7c:	69a3      	ldr	r3, [r4, #24]
 8009b7e:	b11b      	cbz	r3, 8009b88 <__sinit+0x14>
 8009b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b84:	f7ff bff0 	b.w	8009b68 <__sinit_lock_release>
 8009b88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b8c:	6523      	str	r3, [r4, #80]	; 0x50
 8009b8e:	4b13      	ldr	r3, [pc, #76]	; (8009bdc <__sinit+0x68>)
 8009b90:	4a13      	ldr	r2, [pc, #76]	; (8009be0 <__sinit+0x6c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b96:	42a3      	cmp	r3, r4
 8009b98:	bf04      	itt	eq
 8009b9a:	2301      	moveq	r3, #1
 8009b9c:	61a3      	streq	r3, [r4, #24]
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f000 f820 	bl	8009be4 <__sfp>
 8009ba4:	6060      	str	r0, [r4, #4]
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 f81c 	bl	8009be4 <__sfp>
 8009bac:	60a0      	str	r0, [r4, #8]
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 f818 	bl	8009be4 <__sfp>
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	60e0      	str	r0, [r4, #12]
 8009bb8:	2104      	movs	r1, #4
 8009bba:	6860      	ldr	r0, [r4, #4]
 8009bbc:	f7ff ff82 	bl	8009ac4 <std>
 8009bc0:	68a0      	ldr	r0, [r4, #8]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	2109      	movs	r1, #9
 8009bc6:	f7ff ff7d 	bl	8009ac4 <std>
 8009bca:	68e0      	ldr	r0, [r4, #12]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	2112      	movs	r1, #18
 8009bd0:	f7ff ff78 	bl	8009ac4 <std>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	61a3      	str	r3, [r4, #24]
 8009bd8:	e7d2      	b.n	8009b80 <__sinit+0xc>
 8009bda:	bf00      	nop
 8009bdc:	0800b510 	.word	0x0800b510
 8009be0:	08009b0d 	.word	0x08009b0d

08009be4 <__sfp>:
 8009be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be6:	4607      	mov	r7, r0
 8009be8:	f7ff ffac 	bl	8009b44 <__sfp_lock_acquire>
 8009bec:	4b1e      	ldr	r3, [pc, #120]	; (8009c68 <__sfp+0x84>)
 8009bee:	681e      	ldr	r6, [r3, #0]
 8009bf0:	69b3      	ldr	r3, [r6, #24]
 8009bf2:	b913      	cbnz	r3, 8009bfa <__sfp+0x16>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7ff ffbd 	bl	8009b74 <__sinit>
 8009bfa:	3648      	adds	r6, #72	; 0x48
 8009bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c00:	3b01      	subs	r3, #1
 8009c02:	d503      	bpl.n	8009c0c <__sfp+0x28>
 8009c04:	6833      	ldr	r3, [r6, #0]
 8009c06:	b30b      	cbz	r3, 8009c4c <__sfp+0x68>
 8009c08:	6836      	ldr	r6, [r6, #0]
 8009c0a:	e7f7      	b.n	8009bfc <__sfp+0x18>
 8009c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c10:	b9d5      	cbnz	r5, 8009c48 <__sfp+0x64>
 8009c12:	4b16      	ldr	r3, [pc, #88]	; (8009c6c <__sfp+0x88>)
 8009c14:	60e3      	str	r3, [r4, #12]
 8009c16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c1a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c1c:	f000 f847 	bl	8009cae <__retarget_lock_init_recursive>
 8009c20:	f7ff ff96 	bl	8009b50 <__sfp_lock_release>
 8009c24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c2c:	6025      	str	r5, [r4, #0]
 8009c2e:	61a5      	str	r5, [r4, #24]
 8009c30:	2208      	movs	r2, #8
 8009c32:	4629      	mov	r1, r5
 8009c34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c38:	f7ff fd24 	bl	8009684 <memset>
 8009c3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c44:	4620      	mov	r0, r4
 8009c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c48:	3468      	adds	r4, #104	; 0x68
 8009c4a:	e7d9      	b.n	8009c00 <__sfp+0x1c>
 8009c4c:	2104      	movs	r1, #4
 8009c4e:	4638      	mov	r0, r7
 8009c50:	f7ff ff62 	bl	8009b18 <__sfmoreglue>
 8009c54:	4604      	mov	r4, r0
 8009c56:	6030      	str	r0, [r6, #0]
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d1d5      	bne.n	8009c08 <__sfp+0x24>
 8009c5c:	f7ff ff78 	bl	8009b50 <__sfp_lock_release>
 8009c60:	230c      	movs	r3, #12
 8009c62:	603b      	str	r3, [r7, #0]
 8009c64:	e7ee      	b.n	8009c44 <__sfp+0x60>
 8009c66:	bf00      	nop
 8009c68:	0800b510 	.word	0x0800b510
 8009c6c:	ffff0001 	.word	0xffff0001

08009c70 <_fwalk_reent>:
 8009c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c74:	4606      	mov	r6, r0
 8009c76:	4688      	mov	r8, r1
 8009c78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c7c:	2700      	movs	r7, #0
 8009c7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c82:	f1b9 0901 	subs.w	r9, r9, #1
 8009c86:	d505      	bpl.n	8009c94 <_fwalk_reent+0x24>
 8009c88:	6824      	ldr	r4, [r4, #0]
 8009c8a:	2c00      	cmp	r4, #0
 8009c8c:	d1f7      	bne.n	8009c7e <_fwalk_reent+0xe>
 8009c8e:	4638      	mov	r0, r7
 8009c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c94:	89ab      	ldrh	r3, [r5, #12]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d907      	bls.n	8009caa <_fwalk_reent+0x3a>
 8009c9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	d003      	beq.n	8009caa <_fwalk_reent+0x3a>
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	47c0      	blx	r8
 8009ca8:	4307      	orrs	r7, r0
 8009caa:	3568      	adds	r5, #104	; 0x68
 8009cac:	e7e9      	b.n	8009c82 <_fwalk_reent+0x12>

08009cae <__retarget_lock_init_recursive>:
 8009cae:	4770      	bx	lr

08009cb0 <__retarget_lock_acquire_recursive>:
 8009cb0:	4770      	bx	lr

08009cb2 <__retarget_lock_release_recursive>:
 8009cb2:	4770      	bx	lr

08009cb4 <__swhatbuf_r>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	460e      	mov	r6, r1
 8009cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cbc:	2900      	cmp	r1, #0
 8009cbe:	b096      	sub	sp, #88	; 0x58
 8009cc0:	4614      	mov	r4, r2
 8009cc2:	461d      	mov	r5, r3
 8009cc4:	da07      	bge.n	8009cd6 <__swhatbuf_r+0x22>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	89b3      	ldrh	r3, [r6, #12]
 8009ccc:	061a      	lsls	r2, r3, #24
 8009cce:	d410      	bmi.n	8009cf2 <__swhatbuf_r+0x3e>
 8009cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd4:	e00e      	b.n	8009cf4 <__swhatbuf_r+0x40>
 8009cd6:	466a      	mov	r2, sp
 8009cd8:	f000 fc60 	bl	800a59c <_fstat_r>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	dbf2      	blt.n	8009cc6 <__swhatbuf_r+0x12>
 8009ce0:	9a01      	ldr	r2, [sp, #4]
 8009ce2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ce6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cea:	425a      	negs	r2, r3
 8009cec:	415a      	adcs	r2, r3
 8009cee:	602a      	str	r2, [r5, #0]
 8009cf0:	e7ee      	b.n	8009cd0 <__swhatbuf_r+0x1c>
 8009cf2:	2340      	movs	r3, #64	; 0x40
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	b016      	add	sp, #88	; 0x58
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}

08009cfc <__smakebuf_r>:
 8009cfc:	898b      	ldrh	r3, [r1, #12]
 8009cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d00:	079d      	lsls	r5, r3, #30
 8009d02:	4606      	mov	r6, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	d507      	bpl.n	8009d18 <__smakebuf_r+0x1c>
 8009d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	6123      	str	r3, [r4, #16]
 8009d10:	2301      	movs	r3, #1
 8009d12:	6163      	str	r3, [r4, #20]
 8009d14:	b002      	add	sp, #8
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	ab01      	add	r3, sp, #4
 8009d1a:	466a      	mov	r2, sp
 8009d1c:	f7ff ffca 	bl	8009cb4 <__swhatbuf_r>
 8009d20:	9900      	ldr	r1, [sp, #0]
 8009d22:	4605      	mov	r5, r0
 8009d24:	4630      	mov	r0, r6
 8009d26:	f000 f879 	bl	8009e1c <_malloc_r>
 8009d2a:	b948      	cbnz	r0, 8009d40 <__smakebuf_r+0x44>
 8009d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d30:	059a      	lsls	r2, r3, #22
 8009d32:	d4ef      	bmi.n	8009d14 <__smakebuf_r+0x18>
 8009d34:	f023 0303 	bic.w	r3, r3, #3
 8009d38:	f043 0302 	orr.w	r3, r3, #2
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	e7e3      	b.n	8009d08 <__smakebuf_r+0xc>
 8009d40:	4b0d      	ldr	r3, [pc, #52]	; (8009d78 <__smakebuf_r+0x7c>)
 8009d42:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	6020      	str	r0, [r4, #0]
 8009d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	9b00      	ldr	r3, [sp, #0]
 8009d50:	6163      	str	r3, [r4, #20]
 8009d52:	9b01      	ldr	r3, [sp, #4]
 8009d54:	6120      	str	r0, [r4, #16]
 8009d56:	b15b      	cbz	r3, 8009d70 <__smakebuf_r+0x74>
 8009d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f000 fc2f 	bl	800a5c0 <_isatty_r>
 8009d62:	b128      	cbz	r0, 8009d70 <__smakebuf_r+0x74>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	f023 0303 	bic.w	r3, r3, #3
 8009d6a:	f043 0301 	orr.w	r3, r3, #1
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	89a0      	ldrh	r0, [r4, #12]
 8009d72:	4305      	orrs	r5, r0
 8009d74:	81a5      	strh	r5, [r4, #12]
 8009d76:	e7cd      	b.n	8009d14 <__smakebuf_r+0x18>
 8009d78:	08009b0d 	.word	0x08009b0d

08009d7c <_free_r>:
 8009d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d7e:	2900      	cmp	r1, #0
 8009d80:	d048      	beq.n	8009e14 <_free_r+0x98>
 8009d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d86:	9001      	str	r0, [sp, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d8e:	bfb8      	it	lt
 8009d90:	18e4      	addlt	r4, r4, r3
 8009d92:	f000 fc5f 	bl	800a654 <__malloc_lock>
 8009d96:	4a20      	ldr	r2, [pc, #128]	; (8009e18 <_free_r+0x9c>)
 8009d98:	9801      	ldr	r0, [sp, #4]
 8009d9a:	6813      	ldr	r3, [r2, #0]
 8009d9c:	4615      	mov	r5, r2
 8009d9e:	b933      	cbnz	r3, 8009dae <_free_r+0x32>
 8009da0:	6063      	str	r3, [r4, #4]
 8009da2:	6014      	str	r4, [r2, #0]
 8009da4:	b003      	add	sp, #12
 8009da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009daa:	f000 bc59 	b.w	800a660 <__malloc_unlock>
 8009dae:	42a3      	cmp	r3, r4
 8009db0:	d90b      	bls.n	8009dca <_free_r+0x4e>
 8009db2:	6821      	ldr	r1, [r4, #0]
 8009db4:	1862      	adds	r2, r4, r1
 8009db6:	4293      	cmp	r3, r2
 8009db8:	bf04      	itt	eq
 8009dba:	681a      	ldreq	r2, [r3, #0]
 8009dbc:	685b      	ldreq	r3, [r3, #4]
 8009dbe:	6063      	str	r3, [r4, #4]
 8009dc0:	bf04      	itt	eq
 8009dc2:	1852      	addeq	r2, r2, r1
 8009dc4:	6022      	streq	r2, [r4, #0]
 8009dc6:	602c      	str	r4, [r5, #0]
 8009dc8:	e7ec      	b.n	8009da4 <_free_r+0x28>
 8009dca:	461a      	mov	r2, r3
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	b10b      	cbz	r3, 8009dd4 <_free_r+0x58>
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	d9fa      	bls.n	8009dca <_free_r+0x4e>
 8009dd4:	6811      	ldr	r1, [r2, #0]
 8009dd6:	1855      	adds	r5, r2, r1
 8009dd8:	42a5      	cmp	r5, r4
 8009dda:	d10b      	bne.n	8009df4 <_free_r+0x78>
 8009ddc:	6824      	ldr	r4, [r4, #0]
 8009dde:	4421      	add	r1, r4
 8009de0:	1854      	adds	r4, r2, r1
 8009de2:	42a3      	cmp	r3, r4
 8009de4:	6011      	str	r1, [r2, #0]
 8009de6:	d1dd      	bne.n	8009da4 <_free_r+0x28>
 8009de8:	681c      	ldr	r4, [r3, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	6053      	str	r3, [r2, #4]
 8009dee:	4421      	add	r1, r4
 8009df0:	6011      	str	r1, [r2, #0]
 8009df2:	e7d7      	b.n	8009da4 <_free_r+0x28>
 8009df4:	d902      	bls.n	8009dfc <_free_r+0x80>
 8009df6:	230c      	movs	r3, #12
 8009df8:	6003      	str	r3, [r0, #0]
 8009dfa:	e7d3      	b.n	8009da4 <_free_r+0x28>
 8009dfc:	6825      	ldr	r5, [r4, #0]
 8009dfe:	1961      	adds	r1, r4, r5
 8009e00:	428b      	cmp	r3, r1
 8009e02:	bf04      	itt	eq
 8009e04:	6819      	ldreq	r1, [r3, #0]
 8009e06:	685b      	ldreq	r3, [r3, #4]
 8009e08:	6063      	str	r3, [r4, #4]
 8009e0a:	bf04      	itt	eq
 8009e0c:	1949      	addeq	r1, r1, r5
 8009e0e:	6021      	streq	r1, [r4, #0]
 8009e10:	6054      	str	r4, [r2, #4]
 8009e12:	e7c7      	b.n	8009da4 <_free_r+0x28>
 8009e14:	b003      	add	sp, #12
 8009e16:	bd30      	pop	{r4, r5, pc}
 8009e18:	20002298 	.word	0x20002298

08009e1c <_malloc_r>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	1ccd      	adds	r5, r1, #3
 8009e20:	f025 0503 	bic.w	r5, r5, #3
 8009e24:	3508      	adds	r5, #8
 8009e26:	2d0c      	cmp	r5, #12
 8009e28:	bf38      	it	cc
 8009e2a:	250c      	movcc	r5, #12
 8009e2c:	2d00      	cmp	r5, #0
 8009e2e:	4606      	mov	r6, r0
 8009e30:	db01      	blt.n	8009e36 <_malloc_r+0x1a>
 8009e32:	42a9      	cmp	r1, r5
 8009e34:	d903      	bls.n	8009e3e <_malloc_r+0x22>
 8009e36:	230c      	movs	r3, #12
 8009e38:	6033      	str	r3, [r6, #0]
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e3e:	f000 fc09 	bl	800a654 <__malloc_lock>
 8009e42:	4921      	ldr	r1, [pc, #132]	; (8009ec8 <_malloc_r+0xac>)
 8009e44:	680a      	ldr	r2, [r1, #0]
 8009e46:	4614      	mov	r4, r2
 8009e48:	b99c      	cbnz	r4, 8009e72 <_malloc_r+0x56>
 8009e4a:	4f20      	ldr	r7, [pc, #128]	; (8009ecc <_malloc_r+0xb0>)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	b923      	cbnz	r3, 8009e5a <_malloc_r+0x3e>
 8009e50:	4621      	mov	r1, r4
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 fb2c 	bl	800a4b0 <_sbrk_r>
 8009e58:	6038      	str	r0, [r7, #0]
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	f000 fb27 	bl	800a4b0 <_sbrk_r>
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	d123      	bne.n	8009eae <_malloc_r+0x92>
 8009e66:	230c      	movs	r3, #12
 8009e68:	6033      	str	r3, [r6, #0]
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f000 fbf8 	bl	800a660 <__malloc_unlock>
 8009e70:	e7e3      	b.n	8009e3a <_malloc_r+0x1e>
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	1b5b      	subs	r3, r3, r5
 8009e76:	d417      	bmi.n	8009ea8 <_malloc_r+0x8c>
 8009e78:	2b0b      	cmp	r3, #11
 8009e7a:	d903      	bls.n	8009e84 <_malloc_r+0x68>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	441c      	add	r4, r3
 8009e80:	6025      	str	r5, [r4, #0]
 8009e82:	e004      	b.n	8009e8e <_malloc_r+0x72>
 8009e84:	6863      	ldr	r3, [r4, #4]
 8009e86:	42a2      	cmp	r2, r4
 8009e88:	bf0c      	ite	eq
 8009e8a:	600b      	streq	r3, [r1, #0]
 8009e8c:	6053      	strne	r3, [r2, #4]
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f000 fbe6 	bl	800a660 <__malloc_unlock>
 8009e94:	f104 000b 	add.w	r0, r4, #11
 8009e98:	1d23      	adds	r3, r4, #4
 8009e9a:	f020 0007 	bic.w	r0, r0, #7
 8009e9e:	1ac2      	subs	r2, r0, r3
 8009ea0:	d0cc      	beq.n	8009e3c <_malloc_r+0x20>
 8009ea2:	1a1b      	subs	r3, r3, r0
 8009ea4:	50a3      	str	r3, [r4, r2]
 8009ea6:	e7c9      	b.n	8009e3c <_malloc_r+0x20>
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	6864      	ldr	r4, [r4, #4]
 8009eac:	e7cc      	b.n	8009e48 <_malloc_r+0x2c>
 8009eae:	1cc4      	adds	r4, r0, #3
 8009eb0:	f024 0403 	bic.w	r4, r4, #3
 8009eb4:	42a0      	cmp	r0, r4
 8009eb6:	d0e3      	beq.n	8009e80 <_malloc_r+0x64>
 8009eb8:	1a21      	subs	r1, r4, r0
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f000 faf8 	bl	800a4b0 <_sbrk_r>
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	d1dd      	bne.n	8009e80 <_malloc_r+0x64>
 8009ec4:	e7cf      	b.n	8009e66 <_malloc_r+0x4a>
 8009ec6:	bf00      	nop
 8009ec8:	20002298 	.word	0x20002298
 8009ecc:	2000229c 	.word	0x2000229c

08009ed0 <__ssputs_r>:
 8009ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed4:	688e      	ldr	r6, [r1, #8]
 8009ed6:	429e      	cmp	r6, r3
 8009ed8:	4682      	mov	sl, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	4690      	mov	r8, r2
 8009ede:	461f      	mov	r7, r3
 8009ee0:	d838      	bhi.n	8009f54 <__ssputs_r+0x84>
 8009ee2:	898a      	ldrh	r2, [r1, #12]
 8009ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ee8:	d032      	beq.n	8009f50 <__ssputs_r+0x80>
 8009eea:	6825      	ldr	r5, [r4, #0]
 8009eec:	6909      	ldr	r1, [r1, #16]
 8009eee:	eba5 0901 	sub.w	r9, r5, r1
 8009ef2:	6965      	ldr	r5, [r4, #20]
 8009ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009efc:	3301      	adds	r3, #1
 8009efe:	444b      	add	r3, r9
 8009f00:	106d      	asrs	r5, r5, #1
 8009f02:	429d      	cmp	r5, r3
 8009f04:	bf38      	it	cc
 8009f06:	461d      	movcc	r5, r3
 8009f08:	0553      	lsls	r3, r2, #21
 8009f0a:	d531      	bpl.n	8009f70 <__ssputs_r+0xa0>
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	f7ff ff85 	bl	8009e1c <_malloc_r>
 8009f12:	4606      	mov	r6, r0
 8009f14:	b950      	cbnz	r0, 8009f2c <__ssputs_r+0x5c>
 8009f16:	230c      	movs	r3, #12
 8009f18:	f8ca 3000 	str.w	r3, [sl]
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f22:	81a3      	strh	r3, [r4, #12]
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2c:	6921      	ldr	r1, [r4, #16]
 8009f2e:	464a      	mov	r2, r9
 8009f30:	f000 fb68 	bl	800a604 <memcpy>
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f3e:	81a3      	strh	r3, [r4, #12]
 8009f40:	6126      	str	r6, [r4, #16]
 8009f42:	6165      	str	r5, [r4, #20]
 8009f44:	444e      	add	r6, r9
 8009f46:	eba5 0509 	sub.w	r5, r5, r9
 8009f4a:	6026      	str	r6, [r4, #0]
 8009f4c:	60a5      	str	r5, [r4, #8]
 8009f4e:	463e      	mov	r6, r7
 8009f50:	42be      	cmp	r6, r7
 8009f52:	d900      	bls.n	8009f56 <__ssputs_r+0x86>
 8009f54:	463e      	mov	r6, r7
 8009f56:	4632      	mov	r2, r6
 8009f58:	6820      	ldr	r0, [r4, #0]
 8009f5a:	4641      	mov	r1, r8
 8009f5c:	f000 fb60 	bl	800a620 <memmove>
 8009f60:	68a3      	ldr	r3, [r4, #8]
 8009f62:	6822      	ldr	r2, [r4, #0]
 8009f64:	1b9b      	subs	r3, r3, r6
 8009f66:	4432      	add	r2, r6
 8009f68:	60a3      	str	r3, [r4, #8]
 8009f6a:	6022      	str	r2, [r4, #0]
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	e7db      	b.n	8009f28 <__ssputs_r+0x58>
 8009f70:	462a      	mov	r2, r5
 8009f72:	f000 fb7b 	bl	800a66c <_realloc_r>
 8009f76:	4606      	mov	r6, r0
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d1e1      	bne.n	8009f40 <__ssputs_r+0x70>
 8009f7c:	6921      	ldr	r1, [r4, #16]
 8009f7e:	4650      	mov	r0, sl
 8009f80:	f7ff fefc 	bl	8009d7c <_free_r>
 8009f84:	e7c7      	b.n	8009f16 <__ssputs_r+0x46>
	...

08009f88 <_svfiprintf_r>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	4698      	mov	r8, r3
 8009f8e:	898b      	ldrh	r3, [r1, #12]
 8009f90:	061b      	lsls	r3, r3, #24
 8009f92:	b09d      	sub	sp, #116	; 0x74
 8009f94:	4607      	mov	r7, r0
 8009f96:	460d      	mov	r5, r1
 8009f98:	4614      	mov	r4, r2
 8009f9a:	d50e      	bpl.n	8009fba <_svfiprintf_r+0x32>
 8009f9c:	690b      	ldr	r3, [r1, #16]
 8009f9e:	b963      	cbnz	r3, 8009fba <_svfiprintf_r+0x32>
 8009fa0:	2140      	movs	r1, #64	; 0x40
 8009fa2:	f7ff ff3b 	bl	8009e1c <_malloc_r>
 8009fa6:	6028      	str	r0, [r5, #0]
 8009fa8:	6128      	str	r0, [r5, #16]
 8009faa:	b920      	cbnz	r0, 8009fb6 <_svfiprintf_r+0x2e>
 8009fac:	230c      	movs	r3, #12
 8009fae:	603b      	str	r3, [r7, #0]
 8009fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb4:	e0d1      	b.n	800a15a <_svfiprintf_r+0x1d2>
 8009fb6:	2340      	movs	r3, #64	; 0x40
 8009fb8:	616b      	str	r3, [r5, #20]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fbe:	2320      	movs	r3, #32
 8009fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fc8:	2330      	movs	r3, #48	; 0x30
 8009fca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a174 <_svfiprintf_r+0x1ec>
 8009fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fd2:	f04f 0901 	mov.w	r9, #1
 8009fd6:	4623      	mov	r3, r4
 8009fd8:	469a      	mov	sl, r3
 8009fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fde:	b10a      	cbz	r2, 8009fe4 <_svfiprintf_r+0x5c>
 8009fe0:	2a25      	cmp	r2, #37	; 0x25
 8009fe2:	d1f9      	bne.n	8009fd8 <_svfiprintf_r+0x50>
 8009fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8009fe8:	d00b      	beq.n	800a002 <_svfiprintf_r+0x7a>
 8009fea:	465b      	mov	r3, fp
 8009fec:	4622      	mov	r2, r4
 8009fee:	4629      	mov	r1, r5
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	f7ff ff6d 	bl	8009ed0 <__ssputs_r>
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	f000 80aa 	beq.w	800a150 <_svfiprintf_r+0x1c8>
 8009ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ffe:	445a      	add	r2, fp
 800a000:	9209      	str	r2, [sp, #36]	; 0x24
 800a002:	f89a 3000 	ldrb.w	r3, [sl]
 800a006:	2b00      	cmp	r3, #0
 800a008:	f000 80a2 	beq.w	800a150 <_svfiprintf_r+0x1c8>
 800a00c:	2300      	movs	r3, #0
 800a00e:	f04f 32ff 	mov.w	r2, #4294967295
 800a012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a016:	f10a 0a01 	add.w	sl, sl, #1
 800a01a:	9304      	str	r3, [sp, #16]
 800a01c:	9307      	str	r3, [sp, #28]
 800a01e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a022:	931a      	str	r3, [sp, #104]	; 0x68
 800a024:	4654      	mov	r4, sl
 800a026:	2205      	movs	r2, #5
 800a028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a02c:	4851      	ldr	r0, [pc, #324]	; (800a174 <_svfiprintf_r+0x1ec>)
 800a02e:	f7f6 f8d7 	bl	80001e0 <memchr>
 800a032:	9a04      	ldr	r2, [sp, #16]
 800a034:	b9d8      	cbnz	r0, 800a06e <_svfiprintf_r+0xe6>
 800a036:	06d0      	lsls	r0, r2, #27
 800a038:	bf44      	itt	mi
 800a03a:	2320      	movmi	r3, #32
 800a03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a040:	0711      	lsls	r1, r2, #28
 800a042:	bf44      	itt	mi
 800a044:	232b      	movmi	r3, #43	; 0x2b
 800a046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a04a:	f89a 3000 	ldrb.w	r3, [sl]
 800a04e:	2b2a      	cmp	r3, #42	; 0x2a
 800a050:	d015      	beq.n	800a07e <_svfiprintf_r+0xf6>
 800a052:	9a07      	ldr	r2, [sp, #28]
 800a054:	4654      	mov	r4, sl
 800a056:	2000      	movs	r0, #0
 800a058:	f04f 0c0a 	mov.w	ip, #10
 800a05c:	4621      	mov	r1, r4
 800a05e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a062:	3b30      	subs	r3, #48	; 0x30
 800a064:	2b09      	cmp	r3, #9
 800a066:	d94e      	bls.n	800a106 <_svfiprintf_r+0x17e>
 800a068:	b1b0      	cbz	r0, 800a098 <_svfiprintf_r+0x110>
 800a06a:	9207      	str	r2, [sp, #28]
 800a06c:	e014      	b.n	800a098 <_svfiprintf_r+0x110>
 800a06e:	eba0 0308 	sub.w	r3, r0, r8
 800a072:	fa09 f303 	lsl.w	r3, r9, r3
 800a076:	4313      	orrs	r3, r2
 800a078:	9304      	str	r3, [sp, #16]
 800a07a:	46a2      	mov	sl, r4
 800a07c:	e7d2      	b.n	800a024 <_svfiprintf_r+0x9c>
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	1d19      	adds	r1, r3, #4
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	9103      	str	r1, [sp, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	bfbb      	ittet	lt
 800a08a:	425b      	neglt	r3, r3
 800a08c:	f042 0202 	orrlt.w	r2, r2, #2
 800a090:	9307      	strge	r3, [sp, #28]
 800a092:	9307      	strlt	r3, [sp, #28]
 800a094:	bfb8      	it	lt
 800a096:	9204      	strlt	r2, [sp, #16]
 800a098:	7823      	ldrb	r3, [r4, #0]
 800a09a:	2b2e      	cmp	r3, #46	; 0x2e
 800a09c:	d10c      	bne.n	800a0b8 <_svfiprintf_r+0x130>
 800a09e:	7863      	ldrb	r3, [r4, #1]
 800a0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0a2:	d135      	bne.n	800a110 <_svfiprintf_r+0x188>
 800a0a4:	9b03      	ldr	r3, [sp, #12]
 800a0a6:	1d1a      	adds	r2, r3, #4
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	9203      	str	r2, [sp, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	bfb8      	it	lt
 800a0b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0b4:	3402      	adds	r4, #2
 800a0b6:	9305      	str	r3, [sp, #20]
 800a0b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a184 <_svfiprintf_r+0x1fc>
 800a0bc:	7821      	ldrb	r1, [r4, #0]
 800a0be:	2203      	movs	r2, #3
 800a0c0:	4650      	mov	r0, sl
 800a0c2:	f7f6 f88d 	bl	80001e0 <memchr>
 800a0c6:	b140      	cbz	r0, 800a0da <_svfiprintf_r+0x152>
 800a0c8:	2340      	movs	r3, #64	; 0x40
 800a0ca:	eba0 000a 	sub.w	r0, r0, sl
 800a0ce:	fa03 f000 	lsl.w	r0, r3, r0
 800a0d2:	9b04      	ldr	r3, [sp, #16]
 800a0d4:	4303      	orrs	r3, r0
 800a0d6:	3401      	adds	r4, #1
 800a0d8:	9304      	str	r3, [sp, #16]
 800a0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0de:	4826      	ldr	r0, [pc, #152]	; (800a178 <_svfiprintf_r+0x1f0>)
 800a0e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0e4:	2206      	movs	r2, #6
 800a0e6:	f7f6 f87b 	bl	80001e0 <memchr>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d038      	beq.n	800a160 <_svfiprintf_r+0x1d8>
 800a0ee:	4b23      	ldr	r3, [pc, #140]	; (800a17c <_svfiprintf_r+0x1f4>)
 800a0f0:	bb1b      	cbnz	r3, 800a13a <_svfiprintf_r+0x1b2>
 800a0f2:	9b03      	ldr	r3, [sp, #12]
 800a0f4:	3307      	adds	r3, #7
 800a0f6:	f023 0307 	bic.w	r3, r3, #7
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	9303      	str	r3, [sp, #12]
 800a0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a100:	4433      	add	r3, r6
 800a102:	9309      	str	r3, [sp, #36]	; 0x24
 800a104:	e767      	b.n	8009fd6 <_svfiprintf_r+0x4e>
 800a106:	fb0c 3202 	mla	r2, ip, r2, r3
 800a10a:	460c      	mov	r4, r1
 800a10c:	2001      	movs	r0, #1
 800a10e:	e7a5      	b.n	800a05c <_svfiprintf_r+0xd4>
 800a110:	2300      	movs	r3, #0
 800a112:	3401      	adds	r4, #1
 800a114:	9305      	str	r3, [sp, #20]
 800a116:	4619      	mov	r1, r3
 800a118:	f04f 0c0a 	mov.w	ip, #10
 800a11c:	4620      	mov	r0, r4
 800a11e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a122:	3a30      	subs	r2, #48	; 0x30
 800a124:	2a09      	cmp	r2, #9
 800a126:	d903      	bls.n	800a130 <_svfiprintf_r+0x1a8>
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0c5      	beq.n	800a0b8 <_svfiprintf_r+0x130>
 800a12c:	9105      	str	r1, [sp, #20]
 800a12e:	e7c3      	b.n	800a0b8 <_svfiprintf_r+0x130>
 800a130:	fb0c 2101 	mla	r1, ip, r1, r2
 800a134:	4604      	mov	r4, r0
 800a136:	2301      	movs	r3, #1
 800a138:	e7f0      	b.n	800a11c <_svfiprintf_r+0x194>
 800a13a:	ab03      	add	r3, sp, #12
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	462a      	mov	r2, r5
 800a140:	4b0f      	ldr	r3, [pc, #60]	; (800a180 <_svfiprintf_r+0x1f8>)
 800a142:	a904      	add	r1, sp, #16
 800a144:	4638      	mov	r0, r7
 800a146:	f3af 8000 	nop.w
 800a14a:	1c42      	adds	r2, r0, #1
 800a14c:	4606      	mov	r6, r0
 800a14e:	d1d6      	bne.n	800a0fe <_svfiprintf_r+0x176>
 800a150:	89ab      	ldrh	r3, [r5, #12]
 800a152:	065b      	lsls	r3, r3, #25
 800a154:	f53f af2c 	bmi.w	8009fb0 <_svfiprintf_r+0x28>
 800a158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a15a:	b01d      	add	sp, #116	; 0x74
 800a15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a160:	ab03      	add	r3, sp, #12
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	462a      	mov	r2, r5
 800a166:	4b06      	ldr	r3, [pc, #24]	; (800a180 <_svfiprintf_r+0x1f8>)
 800a168:	a904      	add	r1, sp, #16
 800a16a:	4638      	mov	r0, r7
 800a16c:	f000 f87a 	bl	800a264 <_printf_i>
 800a170:	e7eb      	b.n	800a14a <_svfiprintf_r+0x1c2>
 800a172:	bf00      	nop
 800a174:	0800b574 	.word	0x0800b574
 800a178:	0800b57e 	.word	0x0800b57e
 800a17c:	00000000 	.word	0x00000000
 800a180:	08009ed1 	.word	0x08009ed1
 800a184:	0800b57a 	.word	0x0800b57a

0800a188 <_printf_common>:
 800a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	4616      	mov	r6, r2
 800a18e:	4699      	mov	r9, r3
 800a190:	688a      	ldr	r2, [r1, #8]
 800a192:	690b      	ldr	r3, [r1, #16]
 800a194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a198:	4293      	cmp	r3, r2
 800a19a:	bfb8      	it	lt
 800a19c:	4613      	movlt	r3, r2
 800a19e:	6033      	str	r3, [r6, #0]
 800a1a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	b10a      	cbz	r2, 800a1ae <_printf_common+0x26>
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	6033      	str	r3, [r6, #0]
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	0699      	lsls	r1, r3, #26
 800a1b2:	bf42      	ittt	mi
 800a1b4:	6833      	ldrmi	r3, [r6, #0]
 800a1b6:	3302      	addmi	r3, #2
 800a1b8:	6033      	strmi	r3, [r6, #0]
 800a1ba:	6825      	ldr	r5, [r4, #0]
 800a1bc:	f015 0506 	ands.w	r5, r5, #6
 800a1c0:	d106      	bne.n	800a1d0 <_printf_common+0x48>
 800a1c2:	f104 0a19 	add.w	sl, r4, #25
 800a1c6:	68e3      	ldr	r3, [r4, #12]
 800a1c8:	6832      	ldr	r2, [r6, #0]
 800a1ca:	1a9b      	subs	r3, r3, r2
 800a1cc:	42ab      	cmp	r3, r5
 800a1ce:	dc26      	bgt.n	800a21e <_printf_common+0x96>
 800a1d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1d4:	1e13      	subs	r3, r2, #0
 800a1d6:	6822      	ldr	r2, [r4, #0]
 800a1d8:	bf18      	it	ne
 800a1da:	2301      	movne	r3, #1
 800a1dc:	0692      	lsls	r2, r2, #26
 800a1de:	d42b      	bmi.n	800a238 <_printf_common+0xb0>
 800a1e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	47c0      	blx	r8
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d01e      	beq.n	800a22c <_printf_common+0xa4>
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	68e5      	ldr	r5, [r4, #12]
 800a1f2:	6832      	ldr	r2, [r6, #0]
 800a1f4:	f003 0306 	and.w	r3, r3, #6
 800a1f8:	2b04      	cmp	r3, #4
 800a1fa:	bf08      	it	eq
 800a1fc:	1aad      	subeq	r5, r5, r2
 800a1fe:	68a3      	ldr	r3, [r4, #8]
 800a200:	6922      	ldr	r2, [r4, #16]
 800a202:	bf0c      	ite	eq
 800a204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a208:	2500      	movne	r5, #0
 800a20a:	4293      	cmp	r3, r2
 800a20c:	bfc4      	itt	gt
 800a20e:	1a9b      	subgt	r3, r3, r2
 800a210:	18ed      	addgt	r5, r5, r3
 800a212:	2600      	movs	r6, #0
 800a214:	341a      	adds	r4, #26
 800a216:	42b5      	cmp	r5, r6
 800a218:	d11a      	bne.n	800a250 <_printf_common+0xc8>
 800a21a:	2000      	movs	r0, #0
 800a21c:	e008      	b.n	800a230 <_printf_common+0xa8>
 800a21e:	2301      	movs	r3, #1
 800a220:	4652      	mov	r2, sl
 800a222:	4649      	mov	r1, r9
 800a224:	4638      	mov	r0, r7
 800a226:	47c0      	blx	r8
 800a228:	3001      	adds	r0, #1
 800a22a:	d103      	bne.n	800a234 <_printf_common+0xac>
 800a22c:	f04f 30ff 	mov.w	r0, #4294967295
 800a230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a234:	3501      	adds	r5, #1
 800a236:	e7c6      	b.n	800a1c6 <_printf_common+0x3e>
 800a238:	18e1      	adds	r1, r4, r3
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	2030      	movs	r0, #48	; 0x30
 800a23e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a242:	4422      	add	r2, r4
 800a244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a24c:	3302      	adds	r3, #2
 800a24e:	e7c7      	b.n	800a1e0 <_printf_common+0x58>
 800a250:	2301      	movs	r3, #1
 800a252:	4622      	mov	r2, r4
 800a254:	4649      	mov	r1, r9
 800a256:	4638      	mov	r0, r7
 800a258:	47c0      	blx	r8
 800a25a:	3001      	adds	r0, #1
 800a25c:	d0e6      	beq.n	800a22c <_printf_common+0xa4>
 800a25e:	3601      	adds	r6, #1
 800a260:	e7d9      	b.n	800a216 <_printf_common+0x8e>
	...

0800a264 <_printf_i>:
 800a264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a268:	460c      	mov	r4, r1
 800a26a:	4691      	mov	r9, r2
 800a26c:	7e27      	ldrb	r7, [r4, #24]
 800a26e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a270:	2f78      	cmp	r7, #120	; 0x78
 800a272:	4680      	mov	r8, r0
 800a274:	469a      	mov	sl, r3
 800a276:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a27a:	d807      	bhi.n	800a28c <_printf_i+0x28>
 800a27c:	2f62      	cmp	r7, #98	; 0x62
 800a27e:	d80a      	bhi.n	800a296 <_printf_i+0x32>
 800a280:	2f00      	cmp	r7, #0
 800a282:	f000 80d8 	beq.w	800a436 <_printf_i+0x1d2>
 800a286:	2f58      	cmp	r7, #88	; 0x58
 800a288:	f000 80a3 	beq.w	800a3d2 <_printf_i+0x16e>
 800a28c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a294:	e03a      	b.n	800a30c <_printf_i+0xa8>
 800a296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a29a:	2b15      	cmp	r3, #21
 800a29c:	d8f6      	bhi.n	800a28c <_printf_i+0x28>
 800a29e:	a001      	add	r0, pc, #4	; (adr r0, 800a2a4 <_printf_i+0x40>)
 800a2a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a2a4:	0800a2fd 	.word	0x0800a2fd
 800a2a8:	0800a311 	.word	0x0800a311
 800a2ac:	0800a28d 	.word	0x0800a28d
 800a2b0:	0800a28d 	.word	0x0800a28d
 800a2b4:	0800a28d 	.word	0x0800a28d
 800a2b8:	0800a28d 	.word	0x0800a28d
 800a2bc:	0800a311 	.word	0x0800a311
 800a2c0:	0800a28d 	.word	0x0800a28d
 800a2c4:	0800a28d 	.word	0x0800a28d
 800a2c8:	0800a28d 	.word	0x0800a28d
 800a2cc:	0800a28d 	.word	0x0800a28d
 800a2d0:	0800a41d 	.word	0x0800a41d
 800a2d4:	0800a341 	.word	0x0800a341
 800a2d8:	0800a3ff 	.word	0x0800a3ff
 800a2dc:	0800a28d 	.word	0x0800a28d
 800a2e0:	0800a28d 	.word	0x0800a28d
 800a2e4:	0800a43f 	.word	0x0800a43f
 800a2e8:	0800a28d 	.word	0x0800a28d
 800a2ec:	0800a341 	.word	0x0800a341
 800a2f0:	0800a28d 	.word	0x0800a28d
 800a2f4:	0800a28d 	.word	0x0800a28d
 800a2f8:	0800a407 	.word	0x0800a407
 800a2fc:	680b      	ldr	r3, [r1, #0]
 800a2fe:	1d1a      	adds	r2, r3, #4
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	600a      	str	r2, [r1, #0]
 800a304:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a30c:	2301      	movs	r3, #1
 800a30e:	e0a3      	b.n	800a458 <_printf_i+0x1f4>
 800a310:	6825      	ldr	r5, [r4, #0]
 800a312:	6808      	ldr	r0, [r1, #0]
 800a314:	062e      	lsls	r6, r5, #24
 800a316:	f100 0304 	add.w	r3, r0, #4
 800a31a:	d50a      	bpl.n	800a332 <_printf_i+0xce>
 800a31c:	6805      	ldr	r5, [r0, #0]
 800a31e:	600b      	str	r3, [r1, #0]
 800a320:	2d00      	cmp	r5, #0
 800a322:	da03      	bge.n	800a32c <_printf_i+0xc8>
 800a324:	232d      	movs	r3, #45	; 0x2d
 800a326:	426d      	negs	r5, r5
 800a328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a32c:	485e      	ldr	r0, [pc, #376]	; (800a4a8 <_printf_i+0x244>)
 800a32e:	230a      	movs	r3, #10
 800a330:	e019      	b.n	800a366 <_printf_i+0x102>
 800a332:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a336:	6805      	ldr	r5, [r0, #0]
 800a338:	600b      	str	r3, [r1, #0]
 800a33a:	bf18      	it	ne
 800a33c:	b22d      	sxthne	r5, r5
 800a33e:	e7ef      	b.n	800a320 <_printf_i+0xbc>
 800a340:	680b      	ldr	r3, [r1, #0]
 800a342:	6825      	ldr	r5, [r4, #0]
 800a344:	1d18      	adds	r0, r3, #4
 800a346:	6008      	str	r0, [r1, #0]
 800a348:	0628      	lsls	r0, r5, #24
 800a34a:	d501      	bpl.n	800a350 <_printf_i+0xec>
 800a34c:	681d      	ldr	r5, [r3, #0]
 800a34e:	e002      	b.n	800a356 <_printf_i+0xf2>
 800a350:	0669      	lsls	r1, r5, #25
 800a352:	d5fb      	bpl.n	800a34c <_printf_i+0xe8>
 800a354:	881d      	ldrh	r5, [r3, #0]
 800a356:	4854      	ldr	r0, [pc, #336]	; (800a4a8 <_printf_i+0x244>)
 800a358:	2f6f      	cmp	r7, #111	; 0x6f
 800a35a:	bf0c      	ite	eq
 800a35c:	2308      	moveq	r3, #8
 800a35e:	230a      	movne	r3, #10
 800a360:	2100      	movs	r1, #0
 800a362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a366:	6866      	ldr	r6, [r4, #4]
 800a368:	60a6      	str	r6, [r4, #8]
 800a36a:	2e00      	cmp	r6, #0
 800a36c:	bfa2      	ittt	ge
 800a36e:	6821      	ldrge	r1, [r4, #0]
 800a370:	f021 0104 	bicge.w	r1, r1, #4
 800a374:	6021      	strge	r1, [r4, #0]
 800a376:	b90d      	cbnz	r5, 800a37c <_printf_i+0x118>
 800a378:	2e00      	cmp	r6, #0
 800a37a:	d04d      	beq.n	800a418 <_printf_i+0x1b4>
 800a37c:	4616      	mov	r6, r2
 800a37e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a382:	fb03 5711 	mls	r7, r3, r1, r5
 800a386:	5dc7      	ldrb	r7, [r0, r7]
 800a388:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a38c:	462f      	mov	r7, r5
 800a38e:	42bb      	cmp	r3, r7
 800a390:	460d      	mov	r5, r1
 800a392:	d9f4      	bls.n	800a37e <_printf_i+0x11a>
 800a394:	2b08      	cmp	r3, #8
 800a396:	d10b      	bne.n	800a3b0 <_printf_i+0x14c>
 800a398:	6823      	ldr	r3, [r4, #0]
 800a39a:	07df      	lsls	r7, r3, #31
 800a39c:	d508      	bpl.n	800a3b0 <_printf_i+0x14c>
 800a39e:	6923      	ldr	r3, [r4, #16]
 800a3a0:	6861      	ldr	r1, [r4, #4]
 800a3a2:	4299      	cmp	r1, r3
 800a3a4:	bfde      	ittt	le
 800a3a6:	2330      	movle	r3, #48	; 0x30
 800a3a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3b0:	1b92      	subs	r2, r2, r6
 800a3b2:	6122      	str	r2, [r4, #16]
 800a3b4:	f8cd a000 	str.w	sl, [sp]
 800a3b8:	464b      	mov	r3, r9
 800a3ba:	aa03      	add	r2, sp, #12
 800a3bc:	4621      	mov	r1, r4
 800a3be:	4640      	mov	r0, r8
 800a3c0:	f7ff fee2 	bl	800a188 <_printf_common>
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d14c      	bne.n	800a462 <_printf_i+0x1fe>
 800a3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3cc:	b004      	add	sp, #16
 800a3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d2:	4835      	ldr	r0, [pc, #212]	; (800a4a8 <_printf_i+0x244>)
 800a3d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	680e      	ldr	r6, [r1, #0]
 800a3dc:	061f      	lsls	r7, r3, #24
 800a3de:	f856 5b04 	ldr.w	r5, [r6], #4
 800a3e2:	600e      	str	r6, [r1, #0]
 800a3e4:	d514      	bpl.n	800a410 <_printf_i+0x1ac>
 800a3e6:	07d9      	lsls	r1, r3, #31
 800a3e8:	bf44      	itt	mi
 800a3ea:	f043 0320 	orrmi.w	r3, r3, #32
 800a3ee:	6023      	strmi	r3, [r4, #0]
 800a3f0:	b91d      	cbnz	r5, 800a3fa <_printf_i+0x196>
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	f023 0320 	bic.w	r3, r3, #32
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	2310      	movs	r3, #16
 800a3fc:	e7b0      	b.n	800a360 <_printf_i+0xfc>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	f043 0320 	orr.w	r3, r3, #32
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	2378      	movs	r3, #120	; 0x78
 800a408:	4828      	ldr	r0, [pc, #160]	; (800a4ac <_printf_i+0x248>)
 800a40a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a40e:	e7e3      	b.n	800a3d8 <_printf_i+0x174>
 800a410:	065e      	lsls	r6, r3, #25
 800a412:	bf48      	it	mi
 800a414:	b2ad      	uxthmi	r5, r5
 800a416:	e7e6      	b.n	800a3e6 <_printf_i+0x182>
 800a418:	4616      	mov	r6, r2
 800a41a:	e7bb      	b.n	800a394 <_printf_i+0x130>
 800a41c:	680b      	ldr	r3, [r1, #0]
 800a41e:	6826      	ldr	r6, [r4, #0]
 800a420:	6960      	ldr	r0, [r4, #20]
 800a422:	1d1d      	adds	r5, r3, #4
 800a424:	600d      	str	r5, [r1, #0]
 800a426:	0635      	lsls	r5, r6, #24
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	d501      	bpl.n	800a430 <_printf_i+0x1cc>
 800a42c:	6018      	str	r0, [r3, #0]
 800a42e:	e002      	b.n	800a436 <_printf_i+0x1d2>
 800a430:	0671      	lsls	r1, r6, #25
 800a432:	d5fb      	bpl.n	800a42c <_printf_i+0x1c8>
 800a434:	8018      	strh	r0, [r3, #0]
 800a436:	2300      	movs	r3, #0
 800a438:	6123      	str	r3, [r4, #16]
 800a43a:	4616      	mov	r6, r2
 800a43c:	e7ba      	b.n	800a3b4 <_printf_i+0x150>
 800a43e:	680b      	ldr	r3, [r1, #0]
 800a440:	1d1a      	adds	r2, r3, #4
 800a442:	600a      	str	r2, [r1, #0]
 800a444:	681e      	ldr	r6, [r3, #0]
 800a446:	6862      	ldr	r2, [r4, #4]
 800a448:	2100      	movs	r1, #0
 800a44a:	4630      	mov	r0, r6
 800a44c:	f7f5 fec8 	bl	80001e0 <memchr>
 800a450:	b108      	cbz	r0, 800a456 <_printf_i+0x1f2>
 800a452:	1b80      	subs	r0, r0, r6
 800a454:	6060      	str	r0, [r4, #4]
 800a456:	6863      	ldr	r3, [r4, #4]
 800a458:	6123      	str	r3, [r4, #16]
 800a45a:	2300      	movs	r3, #0
 800a45c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a460:	e7a8      	b.n	800a3b4 <_printf_i+0x150>
 800a462:	6923      	ldr	r3, [r4, #16]
 800a464:	4632      	mov	r2, r6
 800a466:	4649      	mov	r1, r9
 800a468:	4640      	mov	r0, r8
 800a46a:	47d0      	blx	sl
 800a46c:	3001      	adds	r0, #1
 800a46e:	d0ab      	beq.n	800a3c8 <_printf_i+0x164>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	079b      	lsls	r3, r3, #30
 800a474:	d413      	bmi.n	800a49e <_printf_i+0x23a>
 800a476:	68e0      	ldr	r0, [r4, #12]
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	4298      	cmp	r0, r3
 800a47c:	bfb8      	it	lt
 800a47e:	4618      	movlt	r0, r3
 800a480:	e7a4      	b.n	800a3cc <_printf_i+0x168>
 800a482:	2301      	movs	r3, #1
 800a484:	4632      	mov	r2, r6
 800a486:	4649      	mov	r1, r9
 800a488:	4640      	mov	r0, r8
 800a48a:	47d0      	blx	sl
 800a48c:	3001      	adds	r0, #1
 800a48e:	d09b      	beq.n	800a3c8 <_printf_i+0x164>
 800a490:	3501      	adds	r5, #1
 800a492:	68e3      	ldr	r3, [r4, #12]
 800a494:	9903      	ldr	r1, [sp, #12]
 800a496:	1a5b      	subs	r3, r3, r1
 800a498:	42ab      	cmp	r3, r5
 800a49a:	dcf2      	bgt.n	800a482 <_printf_i+0x21e>
 800a49c:	e7eb      	b.n	800a476 <_printf_i+0x212>
 800a49e:	2500      	movs	r5, #0
 800a4a0:	f104 0619 	add.w	r6, r4, #25
 800a4a4:	e7f5      	b.n	800a492 <_printf_i+0x22e>
 800a4a6:	bf00      	nop
 800a4a8:	0800b585 	.word	0x0800b585
 800a4ac:	0800b596 	.word	0x0800b596

0800a4b0 <_sbrk_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4d06      	ldr	r5, [pc, #24]	; (800a4cc <_sbrk_r+0x1c>)
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	4608      	mov	r0, r1
 800a4ba:	602b      	str	r3, [r5, #0]
 800a4bc:	f7f7 f98e 	bl	80017dc <_sbrk>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_sbrk_r+0x1a>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_sbrk_r+0x1a>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	20002d78 	.word	0x20002d78

0800a4d0 <__sread>:
 800a4d0:	b510      	push	{r4, lr}
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d8:	f000 f8ee 	bl	800a6b8 <_read_r>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	bfab      	itete	ge
 800a4e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a4e4:	181b      	addge	r3, r3, r0
 800a4e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4ea:	bfac      	ite	ge
 800a4ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4ee:	81a3      	strhlt	r3, [r4, #12]
 800a4f0:	bd10      	pop	{r4, pc}

0800a4f2 <__swrite>:
 800a4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f6:	461f      	mov	r7, r3
 800a4f8:	898b      	ldrh	r3, [r1, #12]
 800a4fa:	05db      	lsls	r3, r3, #23
 800a4fc:	4605      	mov	r5, r0
 800a4fe:	460c      	mov	r4, r1
 800a500:	4616      	mov	r6, r2
 800a502:	d505      	bpl.n	800a510 <__swrite+0x1e>
 800a504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a508:	2302      	movs	r3, #2
 800a50a:	2200      	movs	r2, #0
 800a50c:	f000 f868 	bl	800a5e0 <_lseek_r>
 800a510:	89a3      	ldrh	r3, [r4, #12]
 800a512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a51a:	81a3      	strh	r3, [r4, #12]
 800a51c:	4632      	mov	r2, r6
 800a51e:	463b      	mov	r3, r7
 800a520:	4628      	mov	r0, r5
 800a522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a526:	f000 b817 	b.w	800a558 <_write_r>

0800a52a <__sseek>:
 800a52a:	b510      	push	{r4, lr}
 800a52c:	460c      	mov	r4, r1
 800a52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a532:	f000 f855 	bl	800a5e0 <_lseek_r>
 800a536:	1c43      	adds	r3, r0, #1
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	bf15      	itete	ne
 800a53c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a53e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a542:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a546:	81a3      	strheq	r3, [r4, #12]
 800a548:	bf18      	it	ne
 800a54a:	81a3      	strhne	r3, [r4, #12]
 800a54c:	bd10      	pop	{r4, pc}

0800a54e <__sclose>:
 800a54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a552:	f000 b813 	b.w	800a57c <_close_r>
	...

0800a558 <_write_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4d07      	ldr	r5, [pc, #28]	; (800a578 <_write_r+0x20>)
 800a55c:	4604      	mov	r4, r0
 800a55e:	4608      	mov	r0, r1
 800a560:	4611      	mov	r1, r2
 800a562:	2200      	movs	r2, #0
 800a564:	602a      	str	r2, [r5, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	f7f7 f8e7 	bl	800173a <_write>
 800a56c:	1c43      	adds	r3, r0, #1
 800a56e:	d102      	bne.n	800a576 <_write_r+0x1e>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	b103      	cbz	r3, 800a576 <_write_r+0x1e>
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	bd38      	pop	{r3, r4, r5, pc}
 800a578:	20002d78 	.word	0x20002d78

0800a57c <_close_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4d06      	ldr	r5, [pc, #24]	; (800a598 <_close_r+0x1c>)
 800a580:	2300      	movs	r3, #0
 800a582:	4604      	mov	r4, r0
 800a584:	4608      	mov	r0, r1
 800a586:	602b      	str	r3, [r5, #0]
 800a588:	f7f7 f8f3 	bl	8001772 <_close>
 800a58c:	1c43      	adds	r3, r0, #1
 800a58e:	d102      	bne.n	800a596 <_close_r+0x1a>
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	b103      	cbz	r3, 800a596 <_close_r+0x1a>
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	bd38      	pop	{r3, r4, r5, pc}
 800a598:	20002d78 	.word	0x20002d78

0800a59c <_fstat_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4d07      	ldr	r5, [pc, #28]	; (800a5bc <_fstat_r+0x20>)
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4608      	mov	r0, r1
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	f7f7 f8ee 	bl	800178a <_fstat>
 800a5ae:	1c43      	adds	r3, r0, #1
 800a5b0:	d102      	bne.n	800a5b8 <_fstat_r+0x1c>
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	b103      	cbz	r3, 800a5b8 <_fstat_r+0x1c>
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20002d78 	.word	0x20002d78

0800a5c0 <_isatty_r>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	4d06      	ldr	r5, [pc, #24]	; (800a5dc <_isatty_r+0x1c>)
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	602b      	str	r3, [r5, #0]
 800a5cc:	f7f7 f8ed 	bl	80017aa <_isatty>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d102      	bne.n	800a5da <_isatty_r+0x1a>
 800a5d4:	682b      	ldr	r3, [r5, #0]
 800a5d6:	b103      	cbz	r3, 800a5da <_isatty_r+0x1a>
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	20002d78 	.word	0x20002d78

0800a5e0 <_lseek_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	4d07      	ldr	r5, [pc, #28]	; (800a600 <_lseek_r+0x20>)
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	4608      	mov	r0, r1
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	602a      	str	r2, [r5, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f7f7 f8e6 	bl	80017c0 <_lseek>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	d102      	bne.n	800a5fe <_lseek_r+0x1e>
 800a5f8:	682b      	ldr	r3, [r5, #0]
 800a5fa:	b103      	cbz	r3, 800a5fe <_lseek_r+0x1e>
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
 800a600:	20002d78 	.word	0x20002d78

0800a604 <memcpy>:
 800a604:	440a      	add	r2, r1
 800a606:	4291      	cmp	r1, r2
 800a608:	f100 33ff 	add.w	r3, r0, #4294967295
 800a60c:	d100      	bne.n	800a610 <memcpy+0xc>
 800a60e:	4770      	bx	lr
 800a610:	b510      	push	{r4, lr}
 800a612:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a61a:	4291      	cmp	r1, r2
 800a61c:	d1f9      	bne.n	800a612 <memcpy+0xe>
 800a61e:	bd10      	pop	{r4, pc}

0800a620 <memmove>:
 800a620:	4288      	cmp	r0, r1
 800a622:	b510      	push	{r4, lr}
 800a624:	eb01 0402 	add.w	r4, r1, r2
 800a628:	d902      	bls.n	800a630 <memmove+0x10>
 800a62a:	4284      	cmp	r4, r0
 800a62c:	4623      	mov	r3, r4
 800a62e:	d807      	bhi.n	800a640 <memmove+0x20>
 800a630:	1e43      	subs	r3, r0, #1
 800a632:	42a1      	cmp	r1, r4
 800a634:	d008      	beq.n	800a648 <memmove+0x28>
 800a636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a63a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a63e:	e7f8      	b.n	800a632 <memmove+0x12>
 800a640:	4402      	add	r2, r0
 800a642:	4601      	mov	r1, r0
 800a644:	428a      	cmp	r2, r1
 800a646:	d100      	bne.n	800a64a <memmove+0x2a>
 800a648:	bd10      	pop	{r4, pc}
 800a64a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a64e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a652:	e7f7      	b.n	800a644 <memmove+0x24>

0800a654 <__malloc_lock>:
 800a654:	4801      	ldr	r0, [pc, #4]	; (800a65c <__malloc_lock+0x8>)
 800a656:	f7ff bb2b 	b.w	8009cb0 <__retarget_lock_acquire_recursive>
 800a65a:	bf00      	nop
 800a65c:	20002d70 	.word	0x20002d70

0800a660 <__malloc_unlock>:
 800a660:	4801      	ldr	r0, [pc, #4]	; (800a668 <__malloc_unlock+0x8>)
 800a662:	f7ff bb26 	b.w	8009cb2 <__retarget_lock_release_recursive>
 800a666:	bf00      	nop
 800a668:	20002d70 	.word	0x20002d70

0800a66c <_realloc_r>:
 800a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66e:	4607      	mov	r7, r0
 800a670:	4614      	mov	r4, r2
 800a672:	460e      	mov	r6, r1
 800a674:	b921      	cbnz	r1, 800a680 <_realloc_r+0x14>
 800a676:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a67a:	4611      	mov	r1, r2
 800a67c:	f7ff bbce 	b.w	8009e1c <_malloc_r>
 800a680:	b922      	cbnz	r2, 800a68c <_realloc_r+0x20>
 800a682:	f7ff fb7b 	bl	8009d7c <_free_r>
 800a686:	4625      	mov	r5, r4
 800a688:	4628      	mov	r0, r5
 800a68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a68c:	f000 f826 	bl	800a6dc <_malloc_usable_size_r>
 800a690:	42a0      	cmp	r0, r4
 800a692:	d20f      	bcs.n	800a6b4 <_realloc_r+0x48>
 800a694:	4621      	mov	r1, r4
 800a696:	4638      	mov	r0, r7
 800a698:	f7ff fbc0 	bl	8009e1c <_malloc_r>
 800a69c:	4605      	mov	r5, r0
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d0f2      	beq.n	800a688 <_realloc_r+0x1c>
 800a6a2:	4631      	mov	r1, r6
 800a6a4:	4622      	mov	r2, r4
 800a6a6:	f7ff ffad 	bl	800a604 <memcpy>
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	f7ff fb65 	bl	8009d7c <_free_r>
 800a6b2:	e7e9      	b.n	800a688 <_realloc_r+0x1c>
 800a6b4:	4635      	mov	r5, r6
 800a6b6:	e7e7      	b.n	800a688 <_realloc_r+0x1c>

0800a6b8 <_read_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4d07      	ldr	r5, [pc, #28]	; (800a6d8 <_read_r+0x20>)
 800a6bc:	4604      	mov	r4, r0
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	602a      	str	r2, [r5, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f7f7 f81a 	bl	8001700 <_read>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_read_r+0x1e>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_read_r+0x1e>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	20002d78 	.word	0x20002d78

0800a6dc <_malloc_usable_size_r>:
 800a6dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e0:	1f18      	subs	r0, r3, #4
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	bfbc      	itt	lt
 800a6e6:	580b      	ldrlt	r3, [r1, r0]
 800a6e8:	18c0      	addlt	r0, r0, r3
 800a6ea:	4770      	bx	lr

0800a6ec <_init>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	bf00      	nop
 800a6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f2:	bc08      	pop	{r3}
 800a6f4:	469e      	mov	lr, r3
 800a6f6:	4770      	bx	lr

0800a6f8 <_fini>:
 800a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fa:	bf00      	nop
 800a6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fe:	bc08      	pop	{r3}
 800a700:	469e      	mov	lr, r3
 800a702:	4770      	bx	lr
