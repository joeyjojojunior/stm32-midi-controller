
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a710  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001598  0800a8b0  0800a8b0  0001a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be48  0800be48  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800be48  0800be48  0001be48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be50  0800be50  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be50  0800be50  0001be50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be54  0800be54  0001be54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  0800be58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a3c  200001b8  0800c010  000201b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bf4  0800c010  00022bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1ad  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f77  00000000  00000000  0003c395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00040310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001ccfa  00000000  00000000  000414b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001879c  00000000  00000000  0005e1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a15de  00000000  00000000  0007694e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00117f2c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001000  00000000  00000000  00117f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052b4  00000000  00000000  00118f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001b8 	.word	0x200001b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a898 	.word	0x0800a898

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001bc 	.word	0x200001bc
 80001dc:	0800a898 	.word	0x0800a898

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b96e 	b.w	8000f10 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468c      	mov	ip, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8083 	bne.w	8000d62 <__udivmoddi4+0x116>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d947      	bls.n	8000cf2 <__udivmoddi4+0xa6>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b142      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	f1c2 0020 	rsb	r0, r2, #32
 8000c6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea40 0c01 	orr.w	ip, r0, r1
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbc f6f8 	udiv	r6, ip, r8
 8000c84:	fa1f fe87 	uxth.w	lr, r7
 8000c88:	fb08 c116 	mls	r1, r8, r6, ip
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f10e 	mul.w	r1, r6, lr
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 8119 	bcs.w	8000ed4 <__udivmoddi4+0x288>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8116 	bls.w	8000ed4 <__udivmoddi4+0x288>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8105 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8102 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xaa>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d150      	bne.n	8000da0 <__udivmoddi4+0x154>
 8000cfe:	1bcb      	subs	r3, r1, r7
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	2601      	movs	r6, #1
 8000d0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb08 f30c 	mul.w	r3, r8, ip
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0xe2>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f200 80e9 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x10c>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x10a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80d9 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e7bf      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x12e>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80b1 	beq.w	8000ece <__udivmoddi4+0x282>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x1cc>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0x140>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80b8 	bhi.w	8000efc <__udivmoddi4+0x2b0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	468c      	mov	ip, r1
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0a8      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0xa0>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f603 	lsr.w	r6, r0, r3
 8000da8:	4097      	lsls	r7, r2
 8000daa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db2:	40d9      	lsrs	r1, r3
 8000db4:	4330      	orrs	r0, r6
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f108 	mul.w	r1, r6, r8
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x19c>
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dda:	f080 808d 	bcs.w	8000ef8 <__udivmoddi4+0x2ac>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 808a 	bls.w	8000ef8 <__udivmoddi4+0x2ac>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	443b      	add	r3, r7
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b281      	uxth	r1, r0
 8000dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb00 f308 	mul.w	r3, r0, r8
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x1c4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e06:	d273      	bcs.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d971      	bls.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4439      	add	r1, r7
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e16:	e778      	b.n	8000d0a <__udivmoddi4+0xbe>
 8000e18:	f1c6 0c20 	rsb	ip, r6, #32
 8000e1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e24:	431c      	orrs	r4, r3
 8000e26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e36:	431f      	orrs	r7, r3
 8000e38:	0c3b      	lsrs	r3, r7, #16
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fa1f f884 	uxth.w	r8, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	fa02 f206 	lsl.w	r2, r2, r6
 8000e54:	fa00 f306 	lsl.w	r3, r0, r6
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x220>
 8000e5a:	1861      	adds	r1, r4, r1
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e60:	d248      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e62:	458a      	cmp	sl, r1
 8000e64:	d946      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4421      	add	r1, r4
 8000e6c:	eba1 010a 	sub.w	r1, r1, sl
 8000e70:	b2bf      	uxth	r7, r7
 8000e72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7e:	fb00 f808 	mul.w	r8, r0, r8
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x24a>
 8000e86:	19e7      	adds	r7, r4, r7
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8c:	d22e      	bcs.n	8000eec <__udivmoddi4+0x2a0>
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d92c      	bls.n	8000eec <__udivmoddi4+0x2a0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4427      	add	r7, r4
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	eba7 0708 	sub.w	r7, r7, r8
 8000e9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea2:	454f      	cmp	r7, r9
 8000ea4:	46c6      	mov	lr, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	d31a      	bcc.n	8000ee0 <__udivmoddi4+0x294>
 8000eaa:	d017      	beq.n	8000edc <__udivmoddi4+0x290>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x27a>
 8000eae:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec0:	40f7      	lsrs	r7, r6
 8000ec2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e70b      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fd      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000edc:	4543      	cmp	r3, r8
 8000ede:	d2e5      	bcs.n	8000eac <__udivmoddi4+0x260>
 8000ee0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7df      	b.n	8000eac <__udivmoddi4+0x260>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e7d2      	b.n	8000e96 <__udivmoddi4+0x24a>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	e78d      	b.n	8000e10 <__udivmoddi4+0x1c4>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	e7b9      	b.n	8000e6c <__udivmoddi4+0x220>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	e775      	b.n	8000de8 <__udivmoddi4+0x19c>
 8000efc:	4630      	mov	r0, r6
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0x14a>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	4439      	add	r1, r7
 8000f06:	e713      	b.n	8000d30 <__udivmoddi4+0xe4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	e724      	b.n	8000d58 <__udivmoddi4+0x10c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <KnobMap>:
//uint8_t Knob_Map(Knob *k) {
//	return k->value * k->max_range / (k->max_values - 1);
//}

// Maps values from (0, max_values-1) to (0, m)
uint8_t KnobMap(Knob *k, uint8_t value, uint8_t m) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
 8000f20:	4613      	mov	r3, r2
 8000f22:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	78ba      	ldrb	r2, [r7, #2]
 8000f28:	fb02 f203 	mul.w	r2, r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7edb      	ldrb	r3, [r3, #27]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ffc2 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <ADC_Mux_Select>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Polls each channel NUM_ADC_SAMPLES times and saves the average ADC reading

void ADC_Mux_Select(uint8_t c) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
    if (c > NUM_ADC_CHANNELS) return;
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d824      	bhi.n	8001036 <ADC_Mux_Select+0x5a>

    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e01d      	b.n	800102e <ADC_Mux_Select+0x52>
        if (c & (1 << i)) {
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	fa42 f303 	asr.w	r3, r2, r3
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d009      	beq.n	8001016 <ADC_Mux_Select+0x3a>
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_SET);
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <ADC_Mux_Select+0x64>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	480d      	ldr	r0, [pc, #52]	; (8001044 <ADC_Mux_Select+0x68>)
 8001010:	f002 fc04 	bl	800381c <HAL_GPIO_WritePin>
 8001014:	e008      	b.n	8001028 <ADC_Mux_Select+0x4c>
        } else {
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_RESET);
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <ADC_Mux_Select+0x64>)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800101e:	2200      	movs	r2, #0
 8001020:	4619      	mov	r1, r3
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <ADC_Mux_Select+0x68>)
 8001024:	f002 fbfa 	bl	800381c <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b03      	cmp	r3, #3
 8001032:	ddde      	ble.n	8000ff2 <ADC_Mux_Select+0x16>
 8001034:	e000      	b.n	8001038 <ADC_Mux_Select+0x5c>
    if (c > NUM_ADC_CHANNELS) return;
 8001036:	bf00      	nop
        }
    }
}
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0800bd90 	.word	0x0800bd90
 8001044:	40020400 	.word	0x40020400

08001048 <ADC_Read_Knobs>:

void ADC_Read_Knobs() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b08e      	sub	sp, #56	; 0x38
 800104c:	af00      	add	r7, sp, #0
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001054:	e06c      	b.n	8001130 <ADC_Read_Knobs+0xe8>
        uint16_t adcBuf[NUM_ADC_SAMPLES];

        ADC_Mux_Select(channel);
 8001056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffbe 	bl	8000fdc <ADC_Mux_Select>

        // Select channel
        ADC_ChannelConfTypeDef sConfig = { 0 };
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
        sConfig.Channel = adcChannels[channel];
 800106e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001072:	4a34      	ldr	r2, [pc, #208]	; (8001144 <ADC_Read_Knobs+0xfc>)
 8001074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001078:	623b      	str	r3, [r7, #32]
        sConfig.Rank = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	4619      	mov	r1, r3
 8001088:	482f      	ldr	r0, [pc, #188]	; (8001148 <ADC_Read_Knobs+0x100>)
 800108a:	f001 feeb 	bl	8002e64 <HAL_ADC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <ADC_Read_Knobs+0x50>
            Error_Handler();
 8001094:	f000 fce8 	bl	8001a68 <Error_Handler>
        }

        // Sample the channel NUM_ADC_SAMPLES times to the buffer
        HAL_ADC_Start(&hadc1);
 8001098:	482b      	ldr	r0, [pc, #172]	; (8001148 <ADC_Read_Knobs+0x100>)
 800109a:	f001 fd63 	bl	8002b64 <HAL_ADC_Start>
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80010a4:	e016      	b.n	80010d4 <ADC_Read_Knobs+0x8c>
            HAL_ADC_PollForConversion(&hadc1, 1000);
 80010a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010aa:	4827      	ldr	r0, [pc, #156]	; (8001148 <ADC_Read_Knobs+0x100>)
 80010ac:	f001 fe41 	bl	8002d32 <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 80010b0:	4825      	ldr	r0, [pc, #148]	; (8001148 <ADC_Read_Knobs+0x100>)
 80010b2:	f001 fec9 	bl	8002e48 <HAL_ADC_GetValue>
 80010b6:	4602      	mov	r2, r0
 80010b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010bc:	b292      	uxth	r2, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80010c4:	440b      	add	r3, r1
 80010c6:	f823 2c38 	strh.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80010ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010ce:	3301      	adds	r3, #1
 80010d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80010d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d9e4      	bls.n	80010a6 <ADC_Read_Knobs+0x5e>
        }
        HAL_ADC_Stop(&hadc1);
 80010dc:	481a      	ldr	r0, [pc, #104]	; (8001148 <ADC_Read_Knobs+0x100>)
 80010de:	f001 fdf5 	bl	8002ccc <HAL_ADC_Stop>

        // Calculate average of all samples for the channel
        uint16_t adc_sum = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	86bb      	strh	r3, [r7, #52]	; 0x34
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80010ec:	e00f      	b.n	800110e <ADC_Read_Knobs+0xc6>
            adc_sum += adcBuf[i];
 80010ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80010f8:	4413      	add	r3, r2
 80010fa:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 80010fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001100:	4413      	add	r3, r2
 8001102:	86bb      	strh	r3, [r7, #52]	; 0x34
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8001104:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001108:	3301      	adds	r3, #1
 800110a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800110e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001112:	2b0f      	cmp	r3, #15
 8001114:	d9eb      	bls.n	80010ee <ADC_Read_Knobs+0xa6>
        }

        adcAveraged[channel] = adc_sum / NUM_ADC_SAMPLES;
 8001116:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800111a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800111c:	0912      	lsrs	r2, r2, #4
 800111e:	b291      	uxth	r1, r2
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <ADC_Read_Knobs+0x104>)
 8001122:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 8001126:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800112a:	3301      	adds	r3, #1
 800112c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001130:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001134:	2b03      	cmp	r3, #3
 8001136:	d98e      	bls.n	8001056 <ADC_Read_Knobs+0xe>
    }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3738      	adds	r7, #56	; 0x38
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000010 	.word	0x20000010
 8001148:	2000221c 	.word	0x2000221c
 800114c:	200001d4 	.word	0x200001d4

08001150 <MIDI_Send>:

// Sends a CC message for knob k with the specified value
void MIDI_Send(Knob *k, uint8_t value) {
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, KnobMap(k, value, k->max_range));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7e1c      	ldrb	r4, [r3, #24]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7e5d      	ldrb	r5, [r3, #25]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7f1a      	ldrb	r2, [r3, #28]
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fed1 	bl	8000f14 <KnobMap>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4629      	mov	r1, r5
 8001178:	4620      	mov	r0, r4
 800117a:	f007 fe9d 	bl	8008eb8 <MX_USB_Send_Midi>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001188 <MIDI_Scale_And_Filter>:

// Scales an ADC value from (0, 255) to (0, k->max_values) an applies EMA filter
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * k->max_values / UPPER_BOUND_ADC;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7edb      	ldrb	r3, [r3, #27]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9cb 	bl	8000534 <__aeabi_i2d>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <MIDI_Scale_And_Filter+0x130>)
 80011a4:	f7ff fb5a 	bl	800085c <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fce4 	bl	8000b7c <__aeabi_d2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f7ff f9cd 	bl	8000558 <__aeabi_f2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <MIDI_Scale_And_Filter+0x134>)
 80011c4:	f7ff fa20 	bl	8000608 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9ae 	bl	8000534 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff fa12 	bl	8000608 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4614      	mov	r4, r2
 80011ea:	461d      	mov	r5, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7e9b      	ldrb	r3, [r3, #26]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f99f 	bl	8000534 <__aeabi_i2d>
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <MIDI_Scale_And_Filter+0x134>)
 80011fc:	f7ff fa04 	bl	8000608 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff f848 	bl	800029c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4614      	mov	r4, r2
 8001212:	461d      	mov	r5, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7f1b      	ldrb	r3, [r3, #28]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f98b 	bl	8000534 <__aeabi_i2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4620      	mov	r0, r4
 8001224:	4629      	mov	r1, r5
 8001226:	f7ff fc61 	bl	8000aec <__aeabi_dcmplt>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d032      	beq.n	8001296 <MIDI_Scale_And_Filter+0x10e>
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff f991 	bl	8000558 <__aeabi_f2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MIDI_Scale_And_Filter+0x134>)
 800123c:	f7ff f9e4 	bl	8000608 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4614      	mov	r4, r2
 8001246:	461d      	mov	r5, r3
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f972 	bl	8000534 <__aeabi_i2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f9d6 	bl	8000608 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7e9b      	ldrb	r3, [r3, #26]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f963 	bl	8000534 <__aeabi_i2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MIDI_Scale_And_Filter+0x134>)
 8001274:	f7ff f9c8 	bl	8000608 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f80c 	bl	800029c <__adddf3>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fc56 	bl	8000b3c <__aeabi_d2uiz>
 8001290:	4603      	mov	r3, r0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	e00c      	b.n	80012b0 <MIDI_Scale_And_Filter+0x128>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7f1b      	ldrb	r3, [r3, #28]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f94a 	bl	8000534 <__aeabi_i2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fc48 	bl	8000b3c <__aeabi_d2uiz>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b2db      	uxtb	r3, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bdb0      	pop	{r4, r5, r7, pc}
 80012b8:	406f4000 	.word	0x406f4000
 80012bc:	3fe00000 	.word	0x3fe00000

080012c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0a2      	sub	sp, #136	; 0x88
 80012c4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    Knob knobs[4] = { { .init_value = 63, .row = 0, .col = 0, .label = "Cutoff", .channel = 0, .cc = 17, .value = 0, .max_values = 128, .max_range = 127, .isLocked = 1 },
 80012c6:	463b      	mov	r3, r7
 80012c8:	2280      	movs	r2, #128	; 0x80
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f008 fa87 	bl	80097e0 <memset>
 80012d2:	233f      	movs	r3, #63	; 0x3f
 80012d4:	703b      	strb	r3, [r7, #0]
 80012d6:	4ace      	ldr	r2, [pc, #824]	; (8001610 <main+0x350>)
 80012d8:	1cfb      	adds	r3, r7, #3
 80012da:	6810      	ldr	r0, [r2, #0]
 80012dc:	6018      	str	r0, [r3, #0]
 80012de:	8891      	ldrh	r1, [r2, #4]
 80012e0:	7992      	ldrb	r2, [r2, #6]
 80012e2:	8099      	strh	r1, [r3, #4]
 80012e4:	719a      	strb	r2, [r3, #6]
 80012e6:	f107 030a 	add.w	r3, r7, #10
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	2311      	movs	r3, #17
 80012f2:	767b      	strb	r3, [r7, #25]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	76fb      	strb	r3, [r7, #27]
 80012f8:	237f      	movs	r3, #127	; 0x7f
 80012fa:	773b      	strb	r3, [r7, #28]
 80012fc:	2301      	movs	r3, #1
 80012fe:	777b      	strb	r3, [r7, #29]
 8001300:	237f      	movs	r3, #127	; 0x7f
 8001302:	f887 3020 	strb.w	r3, [r7, #32]
 8001306:	2301      	movs	r3, #1
 8001308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800130c:	4bc1      	ldr	r3, [pc, #772]	; (8001614 <main+0x354>)
 800130e:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001312:	cb03      	ldmia	r3!, {r0, r1}
 8001314:	6010      	str	r0, [r2, #0]
 8001316:	6051      	str	r1, [r2, #4]
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	8113      	strh	r3, [r2, #8]
 800131c:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	711a      	strb	r2, [r3, #4]
 8001326:	2301      	movs	r3, #1
 8001328:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800132c:	2312      	movs	r3, #18
 800132e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001338:	237f      	movs	r3, #127	; 0x7f
 800133a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800133e:	2305      	movs	r3, #5
 8001340:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8001344:	2301      	movs	r3, #1
 8001346:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800134a:	4ab3      	ldr	r2, [pc, #716]	; (8001618 <main+0x358>)
 800134c:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8001350:	6810      	ldr	r0, [r2, #0]
 8001352:	6018      	str	r0, [r3, #0]
 8001354:	8892      	ldrh	r2, [r2, #4]
 8001356:	809a      	strh	r2, [r3, #4]
 8001358:	f107 0349 	add.w	r3, r7, #73	; 0x49
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	721a      	strb	r2, [r3, #8]
 8001364:	2302      	movs	r3, #2
 8001366:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 800136a:	2313      	movs	r3, #19
 800136c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8001370:	230c      	movs	r3, #12
 8001372:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001376:	237f      	movs	r3, #127	; 0x7f
 8001378:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800137c:	2301      	movs	r3, #1
 800137e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001382:	230b      	movs	r3, #11
 8001384:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8001388:	2301      	movs	r3, #1
 800138a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 800138e:	2301      	movs	r3, #1
 8001390:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8001394:	4aa1      	ldr	r2, [pc, #644]	; (800161c <main+0x35c>)
 8001396:	f107 0363 	add.w	r3, r7, #99	; 0x63
 800139a:	6810      	ldr	r0, [r2, #0]
 800139c:	6018      	str	r0, [r3, #0]
 800139e:	8892      	ldrh	r2, [r2, #4]
 80013a0:	809a      	strh	r2, [r3, #4]
 80013a2:	f107 0369 	add.w	r3, r7, #105	; 0x69
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	721a      	strb	r2, [r3, #8]
 80013ae:	2303      	movs	r3, #3
 80013b0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 80013b4:	2314      	movs	r3, #20
 80013b6:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 80013ba:	230c      	movs	r3, #12
 80013bc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80013c0:	230b      	movs	r3, #11
 80013c2:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 80013c6:	2301      	movs	r3, #1
 80013c8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            { .init_value = 127, .row = 0, .col = 1, .label = "Resonance", .channel = 1, .cc = 18, .value = 0, .max_values = 128, .max_range = 127, .isLocked = 0 },
            { .init_value = 5, .row = 1, .col = 0, .label = "Osc 0", .channel = 2, .cc = 19, .value = 0, .max_values = 12, .max_range = 127, .isLocked = 1 },
            { .init_value = 11, .row = 1, .col = 1, .label = "Osc 1", .channel = 3, .cc = 20, .value = 0, .max_values = 12, .max_range = 11, .isLocked = 1 } };

    for (int i = 2; i < 4; i++) {
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013d2:	e0c4      	b.n	800155e <main+0x29e>
        knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 80013d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013d8:	015b      	lsls	r3, r3, #5
 80013da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013de:	4413      	add	r3, r2
 80013e0:	3b6d      	subs	r3, #109	; 0x6d
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4613      	mov	r3, r2
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f008 f9ef 	bl	80097d0 <malloc>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013fa:	015b      	lsls	r3, r3, #5
 80013fc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001400:	440b      	add	r3, r1
 8001402:	3b74      	subs	r3, #116	; 0x74
 8001404:	601a      	str	r2, [r3, #0]
        strncpy(knobs[i].sub_labels[0], "MultiSaw", MAX_LABEL_CHARS);
 8001406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001410:	4413      	add	r3, r2
 8001412:	3b74      	subs	r3, #116	; 0x74
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	220e      	movs	r2, #14
 8001418:	4981      	ldr	r1, [pc, #516]	; (8001620 <main+0x360>)
 800141a:	4618      	mov	r0, r3
 800141c:	f008 fb4c 	bl	8009ab8 <strncpy>
        strncpy(knobs[i].sub_labels[1], "TriWrap", MAX_LABEL_CHARS);
 8001420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001424:	015b      	lsls	r3, r3, #5
 8001426:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800142a:	4413      	add	r3, r2
 800142c:	3b74      	subs	r3, #116	; 0x74
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	330f      	adds	r3, #15
 8001432:	220e      	movs	r2, #14
 8001434:	497b      	ldr	r1, [pc, #492]	; (8001624 <main+0x364>)
 8001436:	4618      	mov	r0, r3
 8001438:	f008 fb3e 	bl	8009ab8 <strncpy>
        strncpy(knobs[i].sub_labels[2], "Noise", MAX_LABEL_CHARS);
 800143c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001440:	015b      	lsls	r3, r3, #5
 8001442:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001446:	4413      	add	r3, r2
 8001448:	3b74      	subs	r3, #116	; 0x74
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	331e      	adds	r3, #30
 800144e:	220e      	movs	r2, #14
 8001450:	4975      	ldr	r1, [pc, #468]	; (8001628 <main+0x368>)
 8001452:	4618      	mov	r0, r3
 8001454:	f008 fb30 	bl	8009ab8 <strncpy>
        strncpy(knobs[i].sub_labels[3], "Feedback", MAX_LABEL_CHARS);
 8001458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800145c:	015b      	lsls	r3, r3, #5
 800145e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001462:	4413      	add	r3, r2
 8001464:	3b74      	subs	r3, #116	; 0x74
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	332d      	adds	r3, #45	; 0x2d
 800146a:	220e      	movs	r2, #14
 800146c:	496f      	ldr	r1, [pc, #444]	; (800162c <main+0x36c>)
 800146e:	4618      	mov	r0, r3
 8001470:	f008 fb22 	bl	8009ab8 <strncpy>
        strncpy(knobs[i].sub_labels[4], "Pulse", MAX_LABEL_CHARS);
 8001474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001478:	015b      	lsls	r3, r3, #5
 800147a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800147e:	4413      	add	r3, r2
 8001480:	3b74      	subs	r3, #116	; 0x74
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	333c      	adds	r3, #60	; 0x3c
 8001486:	220e      	movs	r2, #14
 8001488:	4969      	ldr	r1, [pc, #420]	; (8001630 <main+0x370>)
 800148a:	4618      	mov	r0, r3
 800148c:	f008 fb14 	bl	8009ab8 <strncpy>
        strncpy(knobs[i].sub_labels[5], "Saw", MAX_LABEL_CHARS);
 8001490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001494:	015b      	lsls	r3, r3, #5
 8001496:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800149a:	4413      	add	r3, r2
 800149c:	3b74      	subs	r3, #116	; 0x74
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	334b      	adds	r3, #75	; 0x4b
 80014a2:	220e      	movs	r2, #14
 80014a4:	4963      	ldr	r1, [pc, #396]	; (8001634 <main+0x374>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f008 fb06 	bl	8009ab8 <strncpy>
        strncpy(knobs[i].sub_labels[6], "Triangle", MAX_LABEL_CHARS);
 80014ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014b0:	015b      	lsls	r3, r3, #5
 80014b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014b6:	4413      	add	r3, r2
 80014b8:	3b74      	subs	r3, #116	; 0x74
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	335a      	adds	r3, #90	; 0x5a
 80014be:	220e      	movs	r2, #14
 80014c0:	495d      	ldr	r1, [pc, #372]	; (8001638 <main+0x378>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f008 faf8 	bl	8009ab8 <strncpy>
        strncpy(knobs[i].sub_labels[7], "Pulse5", MAX_LABEL_CHARS);
 80014c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014cc:	015b      	lsls	r3, r3, #5
 80014ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014d2:	4413      	add	r3, r2
 80014d4:	3b74      	subs	r3, #116	; 0x74
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3369      	adds	r3, #105	; 0x69
 80014da:	220e      	movs	r2, #14
 80014dc:	4957      	ldr	r1, [pc, #348]	; (800163c <main+0x37c>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f008 faea 	bl	8009ab8 <strncpy>
        strncpy(knobs[i].sub_labels[8], "Pulse6", MAX_LABEL_CHARS);
 80014e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014e8:	015b      	lsls	r3, r3, #5
 80014ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014ee:	4413      	add	r3, r2
 80014f0:	3b74      	subs	r3, #116	; 0x74
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3378      	adds	r3, #120	; 0x78
 80014f6:	220e      	movs	r2, #14
 80014f8:	4951      	ldr	r1, [pc, #324]	; (8001640 <main+0x380>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f008 fadc 	bl	8009ab8 <strncpy>
        strncpy(knobs[i].sub_labels[9], "Pulse7", MAX_LABEL_CHARS);
 8001500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001504:	015b      	lsls	r3, r3, #5
 8001506:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800150a:	4413      	add	r3, r2
 800150c:	3b74      	subs	r3, #116	; 0x74
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3387      	adds	r3, #135	; 0x87
 8001512:	220e      	movs	r2, #14
 8001514:	494b      	ldr	r1, [pc, #300]	; (8001644 <main+0x384>)
 8001516:	4618      	mov	r0, r3
 8001518:	f008 face 	bl	8009ab8 <strncpy>
        strncpy(knobs[i].sub_labels[10], "Pulse8", MAX_LABEL_CHARS);
 800151c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001520:	015b      	lsls	r3, r3, #5
 8001522:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001526:	4413      	add	r3, r2
 8001528:	3b74      	subs	r3, #116	; 0x74
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3396      	adds	r3, #150	; 0x96
 800152e:	220e      	movs	r2, #14
 8001530:	4945      	ldr	r1, [pc, #276]	; (8001648 <main+0x388>)
 8001532:	4618      	mov	r0, r3
 8001534:	f008 fac0 	bl	8009ab8 <strncpy>
        strncpy(knobs[i].sub_labels[11], "Pulse9", MAX_LABEL_CHARS);
 8001538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800153c:	015b      	lsls	r3, r3, #5
 800153e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001542:	4413      	add	r3, r2
 8001544:	3b74      	subs	r3, #116	; 0x74
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	33a5      	adds	r3, #165	; 0xa5
 800154a:	220e      	movs	r2, #14
 800154c:	493f      	ldr	r1, [pc, #252]	; (800164c <main+0x38c>)
 800154e:	4618      	mov	r0, r3
 8001550:	f008 fab2 	bl	8009ab8 <strncpy>
    for (int i = 2; i < 4; i++) {
 8001554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001558:	3301      	adds	r3, #1
 800155a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800155e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001562:	2b03      	cmp	r3, #3
 8001564:	f77f af36 	ble.w	80013d4 <main+0x114>
    }

    knobs[0].sub_labels = malloc(sizeof(*knobs[0].sub_labels));
 8001568:	200f      	movs	r0, #15
 800156a:	f008 f931 	bl	80097d0 <malloc>
 800156e:	4603      	mov	r3, r0
 8001570:	617b      	str	r3, [r7, #20]
    strncpy(knobs[0].sub_labels[0], "Filter 1", MAX_LABEL_CHARS);
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	220e      	movs	r2, #14
 8001576:	4936      	ldr	r1, [pc, #216]	; (8001650 <main+0x390>)
 8001578:	4618      	mov	r0, r3
 800157a:	f008 fa9d 	bl	8009ab8 <strncpy>

    knobs[1].sub_labels = malloc(sizeof(*knobs[1].sub_labels));
 800157e:	200f      	movs	r0, #15
 8001580:	f008 f926 	bl	80097d0 <malloc>
 8001584:	4603      	mov	r3, r0
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
    strncpy(knobs[1].sub_labels[0], "Filter 2", MAX_LABEL_CHARS);
 8001588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158a:	220e      	movs	r2, #14
 800158c:	4931      	ldr	r1, [pc, #196]	; (8001654 <main+0x394>)
 800158e:	4618      	mov	r0, r3
 8001590:	f008 fa92 	bl	8009ab8 <strncpy>
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001594:	f001 fa0c 	bl	80029b0 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001598:	f000 f8da 	bl	8001750 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_RTC_Init();
 800159c:	f000 f9dc 	bl	8001958 <MX_RTC_Init>
    MX_GPIO_Init();
 80015a0:	f000 fa00 	bl	80019a4 <MX_GPIO_Init>
    MX_ADC1_Init();
 80015a4:	f000 f956 	bl	8001854 <MX_ADC1_Init>
    MX_I2C1_Init();
 80015a8:	f000 f9a8 	bl	80018fc <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 80015ac:	f007 fc54 	bl	8008e58 <MX_USB_DEVICE_Init>
    //MX_SDIO_SD_Init();
    /* USER CODE BEGIN 2 */
    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80015b6:	e016      	b.n	80015e6 <main+0x326>
        ssd1306_Init(&hi2c1, &knobs[i]);
 80015b8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80015bc:	463a      	mov	r2, r7
 80015be:	015b      	lsls	r3, r3, #5
 80015c0:	4413      	add	r3, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	4824      	ldr	r0, [pc, #144]	; (8001658 <main+0x398>)
 80015c6:	f000 fa6b 	bl	8001aa0 <ssd1306_Init>
        ssd1306_WriteKnob(&hi2c1, &knobs[i]);
 80015ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80015ce:	463a      	mov	r2, r7
 80015d0:	015b      	lsls	r3, r3, #5
 80015d2:	4413      	add	r3, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	4820      	ldr	r0, [pc, #128]	; (8001658 <main+0x398>)
 80015d8:	f000 fbde 	bl	8001d98 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80015dc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80015e0:	3301      	adds	r3, #1
 80015e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80015e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d9e4      	bls.n	80015b8 <main+0x2f8>
    }
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    SystemCoreClockUpdate();
 80015ee:	f001 f935 	bl	800285c <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 40);
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <main+0x39c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <main+0x3a0>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	095b      	lsrs	r3, r3, #5
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fcca 	bl	8000f98 <SysTick_Config>

        //    HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
        //} else {
        //    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);

        ADC_Read_Knobs();
 8001604:	f7ff fd20 	bl	8001048 <ADC_Read_Knobs>

        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800160e:	e095      	b.n	800173c <main+0x47c>
 8001610:	0800a930 	.word	0x0800a930
 8001614:	0800a940 	.word	0x0800a940
 8001618:	0800a950 	.word	0x0800a950
 800161c:	0800a960 	.word	0x0800a960
 8001620:	0800a8b0 	.word	0x0800a8b0
 8001624:	0800a8bc 	.word	0x0800a8bc
 8001628:	0800a8c4 	.word	0x0800a8c4
 800162c:	0800a8cc 	.word	0x0800a8cc
 8001630:	0800a8d8 	.word	0x0800a8d8
 8001634:	0800a8e0 	.word	0x0800a8e0
 8001638:	0800a8e4 	.word	0x0800a8e4
 800163c:	0800a8f0 	.word	0x0800a8f0
 8001640:	0800a8f8 	.word	0x0800a8f8
 8001644:	0800a900 	.word	0x0800a900
 8001648:	0800a908 	.word	0x0800a908
 800164c:	0800a910 	.word	0x0800a910
 8001650:	0800a918 	.word	0x0800a918
 8001654:	0800a924 	.word	0x0800a924
 8001658:	200021c8 	.word	0x200021c8
 800165c:	20000048 	.word	0x20000048
 8001660:	cccccccd 	.word	0xcccccccd
            uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 8001664:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001668:	463a      	mov	r2, r7
 800166a:	015b      	lsls	r3, r3, #5
 800166c:	441a      	add	r2, r3
 800166e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001672:	4935      	ldr	r1, [pc, #212]	; (8001748 <main+0x488>)
 8001674:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	4610      	mov	r0, r2
 800167e:	f7ff fd83 	bl	8001188 <MIDI_Scale_And_Filter>
 8001682:	4603      	mov	r3, r0
 8001684:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

            if (curr_MIDI_val != knobs[i].value) {
 8001688:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800168c:	015b      	lsls	r3, r3, #5
 800168e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001692:	4413      	add	r3, r2
 8001694:	3b6e      	subs	r3, #110	; 0x6e
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 800169c:	429a      	cmp	r2, r3
 800169e:	d048      	beq.n	8001732 <main+0x472>
                knobs[i].value = curr_MIDI_val;
 80016a0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016aa:	4413      	add	r3, r2
 80016ac:	3b6e      	subs	r3, #110	; 0x6e
 80016ae:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 80016b2:	701a      	strb	r2, [r3, #0]
                ssd1306_WriteKnob(&hi2c1, &knobs[i]);
 80016b4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016b8:	463a      	mov	r2, r7
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	4413      	add	r3, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	4822      	ldr	r0, [pc, #136]	; (800174c <main+0x48c>)
 80016c2:	f000 fb69 	bl	8001d98 <ssd1306_WriteKnob>
                if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 80016c6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016ca:	015b      	lsls	r3, r3, #5
 80016cc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016d0:	4413      	add	r3, r2
 80016d2:	3b6e      	subs	r3, #110	; 0x6e
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016da:	015b      	lsls	r3, r3, #5
 80016dc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80016e0:	440b      	add	r3, r1
 80016e2:	3b88      	subs	r3, #136	; 0x88
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d108      	bne.n	80016fc <main+0x43c>
 80016ea:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016f4:	4413      	add	r3, r2
 80016f6:	3b6b      	subs	r3, #107	; 0x6b
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
                if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 80016fc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001700:	015b      	lsls	r3, r3, #5
 8001702:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001706:	4413      	add	r3, r2
 8001708:	3b6b      	subs	r3, #107	; 0x6b
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d110      	bne.n	8001732 <main+0x472>
 8001710:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001714:	463a      	mov	r2, r7
 8001716:	015b      	lsls	r3, r3, #5
 8001718:	441a      	add	r2, r3
 800171a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800171e:	015b      	lsls	r3, r3, #5
 8001720:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001724:	440b      	add	r3, r1
 8001726:	3b6e      	subs	r3, #110	; 0x6e
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	4610      	mov	r0, r2
 800172e:	f7ff fd0f 	bl	8001150 <MIDI_Send>
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001732:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800173c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001740:	2b03      	cmp	r3, #3
 8001742:	d98f      	bls.n	8001664 <main+0x3a4>
        ADC_Read_Knobs();
 8001744:	e75e      	b.n	8001604 <main+0x344>
 8001746:	bf00      	nop
 8001748:	200001d4 	.word	0x200001d4
 800174c:	200021c8 	.word	0x200021c8

08001750 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b09a      	sub	sp, #104	; 0x68
 8001754:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001756:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800175a:	2230      	movs	r2, #48	; 0x30
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f008 f83e 	bl	80097e0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	615a      	str	r2, [r3, #20]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <SystemClock_Config+0xfc>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a2f      	ldr	r2, [pc, #188]	; (800184c <SystemClock_Config+0xfc>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b2d      	ldr	r3, [pc, #180]	; (800184c <SystemClock_Config+0xfc>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <SystemClock_Config+0x100>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a29      	ldr	r2, [pc, #164]	; (8001850 <SystemClock_Config+0x100>)
 80017ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <SystemClock_Config+0x100>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80017be:	2309      	movs	r3, #9
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017c8:	2301      	movs	r3, #1
 80017ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017cc:	2302      	movs	r3, #2
 80017ce:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d4:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLM = 25;
 80017d6:	2319      	movs	r3, #25
 80017d8:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLN = 192;
 80017da:	23c0      	movs	r3, #192	; 0xc0
 80017dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017de:	2302      	movs	r3, #2
 80017e0:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80017e2:	2304      	movs	r3, #4
 80017e4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 ffa8 	bl	8005740 <HAL_RCC_OscConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0xaa>
            {
        Error_Handler();
 80017f6:	f000 f937 	bl	8001a68 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fe:	2302      	movs	r3, #2
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	2103      	movs	r1, #3
 8001816:	4618      	mov	r0, r3
 8001818:	f004 fa0a 	bl	8005c30 <HAL_RCC_ClockConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0xd6>
            {
        Error_Handler();
 8001822:	f000 f921 	bl	8001a68 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001826:	2302      	movs	r3, #2
 8001828:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800182a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4618      	mov	r0, r3
 8001836:	f004 fbb7 	bl	8005fa8 <HAL_RCCEx_PeriphCLKConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0xf4>
            {
        Error_Handler();
 8001840:	f000 f912 	bl	8001a68 <Error_Handler>
    }
}
 8001844:	bf00      	nop
 8001846:	3768      	adds	r7, #104	; 0x68
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 800185a:	463b      	mov	r3, r7
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <MX_ADC1_Init+0x9c>)
 8001868:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <MX_ADC1_Init+0xa0>)
 800186a:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <MX_ADC1_Init+0x9c>)
 800186e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001872:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <MX_ADC1_Init+0x9c>)
 8001876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800187a:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_ADC1_Init+0x9c>)
 800187e:	2201      	movs	r2, #1
 8001880:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_ADC1_Init+0x9c>)
 8001884:	2201      	movs	r2, #1
 8001886:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_ADC1_Init+0x9c>)
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_ADC1_Init+0x9c>)
 8001892:	2200      	movs	r2, #0
 8001894:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_ADC1_Init+0x9c>)
 8001898:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <MX_ADC1_Init+0xa4>)
 800189a:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_ADC1_Init+0x9c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_ADC1_Init+0x9c>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_ADC1_Init+0x9c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_ADC1_Init+0x9c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018b6:	480e      	ldr	r0, [pc, #56]	; (80018f0 <MX_ADC1_Init+0x9c>)
 80018b8:	f001 f910 	bl	8002adc <HAL_ADC_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_ADC1_Init+0x72>
            {
        Error_Handler();
 80018c2:	f000 f8d1 	bl	8001a68 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d2:	463b      	mov	r3, r7
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <MX_ADC1_Init+0x9c>)
 80018d8:	f001 fac4 	bl	8002e64 <HAL_ADC_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_ADC1_Init+0x92>
            {
        Error_Handler();
 80018e2:	f000 f8c1 	bl	8001a68 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000221c 	.word	0x2000221c
 80018f4:	40012000 	.word	0x40012000
 80018f8:	0f000001 	.word	0x0f000001

080018fc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_I2C1_Init+0x50>)
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <MX_I2C1_Init+0x54>)
 8001904:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 800000;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_I2C1_Init+0x50>)
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <MX_I2C1_Init+0x58>)
 800190a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_I2C1_Init+0x50>)
 800191a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <MX_I2C1_Init+0x50>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_I2C1_Init+0x50>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_I2C1_Init+0x50>)
 800193a:	f001 ffa3 	bl	8003884 <HAL_I2C_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_I2C1_Init+0x4c>
            {
        Error_Handler();
 8001944:	f000 f890 	bl	8001a68 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200021c8 	.word	0x200021c8
 8001950:	40005400 	.word	0x40005400
 8001954:	000c3500 	.word	0x000c3500

08001958 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <MX_RTC_Init+0x44>)
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <MX_RTC_Init+0x48>)
 8001960:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_RTC_Init+0x44>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_RTC_Init+0x44>)
 800196a:	227f      	movs	r2, #127	; 0x7f
 800196c:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_RTC_Init+0x44>)
 8001970:	22ff      	movs	r2, #255	; 0xff
 8001972:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_RTC_Init+0x44>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_RTC_Init+0x44>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_RTC_Init+0x44>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_RTC_Init+0x44>)
 8001988:	f004 fbfe 	bl	8006188 <HAL_RTC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_RTC_Init+0x3e>
            {
        Error_Handler();
 8001992:	f000 f869 	bl	8001a68 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20002264 	.word	0x20002264
 80019a0:	40002800 	.word	0x40002800

080019a4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <MX_GPIO_Init+0xb8>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <MX_GPIO_Init+0xb8>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <MX_GPIO_Init+0xb8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <MX_GPIO_Init+0xb8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <MX_GPIO_Init+0xb8>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <MX_GPIO_Init+0xb8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <MX_GPIO_Init+0xb8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <MX_GPIO_Init+0xb8>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <MX_GPIO_Init+0xb8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f243 712f 	movw	r1, #14127	; 0x372f
 8001a14:	4812      	ldr	r0, [pc, #72]	; (8001a60 <MX_GPIO_Init+0xbc>)
 8001a16:	f001 ff01 	bl	800381c <HAL_GPIO_WritePin>
            | LED_5_Pin | LED_6_Pin | AMUX_S0_Pin | AMUX_S1_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
     Button_5_Pin Button_6_Pin */
    GPIO_InitStruct.Pin = Button_1_Pin | Button_2_Pin | Button_3_Pin | Button_4_Pin
 8001a1a:	f44f 63f6 	mov.w	r3, #1968	; 0x7b0
 8001a1e:	60fb      	str	r3, [r7, #12]
            | Button_5_Pin | Button_6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480d      	ldr	r0, [pc, #52]	; (8001a64 <MX_GPIO_Init+0xc0>)
 8001a30:	f001 fd58 	bl	80034e4 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
     LED_5_Pin LED_6_Pin AMUX_S0_Pin AMUX_S1_Pin
     AMUX_S2_Pin AMUX_S3_Pin */
    GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001a34:	f243 732f 	movw	r3, #14127	; 0x372f
 8001a38:	60fb      	str	r3, [r7, #12]
            | LED_5_Pin | LED_6_Pin | AMUX_S0_Pin | AMUX_S1_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <MX_GPIO_Init+0xbc>)
 8001a4e:	f001 fd49 	bl	80034e4 <HAL_GPIO_Init>

}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020000 	.word	0x40020000

08001a68 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001a70:	e7fe      	b.n	8001a70 <Error_Handler+0x8>

08001a72 <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command) {
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af04      	add	r7, sp, #16
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001a7e:	230a      	movs	r3, #10
 8001a80:	9302      	str	r3, [sp, #8]
 8001a82:	2301      	movs	r3, #1
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	1cfb      	adds	r3, r7, #3
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2178      	movs	r1, #120	; 0x78
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f002 f939 	bl	8003d08 <HAL_I2C_Mem_Write>
 8001a96:	4603      	mov	r3, r0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001aaa:	2064      	movs	r0, #100	; 0x64
 8001aac:	f000 fff2 	bl	8002a94 <HAL_Delay>
    int status = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(hi2c, k);
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fbe4 	bl	8002284 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001abc:	21ae      	movs	r1, #174	; 0xae
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffd7 	bl	8001a72 <ssd1306_WriteCommand>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001ace:	2120      	movs	r1, #32
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ffce 	bl	8001a72 <ssd1306_WriteCommand>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4413      	add	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10); // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001ae0:	2110      	movs	r1, #16
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ffc5 	bl	8001a72 <ssd1306_WriteCommand>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001af2:	21b0      	movs	r1, #176	; 0xb0
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ffbc 	bl	8001a72 <ssd1306_WriteCommand>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4413      	add	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001b04:	21c8      	movs	r1, #200	; 0xc8
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffb3 	bl	8001a72 <ssd1306_WriteCommand>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001b16:	2100      	movs	r1, #0
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ffaa 	bl	8001a72 <ssd1306_WriteCommand>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001b28:	2110      	movs	r1, #16
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffa1 	bl	8001a72 <ssd1306_WriteCommand>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001b3a:	2140      	movs	r1, #64	; 0x40
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff98 	bl	8001a72 <ssd1306_WriteCommand>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4413      	add	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001b4c:	2181      	movs	r1, #129	; 0x81
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ff8f 	bl	8001a72 <ssd1306_WriteCommand>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);
 8001b5e:	2140      	movs	r1, #64	; 0x40
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff86 	bl	8001a72 <ssd1306_WriteCommand>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001b70:	21a1      	movs	r1, #161	; 0xa1
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ff7d 	bl	8001a72 <ssd1306_WriteCommand>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001b82:	21a6      	movs	r1, #166	; 0xa6
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff74 	bl	8001a72 <ssd1306_WriteCommand>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001b94:	21a8      	movs	r1, #168	; 0xa8
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff6b 	bl	8001a72 <ssd1306_WriteCommand>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001ba6:	213f      	movs	r1, #63	; 0x3f
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff62 	bl	8001a72 <ssd1306_WriteCommand>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001bb8:	21a4      	movs	r1, #164	; 0xa4
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ff59 	bl	8001a72 <ssd1306_WriteCommand>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001bca:	21d3      	movs	r1, #211	; 0xd3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff50 	bl	8001a72 <ssd1306_WriteCommand>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4413      	add	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001bdc:	2100      	movs	r1, #0
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ff47 	bl	8001a72 <ssd1306_WriteCommand>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001bee:	21d5      	movs	r1, #213	; 0xd5
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff3e 	bl	8001a72 <ssd1306_WriteCommand>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001c00:	21f0      	movs	r1, #240	; 0xf0
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ff35 	bl	8001a72 <ssd1306_WriteCommand>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001c12:	21d9      	movs	r1, #217	; 0xd9
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff2c 	bl	8001a72 <ssd1306_WriteCommand>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4413      	add	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001c24:	2122      	movs	r1, #34	; 0x22
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ff23 	bl	8001a72 <ssd1306_WriteCommand>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001c36:	21da      	movs	r1, #218	; 0xda
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff1a 	bl	8001a72 <ssd1306_WriteCommand>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001c48:	2112      	movs	r1, #18
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ff11 	bl	8001a72 <ssd1306_WriteCommand>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001c5a:	21db      	movs	r1, #219	; 0xdb
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff08 	bl	8001a72 <ssd1306_WriteCommand>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4413      	add	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff feff 	bl	8001a72 <ssd1306_WriteCommand>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001c7e:	218d      	movs	r1, #141	; 0x8d
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fef6 	bl	8001a72 <ssd1306_WriteCommand>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001c90:	2114      	movs	r1, #20
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff feed 	bl	8001a72 <ssd1306_WriteCommand>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001ca2:	21af      	movs	r1, #175	; 0xaf
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fee4 	bl	8001a72 <ssd1306_WriteCommand>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <ssd1306_Init+0x21e>
        return 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00f      	b.n	8001cde <ssd1306_Init+0x23e>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f000 f814 	bl	8001cec <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f835 	bl	8001d34 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <ssd1306_Init+0x248>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <ssd1306_Init+0x248>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <ssd1306_Init+0x248>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	715a      	strb	r2, [r3, #5]

    return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200005dc 	.word	0x200005dc

08001cec <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e00d      	b.n	8001d18 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <ssd1306_Fill+0x1a>
 8001d02:	2100      	movs	r1, #0
 8001d04:	e000      	b.n	8001d08 <ssd1306_Fill+0x1c>
 8001d06:	21ff      	movs	r1, #255	; 0xff
 8001d08:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <ssd1306_Fill+0x44>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	460a      	mov	r2, r1
 8001d10:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1e:	d3ed      	bcc.n	8001cfc <ssd1306_Fill+0x10>
    }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200001dc 	.word	0x200001dc

08001d34 <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af04      	add	r7, sp, #16
 8001d3a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e020      	b.n	8001d84 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	3b50      	subs	r3, #80	; 0x50
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4619      	mov	r1, r3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fe91 	bl	8001a72 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001d50:	2100      	movs	r1, #0
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fe8d 	bl	8001a72 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001d58:	2110      	movs	r1, #16
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fe89 	bl	8001a72 <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	01db      	lsls	r3, r3, #7
 8001d64:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <ssd1306_UpdateScreen+0x60>)
 8001d66:	4413      	add	r3, r2
 8001d68:	2264      	movs	r2, #100	; 0x64
 8001d6a:	9202      	str	r2, [sp, #8]
 8001d6c:	2280      	movs	r2, #128	; 0x80
 8001d6e:	9201      	str	r2, [sp, #4]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	2240      	movs	r2, #64	; 0x40
 8001d76:	2178      	movs	r1, #120	; 0x78
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f001 ffc5 	bl	8003d08 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	3301      	adds	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	2b07      	cmp	r3, #7
 8001d88:	d9db      	bls.n	8001d42 <ssd1306_UpdateScreen+0xe>
    }
}
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200001dc 	.word	0x200001dc

08001d98 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b08f      	sub	sp, #60	; 0x3c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
    ssd1306_Select(hi2c, k);
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 fa6d 	bl	8002284 <ssd1306_Select>
    ssd1306_Fill(Black);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7ff ff9e 	bl	8001cec <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8001db0:	4b9e      	ldr	r3, [pc, #632]	; (800202c <ssd1306_WriteKnob+0x294>)
 8001db2:	f107 0418 	add.w	r4, r7, #24
 8001db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel + 1);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	7e1b      	ldrb	r3, [r3, #24]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001dc6:	4a9a      	ldr	r2, [pc, #616]	; (8002030 <ssd1306_WriteKnob+0x298>)
 8001dc8:	2103      	movs	r1, #3
 8001dca:	f007 fe41 	bl	8009a50 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	7e5b      	ldrb	r3, [r3, #25]
 8001dd2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001dd6:	4a97      	ldr	r2, [pc, #604]	; (8002034 <ssd1306_WriteKnob+0x29c>)
 8001dd8:	2104      	movs	r1, #4
 8001dda:	f007 fe39 	bl	8009a50 <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8001dde:	f107 0318 	add.w	r3, r7, #24
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe f9fc 	bl	80001e0 <strlen>
 8001de8:	4604      	mov	r4, r0
 8001dea:	68b8      	ldr	r0, [r7, #8]
 8001dec:	f000 fa82 	bl	80022f4 <update_init_indicator>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f107 0018 	add.w	r0, r7, #24
 8001df6:	4a90      	ldr	r2, [pc, #576]	; (8002038 <ssd1306_WriteKnob+0x2a0>)
 8001df8:	4621      	mov	r1, r4
 8001dfa:	f007 fe29 	bl	8009a50 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) KnobMap(k, k->value, k->max_range));
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	7e99      	ldrb	r1, [r3, #26]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	7f1b      	ldrb	r3, [r3, #28]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68b8      	ldr	r0, [r7, #8]
 8001e0a:	f7ff f883 	bl	8000f14 <KnobMap>
 8001e0e:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8001e10:	f107 0014 	add.w	r0, r7, #20
 8001e14:	4a87      	ldr	r2, [pc, #540]	; (8002034 <ssd1306_WriteKnob+0x29c>)
 8001e16:	2104      	movs	r1, #4
 8001e18:	f007 fe1a 	bl	8009a50 <sniprintf>

    ssd1306_SetCursor(0, 0);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 fa18 	bl	8002254 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8001e24:	4a85      	ldr	r2, [pc, #532]	; (800203c <ssd1306_WriteKnob+0x2a4>)
 8001e26:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	ca06      	ldmia	r2, {r1, r2}
 8001e2e:	f000 f9eb 	bl	8002208 <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 8001e32:	4b82      	ldr	r3, [pc, #520]	; (800203c <ssd1306_WriteKnob+0x2a4>)
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	3301      	adds	r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f000 fa09 	bl	8002254 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8001e42:	4a7e      	ldr	r2, [pc, #504]	; (800203c <ssd1306_WriteKnob+0x2a4>)
 8001e44:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001e48:	2301      	movs	r3, #1
 8001e4a:	ca06      	ldmia	r2, {r1, r2}
 8001e4c:	f000 f9dc 	bl	8002208 <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe f9c3 	bl	80001e0 <strlen>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a77      	ldr	r2, [pc, #476]	; (800203c <ssd1306_WriteKnob+0x2a4>)
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e68:	085b      	lsrs	r3, r3, #1
 8001e6a:	b2d8      	uxtb	r0, r3
 8001e6c:	4b73      	ldr	r3, [pc, #460]	; (800203c <ssd1306_WriteKnob+0x2a4>)
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	3301      	adds	r3, #1
 8001e72:	0fda      	lsrs	r2, r3, #31
 8001e74:	4413      	add	r3, r2
 8001e76:	105b      	asrs	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f000 f9ea 	bl	8002254 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8001e80:	4a6e      	ldr	r2, [pc, #440]	; (800203c <ssd1306_WriteKnob+0x2a4>)
 8001e82:	f107 0018 	add.w	r0, r7, #24
 8001e86:	2301      	movs	r3, #1
 8001e88:	ca06      	ldmia	r2, {r1, r2}
 8001e8a:	f000 f9bd 	bl	8002208 <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 8001e8e:	4b6b      	ldr	r3, [pc, #428]	; (800203c <ssd1306_WriteKnob+0x2a4>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	f1c3 0320 	rsb	r3, r3, #32
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b2d8      	uxtb	r0, r3
 8001ea0:	4b66      	ldr	r3, [pc, #408]	; (800203c <ssd1306_WriteKnob+0x2a4>)
 8001ea2:	785b      	ldrb	r3, [r3, #1]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	0fda      	lsrs	r2, r3, #31
 8001ea8:	4413      	add	r3, r2
 8001eaa:	105b      	asrs	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f000 f9d0 	bl	8002254 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 8001eb4:	4a61      	ldr	r2, [pc, #388]	; (800203c <ssd1306_WriteKnob+0x2a4>)
 8001eb6:	f107 0014 	add.w	r0, r7, #20
 8001eba:	2301      	movs	r3, #1
 8001ebc:	ca06      	ldmia	r2, {r1, r2}
 8001ebe:	f000 f9a3 	bl	8002208 <ssd1306_WriteString>

    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ec8:	e013      	b.n	8001ef2 <ssd1306_WriteKnob+0x15a>
        ssd1306_DrawPixel(i, SSD1306.CurrentY + NumFont_5x7.FontHeight + 4, White);
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <ssd1306_WriteKnob+0x2a8>)
 8001ecc:	885b      	ldrh	r3, [r3, #2]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	4b5a      	ldr	r3, [pc, #360]	; (800203c <ssd1306_WriteKnob+0x2a4>)
 8001ed2:	785b      	ldrb	r3, [r3, #1]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	3304      	adds	r3, #4
 8001eda:	b2d9      	uxtb	r1, r3
 8001edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f8b0 	bl	8002048 <ssd1306_DrawPixel>
    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8001ee8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001eec:	3301      	adds	r3, #1
 8001eee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ef2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	dae7      	bge.n	8001eca <ssd1306_WriteKnob+0x132>
    }

    uint8_t len_label = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    uint8_t x = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t y = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    uint8_t y_remaining = SSD1306_HEIGHT - 2 * NumFont_5x7.FontHeight;
 8001f0c:	4b4b      	ldr	r3, [pc, #300]	; (800203c <ssd1306_WriteKnob+0x2a4>)
 8001f0e:	785b      	ldrb	r3, [r3, #1]
 8001f10:	f1c3 0320 	rsb	r3, r3, #32
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    // Draw main label
    len_label = strlen(k->label);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	3303      	adds	r3, #3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe f95d 	bl	80001e0 <strlen>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001f2c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001f30:	4a44      	ldr	r2, [pc, #272]	; (8002044 <ssd1306_WriteKnob+0x2ac>)
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001f3c:	0fda      	lsrs	r2, r3, #31
 8001f3e:	4413      	add	r3, r2
 8001f40:	105b      	asrs	r3, r3, #1
 8001f42:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    y = (float) y_remaining / 3 + (Font_10x18.FontHeight / 4);
 8001f46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f52:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001f56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f5a:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <ssd1306_WriteKnob+0x2ac>)
 8001f5c:	785b      	ldrb	r3, [r3, #1]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f72:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f76:	793b      	ldrb	r3, [r7, #4]
 8001f78:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    //if (len_label % 2 != 0) x += 5;
    ssd1306_SetCursor(x, y);
 8001f7c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001f80:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f964 	bl	8002254 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1cd8      	adds	r0, r3, #3
 8001f90:	4a2c      	ldr	r2, [pc, #176]	; (8002044 <ssd1306_WriteKnob+0x2ac>)
 8001f92:	2301      	movs	r3, #1
 8001f94:	ca06      	ldmia	r2, {r1, r2}
 8001f96:	f000 f937 	bl	8002208 <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	7edb      	ldrb	r3, [r3, #27]
 8001f9e:	b25b      	sxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db02      	blt.n	8001faa <ssd1306_WriteKnob+0x212>
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	7e9b      	ldrb	r3, [r3, #26]
 8001fa8:	e000      	b.n	8001fac <ssd1306_WriteKnob+0x214>
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    len_label = strlen(k->sub_labels[sl_index]);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	6959      	ldr	r1, [r3, #20]
 8001fb4:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001fb8:	4613      	mov	r3, r2
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe f90d 	bl	80001e0 <strlen>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001fcc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001fd0:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <ssd1306_WriteKnob+0x2ac>)
 8001fd2:	7812      	ldrb	r2, [r2, #0]
 8001fd4:	fb02 f303 	mul.w	r3, r2, r3
 8001fd8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001fdc:	0fda      	lsrs	r2, r3, #31
 8001fde:	4413      	add	r3, r2
 8001fe0:	105b      	asrs	r3, r3, #1
 8001fe2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    y = SSD1306_HEIGHT - Font_10x18.FontHeight - 1;
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <ssd1306_WriteKnob+0x2ac>)
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001fee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    //if (len_label % 2 != 0) x += 5;
    ssd1306_SetCursor(x, y);
 8001ff2:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001ff6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f929 	bl	8002254 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	6959      	ldr	r1, [r3, #20]
 8002006:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800200a:	4613      	mov	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	18c8      	adds	r0, r1, r3
 8002012:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <ssd1306_WriteKnob+0x2ac>)
 8002014:	2301      	movs	r3, #1
 8002016:	ca06      	ldmia	r2, {r1, r2}
 8002018:	f000 f8f6 	bl	8002208 <ssd1306_WriteString>

    ssd1306_UpdateScreen(hi2c);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7ff fe89 	bl	8001d34 <ssd1306_UpdateScreen>
}
 8002022:	bf00      	nop
 8002024:	373c      	adds	r7, #60	; 0x3c
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	0800a984 	.word	0x0800a984
 8002030:	0800a970 	.word	0x0800a970
 8002034:	0800a978 	.word	0x0800a978
 8002038:	0800a980 	.word	0x0800a980
 800203c:	20000000 	.word	0x20000000
 8002040:	200005dc 	.word	0x200005dc
 8002044:	20000008 	.word	0x20000008

08002048 <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
 8002052:	460b      	mov	r3, r1
 8002054:	71bb      	strb	r3, [r7, #6]
 8002056:	4613      	mov	r3, r2
 8002058:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db48      	blt.n	80020f4 <ssd1306_DrawPixel+0xac>
 8002062:	79bb      	ldrb	r3, [r7, #6]
 8002064:	2b3f      	cmp	r3, #63	; 0x3f
 8002066:	d845      	bhi.n	80020f4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <ssd1306_DrawPixel+0xb8>)
 800206a:	791b      	ldrb	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8002070:	797b      	ldrb	r3, [r7, #5]
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf0c      	ite	eq
 8002076:	2301      	moveq	r3, #1
 8002078:	2300      	movne	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 800207e:	797b      	ldrb	r3, [r7, #5]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d11a      	bne.n	80020ba <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002084:	79fa      	ldrb	r2, [r7, #7]
 8002086:	79bb      	ldrb	r3, [r7, #6]
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	b2d8      	uxtb	r0, r3
 800208c:	4603      	mov	r3, r0
 800208e:	01db      	lsls	r3, r3, #7
 8002090:	4413      	add	r3, r2
 8002092:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <ssd1306_DrawPixel+0xbc>)
 8002094:	5cd3      	ldrb	r3, [r2, r3]
 8002096:	b25a      	sxtb	r2, r3
 8002098:	79bb      	ldrb	r3, [r7, #6]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b259      	sxtb	r1, r3
 80020aa:	79fa      	ldrb	r2, [r7, #7]
 80020ac:	4603      	mov	r3, r0
 80020ae:	01db      	lsls	r3, r3, #7
 80020b0:	4413      	add	r3, r2
 80020b2:	b2c9      	uxtb	r1, r1
 80020b4:	4a13      	ldr	r2, [pc, #76]	; (8002104 <ssd1306_DrawPixel+0xbc>)
 80020b6:	54d1      	strb	r1, [r2, r3]
 80020b8:	e01d      	b.n	80020f6 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80020ba:	79fa      	ldrb	r2, [r7, #7]
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	b2d8      	uxtb	r0, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	01db      	lsls	r3, r3, #7
 80020c6:	4413      	add	r3, r2
 80020c8:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <ssd1306_DrawPixel+0xbc>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	b25a      	sxtb	r2, r3
 80020ce:	79bb      	ldrb	r3, [r7, #6]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	b25b      	sxtb	r3, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	b25b      	sxtb	r3, r3
 80020e0:	4013      	ands	r3, r2
 80020e2:	b259      	sxtb	r1, r3
 80020e4:	79fa      	ldrb	r2, [r7, #7]
 80020e6:	4603      	mov	r3, r0
 80020e8:	01db      	lsls	r3, r3, #7
 80020ea:	4413      	add	r3, r2
 80020ec:	b2c9      	uxtb	r1, r1
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <ssd1306_DrawPixel+0xbc>)
 80020f0:	54d1      	strb	r1, [r2, r3]
 80020f2:	e000      	b.n	80020f6 <ssd1306_DrawPixel+0xae>
        return;
 80020f4:	bf00      	nop
    }
}
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	200005dc 	.word	0x200005dc
 8002104:	200001dc 	.word	0x200001dc

08002108 <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	4604      	mov	r4, r0
 8002110:	1d38      	adds	r0, r7, #4
 8002112:	e880 0006 	stmia.w	r0, {r1, r2}
 8002116:	461a      	mov	r2, r3
 8002118:	4623      	mov	r3, r4
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	4613      	mov	r3, r2
 800211e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <ssd1306_WriteChar+0xfc>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	793b      	ldrb	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	2b7f      	cmp	r3, #127	; 0x7f
 800212c:	dc06      	bgt.n	800213c <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 800212e:	4b35      	ldr	r3, [pc, #212]	; (8002204 <ssd1306_WriteChar+0xfc>)
 8002130:	885b      	ldrh	r3, [r3, #2]
 8002132:	461a      	mov	r2, r3
 8002134:	797b      	ldrb	r3, [r7, #5]
 8002136:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002138:	2b3f      	cmp	r3, #63	; 0x3f
 800213a:	dd01      	ble.n	8002140 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 800213c:	2300      	movs	r3, #0
 800213e:	e05d      	b.n	80021fc <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	e04c      	b.n	80021e0 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	3b20      	subs	r3, #32
 800214c:	7979      	ldrb	r1, [r7, #5]
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4619      	mov	r1, r3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	440b      	add	r3, r1
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	e034      	b.n	80021d0 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d012      	beq.n	800219c <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <ssd1306_WriteChar+0xfc>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	4413      	add	r3, r2
 8002182:	b2d8      	uxtb	r0, r3
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <ssd1306_WriteChar+0xfc>)
 8002186:	885b      	ldrh	r3, [r3, #2]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4413      	add	r3, r2
 8002190:	b2db      	uxtb	r3, r3
 8002192:	7bba      	ldrb	r2, [r7, #14]
 8002194:	4619      	mov	r1, r3
 8002196:	f7ff ff57 	bl	8002048 <ssd1306_DrawPixel>
 800219a:	e016      	b.n	80021ca <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <ssd1306_WriteChar+0xfc>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	b2d8      	uxtb	r0, r3
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <ssd1306_WriteChar+0xfc>)
 80021ac:	885b      	ldrh	r3, [r3, #2]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	b2d9      	uxtb	r1, r3
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf0c      	ite	eq
 80021be:	2301      	moveq	r3, #1
 80021c0:	2300      	movne	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	f7ff ff3f 	bl	8002048 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	3301      	adds	r3, #1
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	793b      	ldrb	r3, [r7, #4]
 80021d2:	461a      	mov	r2, r3
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d3c5      	bcc.n	8002166 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	797b      	ldrb	r3, [r7, #5]
 80021e2:	461a      	mov	r2, r3
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d3ad      	bcc.n	8002146 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <ssd1306_WriteChar+0xfc>)
 80021ec:	881a      	ldrh	r2, [r3, #0]
 80021ee:	793b      	ldrb	r3, [r7, #4]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b03      	ldr	r3, [pc, #12]	; (8002204 <ssd1306_WriteChar+0xfc>)
 80021f8:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3724      	adds	r7, #36	; 0x24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd90      	pop	{r4, r7, pc}
 8002204:	200005dc 	.word	0x200005dc

08002208 <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	1d38      	adds	r0, r7, #4
 8002212:	e880 0006 	stmia.w	r0, {r1, r2}
 8002216:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002218:	e012      	b.n	8002240 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	7818      	ldrb	r0, [r3, #0]
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	1d3a      	adds	r2, r7, #4
 8002222:	ca06      	ldmia	r2, {r1, r2}
 8002224:	f7ff ff70 	bl	8002108 <ssd1306_WriteChar>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d002      	beq.n	800223a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	e008      	b.n	800224c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3301      	adds	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1e8      	bne.n	800221a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	781b      	ldrb	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	460a      	mov	r2, r1
 800225e:	71fb      	strb	r3, [r7, #7]
 8002260:	4613      	mov	r3, r2
 8002262:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	b29a      	uxth	r2, r3
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <ssd1306_SetCursor+0x2c>)
 800226a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800226c:	79bb      	ldrb	r3, [r7, #6]
 800226e:	b29a      	uxth	r2, r3
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <ssd1306_SetCursor+0x2c>)
 8002272:	805a      	strh	r2, [r3, #2]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	200005dc 	.word	0x200005dc

08002284 <ssd1306_Select>:

// Select a display
void ssd1306_Select(I2C_HandleTypeDef *hi2c, Knob *k) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
    i2c_Select(hi2c, I2C_MUX_MASTER_ADDR, k->row);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	461a      	mov	r2, r3
 8002294:	21e2      	movs	r1, #226	; 0xe2
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f80b 	bl	80022b2 <i2c_Select>
    i2c_Select(hi2c, I2C_MUX_SLAVE_ADDR, k->col);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	789b      	ldrb	r3, [r3, #2]
 80022a0:	461a      	mov	r2, r3
 80022a2:	21e0      	movs	r1, #224	; 0xe0
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f804 	bl	80022b2 <i2c_Select>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(I2C_HandleTypeDef *hi2c, uint8_t mux_addr, uint8_t i) {
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af02      	add	r7, sp, #8
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	70fb      	strb	r3, [r7, #3]
 80022be:	4613      	mov	r3, r2
 80022c0:	70bb      	strb	r3, [r7, #2]
    if (i > 7) return;
 80022c2:	78bb      	ldrb	r3, [r7, #2]
 80022c4:	2b07      	cmp	r3, #7
 80022c6:	d810      	bhi.n	80022ea <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 80022c8:	78bb      	ldrb	r3, [r7, #2]
 80022ca:	2201      	movs	r2, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(hi2c, mux_addr, temp, 1, 100);
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	b299      	uxth	r1, r3
 80022d8:	f107 020c 	add.w	r2, r7, #12
 80022dc:	2364      	movs	r3, #100	; 0x64
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2301      	movs	r3, #1
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f001 fc12 	bl	8003b0c <HAL_I2C_Master_Transmit>
 80022e8:	e000      	b.n	80022ec <i2c_Select+0x3a>
    if (i > 7) return;
 80022ea:	bf00      	nop
}
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    int8_t init_diff = KnobMap(k, k->init_value, MIDI_MAX) - KnobMap(k, k->value, MIDI_MAX);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	227f      	movs	r2, #127	; 0x7f
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7fe fe05 	bl	8000f14 <KnobMap>
 800230a:	4603      	mov	r3, r0
 800230c:	461c      	mov	r4, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7e9b      	ldrb	r3, [r3, #26]
 8002312:	227f      	movs	r2, #127	; 0x7f
 8002314:	4619      	mov	r1, r3
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe fdfc 	bl	8000f14 <KnobMap>
 800231c:	4603      	mov	r3, r0
 800231e:	1ae3      	subs	r3, r4, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 8002324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002328:	2b00      	cmp	r3, #0
 800232a:	bfb8      	it	lt
 800232c:	425b      	neglt	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002338:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002424 <update_init_indicator+0x130>
 800233c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002340:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002428 <update_init_indicator+0x134>
 8002344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234c:	edc7 7a00 	vstr	s15, [r7]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 8002354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <update_init_indicator+0x6c>
 800235c:	4b33      	ldr	r3, [pc, #204]	; (800242c <update_init_indicator+0x138>)
 800235e:	e05c      	b.n	800241a <update_init_indicator+0x126>

    if (init_pct < 15) {
 8002360:	7bbb      	ldrb	r3, [r7, #14]
 8002362:	2b0e      	cmp	r3, #14
 8002364:	d807      	bhi.n	8002376 <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 8002366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236a:	2b00      	cmp	r3, #0
 800236c:	dd01      	ble.n	8002372 <update_init_indicator+0x7e>
 800236e:	4b30      	ldr	r3, [pc, #192]	; (8002430 <update_init_indicator+0x13c>)
 8002370:	e053      	b.n	800241a <update_init_indicator+0x126>
        else return "        <      ";
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <update_init_indicator+0x140>)
 8002374:	e051      	b.n	800241a <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 8002376:	7bbb      	ldrb	r3, [r7, #14]
 8002378:	2b0e      	cmp	r3, #14
 800237a:	d90a      	bls.n	8002392 <update_init_indicator+0x9e>
 800237c:	7bbb      	ldrb	r3, [r7, #14]
 800237e:	2b1d      	cmp	r3, #29
 8002380:	d807      	bhi.n	8002392 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	2b00      	cmp	r3, #0
 8002388:	dd01      	ble.n	800238e <update_init_indicator+0x9a>
 800238a:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <update_init_indicator+0x144>)
 800238c:	e045      	b.n	800241a <update_init_indicator+0x126>
        else return "        <<     ";
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <update_init_indicator+0x148>)
 8002390:	e043      	b.n	800241a <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 8002392:	7bbb      	ldrb	r3, [r7, #14]
 8002394:	2b1d      	cmp	r3, #29
 8002396:	d90a      	bls.n	80023ae <update_init_indicator+0xba>
 8002398:	7bbb      	ldrb	r3, [r7, #14]
 800239a:	2b2c      	cmp	r3, #44	; 0x2c
 800239c:	d807      	bhi.n	80023ae <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 800239e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	dd01      	ble.n	80023aa <update_init_indicator+0xb6>
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <update_init_indicator+0x14c>)
 80023a8:	e037      	b.n	800241a <update_init_indicator+0x126>
        else return "        <<<    ";
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <update_init_indicator+0x150>)
 80023ac:	e035      	b.n	800241a <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 80023ae:	7bbb      	ldrb	r3, [r7, #14]
 80023b0:	2b2c      	cmp	r3, #44	; 0x2c
 80023b2:	d90a      	bls.n	80023ca <update_init_indicator+0xd6>
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	2b3c      	cmp	r3, #60	; 0x3c
 80023b8:	d807      	bhi.n	80023ca <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	dd01      	ble.n	80023c6 <update_init_indicator+0xd2>
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <update_init_indicator+0x154>)
 80023c4:	e029      	b.n	800241a <update_init_indicator+0x126>
        else return "        <<<<   ";
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <update_init_indicator+0x158>)
 80023c8:	e027      	b.n	800241a <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 80023ca:	7bbb      	ldrb	r3, [r7, #14]
 80023cc:	2b3c      	cmp	r3, #60	; 0x3c
 80023ce:	d90a      	bls.n	80023e6 <update_init_indicator+0xf2>
 80023d0:	7bbb      	ldrb	r3, [r7, #14]
 80023d2:	2b4c      	cmp	r3, #76	; 0x4c
 80023d4:	d807      	bhi.n	80023e6 <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	dd01      	ble.n	80023e2 <update_init_indicator+0xee>
 80023de:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <update_init_indicator+0x15c>)
 80023e0:	e01b      	b.n	800241a <update_init_indicator+0x126>
        else return "        <<<<<  ";
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <update_init_indicator+0x160>)
 80023e4:	e019      	b.n	800241a <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 80023e6:	7bbb      	ldrb	r3, [r7, #14]
 80023e8:	2b4c      	cmp	r3, #76	; 0x4c
 80023ea:	d90a      	bls.n	8002402 <update_init_indicator+0x10e>
 80023ec:	7bbb      	ldrb	r3, [r7, #14]
 80023ee:	2b5c      	cmp	r3, #92	; 0x5c
 80023f0:	d807      	bhi.n	8002402 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	dd01      	ble.n	80023fe <update_init_indicator+0x10a>
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <update_init_indicator+0x164>)
 80023fc:	e00d      	b.n	800241a <update_init_indicator+0x126>
        else return "        <<<<<< ";
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <update_init_indicator+0x168>)
 8002400:	e00b      	b.n	800241a <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002402:	7bbb      	ldrb	r3, [r7, #14]
 8002404:	2b5c      	cmp	r3, #92	; 0x5c
 8002406:	d907      	bls.n	8002418 <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 8002408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240c:	2b00      	cmp	r3, #0
 800240e:	dd01      	ble.n	8002414 <update_init_indicator+0x120>
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <update_init_indicator+0x16c>)
 8002412:	e002      	b.n	800241a <update_init_indicator+0x126>
        else return "        <<<<<<<";
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <update_init_indicator+0x170>)
 8002416:	e000      	b.n	800241a <update_init_indicator+0x126>
    } else {
        return " ";
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <update_init_indicator+0x174>)
    }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	bf00      	nop
 8002424:	42fe0000 	.word	0x42fe0000
 8002428:	42c80000 	.word	0x42c80000
 800242c:	0800a984 	.word	0x0800a984
 8002430:	0800a994 	.word	0x0800a994
 8002434:	0800a9a4 	.word	0x0800a9a4
 8002438:	0800a9b4 	.word	0x0800a9b4
 800243c:	0800a9c4 	.word	0x0800a9c4
 8002440:	0800a9d4 	.word	0x0800a9d4
 8002444:	0800a9e4 	.word	0x0800a9e4
 8002448:	0800a9f4 	.word	0x0800a9f4
 800244c:	0800aa04 	.word	0x0800aa04
 8002450:	0800aa14 	.word	0x0800aa14
 8002454:	0800aa24 	.word	0x0800aa24
 8002458:	0800aa34 	.word	0x0800aa34
 800245c:	0800aa44 	.word	0x0800aa44
 8002460:	0800aa54 	.word	0x0800aa54
 8002464:	0800aa64 	.word	0x0800aa64
 8002468:	0800aa74 	.word	0x0800aa74

0800246c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <HAL_MspInit+0x4c>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_MspInit+0x4c>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002480:	6453      	str	r3, [r2, #68]	; 0x44
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_MspInit+0x4c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_MspInit+0x4c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	4a08      	ldr	r2, [pc, #32]	; (80024b8 <HAL_MspInit+0x4c>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_MspInit+0x4c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a17      	ldr	r2, [pc, #92]	; (8002538 <HAL_ADC_MspInit+0x7c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d127      	bne.n	800252e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <HAL_ADC_MspInit+0x80>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	4a15      	ldr	r2, [pc, #84]	; (800253c <HAL_ADC_MspInit+0x80>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ec:	6453      	str	r3, [r2, #68]	; 0x44
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <HAL_ADC_MspInit+0x80>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_ADC_MspInit+0x80>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_ADC_MspInit+0x80>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_ADC_MspInit+0x80>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002516:	230f      	movs	r3, #15
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800251a:	2303      	movs	r3, #3
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <HAL_ADC_MspInit+0x84>)
 800252a:	f000 ffdb 	bl	80034e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40012000 	.word	0x40012000
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_I2C_MspInit+0x84>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d12b      	bne.n	80025be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_I2C_MspInit+0x88>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_I2C_MspInit+0x88>)
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_I2C_MspInit+0x88>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002582:	23c0      	movs	r3, #192	; 0xc0
 8002584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002586:	2312      	movs	r3, #18
 8002588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258a:	2301      	movs	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258e:	2303      	movs	r3, #3
 8002590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002592:	2304      	movs	r3, #4
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	4619      	mov	r1, r3
 800259c:	480c      	ldr	r0, [pc, #48]	; (80025d0 <HAL_I2C_MspInit+0x8c>)
 800259e:	f000 ffa1 	bl	80034e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_I2C_MspInit+0x88>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a08      	ldr	r2, [pc, #32]	; (80025cc <HAL_I2C_MspInit+0x88>)
 80025ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_I2C_MspInit+0x88>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40005400 	.word	0x40005400
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020400 	.word	0x40020400

080025d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <HAL_RTC_MspInit+0x24>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d102      	bne.n	80025ec <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RTC_MspInit+0x28>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40002800 	.word	0x40002800
 80025fc:	42470e3c 	.word	0x42470e3c

08002600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8002604:	e7fe      	b.n	8002604 <NMI_Handler+0x4>

08002606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <MemManage_Handler+0x4>

08002612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <BusFault_Handler+0x4>

08002618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <UsageFault_Handler+0x4>

0800261e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 800264e:	2300      	movs	r3, #0
 8002650:	71fb      	strb	r3, [r7, #7]
 8002652:	e02d      	b.n	80026b0 <SysTick_Handler+0x68>
        uint8_t reading = HAL_GPIO_ReadPin(GPIO_PORT_BUTTONS, btnPins[i]);
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <SysTick_Handler+0x7c>)
 8002658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800265c:	4619      	mov	r1, r3
 800265e:	481a      	ldr	r0, [pc, #104]	; (80026c8 <SysTick_Handler+0x80>)
 8002660:	f001 f8c4 	bl	80037ec <HAL_GPIO_ReadPin>
 8002664:	4603      	mov	r3, r0
 8002666:	71bb      	strb	r3, [r7, #6]

        if (reading == btnStatesLast[i] && reading != btnStates[i]) {
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <SysTick_Handler+0x84>)
 800266c:	5cd3      	ldrb	r3, [r2, r3]
 800266e:	79ba      	ldrb	r2, [r7, #6]
 8002670:	429a      	cmp	r2, r3
 8002672:	d116      	bne.n	80026a2 <SysTick_Handler+0x5a>
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <SysTick_Handler+0x88>)
 8002678:	5cd3      	ldrb	r3, [r2, r3]
 800267a:	79ba      	ldrb	r2, [r7, #6]
 800267c:	429a      	cmp	r2, r3
 800267e:	d010      	beq.n	80026a2 <SysTick_Handler+0x5a>
            btnStates[i] = reading;
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	4913      	ldr	r1, [pc, #76]	; (80026d0 <SysTick_Handler+0x88>)
 8002684:	79ba      	ldrb	r2, [r7, #6]
 8002686:	54ca      	strb	r2, [r1, r3]

            if (btnStates[i] == GPIO_PIN_RESET) {
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <SysTick_Handler+0x88>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d107      	bne.n	80026a2 <SysTick_Handler+0x5a>
                HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[i]);
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <SysTick_Handler+0x8c>)
 8002696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800269a:	4619      	mov	r1, r3
 800269c:	480e      	ldr	r0, [pc, #56]	; (80026d8 <SysTick_Handler+0x90>)
 800269e:	f001 f8d6 	bl	800384e <HAL_GPIO_TogglePin>
            }
        }

        btnStatesLast[i] = reading;
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	4909      	ldr	r1, [pc, #36]	; (80026cc <SysTick_Handler+0x84>)
 80026a6:	79ba      	ldrb	r2, [r7, #6]
 80026a8:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	3301      	adds	r3, #1
 80026ae:	71fb      	strb	r3, [r7, #7]
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2b05      	cmp	r3, #5
 80026b4:	d9ce      	bls.n	8002654 <SysTick_Handler+0xc>
    }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b6:	f000 f9cd 	bl	8002a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000030 	.word	0x20000030
 80026c8:	40020000 	.word	0x40020000
 80026cc:	20000028 	.word	0x20000028
 80026d0:	20000020 	.word	0x20000020
 80026d4:	2000003c 	.word	0x2000003c
 80026d8:	40020400 	.word	0x40020400

080026dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <OTG_FS_IRQHandler+0x10>)
 80026e2:	f001 fffa 	bl	80046da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200027dc 	.word	0x200027dc

080026f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e00a      	b.n	8002718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002702:	f3af 8000 	nop.w
 8002706:	4601      	mov	r1, r0
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	60ba      	str	r2, [r7, #8]
 800270e:	b2ca      	uxtb	r2, r1
 8002710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	dbf0      	blt.n	8002702 <_read+0x12>
	}

return len;
 8002720:	687b      	ldr	r3, [r7, #4]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e009      	b.n	8002750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	dbf1      	blt.n	800273c <_write+0x12>
	}
	return len;
 8002758:	687b      	ldr	r3, [r7, #4]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_close>:

int _close(int file)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
	return -1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800278a:	605a      	str	r2, [r3, #4]
	return 0;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <_isatty>:

int _isatty(int file)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	return 1;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
	return 0;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <_sbrk+0x5c>)
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <_sbrk+0x60>)
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <_sbrk+0x64>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <_sbrk+0x64>)
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <_sbrk+0x68>)
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d207      	bcs.n	800280c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027fc:	f006 ffbe 	bl	800977c <__errno>
 8002800:	4603      	mov	r3, r0
 8002802:	220c      	movs	r2, #12
 8002804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	e009      	b.n	8002820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <_sbrk+0x64>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	4a05      	ldr	r2, [pc, #20]	; (8002830 <_sbrk+0x64>)
 800281c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20020000 	.word	0x20020000
 800282c:	00000400 	.word	0x00000400
 8002830:	200005e4 	.word	0x200005e4
 8002834:	20002bf8 	.word	0x20002bf8

08002838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <SystemInit+0x20>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <SystemInit+0x20>)
 8002844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	2302      	movs	r3, #2
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	2302      	movs	r3, #2
 8002874:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002876:	4b34      	ldr	r3, [pc, #208]	; (8002948 <SystemCoreClockUpdate+0xec>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b08      	cmp	r3, #8
 8002884:	d011      	beq.n	80028aa <SystemCoreClockUpdate+0x4e>
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d844      	bhi.n	8002916 <SystemCoreClockUpdate+0xba>
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <SystemCoreClockUpdate+0x3e>
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d004      	beq.n	80028a2 <SystemCoreClockUpdate+0x46>
 8002898:	e03d      	b.n	8002916 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800289a:	4b2c      	ldr	r3, [pc, #176]	; (800294c <SystemCoreClockUpdate+0xf0>)
 800289c:	4a2c      	ldr	r2, [pc, #176]	; (8002950 <SystemCoreClockUpdate+0xf4>)
 800289e:	601a      	str	r2, [r3, #0]
      break;
 80028a0:	e03d      	b.n	800291e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <SystemCoreClockUpdate+0xf0>)
 80028a4:	4a2b      	ldr	r2, [pc, #172]	; (8002954 <SystemCoreClockUpdate+0xf8>)
 80028a6:	601a      	str	r2, [r3, #0]
      break;
 80028a8:	e039      	b.n	800291e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <SystemCoreClockUpdate+0xec>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0d9b      	lsrs	r3, r3, #22
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <SystemCoreClockUpdate+0xec>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028be:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00c      	beq.n	80028e0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80028c6:	4a23      	ldr	r2, [pc, #140]	; (8002954 <SystemCoreClockUpdate+0xf8>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <SystemCoreClockUpdate+0xec>)
 80028d0:	6852      	ldr	r2, [r2, #4]
 80028d2:	0992      	lsrs	r2, r2, #6
 80028d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e00b      	b.n	80028f8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80028e0:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <SystemCoreClockUpdate+0xf4>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	4a17      	ldr	r2, [pc, #92]	; (8002948 <SystemCoreClockUpdate+0xec>)
 80028ea:	6852      	ldr	r2, [r2, #4]
 80028ec:	0992      	lsrs	r2, r2, #6
 80028ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <SystemCoreClockUpdate+0xec>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	3301      	adds	r3, #1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	4a0e      	ldr	r2, [pc, #56]	; (800294c <SystemCoreClockUpdate+0xf0>)
 8002912:	6013      	str	r3, [r2, #0]
      break;
 8002914:	e003      	b.n	800291e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <SystemCoreClockUpdate+0xf0>)
 8002918:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <SystemCoreClockUpdate+0xf4>)
 800291a:	601a      	str	r2, [r3, #0]
      break;
 800291c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <SystemCoreClockUpdate+0xec>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <SystemCoreClockUpdate+0xfc>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <SystemCoreClockUpdate+0xf0>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
 8002938:	4a04      	ldr	r2, [pc, #16]	; (800294c <SystemCoreClockUpdate+0xf0>)
 800293a:	6013      	str	r3, [r2, #0]
}
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40023800 	.word	0x40023800
 800294c:	20000048 	.word	0x20000048
 8002950:	00f42400 	.word	0x00f42400
 8002954:	017d7840 	.word	0x017d7840
 8002958:	0800bd98 	.word	0x0800bd98

0800295c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800295c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002994 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002960:	480d      	ldr	r0, [pc, #52]	; (8002998 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002962:	490e      	ldr	r1, [pc, #56]	; (800299c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002964:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002968:	e002      	b.n	8002970 <LoopCopyDataInit>

0800296a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800296c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296e:	3304      	adds	r3, #4

08002970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002974:	d3f9      	bcc.n	800296a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002976:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002978:	4c0b      	ldr	r4, [pc, #44]	; (80029a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800297c:	e001      	b.n	8002982 <LoopFillZerobss>

0800297e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002980:	3204      	adds	r2, #4

08002982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002984:	d3fb      	bcc.n	800297e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002986:	f7ff ff57 	bl	8002838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800298a:	f006 fefd 	bl	8009788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298e:	f7fe fc97 	bl	80012c0 <main>
  bx  lr    
 8002992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800299c:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 80029a0:	0800be58 	.word	0x0800be58
  ldr r2, =_sbss
 80029a4:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80029a8:	20002bf4 	.word	0x20002bf4

080029ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029ac:	e7fe      	b.n	80029ac <ADC_IRQHandler>
	...

080029b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_Init+0x40>)
 80029ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_Init+0x40>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <HAL_Init+0x40>)
 80029c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <HAL_Init+0x40>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d8:	2003      	movs	r0, #3
 80029da:	f000 fd41 	bl	8003460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029de:	2000      	movs	r0, #0
 80029e0:	f000 f808 	bl	80029f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e4:	f7ff fd42 	bl	800246c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023c00 	.word	0x40023c00

080029f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_InitTick+0x54>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_InitTick+0x58>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fd59 	bl	80034ca <HAL_SYSTICK_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00e      	b.n	8002a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b0f      	cmp	r3, #15
 8002a26:	d80a      	bhi.n	8002a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f000 fd21 	bl	8003476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a34:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <HAL_InitTick+0x5c>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e000      	b.n	8002a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000048 	.word	0x20000048
 8002a4c:	20000050 	.word	0x20000050
 8002a50:	2000004c 	.word	0x2000004c

08002a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_IncTick+0x20>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_IncTick+0x24>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <HAL_IncTick+0x24>)
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000050 	.word	0x20000050
 8002a78:	20002308 	.word	0x20002308

08002a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_GetTick+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20002308 	.word	0x20002308

08002a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff ffee 	bl	8002a7c <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d005      	beq.n	8002aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_Delay+0x44>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aba:	bf00      	nop
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d8f7      	bhi.n	8002abc <HAL_Delay+0x28>
  {
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000050 	.word	0x20000050

08002adc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e033      	b.n	8002b5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fcde 	bl	80024bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b22:	f023 0302 	bic.w	r3, r3, #2
 8002b26:	f043 0202 	orr.w	r2, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 faca 	bl	80030c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f023 0303 	bic.w	r3, r3, #3
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
 8002b4a:	e001      	b.n	8002b50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_Start+0x1a>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e097      	b.n	8002cae <HAL_ADC_Start+0x14a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d018      	beq.n	8002bc6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba4:	4b45      	ldr	r3, [pc, #276]	; (8002cbc <HAL_ADC_Start+0x158>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a45      	ldr	r2, [pc, #276]	; (8002cc0 <HAL_ADC_Start+0x15c>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0c9a      	lsrs	r2, r3, #18
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002bb8:	e002      	b.n	8002bc0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f9      	bne.n	8002bba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d15f      	bne.n	8002c94 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	d106      	bne.n	8002c22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f023 0206 	bic.w	r2, r3, #6
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
 8002c20:	e002      	b.n	8002c28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_ADC_Start+0x160>)
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10f      	bne.n	8002c6a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d129      	bne.n	8002cac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	e020      	b.n	8002cac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <HAL_ADC_Start+0x164>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d11b      	bne.n	8002cac <HAL_ADC_Start+0x148>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d114      	bne.n	8002cac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	e00b      	b.n	8002cac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f043 0210 	orr.w	r2, r3, #16
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000048 	.word	0x20000048
 8002cc0:	431bde83 	.word	0x431bde83
 8002cc4:	40012300 	.word	0x40012300
 8002cc8:	40012000 	.word	0x40012000

08002ccc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_Stop+0x16>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e021      	b.n	8002d26 <HAL_ADC_Stop+0x5a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d113      	bne.n	8002d78 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5e:	d10b      	bne.n	8002d78 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e063      	b.n	8002e40 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002d78:	f7ff fe80 	bl	8002a7c <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d7e:	e021      	b.n	8002dc4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d01d      	beq.n	8002dc4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <HAL_ADC_PollForConversion+0x6c>
 8002d8e:	f7ff fe75 	bl	8002a7c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d212      	bcs.n	8002dc4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d00b      	beq.n	8002dc4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e03d      	b.n	8002e40 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d1d6      	bne.n	8002d80 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0212 	mvn.w	r2, #18
 8002dda:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d123      	bne.n	8002e3e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11f      	bne.n	8002e3e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d111      	bne.n	8002e3e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d105      	bne.n	8002e3e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1c>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e113      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x244>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b09      	cmp	r3, #9
 8002e8e:	d925      	bls.n	8002edc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68d9      	ldr	r1, [r3, #12]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b1e      	subs	r3, #30
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43da      	mvns	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68d9      	ldr	r1, [r3, #12]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	4603      	mov	r3, r0
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4403      	add	r3, r0
 8002ece:	3b1e      	subs	r3, #30
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	e022      	b.n	8002f22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6919      	ldr	r1, [r3, #16]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	400a      	ands	r2, r1
 8002efe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6919      	ldr	r1, [r3, #16]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	4618      	mov	r0, r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4403      	add	r3, r0
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d824      	bhi.n	8002f74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b05      	subs	r3, #5
 8002f3c:	221f      	movs	r2, #31
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	400a      	ands	r2, r1
 8002f4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	4618      	mov	r0, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	3b05      	subs	r3, #5
 8002f66:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34
 8002f72:	e04c      	b.n	800300e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	d824      	bhi.n	8002fc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3b23      	subs	r3, #35	; 0x23
 8002f8e:	221f      	movs	r2, #31
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43da      	mvns	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b23      	subs	r3, #35	; 0x23
 8002fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fc4:	e023      	b.n	800300e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3b41      	subs	r3, #65	; 0x41
 8002fd8:	221f      	movs	r2, #31
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	3b41      	subs	r3, #65	; 0x41
 8003002:	fa00 f203 	lsl.w	r2, r0, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800300e:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <HAL_ADC_ConfigChannel+0x250>)
 8003010:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <HAL_ADC_ConfigChannel+0x254>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d10f      	bne.n	800303c <HAL_ADC_ConfigChannel+0x1d8>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b12      	cmp	r3, #18
 8003022:	d10b      	bne.n	800303c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <HAL_ADC_ConfigChannel+0x254>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d12b      	bne.n	800309e <HAL_ADC_ConfigChannel+0x23a>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <HAL_ADC_ConfigChannel+0x258>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x1f4>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b11      	cmp	r3, #17
 8003056:	d122      	bne.n	800309e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a11      	ldr	r2, [pc, #68]	; (80030bc <HAL_ADC_ConfigChannel+0x258>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d111      	bne.n	800309e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_ADC_ConfigChannel+0x25c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <HAL_ADC_ConfigChannel+0x260>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	0c9a      	lsrs	r2, r3, #18
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003090:	e002      	b.n	8003098 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3b01      	subs	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f9      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40012300 	.word	0x40012300
 80030b8:	40012000 	.word	0x40012000
 80030bc:	10000012 	.word	0x10000012
 80030c0:	20000048 	.word	0x20000048
 80030c4:	431bde83 	.word	0x431bde83

080030c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030d0:	4b79      	ldr	r3, [pc, #484]	; (80032b8 <ADC_Init+0x1f0>)
 80030d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6899      	ldr	r1, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	4a58      	ldr	r2, [pc, #352]	; (80032bc <ADC_Init+0x1f4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d022      	beq.n	80031a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800316e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6899      	ldr	r1, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6899      	ldr	r1, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	e00f      	b.n	80031c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0202 	bic.w	r2, r2, #2
 80031d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6899      	ldr	r1, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7e1b      	ldrb	r3, [r3, #24]
 80031e0:	005a      	lsls	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01b      	beq.n	800322c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003202:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003212:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	3b01      	subs	r3, #1
 8003220:	035a      	lsls	r2, r3, #13
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	e007      	b.n	800323c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800323a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800324a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	3b01      	subs	r3, #1
 8003258:	051a      	lsls	r2, r3, #20
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003270:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800327e:	025a      	lsls	r2, r3, #9
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6899      	ldr	r1, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	029a      	lsls	r2, r3, #10
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40012300 	.word	0x40012300
 80032bc:	0f000001 	.word	0x0f000001

080032c0 <__NVIC_SetPriorityGrouping>:
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032dc:	4013      	ands	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f2:	4a04      	ldr	r2, [pc, #16]	; (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	60d3      	str	r3, [r2, #12]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_GetPriorityGrouping>:
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <__NVIC_GetPriorityGrouping+0x18>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	f003 0307 	and.w	r3, r3, #7
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <__NVIC_EnableIRQ>:
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	2b00      	cmp	r3, #0
 8003334:	db0b      	blt.n	800334e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	f003 021f 	and.w	r2, r3, #31
 800333c:	4907      	ldr	r1, [pc, #28]	; (800335c <__NVIC_EnableIRQ+0x38>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2001      	movs	r0, #1
 8003346:	fa00 f202 	lsl.w	r2, r0, r2
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000e100 	.word	0xe000e100

08003360 <__NVIC_SetPriority>:
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003370:	2b00      	cmp	r3, #0
 8003372:	db0a      	blt.n	800338a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	490c      	ldr	r1, [pc, #48]	; (80033ac <__NVIC_SetPriority+0x4c>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	440b      	add	r3, r1
 8003384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003388:	e00a      	b.n	80033a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4908      	ldr	r1, [pc, #32]	; (80033b0 <__NVIC_SetPriority+0x50>)
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	3b04      	subs	r3, #4
 8003398:	0112      	lsls	r2, r2, #4
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	440b      	add	r3, r1
 800339e:	761a      	strb	r2, [r3, #24]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000e100 	.word	0xe000e100
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <NVIC_EncodePriority>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f1c3 0307 	rsb	r3, r3, #7
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	bf28      	it	cs
 80033d2:	2304      	movcs	r3, #4
 80033d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3304      	adds	r3, #4
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d902      	bls.n	80033e4 <NVIC_EncodePriority+0x30>
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3b03      	subs	r3, #3
 80033e2:	e000      	b.n	80033e6 <NVIC_EncodePriority+0x32>
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43da      	mvns	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	401a      	ands	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	43d9      	mvns	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	4313      	orrs	r3, r2
}
 800340e:	4618      	mov	r0, r3
 8003410:	3724      	adds	r7, #36	; 0x24
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <SysTick_Config>:
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800342c:	d301      	bcc.n	8003432 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800342e:	2301      	movs	r3, #1
 8003430:	e00f      	b.n	8003452 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <SysTick_Config+0x40>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343a:	210f      	movs	r1, #15
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	f7ff ff8e 	bl	8003360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <SysTick_Config+0x40>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <SysTick_Config+0x40>)
 800344c:	2207      	movs	r2, #7
 800344e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	e000e010 	.word	0xe000e010

08003460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff29 	bl	80032c0 <__NVIC_SetPriorityGrouping>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003488:	f7ff ff3e 	bl	8003308 <__NVIC_GetPriorityGrouping>
 800348c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f7ff ff8e 	bl	80033b4 <NVIC_EncodePriority>
 8003498:	4602      	mov	r2, r0
 800349a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff5d 	bl	8003360 <__NVIC_SetPriority>
}
 80034a6:	bf00      	nop
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff31 	bl	8003324 <__NVIC_EnableIRQ>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ffa2 	bl	800341c <SysTick_Config>
 80034d8:	4603      	mov	r3, r0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	e159      	b.n	80037b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003500:	2201      	movs	r2, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	429a      	cmp	r2, r3
 800351a:	f040 8148 	bne.w	80037ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d005      	beq.n	8003536 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003532:	2b02      	cmp	r3, #2
 8003534:	d130      	bne.n	8003598 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	2203      	movs	r2, #3
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800356c:	2201      	movs	r2, #1
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 0201 	and.w	r2, r3, #1
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d017      	beq.n	80035d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d123      	bne.n	8003628 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	08da      	lsrs	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3208      	adds	r2, #8
 80035e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	220f      	movs	r2, #15
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	08da      	lsrs	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3208      	adds	r2, #8
 8003622:	69b9      	ldr	r1, [r7, #24]
 8003624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2203      	movs	r2, #3
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0203 	and.w	r2, r3, #3
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80a2 	beq.w	80037ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	4b57      	ldr	r3, [pc, #348]	; (80037cc <HAL_GPIO_Init+0x2e8>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	4a56      	ldr	r2, [pc, #344]	; (80037cc <HAL_GPIO_Init+0x2e8>)
 8003674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003678:	6453      	str	r3, [r2, #68]	; 0x44
 800367a:	4b54      	ldr	r3, [pc, #336]	; (80037cc <HAL_GPIO_Init+0x2e8>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003686:	4a52      	ldr	r2, [pc, #328]	; (80037d0 <HAL_GPIO_Init+0x2ec>)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	3302      	adds	r3, #2
 800368e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	220f      	movs	r2, #15
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a49      	ldr	r2, [pc, #292]	; (80037d4 <HAL_GPIO_Init+0x2f0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d019      	beq.n	80036e6 <HAL_GPIO_Init+0x202>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a48      	ldr	r2, [pc, #288]	; (80037d8 <HAL_GPIO_Init+0x2f4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_GPIO_Init+0x1fe>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a47      	ldr	r2, [pc, #284]	; (80037dc <HAL_GPIO_Init+0x2f8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00d      	beq.n	80036de <HAL_GPIO_Init+0x1fa>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a46      	ldr	r2, [pc, #280]	; (80037e0 <HAL_GPIO_Init+0x2fc>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d007      	beq.n	80036da <HAL_GPIO_Init+0x1f6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a45      	ldr	r2, [pc, #276]	; (80037e4 <HAL_GPIO_Init+0x300>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_GPIO_Init+0x1f2>
 80036d2:	2304      	movs	r3, #4
 80036d4:	e008      	b.n	80036e8 <HAL_GPIO_Init+0x204>
 80036d6:	2307      	movs	r3, #7
 80036d8:	e006      	b.n	80036e8 <HAL_GPIO_Init+0x204>
 80036da:	2303      	movs	r3, #3
 80036dc:	e004      	b.n	80036e8 <HAL_GPIO_Init+0x204>
 80036de:	2302      	movs	r3, #2
 80036e0:	e002      	b.n	80036e8 <HAL_GPIO_Init+0x204>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_GPIO_Init+0x204>
 80036e6:	2300      	movs	r3, #0
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	f002 0203 	and.w	r2, r2, #3
 80036ee:	0092      	lsls	r2, r2, #2
 80036f0:	4093      	lsls	r3, r2
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036f8:	4935      	ldr	r1, [pc, #212]	; (80037d0 <HAL_GPIO_Init+0x2ec>)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	089b      	lsrs	r3, r3, #2
 80036fe:	3302      	adds	r3, #2
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003706:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <HAL_GPIO_Init+0x304>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800372a:	4a2f      	ldr	r2, [pc, #188]	; (80037e8 <HAL_GPIO_Init+0x304>)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003730:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <HAL_GPIO_Init+0x304>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003754:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <HAL_GPIO_Init+0x304>)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <HAL_GPIO_Init+0x304>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800377e:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <HAL_GPIO_Init+0x304>)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003784:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_GPIO_Init+0x304>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037a8:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <HAL_GPIO_Init+0x304>)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3301      	adds	r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2b0f      	cmp	r3, #15
 80037b8:	f67f aea2 	bls.w	8003500 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3724      	adds	r7, #36	; 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40013800 	.word	0x40013800
 80037d4:	40020000 	.word	0x40020000
 80037d8:	40020400 	.word	0x40020400
 80037dc:	40020800 	.word	0x40020800
 80037e0:	40020c00 	.word	0x40020c00
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40013c00 	.word	0x40013c00

080037ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
 8003808:	e001      	b.n	800380e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
 8003828:	4613      	mov	r3, r2
 800382a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800382c:	787b      	ldrb	r3, [r7, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003838:	e003      	b.n	8003842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800383a:	887b      	ldrh	r3, [r7, #2]
 800383c:	041a      	lsls	r2, r3, #16
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	619a      	str	r2, [r3, #24]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	460b      	mov	r3, r1
 8003858:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003860:	887a      	ldrh	r2, [r7, #2]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4013      	ands	r3, r2
 8003866:	041a      	lsls	r2, r3, #16
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	43d9      	mvns	r1, r3
 800386c:	887b      	ldrh	r3, [r7, #2]
 800386e:	400b      	ands	r3, r1
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	619a      	str	r2, [r3, #24]
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e12b      	b.n	8003aee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fe fe4a 	bl	8002544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e8:	f002 fb4a 	bl	8005f80 <HAL_RCC_GetPCLK1Freq>
 80038ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4a81      	ldr	r2, [pc, #516]	; (8003af8 <HAL_I2C_Init+0x274>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d807      	bhi.n	8003908 <HAL_I2C_Init+0x84>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a80      	ldr	r2, [pc, #512]	; (8003afc <HAL_I2C_Init+0x278>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	bf94      	ite	ls
 8003900:	2301      	movls	r3, #1
 8003902:	2300      	movhi	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	e006      	b.n	8003916 <HAL_I2C_Init+0x92>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a7d      	ldr	r2, [pc, #500]	; (8003b00 <HAL_I2C_Init+0x27c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	bf94      	ite	ls
 8003910:	2301      	movls	r3, #1
 8003912:	2300      	movhi	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e0e7      	b.n	8003aee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a78      	ldr	r2, [pc, #480]	; (8003b04 <HAL_I2C_Init+0x280>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0c9b      	lsrs	r3, r3, #18
 8003928:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a6a      	ldr	r2, [pc, #424]	; (8003af8 <HAL_I2C_Init+0x274>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d802      	bhi.n	8003958 <HAL_I2C_Init+0xd4>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3301      	adds	r3, #1
 8003956:	e009      	b.n	800396c <HAL_I2C_Init+0xe8>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	4a69      	ldr	r2, [pc, #420]	; (8003b08 <HAL_I2C_Init+0x284>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	099b      	lsrs	r3, r3, #6
 800396a:	3301      	adds	r3, #1
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	430b      	orrs	r3, r1
 8003972:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800397e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	495c      	ldr	r1, [pc, #368]	; (8003af8 <HAL_I2C_Init+0x274>)
 8003988:	428b      	cmp	r3, r1
 800398a:	d819      	bhi.n	80039c0 <HAL_I2C_Init+0x13c>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1e59      	subs	r1, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	fbb1 f3f3 	udiv	r3, r1, r3
 800399a:	1c59      	adds	r1, r3, #1
 800399c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039a0:	400b      	ands	r3, r1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_I2C_Init+0x138>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1e59      	subs	r1, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b4:	3301      	adds	r3, #1
 80039b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ba:	e051      	b.n	8003a60 <HAL_I2C_Init+0x1dc>
 80039bc:	2304      	movs	r3, #4
 80039be:	e04f      	b.n	8003a60 <HAL_I2C_Init+0x1dc>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d111      	bne.n	80039ec <HAL_I2C_Init+0x168>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e58      	subs	r0, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	440b      	add	r3, r1
 80039d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e012      	b.n	8003a12 <HAL_I2C_Init+0x18e>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1e58      	subs	r0, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	0099      	lsls	r1, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_I2C_Init+0x196>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e022      	b.n	8003a60 <HAL_I2C_Init+0x1dc>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10e      	bne.n	8003a40 <HAL_I2C_Init+0x1bc>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1e58      	subs	r0, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6859      	ldr	r1, [r3, #4]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	440b      	add	r3, r1
 8003a30:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a34:	3301      	adds	r3, #1
 8003a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3e:	e00f      	b.n	8003a60 <HAL_I2C_Init+0x1dc>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1e58      	subs	r0, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	0099      	lsls	r1, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a56:	3301      	adds	r3, #1
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	6809      	ldr	r1, [r1, #0]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6911      	ldr	r1, [r2, #16]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68d2      	ldr	r2, [r2, #12]
 8003a9a:	4311      	orrs	r1, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	000186a0 	.word	0x000186a0
 8003afc:	001e847f 	.word	0x001e847f
 8003b00:	003d08ff 	.word	0x003d08ff
 8003b04:	431bde83 	.word	0x431bde83
 8003b08:	10624dd3 	.word	0x10624dd3

08003b0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	461a      	mov	r2, r3
 8003b18:	460b      	mov	r3, r1
 8003b1a:	817b      	strh	r3, [r7, #10]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b20:	f7fe ffac 	bl	8002a7c <HAL_GetTick>
 8003b24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	f040 80e0 	bne.w	8003cf4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2319      	movs	r3, #25
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4970      	ldr	r1, [pc, #448]	; (8003d00 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 faf4 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e0d3      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_I2C_Master_Transmit+0x50>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e0cc      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d007      	beq.n	8003b82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0201 	orr.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2221      	movs	r2, #33	; 0x21
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	893a      	ldrh	r2, [r7, #8]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a50      	ldr	r2, [pc, #320]	; (8003d04 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bc4:	8979      	ldrh	r1, [r7, #10]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	6a3a      	ldr	r2, [r7, #32]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f996 	bl	8003efc <I2C_MasterRequestWrite>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e08d      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bf0:	e066      	b.n	8003cc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	6a39      	ldr	r1, [r7, #32]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fb6e 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d107      	bne.n	8003c1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e06b      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d11b      	bne.n	8003c94 <HAL_I2C_Master_Transmit+0x188>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d017      	beq.n	8003c94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	6a39      	ldr	r1, [r7, #32]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fb5e 	bl	800435a <I2C_WaitOnBTFFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00d      	beq.n	8003cc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d107      	bne.n	8003cbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e01a      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d194      	bne.n	8003bf2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	00100002 	.word	0x00100002
 8003d04:	ffff0000 	.word	0xffff0000

08003d08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	4608      	mov	r0, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	461a      	mov	r2, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	817b      	strh	r3, [r7, #10]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	813b      	strh	r3, [r7, #8]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d22:	f7fe feab 	bl	8002a7c <HAL_GetTick>
 8003d26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	f040 80d9 	bne.w	8003ee8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	2319      	movs	r3, #25
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	496d      	ldr	r1, [pc, #436]	; (8003ef4 <HAL_I2C_Mem_Write+0x1ec>)
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f9f3 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e0cc      	b.n	8003eea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_I2C_Mem_Write+0x56>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e0c5      	b.n	8003eea <HAL_I2C_Mem_Write+0x1e2>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d007      	beq.n	8003d84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2221      	movs	r2, #33	; 0x21
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2240      	movs	r2, #64	; 0x40
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a3a      	ldr	r2, [r7, #32]
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a4d      	ldr	r2, [pc, #308]	; (8003ef8 <HAL_I2C_Mem_Write+0x1f0>)
 8003dc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dc6:	88f8      	ldrh	r0, [r7, #6]
 8003dc8:	893a      	ldrh	r2, [r7, #8]
 8003dca:	8979      	ldrh	r1, [r7, #10]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f912 	bl	8004000 <I2C_RequestMemoryWrite>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d052      	beq.n	8003e88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e081      	b.n	8003eea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fa74 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d107      	bne.n	8003e0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e06b      	b.n	8003eea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d11b      	bne.n	8003e88 <HAL_I2C_Mem_Write+0x180>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d017      	beq.n	8003e88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1aa      	bne.n	8003de6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fa60 	bl	800435a <I2C_WaitOnBTFFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00d      	beq.n	8003ebc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d107      	bne.n	8003eb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e016      	b.n	8003eea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	00100002 	.word	0x00100002
 8003ef8:	ffff0000 	.word	0xffff0000

08003efc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d006      	beq.n	8003f26 <I2C_MasterRequestWrite+0x2a>
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d003      	beq.n	8003f26 <I2C_MasterRequestWrite+0x2a>
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f24:	d108      	bne.n	8003f38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e00b      	b.n	8003f50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	2b12      	cmp	r3, #18
 8003f3e:	d107      	bne.n	8003f50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f8e5 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f76:	d103      	bne.n	8003f80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e035      	b.n	8003ff0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f8c:	d108      	bne.n	8003fa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f9c:	611a      	str	r2, [r3, #16]
 8003f9e:	e01b      	b.n	8003fd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fa0:	897b      	ldrh	r3, [r7, #10]
 8003fa2:	11db      	asrs	r3, r3, #7
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 0306 	and.w	r3, r3, #6
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f063 030f 	orn	r3, r3, #15
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	490e      	ldr	r1, [pc, #56]	; (8003ff8 <I2C_MasterRequestWrite+0xfc>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f90b 	bl	80041da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e010      	b.n	8003ff0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fce:	897b      	ldrh	r3, [r7, #10]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4907      	ldr	r1, [pc, #28]	; (8003ffc <I2C_MasterRequestWrite+0x100>)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f8fb 	bl	80041da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	00010008 	.word	0x00010008
 8003ffc:	00010002 	.word	0x00010002

08004000 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	461a      	mov	r2, r3
 800400e:	4603      	mov	r3, r0
 8004010:	817b      	strh	r3, [r7, #10]
 8004012:	460b      	mov	r3, r1
 8004014:	813b      	strh	r3, [r7, #8]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004028:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	2200      	movs	r2, #0
 8004032:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f878 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00d      	beq.n	800405e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004050:	d103      	bne.n	800405a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e05f      	b.n	800411e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800405e:	897b      	ldrh	r3, [r7, #10]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800406c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	6a3a      	ldr	r2, [r7, #32]
 8004072:	492d      	ldr	r1, [pc, #180]	; (8004128 <I2C_RequestMemoryWrite+0x128>)
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f8b0 	bl	80041da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e04c      	b.n	800411e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409c:	6a39      	ldr	r1, [r7, #32]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f91a 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00d      	beq.n	80040c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d107      	bne.n	80040c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e02b      	b.n	800411e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d105      	bne.n	80040d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040cc:	893b      	ldrh	r3, [r7, #8]
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]
 80040d6:	e021      	b.n	800411c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040d8:	893b      	ldrh	r3, [r7, #8]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	b29b      	uxth	r3, r3
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e8:	6a39      	ldr	r1, [r7, #32]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f8f4 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00d      	beq.n	8004112 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d107      	bne.n	800410e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e005      	b.n	800411e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004112:	893b      	ldrh	r3, [r7, #8]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	00010002 	.word	0x00010002

0800412c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800413c:	e025      	b.n	800418a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d021      	beq.n	800418a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fe fc99 	bl	8002a7c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d116      	bne.n	800418a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e023      	b.n	80041d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10d      	bne.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	43da      	mvns	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	e00c      	b.n	80041ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	43da      	mvns	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d0b6      	beq.n	800413e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041e8:	e051      	b.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f8:	d123      	bne.n	8004242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004208:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004212:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f043 0204 	orr.w	r2, r3, #4
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e046      	b.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d021      	beq.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fe fc17 	bl	8002a7c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d116      	bne.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f043 0220 	orr.w	r2, r3, #32
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e020      	b.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10c      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	e00b      	b.n	80042ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	43da      	mvns	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d18d      	bne.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e4:	e02d      	b.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f878 	bl	80043dc <I2C_IsAcknowledgeFailed>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e02d      	b.n	8004352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d021      	beq.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fe fbbd 	bl	8002a7c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d116      	bne.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f043 0220 	orr.w	r2, r3, #32
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e007      	b.n	8004352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	d1ca      	bne.n	80042e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004366:	e02d      	b.n	80043c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f837 	bl	80043dc <I2C_IsAcknowledgeFailed>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e02d      	b.n	80043d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437e:	d021      	beq.n	80043c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004380:	f7fe fb7c 	bl	8002a7c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	429a      	cmp	r2, r3
 800438e:	d302      	bcc.n	8004396 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d116      	bne.n	80043c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e007      	b.n	80043d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d1ca      	bne.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f2:	d11b      	bne.n	800442c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	f043 0204 	orr.w	r2, r3, #4
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800443a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800443c:	b08f      	sub	sp, #60	; 0x3c
 800443e:	af0a      	add	r7, sp, #40	; 0x28
 8004440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e10f      	b.n	800466c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f004 fe88 	bl	800917c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2203      	movs	r2, #3
 8004470:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f002 f875 	bl	800657a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	687e      	ldr	r6, [r7, #4]
 8004498:	466d      	mov	r5, sp
 800449a:	f106 0410 	add.w	r4, r6, #16
 800449e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80044ae:	1d33      	adds	r3, r6, #4
 80044b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044b2:	6838      	ldr	r0, [r7, #0]
 80044b4:	f001 ff4d 	bl	8006352 <USB_CoreInit>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e0d0      	b.n	800466c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f002 f863 	bl	800659c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
 80044da:	e04a      	b.n	8004572 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044dc:	7bfa      	ldrb	r2, [r7, #15]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	333d      	adds	r3, #61	; 0x3d
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044f0:	7bfa      	ldrb	r2, [r7, #15]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	333c      	adds	r3, #60	; 0x3c
 8004500:	7bfa      	ldrb	r2, [r7, #15]
 8004502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	b298      	uxth	r0, r3
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	3342      	adds	r3, #66	; 0x42
 8004518:	4602      	mov	r2, r0
 800451a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800451c:	7bfa      	ldrb	r2, [r7, #15]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	333f      	adds	r3, #63	; 0x3f
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004530:	7bfa      	ldrb	r2, [r7, #15]
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	3344      	adds	r3, #68	; 0x44
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004544:	7bfa      	ldrb	r2, [r7, #15]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	3348      	adds	r3, #72	; 0x48
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	3350      	adds	r3, #80	; 0x50
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	3301      	adds	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
 8004572:	7bfa      	ldrb	r2, [r7, #15]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d3af      	bcc.n	80044dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800457c:	2300      	movs	r3, #0
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	e044      	b.n	800460c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80045aa:	7bfa      	ldrb	r2, [r7, #15]
 80045ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045ae:	7bfa      	ldrb	r2, [r7, #15]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045c4:	7bfa      	ldrb	r2, [r7, #15]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045da:	7bfa      	ldrb	r2, [r7, #15]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045f0:	7bfa      	ldrb	r2, [r7, #15]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	3301      	adds	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
 800460c:	7bfa      	ldrb	r2, [r7, #15]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d3b5      	bcc.n	8004582 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	687e      	ldr	r6, [r7, #4]
 800461e:	466d      	mov	r5, sp
 8004620:	f106 0410 	add.w	r4, r6, #16
 8004624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800462a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004630:	e885 0003 	stmia.w	r5, {r0, r1}
 8004634:	1d33      	adds	r3, r6, #4
 8004636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004638:	6838      	ldr	r0, [r7, #0]
 800463a:	f001 ffd9 	bl	80065f0 <USB_DevInit>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e00d      	b.n	800466c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f003 f821 	bl	80076ac <USB_DevDisconnect>

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004674 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_PCD_Start+0x1c>
 800468c:	2302      	movs	r3, #2
 800468e:	e020      	b.n	80046d2 <HAL_PCD_Start+0x5e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	2b01      	cmp	r3, #1
 800469e:	d109      	bne.n	80046b4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d005      	beq.n	80046b4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 ff4d 	bl	8006558 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f002 ffd1 	bl	800766a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046da:	b590      	push	{r4, r7, lr}
 80046dc:	b08d      	sub	sp, #52	; 0x34
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f003 f88f 	bl	8007814 <USB_GetMode>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f040 839d 	bne.w	8004e38 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f002 fff3 	bl	80076ee <USB_ReadInterrupts>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8393 	beq.w	8004e36 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f002 ffea 	bl	80076ee <USB_ReadInterrupts>
 800471a:	4603      	mov	r3, r0
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b02      	cmp	r3, #2
 8004722:	d107      	bne.n	8004734 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f002 0202 	and.w	r2, r2, #2
 8004732:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f002 ffd8 	bl	80076ee <USB_ReadInterrupts>
 800473e:	4603      	mov	r3, r0
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b10      	cmp	r3, #16
 8004746:	d161      	bne.n	800480c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0210 	bic.w	r2, r2, #16
 8004756:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f003 020f 	and.w	r2, r3, #15
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	3304      	adds	r3, #4
 8004776:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	0c5b      	lsrs	r3, r3, #17
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	2b02      	cmp	r3, #2
 8004782:	d124      	bne.n	80047ce <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d035      	beq.n	80047fc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800479a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800479e:	b29b      	uxth	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	6a38      	ldr	r0, [r7, #32]
 80047a4:	f002 fe3e 	bl	8007424 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	091b      	lsrs	r3, r3, #4
 80047b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047b4:	441a      	add	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047c6:	441a      	add	r2, r3
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	619a      	str	r2, [r3, #24]
 80047cc:	e016      	b.n	80047fc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	0c5b      	lsrs	r3, r3, #17
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d110      	bne.n	80047fc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047e0:	2208      	movs	r2, #8
 80047e2:	4619      	mov	r1, r3
 80047e4:	6a38      	ldr	r0, [r7, #32]
 80047e6:	f002 fe1d 	bl	8007424 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047f6:	441a      	add	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0210 	orr.w	r2, r2, #16
 800480a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f002 ff6c 	bl	80076ee <USB_ReadInterrupts>
 8004816:	4603      	mov	r3, r0
 8004818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800481c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004820:	d16e      	bne.n	8004900 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f002 ff72 	bl	8007714 <USB_ReadDevAllOutEpInterrupt>
 8004830:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004832:	e062      	b.n	80048fa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d057      	beq.n	80048ee <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f002 ff97 	bl	800777c <USB_ReadDevOutEPInterrupt>
 800484e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00c      	beq.n	8004874 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004866:	461a      	mov	r2, r3
 8004868:	2301      	movs	r3, #1
 800486a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800486c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fdb0 	bl	80053d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00c      	beq.n	8004898 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	461a      	mov	r2, r3
 800488c:	2308      	movs	r3, #8
 800488e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 feaa 	bl	80055ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f003 0310 	and.w	r3, r3, #16
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ae:	461a      	mov	r2, r3
 80048b0:	2310      	movs	r3, #16
 80048b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	461a      	mov	r2, r3
 80048cc:	2320      	movs	r3, #32
 80048ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	461a      	mov	r2, r3
 80048e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	3301      	adds	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d199      	bne.n	8004834 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f002 fef2 	bl	80076ee <USB_ReadInterrupts>
 800490a:	4603      	mov	r3, r0
 800490c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004914:	f040 80c0 	bne.w	8004a98 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f002 ff13 	bl	8007748 <USB_ReadDevAllInEpInterrupt>
 8004922:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004928:	e0b2      	b.n	8004a90 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a7 	beq.w	8004a84 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f002 ff39 	bl	80077b8 <USB_ReadDevInEPInterrupt>
 8004946:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d057      	beq.n	8004a02 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	2201      	movs	r2, #1
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	43db      	mvns	r3, r3
 800496c:	69f9      	ldr	r1, [r7, #28]
 800496e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004972:	4013      	ands	r3, r2
 8004974:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004982:	461a      	mov	r2, r3
 8004984:	2301      	movs	r3, #1
 8004986:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d132      	bne.n	80049f6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	3348      	adds	r3, #72	; 0x48
 80049a0:	6819      	ldr	r1, [r3, #0]
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4403      	add	r3, r0
 80049b0:	3344      	adds	r3, #68	; 0x44
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4419      	add	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ba:	4613      	mov	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4403      	add	r3, r0
 80049c4:	3348      	adds	r3, #72	; 0x48
 80049c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d113      	bne.n	80049f6 <HAL_PCD_IRQHandler+0x31c>
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d2:	4613      	mov	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	3350      	adds	r3, #80	; 0x50
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d108      	bne.n	80049f6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049ee:	461a      	mov	r2, r3
 80049f0:	2101      	movs	r1, #1
 80049f2:	f002 ff41 	bl	8007878 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	4619      	mov	r1, r3
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f004 fc3e 	bl	800927e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	461a      	mov	r2, r3
 8004a36:	2310      	movs	r3, #16
 8004a38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	461a      	mov	r2, r3
 8004a52:	2340      	movs	r3, #64	; 0x40
 8004a54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2302      	movs	r3, #2
 8004a70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fc1b 	bl	80052ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	3301      	adds	r3, #1
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f47f af49 	bne.w	800492a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f002 fe26 	bl	80076ee <USB_ReadInterrupts>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aac:	d122      	bne.n	8004af4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d108      	bne.n	8004ade <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fe26 	bl	8005728 <HAL_PCDEx_LPM_Callback>
 8004adc:	e002      	b.n	8004ae4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f004 fc3a 	bl	8009358 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f002 fdf8 	bl	80076ee <USB_ReadInterrupts>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b08:	d112      	bne.n	8004b30 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d102      	bne.n	8004b20 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f004 fbf6 	bl	800930c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b2e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f002 fdda 	bl	80076ee <USB_ReadInterrupts>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b44:	f040 80c7 	bne.w	8004cd6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2110      	movs	r1, #16
 8004b62:	4618      	mov	r0, r3
 8004b64:	f001 fea8 	bl	80068b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6c:	e056      	b.n	8004c1c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ba0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bd4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bf4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	3301      	adds	r3, #1
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d3a3      	bcc.n	8004b6e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004c38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c52:	f043 030b 	orr.w	r3, r3, #11
 8004c56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c68:	f043 030b 	orr.w	r3, r3, #11
 8004c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c6e:	e015      	b.n	8004c9c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c82:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004c86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c96:	f043 030b 	orr.w	r3, r3, #11
 8004c9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004caa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004cae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f002 fdd9 	bl	8007878 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f002 fd07 	bl	80076ee <USB_ReadInterrupts>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cea:	d124      	bne.n	8004d36 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f002 fd9d 	bl	8007830 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 fe3d 	bl	800697a <USB_GetDevSpeed>
 8004d00:	4603      	mov	r3, r0
 8004d02:	461a      	mov	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681c      	ldr	r4, [r3, #0]
 8004d0c:	f001 f92c 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8004d10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f001 fb7a 	bl	8006414 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f004 fad4 	bl	80092ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f002 fcd7 	bl	80076ee <USB_ReadInterrupts>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d10a      	bne.n	8004d60 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f004 fab1 	bl	80092b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695a      	ldr	r2, [r3, #20]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f002 0208 	and.w	r2, r2, #8
 8004d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f002 fcc2 	bl	80076ee <USB_ReadInterrupts>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d74:	d10f      	bne.n	8004d96 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f004 fb09 	bl	8009398 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695a      	ldr	r2, [r3, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f002 fca7 	bl	80076ee <USB_ReadInterrupts>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004daa:	d10f      	bne.n	8004dcc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f004 fadc 	bl	8009374 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f002 fc8c 	bl	80076ee <USB_ReadInterrupts>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de0:	d10a      	bne.n	8004df8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f004 faea 	bl	80093bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f002 fc76 	bl	80076ee <USB_ReadInterrupts>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d115      	bne.n	8004e38 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f004 fada 	bl	80093d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
 8004e34:	e000      	b.n	8004e38 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004e36:	bf00      	nop
    }
  }
}
 8004e38:	3734      	adds	r7, #52	; 0x34
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd90      	pop	{r4, r7, pc}

08004e3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	460b      	mov	r3, r1
 8004e48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_PCD_SetAddress+0x1a>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e013      	b.n	8004e80 <HAL_PCD_SetAddress+0x42>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f002 fbd4 	bl	800761e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	4608      	mov	r0, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	461a      	mov	r2, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	70fb      	strb	r3, [r7, #3]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	803b      	strh	r3, [r7, #0]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	da0f      	bge.n	8004ece <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	f003 020f 	and.w	r2, r3, #15
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	3338      	adds	r3, #56	; 0x38
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	705a      	strb	r2, [r3, #1]
 8004ecc:	e00f      	b.n	8004eee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	f003 020f 	and.w	r2, r3, #15
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004efa:	883a      	ldrh	r2, [r7, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	78ba      	ldrb	r2, [r7, #2]
 8004f04:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d004      	beq.n	8004f18 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f18:	78bb      	ldrb	r3, [r7, #2]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d102      	bne.n	8004f24 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_PCD_EP_Open+0xaa>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e00e      	b.n	8004f50 <HAL_PCD_EP_Open+0xc8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f001 fd3f 	bl	80069c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004f4e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	da0f      	bge.n	8004f8c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	f003 020f 	and.w	r2, r3, #15
 8004f72:	4613      	mov	r3, r2
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	3338      	adds	r3, #56	; 0x38
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4413      	add	r3, r2
 8004f80:	3304      	adds	r3, #4
 8004f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	705a      	strb	r2, [r3, #1]
 8004f8a:	e00f      	b.n	8004fac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	f003 020f 	and.w	r2, r3, #15
 8004f92:	4613      	mov	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_PCD_EP_Close+0x6e>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e00e      	b.n	8004fe4 <HAL_PCD_EP_Close+0x8c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f001 fd7d 	bl	8006ad4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ffc:	7afb      	ldrb	r3, [r7, #11]
 8004ffe:	f003 020f 	and.w	r2, r3, #15
 8005002:	4613      	mov	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	3304      	adds	r3, #4
 8005014:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2200      	movs	r2, #0
 800502c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	b2da      	uxtb	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d102      	bne.n	8005048 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005048:	7afb      	ldrb	r3, [r7, #11]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	6979      	ldr	r1, [r7, #20]
 8005060:	f002 f858 	bl	8007114 <USB_EP0StartXfer>
 8005064:	e008      	b.n	8005078 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	6979      	ldr	r1, [r7, #20]
 8005074:	f001 fe0a 	bl	8006c8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80050a4:	681b      	ldr	r3, [r3, #0]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b086      	sub	sp, #24
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
 80050be:	460b      	mov	r3, r1
 80050c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050c2:	7afb      	ldrb	r3, [r7, #11]
 80050c4:	f003 020f 	and.w	r2, r3, #15
 80050c8:	4613      	mov	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	3338      	adds	r3, #56	; 0x38
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	3304      	adds	r3, #4
 80050d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2201      	movs	r2, #1
 80050f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050f2:	7afb      	ldrb	r3, [r7, #11]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d102      	bne.n	800510c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800510c:	7afb      	ldrb	r3, [r7, #11]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	6979      	ldr	r1, [r7, #20]
 8005124:	f001 fff6 	bl	8007114 <USB_EP0StartXfer>
 8005128:	e008      	b.n	800513c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	6979      	ldr	r1, [r7, #20]
 8005138:	f001 fda8 	bl	8006c8c <USB_EPStartXfer>
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	460b      	mov	r3, r1
 8005150:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	f003 020f 	and.w	r2, r3, #15
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	429a      	cmp	r2, r3
 800515e:	d901      	bls.n	8005164 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e050      	b.n	8005206 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005168:	2b00      	cmp	r3, #0
 800516a:	da0f      	bge.n	800518c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	f003 020f 	and.w	r2, r3, #15
 8005172:	4613      	mov	r3, r2
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	3338      	adds	r3, #56	; 0x38
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	4413      	add	r3, r2
 8005180:	3304      	adds	r3, #4
 8005182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	705a      	strb	r2, [r3, #1]
 800518a:	e00d      	b.n	80051a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	4613      	mov	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	3304      	adds	r3, #4
 80051a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_PCD_EP_SetStall+0x82>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e01e      	b.n	8005206 <HAL_PCD_EP_SetStall+0xc0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68f9      	ldr	r1, [r7, #12]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f002 f94d 	bl	8007476 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	b2d9      	uxtb	r1, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051f6:	461a      	mov	r2, r3
 80051f8:	f002 fb3e 	bl	8007878 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	f003 020f 	and.w	r2, r3, #15
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d901      	bls.n	800522c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e042      	b.n	80052b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800522c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005230:	2b00      	cmp	r3, #0
 8005232:	da0f      	bge.n	8005254 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 020f 	and.w	r2, r3, #15
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	3338      	adds	r3, #56	; 0x38
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	4413      	add	r3, r2
 8005248:	3304      	adds	r3, #4
 800524a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	705a      	strb	r2, [r3, #1]
 8005252:	e00f      	b.n	8005274 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	f003 020f 	and.w	r2, r3, #15
 800525a:	4613      	mov	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	4413      	add	r3, r2
 800526a:	3304      	adds	r3, #4
 800526c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	b2da      	uxtb	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_PCD_EP_ClrStall+0x86>
 8005290:	2302      	movs	r3, #2
 8005292:	e00e      	b.n	80052b2 <HAL_PCD_EP_ClrStall+0xa4>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68f9      	ldr	r1, [r7, #12]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f002 f955 	bl	8007552 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08a      	sub	sp, #40	; 0x28
 80052be:	af02      	add	r7, sp, #8
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	3338      	adds	r3, #56	; 0x38
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	3304      	adds	r3, #4
 80052e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d901      	bls.n	80052f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e06c      	b.n	80053cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	429a      	cmp	r2, r3
 8005306:	d902      	bls.n	800530e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	3303      	adds	r3, #3
 8005312:	089b      	lsrs	r3, r3, #2
 8005314:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005316:	e02b      	b.n	8005370 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	429a      	cmp	r2, r3
 800532c:	d902      	bls.n	8005334 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	3303      	adds	r3, #3
 8005338:	089b      	lsrs	r3, r3, #2
 800533a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68d9      	ldr	r1, [r3, #12]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800534c:	b2db      	uxtb	r3, r3
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	4603      	mov	r3, r0
 8005352:	6978      	ldr	r0, [r7, #20]
 8005354:	f002 f831 	bl	80073ba <USB_WritePacket>

    ep->xfer_buff  += len;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	441a      	add	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	441a      	add	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	b29b      	uxth	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	429a      	cmp	r2, r3
 8005384:	d809      	bhi.n	800539a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800538e:	429a      	cmp	r2, r3
 8005390:	d203      	bcs.n	800539a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1be      	bne.n	8005318 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d811      	bhi.n	80053ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	2201      	movs	r2, #1
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	43db      	mvns	r3, r3
 80053c0:	6939      	ldr	r1, [r7, #16]
 80053c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c6:	4013      	ands	r3, r2
 80053c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	333c      	adds	r3, #60	; 0x3c
 80053ec:	3304      	adds	r3, #4
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b01      	cmp	r3, #1
 8005408:	f040 80a0 	bne.w	800554c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d015      	beq.n	8005442 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a72      	ldr	r2, [pc, #456]	; (80055e4 <PCD_EP_OutXfrComplete_int+0x210>)
 800541a:	4293      	cmp	r3, r2
 800541c:	f240 80dd 	bls.w	80055da <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80d7 	beq.w	80055da <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	461a      	mov	r2, r3
 800543a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543e:	6093      	str	r3, [r2, #8]
 8005440:	e0cb      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d009      	beq.n	8005460 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	461a      	mov	r2, r3
 800545a:	2320      	movs	r3, #32
 800545c:	6093      	str	r3, [r2, #8]
 800545e:	e0bc      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	f040 80b7 	bne.w	80055da <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4a5d      	ldr	r2, [pc, #372]	; (80055e4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d90f      	bls.n	8005494 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	461a      	mov	r2, r3
 800548c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005490:	6093      	str	r3, [r2, #8]
 8005492:	e0a2      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80054a6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	0159      	lsls	r1, r3, #5
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	440b      	add	r3, r1
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80054ba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4403      	add	r3, r0
 80054ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80054ce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	4613      	mov	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4403      	add	r3, r0
 80054f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4419      	add	r1, r3
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	4613      	mov	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4403      	add	r3, r0
 8005508:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800550c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d114      	bne.n	800553e <PCD_EP_OutXfrComplete_int+0x16a>
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d108      	bne.n	800553e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005536:	461a      	mov	r2, r3
 8005538:	2101      	movs	r1, #1
 800553a:	f002 f99d 	bl	8007878 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f003 fe7f 	bl	8009248 <HAL_PCD_DataOutStageCallback>
 800554a:	e046      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a26      	ldr	r2, [pc, #152]	; (80055e8 <PCD_EP_OutXfrComplete_int+0x214>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d124      	bne.n	800559e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	461a      	mov	r2, r3
 800556c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005570:	6093      	str	r3, [r2, #8]
 8005572:	e032      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d008      	beq.n	8005590 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	461a      	mov	r2, r3
 800558c:	2320      	movs	r3, #32
 800558e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f003 fe56 	bl	8009248 <HAL_PCD_DataOutStageCallback>
 800559c:	e01d      	b.n	80055da <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d114      	bne.n	80055ce <PCD_EP_OutXfrComplete_int+0x1fa>
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d108      	bne.n	80055ce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055c6:	461a      	mov	r2, r3
 80055c8:	2100      	movs	r1, #0
 80055ca:	f002 f955 	bl	8007878 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f003 fe37 	bl	8009248 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	4f54300a 	.word	0x4f54300a
 80055e8:	4f54310a 	.word	0x4f54310a

080055ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	333c      	adds	r3, #60	; 0x3c
 8005604:	3304      	adds	r3, #4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4a15      	ldr	r2, [pc, #84]	; (8005674 <PCD_EP_OutSetupPacket_int+0x88>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d90e      	bls.n	8005640 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005638:	461a      	mov	r2, r3
 800563a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800563e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f003 fdef 	bl	8009224 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a0a      	ldr	r2, [pc, #40]	; (8005674 <PCD_EP_OutSetupPacket_int+0x88>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d90c      	bls.n	8005668 <PCD_EP_OutSetupPacket_int+0x7c>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d108      	bne.n	8005668 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005660:	461a      	mov	r2, r3
 8005662:	2101      	movs	r1, #1
 8005664:	f002 f908 	bl	8007878 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	4f54300a 	.word	0x4f54300a

08005678 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	70fb      	strb	r3, [r7, #3]
 8005684:	4613      	mov	r3, r2
 8005686:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d107      	bne.n	80056a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005696:	883b      	ldrh	r3, [r7, #0]
 8005698:	0419      	lsls	r1, r3, #16
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28
 80056a4:	e028      	b.n	80056f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	0c1b      	lsrs	r3, r3, #16
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4413      	add	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056b4:	2300      	movs	r3, #0
 80056b6:	73fb      	strb	r3, [r7, #15]
 80056b8:	e00d      	b.n	80056d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	3340      	adds	r3, #64	; 0x40
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	0c1b      	lsrs	r3, r3, #16
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	4413      	add	r3, r2
 80056ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	3301      	adds	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
 80056d6:	7bfa      	ldrb	r2, [r7, #15]
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	3b01      	subs	r3, #1
 80056dc:	429a      	cmp	r2, r3
 80056de:	d3ec      	bcc.n	80056ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80056e0:	883b      	ldrh	r3, [r7, #0]
 80056e2:	0418      	lsls	r0, r3, #16
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6819      	ldr	r1, [r3, #0]
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	4302      	orrs	r2, r0
 80056f0:	3340      	adds	r3, #64	; 0x40
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e264      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d075      	beq.n	800584a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800575e:	4ba3      	ldr	r3, [pc, #652]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b04      	cmp	r3, #4
 8005768:	d00c      	beq.n	8005784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800576a:	4ba0      	ldr	r3, [pc, #640]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005772:	2b08      	cmp	r3, #8
 8005774:	d112      	bne.n	800579c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005776:	4b9d      	ldr	r3, [pc, #628]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800577e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005782:	d10b      	bne.n	800579c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005784:	4b99      	ldr	r3, [pc, #612]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d05b      	beq.n	8005848 <HAL_RCC_OscConfig+0x108>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d157      	bne.n	8005848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e23f      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a4:	d106      	bne.n	80057b4 <HAL_RCC_OscConfig+0x74>
 80057a6:	4b91      	ldr	r3, [pc, #580]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a90      	ldr	r2, [pc, #576]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e01d      	b.n	80057f0 <HAL_RCC_OscConfig+0xb0>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057bc:	d10c      	bne.n	80057d8 <HAL_RCC_OscConfig+0x98>
 80057be:	4b8b      	ldr	r3, [pc, #556]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a8a      	ldr	r2, [pc, #552]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80057c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	4b88      	ldr	r3, [pc, #544]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a87      	ldr	r2, [pc, #540]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e00b      	b.n	80057f0 <HAL_RCC_OscConfig+0xb0>
 80057d8:	4b84      	ldr	r3, [pc, #528]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a83      	ldr	r2, [pc, #524]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80057de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	4b81      	ldr	r3, [pc, #516]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a80      	ldr	r2, [pc, #512]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80057ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d013      	beq.n	8005820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f8:	f7fd f940 	bl	8002a7c <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005800:	f7fd f93c 	bl	8002a7c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b64      	cmp	r3, #100	; 0x64
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e204      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005812:	4b76      	ldr	r3, [pc, #472]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0xc0>
 800581e:	e014      	b.n	800584a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005820:	f7fd f92c 	bl	8002a7c <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005828:	f7fd f928 	bl	8002a7c <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	; 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e1f0      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800583a:	4b6c      	ldr	r3, [pc, #432]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f0      	bne.n	8005828 <HAL_RCC_OscConfig+0xe8>
 8005846:	e000      	b.n	800584a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d063      	beq.n	800591e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005856:	4b65      	ldr	r3, [pc, #404]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005862:	4b62      	ldr	r3, [pc, #392]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800586a:	2b08      	cmp	r3, #8
 800586c:	d11c      	bne.n	80058a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800586e:	4b5f      	ldr	r3, [pc, #380]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d116      	bne.n	80058a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587a:	4b5c      	ldr	r3, [pc, #368]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <HAL_RCC_OscConfig+0x152>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d001      	beq.n	8005892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e1c4      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005892:	4b56      	ldr	r3, [pc, #344]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4952      	ldr	r1, [pc, #328]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a6:	e03a      	b.n	800591e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d020      	beq.n	80058f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b0:	4b4f      	ldr	r3, [pc, #316]	; (80059f0 <HAL_RCC_OscConfig+0x2b0>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fd f8e1 	bl	8002a7c <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058be:	f7fd f8dd 	bl	8002a7c <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e1a5      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d0:	4b46      	ldr	r3, [pc, #280]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058dc:	4b43      	ldr	r3, [pc, #268]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4940      	ldr	r1, [pc, #256]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	600b      	str	r3, [r1, #0]
 80058f0:	e015      	b.n	800591e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058f2:	4b3f      	ldr	r3, [pc, #252]	; (80059f0 <HAL_RCC_OscConfig+0x2b0>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fd f8c0 	bl	8002a7c <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005900:	f7fd f8bc 	bl	8002a7c <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e184      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005912:	4b36      	ldr	r3, [pc, #216]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d030      	beq.n	800598c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d016      	beq.n	8005960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005932:	4b30      	ldr	r3, [pc, #192]	; (80059f4 <HAL_RCC_OscConfig+0x2b4>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005938:	f7fd f8a0 	bl	8002a7c <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005940:	f7fd f89c 	bl	8002a7c <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e164      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005952:	4b26      	ldr	r3, [pc, #152]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 8005954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f0      	beq.n	8005940 <HAL_RCC_OscConfig+0x200>
 800595e:	e015      	b.n	800598c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005960:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <HAL_RCC_OscConfig+0x2b4>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005966:	f7fd f889 	bl	8002a7c <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800596e:	f7fd f885 	bl	8002a7c <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e14d      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005980:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 8005982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f0      	bne.n	800596e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80a0 	beq.w	8005ada <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800599a:	2300      	movs	r3, #0
 800599c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800599e:	4b13      	ldr	r3, [pc, #76]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10f      	bne.n	80059ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	4a0e      	ldr	r2, [pc, #56]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80059b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b8:	6413      	str	r3, [r2, #64]	; 0x40
 80059ba:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c2:	60bb      	str	r3, [r7, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059c6:	2301      	movs	r3, #1
 80059c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <HAL_RCC_OscConfig+0x2b8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d121      	bne.n	8005a1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059d6:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <HAL_RCC_OscConfig+0x2b8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a07      	ldr	r2, [pc, #28]	; (80059f8 <HAL_RCC_OscConfig+0x2b8>)
 80059dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059e2:	f7fd f84b 	bl	8002a7c <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e8:	e011      	b.n	8005a0e <HAL_RCC_OscConfig+0x2ce>
 80059ea:	bf00      	nop
 80059ec:	40023800 	.word	0x40023800
 80059f0:	42470000 	.word	0x42470000
 80059f4:	42470e80 	.word	0x42470e80
 80059f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059fc:	f7fd f83e 	bl	8002a7c <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e106      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0e:	4b85      	ldr	r3, [pc, #532]	; (8005c24 <HAL_RCC_OscConfig+0x4e4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f0      	beq.n	80059fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d106      	bne.n	8005a30 <HAL_RCC_OscConfig+0x2f0>
 8005a22:	4b81      	ldr	r3, [pc, #516]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	4a80      	ldr	r2, [pc, #512]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005a28:	f043 0301 	orr.w	r3, r3, #1
 8005a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a2e:	e01c      	b.n	8005a6a <HAL_RCC_OscConfig+0x32a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2b05      	cmp	r3, #5
 8005a36:	d10c      	bne.n	8005a52 <HAL_RCC_OscConfig+0x312>
 8005a38:	4b7b      	ldr	r3, [pc, #492]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3c:	4a7a      	ldr	r2, [pc, #488]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005a3e:	f043 0304 	orr.w	r3, r3, #4
 8005a42:	6713      	str	r3, [r2, #112]	; 0x70
 8005a44:	4b78      	ldr	r3, [pc, #480]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a48:	4a77      	ldr	r2, [pc, #476]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005a4a:	f043 0301 	orr.w	r3, r3, #1
 8005a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a50:	e00b      	b.n	8005a6a <HAL_RCC_OscConfig+0x32a>
 8005a52:	4b75      	ldr	r3, [pc, #468]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a56:	4a74      	ldr	r2, [pc, #464]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005a58:	f023 0301 	bic.w	r3, r3, #1
 8005a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a5e:	4b72      	ldr	r3, [pc, #456]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a62:	4a71      	ldr	r2, [pc, #452]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005a64:	f023 0304 	bic.w	r3, r3, #4
 8005a68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d015      	beq.n	8005a9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a72:	f7fd f803 	bl	8002a7c <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a78:	e00a      	b.n	8005a90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a7a:	f7fc ffff 	bl	8002a7c <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e0c5      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a90:	4b65      	ldr	r3, [pc, #404]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0ee      	beq.n	8005a7a <HAL_RCC_OscConfig+0x33a>
 8005a9c:	e014      	b.n	8005ac8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9e:	f7fc ffed 	bl	8002a7c <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa4:	e00a      	b.n	8005abc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aa6:	f7fc ffe9 	bl	8002a7c <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e0af      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005abc:	4b5a      	ldr	r3, [pc, #360]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1ee      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d105      	bne.n	8005ada <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ace:	4b56      	ldr	r3, [pc, #344]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	4a55      	ldr	r2, [pc, #340]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 809b 	beq.w	8005c1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ae4:	4b50      	ldr	r3, [pc, #320]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 030c 	and.w	r3, r3, #12
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d05c      	beq.n	8005baa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d141      	bne.n	8005b7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af8:	4b4c      	ldr	r3, [pc, #304]	; (8005c2c <HAL_RCC_OscConfig+0x4ec>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afe:	f7fc ffbd 	bl	8002a7c <HAL_GetTick>
 8005b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b04:	e008      	b.n	8005b18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b06:	f7fc ffb9 	bl	8002a7c <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e081      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b18:	4b43      	ldr	r3, [pc, #268]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1f0      	bne.n	8005b06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	019b      	lsls	r3, r3, #6
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	085b      	lsrs	r3, r3, #1
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	041b      	lsls	r3, r3, #16
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	061b      	lsls	r3, r3, #24
 8005b48:	4937      	ldr	r1, [pc, #220]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b4e:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <HAL_RCC_OscConfig+0x4ec>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b54:	f7fc ff92 	bl	8002a7c <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5c:	f7fc ff8e 	bl	8002a7c <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e056      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b6e:	4b2e      	ldr	r3, [pc, #184]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCC_OscConfig+0x41c>
 8005b7a:	e04e      	b.n	8005c1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7c:	4b2b      	ldr	r3, [pc, #172]	; (8005c2c <HAL_RCC_OscConfig+0x4ec>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b82:	f7fc ff7b 	bl	8002a7c <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b8a:	f7fc ff77 	bl	8002a7c <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e03f      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9c:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1f0      	bne.n	8005b8a <HAL_RCC_OscConfig+0x44a>
 8005ba8:	e037      	b.n	8005c1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e032      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bb6:	4b1c      	ldr	r3, [pc, #112]	; (8005c28 <HAL_RCC_OscConfig+0x4e8>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d028      	beq.n	8005c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d121      	bne.n	8005c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d11a      	bne.n	8005c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005be6:	4013      	ands	r3, r2
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d111      	bne.n	8005c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfc:	085b      	lsrs	r3, r3, #1
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d107      	bne.n	8005c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d001      	beq.n	8005c1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40007000 	.word	0x40007000
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	42470060 	.word	0x42470060

08005c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0cc      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c44:	4b68      	ldr	r3, [pc, #416]	; (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d90c      	bls.n	8005c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c52:	4b65      	ldr	r3, [pc, #404]	; (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b63      	ldr	r3, [pc, #396]	; (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0b8      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d020      	beq.n	8005cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	4a58      	ldr	r2, [pc, #352]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c9c:	4b53      	ldr	r3, [pc, #332]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	4a52      	ldr	r2, [pc, #328]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca8:	4b50      	ldr	r3, [pc, #320]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	494d      	ldr	r1, [pc, #308]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d044      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d107      	bne.n	8005cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cce:	4b47      	ldr	r3, [pc, #284]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d119      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e07f      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d003      	beq.n	8005cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d107      	bne.n	8005cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cee:	4b3f      	ldr	r3, [pc, #252]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e06f      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cfe:	4b3b      	ldr	r3, [pc, #236]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e067      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d0e:	4b37      	ldr	r3, [pc, #220]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f023 0203 	bic.w	r2, r3, #3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4934      	ldr	r1, [pc, #208]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d20:	f7fc feac 	bl	8002a7c <HAL_GetTick>
 8005d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d26:	e00a      	b.n	8005d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d28:	f7fc fea8 	bl	8002a7c <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e04f      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3e:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 020c 	and.w	r2, r3, #12
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d1eb      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d50:	4b25      	ldr	r3, [pc, #148]	; (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d20c      	bcs.n	8005d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5e:	4b22      	ldr	r3, [pc, #136]	; (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d66:	4b20      	ldr	r3, [pc, #128]	; (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e032      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d008      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d84:	4b19      	ldr	r3, [pc, #100]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4916      	ldr	r1, [pc, #88]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005da2:	4b12      	ldr	r3, [pc, #72]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	490e      	ldr	r1, [pc, #56]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005db6:	f000 f821 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	091b      	lsrs	r3, r3, #4
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	490a      	ldr	r1, [pc, #40]	; (8005df0 <HAL_RCC_ClockConfig+0x1c0>)
 8005dc8:	5ccb      	ldrb	r3, [r1, r3]
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fc fe0c 	bl	80029f4 <HAL_InitTick>

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40023c00 	.word	0x40023c00
 8005dec:	40023800 	.word	0x40023800
 8005df0:	0800bd98 	.word	0x0800bd98
 8005df4:	20000048 	.word	0x20000048
 8005df8:	2000004c 	.word	0x2000004c

08005dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dfc:	b5b0      	push	{r4, r5, r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e02:	2100      	movs	r1, #0
 8005e04:	6079      	str	r1, [r7, #4]
 8005e06:	2100      	movs	r1, #0
 8005e08:	60f9      	str	r1, [r7, #12]
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e0e:	2100      	movs	r1, #0
 8005e10:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e12:	4952      	ldr	r1, [pc, #328]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8005e14:	6889      	ldr	r1, [r1, #8]
 8005e16:	f001 010c 	and.w	r1, r1, #12
 8005e1a:	2908      	cmp	r1, #8
 8005e1c:	d00d      	beq.n	8005e3a <HAL_RCC_GetSysClockFreq+0x3e>
 8005e1e:	2908      	cmp	r1, #8
 8005e20:	f200 8094 	bhi.w	8005f4c <HAL_RCC_GetSysClockFreq+0x150>
 8005e24:	2900      	cmp	r1, #0
 8005e26:	d002      	beq.n	8005e2e <HAL_RCC_GetSysClockFreq+0x32>
 8005e28:	2904      	cmp	r1, #4
 8005e2a:	d003      	beq.n	8005e34 <HAL_RCC_GetSysClockFreq+0x38>
 8005e2c:	e08e      	b.n	8005f4c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e2e:	4b4c      	ldr	r3, [pc, #304]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x164>)
 8005e30:	60bb      	str	r3, [r7, #8]
       break;
 8005e32:	e08e      	b.n	8005f52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e34:	4b4b      	ldr	r3, [pc, #300]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e36:	60bb      	str	r3, [r7, #8]
      break;
 8005e38:	e08b      	b.n	8005f52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e3a:	4948      	ldr	r1, [pc, #288]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8005e3c:	6849      	ldr	r1, [r1, #4]
 8005e3e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005e42:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e44:	4945      	ldr	r1, [pc, #276]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8005e46:	6849      	ldr	r1, [r1, #4]
 8005e48:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005e4c:	2900      	cmp	r1, #0
 8005e4e:	d024      	beq.n	8005e9a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e50:	4942      	ldr	r1, [pc, #264]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8005e52:	6849      	ldr	r1, [r1, #4]
 8005e54:	0989      	lsrs	r1, r1, #6
 8005e56:	4608      	mov	r0, r1
 8005e58:	f04f 0100 	mov.w	r1, #0
 8005e5c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005e60:	f04f 0500 	mov.w	r5, #0
 8005e64:	ea00 0204 	and.w	r2, r0, r4
 8005e68:	ea01 0305 	and.w	r3, r1, r5
 8005e6c:	493d      	ldr	r1, [pc, #244]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e6e:	fb01 f003 	mul.w	r0, r1, r3
 8005e72:	2100      	movs	r1, #0
 8005e74:	fb01 f102 	mul.w	r1, r1, r2
 8005e78:	1844      	adds	r4, r0, r1
 8005e7a:	493a      	ldr	r1, [pc, #232]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e7c:	fba2 0101 	umull	r0, r1, r2, r1
 8005e80:	1863      	adds	r3, r4, r1
 8005e82:	4619      	mov	r1, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	f7fa fec6 	bl	8000c1c <__aeabi_uldivmod>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4613      	mov	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e04a      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e9a:	4b30      	ldr	r3, [pc, #192]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	099b      	lsrs	r3, r3, #6
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005eaa:	f04f 0100 	mov.w	r1, #0
 8005eae:	ea02 0400 	and.w	r4, r2, r0
 8005eb2:	ea03 0501 	and.w	r5, r3, r1
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	014b      	lsls	r3, r1, #5
 8005ec4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ec8:	0142      	lsls	r2, r0, #5
 8005eca:	4610      	mov	r0, r2
 8005ecc:	4619      	mov	r1, r3
 8005ece:	1b00      	subs	r0, r0, r4
 8005ed0:	eb61 0105 	sbc.w	r1, r1, r5
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	018b      	lsls	r3, r1, #6
 8005ede:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ee2:	0182      	lsls	r2, r0, #6
 8005ee4:	1a12      	subs	r2, r2, r0
 8005ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8005eea:	f04f 0000 	mov.w	r0, #0
 8005eee:	f04f 0100 	mov.w	r1, #0
 8005ef2:	00d9      	lsls	r1, r3, #3
 8005ef4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ef8:	00d0      	lsls	r0, r2, #3
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	1912      	adds	r2, r2, r4
 8005f00:	eb45 0303 	adc.w	r3, r5, r3
 8005f04:	f04f 0000 	mov.w	r0, #0
 8005f08:	f04f 0100 	mov.w	r1, #0
 8005f0c:	0299      	lsls	r1, r3, #10
 8005f0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f12:	0290      	lsls	r0, r2, #10
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	f7fa fe7a 	bl	8000c1c <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f30:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	0c1b      	lsrs	r3, r3, #16
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f48:	60bb      	str	r3, [r7, #8]
      break;
 8005f4a:	e002      	b.n	8005f52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f4c:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x164>)
 8005f4e:	60bb      	str	r3, [r7, #8]
      break;
 8005f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f52:	68bb      	ldr	r3, [r7, #8]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	00f42400 	.word	0x00f42400
 8005f64:	017d7840 	.word	0x017d7840

08005f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f6c:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20000048 	.word	0x20000048

08005f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f84:	f7ff fff0 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	0a9b      	lsrs	r3, r3, #10
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	4903      	ldr	r1, [pc, #12]	; (8005fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f96:	5ccb      	ldrb	r3, [r1, r3]
 8005f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	0800bda8 	.word	0x0800bda8

08005fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d105      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d038      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fd0:	4b68      	ldr	r3, [pc, #416]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fd6:	f7fc fd51 	bl	8002a7c <HAL_GetTick>
 8005fda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005fde:	f7fc fd4d 	bl	8002a7c <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e0bd      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ff0:	4b61      	ldr	r3, [pc, #388]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f0      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	019b      	lsls	r3, r3, #6
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	071b      	lsls	r3, r3, #28
 800600e:	495a      	ldr	r1, [pc, #360]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006016:	4b57      	ldr	r3, [pc, #348]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006018:	2201      	movs	r2, #1
 800601a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800601c:	f7fc fd2e 	bl	8002a7c <HAL_GetTick>
 8006020:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006024:	f7fc fd2a 	bl	8002a7c <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e09a      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006036:	4b50      	ldr	r3, [pc, #320]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f0      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 8083 	beq.w	8006156 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	4b48      	ldr	r3, [pc, #288]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	4a47      	ldr	r2, [pc, #284]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800605e:	6413      	str	r3, [r2, #64]	; 0x40
 8006060:	4b45      	ldr	r3, [pc, #276]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800606c:	4b43      	ldr	r3, [pc, #268]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a42      	ldr	r2, [pc, #264]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006076:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006078:	f7fc fd00 	bl	8002a7c <HAL_GetTick>
 800607c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006080:	f7fc fcfc 	bl	8002a7c <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e06c      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006092:	4b3a      	ldr	r3, [pc, #232]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800609e:	4b36      	ldr	r3, [pc, #216]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d02f      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d028      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060bc:	4b2e      	ldr	r3, [pc, #184]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060c6:	4b2e      	ldr	r3, [pc, #184]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060cc:	4b2c      	ldr	r3, [pc, #176]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80060d2:	4a29      	ldr	r2, [pc, #164]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060d8:	4b27      	ldr	r3, [pc, #156]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d114      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80060e4:	f7fc fcca 	bl	8002a7c <HAL_GetTick>
 80060e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ea:	e00a      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ec:	f7fc fcc6 	bl	8002a7c <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d901      	bls.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e034      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006102:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ee      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800611a:	d10d      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800611c:	4b16      	ldr	r3, [pc, #88]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800612c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006130:	4911      	ldr	r1, [pc, #68]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
 8006136:	e005      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006138:	4b0f      	ldr	r3, [pc, #60]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	4a0e      	ldr	r2, [pc, #56]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006142:	6093      	str	r3, [r2, #8]
 8006144:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006146:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006150:	4909      	ldr	r1, [pc, #36]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006152:	4313      	orrs	r3, r2
 8006154:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	7d1a      	ldrb	r2, [r3, #20]
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006168:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	42470068 	.word	0x42470068
 8006178:	40023800 	.word	0x40023800
 800617c:	40007000 	.word	0x40007000
 8006180:	42470e40 	.word	0x42470e40
 8006184:	424711e0 	.word	0x424711e0

08006188 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e083      	b.n	80062a2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	7f5b      	ldrb	r3, [r3, #29]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fc fa12 	bl	80025d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	22ca      	movs	r2, #202	; 0xca
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2253      	movs	r2, #83	; 0x53
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f897 	bl	80062fa <RTC_EnterInitMode>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d008      	beq.n	80061e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	22ff      	movs	r2, #255	; 0xff
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2204      	movs	r2, #4
 80061de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e05e      	b.n	80062a2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6899      	ldr	r1, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	68d2      	ldr	r2, [r2, #12]
 800621e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6919      	ldr	r1, [r3, #16]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	041a      	lsls	r2, r3, #16
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006242:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10e      	bne.n	8006270 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f829 	bl	80062aa <HAL_RTC_WaitForSynchro>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d008      	beq.n	8006270 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	22ff      	movs	r2, #255	; 0xff
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2204      	movs	r2, #4
 800626a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e018      	b.n	80062a2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800627e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	22ff      	movs	r2, #255	; 0xff
 8006298:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80062a0:	2300      	movs	r3, #0
  }
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062c6:	f7fc fbd9 	bl	8002a7c <HAL_GetTick>
 80062ca:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80062cc:	e009      	b.n	80062e2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062ce:	f7fc fbd5 	bl	8002a7c <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062dc:	d901      	bls.n	80062e2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e007      	b.n	80062f2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0ee      	beq.n	80062ce <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d119      	bne.n	8006348 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f04f 32ff 	mov.w	r2, #4294967295
 800631c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800631e:	f7fc fbad 	bl	8002a7c <HAL_GetTick>
 8006322:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006324:	e009      	b.n	800633a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006326:	f7fc fba9 	bl	8002a7c <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006334:	d901      	bls.n	800633a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e007      	b.n	800634a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0ee      	beq.n	8006326 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006352:	b084      	sub	sp, #16
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	f107 001c 	add.w	r0, r7, #28
 8006360:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	2b01      	cmp	r3, #1
 8006368:	d122      	bne.n	80063b0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800637e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d105      	bne.n	80063a4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 fac5 	bl	8007934 <USB_CoreReset>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73fb      	strb	r3, [r7, #15]
 80063ae:	e01a      	b.n	80063e6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fab9 	bl	8007934 <USB_CoreReset>
 80063c2:	4603      	mov	r3, r0
 80063c4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d106      	bne.n	80063da <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
 80063d8:	e005      	b.n	80063e6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d10b      	bne.n	8006404 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f043 0206 	orr.w	r2, r3, #6
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006410:	b004      	add	sp, #16
 8006412:	4770      	bx	lr

08006414 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4613      	mov	r3, r2
 8006420:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d165      	bne.n	80064f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4a41      	ldr	r2, [pc, #260]	; (8006530 <USB_SetTurnaroundTime+0x11c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d906      	bls.n	800643e <USB_SetTurnaroundTime+0x2a>
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	4a40      	ldr	r2, [pc, #256]	; (8006534 <USB_SetTurnaroundTime+0x120>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d202      	bcs.n	800643e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006438:	230f      	movs	r3, #15
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	e062      	b.n	8006504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	4a3c      	ldr	r2, [pc, #240]	; (8006534 <USB_SetTurnaroundTime+0x120>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d306      	bcc.n	8006454 <USB_SetTurnaroundTime+0x40>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4a3b      	ldr	r2, [pc, #236]	; (8006538 <USB_SetTurnaroundTime+0x124>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d202      	bcs.n	8006454 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800644e:	230e      	movs	r3, #14
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	e057      	b.n	8006504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4a38      	ldr	r2, [pc, #224]	; (8006538 <USB_SetTurnaroundTime+0x124>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d306      	bcc.n	800646a <USB_SetTurnaroundTime+0x56>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4a37      	ldr	r2, [pc, #220]	; (800653c <USB_SetTurnaroundTime+0x128>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d202      	bcs.n	800646a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006464:	230d      	movs	r3, #13
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	e04c      	b.n	8006504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4a33      	ldr	r2, [pc, #204]	; (800653c <USB_SetTurnaroundTime+0x128>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d306      	bcc.n	8006480 <USB_SetTurnaroundTime+0x6c>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4a32      	ldr	r2, [pc, #200]	; (8006540 <USB_SetTurnaroundTime+0x12c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d802      	bhi.n	8006480 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800647a:	230c      	movs	r3, #12
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e041      	b.n	8006504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4a2f      	ldr	r2, [pc, #188]	; (8006540 <USB_SetTurnaroundTime+0x12c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d906      	bls.n	8006496 <USB_SetTurnaroundTime+0x82>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4a2e      	ldr	r2, [pc, #184]	; (8006544 <USB_SetTurnaroundTime+0x130>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d802      	bhi.n	8006496 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006490:	230b      	movs	r3, #11
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	e036      	b.n	8006504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	4a2a      	ldr	r2, [pc, #168]	; (8006544 <USB_SetTurnaroundTime+0x130>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d906      	bls.n	80064ac <USB_SetTurnaroundTime+0x98>
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4a29      	ldr	r2, [pc, #164]	; (8006548 <USB_SetTurnaroundTime+0x134>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d802      	bhi.n	80064ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064a6:	230a      	movs	r3, #10
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	e02b      	b.n	8006504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4a26      	ldr	r2, [pc, #152]	; (8006548 <USB_SetTurnaroundTime+0x134>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d906      	bls.n	80064c2 <USB_SetTurnaroundTime+0xae>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4a25      	ldr	r2, [pc, #148]	; (800654c <USB_SetTurnaroundTime+0x138>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d202      	bcs.n	80064c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064bc:	2309      	movs	r3, #9
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e020      	b.n	8006504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4a21      	ldr	r2, [pc, #132]	; (800654c <USB_SetTurnaroundTime+0x138>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d306      	bcc.n	80064d8 <USB_SetTurnaroundTime+0xc4>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	4a20      	ldr	r2, [pc, #128]	; (8006550 <USB_SetTurnaroundTime+0x13c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d802      	bhi.n	80064d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064d2:	2308      	movs	r3, #8
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e015      	b.n	8006504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4a1d      	ldr	r2, [pc, #116]	; (8006550 <USB_SetTurnaroundTime+0x13c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d906      	bls.n	80064ee <USB_SetTurnaroundTime+0xda>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <USB_SetTurnaroundTime+0x140>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d202      	bcs.n	80064ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80064e8:	2307      	movs	r3, #7
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	e00a      	b.n	8006504 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80064ee:	2306      	movs	r3, #6
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	e007      	b.n	8006504 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80064fa:	2309      	movs	r3, #9
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e001      	b.n	8006504 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006500:	2309      	movs	r3, #9
 8006502:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	029b      	lsls	r3, r3, #10
 8006518:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800651c:	431a      	orrs	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	00d8acbf 	.word	0x00d8acbf
 8006534:	00e4e1c0 	.word	0x00e4e1c0
 8006538:	00f42400 	.word	0x00f42400
 800653c:	01067380 	.word	0x01067380
 8006540:	011a499f 	.word	0x011a499f
 8006544:	01312cff 	.word	0x01312cff
 8006548:	014ca43f 	.word	0x014ca43f
 800654c:	016e3600 	.word	0x016e3600
 8006550:	01a6ab1f 	.word	0x01a6ab1f
 8006554:	01e84800 	.word	0x01e84800

08006558 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f043 0201 	orr.w	r2, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f023 0201 	bic.w	r2, r3, #1
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d106      	bne.n	80065c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60da      	str	r2, [r3, #12]
 80065c6:	e00b      	b.n	80065e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60da      	str	r2, [r3, #12]
 80065da:	e001      	b.n	80065e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e003      	b.n	80065e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80065e0:	2032      	movs	r0, #50	; 0x32
 80065e2:	f7fc fa57 	bl	8002a94 <HAL_Delay>

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065f0:	b084      	sub	sp, #16
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	e009      	b.n	8006624 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3340      	adds	r3, #64	; 0x40
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	2200      	movs	r2, #0
 800661c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	3301      	adds	r3, #1
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b0e      	cmp	r3, #14
 8006628:	d9f2      	bls.n	8006610 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800662a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662c:	2b00      	cmp	r3, #0
 800662e:	d11c      	bne.n	800666a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800663e:	f043 0302 	orr.w	r3, r3, #2
 8006642:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	639a      	str	r2, [r3, #56]	; 0x38
 8006668:	e00b      	b.n	8006682 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006688:	461a      	mov	r2, r3
 800668a:	2300      	movs	r3, #0
 800668c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006694:	4619      	mov	r1, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669c:	461a      	mov	r2, r3
 800669e:	680b      	ldr	r3, [r1, #0]
 80066a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d10c      	bne.n	80066c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d104      	bne.n	80066b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066ae:	2100      	movs	r1, #0
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f949 	bl	8006948 <USB_SetDevSpeed>
 80066b6:	e008      	b.n	80066ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066b8:	2101      	movs	r1, #1
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f944 	bl	8006948 <USB_SetDevSpeed>
 80066c0:	e003      	b.n	80066ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066c2:	2103      	movs	r1, #3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f93f 	bl	8006948 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066ca:	2110      	movs	r1, #16
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f8f3 	bl	80068b8 <USB_FlushTxFifo>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f911 	bl	8006904 <USB_FlushRxFifo>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f2:	461a      	mov	r2, r3
 80066f4:	2300      	movs	r3, #0
 80066f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fe:	461a      	mov	r2, r3
 8006700:	2300      	movs	r3, #0
 8006702:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670a:	461a      	mov	r2, r3
 800670c:	2300      	movs	r3, #0
 800670e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006710:	2300      	movs	r3, #0
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	e043      	b.n	800679e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800672c:	d118      	bne.n	8006760 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	461a      	mov	r2, r3
 8006742:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	e013      	b.n	8006772 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006756:	461a      	mov	r2, r3
 8006758:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	e008      	b.n	8006772 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676c:	461a      	mov	r2, r3
 800676e:	2300      	movs	r3, #0
 8006770:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677e:	461a      	mov	r2, r3
 8006780:	2300      	movs	r3, #0
 8006782:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006790:	461a      	mov	r2, r3
 8006792:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006796:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	3301      	adds	r3, #1
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d3b7      	bcc.n	8006716 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067a6:	2300      	movs	r3, #0
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	e043      	b.n	8006834 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067c2:	d118      	bne.n	80067f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	461a      	mov	r2, r3
 80067d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	e013      	b.n	8006808 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	461a      	mov	r2, r3
 80067ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	e008      	b.n	8006808 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006802:	461a      	mov	r2, r3
 8006804:	2300      	movs	r3, #0
 8006806:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006814:	461a      	mov	r2, r3
 8006816:	2300      	movs	r3, #0
 8006818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006826:	461a      	mov	r2, r3
 8006828:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800682c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	3301      	adds	r3, #1
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	429a      	cmp	r2, r3
 800683a:	d3b7      	bcc.n	80067ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800684a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800684e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800685c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	2b00      	cmp	r3, #0
 8006862:	d105      	bne.n	8006870 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f043 0210 	orr.w	r2, r3, #16
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <USB_DevInit+0x2c4>)
 8006876:	4313      	orrs	r3, r2
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800687c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f043 0208 	orr.w	r2, r3, #8
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800688e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d107      	bne.n	80068a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800689c:	f043 0304 	orr.w	r3, r3, #4
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068b0:	b004      	add	sp, #16
 80068b2:	4770      	bx	lr
 80068b4:	803c3800 	.word	0x803c3800

080068b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	019b      	lsls	r3, r3, #6
 80068ca:	f043 0220 	orr.w	r2, r3, #32
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3301      	adds	r3, #1
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4a09      	ldr	r2, [pc, #36]	; (8006900 <USB_FlushTxFifo+0x48>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d901      	bls.n	80068e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e006      	b.n	80068f2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f003 0320 	and.w	r3, r3, #32
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d0f0      	beq.n	80068d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	00030d40 	.word	0x00030d40

08006904 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2210      	movs	r2, #16
 8006914:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4a09      	ldr	r2, [pc, #36]	; (8006944 <USB_FlushRxFifo+0x40>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d901      	bls.n	8006928 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e006      	b.n	8006936 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b10      	cmp	r3, #16
 8006932:	d0f0      	beq.n	8006916 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	00030d40 	.word	0x00030d40

08006948 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	68f9      	ldr	r1, [r7, #12]
 8006964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006968:	4313      	orrs	r3, r2
 800696a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800697a:	b480      	push	{r7}
 800697c:	b087      	sub	sp, #28
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 0306 	and.w	r3, r3, #6
 8006992:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d102      	bne.n	80069a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]
 800699e:	e00a      	b.n	80069b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d002      	beq.n	80069ac <USB_GetDevSpeed+0x32>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b06      	cmp	r3, #6
 80069aa:	d102      	bne.n	80069b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80069ac:	2302      	movs	r3, #2
 80069ae:	75fb      	strb	r3, [r7, #23]
 80069b0:	e001      	b.n	80069b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80069b2:	230f      	movs	r3, #15
 80069b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d13a      	bne.n	8006a56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	2101      	movs	r1, #1
 80069f2:	fa01 f303 	lsl.w	r3, r1, r3
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	68f9      	ldr	r1, [r7, #12]
 80069fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069fe:	4313      	orrs	r3, r2
 8006a00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d155      	bne.n	8006ac4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	78db      	ldrb	r3, [r3, #3]
 8006a32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	059b      	lsls	r3, r3, #22
 8006a3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	e036      	b.n	8006ac4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5c:	69da      	ldr	r2, [r3, #28]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	2101      	movs	r1, #1
 8006a68:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6c:	041b      	lsls	r3, r3, #16
 8006a6e:	68f9      	ldr	r1, [r7, #12]
 8006a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a74:	4313      	orrs	r3, r2
 8006a76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d11a      	bne.n	8006ac4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	78db      	ldrb	r3, [r3, #3]
 8006aa8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	4313      	orrs	r3, r2
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
	...

08006ad4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	785b      	ldrb	r3, [r3, #1]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d161      	bne.n	8006bb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b06:	d11f      	bne.n	8006b48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	0151      	lsls	r1, r2, #5
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	440a      	add	r2, r1
 8006b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f003 030f 	and.w	r3, r3, #15
 8006b58:	2101      	movs	r1, #1
 8006b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	43db      	mvns	r3, r3
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b68:	4013      	ands	r3, r2
 8006b6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b72:	69da      	ldr	r2, [r3, #28]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	43db      	mvns	r3, r3
 8006b86:	68f9      	ldr	r1, [r7, #12]
 8006b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	0159      	lsls	r1, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	440b      	add	r3, r1
 8006ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006baa:	4619      	mov	r1, r3
 8006bac:	4b35      	ldr	r3, [pc, #212]	; (8006c84 <USB_DeactivateEndpoint+0x1b0>)
 8006bae:	4013      	ands	r3, r2
 8006bb0:	600b      	str	r3, [r1, #0]
 8006bb2:	e060      	b.n	8006c76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bca:	d11f      	bne.n	8006c0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	0151      	lsls	r1, r2, #5
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	440a      	add	r2, r1
 8006be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c22:	041b      	lsls	r3, r3, #16
 8006c24:	43db      	mvns	r3, r3
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f003 030f 	and.w	r3, r3, #15
 8006c40:	2101      	movs	r1, #1
 8006c42:	fa01 f303 	lsl.w	r3, r1, r3
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	43db      	mvns	r3, r3
 8006c4a:	68f9      	ldr	r1, [r7, #12]
 8006c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c50:	4013      	ands	r3, r2
 8006c52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	0159      	lsls	r1, r3, #5
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	440b      	add	r3, r1
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <USB_DeactivateEndpoint+0x1b4>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	ec337800 	.word	0xec337800
 8006c88:	eff37800 	.word	0xeff37800

08006c8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08a      	sub	sp, #40	; 0x28
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	785b      	ldrb	r3, [r3, #1]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	f040 815c 	bne.w	8006f66 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d132      	bne.n	8006d1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d14:	0cdb      	lsrs	r3, r3, #19
 8006d16:	04db      	lsls	r3, r3, #19
 8006d18:	6113      	str	r3, [r2, #16]
 8006d1a:	e074      	b.n	8006e06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	69fa      	ldr	r2, [r7, #28]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d36:	0cdb      	lsrs	r3, r3, #19
 8006d38:	04db      	lsls	r3, r3, #19
 8006d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6c:	691a      	ldr	r2, [r3, #16]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	6959      	ldr	r1, [r3, #20]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	440b      	add	r3, r1
 8006d78:	1e59      	subs	r1, r3, #1
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d82:	04d9      	lsls	r1, r3, #19
 8006d84:	4b9d      	ldr	r3, [pc, #628]	; (8006ffc <USB_EPStartXfer+0x370>)
 8006d86:	400b      	ands	r3, r1
 8006d88:	69b9      	ldr	r1, [r7, #24]
 8006d8a:	0148      	lsls	r0, r1, #5
 8006d8c:	69f9      	ldr	r1, [r7, #28]
 8006d8e:	4401      	add	r1, r0
 8006d90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d94:	4313      	orrs	r3, r2
 8006d96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da4:	691a      	ldr	r2, [r3, #16]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dae:	69b9      	ldr	r1, [r7, #24]
 8006db0:	0148      	lsls	r0, r1, #5
 8006db2:	69f9      	ldr	r1, [r7, #28]
 8006db4:	4401      	add	r1, r0
 8006db6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	78db      	ldrb	r3, [r3, #3]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d11f      	bne.n	8006e06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	0151      	lsls	r1, r2, #5
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	440a      	add	r2, r1
 8006ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006de4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d14b      	bne.n	8006ea4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e20:	461a      	mov	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	78db      	ldrb	r3, [r3, #3]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d128      	bne.n	8006e82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d110      	bne.n	8006e62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	e00f      	b.n	8006e82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	0151      	lsls	r1, r2, #5
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	440a      	add	r2, r1
 8006e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	e12f      	b.n	8007104 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	0151      	lsls	r1, r2, #5
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	440a      	add	r2, r1
 8006eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ebe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ec2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	78db      	ldrb	r3, [r3, #3]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d015      	beq.n	8006ef8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8117 	beq.w	8007104 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eec:	69f9      	ldr	r1, [r7, #28]
 8006eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	634b      	str	r3, [r1, #52]	; 0x34
 8006ef6:	e105      	b.n	8007104 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d110      	bne.n	8006f2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	0151      	lsls	r1, r2, #5
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	440a      	add	r2, r1
 8006f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	e00f      	b.n	8006f4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	0151      	lsls	r1, r2, #5
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	440a      	add	r2, r1
 8006f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	68d9      	ldr	r1, [r3, #12]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	b298      	uxth	r0, r3
 8006f58:	79fb      	ldrb	r3, [r7, #7]
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 fa2b 	bl	80073ba <USB_WritePacket>
 8006f64:	e0ce      	b.n	8007104 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	0151      	lsls	r1, r2, #5
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f80:	0cdb      	lsrs	r3, r3, #19
 8006f82:	04db      	lsls	r3, r3, #19
 8006f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	0151      	lsls	r1, r2, #5
 8006f98:	69fa      	ldr	r2, [r7, #28]
 8006f9a:	440a      	add	r2, r1
 8006f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fa8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d126      	bne.n	8007000 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc8:	69b9      	ldr	r1, [r7, #24]
 8006fca:	0148      	lsls	r0, r1, #5
 8006fcc:	69f9      	ldr	r1, [r7, #28]
 8006fce:	4401      	add	r1, r0
 8006fd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ff6:	6113      	str	r3, [r2, #16]
 8006ff8:	e036      	b.n	8007068 <USB_EPStartXfer+0x3dc>
 8006ffa:	bf00      	nop
 8006ffc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	695a      	ldr	r2, [r3, #20]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	4413      	add	r3, r2
 800700a:	1e5a      	subs	r2, r3, #1
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	fbb2 f3f3 	udiv	r3, r2, r3
 8007014:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007022:	691a      	ldr	r2, [r3, #16]
 8007024:	8afb      	ldrh	r3, [r7, #22]
 8007026:	04d9      	lsls	r1, r3, #19
 8007028:	4b39      	ldr	r3, [pc, #228]	; (8007110 <USB_EPStartXfer+0x484>)
 800702a:	400b      	ands	r3, r1
 800702c:	69b9      	ldr	r1, [r7, #24]
 800702e:	0148      	lsls	r0, r1, #5
 8007030:	69f9      	ldr	r1, [r7, #28]
 8007032:	4401      	add	r1, r0
 8007034:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007038:	4313      	orrs	r3, r2
 800703a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	8af9      	ldrh	r1, [r7, #22]
 8007050:	fb01 f303 	mul.w	r3, r1, r3
 8007054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007058:	69b9      	ldr	r1, [r7, #24]
 800705a:	0148      	lsls	r0, r1, #5
 800705c:	69f9      	ldr	r1, [r7, #28]
 800705e:	4401      	add	r1, r0
 8007060:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007064:	4313      	orrs	r3, r2
 8007066:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d10d      	bne.n	800708a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d009      	beq.n	800708a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	68d9      	ldr	r1, [r3, #12]
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007086:	460a      	mov	r2, r1
 8007088:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	78db      	ldrb	r3, [r3, #3]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d128      	bne.n	80070e4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d110      	bne.n	80070c4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	e00f      	b.n	80070e4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	0151      	lsls	r1, r2, #5
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	440a      	add	r2, r1
 80070da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007102:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	1ff80000 	.word	0x1ff80000

08007114 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	785b      	ldrb	r3, [r3, #1]
 8007130:	2b01      	cmp	r3, #1
 8007132:	f040 80cd 	bne.w	80072d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d132      	bne.n	80071a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	0151      	lsls	r1, r2, #5
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	440a      	add	r2, r1
 8007154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007158:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800715c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007160:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	0151      	lsls	r1, r2, #5
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	440a      	add	r2, r1
 8007178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007180:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719c:	0cdb      	lsrs	r3, r3, #19
 800719e:	04db      	lsls	r3, r3, #19
 80071a0:	6113      	str	r3, [r2, #16]
 80071a2:	e04e      	b.n	8007242 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071be:	0cdb      	lsrs	r3, r3, #19
 80071c0:	04db      	lsls	r3, r3, #19
 80071c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	695a      	ldr	r2, [r3, #20]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d903      	bls.n	80071fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800721a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007228:	691a      	ldr	r2, [r3, #16]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007232:	6939      	ldr	r1, [r7, #16]
 8007234:	0148      	lsls	r0, r1, #5
 8007236:	6979      	ldr	r1, [r7, #20]
 8007238:	4401      	add	r1, r0
 800723a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800723e:	4313      	orrs	r3, r2
 8007240:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d11e      	bne.n	8007286 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d009      	beq.n	8007264 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725c:	461a      	mov	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	0151      	lsls	r1, r2, #5
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	440a      	add	r2, r1
 800727a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	e092      	b.n	80073ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	0151      	lsls	r1, r2, #5
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	440a      	add	r2, r1
 800729c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d07e      	beq.n	80073ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	2101      	movs	r1, #1
 80072c0:	fa01 f303 	lsl.w	r3, r1, r3
 80072c4:	6979      	ldr	r1, [r7, #20]
 80072c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ca:	4313      	orrs	r3, r2
 80072cc:	634b      	str	r3, [r1, #52]	; 0x34
 80072ce:	e06d      	b.n	80073ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	0151      	lsls	r1, r2, #5
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	440a      	add	r2, r1
 80072e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ea:	0cdb      	lsrs	r3, r3, #19
 80072ec:	04db      	lsls	r3, r3, #19
 80072ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800730e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007312:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007342:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	691a      	ldr	r2, [r3, #16]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800735a:	6939      	ldr	r1, [r7, #16]
 800735c:	0148      	lsls	r0, r1, #5
 800735e:	6979      	ldr	r1, [r7, #20]
 8007360:	4401      	add	r1, r0
 8007362:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007366:	4313      	orrs	r3, r2
 8007368:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800736a:	79fb      	ldrb	r3, [r7, #7]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d10d      	bne.n	800738c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	68d9      	ldr	r1, [r3, #12]
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007388:	460a      	mov	r2, r1
 800738a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b089      	sub	sp, #36	; 0x24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	4611      	mov	r1, r2
 80073c6:	461a      	mov	r2, r3
 80073c8:	460b      	mov	r3, r1
 80073ca:	71fb      	strb	r3, [r7, #7]
 80073cc:	4613      	mov	r3, r2
 80073ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80073d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d11a      	bne.n	8007416 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073e0:	88bb      	ldrh	r3, [r7, #4]
 80073e2:	3303      	adds	r3, #3
 80073e4:	089b      	lsrs	r3, r3, #2
 80073e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073e8:	2300      	movs	r3, #0
 80073ea:	61bb      	str	r3, [r7, #24]
 80073ec:	e00f      	b.n	800740e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	031a      	lsls	r2, r3, #12
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073fa:	461a      	mov	r2, r3
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	3304      	adds	r3, #4
 8007406:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	3301      	adds	r3, #1
 800740c:	61bb      	str	r3, [r7, #24]
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	429a      	cmp	r2, r3
 8007414:	d3eb      	bcc.n	80073ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3724      	adds	r7, #36	; 0x24
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007424:	b480      	push	{r7}
 8007426:	b089      	sub	sp, #36	; 0x24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	3303      	adds	r3, #3
 800743e:	089b      	lsrs	r3, r3, #2
 8007440:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007442:	2300      	movs	r3, #0
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	e00b      	b.n	8007460 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	601a      	str	r2, [r3, #0]
    pDest++;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	3304      	adds	r3, #4
 8007458:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	3301      	adds	r3, #1
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	429a      	cmp	r2, r3
 8007466:	d3ef      	bcc.n	8007448 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007468:	69fb      	ldr	r3, [r7, #28]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3724      	adds	r7, #36	; 0x24
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d12c      	bne.n	80074ec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	db12      	blt.n	80074ca <USB_EPSetStall+0x54>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00f      	beq.n	80074ca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074c8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	0151      	lsls	r1, r2, #5
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	440a      	add	r2, r1
 80074e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	e02b      	b.n	8007544 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	db12      	blt.n	8007524 <USB_EPSetStall+0xae>
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00f      	beq.n	8007524 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	0151      	lsls	r1, r2, #5
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	440a      	add	r2, r1
 800751a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800751e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007522:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	440a      	add	r2, r1
 800753a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800753e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007542:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d128      	bne.n	80075c0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	0151      	lsls	r1, r2, #5
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	440a      	add	r2, r1
 8007584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007588:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800758c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	78db      	ldrb	r3, [r3, #3]
 8007592:	2b03      	cmp	r3, #3
 8007594:	d003      	beq.n	800759e <USB_EPClearStall+0x4c>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	78db      	ldrb	r3, [r3, #3]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d138      	bne.n	8007610 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	0151      	lsls	r1, r2, #5
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	440a      	add	r2, r1
 80075b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	e027      	b.n	8007610 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	0151      	lsls	r1, r2, #5
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	440a      	add	r2, r1
 80075d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	78db      	ldrb	r3, [r3, #3]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d003      	beq.n	80075f0 <USB_EPClearStall+0x9e>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	78db      	ldrb	r3, [r3, #3]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d10f      	bne.n	8007610 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	440a      	add	r2, r1
 8007606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800760a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	460b      	mov	r3, r1
 8007628:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800763c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007640:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007652:	68f9      	ldr	r1, [r7, #12]
 8007654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007658:	4313      	orrs	r3, r2
 800765a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007684:	f023 0303 	bic.w	r3, r3, #3
 8007688:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007698:	f023 0302 	bic.w	r3, r3, #2
 800769c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076c6:	f023 0303 	bic.w	r3, r3, #3
 80076ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076da:	f043 0302 	orr.w	r3, r3, #2
 80076de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4013      	ands	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007706:	68fb      	ldr	r3, [r7, #12]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4013      	ands	r3, r2
 8007736:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	0c1b      	lsrs	r3, r3, #16
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	4013      	ands	r3, r2
 800776a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	b29b      	uxth	r3, r3
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	4013      	ands	r3, r2
 80077a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077aa:	68bb      	ldr	r3, [r7, #8]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
 80077e8:	01db      	lsls	r3, r3, #7
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	4013      	ands	r3, r2
 8007804:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007806:	68bb      	ldr	r3, [r7, #8]
}
 8007808:	4618      	mov	r0, r3
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	f003 0301 	and.w	r3, r3, #1
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800784a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800784e:	f023 0307 	bic.w	r3, r3, #7
 8007852:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007866:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
	...

08007878 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	460b      	mov	r3, r1
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	333c      	adds	r3, #60	; 0x3c
 800788e:	3304      	adds	r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	4a26      	ldr	r2, [pc, #152]	; (8007930 <USB_EP0_OutStart+0xb8>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d90a      	bls.n	80078b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ac:	d101      	bne.n	80078b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	e037      	b.n	8007922 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b8:	461a      	mov	r2, r3
 80078ba:	2300      	movs	r3, #0
 80078bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e0:	f043 0318 	orr.w	r3, r3, #24
 80078e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80078f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80078fa:	7afb      	ldrb	r3, [r7, #11]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d10f      	bne.n	8007920 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007906:	461a      	mov	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800791e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	4f54300a 	.word	0x4f54300a

08007934 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3301      	adds	r3, #1
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4a13      	ldr	r2, [pc, #76]	; (8007998 <USB_CoreReset+0x64>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d901      	bls.n	8007952 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e01b      	b.n	800798a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	daf2      	bge.n	8007940 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	f043 0201 	orr.w	r2, r3, #1
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3301      	adds	r3, #1
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4a09      	ldr	r2, [pc, #36]	; (8007998 <USB_CoreReset+0x64>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d901      	bls.n	800797c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e006      	b.n	800798a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b01      	cmp	r3, #1
 8007986:	d0f0      	beq.n	800796a <USB_CoreReset+0x36>

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	00030d40 	.word	0x00030d40

0800799c <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 80079a8:	2044      	movs	r0, #68	; 0x44
 80079aa:	f001 fead 	bl	8009708 <USBD_static_malloc>
 80079ae:	4602      	mov	r2, r0
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e016      	b.n	80079f2 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 80079cc:	2340      	movs	r3, #64	; 0x40
 80079ce:	2202      	movs	r2, #2
 80079d0:	2181      	movs	r1, #129	; 0x81
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fd75 	bl	80094c2 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 80079d8:	2340      	movs	r3, #64	; 0x40
 80079da:	2202      	movs	r2, #2
 80079dc:	2101      	movs	r1, #1
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 fd6f 	bl	80094c2 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 80079e4:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 80079e6:	2340      	movs	r3, #64	; 0x40
 80079e8:	2101      	movs	r1, #1
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 fe58 	bl	80096a0 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 80079f0:	2300      	movs	r3, #0
  }
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	460b      	mov	r3, r1
 8007a04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 8007a06:	2181      	movs	r1, #129	; 0x81
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 fd80 	bl	800950e <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 8007a0e:	2101      	movs	r1, #1
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 fd7c 	bl	800950e <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d007      	beq.n	8007a46 <USBD_Midi_Setup+0x26>
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d10b      	bne.n	8007a52 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 f937 	bl	8008cb0 <USBD_CtlError>
      return USBD_FAIL;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e006      	b.n	8007a54 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f931 	bl	8008cb0 <USBD_CtlError>
      return USBD_FAIL;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e000      	b.n	8007a54 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2265      	movs	r2, #101	; 0x65
 8007a68:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 8007a6a:	4b03      	ldr	r3, [pc, #12]	; (8007a78 <USBD_Midi_GetCfgDesc+0x1c>)
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	2000008c 	.word	0x2000008c

08007a7c <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b1e:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fddc 	bl	80096e2 <USBD_LL_GetRxDataSize>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8007b34:	2300      	movs	r3, #0
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e00c      	b.n	8007b54 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68f9      	ldr	r1, [r7, #12]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	440a      	add	r2, r1
 8007b48:	2104      	movs	r1, #4
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	3304      	adds	r3, #4
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d3ed      	bcc.n	8007b3a <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 8007b5e:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 8007b60:	2340      	movs	r3, #64	; 0x40
 8007b62:	2101      	movs	r1, #1
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 fd9b 	bl	80096a0 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	220a      	movs	r2, #10
 8007b80:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 8007b82:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	200000f4 	.word	0x200000f4

08007b94 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b086      	sub	sp, #24
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e01f      	b.n	8007c1a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	79fa      	ldrb	r2, [r7, #7]
 8007c0c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f001 fbf0 	bl	80093f4 <USBD_LL_Init>
 8007c14:	4603      	mov	r3, r0
 8007c16:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e016      	b.n	8007c68 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00b      	beq.n	8007c66 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	f107 020e 	add.w	r2, r7, #14
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	4798      	blx	r3
 8007c5e:	4602      	mov	r2, r0
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 fc07 	bl	800948c <USBD_LL_Start>
 8007c7e:	4603      	mov	r3, r0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007caa:	2303      	movs	r3, #3
 8007cac:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d009      	beq.n	8007ccc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	4798      	blx	r3
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d007      	beq.n	8007cfc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
  }

  return USBD_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 ff8f 	bl	8008c3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d3a:	f003 031f 	and.w	r3, r3, #31
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d01a      	beq.n	8007d78 <USBD_LL_SetupStage+0x72>
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d822      	bhi.n	8007d8c <USBD_LL_SetupStage+0x86>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d002      	beq.n	8007d50 <USBD_LL_SetupStage+0x4a>
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d00a      	beq.n	8007d64 <USBD_LL_SetupStage+0x5e>
 8007d4e:	e01d      	b.n	8007d8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fa61 	bl	8008220 <USBD_StdDevReq>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]
      break;
 8007d62:	e020      	b.n	8007da6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fac5 	bl	80082fc <USBD_StdItfReq>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73fb      	strb	r3, [r7, #15]
      break;
 8007d76:	e016      	b.n	8007da6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fb04 	bl	800838e <USBD_StdEPReq>
 8007d86:	4603      	mov	r3, r0
 8007d88:	73fb      	strb	r3, [r7, #15]
      break;
 8007d8a:	e00c      	b.n	8007da6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 fbd6 	bl	800954c <USBD_LL_StallEP>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]
      break;
 8007da4:	bf00      	nop
  }

  return ret;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	460b      	mov	r3, r1
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d138      	bne.n	8007e36 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007dca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d14a      	bne.n	8007e6c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	689a      	ldr	r2, [r3, #8]
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d913      	bls.n	8007e0a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	689a      	ldr	r2, [r3, #8]
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	1ad2      	subs	r2, r2, r3
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	bf28      	it	cs
 8007dfc:	4613      	movcs	r3, r2
 8007dfe:	461a      	mov	r2, r3
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 fff1 	bl	8008dea <USBD_CtlContinueRx>
 8007e08:	e030      	b.n	8007e6c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d10b      	bne.n	8007e2e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d005      	beq.n	8007e2e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 ffec 	bl	8008e0c <USBD_CtlSendStatus>
 8007e34:	e01a      	b.n	8007e6c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d114      	bne.n	8007e6c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00e      	beq.n	8007e6c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	7afa      	ldrb	r2, [r7, #11]
 8007e58:	4611      	mov	r1, r2
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	4798      	blx	r3
 8007e5e:	4603      	mov	r3, r0
 8007e60:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	e000      	b.n	8007e6e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b086      	sub	sp, #24
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	607a      	str	r2, [r7, #4]
 8007e82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d16b      	bne.n	8007f62 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3314      	adds	r3, #20
 8007e8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d156      	bne.n	8007f48 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d914      	bls.n	8007ed0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	1ad2      	subs	r2, r2, r3
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 ff83 	bl	8008dc8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f001 fbe9 	bl	80096a0 <USBD_LL_PrepareReceive>
 8007ece:	e03b      	b.n	8007f48 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d11c      	bne.n	8007f16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d316      	bcc.n	8007f16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d20f      	bcs.n	8007f16 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2100      	movs	r1, #0
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 ff64 	bl	8008dc8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f001 fbc6 	bl	80096a0 <USBD_LL_PrepareReceive>
 8007f14:	e018      	b.n	8007f48 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d10b      	bne.n	8007f3a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d005      	beq.n	8007f3a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f3a:	2180      	movs	r1, #128	; 0x80
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f001 fb05 	bl	800954c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 ff75 	bl	8008e32 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d122      	bne.n	8007f98 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f7ff fe98 	bl	8007c88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f60:	e01a      	b.n	8007f98 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d114      	bne.n	8007f98 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00e      	beq.n	8007f98 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	7afa      	ldrb	r2, [r7, #11]
 8007f84:	4611      	mov	r1, r2
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	4798      	blx	r3
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	e000      	b.n	8007f9a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b082      	sub	sp, #8
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e02f      	b.n	8008036 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00f      	beq.n	8008000 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d009      	beq.n	8008000 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6852      	ldr	r2, [r2, #4]
 8007ff8:	b2d2      	uxtb	r2, r2
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008000:	2340      	movs	r3, #64	; 0x40
 8008002:	2200      	movs	r2, #0
 8008004:	2100      	movs	r1, #0
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 fa5b 	bl	80094c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2240      	movs	r2, #64	; 0x40
 8008018:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800801c:	2340      	movs	r3, #64	; 0x40
 800801e:	2200      	movs	r2, #0
 8008020:	2180      	movs	r1, #128	; 0x80
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 fa4d 	bl	80094c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2240      	movs	r2, #64	; 0x40
 8008032:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	78fa      	ldrb	r2, [r7, #3]
 800804e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806c:	b2da      	uxtb	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2204      	movs	r2, #4
 8008078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b04      	cmp	r3, #4
 800809c:	d106      	bne.n	80080ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e012      	b.n	80080f6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d10b      	bne.n	80080f4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	460b      	mov	r3, r1
 8008108:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008114:	2303      	movs	r3, #3
 8008116:	e014      	b.n	8008142 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b03      	cmp	r3, #3
 8008122:	d10d      	bne.n	8008140 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008136:	6a1b      	ldr	r3, [r3, #32]
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	4611      	mov	r1, r2
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008160:	2303      	movs	r3, #3
 8008162:	e014      	b.n	800818e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b03      	cmp	r3, #3
 800816e:	d10d      	bne.n	800818c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	2b00      	cmp	r3, #0
 800817a:	d007      	beq.n	800818c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	4611      	mov	r1, r2
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6852      	ldr	r2, [r2, #4]
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	4611      	mov	r1, r2
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
  }

  return USBD_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	3301      	adds	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008202:	8a3b      	ldrh	r3, [r7, #16]
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	b21a      	sxth	r2, r3
 8008208:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800820c:	4313      	orrs	r3, r2
 800820e:	b21b      	sxth	r3, r3
 8008210:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008212:	89fb      	ldrh	r3, [r7, #14]
}
 8008214:	4618      	mov	r0, r3
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008236:	2b40      	cmp	r3, #64	; 0x40
 8008238:	d005      	beq.n	8008246 <USBD_StdDevReq+0x26>
 800823a:	2b40      	cmp	r3, #64	; 0x40
 800823c:	d853      	bhi.n	80082e6 <USBD_StdDevReq+0xc6>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00b      	beq.n	800825a <USBD_StdDevReq+0x3a>
 8008242:	2b20      	cmp	r3, #32
 8008244:	d14f      	bne.n	80082e6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	4798      	blx	r3
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]
      break;
 8008258:	e04a      	b.n	80082f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	785b      	ldrb	r3, [r3, #1]
 800825e:	2b09      	cmp	r3, #9
 8008260:	d83b      	bhi.n	80082da <USBD_StdDevReq+0xba>
 8008262:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <USBD_StdDevReq+0x48>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	080082bd 	.word	0x080082bd
 800826c:	080082d1 	.word	0x080082d1
 8008270:	080082db 	.word	0x080082db
 8008274:	080082c7 	.word	0x080082c7
 8008278:	080082db 	.word	0x080082db
 800827c:	0800829b 	.word	0x0800829b
 8008280:	08008291 	.word	0x08008291
 8008284:	080082db 	.word	0x080082db
 8008288:	080082b3 	.word	0x080082b3
 800828c:	080082a5 	.word	0x080082a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f9de 	bl	8008654 <USBD_GetDescriptor>
          break;
 8008298:	e024      	b.n	80082e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fb43 	bl	8008928 <USBD_SetAddress>
          break;
 80082a2:	e01f      	b.n	80082e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fb82 	bl	80089b0 <USBD_SetConfig>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]
          break;
 80082b0:	e018      	b.n	80082e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fc21 	bl	8008afc <USBD_GetConfig>
          break;
 80082ba:	e013      	b.n	80082e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fc52 	bl	8008b68 <USBD_GetStatus>
          break;
 80082c4:	e00e      	b.n	80082e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fc81 	bl	8008bd0 <USBD_SetFeature>
          break;
 80082ce:	e009      	b.n	80082e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fc90 	bl	8008bf8 <USBD_ClrFeature>
          break;
 80082d8:	e004      	b.n	80082e4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fce7 	bl	8008cb0 <USBD_CtlError>
          break;
 80082e2:	bf00      	nop
      }
      break;
 80082e4:	e004      	b.n	80082f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fce1 	bl	8008cb0 <USBD_CtlError>
      break;
 80082ee:	bf00      	nop
  }

  return ret;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop

080082fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008312:	2b40      	cmp	r3, #64	; 0x40
 8008314:	d005      	beq.n	8008322 <USBD_StdItfReq+0x26>
 8008316:	2b40      	cmp	r3, #64	; 0x40
 8008318:	d82f      	bhi.n	800837a <USBD_StdItfReq+0x7e>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <USBD_StdItfReq+0x26>
 800831e:	2b20      	cmp	r3, #32
 8008320:	d12b      	bne.n	800837a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008328:	b2db      	uxtb	r3, r3
 800832a:	3b01      	subs	r3, #1
 800832c:	2b02      	cmp	r3, #2
 800832e:	d81d      	bhi.n	800836c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	889b      	ldrh	r3, [r3, #4]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b01      	cmp	r3, #1
 8008338:	d813      	bhi.n	8008362 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	88db      	ldrh	r3, [r3, #6]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d110      	bne.n	8008376 <USBD_StdItfReq+0x7a>
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10d      	bne.n	8008376 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fd56 	bl	8008e0c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008360:	e009      	b.n	8008376 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fca3 	bl	8008cb0 <USBD_CtlError>
          break;
 800836a:	e004      	b.n	8008376 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fc9e 	bl	8008cb0 <USBD_CtlError>
          break;
 8008374:	e000      	b.n	8008378 <USBD_StdItfReq+0x7c>
          break;
 8008376:	bf00      	nop
      }
      break;
 8008378:	e004      	b.n	8008384 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fc97 	bl	8008cb0 <USBD_CtlError>
      break;
 8008382:	bf00      	nop
  }

  return ret;
 8008384:	7bfb      	ldrb	r3, [r7, #15]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	889b      	ldrh	r3, [r3, #4]
 80083a0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083aa:	2b40      	cmp	r3, #64	; 0x40
 80083ac:	d007      	beq.n	80083be <USBD_StdEPReq+0x30>
 80083ae:	2b40      	cmp	r3, #64	; 0x40
 80083b0:	f200 8145 	bhi.w	800863e <USBD_StdEPReq+0x2b0>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00c      	beq.n	80083d2 <USBD_StdEPReq+0x44>
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	f040 8140 	bne.w	800863e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	4798      	blx	r3
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]
      break;
 80083d0:	e13a      	b.n	8008648 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	785b      	ldrb	r3, [r3, #1]
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d007      	beq.n	80083ea <USBD_StdEPReq+0x5c>
 80083da:	2b03      	cmp	r3, #3
 80083dc:	f300 8129 	bgt.w	8008632 <USBD_StdEPReq+0x2a4>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d07f      	beq.n	80084e4 <USBD_StdEPReq+0x156>
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d03c      	beq.n	8008462 <USBD_StdEPReq+0xd4>
 80083e8:	e123      	b.n	8008632 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d002      	beq.n	80083fc <USBD_StdEPReq+0x6e>
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d016      	beq.n	8008428 <USBD_StdEPReq+0x9a>
 80083fa:	e02c      	b.n	8008456 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00d      	beq.n	800841e <USBD_StdEPReq+0x90>
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b80      	cmp	r3, #128	; 0x80
 8008406:	d00a      	beq.n	800841e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 f89d 	bl	800954c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008412:	2180      	movs	r1, #128	; 0x80
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 f899 	bl	800954c <USBD_LL_StallEP>
 800841a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800841c:	e020      	b.n	8008460 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fc45 	bl	8008cb0 <USBD_CtlError>
              break;
 8008426:	e01b      	b.n	8008460 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	885b      	ldrh	r3, [r3, #2]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10e      	bne.n	800844e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00b      	beq.n	800844e <USBD_StdEPReq+0xc0>
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	2b80      	cmp	r3, #128	; 0x80
 800843a:	d008      	beq.n	800844e <USBD_StdEPReq+0xc0>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	88db      	ldrh	r3, [r3, #6]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d104      	bne.n	800844e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 f87f 	bl	800954c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fcdc 	bl	8008e0c <USBD_CtlSendStatus>

              break;
 8008454:	e004      	b.n	8008460 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fc29 	bl	8008cb0 <USBD_CtlError>
              break;
 800845e:	bf00      	nop
          }
          break;
 8008460:	e0ec      	b.n	800863c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d002      	beq.n	8008474 <USBD_StdEPReq+0xe6>
 800846e:	2b03      	cmp	r3, #3
 8008470:	d016      	beq.n	80084a0 <USBD_StdEPReq+0x112>
 8008472:	e030      	b.n	80084d6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00d      	beq.n	8008496 <USBD_StdEPReq+0x108>
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b80      	cmp	r3, #128	; 0x80
 800847e:	d00a      	beq.n	8008496 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 f861 	bl	800954c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800848a:	2180      	movs	r1, #128	; 0x80
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 f85d 	bl	800954c <USBD_LL_StallEP>
 8008492:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008494:	e025      	b.n	80084e2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fc09 	bl	8008cb0 <USBD_CtlError>
              break;
 800849e:	e020      	b.n	80084e2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	885b      	ldrh	r3, [r3, #2]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d11b      	bne.n	80084e0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d004      	beq.n	80084bc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 f867 	bl	800958a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fca5 	bl	8008e0c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80084d4:	e004      	b.n	80084e0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fbe9 	bl	8008cb0 <USBD_CtlError>
              break;
 80084de:	e000      	b.n	80084e2 <USBD_StdEPReq+0x154>
              break;
 80084e0:	bf00      	nop
          }
          break;
 80084e2:	e0ab      	b.n	800863c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d002      	beq.n	80084f6 <USBD_StdEPReq+0x168>
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d032      	beq.n	800855a <USBD_StdEPReq+0x1cc>
 80084f4:	e097      	b.n	8008626 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d007      	beq.n	800850c <USBD_StdEPReq+0x17e>
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	2b80      	cmp	r3, #128	; 0x80
 8008500:	d004      	beq.n	800850c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fbd3 	bl	8008cb0 <USBD_CtlError>
                break;
 800850a:	e091      	b.n	8008630 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800850c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008510:	2b00      	cmp	r3, #0
 8008512:	da0b      	bge.n	800852c <USBD_StdEPReq+0x19e>
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800851a:	4613      	mov	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	3310      	adds	r3, #16
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	4413      	add	r3, r2
 8008528:	3304      	adds	r3, #4
 800852a:	e00b      	b.n	8008544 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008532:	4613      	mov	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	4413      	add	r3, r2
 8008542:	3304      	adds	r3, #4
 8008544:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2202      	movs	r2, #2
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fc1d 	bl	8008d92 <USBD_CtlSendData>
              break;
 8008558:	e06a      	b.n	8008630 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800855a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800855e:	2b00      	cmp	r3, #0
 8008560:	da11      	bge.n	8008586 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	f003 020f 	and.w	r2, r3, #15
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	3324      	adds	r3, #36	; 0x24
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d117      	bne.n	80085ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fb96 	bl	8008cb0 <USBD_CtlError>
                  break;
 8008584:	e054      	b.n	8008630 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008586:	7bbb      	ldrb	r3, [r7, #14]
 8008588:	f003 020f 	and.w	r2, r3, #15
 800858c:	6879      	ldr	r1, [r7, #4]
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	440b      	add	r3, r1
 8008598:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d104      	bne.n	80085ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fb83 	bl	8008cb0 <USBD_CtlError>
                  break;
 80085aa:	e041      	b.n	8008630 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	da0b      	bge.n	80085cc <USBD_StdEPReq+0x23e>
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	3310      	adds	r3, #16
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	4413      	add	r3, r2
 80085c8:	3304      	adds	r3, #4
 80085ca:	e00b      	b.n	80085e4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	4413      	add	r3, r2
 80085e2:	3304      	adds	r3, #4
 80085e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <USBD_StdEPReq+0x264>
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	2b80      	cmp	r3, #128	; 0x80
 80085f0:	d103      	bne.n	80085fa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	e00e      	b.n	8008618 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 ffe2 	bl	80095c8 <USBD_LL_IsStallEP>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2201      	movs	r2, #1
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	e002      	b.n	8008618 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2202      	movs	r2, #2
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fbb7 	bl	8008d92 <USBD_CtlSendData>
              break;
 8008624:	e004      	b.n	8008630 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fb41 	bl	8008cb0 <USBD_CtlError>
              break;
 800862e:	bf00      	nop
          }
          break;
 8008630:	e004      	b.n	800863c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fb3b 	bl	8008cb0 <USBD_CtlError>
          break;
 800863a:	bf00      	nop
      }
      break;
 800863c:	e004      	b.n	8008648 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fb35 	bl	8008cb0 <USBD_CtlError>
      break;
 8008646:	bf00      	nop
  }

  return ret;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	885b      	ldrh	r3, [r3, #2]
 800866e:	0a1b      	lsrs	r3, r3, #8
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	2b06      	cmp	r3, #6
 8008676:	f200 8128 	bhi.w	80088ca <USBD_GetDescriptor+0x276>
 800867a:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <USBD_GetDescriptor+0x2c>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	0800869d 	.word	0x0800869d
 8008684:	080086b5 	.word	0x080086b5
 8008688:	080086f5 	.word	0x080086f5
 800868c:	080088cb 	.word	0x080088cb
 8008690:	080088cb 	.word	0x080088cb
 8008694:	0800886b 	.word	0x0800886b
 8008698:	08008897 	.word	0x08008897
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	7c12      	ldrb	r2, [r2, #16]
 80086a8:	f107 0108 	add.w	r1, r7, #8
 80086ac:	4610      	mov	r0, r2
 80086ae:	4798      	blx	r3
 80086b0:	60f8      	str	r0, [r7, #12]
      break;
 80086b2:	e112      	b.n	80088da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	7c1b      	ldrb	r3, [r3, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10d      	bne.n	80086d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c4:	f107 0208 	add.w	r2, r7, #8
 80086c8:	4610      	mov	r0, r2
 80086ca:	4798      	blx	r3
 80086cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3301      	adds	r3, #1
 80086d2:	2202      	movs	r2, #2
 80086d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086d6:	e100      	b.n	80088da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	f107 0208 	add.w	r2, r7, #8
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
 80086e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3301      	adds	r3, #1
 80086ee:	2202      	movs	r2, #2
 80086f0:	701a      	strb	r2, [r3, #0]
      break;
 80086f2:	e0f2      	b.n	80088da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	885b      	ldrh	r3, [r3, #2]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b05      	cmp	r3, #5
 80086fc:	f200 80ac 	bhi.w	8008858 <USBD_GetDescriptor+0x204>
 8008700:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <USBD_GetDescriptor+0xb4>)
 8008702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008706:	bf00      	nop
 8008708:	08008721 	.word	0x08008721
 800870c:	08008755 	.word	0x08008755
 8008710:	08008789 	.word	0x08008789
 8008714:	080087bd 	.word	0x080087bd
 8008718:	080087f1 	.word	0x080087f1
 800871c:	08008825 	.word	0x08008825
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00b      	beq.n	8008744 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	7c12      	ldrb	r2, [r2, #16]
 8008738:	f107 0108 	add.w	r1, r7, #8
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
 8008740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008742:	e091      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fab2 	bl	8008cb0 <USBD_CtlError>
            err++;
 800874c:	7afb      	ldrb	r3, [r7, #11]
 800874e:	3301      	adds	r3, #1
 8008750:	72fb      	strb	r3, [r7, #11]
          break;
 8008752:	e089      	b.n	8008868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00b      	beq.n	8008778 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	7c12      	ldrb	r2, [r2, #16]
 800876c:	f107 0108 	add.w	r1, r7, #8
 8008770:	4610      	mov	r0, r2
 8008772:	4798      	blx	r3
 8008774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008776:	e077      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa98 	bl	8008cb0 <USBD_CtlError>
            err++;
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	3301      	adds	r3, #1
 8008784:	72fb      	strb	r3, [r7, #11]
          break;
 8008786:	e06f      	b.n	8008868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00b      	beq.n	80087ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	7c12      	ldrb	r2, [r2, #16]
 80087a0:	f107 0108 	add.w	r1, r7, #8
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
 80087a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087aa:	e05d      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa7e 	bl	8008cb0 <USBD_CtlError>
            err++;
 80087b4:	7afb      	ldrb	r3, [r7, #11]
 80087b6:	3301      	adds	r3, #1
 80087b8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ba:	e055      	b.n	8008868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	7c12      	ldrb	r2, [r2, #16]
 80087d4:	f107 0108 	add.w	r1, r7, #8
 80087d8:	4610      	mov	r0, r2
 80087da:	4798      	blx	r3
 80087dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087de:	e043      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa64 	bl	8008cb0 <USBD_CtlError>
            err++;
 80087e8:	7afb      	ldrb	r3, [r7, #11]
 80087ea:	3301      	adds	r3, #1
 80087ec:	72fb      	strb	r3, [r7, #11]
          break;
 80087ee:	e03b      	b.n	8008868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00b      	beq.n	8008814 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	7c12      	ldrb	r2, [r2, #16]
 8008808:	f107 0108 	add.w	r1, r7, #8
 800880c:	4610      	mov	r0, r2
 800880e:	4798      	blx	r3
 8008810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008812:	e029      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa4a 	bl	8008cb0 <USBD_CtlError>
            err++;
 800881c:	7afb      	ldrb	r3, [r7, #11]
 800881e:	3301      	adds	r3, #1
 8008820:	72fb      	strb	r3, [r7, #11]
          break;
 8008822:	e021      	b.n	8008868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	7c12      	ldrb	r2, [r2, #16]
 800883c:	f107 0108 	add.w	r1, r7, #8
 8008840:	4610      	mov	r0, r2
 8008842:	4798      	blx	r3
 8008844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008846:	e00f      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fa30 	bl	8008cb0 <USBD_CtlError>
            err++;
 8008850:	7afb      	ldrb	r3, [r7, #11]
 8008852:	3301      	adds	r3, #1
 8008854:	72fb      	strb	r3, [r7, #11]
          break;
 8008856:	e007      	b.n	8008868 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa28 	bl	8008cb0 <USBD_CtlError>
          err++;
 8008860:	7afb      	ldrb	r3, [r7, #11]
 8008862:	3301      	adds	r3, #1
 8008864:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008866:	bf00      	nop
      }
      break;
 8008868:	e037      	b.n	80088da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	7c1b      	ldrb	r3, [r3, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d109      	bne.n	8008886 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887a:	f107 0208 	add.w	r2, r7, #8
 800887e:	4610      	mov	r0, r2
 8008880:	4798      	blx	r3
 8008882:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008884:	e029      	b.n	80088da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fa11 	bl	8008cb0 <USBD_CtlError>
        err++;
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	3301      	adds	r3, #1
 8008892:	72fb      	strb	r3, [r7, #11]
      break;
 8008894:	e021      	b.n	80088da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	7c1b      	ldrb	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10d      	bne.n	80088ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	f107 0208 	add.w	r2, r7, #8
 80088aa:	4610      	mov	r0, r2
 80088ac:	4798      	blx	r3
 80088ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3301      	adds	r3, #1
 80088b4:	2207      	movs	r2, #7
 80088b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088b8:	e00f      	b.n	80088da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f9f7 	bl	8008cb0 <USBD_CtlError>
        err++;
 80088c2:	7afb      	ldrb	r3, [r7, #11]
 80088c4:	3301      	adds	r3, #1
 80088c6:	72fb      	strb	r3, [r7, #11]
      break;
 80088c8:	e007      	b.n	80088da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f9ef 	bl	8008cb0 <USBD_CtlError>
      err++;
 80088d2:	7afb      	ldrb	r3, [r7, #11]
 80088d4:	3301      	adds	r3, #1
 80088d6:	72fb      	strb	r3, [r7, #11]
      break;
 80088d8:	bf00      	nop
  }

  if (err != 0U)
 80088da:	7afb      	ldrb	r3, [r7, #11]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d11e      	bne.n	800891e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	88db      	ldrh	r3, [r3, #6]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d016      	beq.n	8008916 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80088e8:	893b      	ldrh	r3, [r7, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00e      	beq.n	800890c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	88da      	ldrh	r2, [r3, #6]
 80088f2:	893b      	ldrh	r3, [r7, #8]
 80088f4:	4293      	cmp	r3, r2
 80088f6:	bf28      	it	cs
 80088f8:	4613      	movcs	r3, r2
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088fe:	893b      	ldrh	r3, [r7, #8]
 8008900:	461a      	mov	r2, r3
 8008902:	68f9      	ldr	r1, [r7, #12]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fa44 	bl	8008d92 <USBD_CtlSendData>
 800890a:	e009      	b.n	8008920 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f9ce 	bl	8008cb0 <USBD_CtlError>
 8008914:	e004      	b.n	8008920 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa78 	bl	8008e0c <USBD_CtlSendStatus>
 800891c:	e000      	b.n	8008920 <USBD_GetDescriptor+0x2cc>
    return;
 800891e:	bf00      	nop
  }
}
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop

08008928 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	889b      	ldrh	r3, [r3, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d131      	bne.n	800899e <USBD_SetAddress+0x76>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	88db      	ldrh	r3, [r3, #6]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d12d      	bne.n	800899e <USBD_SetAddress+0x76>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	885b      	ldrh	r3, [r3, #2]
 8008946:	2b7f      	cmp	r3, #127	; 0x7f
 8008948:	d829      	bhi.n	800899e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	885b      	ldrh	r3, [r3, #2]
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008954:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b03      	cmp	r3, #3
 8008960:	d104      	bne.n	800896c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f9a3 	bl	8008cb0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800896a:	e01d      	b.n	80089a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	7bfa      	ldrb	r2, [r7, #15]
 8008970:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fe51 	bl	8009620 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa44 	bl	8008e0c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d004      	beq.n	8008994 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2202      	movs	r2, #2
 800898e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008992:	e009      	b.n	80089a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899c:	e004      	b.n	80089a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f985 	bl	8008cb0 <USBD_CtlError>
  }
}
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	885b      	ldrh	r3, [r3, #2]
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	4b4c      	ldr	r3, [pc, #304]	; (8008af8 <USBD_SetConfig+0x148>)
 80089c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089c8:	4b4b      	ldr	r3, [pc, #300]	; (8008af8 <USBD_SetConfig+0x148>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d905      	bls.n	80089dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f96c 	bl	8008cb0 <USBD_CtlError>
    return USBD_FAIL;
 80089d8:	2303      	movs	r3, #3
 80089da:	e088      	b.n	8008aee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d002      	beq.n	80089ee <USBD_SetConfig+0x3e>
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d025      	beq.n	8008a38 <USBD_SetConfig+0x88>
 80089ec:	e071      	b.n	8008ad2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089ee:	4b42      	ldr	r3, [pc, #264]	; (8008af8 <USBD_SetConfig+0x148>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d01c      	beq.n	8008a30 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80089f6:	4b40      	ldr	r3, [pc, #256]	; (8008af8 <USBD_SetConfig+0x148>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a00:	4b3d      	ldr	r3, [pc, #244]	; (8008af8 <USBD_SetConfig+0x148>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff f949 	bl	8007c9e <USBD_SetClassConfig>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d004      	beq.n	8008a20 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f949 	bl	8008cb0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a1e:	e065      	b.n	8008aec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f9f3 	bl	8008e0c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2203      	movs	r2, #3
 8008a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a2e:	e05d      	b.n	8008aec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f9eb 	bl	8008e0c <USBD_CtlSendStatus>
      break;
 8008a36:	e059      	b.n	8008aec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a38:	4b2f      	ldr	r3, [pc, #188]	; (8008af8 <USBD_SetConfig+0x148>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d112      	bne.n	8008a66 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a48:	4b2b      	ldr	r3, [pc, #172]	; (8008af8 <USBD_SetConfig+0x148>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a52:	4b29      	ldr	r3, [pc, #164]	; (8008af8 <USBD_SetConfig+0x148>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7ff f93c 	bl	8007cd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f9d4 	bl	8008e0c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a64:	e042      	b.n	8008aec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008a66:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <USBD_SetConfig+0x148>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d02a      	beq.n	8008aca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff f92a 	bl	8007cd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a82:	4b1d      	ldr	r3, [pc, #116]	; (8008af8 <USBD_SetConfig+0x148>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <USBD_SetConfig+0x148>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff f903 	bl	8007c9e <USBD_SetClassConfig>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00f      	beq.n	8008ac2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f903 	bl	8008cb0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff f90f 	bl	8007cd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ac0:	e014      	b.n	8008aec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f9a2 	bl	8008e0c <USBD_CtlSendStatus>
      break;
 8008ac8:	e010      	b.n	8008aec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f99e 	bl	8008e0c <USBD_CtlSendStatus>
      break;
 8008ad0:	e00c      	b.n	8008aec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f8eb 	bl	8008cb0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ada:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <USBD_SetConfig+0x148>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff f8f8 	bl	8007cd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8008aea:	bf00      	nop
  }

  return ret;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	200005e8 	.word	0x200005e8

08008afc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	88db      	ldrh	r3, [r3, #6]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d004      	beq.n	8008b18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f8cd 	bl	8008cb0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b16:	e023      	b.n	8008b60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	dc02      	bgt.n	8008b2a <USBD_GetConfig+0x2e>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dc03      	bgt.n	8008b30 <USBD_GetConfig+0x34>
 8008b28:	e015      	b.n	8008b56 <USBD_GetConfig+0x5a>
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d00b      	beq.n	8008b46 <USBD_GetConfig+0x4a>
 8008b2e:	e012      	b.n	8008b56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f927 	bl	8008d92 <USBD_CtlSendData>
        break;
 8008b44:	e00c      	b.n	8008b60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f91f 	bl	8008d92 <USBD_CtlSendData>
        break;
 8008b54:	e004      	b.n	8008b60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f8a9 	bl	8008cb0 <USBD_CtlError>
        break;
 8008b5e:	bf00      	nop
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d81e      	bhi.n	8008bbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	88db      	ldrh	r3, [r3, #6]
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d004      	beq.n	8008b92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f890 	bl	8008cb0 <USBD_CtlError>
        break;
 8008b90:	e01a      	b.n	8008bc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f043 0202 	orr.w	r2, r3, #2
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	330c      	adds	r3, #12
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f8eb 	bl	8008d92 <USBD_CtlSendData>
      break;
 8008bbc:	e004      	b.n	8008bc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f875 	bl	8008cb0 <USBD_CtlError>
      break;
 8008bc6:	bf00      	nop
  }
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	885b      	ldrh	r3, [r3, #2]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d106      	bne.n	8008bf0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f90e 	bl	8008e0c <USBD_CtlSendStatus>
  }
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d80b      	bhi.n	8008c28 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	885b      	ldrh	r3, [r3, #2]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d10c      	bne.n	8008c32 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f8f3 	bl	8008e0c <USBD_CtlSendStatus>
      }
      break;
 8008c26:	e004      	b.n	8008c32 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f840 	bl	8008cb0 <USBD_CtlError>
      break;
 8008c30:	e000      	b.n	8008c34 <USBD_ClrFeature+0x3c>
      break;
 8008c32:	bf00      	nop
  }
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	781a      	ldrb	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3301      	adds	r3, #1
 8008c64:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f7ff fabc 	bl	80081e4 <SWAPBYTE>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3301      	adds	r3, #1
 8008c78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f7ff faaf 	bl	80081e4 <SWAPBYTE>
 8008c86:	4603      	mov	r3, r0
 8008c88:	461a      	mov	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3301      	adds	r3, #1
 8008c92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3301      	adds	r3, #1
 8008c98:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f7ff faa2 	bl	80081e4 <SWAPBYTE>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	80da      	strh	r2, [r3, #6]
}
 8008ca8:	bf00      	nop
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cba:	2180      	movs	r1, #128	; 0x80
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fc45 	bl	800954c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fc41 	bl	800954c <USBD_LL_StallEP>
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b086      	sub	sp, #24
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d036      	beq.n	8008d56 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008cec:	6938      	ldr	r0, [r7, #16]
 8008cee:	f000 f836 	bl	8008d5e <USBD_GetLen>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	4413      	add	r3, r2
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	4413      	add	r3, r2
 8008d18:	2203      	movs	r2, #3
 8008d1a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d1c:	7dfb      	ldrb	r3, [r7, #23]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d22:	e013      	b.n	8008d4c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	4413      	add	r3, r2
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	7812      	ldrb	r2, [r2, #0]
 8008d2e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	3301      	adds	r3, #1
 8008d34:	613b      	str	r3, [r7, #16]
    idx++;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	4413      	add	r3, r2
 8008d42:	2200      	movs	r2, #0
 8008d44:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1e7      	bne.n	8008d24 <USBD_GetString+0x52>
 8008d54:	e000      	b.n	8008d58 <USBD_GetString+0x86>
    return;
 8008d56:	bf00      	nop
  }
}
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d6e:	e005      	b.n	8008d7c <USBD_GetLen+0x1e>
  {
    len++;
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	3301      	adds	r3, #1
 8008d74:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1f5      	bne.n	8008d70 <USBD_GetLen+0x12>
  }

  return len;
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2202      	movs	r2, #2
 8008da2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	2100      	movs	r1, #0
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 fc50 	bl	800965e <USBD_LL_Transmit>

  return USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 fc3f 	bl	800965e <USBD_LL_Transmit>

  return USBD_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 fc4f 	bl	80096a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2204      	movs	r2, #4
 8008e18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	2200      	movs	r2, #0
 8008e20:	2100      	movs	r1, #0
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fc1b 	bl	800965e <USBD_LL_Transmit>

  return USBD_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b082      	sub	sp, #8
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2205      	movs	r2, #5
 8008e3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e42:	2300      	movs	r3, #0
 8008e44:	2200      	movs	r2, #0
 8008e46:	2100      	movs	r1, #0
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fc29 	bl	80096a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	4912      	ldr	r1, [pc, #72]	; (8008ea8 <MX_USB_DEVICE_Init+0x50>)
 8008e60:	4812      	ldr	r0, [pc, #72]	; (8008eac <MX_USB_DEVICE_Init+0x54>)
 8008e62:	f7fe feae 	bl	8007bc2 <USBD_Init>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 8008e6c:	f7f8 fdfc 	bl	8001a68 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 8008e70:	490f      	ldr	r1, [pc, #60]	; (8008eb0 <MX_USB_DEVICE_Init+0x58>)
 8008e72:	480e      	ldr	r0, [pc, #56]	; (8008eac <MX_USB_DEVICE_Init+0x54>)
 8008e74:	f7fe fed5 	bl	8007c22 <USBD_RegisterClass>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 8008e7e:	f7f8 fdf3 	bl	8001a68 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 8008e82:	490c      	ldr	r1, [pc, #48]	; (8008eb4 <MX_USB_DEVICE_Init+0x5c>)
 8008e84:	4809      	ldr	r0, [pc, #36]	; (8008eac <MX_USB_DEVICE_Init+0x54>)
 8008e86:	f7fe fe85 	bl	8007b94 <USBD_Midi_RegisterInterface>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 8008e90:	f7f8 fdea 	bl	8001a68 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008e94:	4805      	ldr	r0, [pc, #20]	; (8008eac <MX_USB_DEVICE_Init+0x54>)
 8008e96:	f7fe feeb 	bl	8007c70 <USBD_Start>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 8008ea0:	f7f8 fde2 	bl	8001a68 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ea4:	bf00      	nop
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	20000100 	.word	0x20000100
 8008eac:	2000230c 	.word	0x2000230c
 8008eb0:	20000054 	.word	0x20000054
 8008eb4:	20000150 	.word	0x20000150

08008eb8 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	71fb      	strb	r3, [r7, #7]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	71bb      	strb	r3, [r7, #6]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 8008eca:	230b      	movs	r3, #11
 8008ecc:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8008ed4:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 8008ede:	79bb      	ldrb	r3, [r7, #6]
 8008ee0:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 8008ee2:	797b      	ldrb	r3, [r7, #5]
 8008ee4:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 8008ee6:	f107 0208 	add.w	r2, r7, #8
 8008eea:	2304      	movs	r3, #4
 8008eec:	2181      	movs	r1, #129	; 0x81
 8008eee:	4810      	ldr	r0, [pc, #64]	; (8008f30 <MX_USB_Send_Midi+0x78>)
 8008ef0:	f000 fbb5 	bl	800965e <USBD_LL_Transmit>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d00a      	beq.n	8008f10 <MX_USB_Send_Midi+0x58>
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	dc10      	bgt.n	8008f20 <MX_USB_Send_Midi+0x68>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d002      	beq.n	8008f08 <MX_USB_Send_Midi+0x50>
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d008      	beq.n	8008f18 <MX_USB_Send_Midi+0x60>
 8008f06:	e00b      	b.n	8008f20 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 8008f08:	480a      	ldr	r0, [pc, #40]	; (8008f34 <MX_USB_Send_Midi+0x7c>)
 8008f0a:	f000 fd89 	bl	8009a20 <puts>
        break;
 8008f0e:	e00b      	b.n	8008f28 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 8008f10:	4809      	ldr	r0, [pc, #36]	; (8008f38 <MX_USB_Send_Midi+0x80>)
 8008f12:	f000 fd85 	bl	8009a20 <puts>
        break;
 8008f16:	e007      	b.n	8008f28 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 8008f18:	4808      	ldr	r0, [pc, #32]	; (8008f3c <MX_USB_Send_Midi+0x84>)
 8008f1a:	f000 fd81 	bl	8009a20 <puts>
        break;
 8008f1e:	e003      	b.n	8008f28 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 8008f20:	4807      	ldr	r0, [pc, #28]	; (8008f40 <MX_USB_Send_Midi+0x88>)
 8008f22:	f000 fd7d 	bl	8009a20 <puts>
    }
}
 8008f26:	bf00      	nop
 8008f28:	bf00      	nop
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	2000230c 	.word	0x2000230c
 8008f34:	0800aa78 	.word	0x0800aa78
 8008f38:	0800aa7c 	.word	0x0800aa7c
 8008f3c:	0800aa8c 	.word	0x0800aa8c
 8008f40:	0800aa9c 	.word	0x0800aa9c

08008f44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2212      	movs	r2, #18
 8008f54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f56:	4b03      	ldr	r3, [pc, #12]	; (8008f64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	2000011c 	.word	0x2000011c

08008f68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	6039      	str	r1, [r7, #0]
 8008f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2204      	movs	r2, #4
 8008f78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f7a:	4b03      	ldr	r3, [pc, #12]	; (8008f88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	20000130 	.word	0x20000130

08008f8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	6039      	str	r1, [r7, #0]
 8008f96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f98:	79fb      	ldrb	r3, [r7, #7]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d105      	bne.n	8008faa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	4907      	ldr	r1, [pc, #28]	; (8008fc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fa2:	4808      	ldr	r0, [pc, #32]	; (8008fc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fa4:	f7ff fe95 	bl	8008cd2 <USBD_GetString>
 8008fa8:	e004      	b.n	8008fb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	4904      	ldr	r1, [pc, #16]	; (8008fc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fae:	4805      	ldr	r0, [pc, #20]	; (8008fc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fb0:	f7ff fe8f 	bl	8008cd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fb4:	4b02      	ldr	r3, [pc, #8]	; (8008fc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	200025dc 	.word	0x200025dc
 8008fc4:	0800aab8 	.word	0x0800aab8

08008fc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	4904      	ldr	r1, [pc, #16]	; (8008fe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fd8:	4804      	ldr	r0, [pc, #16]	; (8008fec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fda:	f7ff fe7a 	bl	8008cd2 <USBD_GetString>
  return USBD_StrDesc;
 8008fde:	4b02      	ldr	r3, [pc, #8]	; (8008fe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	200025dc 	.word	0x200025dc
 8008fec:	0800aacc 	.word	0x0800aacc

08008ff0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	6039      	str	r1, [r7, #0]
 8008ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	221a      	movs	r2, #26
 8009000:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009002:	f000 f843 	bl	800908c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009006:	4b02      	ldr	r3, [pc, #8]	; (8009010 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20000134 	.word	0x20000134

08009014 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	6039      	str	r1, [r7, #0]
 800901e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d105      	bne.n	8009032 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	4907      	ldr	r1, [pc, #28]	; (8009048 <USBD_FS_ConfigStrDescriptor+0x34>)
 800902a:	4808      	ldr	r0, [pc, #32]	; (800904c <USBD_FS_ConfigStrDescriptor+0x38>)
 800902c:	f7ff fe51 	bl	8008cd2 <USBD_GetString>
 8009030:	e004      	b.n	800903c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	4904      	ldr	r1, [pc, #16]	; (8009048 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009036:	4805      	ldr	r0, [pc, #20]	; (800904c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009038:	f7ff fe4b 	bl	8008cd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800903c:	4b02      	ldr	r3, [pc, #8]	; (8009048 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	200025dc 	.word	0x200025dc
 800904c:	0800aae0 	.word	0x0800aae0

08009050 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	6039      	str	r1, [r7, #0]
 800905a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d105      	bne.n	800906e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	4907      	ldr	r1, [pc, #28]	; (8009084 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009066:	4808      	ldr	r0, [pc, #32]	; (8009088 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009068:	f7ff fe33 	bl	8008cd2 <USBD_GetString>
 800906c:	e004      	b.n	8009078 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	4904      	ldr	r1, [pc, #16]	; (8009084 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009072:	4805      	ldr	r0, [pc, #20]	; (8009088 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009074:	f7ff fe2d 	bl	8008cd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009078:	4b02      	ldr	r3, [pc, #8]	; (8009084 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	200025dc 	.word	0x200025dc
 8009088:	0800aaf0 	.word	0x0800aaf0

0800908c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009092:	4b0f      	ldr	r3, [pc, #60]	; (80090d0 <Get_SerialNum+0x44>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009098:	4b0e      	ldr	r3, [pc, #56]	; (80090d4 <Get_SerialNum+0x48>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800909e:	4b0e      	ldr	r3, [pc, #56]	; (80090d8 <Get_SerialNum+0x4c>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4413      	add	r3, r2
 80090aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d009      	beq.n	80090c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090b2:	2208      	movs	r2, #8
 80090b4:	4909      	ldr	r1, [pc, #36]	; (80090dc <Get_SerialNum+0x50>)
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 f814 	bl	80090e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090bc:	2204      	movs	r2, #4
 80090be:	4908      	ldr	r1, [pc, #32]	; (80090e0 <Get_SerialNum+0x54>)
 80090c0:	68b8      	ldr	r0, [r7, #8]
 80090c2:	f000 f80f 	bl	80090e4 <IntToUnicode>
  }
}
 80090c6:	bf00      	nop
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	1fff7a10 	.word	0x1fff7a10
 80090d4:	1fff7a14 	.word	0x1fff7a14
 80090d8:	1fff7a18 	.word	0x1fff7a18
 80090dc:	20000136 	.word	0x20000136
 80090e0:	20000146 	.word	0x20000146

080090e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	4613      	mov	r3, r2
 80090f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090f6:	2300      	movs	r3, #0
 80090f8:	75fb      	strb	r3, [r7, #23]
 80090fa:	e027      	b.n	800914c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	0f1b      	lsrs	r3, r3, #28
 8009100:	2b09      	cmp	r3, #9
 8009102:	d80b      	bhi.n	800911c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	0f1b      	lsrs	r3, r3, #28
 8009108:	b2da      	uxtb	r2, r3
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	4619      	mov	r1, r3
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	440b      	add	r3, r1
 8009114:	3230      	adds	r2, #48	; 0x30
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	e00a      	b.n	8009132 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	0f1b      	lsrs	r3, r3, #28
 8009120:	b2da      	uxtb	r2, r3
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	4619      	mov	r1, r3
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	440b      	add	r3, r1
 800912c:	3237      	adds	r2, #55	; 0x37
 800912e:	b2d2      	uxtb	r2, r2
 8009130:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	011b      	lsls	r3, r3, #4
 8009136:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	3301      	adds	r3, #1
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	4413      	add	r3, r2
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	3301      	adds	r3, #1
 800914a:	75fb      	strb	r3, [r7, #23]
 800914c:	7dfa      	ldrb	r2, [r7, #23]
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	429a      	cmp	r2, r3
 8009152:	d3d3      	bcc.n	80090fc <IntToUnicode+0x18>
  }
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop
 8009158:	371c      	adds	r7, #28
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
	...

0800917c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	; 0x28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009184:	f107 0314 	add.w	r3, r7, #20
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	605a      	str	r2, [r3, #4]
 800918e:	609a      	str	r2, [r3, #8]
 8009190:	60da      	str	r2, [r3, #12]
 8009192:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800919c:	d13a      	bne.n	8009214 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800919e:	2300      	movs	r3, #0
 80091a0:	613b      	str	r3, [r7, #16]
 80091a2:	4b1e      	ldr	r3, [pc, #120]	; (800921c <HAL_PCD_MspInit+0xa0>)
 80091a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a6:	4a1d      	ldr	r2, [pc, #116]	; (800921c <HAL_PCD_MspInit+0xa0>)
 80091a8:	f043 0301 	orr.w	r3, r3, #1
 80091ac:	6313      	str	r3, [r2, #48]	; 0x30
 80091ae:	4b1b      	ldr	r3, [pc, #108]	; (800921c <HAL_PCD_MspInit+0xa0>)
 80091b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80091ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80091be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091c0:	2302      	movs	r3, #2
 80091c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091c4:	2300      	movs	r3, #0
 80091c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091c8:	2300      	movs	r3, #0
 80091ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091cc:	230a      	movs	r3, #10
 80091ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091d0:	f107 0314 	add.w	r3, r7, #20
 80091d4:	4619      	mov	r1, r3
 80091d6:	4812      	ldr	r0, [pc, #72]	; (8009220 <HAL_PCD_MspInit+0xa4>)
 80091d8:	f7fa f984 	bl	80034e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091dc:	4b0f      	ldr	r3, [pc, #60]	; (800921c <HAL_PCD_MspInit+0xa0>)
 80091de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e0:	4a0e      	ldr	r2, [pc, #56]	; (800921c <HAL_PCD_MspInit+0xa0>)
 80091e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e6:	6353      	str	r3, [r2, #52]	; 0x34
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	4b0b      	ldr	r3, [pc, #44]	; (800921c <HAL_PCD_MspInit+0xa0>)
 80091ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f0:	4a0a      	ldr	r2, [pc, #40]	; (800921c <HAL_PCD_MspInit+0xa0>)
 80091f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091f6:	6453      	str	r3, [r2, #68]	; 0x44
 80091f8:	4b08      	ldr	r3, [pc, #32]	; (800921c <HAL_PCD_MspInit+0xa0>)
 80091fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009200:	60fb      	str	r3, [r7, #12]
 8009202:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009204:	2200      	movs	r2, #0
 8009206:	2100      	movs	r1, #0
 8009208:	2043      	movs	r0, #67	; 0x43
 800920a:	f7fa f934 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800920e:	2043      	movs	r0, #67	; 0x43
 8009210:	f7fa f94d 	bl	80034ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009214:	bf00      	nop
 8009216:	3728      	adds	r7, #40	; 0x28
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	40023800 	.word	0x40023800
 8009220:	40020000 	.word	0x40020000

08009224 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009238:	4619      	mov	r1, r3
 800923a:	4610      	mov	r0, r2
 800923c:	f7fe fd63 	bl	8007d06 <USBD_LL_SetupStage>
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800925a:	78fa      	ldrb	r2, [r7, #3]
 800925c:	6879      	ldr	r1, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	1a9b      	subs	r3, r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	78fb      	ldrb	r3, [r7, #3]
 8009270:	4619      	mov	r1, r3
 8009272:	f7fe fd9d 	bl	8007db0 <USBD_LL_DataOutStage>
}
 8009276:	bf00      	nop
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	6879      	ldr	r1, [r7, #4]
 8009294:	4613      	mov	r3, r2
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	440b      	add	r3, r1
 800929e:	3348      	adds	r3, #72	; 0x48
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	4619      	mov	r1, r3
 80092a6:	f7fe fde6 	bl	8007e76 <USBD_LL_DataInStage>
}
 80092aa:	bf00      	nop
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe fefa 	bl	80080ba <USBD_LL_SOF>
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092d6:	2301      	movs	r3, #1
 80092d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d001      	beq.n	80092e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092e2:	f7f8 fbc1 	bl	8001a68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092ec:	7bfa      	ldrb	r2, [r7, #15]
 80092ee:	4611      	mov	r1, r2
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fe fea4 	bl	800803e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fe50 	bl	8007fa2 <USBD_LL_Reset>
}
 8009302:	bf00      	nop
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
	...

0800930c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe fe9f 	bl	800805e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009332:	f043 0301 	orr.w	r3, r3, #1
 8009336:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a1b      	ldr	r3, [r3, #32]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d005      	beq.n	800934c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009340:	4b04      	ldr	r3, [pc, #16]	; (8009354 <HAL_PCD_SuspendCallback+0x48>)
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	4a03      	ldr	r2, [pc, #12]	; (8009354 <HAL_PCD_SuspendCallback+0x48>)
 8009346:	f043 0306 	orr.w	r3, r3, #6
 800934a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	e000ed00 	.word	0xe000ed00

08009358 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe fe8f 	bl	800808a <USBD_LL_Resume>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009386:	78fa      	ldrb	r2, [r7, #3]
 8009388:	4611      	mov	r1, r2
 800938a:	4618      	mov	r0, r3
 800938c:	f7fe fedd 	bl	800814a <USBD_LL_IsoOUTIncomplete>
}
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093aa:	78fa      	ldrb	r2, [r7, #3]
 80093ac:	4611      	mov	r1, r2
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fea5 	bl	80080fe <USBD_LL_IsoINIncomplete>
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fee3 	bl	8008196 <USBD_LL_DevConnected>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fee0 	bl	80081ac <USBD_LL_DevDisconnected>
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d13c      	bne.n	800947e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009404:	4a20      	ldr	r2, [pc, #128]	; (8009488 <USBD_LL_Init+0x94>)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <USBD_LL_Init+0x94>)
 8009410:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009414:	4b1c      	ldr	r3, [pc, #112]	; (8009488 <USBD_LL_Init+0x94>)
 8009416:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800941a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800941c:	4b1a      	ldr	r3, [pc, #104]	; (8009488 <USBD_LL_Init+0x94>)
 800941e:	2204      	movs	r2, #4
 8009420:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009422:	4b19      	ldr	r3, [pc, #100]	; (8009488 <USBD_LL_Init+0x94>)
 8009424:	2202      	movs	r2, #2
 8009426:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009428:	4b17      	ldr	r3, [pc, #92]	; (8009488 <USBD_LL_Init+0x94>)
 800942a:	2200      	movs	r2, #0
 800942c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800942e:	4b16      	ldr	r3, [pc, #88]	; (8009488 <USBD_LL_Init+0x94>)
 8009430:	2202      	movs	r2, #2
 8009432:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009434:	4b14      	ldr	r3, [pc, #80]	; (8009488 <USBD_LL_Init+0x94>)
 8009436:	2200      	movs	r2, #0
 8009438:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800943a:	4b13      	ldr	r3, [pc, #76]	; (8009488 <USBD_LL_Init+0x94>)
 800943c:	2200      	movs	r2, #0
 800943e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009440:	4b11      	ldr	r3, [pc, #68]	; (8009488 <USBD_LL_Init+0x94>)
 8009442:	2200      	movs	r2, #0
 8009444:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009446:	4b10      	ldr	r3, [pc, #64]	; (8009488 <USBD_LL_Init+0x94>)
 8009448:	2200      	movs	r2, #0
 800944a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800944c:	4b0e      	ldr	r3, [pc, #56]	; (8009488 <USBD_LL_Init+0x94>)
 800944e:	2200      	movs	r2, #0
 8009450:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009452:	480d      	ldr	r0, [pc, #52]	; (8009488 <USBD_LL_Init+0x94>)
 8009454:	f7fa fff1 	bl	800443a <HAL_PCD_Init>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800945e:	f7f8 fb03 	bl	8001a68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009462:	2180      	movs	r1, #128	; 0x80
 8009464:	4808      	ldr	r0, [pc, #32]	; (8009488 <USBD_LL_Init+0x94>)
 8009466:	f7fc f94e 	bl	8005706 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800946a:	2240      	movs	r2, #64	; 0x40
 800946c:	2100      	movs	r1, #0
 800946e:	4806      	ldr	r0, [pc, #24]	; (8009488 <USBD_LL_Init+0x94>)
 8009470:	f7fc f902 	bl	8005678 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009474:	2280      	movs	r2, #128	; 0x80
 8009476:	2101      	movs	r1, #1
 8009478:	4803      	ldr	r0, [pc, #12]	; (8009488 <USBD_LL_Init+0x94>)
 800947a:	f7fc f8fd 	bl	8005678 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	200027dc 	.word	0x200027dc

0800948c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fb f8e6 	bl	8004674 <HAL_PCD_Start>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 f938 	bl	8009724 <USBD_Get_USB_Status>
 80094b4:	4603      	mov	r3, r0
 80094b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	4608      	mov	r0, r1
 80094cc:	4611      	mov	r1, r2
 80094ce:	461a      	mov	r2, r3
 80094d0:	4603      	mov	r3, r0
 80094d2:	70fb      	strb	r3, [r7, #3]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70bb      	strb	r3, [r7, #2]
 80094d8:	4613      	mov	r3, r2
 80094da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094ea:	78bb      	ldrb	r3, [r7, #2]
 80094ec:	883a      	ldrh	r2, [r7, #0]
 80094ee:	78f9      	ldrb	r1, [r7, #3]
 80094f0:	f7fb fcca 	bl	8004e88 <HAL_PCD_EP_Open>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 f912 	bl	8009724 <USBD_Get_USB_Status>
 8009500:	4603      	mov	r3, r0
 8009502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009504:	7bbb      	ldrb	r3, [r7, #14]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	460b      	mov	r3, r1
 8009518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009528:	78fa      	ldrb	r2, [r7, #3]
 800952a:	4611      	mov	r1, r2
 800952c:	4618      	mov	r0, r3
 800952e:	f7fb fd13 	bl	8004f58 <HAL_PCD_EP_Close>
 8009532:	4603      	mov	r3, r0
 8009534:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009536:	7bfb      	ldrb	r3, [r7, #15]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 f8f3 	bl	8009724 <USBD_Get_USB_Status>
 800953e:	4603      	mov	r3, r0
 8009540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009542:	7bbb      	ldrb	r3, [r7, #14]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009566:	78fa      	ldrb	r2, [r7, #3]
 8009568:	4611      	mov	r1, r2
 800956a:	4618      	mov	r0, r3
 800956c:	f7fb fdeb 	bl	8005146 <HAL_PCD_EP_SetStall>
 8009570:	4603      	mov	r3, r0
 8009572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	4618      	mov	r0, r3
 8009578:	f000 f8d4 	bl	8009724 <USBD_Get_USB_Status>
 800957c:	4603      	mov	r3, r0
 800957e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009580:	7bbb      	ldrb	r3, [r7, #14]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095a4:	78fa      	ldrb	r2, [r7, #3]
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fb fe30 	bl	800520e <HAL_PCD_EP_ClrStall>
 80095ae:	4603      	mov	r3, r0
 80095b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 f8b5 	bl	8009724 <USBD_Get_USB_Status>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095be:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	da0b      	bge.n	80095fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	4613      	mov	r3, r2
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	1a9b      	subs	r3, r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	333e      	adds	r3, #62	; 0x3e
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	e00b      	b.n	8009614 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009602:	68f9      	ldr	r1, [r7, #12]
 8009604:	4613      	mov	r3, r2
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	1a9b      	subs	r3, r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009612:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800963a:	78fa      	ldrb	r2, [r7, #3]
 800963c:	4611      	mov	r1, r2
 800963e:	4618      	mov	r0, r3
 8009640:	f7fb fbfd 	bl	8004e3e <HAL_PCD_SetAddress>
 8009644:	4603      	mov	r3, r0
 8009646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	4618      	mov	r0, r3
 800964c:	f000 f86a 	bl	8009724 <USBD_Get_USB_Status>
 8009650:	4603      	mov	r3, r0
 8009652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009654:	7bbb      	ldrb	r3, [r7, #14]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b086      	sub	sp, #24
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	603b      	str	r3, [r7, #0]
 800966a:	460b      	mov	r3, r1
 800966c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800967c:	7af9      	ldrb	r1, [r7, #11]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	f7fb fd16 	bl	80050b2 <HAL_PCD_EP_Transmit>
 8009686:	4603      	mov	r3, r0
 8009688:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	4618      	mov	r0, r3
 800968e:	f000 f849 	bl	8009724 <USBD_Get_USB_Status>
 8009692:	4603      	mov	r3, r0
 8009694:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009696:	7dbb      	ldrb	r3, [r7, #22]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	460b      	mov	r3, r1
 80096ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096be:	7af9      	ldrb	r1, [r7, #11]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	f7fb fc92 	bl	8004fec <HAL_PCD_EP_Receive>
 80096c8:	4603      	mov	r3, r0
 80096ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 f828 	bl	8009724 <USBD_Get_USB_Status>
 80096d4:	4603      	mov	r3, r0
 80096d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	460b      	mov	r3, r1
 80096ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	4611      	mov	r1, r2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fb fcc2 	bl	8005082 <HAL_PCD_EP_GetRxCount>
 80096fe:	4603      	mov	r3, r0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009710:	4b03      	ldr	r3, [pc, #12]	; (8009720 <USBD_static_malloc+0x18>)
}
 8009712:	4618      	mov	r0, r3
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	200005ec 	.word	0x200005ec

08009724 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	2b03      	cmp	r3, #3
 8009736:	d817      	bhi.n	8009768 <USBD_Get_USB_Status+0x44>
 8009738:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <USBD_Get_USB_Status+0x1c>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	08009751 	.word	0x08009751
 8009744:	08009757 	.word	0x08009757
 8009748:	0800975d 	.word	0x0800975d
 800974c:	08009763 	.word	0x08009763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
    break;
 8009754:	e00b      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009756:	2303      	movs	r3, #3
 8009758:	73fb      	strb	r3, [r7, #15]
    break;
 800975a:	e008      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800975c:	2301      	movs	r3, #1
 800975e:	73fb      	strb	r3, [r7, #15]
    break;
 8009760:	e005      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009762:	2303      	movs	r3, #3
 8009764:	73fb      	strb	r3, [r7, #15]
    break;
 8009766:	e002      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009768:	2303      	movs	r3, #3
 800976a:	73fb      	strb	r3, [r7, #15]
    break;
 800976c:	bf00      	nop
  }
  return usb_status;
 800976e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <__errno>:
 800977c:	4b01      	ldr	r3, [pc, #4]	; (8009784 <__errno+0x8>)
 800977e:	6818      	ldr	r0, [r3, #0]
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20000154 	.word	0x20000154

08009788 <__libc_init_array>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	4d0d      	ldr	r5, [pc, #52]	; (80097c0 <__libc_init_array+0x38>)
 800978c:	4c0d      	ldr	r4, [pc, #52]	; (80097c4 <__libc_init_array+0x3c>)
 800978e:	1b64      	subs	r4, r4, r5
 8009790:	10a4      	asrs	r4, r4, #2
 8009792:	2600      	movs	r6, #0
 8009794:	42a6      	cmp	r6, r4
 8009796:	d109      	bne.n	80097ac <__libc_init_array+0x24>
 8009798:	4d0b      	ldr	r5, [pc, #44]	; (80097c8 <__libc_init_array+0x40>)
 800979a:	4c0c      	ldr	r4, [pc, #48]	; (80097cc <__libc_init_array+0x44>)
 800979c:	f001 f87c 	bl	800a898 <_init>
 80097a0:	1b64      	subs	r4, r4, r5
 80097a2:	10a4      	asrs	r4, r4, #2
 80097a4:	2600      	movs	r6, #0
 80097a6:	42a6      	cmp	r6, r4
 80097a8:	d105      	bne.n	80097b6 <__libc_init_array+0x2e>
 80097aa:	bd70      	pop	{r4, r5, r6, pc}
 80097ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b0:	4798      	blx	r3
 80097b2:	3601      	adds	r6, #1
 80097b4:	e7ee      	b.n	8009794 <__libc_init_array+0xc>
 80097b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ba:	4798      	blx	r3
 80097bc:	3601      	adds	r6, #1
 80097be:	e7f2      	b.n	80097a6 <__libc_init_array+0x1e>
 80097c0:	0800be50 	.word	0x0800be50
 80097c4:	0800be50 	.word	0x0800be50
 80097c8:	0800be50 	.word	0x0800be50
 80097cc:	0800be54 	.word	0x0800be54

080097d0 <malloc>:
 80097d0:	4b02      	ldr	r3, [pc, #8]	; (80097dc <malloc+0xc>)
 80097d2:	4601      	mov	r1, r0
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	f000 b85b 	b.w	8009890 <_malloc_r>
 80097da:	bf00      	nop
 80097dc:	20000154 	.word	0x20000154

080097e0 <memset>:
 80097e0:	4402      	add	r2, r0
 80097e2:	4603      	mov	r3, r0
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d100      	bne.n	80097ea <memset+0xa>
 80097e8:	4770      	bx	lr
 80097ea:	f803 1b01 	strb.w	r1, [r3], #1
 80097ee:	e7f9      	b.n	80097e4 <memset+0x4>

080097f0 <_free_r>:
 80097f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097f2:	2900      	cmp	r1, #0
 80097f4:	d048      	beq.n	8009888 <_free_r+0x98>
 80097f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fa:	9001      	str	r0, [sp, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009802:	bfb8      	it	lt
 8009804:	18e4      	addlt	r4, r4, r3
 8009806:	f000 fc49 	bl	800a09c <__malloc_lock>
 800980a:	4a20      	ldr	r2, [pc, #128]	; (800988c <_free_r+0x9c>)
 800980c:	9801      	ldr	r0, [sp, #4]
 800980e:	6813      	ldr	r3, [r2, #0]
 8009810:	4615      	mov	r5, r2
 8009812:	b933      	cbnz	r3, 8009822 <_free_r+0x32>
 8009814:	6063      	str	r3, [r4, #4]
 8009816:	6014      	str	r4, [r2, #0]
 8009818:	b003      	add	sp, #12
 800981a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800981e:	f000 bc43 	b.w	800a0a8 <__malloc_unlock>
 8009822:	42a3      	cmp	r3, r4
 8009824:	d90b      	bls.n	800983e <_free_r+0x4e>
 8009826:	6821      	ldr	r1, [r4, #0]
 8009828:	1862      	adds	r2, r4, r1
 800982a:	4293      	cmp	r3, r2
 800982c:	bf04      	itt	eq
 800982e:	681a      	ldreq	r2, [r3, #0]
 8009830:	685b      	ldreq	r3, [r3, #4]
 8009832:	6063      	str	r3, [r4, #4]
 8009834:	bf04      	itt	eq
 8009836:	1852      	addeq	r2, r2, r1
 8009838:	6022      	streq	r2, [r4, #0]
 800983a:	602c      	str	r4, [r5, #0]
 800983c:	e7ec      	b.n	8009818 <_free_r+0x28>
 800983e:	461a      	mov	r2, r3
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	b10b      	cbz	r3, 8009848 <_free_r+0x58>
 8009844:	42a3      	cmp	r3, r4
 8009846:	d9fa      	bls.n	800983e <_free_r+0x4e>
 8009848:	6811      	ldr	r1, [r2, #0]
 800984a:	1855      	adds	r5, r2, r1
 800984c:	42a5      	cmp	r5, r4
 800984e:	d10b      	bne.n	8009868 <_free_r+0x78>
 8009850:	6824      	ldr	r4, [r4, #0]
 8009852:	4421      	add	r1, r4
 8009854:	1854      	adds	r4, r2, r1
 8009856:	42a3      	cmp	r3, r4
 8009858:	6011      	str	r1, [r2, #0]
 800985a:	d1dd      	bne.n	8009818 <_free_r+0x28>
 800985c:	681c      	ldr	r4, [r3, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	6053      	str	r3, [r2, #4]
 8009862:	4421      	add	r1, r4
 8009864:	6011      	str	r1, [r2, #0]
 8009866:	e7d7      	b.n	8009818 <_free_r+0x28>
 8009868:	d902      	bls.n	8009870 <_free_r+0x80>
 800986a:	230c      	movs	r3, #12
 800986c:	6003      	str	r3, [r0, #0]
 800986e:	e7d3      	b.n	8009818 <_free_r+0x28>
 8009870:	6825      	ldr	r5, [r4, #0]
 8009872:	1961      	adds	r1, r4, r5
 8009874:	428b      	cmp	r3, r1
 8009876:	bf04      	itt	eq
 8009878:	6819      	ldreq	r1, [r3, #0]
 800987a:	685b      	ldreq	r3, [r3, #4]
 800987c:	6063      	str	r3, [r4, #4]
 800987e:	bf04      	itt	eq
 8009880:	1949      	addeq	r1, r1, r5
 8009882:	6021      	streq	r1, [r4, #0]
 8009884:	6054      	str	r4, [r2, #4]
 8009886:	e7c7      	b.n	8009818 <_free_r+0x28>
 8009888:	b003      	add	sp, #12
 800988a:	bd30      	pop	{r4, r5, pc}
 800988c:	200021c0 	.word	0x200021c0

08009890 <_malloc_r>:
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009892:	1ccd      	adds	r5, r1, #3
 8009894:	f025 0503 	bic.w	r5, r5, #3
 8009898:	3508      	adds	r5, #8
 800989a:	2d0c      	cmp	r5, #12
 800989c:	bf38      	it	cc
 800989e:	250c      	movcc	r5, #12
 80098a0:	2d00      	cmp	r5, #0
 80098a2:	4606      	mov	r6, r0
 80098a4:	db01      	blt.n	80098aa <_malloc_r+0x1a>
 80098a6:	42a9      	cmp	r1, r5
 80098a8:	d903      	bls.n	80098b2 <_malloc_r+0x22>
 80098aa:	230c      	movs	r3, #12
 80098ac:	6033      	str	r3, [r6, #0]
 80098ae:	2000      	movs	r0, #0
 80098b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b2:	f000 fbf3 	bl	800a09c <__malloc_lock>
 80098b6:	4921      	ldr	r1, [pc, #132]	; (800993c <_malloc_r+0xac>)
 80098b8:	680a      	ldr	r2, [r1, #0]
 80098ba:	4614      	mov	r4, r2
 80098bc:	b99c      	cbnz	r4, 80098e6 <_malloc_r+0x56>
 80098be:	4f20      	ldr	r7, [pc, #128]	; (8009940 <_malloc_r+0xb0>)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	b923      	cbnz	r3, 80098ce <_malloc_r+0x3e>
 80098c4:	4621      	mov	r1, r4
 80098c6:	4630      	mov	r0, r6
 80098c8:	f000 f8b2 	bl	8009a30 <_sbrk_r>
 80098cc:	6038      	str	r0, [r7, #0]
 80098ce:	4629      	mov	r1, r5
 80098d0:	4630      	mov	r0, r6
 80098d2:	f000 f8ad 	bl	8009a30 <_sbrk_r>
 80098d6:	1c43      	adds	r3, r0, #1
 80098d8:	d123      	bne.n	8009922 <_malloc_r+0x92>
 80098da:	230c      	movs	r3, #12
 80098dc:	6033      	str	r3, [r6, #0]
 80098de:	4630      	mov	r0, r6
 80098e0:	f000 fbe2 	bl	800a0a8 <__malloc_unlock>
 80098e4:	e7e3      	b.n	80098ae <_malloc_r+0x1e>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	1b5b      	subs	r3, r3, r5
 80098ea:	d417      	bmi.n	800991c <_malloc_r+0x8c>
 80098ec:	2b0b      	cmp	r3, #11
 80098ee:	d903      	bls.n	80098f8 <_malloc_r+0x68>
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	441c      	add	r4, r3
 80098f4:	6025      	str	r5, [r4, #0]
 80098f6:	e004      	b.n	8009902 <_malloc_r+0x72>
 80098f8:	6863      	ldr	r3, [r4, #4]
 80098fa:	42a2      	cmp	r2, r4
 80098fc:	bf0c      	ite	eq
 80098fe:	600b      	streq	r3, [r1, #0]
 8009900:	6053      	strne	r3, [r2, #4]
 8009902:	4630      	mov	r0, r6
 8009904:	f000 fbd0 	bl	800a0a8 <__malloc_unlock>
 8009908:	f104 000b 	add.w	r0, r4, #11
 800990c:	1d23      	adds	r3, r4, #4
 800990e:	f020 0007 	bic.w	r0, r0, #7
 8009912:	1ac2      	subs	r2, r0, r3
 8009914:	d0cc      	beq.n	80098b0 <_malloc_r+0x20>
 8009916:	1a1b      	subs	r3, r3, r0
 8009918:	50a3      	str	r3, [r4, r2]
 800991a:	e7c9      	b.n	80098b0 <_malloc_r+0x20>
 800991c:	4622      	mov	r2, r4
 800991e:	6864      	ldr	r4, [r4, #4]
 8009920:	e7cc      	b.n	80098bc <_malloc_r+0x2c>
 8009922:	1cc4      	adds	r4, r0, #3
 8009924:	f024 0403 	bic.w	r4, r4, #3
 8009928:	42a0      	cmp	r0, r4
 800992a:	d0e3      	beq.n	80098f4 <_malloc_r+0x64>
 800992c:	1a21      	subs	r1, r4, r0
 800992e:	4630      	mov	r0, r6
 8009930:	f000 f87e 	bl	8009a30 <_sbrk_r>
 8009934:	3001      	adds	r0, #1
 8009936:	d1dd      	bne.n	80098f4 <_malloc_r+0x64>
 8009938:	e7cf      	b.n	80098da <_malloc_r+0x4a>
 800993a:	bf00      	nop
 800993c:	200021c0 	.word	0x200021c0
 8009940:	200021c4 	.word	0x200021c4

08009944 <_puts_r>:
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	460e      	mov	r6, r1
 8009948:	4605      	mov	r5, r0
 800994a:	b118      	cbz	r0, 8009954 <_puts_r+0x10>
 800994c:	6983      	ldr	r3, [r0, #24]
 800994e:	b90b      	cbnz	r3, 8009954 <_puts_r+0x10>
 8009950:	f000 faa0 	bl	8009e94 <__sinit>
 8009954:	69ab      	ldr	r3, [r5, #24]
 8009956:	68ac      	ldr	r4, [r5, #8]
 8009958:	b913      	cbnz	r3, 8009960 <_puts_r+0x1c>
 800995a:	4628      	mov	r0, r5
 800995c:	f000 fa9a 	bl	8009e94 <__sinit>
 8009960:	4b2c      	ldr	r3, [pc, #176]	; (8009a14 <_puts_r+0xd0>)
 8009962:	429c      	cmp	r4, r3
 8009964:	d120      	bne.n	80099a8 <_puts_r+0x64>
 8009966:	686c      	ldr	r4, [r5, #4]
 8009968:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800996a:	07db      	lsls	r3, r3, #31
 800996c:	d405      	bmi.n	800997a <_puts_r+0x36>
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	0598      	lsls	r0, r3, #22
 8009972:	d402      	bmi.n	800997a <_puts_r+0x36>
 8009974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009976:	f000 fb2b 	bl	8009fd0 <__retarget_lock_acquire_recursive>
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	0719      	lsls	r1, r3, #28
 800997e:	d51d      	bpl.n	80099bc <_puts_r+0x78>
 8009980:	6923      	ldr	r3, [r4, #16]
 8009982:	b1db      	cbz	r3, 80099bc <_puts_r+0x78>
 8009984:	3e01      	subs	r6, #1
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800998c:	3b01      	subs	r3, #1
 800998e:	60a3      	str	r3, [r4, #8]
 8009990:	bb39      	cbnz	r1, 80099e2 <_puts_r+0x9e>
 8009992:	2b00      	cmp	r3, #0
 8009994:	da38      	bge.n	8009a08 <_puts_r+0xc4>
 8009996:	4622      	mov	r2, r4
 8009998:	210a      	movs	r1, #10
 800999a:	4628      	mov	r0, r5
 800999c:	f000 f8a0 	bl	8009ae0 <__swbuf_r>
 80099a0:	3001      	adds	r0, #1
 80099a2:	d011      	beq.n	80099c8 <_puts_r+0x84>
 80099a4:	250a      	movs	r5, #10
 80099a6:	e011      	b.n	80099cc <_puts_r+0x88>
 80099a8:	4b1b      	ldr	r3, [pc, #108]	; (8009a18 <_puts_r+0xd4>)
 80099aa:	429c      	cmp	r4, r3
 80099ac:	d101      	bne.n	80099b2 <_puts_r+0x6e>
 80099ae:	68ac      	ldr	r4, [r5, #8]
 80099b0:	e7da      	b.n	8009968 <_puts_r+0x24>
 80099b2:	4b1a      	ldr	r3, [pc, #104]	; (8009a1c <_puts_r+0xd8>)
 80099b4:	429c      	cmp	r4, r3
 80099b6:	bf08      	it	eq
 80099b8:	68ec      	ldreq	r4, [r5, #12]
 80099ba:	e7d5      	b.n	8009968 <_puts_r+0x24>
 80099bc:	4621      	mov	r1, r4
 80099be:	4628      	mov	r0, r5
 80099c0:	f000 f8e0 	bl	8009b84 <__swsetup_r>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d0dd      	beq.n	8009984 <_puts_r+0x40>
 80099c8:	f04f 35ff 	mov.w	r5, #4294967295
 80099cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099ce:	07da      	lsls	r2, r3, #31
 80099d0:	d405      	bmi.n	80099de <_puts_r+0x9a>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	059b      	lsls	r3, r3, #22
 80099d6:	d402      	bmi.n	80099de <_puts_r+0x9a>
 80099d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099da:	f000 fafa 	bl	8009fd2 <__retarget_lock_release_recursive>
 80099de:	4628      	mov	r0, r5
 80099e0:	bd70      	pop	{r4, r5, r6, pc}
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	da04      	bge.n	80099f0 <_puts_r+0xac>
 80099e6:	69a2      	ldr	r2, [r4, #24]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	dc06      	bgt.n	80099fa <_puts_r+0xb6>
 80099ec:	290a      	cmp	r1, #10
 80099ee:	d004      	beq.n	80099fa <_puts_r+0xb6>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	6022      	str	r2, [r4, #0]
 80099f6:	7019      	strb	r1, [r3, #0]
 80099f8:	e7c5      	b.n	8009986 <_puts_r+0x42>
 80099fa:	4622      	mov	r2, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	f000 f86f 	bl	8009ae0 <__swbuf_r>
 8009a02:	3001      	adds	r0, #1
 8009a04:	d1bf      	bne.n	8009986 <_puts_r+0x42>
 8009a06:	e7df      	b.n	80099c8 <_puts_r+0x84>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	250a      	movs	r5, #10
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	6022      	str	r2, [r4, #0]
 8009a10:	701d      	strb	r5, [r3, #0]
 8009a12:	e7db      	b.n	80099cc <_puts_r+0x88>
 8009a14:	0800bdd4 	.word	0x0800bdd4
 8009a18:	0800bdf4 	.word	0x0800bdf4
 8009a1c:	0800bdb4 	.word	0x0800bdb4

08009a20 <puts>:
 8009a20:	4b02      	ldr	r3, [pc, #8]	; (8009a2c <puts+0xc>)
 8009a22:	4601      	mov	r1, r0
 8009a24:	6818      	ldr	r0, [r3, #0]
 8009a26:	f7ff bf8d 	b.w	8009944 <_puts_r>
 8009a2a:	bf00      	nop
 8009a2c:	20000154 	.word	0x20000154

08009a30 <_sbrk_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4d06      	ldr	r5, [pc, #24]	; (8009a4c <_sbrk_r+0x1c>)
 8009a34:	2300      	movs	r3, #0
 8009a36:	4604      	mov	r4, r0
 8009a38:	4608      	mov	r0, r1
 8009a3a:	602b      	str	r3, [r5, #0]
 8009a3c:	f7f8 fec6 	bl	80027cc <_sbrk>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d102      	bne.n	8009a4a <_sbrk_r+0x1a>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	b103      	cbz	r3, 8009a4a <_sbrk_r+0x1a>
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	20002bf0 	.word	0x20002bf0

08009a50 <sniprintf>:
 8009a50:	b40c      	push	{r2, r3}
 8009a52:	b530      	push	{r4, r5, lr}
 8009a54:	4b17      	ldr	r3, [pc, #92]	; (8009ab4 <sniprintf+0x64>)
 8009a56:	1e0c      	subs	r4, r1, #0
 8009a58:	681d      	ldr	r5, [r3, #0]
 8009a5a:	b09d      	sub	sp, #116	; 0x74
 8009a5c:	da08      	bge.n	8009a70 <sniprintf+0x20>
 8009a5e:	238b      	movs	r3, #139	; 0x8b
 8009a60:	602b      	str	r3, [r5, #0]
 8009a62:	f04f 30ff 	mov.w	r0, #4294967295
 8009a66:	b01d      	add	sp, #116	; 0x74
 8009a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a6c:	b002      	add	sp, #8
 8009a6e:	4770      	bx	lr
 8009a70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009a74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009a78:	bf14      	ite	ne
 8009a7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009a7e:	4623      	moveq	r3, r4
 8009a80:	9304      	str	r3, [sp, #16]
 8009a82:	9307      	str	r3, [sp, #28]
 8009a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a88:	9002      	str	r0, [sp, #8]
 8009a8a:	9006      	str	r0, [sp, #24]
 8009a8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009a90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a92:	ab21      	add	r3, sp, #132	; 0x84
 8009a94:	a902      	add	r1, sp, #8
 8009a96:	4628      	mov	r0, r5
 8009a98:	9301      	str	r3, [sp, #4]
 8009a9a:	f000 fb67 	bl	800a16c <_svfiprintf_r>
 8009a9e:	1c43      	adds	r3, r0, #1
 8009aa0:	bfbc      	itt	lt
 8009aa2:	238b      	movlt	r3, #139	; 0x8b
 8009aa4:	602b      	strlt	r3, [r5, #0]
 8009aa6:	2c00      	cmp	r4, #0
 8009aa8:	d0dd      	beq.n	8009a66 <sniprintf+0x16>
 8009aaa:	9b02      	ldr	r3, [sp, #8]
 8009aac:	2200      	movs	r2, #0
 8009aae:	701a      	strb	r2, [r3, #0]
 8009ab0:	e7d9      	b.n	8009a66 <sniprintf+0x16>
 8009ab2:	bf00      	nop
 8009ab4:	20000154 	.word	0x20000154

08009ab8 <strncpy>:
 8009ab8:	b510      	push	{r4, lr}
 8009aba:	3901      	subs	r1, #1
 8009abc:	4603      	mov	r3, r0
 8009abe:	b132      	cbz	r2, 8009ace <strncpy+0x16>
 8009ac0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ac4:	f803 4b01 	strb.w	r4, [r3], #1
 8009ac8:	3a01      	subs	r2, #1
 8009aca:	2c00      	cmp	r4, #0
 8009acc:	d1f7      	bne.n	8009abe <strncpy+0x6>
 8009ace:	441a      	add	r2, r3
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d100      	bne.n	8009ad8 <strncpy+0x20>
 8009ad6:	bd10      	pop	{r4, pc}
 8009ad8:	f803 1b01 	strb.w	r1, [r3], #1
 8009adc:	e7f9      	b.n	8009ad2 <strncpy+0x1a>
	...

08009ae0 <__swbuf_r>:
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae2:	460e      	mov	r6, r1
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	b118      	cbz	r0, 8009af2 <__swbuf_r+0x12>
 8009aea:	6983      	ldr	r3, [r0, #24]
 8009aec:	b90b      	cbnz	r3, 8009af2 <__swbuf_r+0x12>
 8009aee:	f000 f9d1 	bl	8009e94 <__sinit>
 8009af2:	4b21      	ldr	r3, [pc, #132]	; (8009b78 <__swbuf_r+0x98>)
 8009af4:	429c      	cmp	r4, r3
 8009af6:	d12b      	bne.n	8009b50 <__swbuf_r+0x70>
 8009af8:	686c      	ldr	r4, [r5, #4]
 8009afa:	69a3      	ldr	r3, [r4, #24]
 8009afc:	60a3      	str	r3, [r4, #8]
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	071a      	lsls	r2, r3, #28
 8009b02:	d52f      	bpl.n	8009b64 <__swbuf_r+0x84>
 8009b04:	6923      	ldr	r3, [r4, #16]
 8009b06:	b36b      	cbz	r3, 8009b64 <__swbuf_r+0x84>
 8009b08:	6923      	ldr	r3, [r4, #16]
 8009b0a:	6820      	ldr	r0, [r4, #0]
 8009b0c:	1ac0      	subs	r0, r0, r3
 8009b0e:	6963      	ldr	r3, [r4, #20]
 8009b10:	b2f6      	uxtb	r6, r6
 8009b12:	4283      	cmp	r3, r0
 8009b14:	4637      	mov	r7, r6
 8009b16:	dc04      	bgt.n	8009b22 <__swbuf_r+0x42>
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f000 f926 	bl	8009d6c <_fflush_r>
 8009b20:	bb30      	cbnz	r0, 8009b70 <__swbuf_r+0x90>
 8009b22:	68a3      	ldr	r3, [r4, #8]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	60a3      	str	r3, [r4, #8]
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	6022      	str	r2, [r4, #0]
 8009b2e:	701e      	strb	r6, [r3, #0]
 8009b30:	6963      	ldr	r3, [r4, #20]
 8009b32:	3001      	adds	r0, #1
 8009b34:	4283      	cmp	r3, r0
 8009b36:	d004      	beq.n	8009b42 <__swbuf_r+0x62>
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	07db      	lsls	r3, r3, #31
 8009b3c:	d506      	bpl.n	8009b4c <__swbuf_r+0x6c>
 8009b3e:	2e0a      	cmp	r6, #10
 8009b40:	d104      	bne.n	8009b4c <__swbuf_r+0x6c>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4628      	mov	r0, r5
 8009b46:	f000 f911 	bl	8009d6c <_fflush_r>
 8009b4a:	b988      	cbnz	r0, 8009b70 <__swbuf_r+0x90>
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <__swbuf_r+0x9c>)
 8009b52:	429c      	cmp	r4, r3
 8009b54:	d101      	bne.n	8009b5a <__swbuf_r+0x7a>
 8009b56:	68ac      	ldr	r4, [r5, #8]
 8009b58:	e7cf      	b.n	8009afa <__swbuf_r+0x1a>
 8009b5a:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <__swbuf_r+0xa0>)
 8009b5c:	429c      	cmp	r4, r3
 8009b5e:	bf08      	it	eq
 8009b60:	68ec      	ldreq	r4, [r5, #12]
 8009b62:	e7ca      	b.n	8009afa <__swbuf_r+0x1a>
 8009b64:	4621      	mov	r1, r4
 8009b66:	4628      	mov	r0, r5
 8009b68:	f000 f80c 	bl	8009b84 <__swsetup_r>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d0cb      	beq.n	8009b08 <__swbuf_r+0x28>
 8009b70:	f04f 37ff 	mov.w	r7, #4294967295
 8009b74:	e7ea      	b.n	8009b4c <__swbuf_r+0x6c>
 8009b76:	bf00      	nop
 8009b78:	0800bdd4 	.word	0x0800bdd4
 8009b7c:	0800bdf4 	.word	0x0800bdf4
 8009b80:	0800bdb4 	.word	0x0800bdb4

08009b84 <__swsetup_r>:
 8009b84:	4b32      	ldr	r3, [pc, #200]	; (8009c50 <__swsetup_r+0xcc>)
 8009b86:	b570      	push	{r4, r5, r6, lr}
 8009b88:	681d      	ldr	r5, [r3, #0]
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	b125      	cbz	r5, 8009b9a <__swsetup_r+0x16>
 8009b90:	69ab      	ldr	r3, [r5, #24]
 8009b92:	b913      	cbnz	r3, 8009b9a <__swsetup_r+0x16>
 8009b94:	4628      	mov	r0, r5
 8009b96:	f000 f97d 	bl	8009e94 <__sinit>
 8009b9a:	4b2e      	ldr	r3, [pc, #184]	; (8009c54 <__swsetup_r+0xd0>)
 8009b9c:	429c      	cmp	r4, r3
 8009b9e:	d10f      	bne.n	8009bc0 <__swsetup_r+0x3c>
 8009ba0:	686c      	ldr	r4, [r5, #4]
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ba8:	0719      	lsls	r1, r3, #28
 8009baa:	d42c      	bmi.n	8009c06 <__swsetup_r+0x82>
 8009bac:	06dd      	lsls	r5, r3, #27
 8009bae:	d411      	bmi.n	8009bd4 <__swsetup_r+0x50>
 8009bb0:	2309      	movs	r3, #9
 8009bb2:	6033      	str	r3, [r6, #0]
 8009bb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bb8:	81a3      	strh	r3, [r4, #12]
 8009bba:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbe:	e03e      	b.n	8009c3e <__swsetup_r+0xba>
 8009bc0:	4b25      	ldr	r3, [pc, #148]	; (8009c58 <__swsetup_r+0xd4>)
 8009bc2:	429c      	cmp	r4, r3
 8009bc4:	d101      	bne.n	8009bca <__swsetup_r+0x46>
 8009bc6:	68ac      	ldr	r4, [r5, #8]
 8009bc8:	e7eb      	b.n	8009ba2 <__swsetup_r+0x1e>
 8009bca:	4b24      	ldr	r3, [pc, #144]	; (8009c5c <__swsetup_r+0xd8>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	bf08      	it	eq
 8009bd0:	68ec      	ldreq	r4, [r5, #12]
 8009bd2:	e7e6      	b.n	8009ba2 <__swsetup_r+0x1e>
 8009bd4:	0758      	lsls	r0, r3, #29
 8009bd6:	d512      	bpl.n	8009bfe <__swsetup_r+0x7a>
 8009bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bda:	b141      	cbz	r1, 8009bee <__swsetup_r+0x6a>
 8009bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009be0:	4299      	cmp	r1, r3
 8009be2:	d002      	beq.n	8009bea <__swsetup_r+0x66>
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7ff fe03 	bl	80097f0 <_free_r>
 8009bea:	2300      	movs	r3, #0
 8009bec:	6363      	str	r3, [r4, #52]	; 0x34
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	6063      	str	r3, [r4, #4]
 8009bfa:	6923      	ldr	r3, [r4, #16]
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f043 0308 	orr.w	r3, r3, #8
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	6923      	ldr	r3, [r4, #16]
 8009c08:	b94b      	cbnz	r3, 8009c1e <__swsetup_r+0x9a>
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c14:	d003      	beq.n	8009c1e <__swsetup_r+0x9a>
 8009c16:	4621      	mov	r1, r4
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f000 f9ff 	bl	800a01c <__smakebuf_r>
 8009c1e:	89a0      	ldrh	r0, [r4, #12]
 8009c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c24:	f010 0301 	ands.w	r3, r0, #1
 8009c28:	d00a      	beq.n	8009c40 <__swsetup_r+0xbc>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60a3      	str	r3, [r4, #8]
 8009c2e:	6963      	ldr	r3, [r4, #20]
 8009c30:	425b      	negs	r3, r3
 8009c32:	61a3      	str	r3, [r4, #24]
 8009c34:	6923      	ldr	r3, [r4, #16]
 8009c36:	b943      	cbnz	r3, 8009c4a <__swsetup_r+0xc6>
 8009c38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c3c:	d1ba      	bne.n	8009bb4 <__swsetup_r+0x30>
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	0781      	lsls	r1, r0, #30
 8009c42:	bf58      	it	pl
 8009c44:	6963      	ldrpl	r3, [r4, #20]
 8009c46:	60a3      	str	r3, [r4, #8]
 8009c48:	e7f4      	b.n	8009c34 <__swsetup_r+0xb0>
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	e7f7      	b.n	8009c3e <__swsetup_r+0xba>
 8009c4e:	bf00      	nop
 8009c50:	20000154 	.word	0x20000154
 8009c54:	0800bdd4 	.word	0x0800bdd4
 8009c58:	0800bdf4 	.word	0x0800bdf4
 8009c5c:	0800bdb4 	.word	0x0800bdb4

08009c60 <__sflush_r>:
 8009c60:	898a      	ldrh	r2, [r1, #12]
 8009c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c66:	4605      	mov	r5, r0
 8009c68:	0710      	lsls	r0, r2, #28
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	d458      	bmi.n	8009d20 <__sflush_r+0xc0>
 8009c6e:	684b      	ldr	r3, [r1, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dc05      	bgt.n	8009c80 <__sflush_r+0x20>
 8009c74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	dc02      	bgt.n	8009c80 <__sflush_r+0x20>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c82:	2e00      	cmp	r6, #0
 8009c84:	d0f9      	beq.n	8009c7a <__sflush_r+0x1a>
 8009c86:	2300      	movs	r3, #0
 8009c88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c8c:	682f      	ldr	r7, [r5, #0]
 8009c8e:	602b      	str	r3, [r5, #0]
 8009c90:	d032      	beq.n	8009cf8 <__sflush_r+0x98>
 8009c92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	075a      	lsls	r2, r3, #29
 8009c98:	d505      	bpl.n	8009ca6 <__sflush_r+0x46>
 8009c9a:	6863      	ldr	r3, [r4, #4]
 8009c9c:	1ac0      	subs	r0, r0, r3
 8009c9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ca0:	b10b      	cbz	r3, 8009ca6 <__sflush_r+0x46>
 8009ca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ca4:	1ac0      	subs	r0, r0, r3
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	4602      	mov	r2, r0
 8009caa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cac:	6a21      	ldr	r1, [r4, #32]
 8009cae:	4628      	mov	r0, r5
 8009cb0:	47b0      	blx	r6
 8009cb2:	1c43      	adds	r3, r0, #1
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	d106      	bne.n	8009cc6 <__sflush_r+0x66>
 8009cb8:	6829      	ldr	r1, [r5, #0]
 8009cba:	291d      	cmp	r1, #29
 8009cbc:	d82c      	bhi.n	8009d18 <__sflush_r+0xb8>
 8009cbe:	4a2a      	ldr	r2, [pc, #168]	; (8009d68 <__sflush_r+0x108>)
 8009cc0:	40ca      	lsrs	r2, r1
 8009cc2:	07d6      	lsls	r6, r2, #31
 8009cc4:	d528      	bpl.n	8009d18 <__sflush_r+0xb8>
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	6062      	str	r2, [r4, #4]
 8009cca:	04d9      	lsls	r1, r3, #19
 8009ccc:	6922      	ldr	r2, [r4, #16]
 8009cce:	6022      	str	r2, [r4, #0]
 8009cd0:	d504      	bpl.n	8009cdc <__sflush_r+0x7c>
 8009cd2:	1c42      	adds	r2, r0, #1
 8009cd4:	d101      	bne.n	8009cda <__sflush_r+0x7a>
 8009cd6:	682b      	ldr	r3, [r5, #0]
 8009cd8:	b903      	cbnz	r3, 8009cdc <__sflush_r+0x7c>
 8009cda:	6560      	str	r0, [r4, #84]	; 0x54
 8009cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cde:	602f      	str	r7, [r5, #0]
 8009ce0:	2900      	cmp	r1, #0
 8009ce2:	d0ca      	beq.n	8009c7a <__sflush_r+0x1a>
 8009ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ce8:	4299      	cmp	r1, r3
 8009cea:	d002      	beq.n	8009cf2 <__sflush_r+0x92>
 8009cec:	4628      	mov	r0, r5
 8009cee:	f7ff fd7f 	bl	80097f0 <_free_r>
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	6360      	str	r0, [r4, #52]	; 0x34
 8009cf6:	e7c1      	b.n	8009c7c <__sflush_r+0x1c>
 8009cf8:	6a21      	ldr	r1, [r4, #32]
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b0      	blx	r6
 8009d00:	1c41      	adds	r1, r0, #1
 8009d02:	d1c7      	bne.n	8009c94 <__sflush_r+0x34>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0c4      	beq.n	8009c94 <__sflush_r+0x34>
 8009d0a:	2b1d      	cmp	r3, #29
 8009d0c:	d001      	beq.n	8009d12 <__sflush_r+0xb2>
 8009d0e:	2b16      	cmp	r3, #22
 8009d10:	d101      	bne.n	8009d16 <__sflush_r+0xb6>
 8009d12:	602f      	str	r7, [r5, #0]
 8009d14:	e7b1      	b.n	8009c7a <__sflush_r+0x1a>
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	e7ad      	b.n	8009c7c <__sflush_r+0x1c>
 8009d20:	690f      	ldr	r7, [r1, #16]
 8009d22:	2f00      	cmp	r7, #0
 8009d24:	d0a9      	beq.n	8009c7a <__sflush_r+0x1a>
 8009d26:	0793      	lsls	r3, r2, #30
 8009d28:	680e      	ldr	r6, [r1, #0]
 8009d2a:	bf08      	it	eq
 8009d2c:	694b      	ldreq	r3, [r1, #20]
 8009d2e:	600f      	str	r7, [r1, #0]
 8009d30:	bf18      	it	ne
 8009d32:	2300      	movne	r3, #0
 8009d34:	eba6 0807 	sub.w	r8, r6, r7
 8009d38:	608b      	str	r3, [r1, #8]
 8009d3a:	f1b8 0f00 	cmp.w	r8, #0
 8009d3e:	dd9c      	ble.n	8009c7a <__sflush_r+0x1a>
 8009d40:	6a21      	ldr	r1, [r4, #32]
 8009d42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d44:	4643      	mov	r3, r8
 8009d46:	463a      	mov	r2, r7
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b0      	blx	r6
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	dc06      	bgt.n	8009d5e <__sflush_r+0xfe>
 8009d50:	89a3      	ldrh	r3, [r4, #12]
 8009d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5c:	e78e      	b.n	8009c7c <__sflush_r+0x1c>
 8009d5e:	4407      	add	r7, r0
 8009d60:	eba8 0800 	sub.w	r8, r8, r0
 8009d64:	e7e9      	b.n	8009d3a <__sflush_r+0xda>
 8009d66:	bf00      	nop
 8009d68:	20400001 	.word	0x20400001

08009d6c <_fflush_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	690b      	ldr	r3, [r1, #16]
 8009d70:	4605      	mov	r5, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	b913      	cbnz	r3, 8009d7c <_fflush_r+0x10>
 8009d76:	2500      	movs	r5, #0
 8009d78:	4628      	mov	r0, r5
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	b118      	cbz	r0, 8009d86 <_fflush_r+0x1a>
 8009d7e:	6983      	ldr	r3, [r0, #24]
 8009d80:	b90b      	cbnz	r3, 8009d86 <_fflush_r+0x1a>
 8009d82:	f000 f887 	bl	8009e94 <__sinit>
 8009d86:	4b14      	ldr	r3, [pc, #80]	; (8009dd8 <_fflush_r+0x6c>)
 8009d88:	429c      	cmp	r4, r3
 8009d8a:	d11b      	bne.n	8009dc4 <_fflush_r+0x58>
 8009d8c:	686c      	ldr	r4, [r5, #4]
 8009d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0ef      	beq.n	8009d76 <_fflush_r+0xa>
 8009d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d98:	07d0      	lsls	r0, r2, #31
 8009d9a:	d404      	bmi.n	8009da6 <_fflush_r+0x3a>
 8009d9c:	0599      	lsls	r1, r3, #22
 8009d9e:	d402      	bmi.n	8009da6 <_fflush_r+0x3a>
 8009da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009da2:	f000 f915 	bl	8009fd0 <__retarget_lock_acquire_recursive>
 8009da6:	4628      	mov	r0, r5
 8009da8:	4621      	mov	r1, r4
 8009daa:	f7ff ff59 	bl	8009c60 <__sflush_r>
 8009dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009db0:	07da      	lsls	r2, r3, #31
 8009db2:	4605      	mov	r5, r0
 8009db4:	d4e0      	bmi.n	8009d78 <_fflush_r+0xc>
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	059b      	lsls	r3, r3, #22
 8009dba:	d4dd      	bmi.n	8009d78 <_fflush_r+0xc>
 8009dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dbe:	f000 f908 	bl	8009fd2 <__retarget_lock_release_recursive>
 8009dc2:	e7d9      	b.n	8009d78 <_fflush_r+0xc>
 8009dc4:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <_fflush_r+0x70>)
 8009dc6:	429c      	cmp	r4, r3
 8009dc8:	d101      	bne.n	8009dce <_fflush_r+0x62>
 8009dca:	68ac      	ldr	r4, [r5, #8]
 8009dcc:	e7df      	b.n	8009d8e <_fflush_r+0x22>
 8009dce:	4b04      	ldr	r3, [pc, #16]	; (8009de0 <_fflush_r+0x74>)
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	bf08      	it	eq
 8009dd4:	68ec      	ldreq	r4, [r5, #12]
 8009dd6:	e7da      	b.n	8009d8e <_fflush_r+0x22>
 8009dd8:	0800bdd4 	.word	0x0800bdd4
 8009ddc:	0800bdf4 	.word	0x0800bdf4
 8009de0:	0800bdb4 	.word	0x0800bdb4

08009de4 <std>:
 8009de4:	2300      	movs	r3, #0
 8009de6:	b510      	push	{r4, lr}
 8009de8:	4604      	mov	r4, r0
 8009dea:	e9c0 3300 	strd	r3, r3, [r0]
 8009dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009df2:	6083      	str	r3, [r0, #8]
 8009df4:	8181      	strh	r1, [r0, #12]
 8009df6:	6643      	str	r3, [r0, #100]	; 0x64
 8009df8:	81c2      	strh	r2, [r0, #14]
 8009dfa:	6183      	str	r3, [r0, #24]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	2208      	movs	r2, #8
 8009e00:	305c      	adds	r0, #92	; 0x5c
 8009e02:	f7ff fced 	bl	80097e0 <memset>
 8009e06:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <std+0x38>)
 8009e08:	6263      	str	r3, [r4, #36]	; 0x24
 8009e0a:	4b05      	ldr	r3, [pc, #20]	; (8009e20 <std+0x3c>)
 8009e0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e0e:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <std+0x40>)
 8009e10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e12:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <std+0x44>)
 8009e14:	6224      	str	r4, [r4, #32]
 8009e16:	6323      	str	r3, [r4, #48]	; 0x30
 8009e18:	bd10      	pop	{r4, pc}
 8009e1a:	bf00      	nop
 8009e1c:	0800a695 	.word	0x0800a695
 8009e20:	0800a6b7 	.word	0x0800a6b7
 8009e24:	0800a6ef 	.word	0x0800a6ef
 8009e28:	0800a713 	.word	0x0800a713

08009e2c <_cleanup_r>:
 8009e2c:	4901      	ldr	r1, [pc, #4]	; (8009e34 <_cleanup_r+0x8>)
 8009e2e:	f000 b8af 	b.w	8009f90 <_fwalk_reent>
 8009e32:	bf00      	nop
 8009e34:	08009d6d 	.word	0x08009d6d

08009e38 <__sfmoreglue>:
 8009e38:	b570      	push	{r4, r5, r6, lr}
 8009e3a:	1e4a      	subs	r2, r1, #1
 8009e3c:	2568      	movs	r5, #104	; 0x68
 8009e3e:	4355      	muls	r5, r2
 8009e40:	460e      	mov	r6, r1
 8009e42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e46:	f7ff fd23 	bl	8009890 <_malloc_r>
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	b140      	cbz	r0, 8009e60 <__sfmoreglue+0x28>
 8009e4e:	2100      	movs	r1, #0
 8009e50:	e9c0 1600 	strd	r1, r6, [r0]
 8009e54:	300c      	adds	r0, #12
 8009e56:	60a0      	str	r0, [r4, #8]
 8009e58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e5c:	f7ff fcc0 	bl	80097e0 <memset>
 8009e60:	4620      	mov	r0, r4
 8009e62:	bd70      	pop	{r4, r5, r6, pc}

08009e64 <__sfp_lock_acquire>:
 8009e64:	4801      	ldr	r0, [pc, #4]	; (8009e6c <__sfp_lock_acquire+0x8>)
 8009e66:	f000 b8b3 	b.w	8009fd0 <__retarget_lock_acquire_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	20002bec 	.word	0x20002bec

08009e70 <__sfp_lock_release>:
 8009e70:	4801      	ldr	r0, [pc, #4]	; (8009e78 <__sfp_lock_release+0x8>)
 8009e72:	f000 b8ae 	b.w	8009fd2 <__retarget_lock_release_recursive>
 8009e76:	bf00      	nop
 8009e78:	20002bec 	.word	0x20002bec

08009e7c <__sinit_lock_acquire>:
 8009e7c:	4801      	ldr	r0, [pc, #4]	; (8009e84 <__sinit_lock_acquire+0x8>)
 8009e7e:	f000 b8a7 	b.w	8009fd0 <__retarget_lock_acquire_recursive>
 8009e82:	bf00      	nop
 8009e84:	20002be7 	.word	0x20002be7

08009e88 <__sinit_lock_release>:
 8009e88:	4801      	ldr	r0, [pc, #4]	; (8009e90 <__sinit_lock_release+0x8>)
 8009e8a:	f000 b8a2 	b.w	8009fd2 <__retarget_lock_release_recursive>
 8009e8e:	bf00      	nop
 8009e90:	20002be7 	.word	0x20002be7

08009e94 <__sinit>:
 8009e94:	b510      	push	{r4, lr}
 8009e96:	4604      	mov	r4, r0
 8009e98:	f7ff fff0 	bl	8009e7c <__sinit_lock_acquire>
 8009e9c:	69a3      	ldr	r3, [r4, #24]
 8009e9e:	b11b      	cbz	r3, 8009ea8 <__sinit+0x14>
 8009ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea4:	f7ff bff0 	b.w	8009e88 <__sinit_lock_release>
 8009ea8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009eac:	6523      	str	r3, [r4, #80]	; 0x50
 8009eae:	4b13      	ldr	r3, [pc, #76]	; (8009efc <__sinit+0x68>)
 8009eb0:	4a13      	ldr	r2, [pc, #76]	; (8009f00 <__sinit+0x6c>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009eb6:	42a3      	cmp	r3, r4
 8009eb8:	bf04      	itt	eq
 8009eba:	2301      	moveq	r3, #1
 8009ebc:	61a3      	streq	r3, [r4, #24]
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f000 f820 	bl	8009f04 <__sfp>
 8009ec4:	6060      	str	r0, [r4, #4]
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f000 f81c 	bl	8009f04 <__sfp>
 8009ecc:	60a0      	str	r0, [r4, #8]
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f000 f818 	bl	8009f04 <__sfp>
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	60e0      	str	r0, [r4, #12]
 8009ed8:	2104      	movs	r1, #4
 8009eda:	6860      	ldr	r0, [r4, #4]
 8009edc:	f7ff ff82 	bl	8009de4 <std>
 8009ee0:	68a0      	ldr	r0, [r4, #8]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	2109      	movs	r1, #9
 8009ee6:	f7ff ff7d 	bl	8009de4 <std>
 8009eea:	68e0      	ldr	r0, [r4, #12]
 8009eec:	2202      	movs	r2, #2
 8009eee:	2112      	movs	r1, #18
 8009ef0:	f7ff ff78 	bl	8009de4 <std>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	61a3      	str	r3, [r4, #24]
 8009ef8:	e7d2      	b.n	8009ea0 <__sinit+0xc>
 8009efa:	bf00      	nop
 8009efc:	0800bdb0 	.word	0x0800bdb0
 8009f00:	08009e2d 	.word	0x08009e2d

08009f04 <__sfp>:
 8009f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f06:	4607      	mov	r7, r0
 8009f08:	f7ff ffac 	bl	8009e64 <__sfp_lock_acquire>
 8009f0c:	4b1e      	ldr	r3, [pc, #120]	; (8009f88 <__sfp+0x84>)
 8009f0e:	681e      	ldr	r6, [r3, #0]
 8009f10:	69b3      	ldr	r3, [r6, #24]
 8009f12:	b913      	cbnz	r3, 8009f1a <__sfp+0x16>
 8009f14:	4630      	mov	r0, r6
 8009f16:	f7ff ffbd 	bl	8009e94 <__sinit>
 8009f1a:	3648      	adds	r6, #72	; 0x48
 8009f1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f20:	3b01      	subs	r3, #1
 8009f22:	d503      	bpl.n	8009f2c <__sfp+0x28>
 8009f24:	6833      	ldr	r3, [r6, #0]
 8009f26:	b30b      	cbz	r3, 8009f6c <__sfp+0x68>
 8009f28:	6836      	ldr	r6, [r6, #0]
 8009f2a:	e7f7      	b.n	8009f1c <__sfp+0x18>
 8009f2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f30:	b9d5      	cbnz	r5, 8009f68 <__sfp+0x64>
 8009f32:	4b16      	ldr	r3, [pc, #88]	; (8009f8c <__sfp+0x88>)
 8009f34:	60e3      	str	r3, [r4, #12]
 8009f36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f3a:	6665      	str	r5, [r4, #100]	; 0x64
 8009f3c:	f000 f847 	bl	8009fce <__retarget_lock_init_recursive>
 8009f40:	f7ff ff96 	bl	8009e70 <__sfp_lock_release>
 8009f44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f4c:	6025      	str	r5, [r4, #0]
 8009f4e:	61a5      	str	r5, [r4, #24]
 8009f50:	2208      	movs	r2, #8
 8009f52:	4629      	mov	r1, r5
 8009f54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f58:	f7ff fc42 	bl	80097e0 <memset>
 8009f5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f64:	4620      	mov	r0, r4
 8009f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f68:	3468      	adds	r4, #104	; 0x68
 8009f6a:	e7d9      	b.n	8009f20 <__sfp+0x1c>
 8009f6c:	2104      	movs	r1, #4
 8009f6e:	4638      	mov	r0, r7
 8009f70:	f7ff ff62 	bl	8009e38 <__sfmoreglue>
 8009f74:	4604      	mov	r4, r0
 8009f76:	6030      	str	r0, [r6, #0]
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d1d5      	bne.n	8009f28 <__sfp+0x24>
 8009f7c:	f7ff ff78 	bl	8009e70 <__sfp_lock_release>
 8009f80:	230c      	movs	r3, #12
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	e7ee      	b.n	8009f64 <__sfp+0x60>
 8009f86:	bf00      	nop
 8009f88:	0800bdb0 	.word	0x0800bdb0
 8009f8c:	ffff0001 	.word	0xffff0001

08009f90 <_fwalk_reent>:
 8009f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f94:	4606      	mov	r6, r0
 8009f96:	4688      	mov	r8, r1
 8009f98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f9c:	2700      	movs	r7, #0
 8009f9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fa2:	f1b9 0901 	subs.w	r9, r9, #1
 8009fa6:	d505      	bpl.n	8009fb4 <_fwalk_reent+0x24>
 8009fa8:	6824      	ldr	r4, [r4, #0]
 8009faa:	2c00      	cmp	r4, #0
 8009fac:	d1f7      	bne.n	8009f9e <_fwalk_reent+0xe>
 8009fae:	4638      	mov	r0, r7
 8009fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fb4:	89ab      	ldrh	r3, [r5, #12]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d907      	bls.n	8009fca <_fwalk_reent+0x3a>
 8009fba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	d003      	beq.n	8009fca <_fwalk_reent+0x3a>
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	47c0      	blx	r8
 8009fc8:	4307      	orrs	r7, r0
 8009fca:	3568      	adds	r5, #104	; 0x68
 8009fcc:	e7e9      	b.n	8009fa2 <_fwalk_reent+0x12>

08009fce <__retarget_lock_init_recursive>:
 8009fce:	4770      	bx	lr

08009fd0 <__retarget_lock_acquire_recursive>:
 8009fd0:	4770      	bx	lr

08009fd2 <__retarget_lock_release_recursive>:
 8009fd2:	4770      	bx	lr

08009fd4 <__swhatbuf_r>:
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	460e      	mov	r6, r1
 8009fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fdc:	2900      	cmp	r1, #0
 8009fde:	b096      	sub	sp, #88	; 0x58
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	461d      	mov	r5, r3
 8009fe4:	da07      	bge.n	8009ff6 <__swhatbuf_r+0x22>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	89b3      	ldrh	r3, [r6, #12]
 8009fec:	061a      	lsls	r2, r3, #24
 8009fee:	d410      	bmi.n	800a012 <__swhatbuf_r+0x3e>
 8009ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ff4:	e00e      	b.n	800a014 <__swhatbuf_r+0x40>
 8009ff6:	466a      	mov	r2, sp
 8009ff8:	f000 fbb2 	bl	800a760 <_fstat_r>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	dbf2      	blt.n	8009fe6 <__swhatbuf_r+0x12>
 800a000:	9a01      	ldr	r2, [sp, #4]
 800a002:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a006:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a00a:	425a      	negs	r2, r3
 800a00c:	415a      	adcs	r2, r3
 800a00e:	602a      	str	r2, [r5, #0]
 800a010:	e7ee      	b.n	8009ff0 <__swhatbuf_r+0x1c>
 800a012:	2340      	movs	r3, #64	; 0x40
 800a014:	2000      	movs	r0, #0
 800a016:	6023      	str	r3, [r4, #0]
 800a018:	b016      	add	sp, #88	; 0x58
 800a01a:	bd70      	pop	{r4, r5, r6, pc}

0800a01c <__smakebuf_r>:
 800a01c:	898b      	ldrh	r3, [r1, #12]
 800a01e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a020:	079d      	lsls	r5, r3, #30
 800a022:	4606      	mov	r6, r0
 800a024:	460c      	mov	r4, r1
 800a026:	d507      	bpl.n	800a038 <__smakebuf_r+0x1c>
 800a028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	6123      	str	r3, [r4, #16]
 800a030:	2301      	movs	r3, #1
 800a032:	6163      	str	r3, [r4, #20]
 800a034:	b002      	add	sp, #8
 800a036:	bd70      	pop	{r4, r5, r6, pc}
 800a038:	ab01      	add	r3, sp, #4
 800a03a:	466a      	mov	r2, sp
 800a03c:	f7ff ffca 	bl	8009fd4 <__swhatbuf_r>
 800a040:	9900      	ldr	r1, [sp, #0]
 800a042:	4605      	mov	r5, r0
 800a044:	4630      	mov	r0, r6
 800a046:	f7ff fc23 	bl	8009890 <_malloc_r>
 800a04a:	b948      	cbnz	r0, 800a060 <__smakebuf_r+0x44>
 800a04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a050:	059a      	lsls	r2, r3, #22
 800a052:	d4ef      	bmi.n	800a034 <__smakebuf_r+0x18>
 800a054:	f023 0303 	bic.w	r3, r3, #3
 800a058:	f043 0302 	orr.w	r3, r3, #2
 800a05c:	81a3      	strh	r3, [r4, #12]
 800a05e:	e7e3      	b.n	800a028 <__smakebuf_r+0xc>
 800a060:	4b0d      	ldr	r3, [pc, #52]	; (800a098 <__smakebuf_r+0x7c>)
 800a062:	62b3      	str	r3, [r6, #40]	; 0x28
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	6020      	str	r0, [r4, #0]
 800a068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a06c:	81a3      	strh	r3, [r4, #12]
 800a06e:	9b00      	ldr	r3, [sp, #0]
 800a070:	6163      	str	r3, [r4, #20]
 800a072:	9b01      	ldr	r3, [sp, #4]
 800a074:	6120      	str	r0, [r4, #16]
 800a076:	b15b      	cbz	r3, 800a090 <__smakebuf_r+0x74>
 800a078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a07c:	4630      	mov	r0, r6
 800a07e:	f000 fb81 	bl	800a784 <_isatty_r>
 800a082:	b128      	cbz	r0, 800a090 <__smakebuf_r+0x74>
 800a084:	89a3      	ldrh	r3, [r4, #12]
 800a086:	f023 0303 	bic.w	r3, r3, #3
 800a08a:	f043 0301 	orr.w	r3, r3, #1
 800a08e:	81a3      	strh	r3, [r4, #12]
 800a090:	89a0      	ldrh	r0, [r4, #12]
 800a092:	4305      	orrs	r5, r0
 800a094:	81a5      	strh	r5, [r4, #12]
 800a096:	e7cd      	b.n	800a034 <__smakebuf_r+0x18>
 800a098:	08009e2d 	.word	0x08009e2d

0800a09c <__malloc_lock>:
 800a09c:	4801      	ldr	r0, [pc, #4]	; (800a0a4 <__malloc_lock+0x8>)
 800a09e:	f7ff bf97 	b.w	8009fd0 <__retarget_lock_acquire_recursive>
 800a0a2:	bf00      	nop
 800a0a4:	20002be8 	.word	0x20002be8

0800a0a8 <__malloc_unlock>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	; (800a0b0 <__malloc_unlock+0x8>)
 800a0aa:	f7ff bf92 	b.w	8009fd2 <__retarget_lock_release_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	20002be8 	.word	0x20002be8

0800a0b4 <__ssputs_r>:
 800a0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b8:	688e      	ldr	r6, [r1, #8]
 800a0ba:	429e      	cmp	r6, r3
 800a0bc:	4682      	mov	sl, r0
 800a0be:	460c      	mov	r4, r1
 800a0c0:	4690      	mov	r8, r2
 800a0c2:	461f      	mov	r7, r3
 800a0c4:	d838      	bhi.n	800a138 <__ssputs_r+0x84>
 800a0c6:	898a      	ldrh	r2, [r1, #12]
 800a0c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0cc:	d032      	beq.n	800a134 <__ssputs_r+0x80>
 800a0ce:	6825      	ldr	r5, [r4, #0]
 800a0d0:	6909      	ldr	r1, [r1, #16]
 800a0d2:	eba5 0901 	sub.w	r9, r5, r1
 800a0d6:	6965      	ldr	r5, [r4, #20]
 800a0d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	444b      	add	r3, r9
 800a0e4:	106d      	asrs	r5, r5, #1
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	bf38      	it	cc
 800a0ea:	461d      	movcc	r5, r3
 800a0ec:	0553      	lsls	r3, r2, #21
 800a0ee:	d531      	bpl.n	800a154 <__ssputs_r+0xa0>
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7ff fbcd 	bl	8009890 <_malloc_r>
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	b950      	cbnz	r0, 800a110 <__ssputs_r+0x5c>
 800a0fa:	230c      	movs	r3, #12
 800a0fc:	f8ca 3000 	str.w	r3, [sl]
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a110:	6921      	ldr	r1, [r4, #16]
 800a112:	464a      	mov	r2, r9
 800a114:	f000 fb58 	bl	800a7c8 <memcpy>
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a11e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a122:	81a3      	strh	r3, [r4, #12]
 800a124:	6126      	str	r6, [r4, #16]
 800a126:	6165      	str	r5, [r4, #20]
 800a128:	444e      	add	r6, r9
 800a12a:	eba5 0509 	sub.w	r5, r5, r9
 800a12e:	6026      	str	r6, [r4, #0]
 800a130:	60a5      	str	r5, [r4, #8]
 800a132:	463e      	mov	r6, r7
 800a134:	42be      	cmp	r6, r7
 800a136:	d900      	bls.n	800a13a <__ssputs_r+0x86>
 800a138:	463e      	mov	r6, r7
 800a13a:	4632      	mov	r2, r6
 800a13c:	6820      	ldr	r0, [r4, #0]
 800a13e:	4641      	mov	r1, r8
 800a140:	f000 fb50 	bl	800a7e4 <memmove>
 800a144:	68a3      	ldr	r3, [r4, #8]
 800a146:	6822      	ldr	r2, [r4, #0]
 800a148:	1b9b      	subs	r3, r3, r6
 800a14a:	4432      	add	r2, r6
 800a14c:	60a3      	str	r3, [r4, #8]
 800a14e:	6022      	str	r2, [r4, #0]
 800a150:	2000      	movs	r0, #0
 800a152:	e7db      	b.n	800a10c <__ssputs_r+0x58>
 800a154:	462a      	mov	r2, r5
 800a156:	f000 fb5f 	bl	800a818 <_realloc_r>
 800a15a:	4606      	mov	r6, r0
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d1e1      	bne.n	800a124 <__ssputs_r+0x70>
 800a160:	6921      	ldr	r1, [r4, #16]
 800a162:	4650      	mov	r0, sl
 800a164:	f7ff fb44 	bl	80097f0 <_free_r>
 800a168:	e7c7      	b.n	800a0fa <__ssputs_r+0x46>
	...

0800a16c <_svfiprintf_r>:
 800a16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a170:	4698      	mov	r8, r3
 800a172:	898b      	ldrh	r3, [r1, #12]
 800a174:	061b      	lsls	r3, r3, #24
 800a176:	b09d      	sub	sp, #116	; 0x74
 800a178:	4607      	mov	r7, r0
 800a17a:	460d      	mov	r5, r1
 800a17c:	4614      	mov	r4, r2
 800a17e:	d50e      	bpl.n	800a19e <_svfiprintf_r+0x32>
 800a180:	690b      	ldr	r3, [r1, #16]
 800a182:	b963      	cbnz	r3, 800a19e <_svfiprintf_r+0x32>
 800a184:	2140      	movs	r1, #64	; 0x40
 800a186:	f7ff fb83 	bl	8009890 <_malloc_r>
 800a18a:	6028      	str	r0, [r5, #0]
 800a18c:	6128      	str	r0, [r5, #16]
 800a18e:	b920      	cbnz	r0, 800a19a <_svfiprintf_r+0x2e>
 800a190:	230c      	movs	r3, #12
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	f04f 30ff 	mov.w	r0, #4294967295
 800a198:	e0d1      	b.n	800a33e <_svfiprintf_r+0x1d2>
 800a19a:	2340      	movs	r3, #64	; 0x40
 800a19c:	616b      	str	r3, [r5, #20]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a2:	2320      	movs	r3, #32
 800a1a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ac:	2330      	movs	r3, #48	; 0x30
 800a1ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a358 <_svfiprintf_r+0x1ec>
 800a1b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1b6:	f04f 0901 	mov.w	r9, #1
 800a1ba:	4623      	mov	r3, r4
 800a1bc:	469a      	mov	sl, r3
 800a1be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1c2:	b10a      	cbz	r2, 800a1c8 <_svfiprintf_r+0x5c>
 800a1c4:	2a25      	cmp	r2, #37	; 0x25
 800a1c6:	d1f9      	bne.n	800a1bc <_svfiprintf_r+0x50>
 800a1c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a1cc:	d00b      	beq.n	800a1e6 <_svfiprintf_r+0x7a>
 800a1ce:	465b      	mov	r3, fp
 800a1d0:	4622      	mov	r2, r4
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	4638      	mov	r0, r7
 800a1d6:	f7ff ff6d 	bl	800a0b4 <__ssputs_r>
 800a1da:	3001      	adds	r0, #1
 800a1dc:	f000 80aa 	beq.w	800a334 <_svfiprintf_r+0x1c8>
 800a1e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1e2:	445a      	add	r2, fp
 800a1e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f000 80a2 	beq.w	800a334 <_svfiprintf_r+0x1c8>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1fa:	f10a 0a01 	add.w	sl, sl, #1
 800a1fe:	9304      	str	r3, [sp, #16]
 800a200:	9307      	str	r3, [sp, #28]
 800a202:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a206:	931a      	str	r3, [sp, #104]	; 0x68
 800a208:	4654      	mov	r4, sl
 800a20a:	2205      	movs	r2, #5
 800a20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a210:	4851      	ldr	r0, [pc, #324]	; (800a358 <_svfiprintf_r+0x1ec>)
 800a212:	f7f5 ffed 	bl	80001f0 <memchr>
 800a216:	9a04      	ldr	r2, [sp, #16]
 800a218:	b9d8      	cbnz	r0, 800a252 <_svfiprintf_r+0xe6>
 800a21a:	06d0      	lsls	r0, r2, #27
 800a21c:	bf44      	itt	mi
 800a21e:	2320      	movmi	r3, #32
 800a220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a224:	0711      	lsls	r1, r2, #28
 800a226:	bf44      	itt	mi
 800a228:	232b      	movmi	r3, #43	; 0x2b
 800a22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a22e:	f89a 3000 	ldrb.w	r3, [sl]
 800a232:	2b2a      	cmp	r3, #42	; 0x2a
 800a234:	d015      	beq.n	800a262 <_svfiprintf_r+0xf6>
 800a236:	9a07      	ldr	r2, [sp, #28]
 800a238:	4654      	mov	r4, sl
 800a23a:	2000      	movs	r0, #0
 800a23c:	f04f 0c0a 	mov.w	ip, #10
 800a240:	4621      	mov	r1, r4
 800a242:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a246:	3b30      	subs	r3, #48	; 0x30
 800a248:	2b09      	cmp	r3, #9
 800a24a:	d94e      	bls.n	800a2ea <_svfiprintf_r+0x17e>
 800a24c:	b1b0      	cbz	r0, 800a27c <_svfiprintf_r+0x110>
 800a24e:	9207      	str	r2, [sp, #28]
 800a250:	e014      	b.n	800a27c <_svfiprintf_r+0x110>
 800a252:	eba0 0308 	sub.w	r3, r0, r8
 800a256:	fa09 f303 	lsl.w	r3, r9, r3
 800a25a:	4313      	orrs	r3, r2
 800a25c:	9304      	str	r3, [sp, #16]
 800a25e:	46a2      	mov	sl, r4
 800a260:	e7d2      	b.n	800a208 <_svfiprintf_r+0x9c>
 800a262:	9b03      	ldr	r3, [sp, #12]
 800a264:	1d19      	adds	r1, r3, #4
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	9103      	str	r1, [sp, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	bfbb      	ittet	lt
 800a26e:	425b      	neglt	r3, r3
 800a270:	f042 0202 	orrlt.w	r2, r2, #2
 800a274:	9307      	strge	r3, [sp, #28]
 800a276:	9307      	strlt	r3, [sp, #28]
 800a278:	bfb8      	it	lt
 800a27a:	9204      	strlt	r2, [sp, #16]
 800a27c:	7823      	ldrb	r3, [r4, #0]
 800a27e:	2b2e      	cmp	r3, #46	; 0x2e
 800a280:	d10c      	bne.n	800a29c <_svfiprintf_r+0x130>
 800a282:	7863      	ldrb	r3, [r4, #1]
 800a284:	2b2a      	cmp	r3, #42	; 0x2a
 800a286:	d135      	bne.n	800a2f4 <_svfiprintf_r+0x188>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	1d1a      	adds	r2, r3, #4
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	9203      	str	r2, [sp, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	bfb8      	it	lt
 800a294:	f04f 33ff 	movlt.w	r3, #4294967295
 800a298:	3402      	adds	r4, #2
 800a29a:	9305      	str	r3, [sp, #20]
 800a29c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a368 <_svfiprintf_r+0x1fc>
 800a2a0:	7821      	ldrb	r1, [r4, #0]
 800a2a2:	2203      	movs	r2, #3
 800a2a4:	4650      	mov	r0, sl
 800a2a6:	f7f5 ffa3 	bl	80001f0 <memchr>
 800a2aa:	b140      	cbz	r0, 800a2be <_svfiprintf_r+0x152>
 800a2ac:	2340      	movs	r3, #64	; 0x40
 800a2ae:	eba0 000a 	sub.w	r0, r0, sl
 800a2b2:	fa03 f000 	lsl.w	r0, r3, r0
 800a2b6:	9b04      	ldr	r3, [sp, #16]
 800a2b8:	4303      	orrs	r3, r0
 800a2ba:	3401      	adds	r4, #1
 800a2bc:	9304      	str	r3, [sp, #16]
 800a2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c2:	4826      	ldr	r0, [pc, #152]	; (800a35c <_svfiprintf_r+0x1f0>)
 800a2c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2c8:	2206      	movs	r2, #6
 800a2ca:	f7f5 ff91 	bl	80001f0 <memchr>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d038      	beq.n	800a344 <_svfiprintf_r+0x1d8>
 800a2d2:	4b23      	ldr	r3, [pc, #140]	; (800a360 <_svfiprintf_r+0x1f4>)
 800a2d4:	bb1b      	cbnz	r3, 800a31e <_svfiprintf_r+0x1b2>
 800a2d6:	9b03      	ldr	r3, [sp, #12]
 800a2d8:	3307      	adds	r3, #7
 800a2da:	f023 0307 	bic.w	r3, r3, #7
 800a2de:	3308      	adds	r3, #8
 800a2e0:	9303      	str	r3, [sp, #12]
 800a2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e4:	4433      	add	r3, r6
 800a2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e8:	e767      	b.n	800a1ba <_svfiprintf_r+0x4e>
 800a2ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	2001      	movs	r0, #1
 800a2f2:	e7a5      	b.n	800a240 <_svfiprintf_r+0xd4>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	3401      	adds	r4, #1
 800a2f8:	9305      	str	r3, [sp, #20]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	f04f 0c0a 	mov.w	ip, #10
 800a300:	4620      	mov	r0, r4
 800a302:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a306:	3a30      	subs	r2, #48	; 0x30
 800a308:	2a09      	cmp	r2, #9
 800a30a:	d903      	bls.n	800a314 <_svfiprintf_r+0x1a8>
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d0c5      	beq.n	800a29c <_svfiprintf_r+0x130>
 800a310:	9105      	str	r1, [sp, #20]
 800a312:	e7c3      	b.n	800a29c <_svfiprintf_r+0x130>
 800a314:	fb0c 2101 	mla	r1, ip, r1, r2
 800a318:	4604      	mov	r4, r0
 800a31a:	2301      	movs	r3, #1
 800a31c:	e7f0      	b.n	800a300 <_svfiprintf_r+0x194>
 800a31e:	ab03      	add	r3, sp, #12
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	462a      	mov	r2, r5
 800a324:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <_svfiprintf_r+0x1f8>)
 800a326:	a904      	add	r1, sp, #16
 800a328:	4638      	mov	r0, r7
 800a32a:	f3af 8000 	nop.w
 800a32e:	1c42      	adds	r2, r0, #1
 800a330:	4606      	mov	r6, r0
 800a332:	d1d6      	bne.n	800a2e2 <_svfiprintf_r+0x176>
 800a334:	89ab      	ldrh	r3, [r5, #12]
 800a336:	065b      	lsls	r3, r3, #25
 800a338:	f53f af2c 	bmi.w	800a194 <_svfiprintf_r+0x28>
 800a33c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a33e:	b01d      	add	sp, #116	; 0x74
 800a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a344:	ab03      	add	r3, sp, #12
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	462a      	mov	r2, r5
 800a34a:	4b06      	ldr	r3, [pc, #24]	; (800a364 <_svfiprintf_r+0x1f8>)
 800a34c:	a904      	add	r1, sp, #16
 800a34e:	4638      	mov	r0, r7
 800a350:	f000 f87a 	bl	800a448 <_printf_i>
 800a354:	e7eb      	b.n	800a32e <_svfiprintf_r+0x1c2>
 800a356:	bf00      	nop
 800a358:	0800be14 	.word	0x0800be14
 800a35c:	0800be1e 	.word	0x0800be1e
 800a360:	00000000 	.word	0x00000000
 800a364:	0800a0b5 	.word	0x0800a0b5
 800a368:	0800be1a 	.word	0x0800be1a

0800a36c <_printf_common>:
 800a36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a370:	4616      	mov	r6, r2
 800a372:	4699      	mov	r9, r3
 800a374:	688a      	ldr	r2, [r1, #8]
 800a376:	690b      	ldr	r3, [r1, #16]
 800a378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a37c:	4293      	cmp	r3, r2
 800a37e:	bfb8      	it	lt
 800a380:	4613      	movlt	r3, r2
 800a382:	6033      	str	r3, [r6, #0]
 800a384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a388:	4607      	mov	r7, r0
 800a38a:	460c      	mov	r4, r1
 800a38c:	b10a      	cbz	r2, 800a392 <_printf_common+0x26>
 800a38e:	3301      	adds	r3, #1
 800a390:	6033      	str	r3, [r6, #0]
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	0699      	lsls	r1, r3, #26
 800a396:	bf42      	ittt	mi
 800a398:	6833      	ldrmi	r3, [r6, #0]
 800a39a:	3302      	addmi	r3, #2
 800a39c:	6033      	strmi	r3, [r6, #0]
 800a39e:	6825      	ldr	r5, [r4, #0]
 800a3a0:	f015 0506 	ands.w	r5, r5, #6
 800a3a4:	d106      	bne.n	800a3b4 <_printf_common+0x48>
 800a3a6:	f104 0a19 	add.w	sl, r4, #25
 800a3aa:	68e3      	ldr	r3, [r4, #12]
 800a3ac:	6832      	ldr	r2, [r6, #0]
 800a3ae:	1a9b      	subs	r3, r3, r2
 800a3b0:	42ab      	cmp	r3, r5
 800a3b2:	dc26      	bgt.n	800a402 <_printf_common+0x96>
 800a3b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3b8:	1e13      	subs	r3, r2, #0
 800a3ba:	6822      	ldr	r2, [r4, #0]
 800a3bc:	bf18      	it	ne
 800a3be:	2301      	movne	r3, #1
 800a3c0:	0692      	lsls	r2, r2, #26
 800a3c2:	d42b      	bmi.n	800a41c <_printf_common+0xb0>
 800a3c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	47c0      	blx	r8
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d01e      	beq.n	800a410 <_printf_common+0xa4>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	68e5      	ldr	r5, [r4, #12]
 800a3d6:	6832      	ldr	r2, [r6, #0]
 800a3d8:	f003 0306 	and.w	r3, r3, #6
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	bf08      	it	eq
 800a3e0:	1aad      	subeq	r5, r5, r2
 800a3e2:	68a3      	ldr	r3, [r4, #8]
 800a3e4:	6922      	ldr	r2, [r4, #16]
 800a3e6:	bf0c      	ite	eq
 800a3e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3ec:	2500      	movne	r5, #0
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	bfc4      	itt	gt
 800a3f2:	1a9b      	subgt	r3, r3, r2
 800a3f4:	18ed      	addgt	r5, r5, r3
 800a3f6:	2600      	movs	r6, #0
 800a3f8:	341a      	adds	r4, #26
 800a3fa:	42b5      	cmp	r5, r6
 800a3fc:	d11a      	bne.n	800a434 <_printf_common+0xc8>
 800a3fe:	2000      	movs	r0, #0
 800a400:	e008      	b.n	800a414 <_printf_common+0xa8>
 800a402:	2301      	movs	r3, #1
 800a404:	4652      	mov	r2, sl
 800a406:	4649      	mov	r1, r9
 800a408:	4638      	mov	r0, r7
 800a40a:	47c0      	blx	r8
 800a40c:	3001      	adds	r0, #1
 800a40e:	d103      	bne.n	800a418 <_printf_common+0xac>
 800a410:	f04f 30ff 	mov.w	r0, #4294967295
 800a414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a418:	3501      	adds	r5, #1
 800a41a:	e7c6      	b.n	800a3aa <_printf_common+0x3e>
 800a41c:	18e1      	adds	r1, r4, r3
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	2030      	movs	r0, #48	; 0x30
 800a422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a426:	4422      	add	r2, r4
 800a428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a42c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a430:	3302      	adds	r3, #2
 800a432:	e7c7      	b.n	800a3c4 <_printf_common+0x58>
 800a434:	2301      	movs	r3, #1
 800a436:	4622      	mov	r2, r4
 800a438:	4649      	mov	r1, r9
 800a43a:	4638      	mov	r0, r7
 800a43c:	47c0      	blx	r8
 800a43e:	3001      	adds	r0, #1
 800a440:	d0e6      	beq.n	800a410 <_printf_common+0xa4>
 800a442:	3601      	adds	r6, #1
 800a444:	e7d9      	b.n	800a3fa <_printf_common+0x8e>
	...

0800a448 <_printf_i>:
 800a448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a44c:	460c      	mov	r4, r1
 800a44e:	4691      	mov	r9, r2
 800a450:	7e27      	ldrb	r7, [r4, #24]
 800a452:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a454:	2f78      	cmp	r7, #120	; 0x78
 800a456:	4680      	mov	r8, r0
 800a458:	469a      	mov	sl, r3
 800a45a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a45e:	d807      	bhi.n	800a470 <_printf_i+0x28>
 800a460:	2f62      	cmp	r7, #98	; 0x62
 800a462:	d80a      	bhi.n	800a47a <_printf_i+0x32>
 800a464:	2f00      	cmp	r7, #0
 800a466:	f000 80d8 	beq.w	800a61a <_printf_i+0x1d2>
 800a46a:	2f58      	cmp	r7, #88	; 0x58
 800a46c:	f000 80a3 	beq.w	800a5b6 <_printf_i+0x16e>
 800a470:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a478:	e03a      	b.n	800a4f0 <_printf_i+0xa8>
 800a47a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a47e:	2b15      	cmp	r3, #21
 800a480:	d8f6      	bhi.n	800a470 <_printf_i+0x28>
 800a482:	a001      	add	r0, pc, #4	; (adr r0, 800a488 <_printf_i+0x40>)
 800a484:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a488:	0800a4e1 	.word	0x0800a4e1
 800a48c:	0800a4f5 	.word	0x0800a4f5
 800a490:	0800a471 	.word	0x0800a471
 800a494:	0800a471 	.word	0x0800a471
 800a498:	0800a471 	.word	0x0800a471
 800a49c:	0800a471 	.word	0x0800a471
 800a4a0:	0800a4f5 	.word	0x0800a4f5
 800a4a4:	0800a471 	.word	0x0800a471
 800a4a8:	0800a471 	.word	0x0800a471
 800a4ac:	0800a471 	.word	0x0800a471
 800a4b0:	0800a471 	.word	0x0800a471
 800a4b4:	0800a601 	.word	0x0800a601
 800a4b8:	0800a525 	.word	0x0800a525
 800a4bc:	0800a5e3 	.word	0x0800a5e3
 800a4c0:	0800a471 	.word	0x0800a471
 800a4c4:	0800a471 	.word	0x0800a471
 800a4c8:	0800a623 	.word	0x0800a623
 800a4cc:	0800a471 	.word	0x0800a471
 800a4d0:	0800a525 	.word	0x0800a525
 800a4d4:	0800a471 	.word	0x0800a471
 800a4d8:	0800a471 	.word	0x0800a471
 800a4dc:	0800a5eb 	.word	0x0800a5eb
 800a4e0:	680b      	ldr	r3, [r1, #0]
 800a4e2:	1d1a      	adds	r2, r3, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	600a      	str	r2, [r1, #0]
 800a4e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e0a3      	b.n	800a63c <_printf_i+0x1f4>
 800a4f4:	6825      	ldr	r5, [r4, #0]
 800a4f6:	6808      	ldr	r0, [r1, #0]
 800a4f8:	062e      	lsls	r6, r5, #24
 800a4fa:	f100 0304 	add.w	r3, r0, #4
 800a4fe:	d50a      	bpl.n	800a516 <_printf_i+0xce>
 800a500:	6805      	ldr	r5, [r0, #0]
 800a502:	600b      	str	r3, [r1, #0]
 800a504:	2d00      	cmp	r5, #0
 800a506:	da03      	bge.n	800a510 <_printf_i+0xc8>
 800a508:	232d      	movs	r3, #45	; 0x2d
 800a50a:	426d      	negs	r5, r5
 800a50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a510:	485e      	ldr	r0, [pc, #376]	; (800a68c <_printf_i+0x244>)
 800a512:	230a      	movs	r3, #10
 800a514:	e019      	b.n	800a54a <_printf_i+0x102>
 800a516:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a51a:	6805      	ldr	r5, [r0, #0]
 800a51c:	600b      	str	r3, [r1, #0]
 800a51e:	bf18      	it	ne
 800a520:	b22d      	sxthne	r5, r5
 800a522:	e7ef      	b.n	800a504 <_printf_i+0xbc>
 800a524:	680b      	ldr	r3, [r1, #0]
 800a526:	6825      	ldr	r5, [r4, #0]
 800a528:	1d18      	adds	r0, r3, #4
 800a52a:	6008      	str	r0, [r1, #0]
 800a52c:	0628      	lsls	r0, r5, #24
 800a52e:	d501      	bpl.n	800a534 <_printf_i+0xec>
 800a530:	681d      	ldr	r5, [r3, #0]
 800a532:	e002      	b.n	800a53a <_printf_i+0xf2>
 800a534:	0669      	lsls	r1, r5, #25
 800a536:	d5fb      	bpl.n	800a530 <_printf_i+0xe8>
 800a538:	881d      	ldrh	r5, [r3, #0]
 800a53a:	4854      	ldr	r0, [pc, #336]	; (800a68c <_printf_i+0x244>)
 800a53c:	2f6f      	cmp	r7, #111	; 0x6f
 800a53e:	bf0c      	ite	eq
 800a540:	2308      	moveq	r3, #8
 800a542:	230a      	movne	r3, #10
 800a544:	2100      	movs	r1, #0
 800a546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a54a:	6866      	ldr	r6, [r4, #4]
 800a54c:	60a6      	str	r6, [r4, #8]
 800a54e:	2e00      	cmp	r6, #0
 800a550:	bfa2      	ittt	ge
 800a552:	6821      	ldrge	r1, [r4, #0]
 800a554:	f021 0104 	bicge.w	r1, r1, #4
 800a558:	6021      	strge	r1, [r4, #0]
 800a55a:	b90d      	cbnz	r5, 800a560 <_printf_i+0x118>
 800a55c:	2e00      	cmp	r6, #0
 800a55e:	d04d      	beq.n	800a5fc <_printf_i+0x1b4>
 800a560:	4616      	mov	r6, r2
 800a562:	fbb5 f1f3 	udiv	r1, r5, r3
 800a566:	fb03 5711 	mls	r7, r3, r1, r5
 800a56a:	5dc7      	ldrb	r7, [r0, r7]
 800a56c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a570:	462f      	mov	r7, r5
 800a572:	42bb      	cmp	r3, r7
 800a574:	460d      	mov	r5, r1
 800a576:	d9f4      	bls.n	800a562 <_printf_i+0x11a>
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d10b      	bne.n	800a594 <_printf_i+0x14c>
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	07df      	lsls	r7, r3, #31
 800a580:	d508      	bpl.n	800a594 <_printf_i+0x14c>
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	6861      	ldr	r1, [r4, #4]
 800a586:	4299      	cmp	r1, r3
 800a588:	bfde      	ittt	le
 800a58a:	2330      	movle	r3, #48	; 0x30
 800a58c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a590:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a594:	1b92      	subs	r2, r2, r6
 800a596:	6122      	str	r2, [r4, #16]
 800a598:	f8cd a000 	str.w	sl, [sp]
 800a59c:	464b      	mov	r3, r9
 800a59e:	aa03      	add	r2, sp, #12
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	f7ff fee2 	bl	800a36c <_printf_common>
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	d14c      	bne.n	800a646 <_printf_i+0x1fe>
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b0:	b004      	add	sp, #16
 800a5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b6:	4835      	ldr	r0, [pc, #212]	; (800a68c <_printf_i+0x244>)
 800a5b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	680e      	ldr	r6, [r1, #0]
 800a5c0:	061f      	lsls	r7, r3, #24
 800a5c2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a5c6:	600e      	str	r6, [r1, #0]
 800a5c8:	d514      	bpl.n	800a5f4 <_printf_i+0x1ac>
 800a5ca:	07d9      	lsls	r1, r3, #31
 800a5cc:	bf44      	itt	mi
 800a5ce:	f043 0320 	orrmi.w	r3, r3, #32
 800a5d2:	6023      	strmi	r3, [r4, #0]
 800a5d4:	b91d      	cbnz	r5, 800a5de <_printf_i+0x196>
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	f023 0320 	bic.w	r3, r3, #32
 800a5dc:	6023      	str	r3, [r4, #0]
 800a5de:	2310      	movs	r3, #16
 800a5e0:	e7b0      	b.n	800a544 <_printf_i+0xfc>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	f043 0320 	orr.w	r3, r3, #32
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	2378      	movs	r3, #120	; 0x78
 800a5ec:	4828      	ldr	r0, [pc, #160]	; (800a690 <_printf_i+0x248>)
 800a5ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5f2:	e7e3      	b.n	800a5bc <_printf_i+0x174>
 800a5f4:	065e      	lsls	r6, r3, #25
 800a5f6:	bf48      	it	mi
 800a5f8:	b2ad      	uxthmi	r5, r5
 800a5fa:	e7e6      	b.n	800a5ca <_printf_i+0x182>
 800a5fc:	4616      	mov	r6, r2
 800a5fe:	e7bb      	b.n	800a578 <_printf_i+0x130>
 800a600:	680b      	ldr	r3, [r1, #0]
 800a602:	6826      	ldr	r6, [r4, #0]
 800a604:	6960      	ldr	r0, [r4, #20]
 800a606:	1d1d      	adds	r5, r3, #4
 800a608:	600d      	str	r5, [r1, #0]
 800a60a:	0635      	lsls	r5, r6, #24
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	d501      	bpl.n	800a614 <_printf_i+0x1cc>
 800a610:	6018      	str	r0, [r3, #0]
 800a612:	e002      	b.n	800a61a <_printf_i+0x1d2>
 800a614:	0671      	lsls	r1, r6, #25
 800a616:	d5fb      	bpl.n	800a610 <_printf_i+0x1c8>
 800a618:	8018      	strh	r0, [r3, #0]
 800a61a:	2300      	movs	r3, #0
 800a61c:	6123      	str	r3, [r4, #16]
 800a61e:	4616      	mov	r6, r2
 800a620:	e7ba      	b.n	800a598 <_printf_i+0x150>
 800a622:	680b      	ldr	r3, [r1, #0]
 800a624:	1d1a      	adds	r2, r3, #4
 800a626:	600a      	str	r2, [r1, #0]
 800a628:	681e      	ldr	r6, [r3, #0]
 800a62a:	6862      	ldr	r2, [r4, #4]
 800a62c:	2100      	movs	r1, #0
 800a62e:	4630      	mov	r0, r6
 800a630:	f7f5 fdde 	bl	80001f0 <memchr>
 800a634:	b108      	cbz	r0, 800a63a <_printf_i+0x1f2>
 800a636:	1b80      	subs	r0, r0, r6
 800a638:	6060      	str	r0, [r4, #4]
 800a63a:	6863      	ldr	r3, [r4, #4]
 800a63c:	6123      	str	r3, [r4, #16]
 800a63e:	2300      	movs	r3, #0
 800a640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a644:	e7a8      	b.n	800a598 <_printf_i+0x150>
 800a646:	6923      	ldr	r3, [r4, #16]
 800a648:	4632      	mov	r2, r6
 800a64a:	4649      	mov	r1, r9
 800a64c:	4640      	mov	r0, r8
 800a64e:	47d0      	blx	sl
 800a650:	3001      	adds	r0, #1
 800a652:	d0ab      	beq.n	800a5ac <_printf_i+0x164>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	079b      	lsls	r3, r3, #30
 800a658:	d413      	bmi.n	800a682 <_printf_i+0x23a>
 800a65a:	68e0      	ldr	r0, [r4, #12]
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	4298      	cmp	r0, r3
 800a660:	bfb8      	it	lt
 800a662:	4618      	movlt	r0, r3
 800a664:	e7a4      	b.n	800a5b0 <_printf_i+0x168>
 800a666:	2301      	movs	r3, #1
 800a668:	4632      	mov	r2, r6
 800a66a:	4649      	mov	r1, r9
 800a66c:	4640      	mov	r0, r8
 800a66e:	47d0      	blx	sl
 800a670:	3001      	adds	r0, #1
 800a672:	d09b      	beq.n	800a5ac <_printf_i+0x164>
 800a674:	3501      	adds	r5, #1
 800a676:	68e3      	ldr	r3, [r4, #12]
 800a678:	9903      	ldr	r1, [sp, #12]
 800a67a:	1a5b      	subs	r3, r3, r1
 800a67c:	42ab      	cmp	r3, r5
 800a67e:	dcf2      	bgt.n	800a666 <_printf_i+0x21e>
 800a680:	e7eb      	b.n	800a65a <_printf_i+0x212>
 800a682:	2500      	movs	r5, #0
 800a684:	f104 0619 	add.w	r6, r4, #25
 800a688:	e7f5      	b.n	800a676 <_printf_i+0x22e>
 800a68a:	bf00      	nop
 800a68c:	0800be25 	.word	0x0800be25
 800a690:	0800be36 	.word	0x0800be36

0800a694 <__sread>:
 800a694:	b510      	push	{r4, lr}
 800a696:	460c      	mov	r4, r1
 800a698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a69c:	f000 f8e2 	bl	800a864 <_read_r>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	bfab      	itete	ge
 800a6a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6a6:	89a3      	ldrhlt	r3, [r4, #12]
 800a6a8:	181b      	addge	r3, r3, r0
 800a6aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6ae:	bfac      	ite	ge
 800a6b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6b2:	81a3      	strhlt	r3, [r4, #12]
 800a6b4:	bd10      	pop	{r4, pc}

0800a6b6 <__swrite>:
 800a6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ba:	461f      	mov	r7, r3
 800a6bc:	898b      	ldrh	r3, [r1, #12]
 800a6be:	05db      	lsls	r3, r3, #23
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	4616      	mov	r6, r2
 800a6c6:	d505      	bpl.n	800a6d4 <__swrite+0x1e>
 800a6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f000 f868 	bl	800a7a4 <_lseek_r>
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6de:	81a3      	strh	r3, [r4, #12]
 800a6e0:	4632      	mov	r2, r6
 800a6e2:	463b      	mov	r3, r7
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ea:	f000 b817 	b.w	800a71c <_write_r>

0800a6ee <__sseek>:
 800a6ee:	b510      	push	{r4, lr}
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f6:	f000 f855 	bl	800a7a4 <_lseek_r>
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	bf15      	itete	ne
 800a700:	6560      	strne	r0, [r4, #84]	; 0x54
 800a702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a70a:	81a3      	strheq	r3, [r4, #12]
 800a70c:	bf18      	it	ne
 800a70e:	81a3      	strhne	r3, [r4, #12]
 800a710:	bd10      	pop	{r4, pc}

0800a712 <__sclose>:
 800a712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a716:	f000 b813 	b.w	800a740 <_close_r>
	...

0800a71c <_write_r>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	4d07      	ldr	r5, [pc, #28]	; (800a73c <_write_r+0x20>)
 800a720:	4604      	mov	r4, r0
 800a722:	4608      	mov	r0, r1
 800a724:	4611      	mov	r1, r2
 800a726:	2200      	movs	r2, #0
 800a728:	602a      	str	r2, [r5, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	f7f7 fffd 	bl	800272a <_write>
 800a730:	1c43      	adds	r3, r0, #1
 800a732:	d102      	bne.n	800a73a <_write_r+0x1e>
 800a734:	682b      	ldr	r3, [r5, #0]
 800a736:	b103      	cbz	r3, 800a73a <_write_r+0x1e>
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
 800a73c:	20002bf0 	.word	0x20002bf0

0800a740 <_close_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	4d06      	ldr	r5, [pc, #24]	; (800a75c <_close_r+0x1c>)
 800a744:	2300      	movs	r3, #0
 800a746:	4604      	mov	r4, r0
 800a748:	4608      	mov	r0, r1
 800a74a:	602b      	str	r3, [r5, #0]
 800a74c:	f7f8 f809 	bl	8002762 <_close>
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	d102      	bne.n	800a75a <_close_r+0x1a>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	b103      	cbz	r3, 800a75a <_close_r+0x1a>
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	bd38      	pop	{r3, r4, r5, pc}
 800a75c:	20002bf0 	.word	0x20002bf0

0800a760 <_fstat_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	4d07      	ldr	r5, [pc, #28]	; (800a780 <_fstat_r+0x20>)
 800a764:	2300      	movs	r3, #0
 800a766:	4604      	mov	r4, r0
 800a768:	4608      	mov	r0, r1
 800a76a:	4611      	mov	r1, r2
 800a76c:	602b      	str	r3, [r5, #0]
 800a76e:	f7f8 f804 	bl	800277a <_fstat>
 800a772:	1c43      	adds	r3, r0, #1
 800a774:	d102      	bne.n	800a77c <_fstat_r+0x1c>
 800a776:	682b      	ldr	r3, [r5, #0]
 800a778:	b103      	cbz	r3, 800a77c <_fstat_r+0x1c>
 800a77a:	6023      	str	r3, [r4, #0]
 800a77c:	bd38      	pop	{r3, r4, r5, pc}
 800a77e:	bf00      	nop
 800a780:	20002bf0 	.word	0x20002bf0

0800a784 <_isatty_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4d06      	ldr	r5, [pc, #24]	; (800a7a0 <_isatty_r+0x1c>)
 800a788:	2300      	movs	r3, #0
 800a78a:	4604      	mov	r4, r0
 800a78c:	4608      	mov	r0, r1
 800a78e:	602b      	str	r3, [r5, #0]
 800a790:	f7f8 f803 	bl	800279a <_isatty>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d102      	bne.n	800a79e <_isatty_r+0x1a>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	b103      	cbz	r3, 800a79e <_isatty_r+0x1a>
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	bd38      	pop	{r3, r4, r5, pc}
 800a7a0:	20002bf0 	.word	0x20002bf0

0800a7a4 <_lseek_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4d07      	ldr	r5, [pc, #28]	; (800a7c4 <_lseek_r+0x20>)
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	4608      	mov	r0, r1
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	602a      	str	r2, [r5, #0]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	f7f7 fffc 	bl	80027b0 <_lseek>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	d102      	bne.n	800a7c2 <_lseek_r+0x1e>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	b103      	cbz	r3, 800a7c2 <_lseek_r+0x1e>
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
 800a7c4:	20002bf0 	.word	0x20002bf0

0800a7c8 <memcpy>:
 800a7c8:	440a      	add	r2, r1
 800a7ca:	4291      	cmp	r1, r2
 800a7cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7d0:	d100      	bne.n	800a7d4 <memcpy+0xc>
 800a7d2:	4770      	bx	lr
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7de:	4291      	cmp	r1, r2
 800a7e0:	d1f9      	bne.n	800a7d6 <memcpy+0xe>
 800a7e2:	bd10      	pop	{r4, pc}

0800a7e4 <memmove>:
 800a7e4:	4288      	cmp	r0, r1
 800a7e6:	b510      	push	{r4, lr}
 800a7e8:	eb01 0402 	add.w	r4, r1, r2
 800a7ec:	d902      	bls.n	800a7f4 <memmove+0x10>
 800a7ee:	4284      	cmp	r4, r0
 800a7f0:	4623      	mov	r3, r4
 800a7f2:	d807      	bhi.n	800a804 <memmove+0x20>
 800a7f4:	1e43      	subs	r3, r0, #1
 800a7f6:	42a1      	cmp	r1, r4
 800a7f8:	d008      	beq.n	800a80c <memmove+0x28>
 800a7fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a802:	e7f8      	b.n	800a7f6 <memmove+0x12>
 800a804:	4402      	add	r2, r0
 800a806:	4601      	mov	r1, r0
 800a808:	428a      	cmp	r2, r1
 800a80a:	d100      	bne.n	800a80e <memmove+0x2a>
 800a80c:	bd10      	pop	{r4, pc}
 800a80e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a816:	e7f7      	b.n	800a808 <memmove+0x24>

0800a818 <_realloc_r>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	4607      	mov	r7, r0
 800a81c:	4614      	mov	r4, r2
 800a81e:	460e      	mov	r6, r1
 800a820:	b921      	cbnz	r1, 800a82c <_realloc_r+0x14>
 800a822:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a826:	4611      	mov	r1, r2
 800a828:	f7ff b832 	b.w	8009890 <_malloc_r>
 800a82c:	b922      	cbnz	r2, 800a838 <_realloc_r+0x20>
 800a82e:	f7fe ffdf 	bl	80097f0 <_free_r>
 800a832:	4625      	mov	r5, r4
 800a834:	4628      	mov	r0, r5
 800a836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a838:	f000 f826 	bl	800a888 <_malloc_usable_size_r>
 800a83c:	42a0      	cmp	r0, r4
 800a83e:	d20f      	bcs.n	800a860 <_realloc_r+0x48>
 800a840:	4621      	mov	r1, r4
 800a842:	4638      	mov	r0, r7
 800a844:	f7ff f824 	bl	8009890 <_malloc_r>
 800a848:	4605      	mov	r5, r0
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d0f2      	beq.n	800a834 <_realloc_r+0x1c>
 800a84e:	4631      	mov	r1, r6
 800a850:	4622      	mov	r2, r4
 800a852:	f7ff ffb9 	bl	800a7c8 <memcpy>
 800a856:	4631      	mov	r1, r6
 800a858:	4638      	mov	r0, r7
 800a85a:	f7fe ffc9 	bl	80097f0 <_free_r>
 800a85e:	e7e9      	b.n	800a834 <_realloc_r+0x1c>
 800a860:	4635      	mov	r5, r6
 800a862:	e7e7      	b.n	800a834 <_realloc_r+0x1c>

0800a864 <_read_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4d07      	ldr	r5, [pc, #28]	; (800a884 <_read_r+0x20>)
 800a868:	4604      	mov	r4, r0
 800a86a:	4608      	mov	r0, r1
 800a86c:	4611      	mov	r1, r2
 800a86e:	2200      	movs	r2, #0
 800a870:	602a      	str	r2, [r5, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	f7f7 ff3c 	bl	80026f0 <_read>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_read_r+0x1e>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_read_r+0x1e>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	20002bf0 	.word	0x20002bf0

0800a888 <_malloc_usable_size_r>:
 800a888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a88c:	1f18      	subs	r0, r3, #4
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bfbc      	itt	lt
 800a892:	580b      	ldrlt	r3, [r1, r0]
 800a894:	18c0      	addlt	r0, r0, r3
 800a896:	4770      	bx	lr

0800a898 <_init>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	bf00      	nop
 800a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89e:	bc08      	pop	{r3}
 800a8a0:	469e      	mov	lr, r3
 800a8a2:	4770      	bx	lr

0800a8a4 <_fini>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	bf00      	nop
 800a8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8aa:	bc08      	pop	{r3}
 800a8ac:	469e      	mov	lr, r3
 800a8ae:	4770      	bx	lr
