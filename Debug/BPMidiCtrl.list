
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001598  0800a950  0800a950  0001a950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bee8  0800bee8  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bee8  0800bee8  0001bee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bef0  0800bef0  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bef0  0800bef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bef4  0800bef4  0001bef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  0800bef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a3c  200001b8  0800c0b0  000201b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bf4  0800c0b0  00022bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c23d  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa4  00000000  00000000  0003c425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  000403d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001c940  00000000  00000000  00041580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001881b  00000000  00000000  0005dec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a1940  00000000  00000000  000766db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0011801b  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001008  00000000  00000000  00118070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d8  00000000  00000000  00119078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001b8 	.word	0x200001b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a938 	.word	0x0800a938

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001bc 	.word	0x200001bc
 80001dc:	0800a938 	.word	0x0800a938

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b96e 	b.w	8000f10 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468c      	mov	ip, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8083 	bne.w	8000d62 <__udivmoddi4+0x116>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d947      	bls.n	8000cf2 <__udivmoddi4+0xa6>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b142      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	f1c2 0020 	rsb	r0, r2, #32
 8000c6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea40 0c01 	orr.w	ip, r0, r1
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbc f6f8 	udiv	r6, ip, r8
 8000c84:	fa1f fe87 	uxth.w	lr, r7
 8000c88:	fb08 c116 	mls	r1, r8, r6, ip
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f10e 	mul.w	r1, r6, lr
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 8119 	bcs.w	8000ed4 <__udivmoddi4+0x288>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8116 	bls.w	8000ed4 <__udivmoddi4+0x288>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8105 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8102 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xaa>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d150      	bne.n	8000da0 <__udivmoddi4+0x154>
 8000cfe:	1bcb      	subs	r3, r1, r7
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	2601      	movs	r6, #1
 8000d0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb08 f30c 	mul.w	r3, r8, ip
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0xe2>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f200 80e9 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x10c>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x10a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80d9 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e7bf      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x12e>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80b1 	beq.w	8000ece <__udivmoddi4+0x282>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x1cc>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0x140>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80b8 	bhi.w	8000efc <__udivmoddi4+0x2b0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	468c      	mov	ip, r1
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0a8      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0xa0>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f603 	lsr.w	r6, r0, r3
 8000da8:	4097      	lsls	r7, r2
 8000daa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db2:	40d9      	lsrs	r1, r3
 8000db4:	4330      	orrs	r0, r6
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f108 	mul.w	r1, r6, r8
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x19c>
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dda:	f080 808d 	bcs.w	8000ef8 <__udivmoddi4+0x2ac>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 808a 	bls.w	8000ef8 <__udivmoddi4+0x2ac>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	443b      	add	r3, r7
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b281      	uxth	r1, r0
 8000dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb00 f308 	mul.w	r3, r0, r8
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x1c4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e06:	d273      	bcs.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d971      	bls.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4439      	add	r1, r7
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e16:	e778      	b.n	8000d0a <__udivmoddi4+0xbe>
 8000e18:	f1c6 0c20 	rsb	ip, r6, #32
 8000e1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e24:	431c      	orrs	r4, r3
 8000e26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e36:	431f      	orrs	r7, r3
 8000e38:	0c3b      	lsrs	r3, r7, #16
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fa1f f884 	uxth.w	r8, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	fa02 f206 	lsl.w	r2, r2, r6
 8000e54:	fa00 f306 	lsl.w	r3, r0, r6
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x220>
 8000e5a:	1861      	adds	r1, r4, r1
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e60:	d248      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e62:	458a      	cmp	sl, r1
 8000e64:	d946      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4421      	add	r1, r4
 8000e6c:	eba1 010a 	sub.w	r1, r1, sl
 8000e70:	b2bf      	uxth	r7, r7
 8000e72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7e:	fb00 f808 	mul.w	r8, r0, r8
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x24a>
 8000e86:	19e7      	adds	r7, r4, r7
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8c:	d22e      	bcs.n	8000eec <__udivmoddi4+0x2a0>
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d92c      	bls.n	8000eec <__udivmoddi4+0x2a0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4427      	add	r7, r4
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	eba7 0708 	sub.w	r7, r7, r8
 8000e9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea2:	454f      	cmp	r7, r9
 8000ea4:	46c6      	mov	lr, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	d31a      	bcc.n	8000ee0 <__udivmoddi4+0x294>
 8000eaa:	d017      	beq.n	8000edc <__udivmoddi4+0x290>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x27a>
 8000eae:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec0:	40f7      	lsrs	r7, r6
 8000ec2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e70b      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fd      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000edc:	4543      	cmp	r3, r8
 8000ede:	d2e5      	bcs.n	8000eac <__udivmoddi4+0x260>
 8000ee0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7df      	b.n	8000eac <__udivmoddi4+0x260>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e7d2      	b.n	8000e96 <__udivmoddi4+0x24a>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	e78d      	b.n	8000e10 <__udivmoddi4+0x1c4>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	e7b9      	b.n	8000e6c <__udivmoddi4+0x220>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	e775      	b.n	8000de8 <__udivmoddi4+0x19c>
 8000efc:	4630      	mov	r0, r6
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0x14a>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	4439      	add	r1, r7
 8000f06:	e713      	b.n	8000d30 <__udivmoddi4+0xe4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	e724      	b.n	8000d58 <__udivmoddi4+0x10c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <KnobMap>:
//uint8_t Knob_Map(Knob *k) {
//	return k->value * k->max_range / (k->max_values - 1);
//}

// Maps values from (0, max_values-1) to (0, m)
uint8_t KnobMap(Knob *k, uint8_t value, uint8_t m) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
 8000f20:	4613      	mov	r3, r2
 8000f22:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	78ba      	ldrb	r2, [r7, #2]
 8000f28:	fb02 f203 	mul.w	r2, r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7f1b      	ldrb	r3, [r3, #28]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ffc2 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <ADC_Mux_Select>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Polls each channel NUM_ADC_SAMPLES times and saves the average ADC reading

void ADC_Mux_Select(uint8_t c) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
    if (c > NUM_ADC_CHANNELS) return;
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d824      	bhi.n	8001036 <ADC_Mux_Select+0x5a>

    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e01d      	b.n	800102e <ADC_Mux_Select+0x52>
        if (c & (1 << i)) {
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	fa42 f303 	asr.w	r3, r2, r3
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d009      	beq.n	8001016 <ADC_Mux_Select+0x3a>
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_SET);
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <ADC_Mux_Select+0x64>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	480d      	ldr	r0, [pc, #52]	; (8001044 <ADC_Mux_Select+0x68>)
 8001010:	f002 fc54 	bl	80038bc <HAL_GPIO_WritePin>
 8001014:	e008      	b.n	8001028 <ADC_Mux_Select+0x4c>
        } else {
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_RESET);
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <ADC_Mux_Select+0x64>)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800101e:	2200      	movs	r2, #0
 8001020:	4619      	mov	r1, r3
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <ADC_Mux_Select+0x68>)
 8001024:	f002 fc4a 	bl	80038bc <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b03      	cmp	r3, #3
 8001032:	ddde      	ble.n	8000ff2 <ADC_Mux_Select+0x16>
 8001034:	e000      	b.n	8001038 <ADC_Mux_Select+0x5c>
    if (c > NUM_ADC_CHANNELS) return;
 8001036:	bf00      	nop
        }
    }
}
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0800be30 	.word	0x0800be30
 8001044:	40020400 	.word	0x40020400

08001048 <ADC_Read_Knobs>:

void ADC_Read_Knobs() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b08e      	sub	sp, #56	; 0x38
 800104c:	af00      	add	r7, sp, #0
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001054:	e06c      	b.n	8001130 <ADC_Read_Knobs+0xe8>
        uint16_t adcBuf[NUM_ADC_SAMPLES];

        ADC_Mux_Select(channel);
 8001056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffbe 	bl	8000fdc <ADC_Mux_Select>

        // Select channel
        ADC_ChannelConfTypeDef sConfig = { 0 };
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
        sConfig.Channel = adcChannels[channel];
 800106e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001072:	4a34      	ldr	r2, [pc, #208]	; (8001144 <ADC_Read_Knobs+0xfc>)
 8001074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001078:	623b      	str	r3, [r7, #32]
        sConfig.Rank = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	4619      	mov	r1, r3
 8001088:	482f      	ldr	r0, [pc, #188]	; (8001148 <ADC_Read_Knobs+0x100>)
 800108a:	f001 ff3b 	bl	8002f04 <HAL_ADC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <ADC_Read_Knobs+0x50>
            Error_Handler();
 8001094:	f000 fd04 	bl	8001aa0 <Error_Handler>
        }

        // Sample the channel NUM_ADC_SAMPLES times to the buffer
        HAL_ADC_Start(&hadc1);
 8001098:	482b      	ldr	r0, [pc, #172]	; (8001148 <ADC_Read_Knobs+0x100>)
 800109a:	f001 fdb3 	bl	8002c04 <HAL_ADC_Start>
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80010a4:	e016      	b.n	80010d4 <ADC_Read_Knobs+0x8c>
            HAL_ADC_PollForConversion(&hadc1, 1000);
 80010a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010aa:	4827      	ldr	r0, [pc, #156]	; (8001148 <ADC_Read_Knobs+0x100>)
 80010ac:	f001 fe91 	bl	8002dd2 <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 80010b0:	4825      	ldr	r0, [pc, #148]	; (8001148 <ADC_Read_Knobs+0x100>)
 80010b2:	f001 ff19 	bl	8002ee8 <HAL_ADC_GetValue>
 80010b6:	4602      	mov	r2, r0
 80010b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010bc:	b292      	uxth	r2, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80010c4:	440b      	add	r3, r1
 80010c6:	f823 2c38 	strh.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80010ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010ce:	3301      	adds	r3, #1
 80010d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80010d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d9e4      	bls.n	80010a6 <ADC_Read_Knobs+0x5e>
        }
        HAL_ADC_Stop(&hadc1);
 80010dc:	481a      	ldr	r0, [pc, #104]	; (8001148 <ADC_Read_Knobs+0x100>)
 80010de:	f001 fe45 	bl	8002d6c <HAL_ADC_Stop>

        // Calculate average of all samples for the channel
        uint16_t adc_sum = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	86bb      	strh	r3, [r7, #52]	; 0x34
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80010ec:	e00f      	b.n	800110e <ADC_Read_Knobs+0xc6>
            adc_sum += adcBuf[i];
 80010ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80010f8:	4413      	add	r3, r2
 80010fa:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 80010fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001100:	4413      	add	r3, r2
 8001102:	86bb      	strh	r3, [r7, #52]	; 0x34
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8001104:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001108:	3301      	adds	r3, #1
 800110a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800110e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001112:	2b0f      	cmp	r3, #15
 8001114:	d9eb      	bls.n	80010ee <ADC_Read_Knobs+0xa6>
        }

        adcAveraged[channel] = adc_sum / NUM_ADC_SAMPLES;
 8001116:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800111a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800111c:	0912      	lsrs	r2, r2, #4
 800111e:	b291      	uxth	r1, r2
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <ADC_Read_Knobs+0x104>)
 8001122:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 8001126:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800112a:	3301      	adds	r3, #1
 800112c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001130:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001134:	2b03      	cmp	r3, #3
 8001136:	d98e      	bls.n	8001056 <ADC_Read_Knobs+0xe>
    }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3738      	adds	r7, #56	; 0x38
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000010 	.word	0x20000010
 8001148:	2000221c 	.word	0x2000221c
 800114c:	200001d4 	.word	0x200001d4

08001150 <MIDI_Send>:

// Sends a CC message for knob k with the specified value
void MIDI_Send(Knob *k, uint8_t value) {
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, KnobMap(k, value, k->max_range));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7e1c      	ldrb	r4, [r3, #24]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7e5d      	ldrb	r5, [r3, #25]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7f5a      	ldrb	r2, [r3, #29]
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fed1 	bl	8000f14 <KnobMap>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4629      	mov	r1, r5
 8001178:	4620      	mov	r0, r4
 800117a:	f007 feed 	bl	8008f58 <MX_USB_Send_Midi>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001188 <MIDI_Scale_And_Filter>:

// Scales an ADC value from (0, 255) to (0, k->max_values) an applies EMA filter
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * k->max_values / UPPER_BOUND_ADC;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7f1b      	ldrb	r3, [r3, #28]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9cb 	bl	8000534 <__aeabi_i2d>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <MIDI_Scale_And_Filter+0x130>)
 80011a4:	f7ff fb5a 	bl	800085c <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fce4 	bl	8000b7c <__aeabi_d2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f7ff f9cd 	bl	8000558 <__aeabi_f2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <MIDI_Scale_And_Filter+0x134>)
 80011c4:	f7ff fa20 	bl	8000608 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9ae 	bl	8000534 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff fa12 	bl	8000608 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4614      	mov	r4, r2
 80011ea:	461d      	mov	r5, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7edb      	ldrb	r3, [r3, #27]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f99f 	bl	8000534 <__aeabi_i2d>
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <MIDI_Scale_And_Filter+0x134>)
 80011fc:	f7ff fa04 	bl	8000608 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff f848 	bl	800029c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4614      	mov	r4, r2
 8001212:	461d      	mov	r5, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7f5b      	ldrb	r3, [r3, #29]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f98b 	bl	8000534 <__aeabi_i2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4620      	mov	r0, r4
 8001224:	4629      	mov	r1, r5
 8001226:	f7ff fc61 	bl	8000aec <__aeabi_dcmplt>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d032      	beq.n	8001296 <MIDI_Scale_And_Filter+0x10e>
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff f991 	bl	8000558 <__aeabi_f2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MIDI_Scale_And_Filter+0x134>)
 800123c:	f7ff f9e4 	bl	8000608 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4614      	mov	r4, r2
 8001246:	461d      	mov	r5, r3
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f972 	bl	8000534 <__aeabi_i2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f9d6 	bl	8000608 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7edb      	ldrb	r3, [r3, #27]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f963 	bl	8000534 <__aeabi_i2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MIDI_Scale_And_Filter+0x134>)
 8001274:	f7ff f9c8 	bl	8000608 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f80c 	bl	800029c <__adddf3>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fc56 	bl	8000b3c <__aeabi_d2uiz>
 8001290:	4603      	mov	r3, r0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	e00c      	b.n	80012b0 <MIDI_Scale_And_Filter+0x128>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7f5b      	ldrb	r3, [r3, #29]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f94a 	bl	8000534 <__aeabi_i2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fc48 	bl	8000b3c <__aeabi_d2uiz>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b2db      	uxtb	r3, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bdb0      	pop	{r4, r5, r7, pc}
 80012b8:	406f4000 	.word	0x406f4000
 80012bc:	3fe00000 	.word	0x3fe00000

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0a2      	sub	sp, #136	; 0x88
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

    Knob knobs[4] = { { .init_value = 63, .row = 0, .col = 0, .label = "Cutoff", .channel = 0, .cc = 17, .value = 0, .max_values = 128, .max_range = 127, .isLocked = 1 },
 80012c6:	463b      	mov	r3, r7
 80012c8:	2280      	movs	r2, #128	; 0x80
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f008 fd05 	bl	8009cdc <memset>
 80012d2:	4acf      	ldr	r2, [pc, #828]	; (8001610 <main+0x350>)
 80012d4:	1cbb      	adds	r3, r7, #2
 80012d6:	6810      	ldr	r0, [r2, #0]
 80012d8:	6018      	str	r0, [r3, #0]
 80012da:	8891      	ldrh	r1, [r2, #4]
 80012dc:	7992      	ldrb	r2, [r2, #6]
 80012de:	8099      	strh	r1, [r3, #4]
 80012e0:	719a      	strb	r2, [r3, #6]
 80012e2:	f107 0309 	add.w	r3, r7, #9
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	2311      	movs	r3, #17
 80012ee:	767b      	strb	r3, [r7, #25]
 80012f0:	233f      	movs	r3, #63	; 0x3f
 80012f2:	76bb      	strb	r3, [r7, #26]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	773b      	strb	r3, [r7, #28]
 80012f8:	237f      	movs	r3, #127	; 0x7f
 80012fa:	777b      	strb	r3, [r7, #29]
 80012fc:	2301      	movs	r3, #1
 80012fe:	77bb      	strb	r3, [r7, #30]
 8001300:	2301      	movs	r3, #1
 8001302:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001306:	4bc3      	ldr	r3, [pc, #780]	; (8001614 <main+0x354>)
 8001308:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800130c:	cb03      	ldmia	r3!, {r0, r1}
 800130e:	6010      	str	r0, [r2, #0]
 8001310:	6051      	str	r1, [r2, #4]
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	8113      	strh	r3, [r2, #8]
 8001316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	711a      	strb	r2, [r3, #4]
 8001320:	2301      	movs	r3, #1
 8001322:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001326:	2312      	movs	r3, #18
 8001328:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800132c:	237f      	movs	r3, #127	; 0x7f
 800132e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001338:	237f      	movs	r3, #127	; 0x7f
 800133a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800133e:	2301      	movs	r3, #1
 8001340:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8001344:	4ab4      	ldr	r2, [pc, #720]	; (8001618 <main+0x358>)
 8001346:	f107 0342 	add.w	r3, r7, #66	; 0x42
 800134a:	6810      	ldr	r0, [r2, #0]
 800134c:	6018      	str	r0, [r3, #0]
 800134e:	8892      	ldrh	r2, [r2, #4]
 8001350:	809a      	strh	r2, [r3, #4]
 8001352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	721a      	strb	r2, [r3, #8]
 800135e:	2302      	movs	r3, #2
 8001360:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8001364:	2313      	movs	r3, #19
 8001366:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 800136a:	2305      	movs	r3, #5
 800136c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8001370:	230c      	movs	r3, #12
 8001372:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8001376:	237f      	movs	r3, #127	; 0x7f
 8001378:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800137c:	2301      	movs	r3, #1
 800137e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001382:	2301      	movs	r3, #1
 8001384:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8001388:	2301      	movs	r3, #1
 800138a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 800138e:	4aa3      	ldr	r2, [pc, #652]	; (800161c <main+0x35c>)
 8001390:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8001394:	6810      	ldr	r0, [r2, #0]
 8001396:	6018      	str	r0, [r3, #0]
 8001398:	8892      	ldrh	r2, [r2, #4]
 800139a:	809a      	strh	r2, [r3, #4]
 800139c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	721a      	strb	r2, [r3, #8]
 80013a8:	2303      	movs	r3, #3
 80013aa:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 80013ae:	2314      	movs	r3, #20
 80013b0:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 80013b4:	230b      	movs	r3, #11
 80013b6:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 80013ba:	230c      	movs	r3, #12
 80013bc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 80013c0:	230b      	movs	r3, #11
 80013c2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80013c6:	2301      	movs	r3, #1
 80013c8:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            { .init_value = 127, .row = 0, .col = 1, .label = "Resonance", .channel = 1, .cc = 18, .value = 0, .max_values = 128, .max_range = 127, .isLocked = 0 },
            { .init_value = 5, .row = 1, .col = 0, .label = "Osc 0", .channel = 2, .cc = 19, .value = 0, .max_values = 12, .max_range = 127, .isLocked = 1 },
            { .init_value = 11, .row = 1, .col = 1, .label = "Osc 1", .channel = 3, .cc = 20, .value = 0, .max_values = 12, .max_range = 11, .isLocked = 1 } };

    for (int i = 2; i < 4; i++) {
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013d2:	e0c4      	b.n	800155e <main+0x29e>
        knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 80013d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013d8:	015b      	lsls	r3, r3, #5
 80013da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013de:	4413      	add	r3, r2
 80013e0:	3b6c      	subs	r3, #108	; 0x6c
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4613      	mov	r3, r2
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f008 fc5f 	bl	8009cb0 <malloc>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013fa:	015b      	lsls	r3, r3, #5
 80013fc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001400:	440b      	add	r3, r1
 8001402:	3b74      	subs	r3, #116	; 0x74
 8001404:	601a      	str	r2, [r3, #0]
        strncpy(knobs[i].sub_labels[0], "MultiSaw", MAX_LABEL_CHARS);
 8001406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001410:	4413      	add	r3, r2
 8001412:	3b74      	subs	r3, #116	; 0x74
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	220e      	movs	r2, #14
 8001418:	4981      	ldr	r1, [pc, #516]	; (8001620 <main+0x360>)
 800141a:	4618      	mov	r0, r3
 800141c:	f008 fe0d 	bl	800a03a <strncpy>
        strncpy(knobs[i].sub_labels[1], "TriWrap", MAX_LABEL_CHARS);
 8001420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001424:	015b      	lsls	r3, r3, #5
 8001426:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800142a:	4413      	add	r3, r2
 800142c:	3b74      	subs	r3, #116	; 0x74
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	330f      	adds	r3, #15
 8001432:	220e      	movs	r2, #14
 8001434:	497b      	ldr	r1, [pc, #492]	; (8001624 <main+0x364>)
 8001436:	4618      	mov	r0, r3
 8001438:	f008 fdff 	bl	800a03a <strncpy>
        strncpy(knobs[i].sub_labels[2], "Noise", MAX_LABEL_CHARS);
 800143c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001440:	015b      	lsls	r3, r3, #5
 8001442:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001446:	4413      	add	r3, r2
 8001448:	3b74      	subs	r3, #116	; 0x74
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	331e      	adds	r3, #30
 800144e:	220e      	movs	r2, #14
 8001450:	4975      	ldr	r1, [pc, #468]	; (8001628 <main+0x368>)
 8001452:	4618      	mov	r0, r3
 8001454:	f008 fdf1 	bl	800a03a <strncpy>
        strncpy(knobs[i].sub_labels[3], "Feedback", MAX_LABEL_CHARS);
 8001458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800145c:	015b      	lsls	r3, r3, #5
 800145e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001462:	4413      	add	r3, r2
 8001464:	3b74      	subs	r3, #116	; 0x74
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	332d      	adds	r3, #45	; 0x2d
 800146a:	220e      	movs	r2, #14
 800146c:	496f      	ldr	r1, [pc, #444]	; (800162c <main+0x36c>)
 800146e:	4618      	mov	r0, r3
 8001470:	f008 fde3 	bl	800a03a <strncpy>
        strncpy(knobs[i].sub_labels[4], "Pulse", MAX_LABEL_CHARS);
 8001474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001478:	015b      	lsls	r3, r3, #5
 800147a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800147e:	4413      	add	r3, r2
 8001480:	3b74      	subs	r3, #116	; 0x74
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	333c      	adds	r3, #60	; 0x3c
 8001486:	220e      	movs	r2, #14
 8001488:	4969      	ldr	r1, [pc, #420]	; (8001630 <main+0x370>)
 800148a:	4618      	mov	r0, r3
 800148c:	f008 fdd5 	bl	800a03a <strncpy>
        strncpy(knobs[i].sub_labels[5], "Saw", MAX_LABEL_CHARS);
 8001490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001494:	015b      	lsls	r3, r3, #5
 8001496:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800149a:	4413      	add	r3, r2
 800149c:	3b74      	subs	r3, #116	; 0x74
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	334b      	adds	r3, #75	; 0x4b
 80014a2:	220e      	movs	r2, #14
 80014a4:	4963      	ldr	r1, [pc, #396]	; (8001634 <main+0x374>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f008 fdc7 	bl	800a03a <strncpy>
        strncpy(knobs[i].sub_labels[6], "Triangle", MAX_LABEL_CHARS);
 80014ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014b0:	015b      	lsls	r3, r3, #5
 80014b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014b6:	4413      	add	r3, r2
 80014b8:	3b74      	subs	r3, #116	; 0x74
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	335a      	adds	r3, #90	; 0x5a
 80014be:	220e      	movs	r2, #14
 80014c0:	495d      	ldr	r1, [pc, #372]	; (8001638 <main+0x378>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f008 fdb9 	bl	800a03a <strncpy>
        strncpy(knobs[i].sub_labels[7], "Pulse5", MAX_LABEL_CHARS);
 80014c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014cc:	015b      	lsls	r3, r3, #5
 80014ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014d2:	4413      	add	r3, r2
 80014d4:	3b74      	subs	r3, #116	; 0x74
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3369      	adds	r3, #105	; 0x69
 80014da:	220e      	movs	r2, #14
 80014dc:	4957      	ldr	r1, [pc, #348]	; (800163c <main+0x37c>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f008 fdab 	bl	800a03a <strncpy>
        strncpy(knobs[i].sub_labels[8], "Pulse6", MAX_LABEL_CHARS);
 80014e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014e8:	015b      	lsls	r3, r3, #5
 80014ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014ee:	4413      	add	r3, r2
 80014f0:	3b74      	subs	r3, #116	; 0x74
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3378      	adds	r3, #120	; 0x78
 80014f6:	220e      	movs	r2, #14
 80014f8:	4951      	ldr	r1, [pc, #324]	; (8001640 <main+0x380>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f008 fd9d 	bl	800a03a <strncpy>
        strncpy(knobs[i].sub_labels[9], "Pulse7", MAX_LABEL_CHARS);
 8001500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001504:	015b      	lsls	r3, r3, #5
 8001506:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800150a:	4413      	add	r3, r2
 800150c:	3b74      	subs	r3, #116	; 0x74
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3387      	adds	r3, #135	; 0x87
 8001512:	220e      	movs	r2, #14
 8001514:	494b      	ldr	r1, [pc, #300]	; (8001644 <main+0x384>)
 8001516:	4618      	mov	r0, r3
 8001518:	f008 fd8f 	bl	800a03a <strncpy>
        strncpy(knobs[i].sub_labels[10], "Pulse8", MAX_LABEL_CHARS);
 800151c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001520:	015b      	lsls	r3, r3, #5
 8001522:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001526:	4413      	add	r3, r2
 8001528:	3b74      	subs	r3, #116	; 0x74
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3396      	adds	r3, #150	; 0x96
 800152e:	220e      	movs	r2, #14
 8001530:	4945      	ldr	r1, [pc, #276]	; (8001648 <main+0x388>)
 8001532:	4618      	mov	r0, r3
 8001534:	f008 fd81 	bl	800a03a <strncpy>
        strncpy(knobs[i].sub_labels[11], "Pulse9", MAX_LABEL_CHARS);
 8001538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800153c:	015b      	lsls	r3, r3, #5
 800153e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001542:	4413      	add	r3, r2
 8001544:	3b74      	subs	r3, #116	; 0x74
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	33a5      	adds	r3, #165	; 0xa5
 800154a:	220e      	movs	r2, #14
 800154c:	493f      	ldr	r1, [pc, #252]	; (800164c <main+0x38c>)
 800154e:	4618      	mov	r0, r3
 8001550:	f008 fd73 	bl	800a03a <strncpy>
    for (int i = 2; i < 4; i++) {
 8001554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001558:	3301      	adds	r3, #1
 800155a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800155e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001562:	2b03      	cmp	r3, #3
 8001564:	f77f af36 	ble.w	80013d4 <main+0x114>
    }

    knobs[0].sub_labels = malloc(sizeof(*knobs[0].sub_labels));
 8001568:	200f      	movs	r0, #15
 800156a:	f008 fba1 	bl	8009cb0 <malloc>
 800156e:	4603      	mov	r3, r0
 8001570:	617b      	str	r3, [r7, #20]
    strncpy(knobs[0].sub_labels[0], "Filter 1", MAX_LABEL_CHARS);
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	220e      	movs	r2, #14
 8001576:	4936      	ldr	r1, [pc, #216]	; (8001650 <main+0x390>)
 8001578:	4618      	mov	r0, r3
 800157a:	f008 fd5e 	bl	800a03a <strncpy>

    knobs[1].sub_labels = malloc(sizeof(*knobs[1].sub_labels));
 800157e:	200f      	movs	r0, #15
 8001580:	f008 fb96 	bl	8009cb0 <malloc>
 8001584:	4603      	mov	r3, r0
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
    strncpy(knobs[1].sub_labels[0], "Filter 2", MAX_LABEL_CHARS);
 8001588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158a:	220e      	movs	r2, #14
 800158c:	4931      	ldr	r1, [pc, #196]	; (8001654 <main+0x394>)
 800158e:	4618      	mov	r0, r3
 8001590:	f008 fd53 	bl	800a03a <strncpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f001 fa5c 	bl	8002a50 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 f8da 	bl	8001750 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 800159c:	f000 f9dc 	bl	8001958 <MX_RTC_Init>
  MX_GPIO_Init();
 80015a0:	f000 fa00 	bl	80019a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80015a4:	f000 f956 	bl	8001854 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015a8:	f000 f9a8 	bl	80018fc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80015ac:	f007 fca4 	bl	8008ef8 <MX_USB_DEVICE_Init>
  //MX_SDIO_SD_Init();
  /* USER CODE BEGIN 2 */
    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80015b6:	e016      	b.n	80015e6 <main+0x326>
        ssd1306_Init(&hi2c1, &knobs[i]);
 80015b8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80015bc:	463a      	mov	r2, r7
 80015be:	015b      	lsls	r3, r3, #5
 80015c0:	4413      	add	r3, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	4824      	ldr	r0, [pc, #144]	; (8001658 <main+0x398>)
 80015c6:	f000 fa87 	bl	8001ad8 <ssd1306_Init>
        ssd1306_WriteKnob(&hi2c1, &knobs[i]);
 80015ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80015ce:	463a      	mov	r2, r7
 80015d0:	015b      	lsls	r3, r3, #5
 80015d2:	4413      	add	r3, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	4820      	ldr	r0, [pc, #128]	; (8001658 <main+0x398>)
 80015d8:	f000 fbfe 	bl	8001dd8 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80015dc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80015e0:	3301      	adds	r3, #1
 80015e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80015e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d9e4      	bls.n	80015b8 <main+0x2f8>
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    SystemCoreClockUpdate();
 80015ee:	f001 f985 	bl	80028fc <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 40);
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <main+0x39c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <main+0x3a0>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	095b      	lsrs	r3, r3, #5
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fcca 	bl	8000f98 <SysTick_Config>

        //    HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
        //} else {
        //    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);

        ADC_Read_Knobs();
 8001604:	f7ff fd20 	bl	8001048 <ADC_Read_Knobs>

        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800160e:	e095      	b.n	800173c <main+0x47c>
 8001610:	0800a9d0 	.word	0x0800a9d0
 8001614:	0800a9e0 	.word	0x0800a9e0
 8001618:	0800a9f0 	.word	0x0800a9f0
 800161c:	0800aa00 	.word	0x0800aa00
 8001620:	0800a950 	.word	0x0800a950
 8001624:	0800a95c 	.word	0x0800a95c
 8001628:	0800a964 	.word	0x0800a964
 800162c:	0800a96c 	.word	0x0800a96c
 8001630:	0800a978 	.word	0x0800a978
 8001634:	0800a980 	.word	0x0800a980
 8001638:	0800a984 	.word	0x0800a984
 800163c:	0800a990 	.word	0x0800a990
 8001640:	0800a998 	.word	0x0800a998
 8001644:	0800a9a0 	.word	0x0800a9a0
 8001648:	0800a9a8 	.word	0x0800a9a8
 800164c:	0800a9b0 	.word	0x0800a9b0
 8001650:	0800a9b8 	.word	0x0800a9b8
 8001654:	0800a9c4 	.word	0x0800a9c4
 8001658:	200021c8 	.word	0x200021c8
 800165c:	20000048 	.word	0x20000048
 8001660:	cccccccd 	.word	0xcccccccd
            uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 8001664:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001668:	463a      	mov	r2, r7
 800166a:	015b      	lsls	r3, r3, #5
 800166c:	441a      	add	r2, r3
 800166e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001672:	4935      	ldr	r1, [pc, #212]	; (8001748 <main+0x488>)
 8001674:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	4610      	mov	r0, r2
 800167e:	f7ff fd83 	bl	8001188 <MIDI_Scale_And_Filter>
 8001682:	4603      	mov	r3, r0
 8001684:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

            if (curr_MIDI_val != knobs[i].value) {
 8001688:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800168c:	015b      	lsls	r3, r3, #5
 800168e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001692:	4413      	add	r3, r2
 8001694:	3b6d      	subs	r3, #109	; 0x6d
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 800169c:	429a      	cmp	r2, r3
 800169e:	d048      	beq.n	8001732 <main+0x472>
                knobs[i].value = curr_MIDI_val;
 80016a0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016aa:	4413      	add	r3, r2
 80016ac:	3b6d      	subs	r3, #109	; 0x6d
 80016ae:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 80016b2:	701a      	strb	r2, [r3, #0]
                ssd1306_WriteKnob(&hi2c1, &knobs[i]);
 80016b4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016b8:	463a      	mov	r2, r7
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	4413      	add	r3, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	4822      	ldr	r0, [pc, #136]	; (800174c <main+0x48c>)
 80016c2:	f000 fb89 	bl	8001dd8 <ssd1306_WriteKnob>
                if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 80016c6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016ca:	015b      	lsls	r3, r3, #5
 80016cc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016d0:	4413      	add	r3, r2
 80016d2:	3b6d      	subs	r3, #109	; 0x6d
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016da:	015b      	lsls	r3, r3, #5
 80016dc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80016e0:	440b      	add	r3, r1
 80016e2:	3b6e      	subs	r3, #110	; 0x6e
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d108      	bne.n	80016fc <main+0x43c>
 80016ea:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016f4:	4413      	add	r3, r2
 80016f6:	3b6a      	subs	r3, #106	; 0x6a
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
                if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 80016fc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001700:	015b      	lsls	r3, r3, #5
 8001702:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001706:	4413      	add	r3, r2
 8001708:	3b6a      	subs	r3, #106	; 0x6a
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d110      	bne.n	8001732 <main+0x472>
 8001710:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001714:	463a      	mov	r2, r7
 8001716:	015b      	lsls	r3, r3, #5
 8001718:	441a      	add	r2, r3
 800171a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800171e:	015b      	lsls	r3, r3, #5
 8001720:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001724:	440b      	add	r3, r1
 8001726:	3b6d      	subs	r3, #109	; 0x6d
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	4610      	mov	r0, r2
 800172e:	f7ff fd0f 	bl	8001150 <MIDI_Send>
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001732:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800173c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001740:	2b03      	cmp	r3, #3
 8001742:	d98f      	bls.n	8001664 <main+0x3a4>
        ADC_Read_Knobs();
 8001744:	e75e      	b.n	8001604 <main+0x344>
 8001746:	bf00      	nop
 8001748:	200001d4 	.word	0x200001d4
 800174c:	200021c8 	.word	0x200021c8

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b09a      	sub	sp, #104	; 0x68
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800175a:	2230      	movs	r2, #48	; 0x30
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f008 fabc 	bl	8009cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <SystemClock_Config+0xfc>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a2f      	ldr	r2, [pc, #188]	; (800184c <SystemClock_Config+0xfc>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b2d      	ldr	r3, [pc, #180]	; (800184c <SystemClock_Config+0xfc>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <SystemClock_Config+0x100>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a29      	ldr	r2, [pc, #164]	; (8001850 <SystemClock_Config+0x100>)
 80017ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <SystemClock_Config+0x100>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80017be:	2309      	movs	r3, #9
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017c8:	2301      	movs	r3, #1
 80017ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017cc:	2302      	movs	r3, #2
 80017ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017d6:	2319      	movs	r3, #25
 80017d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80017da:	23c0      	movs	r3, #192	; 0xc0
 80017dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017de:	2302      	movs	r3, #2
 80017e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017e2:	2304      	movs	r3, #4
 80017e4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 fff8 	bl	80057e0 <HAL_RCC_OscConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017f6:	f000 f953 	bl	8001aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fe:	2302      	movs	r3, #2
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	2103      	movs	r1, #3
 8001816:	4618      	mov	r0, r3
 8001818:	f004 fa5a 	bl	8005cd0 <HAL_RCC_ClockConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001822:	f000 f93d 	bl	8001aa0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001826:	2302      	movs	r3, #2
 8001828:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800182a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4618      	mov	r0, r3
 8001836:	f004 fc07 	bl	8006048 <HAL_RCCEx_PeriphCLKConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001840:	f000 f92e 	bl	8001aa0 <Error_Handler>
  }
}
 8001844:	bf00      	nop
 8001846:	3768      	adds	r7, #104	; 0x68
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800185a:	463b      	mov	r3, r7
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <MX_ADC1_Init+0x9c>)
 8001868:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <MX_ADC1_Init+0xa0>)
 800186a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <MX_ADC1_Init+0x9c>)
 800186e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <MX_ADC1_Init+0x9c>)
 8001876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800187a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_ADC1_Init+0x9c>)
 800187e:	2201      	movs	r2, #1
 8001880:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_ADC1_Init+0x9c>)
 8001884:	2201      	movs	r2, #1
 8001886:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_ADC1_Init+0x9c>)
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_ADC1_Init+0x9c>)
 8001892:	2200      	movs	r2, #0
 8001894:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_ADC1_Init+0x9c>)
 8001898:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <MX_ADC1_Init+0xa4>)
 800189a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_ADC1_Init+0x9c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_ADC1_Init+0x9c>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_ADC1_Init+0x9c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_ADC1_Init+0x9c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018b6:	480e      	ldr	r0, [pc, #56]	; (80018f0 <MX_ADC1_Init+0x9c>)
 80018b8:	f001 f960 	bl	8002b7c <HAL_ADC_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80018c2:	f000 f8ed 	bl	8001aa0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d2:	463b      	mov	r3, r7
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <MX_ADC1_Init+0x9c>)
 80018d8:	f001 fb14 	bl	8002f04 <HAL_ADC_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80018e2:	f000 f8dd 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000221c 	.word	0x2000221c
 80018f4:	40012000 	.word	0x40012000
 80018f8:	0f000001 	.word	0x0f000001

080018fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_I2C1_Init+0x50>)
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <MX_I2C1_Init+0x54>)
 8001904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 800000;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_I2C1_Init+0x50>)
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <MX_I2C1_Init+0x58>)
 800190a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_I2C1_Init+0x50>)
 800191a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <MX_I2C1_Init+0x50>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_I2C1_Init+0x50>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_I2C1_Init+0x50>)
 800193a:	f001 fff3 	bl	8003924 <HAL_I2C_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001944:	f000 f8ac 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200021c8 	.word	0x200021c8
 8001950:	40005400 	.word	0x40005400
 8001954:	000c3500 	.word	0x000c3500

08001958 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <MX_RTC_Init+0x44>)
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <MX_RTC_Init+0x48>)
 8001960:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_RTC_Init+0x44>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_RTC_Init+0x44>)
 800196a:	227f      	movs	r2, #127	; 0x7f
 800196c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_RTC_Init+0x44>)
 8001970:	22ff      	movs	r2, #255	; 0xff
 8001972:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_RTC_Init+0x44>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_RTC_Init+0x44>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_RTC_Init+0x44>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_RTC_Init+0x44>)
 8001988:	f004 fc4e 	bl	8006228 <HAL_RTC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001992:	f000 f885 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20002264 	.word	0x20002264
 80019a0:	40002800 	.word	0x40002800

080019a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <MX_GPIO_Init+0xec>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a33      	ldr	r2, [pc, #204]	; (8001a90 <MX_GPIO_Init+0xec>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <MX_GPIO_Init+0xec>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <MX_GPIO_Init+0xec>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <MX_GPIO_Init+0xec>)
 80019e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <MX_GPIO_Init+0xec>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <MX_GPIO_Init+0xec>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <MX_GPIO_Init+0xec>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <MX_GPIO_Init+0xec>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <MX_GPIO_Init+0xec>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <MX_GPIO_Init+0xec>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_GPIO_Init+0xec>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f247 710f 	movw	r1, #30479	; 0x770f
 8001a30:	4818      	ldr	r0, [pc, #96]	; (8001a94 <MX_GPIO_Init+0xf0>)
 8001a32:	f001 ff43 	bl	80038bc <HAL_GPIO_WritePin>
                          |LED_5_Pin|LED_6_Pin|AMUX_S1_Pin|AMUX_S0_Pin
                          |AMUX_S2_Pin|AMUX_S3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button_6_Pin */
  GPIO_InitStruct.Pin = Button_6_Pin;
 8001a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_6_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4813      	ldr	r0, [pc, #76]	; (8001a98 <MX_GPIO_Init+0xf4>)
 8001a4c:	f001 fd9a 	bl	8003584 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
                           Button_5_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin|Button_4_Pin
 8001a50:	f248 43b0 	movw	r3, #33968	; 0x84b0
 8001a54:	617b      	str	r3, [r7, #20]
                          |Button_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <MX_GPIO_Init+0xf8>)
 8001a66:	f001 fd8d 	bl	8003584 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
                           LED_5_Pin LED_6_Pin AMUX_S1_Pin AMUX_S0_Pin
                           AMUX_S2_Pin AMUX_S3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001a6a:	f247 730f 	movw	r3, #30479	; 0x770f
 8001a6e:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin|LED_6_Pin|AMUX_S1_Pin|AMUX_S0_Pin
                          |AMUX_S2_Pin|AMUX_S3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4804      	ldr	r0, [pc, #16]	; (8001a94 <MX_GPIO_Init+0xf0>)
 8001a84:	f001 fd7e 	bl	8003584 <HAL_GPIO_Init>

}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>

08001aaa <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command) {
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af04      	add	r7, sp, #16
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	9302      	str	r3, [sp, #8]
 8001aba:	2301      	movs	r3, #1
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	1cfb      	adds	r3, r7, #3
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2178      	movs	r1, #120	; 0x78
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f002 f96d 	bl	8003da8 <HAL_I2C_Mem_Write>
 8001ace:	4603      	mov	r3, r0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001ae2:	2064      	movs	r0, #100	; 0x64
 8001ae4:	f001 f826 	bl	8002b34 <HAL_Delay>
    int status = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(hi2c, k);
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fc10 	bl	8002314 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001af4:	21ae      	movs	r1, #174	; 0xae
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffd7 	bl	8001aaa <ssd1306_WriteCommand>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001b06:	2120      	movs	r1, #32
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ffce 	bl	8001aaa <ssd1306_WriteCommand>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001b18:	2110      	movs	r1, #16
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffc5 	bl	8001aaa <ssd1306_WriteCommand>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001b2a:	21b0      	movs	r1, #176	; 0xb0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffbc 	bl	8001aaa <ssd1306_WriteCommand>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001b3c:	21c8      	movs	r1, #200	; 0xc8
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffb3 	bl	8001aaa <ssd1306_WriteCommand>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001b4e:	2100      	movs	r1, #0
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffaa 	bl	8001aaa <ssd1306_WriteCommand>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001b60:	2110      	movs	r1, #16
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa1 	bl	8001aaa <ssd1306_WriteCommand>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001b72:	2140      	movs	r1, #64	; 0x40
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff98 	bl	8001aaa <ssd1306_WriteCommand>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001b84:	2181      	movs	r1, #129	; 0x81
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ff8f 	bl	8001aaa <ssd1306_WriteCommand>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);
 8001b96:	2140      	movs	r1, #64	; 0x40
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff86 	bl	8001aaa <ssd1306_WriteCommand>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001ba8:	21a1      	movs	r1, #161	; 0xa1
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff7d 	bl	8001aaa <ssd1306_WriteCommand>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001bba:	21a6      	movs	r1, #166	; 0xa6
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff74 	bl	8001aaa <ssd1306_WriteCommand>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001bcc:	21a8      	movs	r1, #168	; 0xa8
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ff6b 	bl	8001aaa <ssd1306_WriteCommand>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001bde:	213f      	movs	r1, #63	; 0x3f
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff62 	bl	8001aaa <ssd1306_WriteCommand>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001bf0:	21a4      	movs	r1, #164	; 0xa4
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ff59 	bl	8001aaa <ssd1306_WriteCommand>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001c02:	21d3      	movs	r1, #211	; 0xd3
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff50 	bl	8001aaa <ssd1306_WriteCommand>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4413      	add	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001c14:	2100      	movs	r1, #0
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff47 	bl	8001aaa <ssd1306_WriteCommand>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001c26:	21d5      	movs	r1, #213	; 0xd5
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff3e 	bl	8001aaa <ssd1306_WriteCommand>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001c38:	21f0      	movs	r1, #240	; 0xf0
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ff35 	bl	8001aaa <ssd1306_WriteCommand>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001c4a:	21d9      	movs	r1, #217	; 0xd9
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff2c 	bl	8001aaa <ssd1306_WriteCommand>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001c5c:	2122      	movs	r1, #34	; 0x22
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff23 	bl	8001aaa <ssd1306_WriteCommand>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001c6e:	21da      	movs	r1, #218	; 0xda
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff1a 	bl	8001aaa <ssd1306_WriteCommand>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001c80:	2112      	movs	r1, #18
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ff11 	bl	8001aaa <ssd1306_WriteCommand>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001c92:	21db      	movs	r1, #219	; 0xdb
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff08 	bl	8001aaa <ssd1306_WriteCommand>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001ca4:	2120      	movs	r1, #32
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff feff 	bl	8001aaa <ssd1306_WriteCommand>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001cb6:	218d      	movs	r1, #141	; 0x8d
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fef6 	bl	8001aaa <ssd1306_WriteCommand>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001cc8:	2114      	movs	r1, #20
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff feed 	bl	8001aaa <ssd1306_WriteCommand>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001cda:	21af      	movs	r1, #175	; 0xaf
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fee4 	bl	8001aaa <ssd1306_WriteCommand>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <ssd1306_Init+0x21e>
        return 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e013      	b.n	8001d1e <ssd1306_Init+0x246>
    }

    ssd1306_Fill(Black);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f000 f818 	bl	8001d2c <ssd1306_Fill>
    ssd1306_AdjustBrightness(hi2c, 0x7F);
 8001cfc:	217f      	movs	r1, #127	; 0x7f
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fae0 	bl	80022c4 <ssd1306_AdjustBrightness>
    ssd1306_UpdateScreen(hi2c);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f835 	bl	8001d74 <ssd1306_UpdateScreen>

    SSD1306.CurrentX = 0;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <ssd1306_Init+0x250>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <ssd1306_Init+0x250>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <ssd1306_Init+0x250>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	715a      	strb	r2, [r3, #5]

    return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200005dc 	.word	0x200005dc

08001d2c <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	e00d      	b.n	8001d58 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <ssd1306_Fill+0x1a>
 8001d42:	2100      	movs	r1, #0
 8001d44:	e000      	b.n	8001d48 <ssd1306_Fill+0x1c>
 8001d46:	21ff      	movs	r1, #255	; 0xff
 8001d48:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <ssd1306_Fill+0x44>)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	460a      	mov	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3301      	adds	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5e:	d3ed      	bcc.n	8001d3c <ssd1306_Fill+0x10>
    }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	200001dc 	.word	0x200001dc

08001d74 <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e020      	b.n	8001dc4 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	3b50      	subs	r3, #80	; 0x50
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fe8d 	bl	8001aaa <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001d90:	2100      	movs	r1, #0
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fe89 	bl	8001aaa <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001d98:	2110      	movs	r1, #16
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fe85 	bl	8001aaa <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	01db      	lsls	r3, r3, #7
 8001da4:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <ssd1306_UpdateScreen+0x60>)
 8001da6:	4413      	add	r3, r2
 8001da8:	2264      	movs	r2, #100	; 0x64
 8001daa:	9202      	str	r2, [sp, #8]
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	9201      	str	r2, [sp, #4]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2301      	movs	r3, #1
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	2178      	movs	r1, #120	; 0x78
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f001 fff5 	bl	8003da8 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	2b07      	cmp	r3, #7
 8001dc8:	d9db      	bls.n	8001d82 <ssd1306_UpdateScreen+0xe>
    }
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200001dc 	.word	0x200001dc

08001dd8 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b08f      	sub	sp, #60	; 0x3c
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
    ssd1306_Select(hi2c, k);
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 fa95 	bl	8002314 <ssd1306_Select>
    ssd1306_Fill(Black);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff ff9e 	bl	8001d2c <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8001df0:	4b9e      	ldr	r3, [pc, #632]	; (800206c <ssd1306_WriteKnob+0x294>)
 8001df2:	f107 0418 	add.w	r4, r7, #24
 8001df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel + 1);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	7e1b      	ldrb	r3, [r3, #24]
 8001e00:	3301      	adds	r3, #1
 8001e02:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001e06:	4a9a      	ldr	r2, [pc, #616]	; (8002070 <ssd1306_WriteKnob+0x298>)
 8001e08:	2103      	movs	r1, #3
 8001e0a:	f008 f89f 	bl	8009f4c <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	7e5b      	ldrb	r3, [r3, #25]
 8001e12:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001e16:	4a97      	ldr	r2, [pc, #604]	; (8002074 <ssd1306_WriteKnob+0x29c>)
 8001e18:	2104      	movs	r1, #4
 8001e1a:	f008 f897 	bl	8009f4c <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8001e1e:	f107 0318 	add.w	r3, r7, #24
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe f9dc 	bl	80001e0 <strlen>
 8001e28:	4604      	mov	r4, r0
 8001e2a:	68b8      	ldr	r0, [r7, #8]
 8001e2c:	f000 faaa 	bl	8002384 <update_init_indicator>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f107 0018 	add.w	r0, r7, #24
 8001e36:	4a90      	ldr	r2, [pc, #576]	; (8002078 <ssd1306_WriteKnob+0x2a0>)
 8001e38:	4621      	mov	r1, r4
 8001e3a:	f008 f887 	bl	8009f4c <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) KnobMap(k, k->value, k->max_range));
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	7ed9      	ldrb	r1, [r3, #27]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	7f5b      	ldrb	r3, [r3, #29]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68b8      	ldr	r0, [r7, #8]
 8001e4a:	f7ff f863 	bl	8000f14 <KnobMap>
 8001e4e:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8001e50:	f107 0014 	add.w	r0, r7, #20
 8001e54:	4a87      	ldr	r2, [pc, #540]	; (8002074 <ssd1306_WriteKnob+0x29c>)
 8001e56:	2104      	movs	r1, #4
 8001e58:	f008 f878 	bl	8009f4c <sniprintf>

    ssd1306_SetCursor(0, 0);
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 fa18 	bl	8002294 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8001e64:	4a85      	ldr	r2, [pc, #532]	; (800207c <ssd1306_WriteKnob+0x2a4>)
 8001e66:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	ca06      	ldmia	r2, {r1, r2}
 8001e6e:	f000 f9eb 	bl	8002248 <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 8001e72:	4b82      	ldr	r3, [pc, #520]	; (800207c <ssd1306_WriteKnob+0x2a4>)
 8001e74:	785b      	ldrb	r3, [r3, #1]
 8001e76:	3301      	adds	r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 fa09 	bl	8002294 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8001e82:	4a7e      	ldr	r2, [pc, #504]	; (800207c <ssd1306_WriteKnob+0x2a4>)
 8001e84:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001e88:	2301      	movs	r3, #1
 8001e8a:	ca06      	ldmia	r2, {r1, r2}
 8001e8c:	f000 f9dc 	bl	8002248 <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 8001e90:	f107 0318 	add.w	r3, r7, #24
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe f9a3 	bl	80001e0 <strlen>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4a77      	ldr	r2, [pc, #476]	; (800207c <ssd1306_WriteKnob+0x2a4>)
 8001e9e:	7812      	ldrb	r2, [r2, #0]
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	b2d8      	uxtb	r0, r3
 8001eac:	4b73      	ldr	r3, [pc, #460]	; (800207c <ssd1306_WriteKnob+0x2a4>)
 8001eae:	785b      	ldrb	r3, [r3, #1]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	0fda      	lsrs	r2, r3, #31
 8001eb4:	4413      	add	r3, r2
 8001eb6:	105b      	asrs	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f000 f9ea 	bl	8002294 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8001ec0:	4a6e      	ldr	r2, [pc, #440]	; (800207c <ssd1306_WriteKnob+0x2a4>)
 8001ec2:	f107 0018 	add.w	r0, r7, #24
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	ca06      	ldmia	r2, {r1, r2}
 8001eca:	f000 f9bd 	bl	8002248 <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 8001ece:	4b6b      	ldr	r3, [pc, #428]	; (800207c <ssd1306_WriteKnob+0x2a4>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	f1c3 0320 	rsb	r3, r3, #32
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b2d8      	uxtb	r0, r3
 8001ee0:	4b66      	ldr	r3, [pc, #408]	; (800207c <ssd1306_WriteKnob+0x2a4>)
 8001ee2:	785b      	ldrb	r3, [r3, #1]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	0fda      	lsrs	r2, r3, #31
 8001ee8:	4413      	add	r3, r2
 8001eea:	105b      	asrs	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f000 f9d0 	bl	8002294 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 8001ef4:	4a61      	ldr	r2, [pc, #388]	; (800207c <ssd1306_WriteKnob+0x2a4>)
 8001ef6:	f107 0014 	add.w	r0, r7, #20
 8001efa:	2301      	movs	r3, #1
 8001efc:	ca06      	ldmia	r2, {r1, r2}
 8001efe:	f000 f9a3 	bl	8002248 <ssd1306_WriteString>

    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8001f02:	2300      	movs	r3, #0
 8001f04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f08:	e013      	b.n	8001f32 <ssd1306_WriteKnob+0x15a>
        ssd1306_DrawPixel(i, SSD1306.CurrentY + NumFont_5x7.FontHeight + 4, White);
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	; (8002080 <ssd1306_WriteKnob+0x2a8>)
 8001f0c:	885b      	ldrh	r3, [r3, #2]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b5a      	ldr	r3, [pc, #360]	; (800207c <ssd1306_WriteKnob+0x2a4>)
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	4413      	add	r3, r2
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	3304      	adds	r3, #4
 8001f1a:	b2d9      	uxtb	r1, r3
 8001f1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f20:	2201      	movs	r2, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f8b0 	bl	8002088 <ssd1306_DrawPixel>
    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8001f28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f32:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	dae7      	bge.n	8001f0a <ssd1306_WriteKnob+0x132>
    }

    uint8_t len_label = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    uint8_t x = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t y = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    uint8_t y_remaining = SSD1306_HEIGHT - 2 * NumFont_5x7.FontHeight;
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	; (800207c <ssd1306_WriteKnob+0x2a4>)
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	f1c3 0320 	rsb	r3, r3, #32
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    // Draw main label
    len_label = strlen(k->label);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	3302      	adds	r3, #2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe f93d 	bl	80001e0 <strlen>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001f6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001f70:	4a44      	ldr	r2, [pc, #272]	; (8002084 <ssd1306_WriteKnob+0x2ac>)
 8001f72:	7812      	ldrb	r2, [r2, #0]
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001f7c:	0fda      	lsrs	r2, r3, #31
 8001f7e:	4413      	add	r3, r2
 8001f80:	105b      	asrs	r3, r3, #1
 8001f82:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    y = (float) y_remaining / 3 + (Font_10x18.FontHeight / 4);
 8001f86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f92:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001f96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <ssd1306_WriteKnob+0x2ac>)
 8001f9c:	785b      	ldrb	r3, [r3, #1]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb2:	edc7 7a01 	vstr	s15, [r7, #4]
 8001fb6:	793b      	ldrb	r3, [r7, #4]
 8001fb8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    ssd1306_SetCursor(x, y);
 8001fbc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001fc0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f964 	bl	8002294 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	1c98      	adds	r0, r3, #2
 8001fd0:	4a2c      	ldr	r2, [pc, #176]	; (8002084 <ssd1306_WriteKnob+0x2ac>)
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	ca06      	ldmia	r2, {r1, r2}
 8001fd6:	f000 f937 	bl	8002248 <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	7f1b      	ldrb	r3, [r3, #28]
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db02      	blt.n	8001fea <ssd1306_WriteKnob+0x212>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	7edb      	ldrb	r3, [r3, #27]
 8001fe8:	e000      	b.n	8001fec <ssd1306_WriteKnob+0x214>
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    len_label = strlen(k->sub_labels[sl_index]);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	6959      	ldr	r1, [r3, #20]
 8001ff4:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe f8ed 	bl	80001e0 <strlen>
 8002006:	4603      	mov	r3, r0
 8002008:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 800200c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002010:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <ssd1306_WriteKnob+0x2ac>)
 8002012:	7812      	ldrb	r2, [r2, #0]
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800201c:	0fda      	lsrs	r2, r3, #31
 800201e:	4413      	add	r3, r2
 8002020:	105b      	asrs	r3, r3, #1
 8002022:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    y = SSD1306_HEIGHT - Font_10x18.FontHeight - 1;
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <ssd1306_WriteKnob+0x2ac>)
 8002028:	785b      	ldrb	r3, [r3, #1]
 800202a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800202e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    ssd1306_SetCursor(x, y);
 8002032:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002036:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f929 	bl	8002294 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	6959      	ldr	r1, [r3, #20]
 8002046:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	18c8      	adds	r0, r1, r3
 8002052:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <ssd1306_WriteKnob+0x2ac>)
 8002054:	2301      	movs	r3, #1
 8002056:	ca06      	ldmia	r2, {r1, r2}
 8002058:	f000 f8f6 	bl	8002248 <ssd1306_WriteString>

    ssd1306_UpdateScreen(hi2c);
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff fe89 	bl	8001d74 <ssd1306_UpdateScreen>
}
 8002062:	bf00      	nop
 8002064:	373c      	adds	r7, #60	; 0x3c
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	0800aa24 	.word	0x0800aa24
 8002070:	0800aa10 	.word	0x0800aa10
 8002074:	0800aa18 	.word	0x0800aa18
 8002078:	0800aa20 	.word	0x0800aa20
 800207c:	20000000 	.word	0x20000000
 8002080:	200005dc 	.word	0x200005dc
 8002084:	20000008 	.word	0x20000008

08002088 <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
 8002092:	460b      	mov	r3, r1
 8002094:	71bb      	strb	r3, [r7, #6]
 8002096:	4613      	mov	r3, r2
 8002098:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db48      	blt.n	8002134 <ssd1306_DrawPixel+0xac>
 80020a2:	79bb      	ldrb	r3, [r7, #6]
 80020a4:	2b3f      	cmp	r3, #63	; 0x3f
 80020a6:	d845      	bhi.n	8002134 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <ssd1306_DrawPixel+0xb8>)
 80020aa:	791b      	ldrb	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 80020b0:	797b      	ldrb	r3, [r7, #5]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 80020be:	797b      	ldrb	r3, [r7, #5]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d11a      	bne.n	80020fa <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020c4:	79fa      	ldrb	r2, [r7, #7]
 80020c6:	79bb      	ldrb	r3, [r7, #6]
 80020c8:	08db      	lsrs	r3, r3, #3
 80020ca:	b2d8      	uxtb	r0, r3
 80020cc:	4603      	mov	r3, r0
 80020ce:	01db      	lsls	r3, r3, #7
 80020d0:	4413      	add	r3, r2
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <ssd1306_DrawPixel+0xbc>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	b25a      	sxtb	r2, r3
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	2101      	movs	r1, #1
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b259      	sxtb	r1, r3
 80020ea:	79fa      	ldrb	r2, [r7, #7]
 80020ec:	4603      	mov	r3, r0
 80020ee:	01db      	lsls	r3, r3, #7
 80020f0:	4413      	add	r3, r2
 80020f2:	b2c9      	uxtb	r1, r1
 80020f4:	4a13      	ldr	r2, [pc, #76]	; (8002144 <ssd1306_DrawPixel+0xbc>)
 80020f6:	54d1      	strb	r1, [r2, r3]
 80020f8:	e01d      	b.n	8002136 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80020fa:	79fa      	ldrb	r2, [r7, #7]
 80020fc:	79bb      	ldrb	r3, [r7, #6]
 80020fe:	08db      	lsrs	r3, r3, #3
 8002100:	b2d8      	uxtb	r0, r3
 8002102:	4603      	mov	r3, r0
 8002104:	01db      	lsls	r3, r3, #7
 8002106:	4413      	add	r3, r2
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <ssd1306_DrawPixel+0xbc>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	b25a      	sxtb	r2, r3
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	b25b      	sxtb	r3, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	b25b      	sxtb	r3, r3
 8002120:	4013      	ands	r3, r2
 8002122:	b259      	sxtb	r1, r3
 8002124:	79fa      	ldrb	r2, [r7, #7]
 8002126:	4603      	mov	r3, r0
 8002128:	01db      	lsls	r3, r3, #7
 800212a:	4413      	add	r3, r2
 800212c:	b2c9      	uxtb	r1, r1
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <ssd1306_DrawPixel+0xbc>)
 8002130:	54d1      	strb	r1, [r2, r3]
 8002132:	e000      	b.n	8002136 <ssd1306_DrawPixel+0xae>
        return;
 8002134:	bf00      	nop
    }
}
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	200005dc 	.word	0x200005dc
 8002144:	200001dc 	.word	0x200001dc

08002148 <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	4604      	mov	r4, r0
 8002150:	1d38      	adds	r0, r7, #4
 8002152:	e880 0006 	stmia.w	r0, {r1, r2}
 8002156:	461a      	mov	r2, r3
 8002158:	4623      	mov	r3, r4
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	4613      	mov	r3, r2
 800215e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002160:	4b38      	ldr	r3, [pc, #224]	; (8002244 <ssd1306_WriteChar+0xfc>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	793b      	ldrb	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	2b7f      	cmp	r3, #127	; 0x7f
 800216c:	dc06      	bgt.n	800217c <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 800216e:	4b35      	ldr	r3, [pc, #212]	; (8002244 <ssd1306_WriteChar+0xfc>)
 8002170:	885b      	ldrh	r3, [r3, #2]
 8002172:	461a      	mov	r2, r3
 8002174:	797b      	ldrb	r3, [r7, #5]
 8002176:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002178:	2b3f      	cmp	r3, #63	; 0x3f
 800217a:	dd01      	ble.n	8002180 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 800217c:	2300      	movs	r3, #0
 800217e:	e05d      	b.n	800223c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	e04c      	b.n	8002220 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	3b20      	subs	r3, #32
 800218c:	7979      	ldrb	r1, [r7, #5]
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4619      	mov	r1, r3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	440b      	add	r3, r1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 80021a0:	2300      	movs	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	e034      	b.n	8002210 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d012      	beq.n	80021dc <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80021b6:	4b23      	ldr	r3, [pc, #140]	; (8002244 <ssd1306_WriteChar+0xfc>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	b2d8      	uxtb	r0, r3
 80021c4:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <ssd1306_WriteChar+0xfc>)
 80021c6:	885b      	ldrh	r3, [r3, #2]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	7bba      	ldrb	r2, [r7, #14]
 80021d4:	4619      	mov	r1, r3
 80021d6:	f7ff ff57 	bl	8002088 <ssd1306_DrawPixel>
 80021da:	e016      	b.n	800220a <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <ssd1306_WriteChar+0xfc>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	b2d8      	uxtb	r0, r3
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <ssd1306_WriteChar+0xfc>)
 80021ec:	885b      	ldrh	r3, [r3, #2]
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	b2d9      	uxtb	r1, r3
 80021f8:	7bbb      	ldrb	r3, [r7, #14]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf0c      	ite	eq
 80021fe:	2301      	moveq	r3, #1
 8002200:	2300      	movne	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	f7ff ff3f 	bl	8002088 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	3301      	adds	r3, #1
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	793b      	ldrb	r3, [r7, #4]
 8002212:	461a      	mov	r2, r3
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4293      	cmp	r3, r2
 8002218:	d3c5      	bcc.n	80021a6 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3301      	adds	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	797b      	ldrb	r3, [r7, #5]
 8002222:	461a      	mov	r2, r3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	4293      	cmp	r3, r2
 8002228:	d3ad      	bcc.n	8002186 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <ssd1306_WriteChar+0xfc>)
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	793b      	ldrb	r3, [r7, #4]
 8002230:	b29b      	uxth	r3, r3
 8002232:	4413      	add	r3, r2
 8002234:	b29a      	uxth	r2, r3
 8002236:	4b03      	ldr	r3, [pc, #12]	; (8002244 <ssd1306_WriteChar+0xfc>)
 8002238:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3724      	adds	r7, #36	; 0x24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd90      	pop	{r4, r7, pc}
 8002244:	200005dc 	.word	0x200005dc

08002248 <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	1d38      	adds	r0, r7, #4
 8002252:	e880 0006 	stmia.w	r0, {r1, r2}
 8002256:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002258:	e012      	b.n	8002280 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	7818      	ldrb	r0, [r3, #0]
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	1d3a      	adds	r2, r7, #4
 8002262:	ca06      	ldmia	r2, {r1, r2}
 8002264:	f7ff ff70 	bl	8002148 <ssd1306_WriteChar>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d002      	beq.n	800227a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	e008      	b.n	800228c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3301      	adds	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e8      	bne.n	800225a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	781b      	ldrb	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	460a      	mov	r2, r1
 800229e:	71fb      	strb	r3, [r7, #7]
 80022a0:	4613      	mov	r3, r2
 80022a2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <ssd1306_SetCursor+0x2c>)
 80022aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80022ac:	79bb      	ldrb	r3, [r7, #6]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <ssd1306_SetCursor+0x2c>)
 80022b2:	805a      	strh	r2, [r3, #2]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	200005dc 	.word	0x200005dc

080022c4 <ssd1306_AdjustBrightness>:

// Adjust brightness
void ssd1306_AdjustBrightness(I2C_HandleTypeDef *hi2c, uint8_t brightness) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af04      	add	r7, sp, #16
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
    uint8_t contrast_cmd = 0x81;
 80022d0:	2381      	movs	r3, #129	; 0x81
 80022d2:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast_level = brightness;
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &contrast_cmd, 1, 10);
 80022d8:	230a      	movs	r3, #10
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	2301      	movs	r3, #1
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	f107 030f 	add.w	r3, r7, #15
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2301      	movs	r3, #1
 80022e8:	2200      	movs	r2, #0
 80022ea:	2178      	movs	r1, #120	; 0x78
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f001 fd5b 	bl	8003da8 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &contrast_level, 1, 10);
 80022f2:	230a      	movs	r3, #10
 80022f4:	9302      	str	r3, [sp, #8]
 80022f6:	2301      	movs	r3, #1
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	f107 030e 	add.w	r3, r7, #14
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2301      	movs	r3, #1
 8002302:	2200      	movs	r2, #0
 8002304:	2178      	movs	r1, #120	; 0x78
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f001 fd4e 	bl	8003da8 <HAL_I2C_Mem_Write>
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <ssd1306_Select>:

// Select a display
void ssd1306_Select(I2C_HandleTypeDef *hi2c, Knob *k) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
    i2c_Select(hi2c, I2C_MUX_MASTER_ADDR, k->row);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	21e2      	movs	r1, #226	; 0xe2
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f80b 	bl	8002342 <i2c_Select>
    i2c_Select(hi2c, I2C_MUX_SLAVE_ADDR, k->col);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	785b      	ldrb	r3, [r3, #1]
 8002330:	461a      	mov	r2, r3
 8002332:	21e0      	movs	r1, #224	; 0xe0
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f804 	bl	8002342 <i2c_Select>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(I2C_HandleTypeDef *hi2c, uint8_t mux_addr, uint8_t i) {
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af02      	add	r7, sp, #8
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	70fb      	strb	r3, [r7, #3]
 800234e:	4613      	mov	r3, r2
 8002350:	70bb      	strb	r3, [r7, #2]
    if (i > 7) return;
 8002352:	78bb      	ldrb	r3, [r7, #2]
 8002354:	2b07      	cmp	r3, #7
 8002356:	d810      	bhi.n	800237a <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 8002358:	78bb      	ldrb	r3, [r7, #2]
 800235a:	2201      	movs	r2, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(hi2c, mux_addr, temp, 1, 100);
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	b299      	uxth	r1, r3
 8002368:	f107 020c 	add.w	r2, r7, #12
 800236c:	2364      	movs	r3, #100	; 0x64
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2301      	movs	r3, #1
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f001 fc1a 	bl	8003bac <HAL_I2C_Master_Transmit>
 8002378:	e000      	b.n	800237c <i2c_Select+0x3a>
    if (i > 7) return;
 800237a:	bf00      	nop
}
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
    int8_t init_diff = KnobMap(k, k->init_value, MIDI_MAX) - KnobMap(k, k->value, MIDI_MAX);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e9b      	ldrb	r3, [r3, #26]
 8002390:	227f      	movs	r2, #127	; 0x7f
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7fe fdbd 	bl	8000f14 <KnobMap>
 800239a:	4603      	mov	r3, r0
 800239c:	461c      	mov	r4, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7edb      	ldrb	r3, [r3, #27]
 80023a2:	227f      	movs	r2, #127	; 0x7f
 80023a4:	4619      	mov	r1, r3
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe fdb4 	bl	8000f14 <KnobMap>
 80023ac:	4603      	mov	r3, r0
 80023ae:	1ae3      	subs	r3, r4, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 80023b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bfb8      	it	lt
 80023bc:	425b      	neglt	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023c8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80024b4 <update_init_indicator+0x130>
 80023cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023d0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80024b8 <update_init_indicator+0x134>
 80023d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023dc:	edc7 7a00 	vstr	s15, [r7]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 80023e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <update_init_indicator+0x6c>
 80023ec:	4b33      	ldr	r3, [pc, #204]	; (80024bc <update_init_indicator+0x138>)
 80023ee:	e05c      	b.n	80024aa <update_init_indicator+0x126>

    if (init_pct < 15) {
 80023f0:	7bbb      	ldrb	r3, [r7, #14]
 80023f2:	2b0e      	cmp	r3, #14
 80023f4:	d807      	bhi.n	8002406 <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	dd01      	ble.n	8002402 <update_init_indicator+0x7e>
 80023fe:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <update_init_indicator+0x13c>)
 8002400:	e053      	b.n	80024aa <update_init_indicator+0x126>
        else return "        <      ";
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <update_init_indicator+0x140>)
 8002404:	e051      	b.n	80024aa <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 8002406:	7bbb      	ldrb	r3, [r7, #14]
 8002408:	2b0e      	cmp	r3, #14
 800240a:	d90a      	bls.n	8002422 <update_init_indicator+0x9e>
 800240c:	7bbb      	ldrb	r3, [r7, #14]
 800240e:	2b1d      	cmp	r3, #29
 8002410:	d807      	bhi.n	8002422 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	dd01      	ble.n	800241e <update_init_indicator+0x9a>
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <update_init_indicator+0x144>)
 800241c:	e045      	b.n	80024aa <update_init_indicator+0x126>
        else return "        <<     ";
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <update_init_indicator+0x148>)
 8002420:	e043      	b.n	80024aa <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 8002422:	7bbb      	ldrb	r3, [r7, #14]
 8002424:	2b1d      	cmp	r3, #29
 8002426:	d90a      	bls.n	800243e <update_init_indicator+0xba>
 8002428:	7bbb      	ldrb	r3, [r7, #14]
 800242a:	2b2c      	cmp	r3, #44	; 0x2c
 800242c:	d807      	bhi.n	800243e <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	dd01      	ble.n	800243a <update_init_indicator+0xb6>
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <update_init_indicator+0x14c>)
 8002438:	e037      	b.n	80024aa <update_init_indicator+0x126>
        else return "        <<<    ";
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <update_init_indicator+0x150>)
 800243c:	e035      	b.n	80024aa <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 800243e:	7bbb      	ldrb	r3, [r7, #14]
 8002440:	2b2c      	cmp	r3, #44	; 0x2c
 8002442:	d90a      	bls.n	800245a <update_init_indicator+0xd6>
 8002444:	7bbb      	ldrb	r3, [r7, #14]
 8002446:	2b3c      	cmp	r3, #60	; 0x3c
 8002448:	d807      	bhi.n	800245a <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244e:	2b00      	cmp	r3, #0
 8002450:	dd01      	ble.n	8002456 <update_init_indicator+0xd2>
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <update_init_indicator+0x154>)
 8002454:	e029      	b.n	80024aa <update_init_indicator+0x126>
        else return "        <<<<   ";
 8002456:	4b21      	ldr	r3, [pc, #132]	; (80024dc <update_init_indicator+0x158>)
 8002458:	e027      	b.n	80024aa <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 800245a:	7bbb      	ldrb	r3, [r7, #14]
 800245c:	2b3c      	cmp	r3, #60	; 0x3c
 800245e:	d90a      	bls.n	8002476 <update_init_indicator+0xf2>
 8002460:	7bbb      	ldrb	r3, [r7, #14]
 8002462:	2b4c      	cmp	r3, #76	; 0x4c
 8002464:	d807      	bhi.n	8002476 <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 8002466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	dd01      	ble.n	8002472 <update_init_indicator+0xee>
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <update_init_indicator+0x15c>)
 8002470:	e01b      	b.n	80024aa <update_init_indicator+0x126>
        else return "        <<<<<  ";
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <update_init_indicator+0x160>)
 8002474:	e019      	b.n	80024aa <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 8002476:	7bbb      	ldrb	r3, [r7, #14]
 8002478:	2b4c      	cmp	r3, #76	; 0x4c
 800247a:	d90a      	bls.n	8002492 <update_init_indicator+0x10e>
 800247c:	7bbb      	ldrb	r3, [r7, #14]
 800247e:	2b5c      	cmp	r3, #92	; 0x5c
 8002480:	d807      	bhi.n	8002492 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	2b00      	cmp	r3, #0
 8002488:	dd01      	ble.n	800248e <update_init_indicator+0x10a>
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <update_init_indicator+0x164>)
 800248c:	e00d      	b.n	80024aa <update_init_indicator+0x126>
        else return "        <<<<<< ";
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <update_init_indicator+0x168>)
 8002490:	e00b      	b.n	80024aa <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002492:	7bbb      	ldrb	r3, [r7, #14]
 8002494:	2b5c      	cmp	r3, #92	; 0x5c
 8002496:	d907      	bls.n	80024a8 <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 8002498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249c:	2b00      	cmp	r3, #0
 800249e:	dd01      	ble.n	80024a4 <update_init_indicator+0x120>
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <update_init_indicator+0x16c>)
 80024a2:	e002      	b.n	80024aa <update_init_indicator+0x126>
        else return "        <<<<<<<";
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <update_init_indicator+0x170>)
 80024a6:	e000      	b.n	80024aa <update_init_indicator+0x126>
    } else {
        return " ";
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <update_init_indicator+0x174>)
    }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd90      	pop	{r4, r7, pc}
 80024b2:	bf00      	nop
 80024b4:	42fe0000 	.word	0x42fe0000
 80024b8:	42c80000 	.word	0x42c80000
 80024bc:	0800aa24 	.word	0x0800aa24
 80024c0:	0800aa34 	.word	0x0800aa34
 80024c4:	0800aa44 	.word	0x0800aa44
 80024c8:	0800aa54 	.word	0x0800aa54
 80024cc:	0800aa64 	.word	0x0800aa64
 80024d0:	0800aa74 	.word	0x0800aa74
 80024d4:	0800aa84 	.word	0x0800aa84
 80024d8:	0800aa94 	.word	0x0800aa94
 80024dc:	0800aaa4 	.word	0x0800aaa4
 80024e0:	0800aab4 	.word	0x0800aab4
 80024e4:	0800aac4 	.word	0x0800aac4
 80024e8:	0800aad4 	.word	0x0800aad4
 80024ec:	0800aae4 	.word	0x0800aae4
 80024f0:	0800aaf4 	.word	0x0800aaf4
 80024f4:	0800ab04 	.word	0x0800ab04
 80024f8:	0800ab14 	.word	0x0800ab14

080024fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_MspInit+0x4c>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <HAL_MspInit+0x4c>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_MspInit+0x4c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_MspInit+0x4c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HAL_MspInit+0x4c>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_MspInit+0x4c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800

0800254c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <HAL_ADC_MspInit+0x7c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d127      	bne.n	80025be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_ADC_MspInit+0x80>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a15      	ldr	r2, [pc, #84]	; (80025cc <HAL_ADC_MspInit+0x80>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_ADC_MspInit+0x80>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_ADC_MspInit+0x80>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_ADC_MspInit+0x80>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_ADC_MspInit+0x80>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80025a6:	230f      	movs	r3, #15
 80025a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025aa:	2303      	movs	r3, #3
 80025ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <HAL_ADC_MspInit+0x84>)
 80025ba:	f000 ffe3 	bl	8003584 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40012000 	.word	0x40012000
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020000 	.word	0x40020000

080025d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a19      	ldr	r2, [pc, #100]	; (8002658 <HAL_I2C_MspInit+0x84>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d12b      	bne.n	800264e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_I2C_MspInit+0x88>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a17      	ldr	r2, [pc, #92]	; (800265c <HAL_I2C_MspInit+0x88>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_I2C_MspInit+0x88>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002612:	23c0      	movs	r3, #192	; 0xc0
 8002614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002616:	2312      	movs	r3, #18
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800261a:	2301      	movs	r3, #1
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002622:	2304      	movs	r3, #4
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	480c      	ldr	r0, [pc, #48]	; (8002660 <HAL_I2C_MspInit+0x8c>)
 800262e:	f000 ffa9 	bl	8003584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_I2C_MspInit+0x88>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a08      	ldr	r2, [pc, #32]	; (800265c <HAL_I2C_MspInit+0x88>)
 800263c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_I2C_MspInit+0x88>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	; 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40005400 	.word	0x40005400
 800265c:	40023800 	.word	0x40023800
 8002660:	40020400 	.word	0x40020400

08002664 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a05      	ldr	r2, [pc, #20]	; (8002688 <HAL_RTC_MspInit+0x24>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d102      	bne.n	800267c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RTC_MspInit+0x28>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40002800 	.word	0x40002800
 800268c:	42470e3c 	.word	0x42470e3c

08002690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8002694:	e7fe      	b.n	8002694 <NMI_Handler+0x4>

08002696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800269a:	e7fe      	b.n	800269a <HardFault_Handler+0x4>

0800269c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <MemManage_Handler+0x4>

080026a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a6:	e7fe      	b.n	80026a6 <BusFault_Handler+0x4>

080026a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <UsageFault_Handler+0x4>

080026ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e034      	b.n	800274e <SysTick_Handler+0x76>
        GPIO_TypeDef *t = (i == NUM_BUTTONS - 1) ? GPIO_PORT_BUTTON_6 : GPIO_PORT_BUTTONS_1TO5;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d101      	bne.n	80026ee <SysTick_Handler+0x16>
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <SysTick_Handler+0x88>)
 80026ec:	e000      	b.n	80026f0 <SysTick_Handler+0x18>
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <SysTick_Handler+0x8c>)
 80026f0:	60bb      	str	r3, [r7, #8]
        uint8_t reading = HAL_GPIO_ReadPin(t, btnPins[i]);
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <SysTick_Handler+0x90>)
 80026f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026fa:	4619      	mov	r1, r3
 80026fc:	68b8      	ldr	r0, [r7, #8]
 80026fe:	f001 f8c5 	bl	800388c <HAL_GPIO_ReadPin>
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]

        if (reading == btnStatesLast[i] && reading != btnStates[i]) {
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	4a18      	ldr	r2, [pc, #96]	; (800276c <SysTick_Handler+0x94>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	429a      	cmp	r2, r3
 8002710:	d116      	bne.n	8002740 <SysTick_Handler+0x68>
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	4a16      	ldr	r2, [pc, #88]	; (8002770 <SysTick_Handler+0x98>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	79fa      	ldrb	r2, [r7, #7]
 800271a:	429a      	cmp	r2, r3
 800271c:	d010      	beq.n	8002740 <SysTick_Handler+0x68>
            btnStates[i] = reading;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	4913      	ldr	r1, [pc, #76]	; (8002770 <SysTick_Handler+0x98>)
 8002722:	79fa      	ldrb	r2, [r7, #7]
 8002724:	54ca      	strb	r2, [r1, r3]

            if (btnStates[i] == GPIO_PIN_RESET) {
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	4a11      	ldr	r2, [pc, #68]	; (8002770 <SysTick_Handler+0x98>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d107      	bne.n	8002740 <SysTick_Handler+0x68>
                HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[i]);
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	4a10      	ldr	r2, [pc, #64]	; (8002774 <SysTick_Handler+0x9c>)
 8002734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002738:	4619      	mov	r1, r3
 800273a:	480f      	ldr	r0, [pc, #60]	; (8002778 <SysTick_Handler+0xa0>)
 800273c:	f001 f8d7 	bl	80038ee <HAL_GPIO_TogglePin>
            }
        }

        btnStatesLast[i] = reading;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	490a      	ldr	r1, [pc, #40]	; (800276c <SysTick_Handler+0x94>)
 8002744:	79fa      	ldrb	r2, [r7, #7]
 8002746:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3301      	adds	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d9c7      	bls.n	80026e4 <SysTick_Handler+0xc>
    }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002754:	f000 f9ce 	bl	8002af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40020800 	.word	0x40020800
 8002764:	40020000 	.word	0x40020000
 8002768:	20000030 	.word	0x20000030
 800276c:	20000028 	.word	0x20000028
 8002770:	20000020 	.word	0x20000020
 8002774:	2000003c 	.word	0x2000003c
 8002778:	40020400 	.word	0x40020400

0800277c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <OTG_FS_IRQHandler+0x10>)
 8002782:	f001 fffa 	bl	800477a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200027dc 	.word	0x200027dc

08002790 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	e00a      	b.n	80027b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027a2:	f3af 8000 	nop.w
 80027a6:	4601      	mov	r1, r0
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	60ba      	str	r2, [r7, #8]
 80027ae:	b2ca      	uxtb	r2, r1
 80027b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3301      	adds	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	dbf0      	blt.n	80027a2 <_read+0x12>
	}

return len;
 80027c0:	687b      	ldr	r3, [r7, #4]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e009      	b.n	80027f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	60ba      	str	r2, [r7, #8]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3301      	adds	r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	dbf1      	blt.n	80027dc <_write+0x12>
	}
	return len;
 80027f8:	687b      	ldr	r3, [r7, #4]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <_close>:

int _close(int file)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
	return -1;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800282a:	605a      	str	r2, [r3, #4]
	return 0;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <_isatty>:

int _isatty(int file)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
	return 1;
 8002842:	2301      	movs	r3, #1
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
	return 0;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <_sbrk+0x5c>)
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <_sbrk+0x60>)
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <_sbrk+0x64>)
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <_sbrk+0x68>)
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	d207      	bcs.n	80028ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800289c:	f006 ffbe 	bl	800981c <__errno>
 80028a0:	4603      	mov	r3, r0
 80028a2:	220c      	movs	r2, #12
 80028a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
 80028aa:	e009      	b.n	80028c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <_sbrk+0x64>)
 80028bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028be:	68fb      	ldr	r3, [r7, #12]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20020000 	.word	0x20020000
 80028cc:	00000400 	.word	0x00000400
 80028d0:	200005e4 	.word	0x200005e4
 80028d4:	20002bf8 	.word	0x20002bf8

080028d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <SystemInit+0x20>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <SystemInit+0x20>)
 80028e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	2302      	movs	r3, #2
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	2302      	movs	r3, #2
 8002914:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002916:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <SystemCoreClockUpdate+0xec>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b08      	cmp	r3, #8
 8002924:	d011      	beq.n	800294a <SystemCoreClockUpdate+0x4e>
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d844      	bhi.n	80029b6 <SystemCoreClockUpdate+0xba>
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <SystemCoreClockUpdate+0x3e>
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d004      	beq.n	8002942 <SystemCoreClockUpdate+0x46>
 8002938:	e03d      	b.n	80029b6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800293a:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <SystemCoreClockUpdate+0xf0>)
 800293c:	4a2c      	ldr	r2, [pc, #176]	; (80029f0 <SystemCoreClockUpdate+0xf4>)
 800293e:	601a      	str	r2, [r3, #0]
      break;
 8002940:	e03d      	b.n	80029be <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002942:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <SystemCoreClockUpdate+0xf0>)
 8002944:	4a2b      	ldr	r2, [pc, #172]	; (80029f4 <SystemCoreClockUpdate+0xf8>)
 8002946:	601a      	str	r2, [r3, #0]
      break;
 8002948:	e039      	b.n	80029be <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <SystemCoreClockUpdate+0xec>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0d9b      	lsrs	r3, r3, #22
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <SystemCoreClockUpdate+0xec>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800295e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00c      	beq.n	8002980 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002966:	4a23      	ldr	r2, [pc, #140]	; (80029f4 <SystemCoreClockUpdate+0xf8>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <SystemCoreClockUpdate+0xec>)
 8002970:	6852      	ldr	r2, [r2, #4]
 8002972:	0992      	lsrs	r2, r2, #6
 8002974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	e00b      	b.n	8002998 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002980:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <SystemCoreClockUpdate+0xf4>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	4a17      	ldr	r2, [pc, #92]	; (80029e8 <SystemCoreClockUpdate+0xec>)
 800298a:	6852      	ldr	r2, [r2, #4]
 800298c:	0992      	lsrs	r2, r2, #6
 800298e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <SystemCoreClockUpdate+0xec>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	4a0e      	ldr	r2, [pc, #56]	; (80029ec <SystemCoreClockUpdate+0xf0>)
 80029b2:	6013      	str	r3, [r2, #0]
      break;
 80029b4:	e003      	b.n	80029be <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <SystemCoreClockUpdate+0xf0>)
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <SystemCoreClockUpdate+0xf4>)
 80029ba:	601a      	str	r2, [r3, #0]
      break;
 80029bc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <SystemCoreClockUpdate+0xec>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <SystemCoreClockUpdate+0xfc>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <SystemCoreClockUpdate+0xf0>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <SystemCoreClockUpdate+0xf0>)
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40023800 	.word	0x40023800
 80029ec:	20000048 	.word	0x20000048
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	017d7840 	.word	0x017d7840
 80029f8:	0800be38 	.word	0x0800be38

080029fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a02:	490e      	ldr	r1, [pc, #56]	; (8002a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a18:	4c0b      	ldr	r4, [pc, #44]	; (8002a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a26:	f7ff ff57 	bl	80028d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f007 f8b5 	bl	8009b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a2e:	f7fe fc47 	bl	80012c0 <main>
  bx  lr    
 8002a32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a3c:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8002a40:	0800bef8 	.word	0x0800bef8
  ldr r2, =_sbss
 8002a44:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002a48:	20002bf4 	.word	0x20002bf4

08002a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a4c:	e7fe      	b.n	8002a4c <ADC_IRQHandler>
	...

08002a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <HAL_Init+0x40>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_Init+0x40>)
 8002a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_Init+0x40>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f000 fd41 	bl	8003500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f000 f808 	bl	8002a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a84:	f7ff fd3a 	bl	80024fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00

08002a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_InitTick+0x54>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_InitTick+0x58>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fd59 	bl	800356a <HAL_SYSTICK_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00e      	b.n	8002ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d80a      	bhi.n	8002ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f000 fd21 	bl	8003516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad4:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <HAL_InitTick+0x5c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000048 	.word	0x20000048
 8002aec:	20000050 	.word	0x20000050
 8002af0:	2000004c 	.word	0x2000004c

08002af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_IncTick+0x20>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_IncTick+0x24>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_IncTick+0x24>)
 8002b06:	6013      	str	r3, [r2, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000050 	.word	0x20000050
 8002b18:	20002308 	.word	0x20002308

08002b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_GetTick+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20002308 	.word	0x20002308

08002b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff ffee 	bl	8002b1c <HAL_GetTick>
 8002b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d005      	beq.n	8002b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_Delay+0x44>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b5a:	bf00      	nop
 8002b5c:	f7ff ffde 	bl	8002b1c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d8f7      	bhi.n	8002b5c <HAL_Delay+0x28>
  {
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000050 	.word	0x20000050

08002b7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e033      	b.n	8002bfa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fcd6 	bl	800254c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bc2:	f023 0302 	bic.w	r3, r3, #2
 8002bc6:	f043 0202 	orr.w	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 faca 	bl	8003168 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
 8002bea:	e001      	b.n	8002bf0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_Start+0x1a>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e097      	b.n	8002d4e <HAL_ADC_Start+0x14a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d018      	beq.n	8002c66 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c44:	4b45      	ldr	r3, [pc, #276]	; (8002d5c <HAL_ADC_Start+0x158>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a45      	ldr	r2, [pc, #276]	; (8002d60 <HAL_ADC_Start+0x15c>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0c9a      	lsrs	r2, r3, #18
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c58:	e002      	b.n	8002c60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f9      	bne.n	8002c5a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d15f      	bne.n	8002d34 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb2:	d106      	bne.n	8002cc2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f023 0206 	bic.w	r2, r3, #6
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44
 8002cc0:	e002      	b.n	8002cc8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_ADC_Start+0x160>)
 8002cd2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cdc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10f      	bne.n	8002d0a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d129      	bne.n	8002d4c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	e020      	b.n	8002d4c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <HAL_ADC_Start+0x164>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d11b      	bne.n	8002d4c <HAL_ADC_Start+0x148>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d114      	bne.n	8002d4c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	e00b      	b.n	8002d4c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f043 0210 	orr.w	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000048 	.word	0x20000048
 8002d60:	431bde83 	.word	0x431bde83
 8002d64:	40012300 	.word	0x40012300
 8002d68:	40012000 	.word	0x40012000

08002d6c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_Stop+0x16>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e021      	b.n	8002dc6 <HAL_ADC_Stop+0x5a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dee:	d113      	bne.n	8002e18 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfe:	d10b      	bne.n	8002e18 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e063      	b.n	8002ee0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e18:	f7ff fe80 	bl	8002b1c <HAL_GetTick>
 8002e1c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e1e:	e021      	b.n	8002e64 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e26:	d01d      	beq.n	8002e64 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_ADC_PollForConversion+0x6c>
 8002e2e:	f7ff fe75 	bl	8002b1c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d212      	bcs.n	8002e64 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d00b      	beq.n	8002e64 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f043 0204 	orr.w	r2, r3, #4
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e03d      	b.n	8002ee0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d1d6      	bne.n	8002e20 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f06f 0212 	mvn.w	r2, #18
 8002e7a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d123      	bne.n	8002ede <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11f      	bne.n	8002ede <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d006      	beq.n	8002eba <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d111      	bne.n	8002ede <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x1c>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e113      	b.n	8003148 <HAL_ADC_ConfigChannel+0x244>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b09      	cmp	r3, #9
 8002f2e:	d925      	bls.n	8002f7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68d9      	ldr	r1, [r3, #12]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	3b1e      	subs	r3, #30
 8002f46:	2207      	movs	r2, #7
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	400a      	ands	r2, r1
 8002f54:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68d9      	ldr	r1, [r3, #12]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	4603      	mov	r3, r0
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4403      	add	r3, r0
 8002f6e:	3b1e      	subs	r3, #30
 8002f70:	409a      	lsls	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	e022      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6919      	ldr	r1, [r3, #16]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	2207      	movs	r2, #7
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6919      	ldr	r1, [r3, #16]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4403      	add	r3, r0
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d824      	bhi.n	8003014 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	3b05      	subs	r3, #5
 8002fdc:	221f      	movs	r2, #31
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	400a      	ands	r2, r1
 8002fea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	3b05      	subs	r3, #5
 8003006:	fa00 f203 	lsl.w	r2, r0, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	635a      	str	r2, [r3, #52]	; 0x34
 8003012:	e04c      	b.n	80030ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	d824      	bhi.n	8003066 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	3b23      	subs	r3, #35	; 0x23
 800302e:	221f      	movs	r2, #31
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43da      	mvns	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	400a      	ands	r2, r1
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	4618      	mov	r0, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	3b23      	subs	r3, #35	; 0x23
 8003058:	fa00 f203 	lsl.w	r2, r0, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
 8003064:	e023      	b.n	80030ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	3b41      	subs	r3, #65	; 0x41
 8003078:	221f      	movs	r2, #31
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	400a      	ands	r2, r1
 8003086:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	4618      	mov	r0, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	3b41      	subs	r3, #65	; 0x41
 80030a2:	fa00 f203 	lsl.w	r2, r0, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ae:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_ADC_ConfigChannel+0x250>)
 80030b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a28      	ldr	r2, [pc, #160]	; (8003158 <HAL_ADC_ConfigChannel+0x254>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10f      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x1d8>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b12      	cmp	r3, #18
 80030c2:	d10b      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <HAL_ADC_ConfigChannel+0x254>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d12b      	bne.n	800313e <HAL_ADC_ConfigChannel+0x23a>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_ADC_ConfigChannel+0x258>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <HAL_ADC_ConfigChannel+0x1f4>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b11      	cmp	r3, #17
 80030f6:	d122      	bne.n	800313e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a11      	ldr	r2, [pc, #68]	; (800315c <HAL_ADC_ConfigChannel+0x258>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d111      	bne.n	800313e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_ADC_ConfigChannel+0x25c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a11      	ldr	r2, [pc, #68]	; (8003164 <HAL_ADC_ConfigChannel+0x260>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	0c9a      	lsrs	r2, r3, #18
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003130:	e002      	b.n	8003138 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3b01      	subs	r3, #1
 8003136:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f9      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40012300 	.word	0x40012300
 8003158:	40012000 	.word	0x40012000
 800315c:	10000012 	.word	0x10000012
 8003160:	20000048 	.word	0x20000048
 8003164:	431bde83 	.word	0x431bde83

08003168 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003170:	4b79      	ldr	r3, [pc, #484]	; (8003358 <ADC_Init+0x1f0>)
 8003172:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	431a      	orrs	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800319c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	021a      	lsls	r2, r3, #8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6899      	ldr	r1, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	4a58      	ldr	r2, [pc, #352]	; (800335c <ADC_Init+0x1f4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d022      	beq.n	8003246 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800320e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6899      	ldr	r1, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6899      	ldr	r1, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	e00f      	b.n	8003266 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003264:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0202 	bic.w	r2, r2, #2
 8003274:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6899      	ldr	r1, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7e1b      	ldrb	r3, [r3, #24]
 8003280:	005a      	lsls	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	3b01      	subs	r3, #1
 80032c0:	035a      	lsls	r2, r3, #13
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	e007      	b.n	80032dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	051a      	lsls	r2, r3, #20
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800331e:	025a      	lsls	r2, r3, #9
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003336:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6899      	ldr	r1, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	029a      	lsls	r2, r3, #10
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40012300 	.word	0x40012300
 800335c:	0f000001 	.word	0x0f000001

08003360 <__NVIC_SetPriorityGrouping>:
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_EnableIRQ>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db0b      	blt.n	80033ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4907      	ldr	r1, [pc, #28]	; (80033fc <__NVIC_EnableIRQ+0x38>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000e100 	.word	0xe000e100

08003400 <__NVIC_SetPriority>:
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	2b00      	cmp	r3, #0
 8003412:	db0a      	blt.n	800342a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	b2da      	uxtb	r2, r3
 8003418:	490c      	ldr	r1, [pc, #48]	; (800344c <__NVIC_SetPriority+0x4c>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	440b      	add	r3, r1
 8003424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003428:	e00a      	b.n	8003440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4908      	ldr	r1, [pc, #32]	; (8003450 <__NVIC_SetPriority+0x50>)
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	3b04      	subs	r3, #4
 8003438:	0112      	lsls	r2, r2, #4
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	440b      	add	r3, r1
 800343e:	761a      	strb	r2, [r3, #24]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000e100 	.word	0xe000e100
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <NVIC_EncodePriority>:
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	; 0x24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f1c3 0307 	rsb	r3, r3, #7
 800346e:	2b04      	cmp	r3, #4
 8003470:	bf28      	it	cs
 8003472:	2304      	movcs	r3, #4
 8003474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3304      	adds	r3, #4
 800347a:	2b06      	cmp	r3, #6
 800347c:	d902      	bls.n	8003484 <NVIC_EncodePriority+0x30>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3b03      	subs	r3, #3
 8003482:	e000      	b.n	8003486 <NVIC_EncodePriority+0x32>
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	f04f 32ff 	mov.w	r2, #4294967295
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	401a      	ands	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800349c:	f04f 31ff 	mov.w	r1, #4294967295
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	43d9      	mvns	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	4313      	orrs	r3, r2
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <SysTick_Config>:
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034cc:	d301      	bcc.n	80034d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80034ce:	2301      	movs	r3, #1
 80034d0:	e00f      	b.n	80034f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034d2:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <SysTick_Config+0x40>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034da:	210f      	movs	r1, #15
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	f7ff ff8e 	bl	8003400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <SysTick_Config+0x40>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ea:	4b04      	ldr	r3, [pc, #16]	; (80034fc <SysTick_Config+0x40>)
 80034ec:	2207      	movs	r2, #7
 80034ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	e000e010 	.word	0xe000e010

08003500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ff29 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003528:	f7ff ff3e 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 800352c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	6978      	ldr	r0, [r7, #20]
 8003534:	f7ff ff8e 	bl	8003454 <NVIC_EncodePriority>
 8003538:	4602      	mov	r2, r0
 800353a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff5d 	bl	8003400 <__NVIC_SetPriority>
}
 8003546:	bf00      	nop
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ff31 	bl	80033c4 <__NVIC_EnableIRQ>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ffa2 	bl	80034bc <SysTick_Config>
 8003578:	4603      	mov	r3, r0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	e159      	b.n	8003854 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035a0:	2201      	movs	r2, #1
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	f040 8148 	bne.w	800384e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d005      	beq.n	80035d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d130      	bne.n	8003638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	2203      	movs	r2, #3
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800360c:	2201      	movs	r2, #1
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 0201 	and.w	r2, r3, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b03      	cmp	r3, #3
 8003642:	d017      	beq.n	8003674 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	2203      	movs	r2, #3
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d123      	bne.n	80036c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	08da      	lsrs	r2, r3, #3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3208      	adds	r2, #8
 8003688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	220f      	movs	r2, #15
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	08da      	lsrs	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3208      	adds	r2, #8
 80036c2:	69b9      	ldr	r1, [r7, #24]
 80036c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	2203      	movs	r2, #3
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0203 	and.w	r2, r3, #3
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a2 	beq.w	800384e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	4b57      	ldr	r3, [pc, #348]	; (800386c <HAL_GPIO_Init+0x2e8>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4a56      	ldr	r2, [pc, #344]	; (800386c <HAL_GPIO_Init+0x2e8>)
 8003714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	4b54      	ldr	r3, [pc, #336]	; (800386c <HAL_GPIO_Init+0x2e8>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003726:	4a52      	ldr	r2, [pc, #328]	; (8003870 <HAL_GPIO_Init+0x2ec>)
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	3302      	adds	r3, #2
 800372e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	220f      	movs	r2, #15
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a49      	ldr	r2, [pc, #292]	; (8003874 <HAL_GPIO_Init+0x2f0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d019      	beq.n	8003786 <HAL_GPIO_Init+0x202>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a48      	ldr	r2, [pc, #288]	; (8003878 <HAL_GPIO_Init+0x2f4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <HAL_GPIO_Init+0x1fe>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a47      	ldr	r2, [pc, #284]	; (800387c <HAL_GPIO_Init+0x2f8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00d      	beq.n	800377e <HAL_GPIO_Init+0x1fa>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a46      	ldr	r2, [pc, #280]	; (8003880 <HAL_GPIO_Init+0x2fc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d007      	beq.n	800377a <HAL_GPIO_Init+0x1f6>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a45      	ldr	r2, [pc, #276]	; (8003884 <HAL_GPIO_Init+0x300>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d101      	bne.n	8003776 <HAL_GPIO_Init+0x1f2>
 8003772:	2304      	movs	r3, #4
 8003774:	e008      	b.n	8003788 <HAL_GPIO_Init+0x204>
 8003776:	2307      	movs	r3, #7
 8003778:	e006      	b.n	8003788 <HAL_GPIO_Init+0x204>
 800377a:	2303      	movs	r3, #3
 800377c:	e004      	b.n	8003788 <HAL_GPIO_Init+0x204>
 800377e:	2302      	movs	r3, #2
 8003780:	e002      	b.n	8003788 <HAL_GPIO_Init+0x204>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_GPIO_Init+0x204>
 8003786:	2300      	movs	r3, #0
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	f002 0203 	and.w	r2, r2, #3
 800378e:	0092      	lsls	r2, r2, #2
 8003790:	4093      	lsls	r3, r2
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003798:	4935      	ldr	r1, [pc, #212]	; (8003870 <HAL_GPIO_Init+0x2ec>)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	3302      	adds	r3, #2
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a6:	4b38      	ldr	r3, [pc, #224]	; (8003888 <HAL_GPIO_Init+0x304>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037ca:	4a2f      	ldr	r2, [pc, #188]	; (8003888 <HAL_GPIO_Init+0x304>)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037d0:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <HAL_GPIO_Init+0x304>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037f4:	4a24      	ldr	r2, [pc, #144]	; (8003888 <HAL_GPIO_Init+0x304>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037fa:	4b23      	ldr	r3, [pc, #140]	; (8003888 <HAL_GPIO_Init+0x304>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800381e:	4a1a      	ldr	r2, [pc, #104]	; (8003888 <HAL_GPIO_Init+0x304>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003824:	4b18      	ldr	r3, [pc, #96]	; (8003888 <HAL_GPIO_Init+0x304>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003848:	4a0f      	ldr	r2, [pc, #60]	; (8003888 <HAL_GPIO_Init+0x304>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3301      	adds	r3, #1
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b0f      	cmp	r3, #15
 8003858:	f67f aea2 	bls.w	80035a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3724      	adds	r7, #36	; 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	40013800 	.word	0x40013800
 8003874:	40020000 	.word	0x40020000
 8003878:	40020400 	.word	0x40020400
 800387c:	40020800 	.word	0x40020800
 8003880:	40020c00 	.word	0x40020c00
 8003884:	40021000 	.word	0x40021000
 8003888:	40013c00 	.word	0x40013c00

0800388c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	887b      	ldrh	r3, [r7, #2]
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
 80038a8:	e001      	b.n	80038ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
 80038c8:	4613      	mov	r3, r2
 80038ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038cc:	787b      	ldrb	r3, [r7, #1]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038d8:	e003      	b.n	80038e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038da:	887b      	ldrh	r3, [r7, #2]
 80038dc:	041a      	lsls	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	619a      	str	r2, [r3, #24]
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003900:	887a      	ldrh	r2, [r7, #2]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4013      	ands	r3, r2
 8003906:	041a      	lsls	r2, r3, #16
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	43d9      	mvns	r1, r3
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	400b      	ands	r3, r1
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	619a      	str	r2, [r3, #24]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e12b      	b.n	8003b8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fe fe42 	bl	80025d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003988:	f002 fb4a 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 800398c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4a81      	ldr	r2, [pc, #516]	; (8003b98 <HAL_I2C_Init+0x274>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d807      	bhi.n	80039a8 <HAL_I2C_Init+0x84>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4a80      	ldr	r2, [pc, #512]	; (8003b9c <HAL_I2C_Init+0x278>)
 800399c:	4293      	cmp	r3, r2
 800399e:	bf94      	ite	ls
 80039a0:	2301      	movls	r3, #1
 80039a2:	2300      	movhi	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e006      	b.n	80039b6 <HAL_I2C_Init+0x92>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a7d      	ldr	r2, [pc, #500]	; (8003ba0 <HAL_I2C_Init+0x27c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	bf94      	ite	ls
 80039b0:	2301      	movls	r3, #1
 80039b2:	2300      	movhi	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e0e7      	b.n	8003b8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4a78      	ldr	r2, [pc, #480]	; (8003ba4 <HAL_I2C_Init+0x280>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	0c9b      	lsrs	r3, r3, #18
 80039c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	4a6a      	ldr	r2, [pc, #424]	; (8003b98 <HAL_I2C_Init+0x274>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d802      	bhi.n	80039f8 <HAL_I2C_Init+0xd4>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	3301      	adds	r3, #1
 80039f6:	e009      	b.n	8003a0c <HAL_I2C_Init+0xe8>
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	4a69      	ldr	r2, [pc, #420]	; (8003ba8 <HAL_I2C_Init+0x284>)
 8003a04:	fba2 2303 	umull	r2, r3, r2, r3
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	430b      	orrs	r3, r1
 8003a12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	495c      	ldr	r1, [pc, #368]	; (8003b98 <HAL_I2C_Init+0x274>)
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	d819      	bhi.n	8003a60 <HAL_I2C_Init+0x13c>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e59      	subs	r1, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a3a:	1c59      	adds	r1, r3, #1
 8003a3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a40:	400b      	ands	r3, r1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_I2C_Init+0x138>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1e59      	subs	r1, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5a:	e051      	b.n	8003b00 <HAL_I2C_Init+0x1dc>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	e04f      	b.n	8003b00 <HAL_I2C_Init+0x1dc>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d111      	bne.n	8003a8c <HAL_I2C_Init+0x168>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e58      	subs	r0, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	440b      	add	r3, r1
 8003a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e012      	b.n	8003ab2 <HAL_I2C_Init+0x18e>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1e58      	subs	r0, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6859      	ldr	r1, [r3, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	0099      	lsls	r1, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Init+0x196>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e022      	b.n	8003b00 <HAL_I2C_Init+0x1dc>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_I2C_Init+0x1bc>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1e58      	subs	r0, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	460b      	mov	r3, r1
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	440b      	add	r3, r1
 8003ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ade:	e00f      	b.n	8003b00 <HAL_I2C_Init+0x1dc>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	1e58      	subs	r0, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6859      	ldr	r1, [r3, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	0099      	lsls	r1, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af6:	3301      	adds	r3, #1
 8003af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	6809      	ldr	r1, [r1, #0]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6911      	ldr	r1, [r2, #16]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68d2      	ldr	r2, [r2, #12]
 8003b3a:	4311      	orrs	r1, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	000186a0 	.word	0x000186a0
 8003b9c:	001e847f 	.word	0x001e847f
 8003ba0:	003d08ff 	.word	0x003d08ff
 8003ba4:	431bde83 	.word	0x431bde83
 8003ba8:	10624dd3 	.word	0x10624dd3

08003bac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	460b      	mov	r3, r1
 8003bba:	817b      	strh	r3, [r7, #10]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7fe ffac 	bl	8002b1c <HAL_GetTick>
 8003bc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	f040 80e0 	bne.w	8003d94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	2319      	movs	r3, #25
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4970      	ldr	r1, [pc, #448]	; (8003da0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 faf4 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
 8003bec:	e0d3      	b.n	8003d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_I2C_Master_Transmit+0x50>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e0cc      	b.n	8003d96 <HAL_I2C_Master_Transmit+0x1ea>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d007      	beq.n	8003c22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2221      	movs	r2, #33	; 0x21
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	893a      	ldrh	r2, [r7, #8]
 8003c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4a50      	ldr	r2, [pc, #320]	; (8003da4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c64:	8979      	ldrh	r1, [r7, #10]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f996 	bl	8003f9c <I2C_MasterRequestWrite>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e08d      	b.n	8003d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c90:	e066      	b.n	8003d60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	6a39      	ldr	r1, [r7, #32]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fb6e 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d107      	bne.n	8003cba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e06b      	b.n	8003d96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d11b      	bne.n	8003d34 <HAL_I2C_Master_Transmit+0x188>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d017      	beq.n	8003d34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	6a39      	ldr	r1, [r7, #32]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 fb5e 	bl	80043fa <I2C_WaitOnBTFFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00d      	beq.n	8003d60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d107      	bne.n	8003d5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e01a      	b.n	8003d96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d194      	bne.n	8003c92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	00100002 	.word	0x00100002
 8003da4:	ffff0000 	.word	0xffff0000

08003da8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	4608      	mov	r0, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	461a      	mov	r2, r3
 8003db6:	4603      	mov	r3, r0
 8003db8:	817b      	strh	r3, [r7, #10]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	813b      	strh	r3, [r7, #8]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dc2:	f7fe feab 	bl	8002b1c <HAL_GetTick>
 8003dc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	f040 80d9 	bne.w	8003f88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	2319      	movs	r3, #25
 8003ddc:	2201      	movs	r2, #1
 8003dde:	496d      	ldr	r1, [pc, #436]	; (8003f94 <HAL_I2C_Mem_Write+0x1ec>)
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f9f3 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
 8003dee:	e0cc      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_I2C_Mem_Write+0x56>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e0c5      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d007      	beq.n	8003e24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2221      	movs	r2, #33	; 0x21
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2240      	movs	r2, #64	; 0x40
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a4d      	ldr	r2, [pc, #308]	; (8003f98 <HAL_I2C_Mem_Write+0x1f0>)
 8003e64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e66:	88f8      	ldrh	r0, [r7, #6]
 8003e68:	893a      	ldrh	r2, [r7, #8]
 8003e6a:	8979      	ldrh	r1, [r7, #10]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	4603      	mov	r3, r0
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f912 	bl	80040a0 <I2C_RequestMemoryWrite>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d052      	beq.n	8003f28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e081      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fa74 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d107      	bne.n	8003eae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06b      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d11b      	bne.n	8003f28 <HAL_I2C_Mem_Write+0x180>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d017      	beq.n	8003f28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1aa      	bne.n	8003e86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fa60 	bl	80043fa <I2C_WaitOnBTFFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d107      	bne.n	8003f58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e016      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e000      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f88:	2302      	movs	r3, #2
  }
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	00100002 	.word	0x00100002
 8003f98:	ffff0000 	.word	0xffff0000

08003f9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d006      	beq.n	8003fc6 <I2C_MasterRequestWrite+0x2a>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d003      	beq.n	8003fc6 <I2C_MasterRequestWrite+0x2a>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fc4:	d108      	bne.n	8003fd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e00b      	b.n	8003ff0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	2b12      	cmp	r3, #18
 8003fde:	d107      	bne.n	8003ff0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f8e5 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004016:	d103      	bne.n	8004020 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800401e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e035      	b.n	8004090 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800402c:	d108      	bne.n	8004040 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800402e:	897b      	ldrh	r3, [r7, #10]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800403c:	611a      	str	r2, [r3, #16]
 800403e:	e01b      	b.n	8004078 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004040:	897b      	ldrh	r3, [r7, #10]
 8004042:	11db      	asrs	r3, r3, #7
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f003 0306 	and.w	r3, r3, #6
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f063 030f 	orn	r3, r3, #15
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	490e      	ldr	r1, [pc, #56]	; (8004098 <I2C_MasterRequestWrite+0xfc>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f90b 	bl	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e010      	b.n	8004090 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800406e:	897b      	ldrh	r3, [r7, #10]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4907      	ldr	r1, [pc, #28]	; (800409c <I2C_MasterRequestWrite+0x100>)
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f8fb 	bl	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	00010008 	.word	0x00010008
 800409c:	00010002 	.word	0x00010002

080040a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	817b      	strh	r3, [r7, #10]
 80040b2:	460b      	mov	r3, r1
 80040b4:	813b      	strh	r3, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f878 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00d      	beq.n	80040fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f0:	d103      	bne.n	80040fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e05f      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040fe:	897b      	ldrh	r3, [r7, #10]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800410c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	6a3a      	ldr	r2, [r7, #32]
 8004112:	492d      	ldr	r1, [pc, #180]	; (80041c8 <I2C_RequestMemoryWrite+0x128>)
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f8b0 	bl	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e04c      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413c:	6a39      	ldr	r1, [r7, #32]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f91a 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	2b04      	cmp	r3, #4
 8004150:	d107      	bne.n	8004162 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004160:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e02b      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d105      	bne.n	8004178 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800416c:	893b      	ldrh	r3, [r7, #8]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]
 8004176:	e021      	b.n	80041bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004178:	893b      	ldrh	r3, [r7, #8]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	b29b      	uxth	r3, r3
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	6a39      	ldr	r1, [r7, #32]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f8f4 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b04      	cmp	r3, #4
 800419c:	d107      	bne.n	80041ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e005      	b.n	80041be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b2:	893b      	ldrh	r3, [r7, #8]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	00010002 	.word	0x00010002

080041cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041dc:	e025      	b.n	800422a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d021      	beq.n	800422a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e6:	f7fe fc99 	bl	8002b1c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d302      	bcc.n	80041fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d116      	bne.n	800422a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f043 0220 	orr.w	r2, r3, #32
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e023      	b.n	8004272 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10d      	bne.n	8004250 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	43da      	mvns	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4013      	ands	r3, r2
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	bf0c      	ite	eq
 8004246:	2301      	moveq	r3, #1
 8004248:	2300      	movne	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	e00c      	b.n	800426a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	43da      	mvns	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	429a      	cmp	r2, r3
 800426e:	d0b6      	beq.n	80041de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004288:	e051      	b.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004298:	d123      	bne.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f043 0204 	orr.w	r2, r3, #4
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e046      	b.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d021      	beq.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fe fc17 	bl	8002b1c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d116      	bne.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f043 0220 	orr.w	r2, r3, #32
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e020      	b.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d10c      	bne.n	8004352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	43da      	mvns	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4013      	ands	r3, r2
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	bf14      	ite	ne
 800434a:	2301      	movne	r3, #1
 800434c:	2300      	moveq	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	e00b      	b.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	43da      	mvns	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d18d      	bne.n	800428a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004384:	e02d      	b.n	80043e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f878 	bl	800447c <I2C_IsAcknowledgeFailed>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e02d      	b.n	80043f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d021      	beq.n	80043e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439e:	f7fe fbbd 	bl	8002b1c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d302      	bcc.n	80043b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d116      	bne.n	80043e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e007      	b.n	80043f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d1ca      	bne.n	8004386 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004406:	e02d      	b.n	8004464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f837 	bl	800447c <I2C_IsAcknowledgeFailed>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e02d      	b.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d021      	beq.n	8004464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004420:	f7fe fb7c 	bl	8002b1c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d116      	bne.n	8004464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	f043 0220 	orr.w	r2, r3, #32
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e007      	b.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b04      	cmp	r3, #4
 8004470:	d1ca      	bne.n	8004408 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004492:	d11b      	bne.n	80044cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800449c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f043 0204 	orr.w	r2, r3, #4
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044dc:	b08f      	sub	sp, #60	; 0x3c
 80044de:	af0a      	add	r7, sp, #40	; 0x28
 80044e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e10f      	b.n	800470c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f004 fe88 	bl	800921c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2203      	movs	r2, #3
 8004510:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f002 f875 	bl	800661a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	687e      	ldr	r6, [r7, #4]
 8004538:	466d      	mov	r5, sp
 800453a:	f106 0410 	add.w	r4, r6, #16
 800453e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004546:	e894 0003 	ldmia.w	r4, {r0, r1}
 800454a:	e885 0003 	stmia.w	r5, {r0, r1}
 800454e:	1d33      	adds	r3, r6, #4
 8004550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004552:	6838      	ldr	r0, [r7, #0]
 8004554:	f001 ff4d 	bl	80063f2 <USB_CoreInit>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2202      	movs	r2, #2
 8004562:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0d0      	b.n	800470c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f002 f863 	bl	800663c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]
 800457a:	e04a      	b.n	8004612 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	333d      	adds	r3, #61	; 0x3d
 800458c:	2201      	movs	r2, #1
 800458e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004590:	7bfa      	ldrb	r2, [r7, #15]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	333c      	adds	r3, #60	; 0x3c
 80045a0:	7bfa      	ldrb	r2, [r7, #15]
 80045a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045a4:	7bfa      	ldrb	r2, [r7, #15]
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	b298      	uxth	r0, r3
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	3342      	adds	r3, #66	; 0x42
 80045b8:	4602      	mov	r2, r0
 80045ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045bc:	7bfa      	ldrb	r2, [r7, #15]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	333f      	adds	r3, #63	; 0x3f
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045d0:	7bfa      	ldrb	r2, [r7, #15]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	3344      	adds	r3, #68	; 0x44
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045e4:	7bfa      	ldrb	r2, [r7, #15]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	3348      	adds	r3, #72	; 0x48
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045f8:	7bfa      	ldrb	r2, [r7, #15]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	3350      	adds	r3, #80	; 0x50
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	3301      	adds	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
 8004612:	7bfa      	ldrb	r2, [r7, #15]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	d3af      	bcc.n	800457c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e044      	b.n	80046ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004622:	7bfa      	ldrb	r2, [r7, #15]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004638:	7bfa      	ldrb	r2, [r7, #15]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800464a:	7bfa      	ldrb	r2, [r7, #15]
 800464c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800464e:	7bfa      	ldrb	r2, [r7, #15]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	3301      	adds	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
 80046ac:	7bfa      	ldrb	r2, [r7, #15]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d3b5      	bcc.n	8004622 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	687e      	ldr	r6, [r7, #4]
 80046be:	466d      	mov	r5, sp
 80046c0:	f106 0410 	add.w	r4, r6, #16
 80046c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80046d4:	1d33      	adds	r3, r6, #4
 80046d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046d8:	6838      	ldr	r0, [r7, #0]
 80046da:	f001 ffd9 	bl	8006690 <USB_DevInit>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e00d      	b.n	800470c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f003 f821 	bl	800774c <USB_DevDisconnect>

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004714 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_PCD_Start+0x1c>
 800472c:	2302      	movs	r3, #2
 800472e:	e020      	b.n	8004772 <HAL_PCD_Start+0x5e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	2b01      	cmp	r3, #1
 800473e:	d109      	bne.n	8004754 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004744:	2b01      	cmp	r3, #1
 8004746:	d005      	beq.n	8004754 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f001 ff4d 	bl	80065f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f002 ffd1 	bl	800770a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800477a:	b590      	push	{r4, r7, lr}
 800477c:	b08d      	sub	sp, #52	; 0x34
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f003 f88f 	bl	80078b4 <USB_GetMode>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	f040 839d 	bne.w	8004ed8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f002 fff3 	bl	800778e <USB_ReadInterrupts>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8393 	beq.w	8004ed6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f002 ffea 	bl	800778e <USB_ReadInterrupts>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d107      	bne.n	80047d4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f002 0202 	and.w	r2, r2, #2
 80047d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f002 ffd8 	bl	800778e <USB_ReadInterrupts>
 80047de:	4603      	mov	r3, r0
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d161      	bne.n	80048ac <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0210 	bic.w	r2, r2, #16
 80047f6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f003 020f 	and.w	r2, r3, #15
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	4413      	add	r3, r2
 8004814:	3304      	adds	r3, #4
 8004816:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	0c5b      	lsrs	r3, r3, #17
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	2b02      	cmp	r3, #2
 8004822:	d124      	bne.n	800486e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d035      	beq.n	800489c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800483a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800483e:	b29b      	uxth	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	6a38      	ldr	r0, [r7, #32]
 8004844:	f002 fe3e 	bl	80074c4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004854:	441a      	add	r2, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004866:	441a      	add	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	619a      	str	r2, [r3, #24]
 800486c:	e016      	b.n	800489c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	0c5b      	lsrs	r3, r3, #17
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	2b06      	cmp	r3, #6
 8004878:	d110      	bne.n	800489c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004880:	2208      	movs	r2, #8
 8004882:	4619      	mov	r1, r3
 8004884:	6a38      	ldr	r0, [r7, #32]
 8004886:	f002 fe1d 	bl	80074c4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004896:	441a      	add	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0210 	orr.w	r2, r2, #16
 80048aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f002 ff6c 	bl	800778e <USB_ReadInterrupts>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048c0:	d16e      	bne.n	80049a0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f002 ff72 	bl	80077b4 <USB_ReadDevAllOutEpInterrupt>
 80048d0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80048d2:	e062      	b.n	800499a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d057      	beq.n	800498e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	4611      	mov	r1, r2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f002 ff97 	bl	800781c <USB_ReadDevOutEPInterrupt>
 80048ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	2301      	movs	r3, #1
 800490a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800490c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fdb0 	bl	8005474 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	461a      	mov	r2, r3
 800492c:	2308      	movs	r3, #8
 800492e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 feaa 	bl	800568c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494e:	461a      	mov	r2, r3
 8004950:	2310      	movs	r3, #16
 8004952:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	461a      	mov	r2, r3
 800496c:	2320      	movs	r3, #32
 800496e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	461a      	mov	r2, r3
 8004988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800498c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	3301      	adds	r3, #1
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	d199      	bne.n	80048d4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f002 fef2 	bl	800778e <USB_ReadInterrupts>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049b4:	f040 80c0 	bne.w	8004b38 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f002 ff13 	bl	80077e8 <USB_ReadDevAllInEpInterrupt>
 80049c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80049c8:	e0b2      	b.n	8004b30 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 80a7 	beq.w	8004b24 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f002 ff39 	bl	8007858 <USB_ReadDevInEPInterrupt>
 80049e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d057      	beq.n	8004aa2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	2201      	movs	r2, #1
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	69f9      	ldr	r1, [r7, #28]
 8004a0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a12:	4013      	ands	r3, r2
 8004a14:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a22:	461a      	mov	r2, r3
 8004a24:	2301      	movs	r3, #1
 8004a26:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d132      	bne.n	8004a96 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	4613      	mov	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	3348      	adds	r3, #72	; 0x48
 8004a40:	6819      	ldr	r1, [r3, #0]
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a46:	4613      	mov	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4403      	add	r3, r0
 8004a50:	3344      	adds	r3, #68	; 0x44
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4419      	add	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4403      	add	r3, r0
 8004a64:	3348      	adds	r3, #72	; 0x48
 8004a66:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d113      	bne.n	8004a96 <HAL_PCD_IRQHandler+0x31c>
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a72:	4613      	mov	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3350      	adds	r3, #80	; 0x50
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d108      	bne.n	8004a96 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2101      	movs	r1, #1
 8004a92:	f002 ff41 	bl	8007918 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f004 fc3e 	bl	800931e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2308      	movs	r3, #8
 8004abc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2310      	movs	r3, #16
 8004ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	461a      	mov	r2, r3
 8004af2:	2340      	movs	r3, #64	; 0x40
 8004af4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2302      	movs	r3, #2
 8004b10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fc1b 	bl	800535a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	3301      	adds	r3, #1
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f47f af49 	bne.w	80049ca <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f002 fe26 	bl	800778e <USB_ReadInterrupts>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b4c:	d122      	bne.n	8004b94 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d108      	bne.n	8004b7e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b74:	2100      	movs	r1, #0
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fe26 	bl	80057c8 <HAL_PCDEx_LPM_Callback>
 8004b7c:	e002      	b.n	8004b84 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f004 fc3a 	bl	80093f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f002 fdf8 	bl	800778e <USB_ReadInterrupts>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba8:	d112      	bne.n	8004bd0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d102      	bne.n	8004bc0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f004 fbf6 	bl	80093ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004bce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f002 fdda 	bl	800778e <USB_ReadInterrupts>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be4:	f040 80c7 	bne.w	8004d76 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf6:	f023 0301 	bic.w	r3, r3, #1
 8004bfa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2110      	movs	r1, #16
 8004c02:	4618      	mov	r0, r3
 8004c04:	f001 fea8 	bl	8006958 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c08:	2300      	movs	r3, #0
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0c:	e056      	b.n	8004cbc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c20:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c32:	0151      	lsls	r1, r2, #5
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	440a      	add	r2, r1
 8004c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c40:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c74:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cb4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	3301      	adds	r3, #1
 8004cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d3a3      	bcc.n	8004c0e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004cd8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d016      	beq.n	8004d10 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cf2:	f043 030b 	orr.w	r3, r3, #11
 8004cf6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d08:	f043 030b 	orr.w	r3, r3, #11
 8004d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d0e:	e015      	b.n	8004d3c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d22:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004d26:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d36:	f043 030b 	orr.w	r3, r3, #11
 8004d3a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d4e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d60:	461a      	mov	r2, r3
 8004d62:	f002 fdd9 	bl	8007918 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f002 fd07 	bl	800778e <USB_ReadInterrupts>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8a:	d124      	bne.n	8004dd6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f002 fd9d 	bl	80078d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 fe3d 	bl	8006a1a <USB_GetDevSpeed>
 8004da0:	4603      	mov	r3, r0
 8004da2:	461a      	mov	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681c      	ldr	r4, [r3, #0]
 8004dac:	f001 f92c 	bl	8006008 <HAL_RCC_GetHCLKFreq>
 8004db0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f001 fb7a 	bl	80064b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f004 fad4 	bl	800936e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f002 fcd7 	bl	800778e <USB_ReadInterrupts>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d10a      	bne.n	8004e00 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f004 fab1 	bl	8009352 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f002 0208 	and.w	r2, r2, #8
 8004dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f002 fcc2 	bl	800778e <USB_ReadInterrupts>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e14:	d10f      	bne.n	8004e36 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f004 fb09 	bl	8009438 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004e34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f002 fca7 	bl	800778e <USB_ReadInterrupts>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e4a:	d10f      	bne.n	8004e6c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f004 fadc 	bl	8009414 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f002 fc8c 	bl	800778e <USB_ReadInterrupts>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e80:	d10a      	bne.n	8004e98 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f004 faea 	bl	800945c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f002 fc76 	bl	800778e <USB_ReadInterrupts>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d115      	bne.n	8004ed8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f004 fada 	bl	8009478 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
 8004ed4:	e000      	b.n	8004ed8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004ed6:	bf00      	nop
    }
  }
}
 8004ed8:	3734      	adds	r7, #52	; 0x34
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}

08004ede <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_PCD_SetAddress+0x1a>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e013      	b.n	8004f20 <HAL_PCD_SetAddress+0x42>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f002 fbd4 	bl	80076be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	4608      	mov	r0, r1
 8004f32:	4611      	mov	r1, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	70fb      	strb	r3, [r7, #3]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	803b      	strh	r3, [r7, #0]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	da0f      	bge.n	8004f6e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	f003 020f 	and.w	r2, r3, #15
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	3338      	adds	r3, #56	; 0x38
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	3304      	adds	r3, #4
 8004f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	705a      	strb	r2, [r3, #1]
 8004f6c:	e00f      	b.n	8004f8e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	f003 020f 	and.w	r2, r3, #15
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	1a9b      	subs	r3, r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	4413      	add	r3, r2
 8004f84:	3304      	adds	r3, #4
 8004f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f9a:	883a      	ldrh	r2, [r7, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	78ba      	ldrb	r2, [r7, #2]
 8004fa4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fb8:	78bb      	ldrb	r3, [r7, #2]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d102      	bne.n	8004fc4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_PCD_EP_Open+0xaa>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e00e      	b.n	8004ff0 <HAL_PCD_EP_Open+0xc8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68f9      	ldr	r1, [r7, #12]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f001 fd3f 	bl	8006a64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004fee:	7afb      	ldrb	r3, [r7, #11]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005008:	2b00      	cmp	r3, #0
 800500a:	da0f      	bge.n	800502c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	f003 020f 	and.w	r2, r3, #15
 8005012:	4613      	mov	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	3338      	adds	r3, #56	; 0x38
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4413      	add	r3, r2
 8005020:	3304      	adds	r3, #4
 8005022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	705a      	strb	r2, [r3, #1]
 800502a:	e00f      	b.n	800504c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	f003 020f 	and.w	r2, r3, #15
 8005032:	4613      	mov	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	4413      	add	r3, r2
 8005042:	3304      	adds	r3, #4
 8005044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_PCD_EP_Close+0x6e>
 8005062:	2302      	movs	r3, #2
 8005064:	e00e      	b.n	8005084 <HAL_PCD_EP_Close+0x8c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68f9      	ldr	r1, [r7, #12]
 8005074:	4618      	mov	r0, r3
 8005076:	f001 fd7d 	bl	8006b74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	460b      	mov	r3, r1
 800509a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800509c:	7afb      	ldrb	r3, [r7, #11]
 800509e:	f003 020f 	and.w	r2, r3, #15
 80050a2:	4613      	mov	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	3304      	adds	r3, #4
 80050b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2200      	movs	r2, #0
 80050c6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2200      	movs	r2, #0
 80050cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ce:	7afb      	ldrb	r3, [r7, #11]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d102      	bne.n	80050e8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050e8:	7afb      	ldrb	r3, [r7, #11]
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	6979      	ldr	r1, [r7, #20]
 8005100:	f002 f858 	bl	80071b4 <USB_EP0StartXfer>
 8005104:	e008      	b.n	8005118 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	6979      	ldr	r1, [r7, #20]
 8005114:	f001 fe0a 	bl	8006d2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	460b      	mov	r3, r1
 800512c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	f003 020f 	and.w	r2, r3, #15
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005144:	681b      	ldr	r3, [r3, #0]
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b086      	sub	sp, #24
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	460b      	mov	r3, r1
 8005160:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005162:	7afb      	ldrb	r3, [r7, #11]
 8005164:	f003 020f 	and.w	r2, r3, #15
 8005168:	4613      	mov	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	3338      	adds	r3, #56	; 0x38
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	3304      	adds	r3, #4
 8005178:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2201      	movs	r2, #1
 8005190:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005192:	7afb      	ldrb	r3, [r7, #11]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	b2da      	uxtb	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d102      	bne.n	80051ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051ac:	7afb      	ldrb	r3, [r7, #11]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	6979      	ldr	r1, [r7, #20]
 80051c4:	f001 fff6 	bl	80071b4 <USB_EP0StartXfer>
 80051c8:	e008      	b.n	80051dc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	461a      	mov	r2, r3
 80051d6:	6979      	ldr	r1, [r7, #20]
 80051d8:	f001 fda8 	bl	8006d2c <USB_EPStartXfer>
  }

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	460b      	mov	r3, r1
 80051f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d901      	bls.n	8005204 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e050      	b.n	80052a6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005208:	2b00      	cmp	r3, #0
 800520a:	da0f      	bge.n	800522c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	f003 020f 	and.w	r2, r3, #15
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	3338      	adds	r3, #56	; 0x38
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	4413      	add	r3, r2
 8005220:	3304      	adds	r3, #4
 8005222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	705a      	strb	r2, [r3, #1]
 800522a:	e00d      	b.n	8005248 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	4613      	mov	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	3304      	adds	r3, #4
 8005240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	b2da      	uxtb	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_PCD_EP_SetStall+0x82>
 8005264:	2302      	movs	r3, #2
 8005266:	e01e      	b.n	80052a6 <HAL_PCD_EP_SetStall+0xc0>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68f9      	ldr	r1, [r7, #12]
 8005276:	4618      	mov	r0, r3
 8005278:	f002 f94d 	bl	8007516 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	b2d9      	uxtb	r1, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005296:	461a      	mov	r2, r3
 8005298:	f002 fb3e 	bl	8007918 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d901      	bls.n	80052cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e042      	b.n	8005352 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	da0f      	bge.n	80052f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	f003 020f 	and.w	r2, r3, #15
 80052da:	4613      	mov	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	3338      	adds	r3, #56	; 0x38
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	4413      	add	r3, r2
 80052e8:	3304      	adds	r3, #4
 80052ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	705a      	strb	r2, [r3, #1]
 80052f2:	e00f      	b.n	8005314 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	f003 020f 	and.w	r2, r3, #15
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4413      	add	r3, r2
 800530a:	3304      	adds	r3, #4
 800530c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	b2da      	uxtb	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_PCD_EP_ClrStall+0x86>
 8005330:	2302      	movs	r3, #2
 8005332:	e00e      	b.n	8005352 <HAL_PCD_EP_ClrStall+0xa4>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68f9      	ldr	r1, [r7, #12]
 8005342:	4618      	mov	r0, r3
 8005344:	f002 f955 	bl	80075f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b08a      	sub	sp, #40	; 0x28
 800535e:	af02      	add	r7, sp, #8
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	3338      	adds	r3, #56	; 0x38
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	3304      	adds	r3, #4
 8005380:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	429a      	cmp	r2, r3
 800538c:	d901      	bls.n	8005392 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e06c      	b.n	800546c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d902      	bls.n	80053ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3303      	adds	r3, #3
 80053b2:	089b      	lsrs	r3, r3, #2
 80053b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053b6:	e02b      	b.n	8005410 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	695a      	ldr	r2, [r3, #20]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d902      	bls.n	80053d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	3303      	adds	r3, #3
 80053d8:	089b      	lsrs	r3, r3, #2
 80053da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68d9      	ldr	r1, [r3, #12]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	4603      	mov	r3, r0
 80053f2:	6978      	ldr	r0, [r7, #20]
 80053f4:	f002 f831 	bl	800745a <USB_WritePacket>

    ep->xfer_buff  += len;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	441a      	add	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	441a      	add	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	b29b      	uxth	r3, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	429a      	cmp	r2, r3
 8005424:	d809      	bhi.n	800543a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800542e:	429a      	cmp	r2, r3
 8005430:	d203      	bcs.n	800543a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1be      	bne.n	80053b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	429a      	cmp	r2, r3
 8005444:	d811      	bhi.n	800546a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	2201      	movs	r2, #1
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	43db      	mvns	r3, r3
 8005460:	6939      	ldr	r1, [r7, #16]
 8005462:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005466:	4013      	ands	r3, r2
 8005468:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	333c      	adds	r3, #60	; 0x3c
 800548c:	3304      	adds	r3, #4
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	f040 80a0 	bne.w	80055ec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d015      	beq.n	80054e2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4a72      	ldr	r2, [pc, #456]	; (8005684 <PCD_EP_OutXfrComplete_int+0x210>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	f240 80dd 	bls.w	800567a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80d7 	beq.w	800567a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d8:	461a      	mov	r2, r3
 80054da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054de:	6093      	str	r3, [r2, #8]
 80054e0:	e0cb      	b.n	800567a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	461a      	mov	r2, r3
 80054fa:	2320      	movs	r3, #32
 80054fc:	6093      	str	r3, [r2, #8]
 80054fe:	e0bc      	b.n	800567a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 80b7 	bne.w	800567a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4a5d      	ldr	r2, [pc, #372]	; (8005684 <PCD_EP_OutXfrComplete_int+0x210>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d90f      	bls.n	8005534 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	461a      	mov	r2, r3
 800552c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005530:	6093      	str	r3, [r2, #8]
 8005532:	e0a2      	b.n	800567a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	1a9b      	subs	r3, r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005546:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	0159      	lsls	r1, r3, #5
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	440b      	add	r3, r1
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800555a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4403      	add	r3, r0
 800556a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800556e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4403      	add	r3, r0
 8005592:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4419      	add	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4403      	add	r3, r0
 80055a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80055ac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d114      	bne.n	80055de <PCD_EP_OutXfrComplete_int+0x16a>
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d108      	bne.n	80055de <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055d6:	461a      	mov	r2, r3
 80055d8:	2101      	movs	r1, #1
 80055da:	f002 f99d 	bl	8007918 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f003 fe7f 	bl	80092e8 <HAL_PCD_DataOutStageCallback>
 80055ea:	e046      	b.n	800567a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4a26      	ldr	r2, [pc, #152]	; (8005688 <PCD_EP_OutXfrComplete_int+0x214>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d124      	bne.n	800563e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	461a      	mov	r2, r3
 800560c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005610:	6093      	str	r3, [r2, #8]
 8005612:	e032      	b.n	800567a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d008      	beq.n	8005630 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562a:	461a      	mov	r2, r3
 800562c:	2320      	movs	r3, #32
 800562e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f003 fe56 	bl	80092e8 <HAL_PCD_DataOutStageCallback>
 800563c:	e01d      	b.n	800567a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d114      	bne.n	800566e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d108      	bne.n	800566e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005666:	461a      	mov	r2, r3
 8005668:	2100      	movs	r1, #0
 800566a:	f002 f955 	bl	8007918 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f003 fe37 	bl	80092e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	4f54300a 	.word	0x4f54300a
 8005688:	4f54310a 	.word	0x4f54310a

0800568c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	333c      	adds	r3, #60	; 0x3c
 80056a4:	3304      	adds	r3, #4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a15      	ldr	r2, [pc, #84]	; (8005714 <PCD_EP_OutSetupPacket_int+0x88>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d90e      	bls.n	80056e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	461a      	mov	r2, r3
 80056da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f003 fdef 	bl	80092c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a0a      	ldr	r2, [pc, #40]	; (8005714 <PCD_EP_OutSetupPacket_int+0x88>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d90c      	bls.n	8005708 <PCD_EP_OutSetupPacket_int+0x7c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d108      	bne.n	8005708 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005700:	461a      	mov	r2, r3
 8005702:	2101      	movs	r1, #1
 8005704:	f002 f908 	bl	8007918 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	4f54300a 	.word	0x4f54300a

08005718 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
 8005724:	4613      	mov	r3, r2
 8005726:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005736:	883b      	ldrh	r3, [r7, #0]
 8005738:	0419      	lsls	r1, r3, #16
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	430a      	orrs	r2, r1
 8005742:	629a      	str	r2, [r3, #40]	; 0x28
 8005744:	e028      	b.n	8005798 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	4413      	add	r3, r2
 8005752:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005754:	2300      	movs	r3, #0
 8005756:	73fb      	strb	r3, [r7, #15]
 8005758:	e00d      	b.n	8005776 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	3340      	adds	r3, #64	; 0x40
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	0c1b      	lsrs	r3, r3, #16
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4413      	add	r3, r2
 800576e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	3301      	adds	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	3b01      	subs	r3, #1
 800577c:	429a      	cmp	r2, r3
 800577e:	d3ec      	bcc.n	800575a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005780:	883b      	ldrh	r3, [r7, #0]
 8005782:	0418      	lsls	r0, r3, #16
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6819      	ldr	r1, [r3, #0]
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	3b01      	subs	r3, #1
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	4302      	orrs	r2, r0
 8005790:	3340      	adds	r3, #64	; 0x40
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	887a      	ldrh	r2, [r7, #2]
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e264      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d075      	beq.n	80058ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057fe:	4ba3      	ldr	r3, [pc, #652]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	2b04      	cmp	r3, #4
 8005808:	d00c      	beq.n	8005824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800580a:	4ba0      	ldr	r3, [pc, #640]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005812:	2b08      	cmp	r3, #8
 8005814:	d112      	bne.n	800583c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005816:	4b9d      	ldr	r3, [pc, #628]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005822:	d10b      	bne.n	800583c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005824:	4b99      	ldr	r3, [pc, #612]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d05b      	beq.n	80058e8 <HAL_RCC_OscConfig+0x108>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d157      	bne.n	80058e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e23f      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005844:	d106      	bne.n	8005854 <HAL_RCC_OscConfig+0x74>
 8005846:	4b91      	ldr	r3, [pc, #580]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a90      	ldr	r2, [pc, #576]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800584c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e01d      	b.n	8005890 <HAL_RCC_OscConfig+0xb0>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800585c:	d10c      	bne.n	8005878 <HAL_RCC_OscConfig+0x98>
 800585e:	4b8b      	ldr	r3, [pc, #556]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a8a      	ldr	r2, [pc, #552]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	4b88      	ldr	r3, [pc, #544]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a87      	ldr	r2, [pc, #540]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e00b      	b.n	8005890 <HAL_RCC_OscConfig+0xb0>
 8005878:	4b84      	ldr	r3, [pc, #528]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a83      	ldr	r2, [pc, #524]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800587e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	4b81      	ldr	r3, [pc, #516]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a80      	ldr	r2, [pc, #512]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800588a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800588e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d013      	beq.n	80058c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005898:	f7fd f940 	bl	8002b1c <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058a0:	f7fd f93c 	bl	8002b1c <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	; 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e204      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b2:	4b76      	ldr	r3, [pc, #472]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f0      	beq.n	80058a0 <HAL_RCC_OscConfig+0xc0>
 80058be:	e014      	b.n	80058ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c0:	f7fd f92c 	bl	8002b1c <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058c8:	f7fd f928 	bl	8002b1c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	; 0x64
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e1f0      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058da:	4b6c      	ldr	r3, [pc, #432]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0xe8>
 80058e6:	e000      	b.n	80058ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d063      	beq.n	80059be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058f6:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 030c 	and.w	r3, r3, #12
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005902:	4b62      	ldr	r3, [pc, #392]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800590a:	2b08      	cmp	r3, #8
 800590c:	d11c      	bne.n	8005948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800590e:	4b5f      	ldr	r3, [pc, #380]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d116      	bne.n	8005948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800591a:	4b5c      	ldr	r3, [pc, #368]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <HAL_RCC_OscConfig+0x152>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d001      	beq.n	8005932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e1c4      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005932:	4b56      	ldr	r3, [pc, #344]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	4952      	ldr	r1, [pc, #328]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005942:	4313      	orrs	r3, r2
 8005944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005946:	e03a      	b.n	80059be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d020      	beq.n	8005992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005950:	4b4f      	ldr	r3, [pc, #316]	; (8005a90 <HAL_RCC_OscConfig+0x2b0>)
 8005952:	2201      	movs	r2, #1
 8005954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005956:	f7fd f8e1 	bl	8002b1c <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800595e:	f7fd f8dd 	bl	8002b1c <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e1a5      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005970:	4b46      	ldr	r3, [pc, #280]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597c:	4b43      	ldr	r3, [pc, #268]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	4940      	ldr	r1, [pc, #256]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800598c:	4313      	orrs	r3, r2
 800598e:	600b      	str	r3, [r1, #0]
 8005990:	e015      	b.n	80059be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005992:	4b3f      	ldr	r3, [pc, #252]	; (8005a90 <HAL_RCC_OscConfig+0x2b0>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005998:	f7fd f8c0 	bl	8002b1c <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059a0:	f7fd f8bc 	bl	8002b1c <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e184      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059b2:	4b36      	ldr	r3, [pc, #216]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d030      	beq.n	8005a2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d016      	beq.n	8005a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059d2:	4b30      	ldr	r3, [pc, #192]	; (8005a94 <HAL_RCC_OscConfig+0x2b4>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d8:	f7fd f8a0 	bl	8002b1c <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059e0:	f7fd f89c 	bl	8002b1c <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e164      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059f2:	4b26      	ldr	r3, [pc, #152]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f0      	beq.n	80059e0 <HAL_RCC_OscConfig+0x200>
 80059fe:	e015      	b.n	8005a2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a00:	4b24      	ldr	r3, [pc, #144]	; (8005a94 <HAL_RCC_OscConfig+0x2b4>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a06:	f7fd f889 	bl	8002b1c <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a0e:	f7fd f885 	bl	8002b1c <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e14d      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a20:	4b1a      	ldr	r3, [pc, #104]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f0      	bne.n	8005a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80a0 	beq.w	8005b7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10f      	bne.n	8005a6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	4a0e      	ldr	r2, [pc, #56]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a58:	6413      	str	r3, [r2, #64]	; 0x40
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a62:	60bb      	str	r3, [r7, #8]
 8005a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a66:	2301      	movs	r3, #1
 8005a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <HAL_RCC_OscConfig+0x2b8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d121      	bne.n	8005aba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a76:	4b08      	ldr	r3, [pc, #32]	; (8005a98 <HAL_RCC_OscConfig+0x2b8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a07      	ldr	r2, [pc, #28]	; (8005a98 <HAL_RCC_OscConfig+0x2b8>)
 8005a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a82:	f7fd f84b 	bl	8002b1c <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a88:	e011      	b.n	8005aae <HAL_RCC_OscConfig+0x2ce>
 8005a8a:	bf00      	nop
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	42470000 	.word	0x42470000
 8005a94:	42470e80 	.word	0x42470e80
 8005a98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a9c:	f7fd f83e 	bl	8002b1c <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e106      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aae:	4b85      	ldr	r3, [pc, #532]	; (8005cc4 <HAL_RCC_OscConfig+0x4e4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f0      	beq.n	8005a9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d106      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x2f0>
 8005ac2:	4b81      	ldr	r3, [pc, #516]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	4a80      	ldr	r2, [pc, #512]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005ac8:	f043 0301 	orr.w	r3, r3, #1
 8005acc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ace:	e01c      	b.n	8005b0a <HAL_RCC_OscConfig+0x32a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b05      	cmp	r3, #5
 8005ad6:	d10c      	bne.n	8005af2 <HAL_RCC_OscConfig+0x312>
 8005ad8:	4b7b      	ldr	r3, [pc, #492]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005adc:	4a7a      	ldr	r2, [pc, #488]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005ade:	f043 0304 	orr.w	r3, r3, #4
 8005ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae4:	4b78      	ldr	r3, [pc, #480]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	4a77      	ldr	r2, [pc, #476]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005aea:	f043 0301 	orr.w	r3, r3, #1
 8005aee:	6713      	str	r3, [r2, #112]	; 0x70
 8005af0:	e00b      	b.n	8005b0a <HAL_RCC_OscConfig+0x32a>
 8005af2:	4b75      	ldr	r3, [pc, #468]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af6:	4a74      	ldr	r2, [pc, #464]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	6713      	str	r3, [r2, #112]	; 0x70
 8005afe:	4b72      	ldr	r3, [pc, #456]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	4a71      	ldr	r2, [pc, #452]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005b04:	f023 0304 	bic.w	r3, r3, #4
 8005b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d015      	beq.n	8005b3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b12:	f7fd f803 	bl	8002b1c <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b18:	e00a      	b.n	8005b30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b1a:	f7fc ffff 	bl	8002b1c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e0c5      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b30:	4b65      	ldr	r3, [pc, #404]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0ee      	beq.n	8005b1a <HAL_RCC_OscConfig+0x33a>
 8005b3c:	e014      	b.n	8005b68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3e:	f7fc ffed 	bl	8002b1c <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b44:	e00a      	b.n	8005b5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b46:	f7fc ffe9 	bl	8002b1c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e0af      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b5c:	4b5a      	ldr	r3, [pc, #360]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1ee      	bne.n	8005b46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d105      	bne.n	8005b7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b6e:	4b56      	ldr	r3, [pc, #344]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	4a55      	ldr	r2, [pc, #340]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 809b 	beq.w	8005cba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b84:	4b50      	ldr	r3, [pc, #320]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 030c 	and.w	r3, r3, #12
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d05c      	beq.n	8005c4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d141      	bne.n	8005c1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b98:	4b4c      	ldr	r3, [pc, #304]	; (8005ccc <HAL_RCC_OscConfig+0x4ec>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9e:	f7fc ffbd 	bl	8002b1c <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba6:	f7fc ffb9 	bl	8002b1c <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e081      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bb8:	4b43      	ldr	r3, [pc, #268]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f0      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	019b      	lsls	r3, r3, #6
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	085b      	lsrs	r3, r3, #1
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	041b      	lsls	r3, r3, #16
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	061b      	lsls	r3, r3, #24
 8005be8:	4937      	ldr	r1, [pc, #220]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bee:	4b37      	ldr	r3, [pc, #220]	; (8005ccc <HAL_RCC_OscConfig+0x4ec>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf4:	f7fc ff92 	bl	8002b1c <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bfc:	f7fc ff8e 	bl	8002b1c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e056      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c0e:	4b2e      	ldr	r3, [pc, #184]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <HAL_RCC_OscConfig+0x41c>
 8005c1a:	e04e      	b.n	8005cba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ccc <HAL_RCC_OscConfig+0x4ec>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c22:	f7fc ff7b 	bl	8002b1c <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c2a:	f7fc ff77 	bl	8002b1c <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e03f      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3c:	4b22      	ldr	r3, [pc, #136]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1f0      	bne.n	8005c2a <HAL_RCC_OscConfig+0x44a>
 8005c48:	e037      	b.n	8005cba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e032      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c56:	4b1c      	ldr	r3, [pc, #112]	; (8005cc8 <HAL_RCC_OscConfig+0x4e8>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d028      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d121      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d11a      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c86:	4013      	ands	r3, r2
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d111      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	085b      	lsrs	r3, r3, #1
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d107      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d001      	beq.n	8005cba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40007000 	.word	0x40007000
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	42470060 	.word	0x42470060

08005cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e0cc      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce4:	4b68      	ldr	r3, [pc, #416]	; (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d90c      	bls.n	8005d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf2:	4b65      	ldr	r3, [pc, #404]	; (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfa:	4b63      	ldr	r3, [pc, #396]	; (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d001      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0b8      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d020      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d24:	4b59      	ldr	r3, [pc, #356]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4a58      	ldr	r2, [pc, #352]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d3c:	4b53      	ldr	r3, [pc, #332]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	4a52      	ldr	r2, [pc, #328]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d48:	4b50      	ldr	r3, [pc, #320]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	494d      	ldr	r1, [pc, #308]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d044      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d107      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6e:	4b47      	ldr	r3, [pc, #284]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d119      	bne.n	8005dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e07f      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d003      	beq.n	8005d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d107      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d8e:	4b3f      	ldr	r3, [pc, #252]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e06f      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d9e:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e067      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dae:	4b37      	ldr	r3, [pc, #220]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f023 0203 	bic.w	r2, r3, #3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	4934      	ldr	r1, [pc, #208]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dc0:	f7fc feac 	bl	8002b1c <HAL_GetTick>
 8005dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc6:	e00a      	b.n	8005dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc8:	f7fc fea8 	bl	8002b1c <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e04f      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dde:	4b2b      	ldr	r3, [pc, #172]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 020c 	and.w	r2, r3, #12
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d1eb      	bne.n	8005dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005df0:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d20c      	bcs.n	8005e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfe:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e06:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <HAL_RCC_ClockConfig+0x1b8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d001      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e032      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d008      	beq.n	8005e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4916      	ldr	r1, [pc, #88]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	490e      	ldr	r1, [pc, #56]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e56:	f000 f821 	bl	8005e9c <HAL_RCC_GetSysClockFreq>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	490a      	ldr	r1, [pc, #40]	; (8005e90 <HAL_RCC_ClockConfig+0x1c0>)
 8005e68:	5ccb      	ldrb	r3, [r1, r3]
 8005e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6e:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e72:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <HAL_RCC_ClockConfig+0x1c8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fc fe0c 	bl	8002a94 <HAL_InitTick>

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40023c00 	.word	0x40023c00
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	0800be38 	.word	0x0800be38
 8005e94:	20000048 	.word	0x20000048
 8005e98:	2000004c 	.word	0x2000004c

08005e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e9c:	b5b0      	push	{r4, r5, r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	6079      	str	r1, [r7, #4]
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	60f9      	str	r1, [r7, #12]
 8005eaa:	2100      	movs	r1, #0
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005eae:	2100      	movs	r1, #0
 8005eb0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eb2:	4952      	ldr	r1, [pc, #328]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8005eb4:	6889      	ldr	r1, [r1, #8]
 8005eb6:	f001 010c 	and.w	r1, r1, #12
 8005eba:	2908      	cmp	r1, #8
 8005ebc:	d00d      	beq.n	8005eda <HAL_RCC_GetSysClockFreq+0x3e>
 8005ebe:	2908      	cmp	r1, #8
 8005ec0:	f200 8094 	bhi.w	8005fec <HAL_RCC_GetSysClockFreq+0x150>
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_RCC_GetSysClockFreq+0x32>
 8005ec8:	2904      	cmp	r1, #4
 8005eca:	d003      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x38>
 8005ecc:	e08e      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ece:	4b4c      	ldr	r3, [pc, #304]	; (8006000 <HAL_RCC_GetSysClockFreq+0x164>)
 8005ed0:	60bb      	str	r3, [r7, #8]
       break;
 8005ed2:	e08e      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ed4:	4b4b      	ldr	r3, [pc, #300]	; (8006004 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ed6:	60bb      	str	r3, [r7, #8]
      break;
 8005ed8:	e08b      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eda:	4948      	ldr	r1, [pc, #288]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8005edc:	6849      	ldr	r1, [r1, #4]
 8005ede:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005ee2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ee4:	4945      	ldr	r1, [pc, #276]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8005ee6:	6849      	ldr	r1, [r1, #4]
 8005ee8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005eec:	2900      	cmp	r1, #0
 8005eee:	d024      	beq.n	8005f3a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ef0:	4942      	ldr	r1, [pc, #264]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8005ef2:	6849      	ldr	r1, [r1, #4]
 8005ef4:	0989      	lsrs	r1, r1, #6
 8005ef6:	4608      	mov	r0, r1
 8005ef8:	f04f 0100 	mov.w	r1, #0
 8005efc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005f00:	f04f 0500 	mov.w	r5, #0
 8005f04:	ea00 0204 	and.w	r2, r0, r4
 8005f08:	ea01 0305 	and.w	r3, r1, r5
 8005f0c:	493d      	ldr	r1, [pc, #244]	; (8006004 <HAL_RCC_GetSysClockFreq+0x168>)
 8005f0e:	fb01 f003 	mul.w	r0, r1, r3
 8005f12:	2100      	movs	r1, #0
 8005f14:	fb01 f102 	mul.w	r1, r1, r2
 8005f18:	1844      	adds	r4, r0, r1
 8005f1a:	493a      	ldr	r1, [pc, #232]	; (8006004 <HAL_RCC_GetSysClockFreq+0x168>)
 8005f1c:	fba2 0101 	umull	r0, r1, r2, r1
 8005f20:	1863      	adds	r3, r4, r1
 8005f22:	4619      	mov	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	f7fa fe76 	bl	8000c1c <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4613      	mov	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e04a      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f3a:	4b30      	ldr	r3, [pc, #192]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	099b      	lsrs	r3, r3, #6
 8005f40:	461a      	mov	r2, r3
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f4a:	f04f 0100 	mov.w	r1, #0
 8005f4e:	ea02 0400 	and.w	r4, r2, r0
 8005f52:	ea03 0501 	and.w	r5, r3, r1
 8005f56:	4620      	mov	r0, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	014b      	lsls	r3, r1, #5
 8005f64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f68:	0142      	lsls	r2, r0, #5
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	1b00      	subs	r0, r0, r4
 8005f70:	eb61 0105 	sbc.w	r1, r1, r5
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	018b      	lsls	r3, r1, #6
 8005f7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f82:	0182      	lsls	r2, r0, #6
 8005f84:	1a12      	subs	r2, r2, r0
 8005f86:	eb63 0301 	sbc.w	r3, r3, r1
 8005f8a:	f04f 0000 	mov.w	r0, #0
 8005f8e:	f04f 0100 	mov.w	r1, #0
 8005f92:	00d9      	lsls	r1, r3, #3
 8005f94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f98:	00d0      	lsls	r0, r2, #3
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	1912      	adds	r2, r2, r4
 8005fa0:	eb45 0303 	adc.w	r3, r5, r3
 8005fa4:	f04f 0000 	mov.w	r0, #0
 8005fa8:	f04f 0100 	mov.w	r1, #0
 8005fac:	0299      	lsls	r1, r3, #10
 8005fae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005fb2:	0290      	lsls	r0, r2, #10
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	f7fa fe2a 	bl	8000c1c <__aeabi_uldivmod>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4613      	mov	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	3301      	adds	r3, #1
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	60bb      	str	r3, [r7, #8]
      break;
 8005fea:	e002      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fec:	4b04      	ldr	r3, [pc, #16]	; (8006000 <HAL_RCC_GetSysClockFreq+0x164>)
 8005fee:	60bb      	str	r3, [r7, #8]
      break;
 8005ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8005ffc:	40023800 	.word	0x40023800
 8006000:	00f42400 	.word	0x00f42400
 8006004:	017d7840 	.word	0x017d7840

08006008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <HAL_RCC_GetHCLKFreq+0x14>)
 800600e:	681b      	ldr	r3, [r3, #0]
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20000048 	.word	0x20000048

08006020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006024:	f7ff fff0 	bl	8006008 <HAL_RCC_GetHCLKFreq>
 8006028:	4602      	mov	r2, r0
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	0a9b      	lsrs	r3, r3, #10
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	4903      	ldr	r1, [pc, #12]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006036:	5ccb      	ldrb	r3, [r1, r3]
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800603c:	4618      	mov	r0, r3
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40023800 	.word	0x40023800
 8006044:	0800be48 	.word	0x0800be48

08006048 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800606c:	2b00      	cmp	r3, #0
 800606e:	d038      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006070:	4b68      	ldr	r3, [pc, #416]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006076:	f7fc fd51 	bl	8002b1c <HAL_GetTick>
 800607a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800607c:	e008      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800607e:	f7fc fd4d 	bl	8002b1c <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e0bd      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006090:	4b61      	ldr	r3, [pc, #388]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f0      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	019b      	lsls	r3, r3, #6
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	071b      	lsls	r3, r3, #28
 80060ae:	495a      	ldr	r1, [pc, #360]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060b6:	4b57      	ldr	r3, [pc, #348]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060bc:	f7fc fd2e 	bl	8002b1c <HAL_GetTick>
 80060c0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060c4:	f7fc fd2a 	bl	8002b1c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e09a      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060d6:	4b50      	ldr	r3, [pc, #320]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8083 	beq.w	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	4b48      	ldr	r3, [pc, #288]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f8:	4a47      	ldr	r2, [pc, #284]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fe:	6413      	str	r3, [r2, #64]	; 0x40
 8006100:	4b45      	ldr	r3, [pc, #276]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800610c:	4b43      	ldr	r3, [pc, #268]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a42      	ldr	r2, [pc, #264]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006116:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006118:	f7fc fd00 	bl	8002b1c <HAL_GetTick>
 800611c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800611e:	e008      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006120:	f7fc fcfc 	bl	8002b1c <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e06c      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006132:	4b3a      	ldr	r3, [pc, #232]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0f0      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800613e:	4b36      	ldr	r3, [pc, #216]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006146:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d02f      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x166>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	429a      	cmp	r2, r3
 800615a:	d028      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800615c:	4b2e      	ldr	r3, [pc, #184]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006164:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006166:	4b2e      	ldr	r3, [pc, #184]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800616c:	4b2c      	ldr	r3, [pc, #176]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006172:	4a29      	ldr	r2, [pc, #164]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006178:	4b27      	ldr	r3, [pc, #156]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b01      	cmp	r3, #1
 8006182:	d114      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006184:	f7fc fcca 	bl	8002b1c <HAL_GetTick>
 8006188:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618a:	e00a      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800618c:	f7fc fcc6 	bl	8002b1c <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f241 3288 	movw	r2, #5000	; 0x1388
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e034      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a2:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0ee      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ba:	d10d      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80061bc:	4b16      	ldr	r3, [pc, #88]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d0:	4911      	ldr	r1, [pc, #68]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	608b      	str	r3, [r1, #8]
 80061d6:	e005      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	4a0e      	ldr	r2, [pc, #56]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80061e2:	6093      	str	r3, [r2, #8]
 80061e4:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f0:	4909      	ldr	r1, [pc, #36]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	7d1a      	ldrb	r2, [r3, #20]
 8006206:	4b07      	ldr	r3, [pc, #28]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006208:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	42470068 	.word	0x42470068
 8006218:	40023800 	.word	0x40023800
 800621c:	40007000 	.word	0x40007000
 8006220:	42470e40 	.word	0x42470e40
 8006224:	424711e0 	.word	0x424711e0

08006228 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e083      	b.n	8006342 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	7f5b      	ldrb	r3, [r3, #29]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fc fa0a 	bl	8002664 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	22ca      	movs	r2, #202	; 0xca
 800625c:	625a      	str	r2, [r3, #36]	; 0x24
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2253      	movs	r2, #83	; 0x53
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f897 	bl	800639a <RTC_EnterInitMode>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	22ff      	movs	r2, #255	; 0xff
 8006278:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2204      	movs	r2, #4
 800627e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e05e      	b.n	8006342 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006296:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6899      	ldr	r1, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68d2      	ldr	r2, [r2, #12]
 80062be:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6919      	ldr	r1, [r3, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	041a      	lsls	r2, r3, #16
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062e2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10e      	bne.n	8006310 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f829 	bl	800634a <HAL_RTC_WaitForSynchro>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d008      	beq.n	8006310 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	22ff      	movs	r2, #255	; 0xff
 8006304:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2204      	movs	r2, #4
 800630a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e018      	b.n	8006342 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800631e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	22ff      	movs	r2, #255	; 0xff
 8006338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006340:	2300      	movs	r3, #0
  }
}
 8006342:	4618      	mov	r0, r3
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006364:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006366:	f7fc fbd9 	bl	8002b1c <HAL_GetTick>
 800636a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800636c:	e009      	b.n	8006382 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800636e:	f7fc fbd5 	bl	8002b1c <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800637c:	d901      	bls.n	8006382 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e007      	b.n	8006392 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0ee      	beq.n	800636e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d119      	bne.n	80063e8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f04f 32ff 	mov.w	r2, #4294967295
 80063bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063be:	f7fc fbad 	bl	8002b1c <HAL_GetTick>
 80063c2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80063c4:	e009      	b.n	80063da <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063c6:	f7fc fba9 	bl	8002b1c <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d4:	d901      	bls.n	80063da <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e007      	b.n	80063ea <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0ee      	beq.n	80063c6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063f2:	b084      	sub	sp, #16
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	f107 001c 	add.w	r0, r7, #28
 8006400:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	2b01      	cmp	r3, #1
 8006408:	d122      	bne.n	8006450 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800641e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d105      	bne.n	8006444 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 fac5 	bl	80079d4 <USB_CoreReset>
 800644a:	4603      	mov	r3, r0
 800644c:	73fb      	strb	r3, [r7, #15]
 800644e:	e01a      	b.n	8006486 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fab9 	bl	80079d4 <USB_CoreReset>
 8006462:	4603      	mov	r3, r0
 8006464:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	639a      	str	r2, [r3, #56]	; 0x38
 8006478:	e005      	b.n	8006486 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	2b01      	cmp	r3, #1
 800648a:	d10b      	bne.n	80064a4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f043 0206 	orr.w	r2, r3, #6
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f043 0220 	orr.w	r2, r3, #32
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b0:	b004      	add	sp, #16
 80064b2:	4770      	bx	lr

080064b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	4613      	mov	r3, r2
 80064c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d165      	bne.n	8006594 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4a41      	ldr	r2, [pc, #260]	; (80065d0 <USB_SetTurnaroundTime+0x11c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d906      	bls.n	80064de <USB_SetTurnaroundTime+0x2a>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4a40      	ldr	r2, [pc, #256]	; (80065d4 <USB_SetTurnaroundTime+0x120>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d202      	bcs.n	80064de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064d8:	230f      	movs	r3, #15
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	e062      	b.n	80065a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	4a3c      	ldr	r2, [pc, #240]	; (80065d4 <USB_SetTurnaroundTime+0x120>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d306      	bcc.n	80064f4 <USB_SetTurnaroundTime+0x40>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	4a3b      	ldr	r2, [pc, #236]	; (80065d8 <USB_SetTurnaroundTime+0x124>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d202      	bcs.n	80064f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064ee:	230e      	movs	r3, #14
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	e057      	b.n	80065a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4a38      	ldr	r2, [pc, #224]	; (80065d8 <USB_SetTurnaroundTime+0x124>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d306      	bcc.n	800650a <USB_SetTurnaroundTime+0x56>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4a37      	ldr	r2, [pc, #220]	; (80065dc <USB_SetTurnaroundTime+0x128>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d202      	bcs.n	800650a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006504:	230d      	movs	r3, #13
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e04c      	b.n	80065a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4a33      	ldr	r2, [pc, #204]	; (80065dc <USB_SetTurnaroundTime+0x128>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d306      	bcc.n	8006520 <USB_SetTurnaroundTime+0x6c>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	4a32      	ldr	r2, [pc, #200]	; (80065e0 <USB_SetTurnaroundTime+0x12c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d802      	bhi.n	8006520 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800651a:	230c      	movs	r3, #12
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	e041      	b.n	80065a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4a2f      	ldr	r2, [pc, #188]	; (80065e0 <USB_SetTurnaroundTime+0x12c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d906      	bls.n	8006536 <USB_SetTurnaroundTime+0x82>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4a2e      	ldr	r2, [pc, #184]	; (80065e4 <USB_SetTurnaroundTime+0x130>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d802      	bhi.n	8006536 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006530:	230b      	movs	r3, #11
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	e036      	b.n	80065a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4a2a      	ldr	r2, [pc, #168]	; (80065e4 <USB_SetTurnaroundTime+0x130>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d906      	bls.n	800654c <USB_SetTurnaroundTime+0x98>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	4a29      	ldr	r2, [pc, #164]	; (80065e8 <USB_SetTurnaroundTime+0x134>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d802      	bhi.n	800654c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006546:	230a      	movs	r3, #10
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	e02b      	b.n	80065a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4a26      	ldr	r2, [pc, #152]	; (80065e8 <USB_SetTurnaroundTime+0x134>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d906      	bls.n	8006562 <USB_SetTurnaroundTime+0xae>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4a25      	ldr	r2, [pc, #148]	; (80065ec <USB_SetTurnaroundTime+0x138>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d202      	bcs.n	8006562 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800655c:	2309      	movs	r3, #9
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e020      	b.n	80065a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4a21      	ldr	r2, [pc, #132]	; (80065ec <USB_SetTurnaroundTime+0x138>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d306      	bcc.n	8006578 <USB_SetTurnaroundTime+0xc4>
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4a20      	ldr	r2, [pc, #128]	; (80065f0 <USB_SetTurnaroundTime+0x13c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d802      	bhi.n	8006578 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006572:	2308      	movs	r3, #8
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e015      	b.n	80065a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4a1d      	ldr	r2, [pc, #116]	; (80065f0 <USB_SetTurnaroundTime+0x13c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d906      	bls.n	800658e <USB_SetTurnaroundTime+0xda>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4a1c      	ldr	r2, [pc, #112]	; (80065f4 <USB_SetTurnaroundTime+0x140>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d202      	bcs.n	800658e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006588:	2307      	movs	r3, #7
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e00a      	b.n	80065a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800658e:	2306      	movs	r3, #6
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	e007      	b.n	80065a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800659a:	2309      	movs	r3, #9
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	e001      	b.n	80065a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065a0:	2309      	movs	r3, #9
 80065a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	029b      	lsls	r3, r3, #10
 80065b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065bc:	431a      	orrs	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	00d8acbf 	.word	0x00d8acbf
 80065d4:	00e4e1c0 	.word	0x00e4e1c0
 80065d8:	00f42400 	.word	0x00f42400
 80065dc:	01067380 	.word	0x01067380
 80065e0:	011a499f 	.word	0x011a499f
 80065e4:	01312cff 	.word	0x01312cff
 80065e8:	014ca43f 	.word	0x014ca43f
 80065ec:	016e3600 	.word	0x016e3600
 80065f0:	01a6ab1f 	.word	0x01a6ab1f
 80065f4:	01e84800 	.word	0x01e84800

080065f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f043 0201 	orr.w	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f023 0201 	bic.w	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d106      	bne.n	8006668 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60da      	str	r2, [r3, #12]
 8006666:	e00b      	b.n	8006680 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	e001      	b.n	8006680 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e003      	b.n	8006688 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006680:	2032      	movs	r0, #50	; 0x32
 8006682:	f7fc fa57 	bl	8002b34 <HAL_Delay>

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006690:	b084      	sub	sp, #16
 8006692:	b580      	push	{r7, lr}
 8006694:	b086      	sub	sp, #24
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800669e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	e009      	b.n	80066c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3340      	adds	r3, #64	; 0x40
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	2200      	movs	r2, #0
 80066bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	3301      	adds	r3, #1
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b0e      	cmp	r3, #14
 80066c8:	d9f2      	bls.n	80066b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d11c      	bne.n	800670a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066de:	f043 0302 	orr.w	r3, r3, #2
 80066e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38
 8006708:	e00b      	b.n	8006722 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006728:	461a      	mov	r2, r3
 800672a:	2300      	movs	r3, #0
 800672c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006734:	4619      	mov	r1, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673c:	461a      	mov	r2, r3
 800673e:	680b      	ldr	r3, [r1, #0]
 8006740:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	2b01      	cmp	r3, #1
 8006746:	d10c      	bne.n	8006762 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800674e:	2100      	movs	r1, #0
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f949 	bl	80069e8 <USB_SetDevSpeed>
 8006756:	e008      	b.n	800676a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006758:	2101      	movs	r1, #1
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f944 	bl	80069e8 <USB_SetDevSpeed>
 8006760:	e003      	b.n	800676a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006762:	2103      	movs	r1, #3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f93f 	bl	80069e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800676a:	2110      	movs	r1, #16
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f8f3 	bl	8006958 <USB_FlushTxFifo>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f911 	bl	80069a4 <USB_FlushRxFifo>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	461a      	mov	r2, r3
 8006794:	2300      	movs	r3, #0
 8006796:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679e:	461a      	mov	r2, r3
 80067a0:	2300      	movs	r3, #0
 80067a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067aa:	461a      	mov	r2, r3
 80067ac:	2300      	movs	r3, #0
 80067ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067b0:	2300      	movs	r3, #0
 80067b2:	613b      	str	r3, [r7, #16]
 80067b4:	e043      	b.n	800683e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067cc:	d118      	bne.n	8006800 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e0:	461a      	mov	r2, r3
 80067e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	e013      	b.n	8006812 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	461a      	mov	r2, r3
 80067f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	e008      	b.n	8006812 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680c:	461a      	mov	r2, r3
 800680e:	2300      	movs	r3, #0
 8006810:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681e:	461a      	mov	r2, r3
 8006820:	2300      	movs	r3, #0
 8006822:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	461a      	mov	r2, r3
 8006832:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006836:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	3301      	adds	r3, #1
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	429a      	cmp	r2, r3
 8006844:	d3b7      	bcc.n	80067b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006846:	2300      	movs	r3, #0
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	e043      	b.n	80068d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800685e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006862:	d118      	bne.n	8006896 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006876:	461a      	mov	r2, r3
 8006878:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e013      	b.n	80068a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	461a      	mov	r2, r3
 800688e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	e008      	b.n	80068a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a2:	461a      	mov	r2, r3
 80068a4:	2300      	movs	r3, #0
 80068a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b4:	461a      	mov	r2, r3
 80068b6:	2300      	movs	r3, #0
 80068b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c6:	461a      	mov	r2, r3
 80068c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	3301      	adds	r3, #1
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d3b7      	bcc.n	800684c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f043 0210 	orr.w	r2, r3, #16
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699a      	ldr	r2, [r3, #24]
 8006914:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <USB_DevInit+0x2c4>)
 8006916:	4313      	orrs	r3, r2
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800691c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f043 0208 	orr.w	r2, r3, #8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800692e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d107      	bne.n	8006944 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800693c:	f043 0304 	orr.w	r3, r3, #4
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006950:	b004      	add	sp, #16
 8006952:	4770      	bx	lr
 8006954:	803c3800 	.word	0x803c3800

08006958 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	019b      	lsls	r3, r3, #6
 800696a:	f043 0220 	orr.w	r2, r3, #32
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3301      	adds	r3, #1
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <USB_FlushTxFifo+0x48>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d901      	bls.n	8006984 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e006      	b.n	8006992 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	2b20      	cmp	r3, #32
 800698e:	d0f0      	beq.n	8006972 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	00030d40 	.word	0x00030d40

080069a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2210      	movs	r2, #16
 80069b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <USB_FlushRxFifo+0x40>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e006      	b.n	80069d6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b10      	cmp	r3, #16
 80069d2:	d0f0      	beq.n	80069b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	00030d40 	.word	0x00030d40

080069e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b087      	sub	sp, #28
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 0306 	and.w	r3, r3, #6
 8006a32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	75fb      	strb	r3, [r7, #23]
 8006a3e:	e00a      	b.n	8006a56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d002      	beq.n	8006a4c <USB_GetDevSpeed+0x32>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b06      	cmp	r3, #6
 8006a4a:	d102      	bne.n	8006a52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	75fb      	strb	r3, [r7, #23]
 8006a50:	e001      	b.n	8006a56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a52:	230f      	movs	r3, #15
 8006a54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d13a      	bne.n	8006af6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	2101      	movs	r1, #1
 8006a92:	fa01 f303 	lsl.w	r3, r1, r3
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	68f9      	ldr	r1, [r7, #12]
 8006a9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d155      	bne.n	8006b64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	78db      	ldrb	r3, [r3, #3]
 8006ad2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ad4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	059b      	lsls	r3, r3, #22
 8006ada:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006adc:	4313      	orrs	r3, r2
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	e036      	b.n	8006b64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afc:	69da      	ldr	r2, [r3, #28]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	2101      	movs	r1, #1
 8006b08:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0c:	041b      	lsls	r3, r3, #16
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b14:	4313      	orrs	r3, r2
 8006b16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d11a      	bne.n	8006b64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	78db      	ldrb	r3, [r3, #3]
 8006b48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
	...

08006b74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d161      	bne.n	8006c54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ba6:	d11f      	bne.n	8006be8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	0151      	lsls	r1, r2, #5
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	440a      	add	r2, r1
 8006bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006be6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	f003 030f 	and.w	r3, r3, #15
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	43db      	mvns	r3, r3
 8006c02:	68f9      	ldr	r1, [r7, #12]
 8006c04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c08:	4013      	ands	r3, r2
 8006c0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c12:	69da      	ldr	r2, [r3, #28]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	43db      	mvns	r3, r3
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	0159      	lsls	r1, r3, #5
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	440b      	add	r3, r1
 8006c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4b35      	ldr	r3, [pc, #212]	; (8006d24 <USB_DeactivateEndpoint+0x1b0>)
 8006c4e:	4013      	ands	r3, r2
 8006c50:	600b      	str	r3, [r1, #0]
 8006c52:	e060      	b.n	8006d16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c6a:	d11f      	bne.n	8006cac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006caa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc2:	041b      	lsls	r3, r3, #16
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	68f9      	ldr	r1, [r7, #12]
 8006cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ccc:	4013      	ands	r3, r2
 8006cce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce6:	041b      	lsls	r3, r3, #16
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	68f9      	ldr	r1, [r7, #12]
 8006cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	0159      	lsls	r1, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	440b      	add	r3, r1
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <USB_DeactivateEndpoint+0x1b4>)
 8006d12:	4013      	ands	r3, r2
 8006d14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	ec337800 	.word	0xec337800
 8006d28:	eff37800 	.word	0xeff37800

08006d2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	785b      	ldrb	r3, [r3, #1]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	f040 815c 	bne.w	8007006 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d132      	bne.n	8006dbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	0151      	lsls	r1, r2, #5
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	440a      	add	r2, r1
 8006d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db4:	0cdb      	lsrs	r3, r3, #19
 8006db6:	04db      	lsls	r3, r3, #19
 8006db8:	6113      	str	r3, [r2, #16]
 8006dba:	e074      	b.n	8006ea6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd6:	0cdb      	lsrs	r3, r3, #19
 8006dd8:	04db      	lsls	r3, r3, #19
 8006dda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	0151      	lsls	r1, r2, #5
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	440a      	add	r2, r1
 8006df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dfa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6959      	ldr	r1, [r3, #20]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	440b      	add	r3, r1
 8006e18:	1e59      	subs	r1, r3, #1
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e22:	04d9      	lsls	r1, r3, #19
 8006e24:	4b9d      	ldr	r3, [pc, #628]	; (800709c <USB_EPStartXfer+0x370>)
 8006e26:	400b      	ands	r3, r1
 8006e28:	69b9      	ldr	r1, [r7, #24]
 8006e2a:	0148      	lsls	r0, r1, #5
 8006e2c:	69f9      	ldr	r1, [r7, #28]
 8006e2e:	4401      	add	r1, r0
 8006e30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e34:	4313      	orrs	r3, r2
 8006e36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e44:	691a      	ldr	r2, [r3, #16]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e4e:	69b9      	ldr	r1, [r7, #24]
 8006e50:	0148      	lsls	r0, r1, #5
 8006e52:	69f9      	ldr	r1, [r7, #28]
 8006e54:	4401      	add	r1, r0
 8006e56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	78db      	ldrb	r3, [r3, #3]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d11f      	bne.n	8006ea6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ea4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d14b      	bne.n	8006f44 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d009      	beq.n	8006ec8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	78db      	ldrb	r3, [r3, #3]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d128      	bne.n	8006f22 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d110      	bne.n	8006f02 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	0151      	lsls	r1, r2, #5
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	e00f      	b.n	8006f22 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	0151      	lsls	r1, r2, #5
 8006f14:	69fa      	ldr	r2, [r7, #28]
 8006f16:	440a      	add	r2, r1
 8006f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	e12f      	b.n	80071a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	78db      	ldrb	r3, [r3, #3]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d015      	beq.n	8006f98 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 8117 	beq.w	80071a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	2101      	movs	r1, #1
 8006f88:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8c:	69f9      	ldr	r1, [r7, #28]
 8006f8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f92:	4313      	orrs	r3, r2
 8006f94:	634b      	str	r3, [r1, #52]	; 0x34
 8006f96:	e105      	b.n	80071a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d110      	bne.n	8006fca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	0151      	lsls	r1, r2, #5
 8006fba:	69fa      	ldr	r2, [r7, #28]
 8006fbc:	440a      	add	r2, r1
 8006fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	e00f      	b.n	8006fea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	0151      	lsls	r1, r2, #5
 8006fdc:	69fa      	ldr	r2, [r7, #28]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	68d9      	ldr	r1, [r3, #12]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	781a      	ldrb	r2, [r3, #0]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	b298      	uxth	r0, r3
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fa2b 	bl	800745a <USB_WritePacket>
 8007004:	e0ce      	b.n	80071a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	0151      	lsls	r1, r2, #5
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	440a      	add	r2, r1
 800701c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007020:	0cdb      	lsrs	r3, r3, #19
 8007022:	04db      	lsls	r3, r3, #19
 8007024:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	0151      	lsls	r1, r2, #5
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	440a      	add	r2, r1
 800703c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007040:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007044:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007048:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d126      	bne.n	80070a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007068:	69b9      	ldr	r1, [r7, #24]
 800706a:	0148      	lsls	r0, r1, #5
 800706c:	69f9      	ldr	r1, [r7, #28]
 800706e:	4401      	add	r1, r0
 8007070:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007074:	4313      	orrs	r3, r2
 8007076:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007096:	6113      	str	r3, [r2, #16]
 8007098:	e036      	b.n	8007108 <USB_EPStartXfer+0x3dc>
 800709a:	bf00      	nop
 800709c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	695a      	ldr	r2, [r3, #20]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4413      	add	r3, r2
 80070aa:	1e5a      	subs	r2, r3, #1
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	8afb      	ldrh	r3, [r7, #22]
 80070c6:	04d9      	lsls	r1, r3, #19
 80070c8:	4b39      	ldr	r3, [pc, #228]	; (80071b0 <USB_EPStartXfer+0x484>)
 80070ca:	400b      	ands	r3, r1
 80070cc:	69b9      	ldr	r1, [r7, #24]
 80070ce:	0148      	lsls	r0, r1, #5
 80070d0:	69f9      	ldr	r1, [r7, #28]
 80070d2:	4401      	add	r1, r0
 80070d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070d8:	4313      	orrs	r3, r2
 80070da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	8af9      	ldrh	r1, [r7, #22]
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f8:	69b9      	ldr	r1, [r7, #24]
 80070fa:	0148      	lsls	r0, r1, #5
 80070fc:	69f9      	ldr	r1, [r7, #28]
 80070fe:	4401      	add	r1, r0
 8007100:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007104:	4313      	orrs	r3, r2
 8007106:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d10d      	bne.n	800712a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d009      	beq.n	800712a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	68d9      	ldr	r1, [r3, #12]
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007126:	460a      	mov	r2, r1
 8007128:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	78db      	ldrb	r3, [r3, #3]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d128      	bne.n	8007184 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713e:	2b00      	cmp	r3, #0
 8007140:	d110      	bne.n	8007164 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	440a      	add	r2, r1
 8007158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	e00f      	b.n	8007184 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800717e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007182:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	0151      	lsls	r1, r2, #5
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	440a      	add	r2, r1
 800719a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800719e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3720      	adds	r7, #32
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	1ff80000 	.word	0x1ff80000

080071b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	4613      	mov	r3, r2
 80071c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	f040 80cd 	bne.w	8007370 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d132      	bne.n	8007244 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	0151      	lsls	r1, r2, #5
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	440a      	add	r2, r1
 80071f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007220:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	0151      	lsls	r1, r2, #5
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	440a      	add	r2, r1
 8007238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800723c:	0cdb      	lsrs	r3, r3, #19
 800723e:	04db      	lsls	r3, r3, #19
 8007240:	6113      	str	r3, [r2, #16]
 8007242:	e04e      	b.n	80072e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	440a      	add	r2, r1
 800725a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725e:	0cdb      	lsrs	r3, r3, #19
 8007260:	04db      	lsls	r3, r3, #19
 8007262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	0151      	lsls	r1, r2, #5
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	440a      	add	r2, r1
 800727a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007282:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007286:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	695a      	ldr	r2, [r3, #20]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	429a      	cmp	r2, r3
 8007292:	d903      	bls.n	800729c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072d2:	6939      	ldr	r1, [r7, #16]
 80072d4:	0148      	lsls	r0, r1, #5
 80072d6:	6979      	ldr	r1, [r7, #20]
 80072d8:	4401      	add	r1, r0
 80072da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072de:	4313      	orrs	r3, r2
 80072e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d11e      	bne.n	8007326 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d009      	beq.n	8007304 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fc:	461a      	mov	r2, r3
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	e092      	b.n	800744c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	440a      	add	r2, r1
 800733c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007340:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007344:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d07e      	beq.n	800744c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	2101      	movs	r1, #1
 8007360:	fa01 f303 	lsl.w	r3, r1, r3
 8007364:	6979      	ldr	r1, [r7, #20]
 8007366:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800736a:	4313      	orrs	r3, r2
 800736c:	634b      	str	r3, [r1, #52]	; 0x34
 800736e:	e06d      	b.n	800744c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	0151      	lsls	r1, r2, #5
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	440a      	add	r2, r1
 8007386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738a:	0cdb      	lsrs	r3, r3, #19
 800738c:	04db      	lsls	r3, r3, #19
 800738e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	0151      	lsls	r1, r2, #5
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	440a      	add	r2, r1
 80073a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073fa:	6939      	ldr	r1, [r7, #16]
 80073fc:	0148      	lsls	r0, r1, #5
 80073fe:	6979      	ldr	r1, [r7, #20]
 8007400:	4401      	add	r1, r0
 8007402:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007406:	4313      	orrs	r3, r2
 8007408:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d10d      	bne.n	800742c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d009      	beq.n	800742c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	68d9      	ldr	r1, [r3, #12]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007428:	460a      	mov	r2, r1
 800742a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	0151      	lsls	r1, r2, #5
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	440a      	add	r2, r1
 8007442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007446:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800744a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800745a:	b480      	push	{r7}
 800745c:	b089      	sub	sp, #36	; 0x24
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	4611      	mov	r1, r2
 8007466:	461a      	mov	r2, r3
 8007468:	460b      	mov	r3, r1
 800746a:	71fb      	strb	r3, [r7, #7]
 800746c:	4613      	mov	r3, r2
 800746e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007478:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800747c:	2b00      	cmp	r3, #0
 800747e:	d11a      	bne.n	80074b6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007480:	88bb      	ldrh	r3, [r7, #4]
 8007482:	3303      	adds	r3, #3
 8007484:	089b      	lsrs	r3, r3, #2
 8007486:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007488:	2300      	movs	r3, #0
 800748a:	61bb      	str	r3, [r7, #24]
 800748c:	e00f      	b.n	80074ae <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	031a      	lsls	r2, r3, #12
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	4413      	add	r3, r2
 8007496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749a:	461a      	mov	r2, r3
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	3304      	adds	r3, #4
 80074a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	3301      	adds	r3, #1
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d3eb      	bcc.n	800748e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3724      	adds	r7, #36	; 0x24
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b089      	sub	sp, #36	; 0x24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	3303      	adds	r3, #3
 80074de:	089b      	lsrs	r3, r3, #2
 80074e0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80074e2:	2300      	movs	r3, #0
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	e00b      	b.n	8007500 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	3304      	adds	r3, #4
 80074f8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	3301      	adds	r3, #1
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	429a      	cmp	r2, r3
 8007506:	d3ef      	bcc.n	80074e8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007508:	69fb      	ldr	r3, [r7, #28]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3724      	adds	r7, #36	; 0x24
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	785b      	ldrb	r3, [r3, #1]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d12c      	bne.n	800758c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	db12      	blt.n	800756a <USB_EPSetStall+0x54>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00f      	beq.n	800756a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	0151      	lsls	r1, r2, #5
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	440a      	add	r2, r1
 8007560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007564:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007568:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	440a      	add	r2, r1
 8007580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	e02b      	b.n	80075e4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	db12      	blt.n	80075c4 <USB_EPSetStall+0xae>
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00f      	beq.n	80075c4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	0151      	lsls	r1, r2, #5
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	440a      	add	r2, r1
 80075ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075c2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d128      	bne.n	8007660 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	440a      	add	r2, r1
 8007624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007628:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800762c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	78db      	ldrb	r3, [r3, #3]
 8007632:	2b03      	cmp	r3, #3
 8007634:	d003      	beq.n	800763e <USB_EPClearStall+0x4c>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	78db      	ldrb	r3, [r3, #3]
 800763a:	2b02      	cmp	r3, #2
 800763c:	d138      	bne.n	80076b0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	0151      	lsls	r1, r2, #5
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	440a      	add	r2, r1
 8007654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	e027      	b.n	80076b0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	0151      	lsls	r1, r2, #5
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	440a      	add	r2, r1
 8007676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800767a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800767e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	78db      	ldrb	r3, [r3, #3]
 8007684:	2b03      	cmp	r3, #3
 8007686:	d003      	beq.n	8007690 <USB_EPClearStall+0x9e>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	78db      	ldrb	r3, [r3, #3]
 800768c:	2b02      	cmp	r3, #2
 800768e:	d10f      	bne.n	80076b0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	0151      	lsls	r1, r2, #5
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	440a      	add	r2, r1
 80076a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	460b      	mov	r3, r1
 80076c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076e0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	78fb      	ldrb	r3, [r7, #3]
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80076f2:	68f9      	ldr	r1, [r7, #12]
 80076f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076f8:	4313      	orrs	r3, r2
 80076fa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800770a:	b480      	push	{r7}
 800770c:	b085      	sub	sp, #20
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007724:	f023 0303 	bic.w	r3, r3, #3
 8007728:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007738:	f023 0302 	bic.w	r3, r3, #2
 800773c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007766:	f023 0303 	bic.w	r3, r3, #3
 800776a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800777a:	f043 0302 	orr.w	r3, r3, #2
 800777e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4013      	ands	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077a6:	68fb      	ldr	r3, [r7, #12]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	4013      	ands	r3, r2
 80077d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	0c1b      	lsrs	r3, r3, #16
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	4013      	ands	r3, r2
 800780a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	b29b      	uxth	r3, r3
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	4013      	ands	r3, r2
 8007848:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800784a:	68bb      	ldr	r3, [r7, #8]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	fa22 f303 	lsr.w	r3, r2, r3
 8007888:	01db      	lsls	r3, r3, #7
 800788a:	b2db      	uxtb	r3, r3
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	4313      	orrs	r3, r2
 8007890:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4013      	ands	r3, r2
 80078a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078a6:	68bb      	ldr	r3, [r7, #8]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	371c      	adds	r7, #28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	f003 0301 	and.w	r3, r3, #1
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078ee:	f023 0307 	bic.w	r3, r3, #7
 80078f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007906:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
	...

08007918 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	460b      	mov	r3, r1
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	333c      	adds	r3, #60	; 0x3c
 800792e:	3304      	adds	r3, #4
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	4a26      	ldr	r2, [pc, #152]	; (80079d0 <USB_EP0_OutStart+0xb8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d90a      	bls.n	8007952 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800794c:	d101      	bne.n	8007952 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	e037      	b.n	80079c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007958:	461a      	mov	r2, r3
 800795a:	2300      	movs	r3, #0
 800795c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800796c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007970:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007980:	f043 0318 	orr.w	r3, r3, #24
 8007984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007994:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007998:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800799a:	7afb      	ldrb	r3, [r7, #11]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d10f      	bne.n	80079c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80079be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	371c      	adds	r7, #28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	4f54300a 	.word	0x4f54300a

080079d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4a13      	ldr	r2, [pc, #76]	; (8007a38 <USB_CoreReset+0x64>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d901      	bls.n	80079f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e01b      	b.n	8007a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	daf2      	bge.n	80079e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f043 0201 	orr.w	r2, r3, #1
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4a09      	ldr	r2, [pc, #36]	; (8007a38 <USB_CoreReset+0x64>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d901      	bls.n	8007a1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e006      	b.n	8007a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d0f0      	beq.n	8007a0a <USB_CoreReset+0x36>

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	00030d40 	.word	0x00030d40

08007a3c <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 8007a48:	2044      	movs	r0, #68	; 0x44
 8007a4a:	f001 fead 	bl	80097a8 <USBD_static_malloc>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e016      	b.n	8007a92 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 8007a6c:	2340      	movs	r3, #64	; 0x40
 8007a6e:	2202      	movs	r2, #2
 8007a70:	2181      	movs	r1, #129	; 0x81
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fd75 	bl	8009562 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 8007a78:	2340      	movs	r3, #64	; 0x40
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 fd6f 	bl	8009562 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8007a84:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 8007a86:	2340      	movs	r3, #64	; 0x40
 8007a88:	2101      	movs	r1, #1
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 fe58 	bl	8009740 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007a90:	2300      	movs	r3, #0
  }
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 8007aa6:	2181      	movs	r1, #129	; 0x81
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 fd80 	bl	80095ae <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 8007aae:	2101      	movs	r1, #1
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 fd7c 	bl	80095ae <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d007      	beq.n	8007ae6 <USBD_Midi_Setup+0x26>
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d10b      	bne.n	8007af2 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 f937 	bl	8008d50 <USBD_CtlError>
      return USBD_FAIL;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e006      	b.n	8007af4 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 f931 	bl	8008d50 <USBD_CtlError>
      return USBD_FAIL;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e000      	b.n	8007af4 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2265      	movs	r2, #101	; 0x65
 8007b08:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 8007b0a:	4b03      	ldr	r3, [pc, #12]	; (8007b18 <USBD_Midi_GetCfgDesc+0x1c>)
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	2000008c 	.word	0x2000008c

08007b1c <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b083      	sub	sp, #12
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bbe:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 fddc 	bl	8009782 <USBD_LL_GetRxDataSize>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	e00c      	b.n	8007bf4 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68f9      	ldr	r1, [r7, #12]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	440a      	add	r2, r1
 8007be8:	2104      	movs	r1, #4
 8007bea:	4610      	mov	r0, r2
 8007bec:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d3ed      	bcc.n	8007bda <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 8007bfe:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 8007c00:	2340      	movs	r3, #64	; 0x40
 8007c02:	2101      	movs	r1, #1
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 fd9b 	bl	8009740 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	220a      	movs	r2, #10
 8007c20:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 8007c22:	4b03      	ldr	r3, [pc, #12]	; (8007c30 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	200000f4 	.word	0x200000f4

08007c34 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b086      	sub	sp, #24
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e01f      	b.n	8007cba <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	79fa      	ldrb	r2, [r7, #7]
 8007cac:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f001 fbf0 	bl	8009494 <USBD_LL_Init>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e016      	b.n	8007d08 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00b      	beq.n	8007d06 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf6:	f107 020e 	add.w	r2, r7, #14
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4798      	blx	r3
 8007cfe:	4602      	mov	r2, r0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 fc07 	bl	800952c <USBD_LL_Start>
 8007d1e:	4603      	mov	r3, r0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	460b      	mov	r3, r1
 8007d48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d009      	beq.n	8007d6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	78fa      	ldrb	r2, [r7, #3]
 8007d62:	4611      	mov	r1, r2
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	78fa      	ldrb	r2, [r7, #3]
 8007d96:	4611      	mov	r1, r2
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	4798      	blx	r3
  }

  return USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 ff8f 	bl	8008cdc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007dcc:	461a      	mov	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007dda:	f003 031f 	and.w	r3, r3, #31
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d01a      	beq.n	8007e18 <USBD_LL_SetupStage+0x72>
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d822      	bhi.n	8007e2c <USBD_LL_SetupStage+0x86>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <USBD_LL_SetupStage+0x4a>
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d00a      	beq.n	8007e04 <USBD_LL_SetupStage+0x5e>
 8007dee:	e01d      	b.n	8007e2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fa61 	bl	80082c0 <USBD_StdDevReq>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73fb      	strb	r3, [r7, #15]
      break;
 8007e02:	e020      	b.n	8007e46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fac5 	bl	800839c <USBD_StdItfReq>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]
      break;
 8007e16:	e016      	b.n	8007e46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fb04 	bl	800842e <USBD_StdEPReq>
 8007e26:	4603      	mov	r3, r0
 8007e28:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2a:	e00c      	b.n	8007e46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f001 fbd6 	bl	80095ec <USBD_LL_StallEP>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
      break;
 8007e44:	bf00      	nop
  }

  return ret;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e5e:	7afb      	ldrb	r3, [r7, #11]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d138      	bne.n	8007ed6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d14a      	bne.n	8007f0c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	689a      	ldr	r2, [r3, #8]
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d913      	bls.n	8007eaa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	1ad2      	subs	r2, r2, r3
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	68da      	ldr	r2, [r3, #12]
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	bf28      	it	cs
 8007e9c:	4613      	movcs	r3, r2
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fff1 	bl	8008e8a <USBD_CtlContinueRx>
 8007ea8:	e030      	b.n	8007f0c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d10b      	bne.n	8007ece <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 ffec 	bl	8008eac <USBD_CtlSendStatus>
 8007ed4:	e01a      	b.n	8007f0c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d114      	bne.n	8007f0c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00e      	beq.n	8007f0c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	7afa      	ldrb	r2, [r7, #11]
 8007ef8:	4611      	mov	r1, r2
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	4798      	blx	r3
 8007efe:	4603      	mov	r3, r0
 8007f00:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
 8007f0a:	e000      	b.n	8007f0e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b086      	sub	sp, #24
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	607a      	str	r2, [r7, #4]
 8007f22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f24:	7afb      	ldrb	r3, [r7, #11]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d16b      	bne.n	8008002 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3314      	adds	r3, #20
 8007f2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d156      	bne.n	8007fe8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	689a      	ldr	r2, [r3, #8]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d914      	bls.n	8007f70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	689a      	ldr	r2, [r3, #8]
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 ff83 	bl	8008e68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f62:	2300      	movs	r3, #0
 8007f64:	2200      	movs	r2, #0
 8007f66:	2100      	movs	r1, #0
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f001 fbe9 	bl	8009740 <USBD_LL_PrepareReceive>
 8007f6e:	e03b      	b.n	8007fe8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d11c      	bne.n	8007fb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d316      	bcc.n	8007fb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d20f      	bcs.n	8007fb6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f96:	2200      	movs	r2, #0
 8007f98:	2100      	movs	r1, #0
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 ff64 	bl	8008e68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fa8:	2300      	movs	r3, #0
 8007faa:	2200      	movs	r2, #0
 8007fac:	2100      	movs	r1, #0
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f001 fbc6 	bl	8009740 <USBD_LL_PrepareReceive>
 8007fb4:	e018      	b.n	8007fe8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d10b      	bne.n	8007fda <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fda:	2180      	movs	r1, #128	; 0x80
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f001 fb05 	bl	80095ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 ff75 	bl	8008ed2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d122      	bne.n	8008038 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f7ff fe98 	bl	8007d28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008000:	e01a      	b.n	8008038 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b03      	cmp	r3, #3
 800800c:	d114      	bne.n	8008038 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00e      	beq.n	8008038 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	7afa      	ldrb	r2, [r7, #11]
 8008024:	4611      	mov	r1, r2
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	4798      	blx	r3
 800802a:	4603      	mov	r3, r0
 800802c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	e000      	b.n	800803a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008072:	2303      	movs	r3, #3
 8008074:	e02f      	b.n	80080d6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00f      	beq.n	80080a0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d009      	beq.n	80080a0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6852      	ldr	r2, [r2, #4]
 8008098:	b2d2      	uxtb	r2, r2
 800809a:	4611      	mov	r1, r2
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080a0:	2340      	movs	r3, #64	; 0x40
 80080a2:	2200      	movs	r2, #0
 80080a4:	2100      	movs	r1, #0
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f001 fa5b 	bl	8009562 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2240      	movs	r2, #64	; 0x40
 80080b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080bc:	2340      	movs	r3, #64	; 0x40
 80080be:	2200      	movs	r2, #0
 80080c0:	2180      	movs	r1, #128	; 0x80
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 fa4d 	bl	8009562 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2240      	movs	r2, #64	; 0x40
 80080d2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810c:	b2da      	uxtb	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2204      	movs	r2, #4
 8008118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b04      	cmp	r3, #4
 800813c:	d106      	bne.n	800814c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008144:	b2da      	uxtb	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800816c:	2303      	movs	r3, #3
 800816e:	e012      	b.n	8008196 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b03      	cmp	r3, #3
 800817a:	d10b      	bne.n	8008194 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e014      	b.n	80081e2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d10d      	bne.n	80081e0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d007      	beq.n	80081e0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	78fa      	ldrb	r2, [r7, #3]
 80081da:	4611      	mov	r1, r2
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008200:	2303      	movs	r3, #3
 8008202:	e014      	b.n	800822e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b03      	cmp	r3, #3
 800820e:	d10d      	bne.n	800822c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	2b00      	cmp	r3, #0
 800821a:	d007      	beq.n	800822c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	4611      	mov	r1, r2
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d009      	beq.n	800827a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	6852      	ldr	r2, [r2, #4]
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	4611      	mov	r1, r2
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	4798      	blx	r3
  }

  return USBD_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	3301      	adds	r3, #1
 800829a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082a2:	8a3b      	ldrh	r3, [r7, #16]
 80082a4:	021b      	lsls	r3, r3, #8
 80082a6:	b21a      	sxth	r2, r3
 80082a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	b21b      	sxth	r3, r3
 80082b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082b2:	89fb      	ldrh	r3, [r7, #14]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082d6:	2b40      	cmp	r3, #64	; 0x40
 80082d8:	d005      	beq.n	80082e6 <USBD_StdDevReq+0x26>
 80082da:	2b40      	cmp	r3, #64	; 0x40
 80082dc:	d853      	bhi.n	8008386 <USBD_StdDevReq+0xc6>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00b      	beq.n	80082fa <USBD_StdDevReq+0x3a>
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d14f      	bne.n	8008386 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
      break;
 80082f8:	e04a      	b.n	8008390 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	785b      	ldrb	r3, [r3, #1]
 80082fe:	2b09      	cmp	r3, #9
 8008300:	d83b      	bhi.n	800837a <USBD_StdDevReq+0xba>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <USBD_StdDevReq+0x48>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	0800835d 	.word	0x0800835d
 800830c:	08008371 	.word	0x08008371
 8008310:	0800837b 	.word	0x0800837b
 8008314:	08008367 	.word	0x08008367
 8008318:	0800837b 	.word	0x0800837b
 800831c:	0800833b 	.word	0x0800833b
 8008320:	08008331 	.word	0x08008331
 8008324:	0800837b 	.word	0x0800837b
 8008328:	08008353 	.word	0x08008353
 800832c:	08008345 	.word	0x08008345
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9de 	bl	80086f4 <USBD_GetDescriptor>
          break;
 8008338:	e024      	b.n	8008384 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fb43 	bl	80089c8 <USBD_SetAddress>
          break;
 8008342:	e01f      	b.n	8008384 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fb82 	bl	8008a50 <USBD_SetConfig>
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]
          break;
 8008350:	e018      	b.n	8008384 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fc21 	bl	8008b9c <USBD_GetConfig>
          break;
 800835a:	e013      	b.n	8008384 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fc52 	bl	8008c08 <USBD_GetStatus>
          break;
 8008364:	e00e      	b.n	8008384 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fc81 	bl	8008c70 <USBD_SetFeature>
          break;
 800836e:	e009      	b.n	8008384 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fc90 	bl	8008c98 <USBD_ClrFeature>
          break;
 8008378:	e004      	b.n	8008384 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fce7 	bl	8008d50 <USBD_CtlError>
          break;
 8008382:	bf00      	nop
      }
      break;
 8008384:	e004      	b.n	8008390 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fce1 	bl	8008d50 <USBD_CtlError>
      break;
 800838e:	bf00      	nop
  }

  return ret;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop

0800839c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	d005      	beq.n	80083c2 <USBD_StdItfReq+0x26>
 80083b6:	2b40      	cmp	r3, #64	; 0x40
 80083b8:	d82f      	bhi.n	800841a <USBD_StdItfReq+0x7e>
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <USBD_StdItfReq+0x26>
 80083be:	2b20      	cmp	r3, #32
 80083c0:	d12b      	bne.n	800841a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d81d      	bhi.n	800840c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	889b      	ldrh	r3, [r3, #4]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d813      	bhi.n	8008402 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	4798      	blx	r3
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	88db      	ldrh	r3, [r3, #6]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d110      	bne.n	8008416 <USBD_StdItfReq+0x7a>
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10d      	bne.n	8008416 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fd56 	bl	8008eac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008400:	e009      	b.n	8008416 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fca3 	bl	8008d50 <USBD_CtlError>
          break;
 800840a:	e004      	b.n	8008416 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fc9e 	bl	8008d50 <USBD_CtlError>
          break;
 8008414:	e000      	b.n	8008418 <USBD_StdItfReq+0x7c>
          break;
 8008416:	bf00      	nop
      }
      break;
 8008418:	e004      	b.n	8008424 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fc97 	bl	8008d50 <USBD_CtlError>
      break;
 8008422:	bf00      	nop
  }

  return ret;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	889b      	ldrh	r3, [r3, #4]
 8008440:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800844a:	2b40      	cmp	r3, #64	; 0x40
 800844c:	d007      	beq.n	800845e <USBD_StdEPReq+0x30>
 800844e:	2b40      	cmp	r3, #64	; 0x40
 8008450:	f200 8145 	bhi.w	80086de <USBD_StdEPReq+0x2b0>
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00c      	beq.n	8008472 <USBD_StdEPReq+0x44>
 8008458:	2b20      	cmp	r3, #32
 800845a:	f040 8140 	bne.w	80086de <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	4798      	blx	r3
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
      break;
 8008470:	e13a      	b.n	80086e8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b03      	cmp	r3, #3
 8008478:	d007      	beq.n	800848a <USBD_StdEPReq+0x5c>
 800847a:	2b03      	cmp	r3, #3
 800847c:	f300 8129 	bgt.w	80086d2 <USBD_StdEPReq+0x2a4>
 8008480:	2b00      	cmp	r3, #0
 8008482:	d07f      	beq.n	8008584 <USBD_StdEPReq+0x156>
 8008484:	2b01      	cmp	r3, #1
 8008486:	d03c      	beq.n	8008502 <USBD_StdEPReq+0xd4>
 8008488:	e123      	b.n	80086d2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b02      	cmp	r3, #2
 8008494:	d002      	beq.n	800849c <USBD_StdEPReq+0x6e>
 8008496:	2b03      	cmp	r3, #3
 8008498:	d016      	beq.n	80084c8 <USBD_StdEPReq+0x9a>
 800849a:	e02c      	b.n	80084f6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00d      	beq.n	80084be <USBD_StdEPReq+0x90>
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	2b80      	cmp	r3, #128	; 0x80
 80084a6:	d00a      	beq.n	80084be <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 f89d 	bl	80095ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084b2:	2180      	movs	r1, #128	; 0x80
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 f899 	bl	80095ec <USBD_LL_StallEP>
 80084ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084bc:	e020      	b.n	8008500 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fc45 	bl	8008d50 <USBD_CtlError>
              break;
 80084c6:	e01b      	b.n	8008500 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	885b      	ldrh	r3, [r3, #2]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10e      	bne.n	80084ee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <USBD_StdEPReq+0xc0>
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b80      	cmp	r3, #128	; 0x80
 80084da:	d008      	beq.n	80084ee <USBD_StdEPReq+0xc0>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	88db      	ldrh	r3, [r3, #6]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d104      	bne.n	80084ee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f001 f87f 	bl	80095ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fcdc 	bl	8008eac <USBD_CtlSendStatus>

              break;
 80084f4:	e004      	b.n	8008500 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fc29 	bl	8008d50 <USBD_CtlError>
              break;
 80084fe:	bf00      	nop
          }
          break;
 8008500:	e0ec      	b.n	80086dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d002      	beq.n	8008514 <USBD_StdEPReq+0xe6>
 800850e:	2b03      	cmp	r3, #3
 8008510:	d016      	beq.n	8008540 <USBD_StdEPReq+0x112>
 8008512:	e030      	b.n	8008576 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00d      	beq.n	8008536 <USBD_StdEPReq+0x108>
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	2b80      	cmp	r3, #128	; 0x80
 800851e:	d00a      	beq.n	8008536 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 f861 	bl	80095ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800852a:	2180      	movs	r1, #128	; 0x80
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 f85d 	bl	80095ec <USBD_LL_StallEP>
 8008532:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008534:	e025      	b.n	8008582 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fc09 	bl	8008d50 <USBD_CtlError>
              break;
 800853e:	e020      	b.n	8008582 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	885b      	ldrh	r3, [r3, #2]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11b      	bne.n	8008580 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800854e:	2b00      	cmp	r3, #0
 8008550:	d004      	beq.n	800855c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f001 f867 	bl	800962a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fca5 	bl	8008eac <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4798      	blx	r3
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008574:	e004      	b.n	8008580 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fbe9 	bl	8008d50 <USBD_CtlError>
              break;
 800857e:	e000      	b.n	8008582 <USBD_StdEPReq+0x154>
              break;
 8008580:	bf00      	nop
          }
          break;
 8008582:	e0ab      	b.n	80086dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b02      	cmp	r3, #2
 800858e:	d002      	beq.n	8008596 <USBD_StdEPReq+0x168>
 8008590:	2b03      	cmp	r3, #3
 8008592:	d032      	beq.n	80085fa <USBD_StdEPReq+0x1cc>
 8008594:	e097      	b.n	80086c6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008596:	7bbb      	ldrb	r3, [r7, #14]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d007      	beq.n	80085ac <USBD_StdEPReq+0x17e>
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b80      	cmp	r3, #128	; 0x80
 80085a0:	d004      	beq.n	80085ac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fbd3 	bl	8008d50 <USBD_CtlError>
                break;
 80085aa:	e091      	b.n	80086d0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	da0b      	bge.n	80085cc <USBD_StdEPReq+0x19e>
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	3310      	adds	r3, #16
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	4413      	add	r3, r2
 80085c8:	3304      	adds	r3, #4
 80085ca:	e00b      	b.n	80085e4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	4413      	add	r3, r2
 80085e2:	3304      	adds	r3, #4
 80085e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2202      	movs	r2, #2
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fc1d 	bl	8008e32 <USBD_CtlSendData>
              break;
 80085f8:	e06a      	b.n	80086d0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	da11      	bge.n	8008626 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	f003 020f 	and.w	r2, r3, #15
 8008608:	6879      	ldr	r1, [r7, #4]
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	440b      	add	r3, r1
 8008614:	3324      	adds	r3, #36	; 0x24
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d117      	bne.n	800864c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fb96 	bl	8008d50 <USBD_CtlError>
                  break;
 8008624:	e054      	b.n	80086d0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	f003 020f 	and.w	r2, r3, #15
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	440b      	add	r3, r1
 8008638:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fb83 	bl	8008d50 <USBD_CtlError>
                  break;
 800864a:	e041      	b.n	80086d0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800864c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008650:	2b00      	cmp	r3, #0
 8008652:	da0b      	bge.n	800866c <USBD_StdEPReq+0x23e>
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	3310      	adds	r3, #16
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	4413      	add	r3, r2
 8008668:	3304      	adds	r3, #4
 800866a:	e00b      	b.n	8008684 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	4413      	add	r3, r2
 8008682:	3304      	adds	r3, #4
 8008684:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <USBD_StdEPReq+0x264>
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b80      	cmp	r3, #128	; 0x80
 8008690:	d103      	bne.n	800869a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	e00e      	b.n	80086b8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 ffe2 	bl	8009668 <USBD_LL_IsStallEP>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d003      	beq.n	80086b2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2201      	movs	r2, #1
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	e002      	b.n	80086b8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2202      	movs	r2, #2
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fbb7 	bl	8008e32 <USBD_CtlSendData>
              break;
 80086c4:	e004      	b.n	80086d0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fb41 	bl	8008d50 <USBD_CtlError>
              break;
 80086ce:	bf00      	nop
          }
          break;
 80086d0:	e004      	b.n	80086dc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fb3b 	bl	8008d50 <USBD_CtlError>
          break;
 80086da:	bf00      	nop
      }
      break;
 80086dc:	e004      	b.n	80086e8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fb35 	bl	8008d50 <USBD_CtlError>
      break;
 80086e6:	bf00      	nop
  }

  return ret;
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008702:	2300      	movs	r3, #0
 8008704:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	885b      	ldrh	r3, [r3, #2]
 800870e:	0a1b      	lsrs	r3, r3, #8
 8008710:	b29b      	uxth	r3, r3
 8008712:	3b01      	subs	r3, #1
 8008714:	2b06      	cmp	r3, #6
 8008716:	f200 8128 	bhi.w	800896a <USBD_GetDescriptor+0x276>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <USBD_GetDescriptor+0x2c>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	0800873d 	.word	0x0800873d
 8008724:	08008755 	.word	0x08008755
 8008728:	08008795 	.word	0x08008795
 800872c:	0800896b 	.word	0x0800896b
 8008730:	0800896b 	.word	0x0800896b
 8008734:	0800890b 	.word	0x0800890b
 8008738:	08008937 	.word	0x08008937
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	7c12      	ldrb	r2, [r2, #16]
 8008748:	f107 0108 	add.w	r1, r7, #8
 800874c:	4610      	mov	r0, r2
 800874e:	4798      	blx	r3
 8008750:	60f8      	str	r0, [r7, #12]
      break;
 8008752:	e112      	b.n	800897a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	7c1b      	ldrb	r3, [r3, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10d      	bne.n	8008778 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008764:	f107 0208 	add.w	r2, r7, #8
 8008768:	4610      	mov	r0, r2
 800876a:	4798      	blx	r3
 800876c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3301      	adds	r3, #1
 8008772:	2202      	movs	r2, #2
 8008774:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008776:	e100      	b.n	800897a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008780:	f107 0208 	add.w	r2, r7, #8
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
 8008788:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3301      	adds	r3, #1
 800878e:	2202      	movs	r2, #2
 8008790:	701a      	strb	r2, [r3, #0]
      break;
 8008792:	e0f2      	b.n	800897a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	885b      	ldrh	r3, [r3, #2]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b05      	cmp	r3, #5
 800879c:	f200 80ac 	bhi.w	80088f8 <USBD_GetDescriptor+0x204>
 80087a0:	a201      	add	r2, pc, #4	; (adr r2, 80087a8 <USBD_GetDescriptor+0xb4>)
 80087a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a6:	bf00      	nop
 80087a8:	080087c1 	.word	0x080087c1
 80087ac:	080087f5 	.word	0x080087f5
 80087b0:	08008829 	.word	0x08008829
 80087b4:	0800885d 	.word	0x0800885d
 80087b8:	08008891 	.word	0x08008891
 80087bc:	080088c5 	.word	0x080088c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00b      	beq.n	80087e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	7c12      	ldrb	r2, [r2, #16]
 80087d8:	f107 0108 	add.w	r1, r7, #8
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
 80087e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087e2:	e091      	b.n	8008908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fab2 	bl	8008d50 <USBD_CtlError>
            err++;
 80087ec:	7afb      	ldrb	r3, [r7, #11]
 80087ee:	3301      	adds	r3, #1
 80087f0:	72fb      	strb	r3, [r7, #11]
          break;
 80087f2:	e089      	b.n	8008908 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	7c12      	ldrb	r2, [r2, #16]
 800880c:	f107 0108 	add.w	r1, r7, #8
 8008810:	4610      	mov	r0, r2
 8008812:	4798      	blx	r3
 8008814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008816:	e077      	b.n	8008908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fa98 	bl	8008d50 <USBD_CtlError>
            err++;
 8008820:	7afb      	ldrb	r3, [r7, #11]
 8008822:	3301      	adds	r3, #1
 8008824:	72fb      	strb	r3, [r7, #11]
          break;
 8008826:	e06f      	b.n	8008908 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	7c12      	ldrb	r2, [r2, #16]
 8008840:	f107 0108 	add.w	r1, r7, #8
 8008844:	4610      	mov	r0, r2
 8008846:	4798      	blx	r3
 8008848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800884a:	e05d      	b.n	8008908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fa7e 	bl	8008d50 <USBD_CtlError>
            err++;
 8008854:	7afb      	ldrb	r3, [r7, #11]
 8008856:	3301      	adds	r3, #1
 8008858:	72fb      	strb	r3, [r7, #11]
          break;
 800885a:	e055      	b.n	8008908 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00b      	beq.n	8008880 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	7c12      	ldrb	r2, [r2, #16]
 8008874:	f107 0108 	add.w	r1, r7, #8
 8008878:	4610      	mov	r0, r2
 800887a:	4798      	blx	r3
 800887c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800887e:	e043      	b.n	8008908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa64 	bl	8008d50 <USBD_CtlError>
            err++;
 8008888:	7afb      	ldrb	r3, [r7, #11]
 800888a:	3301      	adds	r3, #1
 800888c:	72fb      	strb	r3, [r7, #11]
          break;
 800888e:	e03b      	b.n	8008908 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	7c12      	ldrb	r2, [r2, #16]
 80088a8:	f107 0108 	add.w	r1, r7, #8
 80088ac:	4610      	mov	r0, r2
 80088ae:	4798      	blx	r3
 80088b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088b2:	e029      	b.n	8008908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fa4a 	bl	8008d50 <USBD_CtlError>
            err++;
 80088bc:	7afb      	ldrb	r3, [r7, #11]
 80088be:	3301      	adds	r3, #1
 80088c0:	72fb      	strb	r3, [r7, #11]
          break;
 80088c2:	e021      	b.n	8008908 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00b      	beq.n	80088e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	7c12      	ldrb	r2, [r2, #16]
 80088dc:	f107 0108 	add.w	r1, r7, #8
 80088e0:	4610      	mov	r0, r2
 80088e2:	4798      	blx	r3
 80088e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088e6:	e00f      	b.n	8008908 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa30 	bl	8008d50 <USBD_CtlError>
            err++;
 80088f0:	7afb      	ldrb	r3, [r7, #11]
 80088f2:	3301      	adds	r3, #1
 80088f4:	72fb      	strb	r3, [r7, #11]
          break;
 80088f6:	e007      	b.n	8008908 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fa28 	bl	8008d50 <USBD_CtlError>
          err++;
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	3301      	adds	r3, #1
 8008904:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008906:	bf00      	nop
      }
      break;
 8008908:	e037      	b.n	800897a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	7c1b      	ldrb	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d109      	bne.n	8008926 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891a:	f107 0208 	add.w	r2, r7, #8
 800891e:	4610      	mov	r0, r2
 8008920:	4798      	blx	r3
 8008922:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008924:	e029      	b.n	800897a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fa11 	bl	8008d50 <USBD_CtlError>
        err++;
 800892e:	7afb      	ldrb	r3, [r7, #11]
 8008930:	3301      	adds	r3, #1
 8008932:	72fb      	strb	r3, [r7, #11]
      break;
 8008934:	e021      	b.n	800897a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	7c1b      	ldrb	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10d      	bne.n	800895a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	f107 0208 	add.w	r2, r7, #8
 800894a:	4610      	mov	r0, r2
 800894c:	4798      	blx	r3
 800894e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3301      	adds	r3, #1
 8008954:	2207      	movs	r2, #7
 8008956:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008958:	e00f      	b.n	800897a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f9f7 	bl	8008d50 <USBD_CtlError>
        err++;
 8008962:	7afb      	ldrb	r3, [r7, #11]
 8008964:	3301      	adds	r3, #1
 8008966:	72fb      	strb	r3, [r7, #11]
      break;
 8008968:	e007      	b.n	800897a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f9ef 	bl	8008d50 <USBD_CtlError>
      err++;
 8008972:	7afb      	ldrb	r3, [r7, #11]
 8008974:	3301      	adds	r3, #1
 8008976:	72fb      	strb	r3, [r7, #11]
      break;
 8008978:	bf00      	nop
  }

  if (err != 0U)
 800897a:	7afb      	ldrb	r3, [r7, #11]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d11e      	bne.n	80089be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	88db      	ldrh	r3, [r3, #6]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d016      	beq.n	80089b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008988:	893b      	ldrh	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00e      	beq.n	80089ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	88da      	ldrh	r2, [r3, #6]
 8008992:	893b      	ldrh	r3, [r7, #8]
 8008994:	4293      	cmp	r3, r2
 8008996:	bf28      	it	cs
 8008998:	4613      	movcs	r3, r2
 800899a:	b29b      	uxth	r3, r3
 800899c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800899e:	893b      	ldrh	r3, [r7, #8]
 80089a0:	461a      	mov	r2, r3
 80089a2:	68f9      	ldr	r1, [r7, #12]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fa44 	bl	8008e32 <USBD_CtlSendData>
 80089aa:	e009      	b.n	80089c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f9ce 	bl	8008d50 <USBD_CtlError>
 80089b4:	e004      	b.n	80089c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa78 	bl	8008eac <USBD_CtlSendStatus>
 80089bc:	e000      	b.n	80089c0 <USBD_GetDescriptor+0x2cc>
    return;
 80089be:	bf00      	nop
  }
}
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop

080089c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	889b      	ldrh	r3, [r3, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d131      	bne.n	8008a3e <USBD_SetAddress+0x76>
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	88db      	ldrh	r3, [r3, #6]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d12d      	bne.n	8008a3e <USBD_SetAddress+0x76>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	885b      	ldrh	r3, [r3, #2]
 80089e6:	2b7f      	cmp	r3, #127	; 0x7f
 80089e8:	d829      	bhi.n	8008a3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	885b      	ldrh	r3, [r3, #2]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d104      	bne.n	8008a0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f9a3 	bl	8008d50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a0a:	e01d      	b.n	8008a48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7bfa      	ldrb	r2, [r7, #15]
 8008a10:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fe51 	bl	80096c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa44 	bl	8008eac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d004      	beq.n	8008a34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a32:	e009      	b.n	8008a48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a3c:	e004      	b.n	8008a48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f985 	bl	8008d50 <USBD_CtlError>
  }
}
 8008a46:	bf00      	nop
 8008a48:	bf00      	nop
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	885b      	ldrh	r3, [r3, #2]
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	4b4c      	ldr	r3, [pc, #304]	; (8008b98 <USBD_SetConfig+0x148>)
 8008a66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a68:	4b4b      	ldr	r3, [pc, #300]	; (8008b98 <USBD_SetConfig+0x148>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d905      	bls.n	8008a7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f96c 	bl	8008d50 <USBD_CtlError>
    return USBD_FAIL;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e088      	b.n	8008b8e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d002      	beq.n	8008a8e <USBD_SetConfig+0x3e>
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d025      	beq.n	8008ad8 <USBD_SetConfig+0x88>
 8008a8c:	e071      	b.n	8008b72 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a8e:	4b42      	ldr	r3, [pc, #264]	; (8008b98 <USBD_SetConfig+0x148>)
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d01c      	beq.n	8008ad0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008a96:	4b40      	ldr	r3, [pc, #256]	; (8008b98 <USBD_SetConfig+0x148>)
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008aa0:	4b3d      	ldr	r3, [pc, #244]	; (8008b98 <USBD_SetConfig+0x148>)
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff f949 	bl	8007d3e <USBD_SetClassConfig>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d004      	beq.n	8008ac0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f949 	bl	8008d50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008abe:	e065      	b.n	8008b8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f9f3 	bl	8008eac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2203      	movs	r2, #3
 8008aca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ace:	e05d      	b.n	8008b8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f9eb 	bl	8008eac <USBD_CtlSendStatus>
      break;
 8008ad6:	e059      	b.n	8008b8c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ad8:	4b2f      	ldr	r3, [pc, #188]	; (8008b98 <USBD_SetConfig+0x148>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d112      	bne.n	8008b06 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008ae8:	4b2b      	ldr	r3, [pc, #172]	; (8008b98 <USBD_SetConfig+0x148>)
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	461a      	mov	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008af2:	4b29      	ldr	r3, [pc, #164]	; (8008b98 <USBD_SetConfig+0x148>)
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff f93c 	bl	8007d76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f9d4 	bl	8008eac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b04:	e042      	b.n	8008b8c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008b06:	4b24      	ldr	r3, [pc, #144]	; (8008b98 <USBD_SetConfig+0x148>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d02a      	beq.n	8008b6a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff f92a 	bl	8007d76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b22:	4b1d      	ldr	r3, [pc, #116]	; (8008b98 <USBD_SetConfig+0x148>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b2c:	4b1a      	ldr	r3, [pc, #104]	; (8008b98 <USBD_SetConfig+0x148>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff f903 	bl	8007d3e <USBD_SetClassConfig>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00f      	beq.n	8008b62 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f903 	bl	8008d50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7ff f90f 	bl	8007d76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b60:	e014      	b.n	8008b8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f9a2 	bl	8008eac <USBD_CtlSendStatus>
      break;
 8008b68:	e010      	b.n	8008b8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f99e 	bl	8008eac <USBD_CtlSendStatus>
      break;
 8008b70:	e00c      	b.n	8008b8c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f8eb 	bl	8008d50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b7a:	4b07      	ldr	r3, [pc, #28]	; (8008b98 <USBD_SetConfig+0x148>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff f8f8 	bl	8007d76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b86:	2303      	movs	r3, #3
 8008b88:	73fb      	strb	r3, [r7, #15]
      break;
 8008b8a:	bf00      	nop
  }

  return ret;
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	200005e8 	.word	0x200005e8

08008b9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	88db      	ldrh	r3, [r3, #6]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d004      	beq.n	8008bb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f8cd 	bl	8008d50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008bb6:	e023      	b.n	8008c00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	dc02      	bgt.n	8008bca <USBD_GetConfig+0x2e>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	dc03      	bgt.n	8008bd0 <USBD_GetConfig+0x34>
 8008bc8:	e015      	b.n	8008bf6 <USBD_GetConfig+0x5a>
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d00b      	beq.n	8008be6 <USBD_GetConfig+0x4a>
 8008bce:	e012      	b.n	8008bf6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	2201      	movs	r2, #1
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f927 	bl	8008e32 <USBD_CtlSendData>
        break;
 8008be4:	e00c      	b.n	8008c00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3304      	adds	r3, #4
 8008bea:	2201      	movs	r2, #1
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f91f 	bl	8008e32 <USBD_CtlSendData>
        break;
 8008bf4:	e004      	b.n	8008c00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f8a9 	bl	8008d50 <USBD_CtlError>
        break;
 8008bfe:	bf00      	nop
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d81e      	bhi.n	8008c5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	88db      	ldrh	r3, [r3, #6]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d004      	beq.n	8008c32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f890 	bl	8008d50 <USBD_CtlError>
        break;
 8008c30:	e01a      	b.n	8008c68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d005      	beq.n	8008c4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f043 0202 	orr.w	r2, r3, #2
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	330c      	adds	r3, #12
 8008c52:	2202      	movs	r2, #2
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f8eb 	bl	8008e32 <USBD_CtlSendData>
      break;
 8008c5c:	e004      	b.n	8008c68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f875 	bl	8008d50 <USBD_CtlError>
      break;
 8008c66:	bf00      	nop
  }
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	885b      	ldrh	r3, [r3, #2]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d106      	bne.n	8008c90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f90e 	bl	8008eac <USBD_CtlSendStatus>
  }
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	3b01      	subs	r3, #1
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d80b      	bhi.n	8008cc8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	885b      	ldrh	r3, [r3, #2]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d10c      	bne.n	8008cd2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f8f3 	bl	8008eac <USBD_CtlSendStatus>
      }
      break;
 8008cc6:	e004      	b.n	8008cd2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f840 	bl	8008d50 <USBD_CtlError>
      break;
 8008cd0:	e000      	b.n	8008cd4 <USBD_ClrFeature+0x3c>
      break;
 8008cd2:	bf00      	nop
  }
}
 8008cd4:	bf00      	nop
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	781a      	ldrb	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	781a      	ldrb	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3301      	adds	r3, #1
 8008d04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f7ff fabc 	bl	8008284 <SWAPBYTE>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	461a      	mov	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3301      	adds	r3, #1
 8008d18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f7ff faaf 	bl	8008284 <SWAPBYTE>
 8008d26:	4603      	mov	r3, r0
 8008d28:	461a      	mov	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3301      	adds	r3, #1
 8008d32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7ff faa2 	bl	8008284 <SWAPBYTE>
 8008d40:	4603      	mov	r3, r0
 8008d42:	461a      	mov	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	80da      	strh	r2, [r3, #6]
}
 8008d48:	bf00      	nop
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d5a:	2180      	movs	r1, #128	; 0x80
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fc45 	bl	80095ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d62:	2100      	movs	r1, #0
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fc41 	bl	80095ec <USBD_LL_StallEP>
}
 8008d6a:	bf00      	nop
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b086      	sub	sp, #24
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d036      	beq.n	8008df6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d8c:	6938      	ldr	r0, [r7, #16]
 8008d8e:	f000 f836 	bl	8008dfe <USBD_GetLen>
 8008d92:	4603      	mov	r3, r0
 8008d94:	3301      	adds	r3, #1
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	4413      	add	r3, r2
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	7812      	ldrb	r2, [r2, #0]
 8008daa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	3301      	adds	r3, #1
 8008db0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	4413      	add	r3, r2
 8008db8:	2203      	movs	r2, #3
 8008dba:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008dc2:	e013      	b.n	8008dec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	4413      	add	r3, r2
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	7812      	ldrb	r2, [r2, #0]
 8008dce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	613b      	str	r3, [r7, #16]
    idx++;
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	4413      	add	r3, r2
 8008de2:	2200      	movs	r2, #0
 8008de4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	3301      	adds	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e7      	bne.n	8008dc4 <USBD_GetString+0x52>
 8008df4:	e000      	b.n	8008df8 <USBD_GetString+0x86>
    return;
 8008df6:	bf00      	nop
  }
}
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b085      	sub	sp, #20
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e0e:	e005      	b.n	8008e1c <USBD_GetLen+0x1e>
  {
    len++;
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	3301      	adds	r3, #1
 8008e14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1f5      	bne.n	8008e10 <USBD_GetLen+0x12>
  }

  return len;
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2202      	movs	r2, #2
 8008e42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	2100      	movs	r1, #0
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 fc50 	bl	80096fe <USBD_LL_Transmit>

  return USBD_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	2100      	movs	r1, #0
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 fc3f 	bl	80096fe <USBD_LL_Transmit>

  return USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f000 fc4f 	bl	8009740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2204      	movs	r2, #4
 8008eb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fc1b 	bl	80096fe <USBD_LL_Transmit>

  return USBD_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2205      	movs	r2, #5
 8008ede:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fc29 	bl	8009740 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 8008efc:	2200      	movs	r2, #0
 8008efe:	4912      	ldr	r1, [pc, #72]	; (8008f48 <MX_USB_DEVICE_Init+0x50>)
 8008f00:	4812      	ldr	r0, [pc, #72]	; (8008f4c <MX_USB_DEVICE_Init+0x54>)
 8008f02:	f7fe feae 	bl	8007c62 <USBD_Init>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 8008f0c:	f7f8 fdc8 	bl	8001aa0 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 8008f10:	490f      	ldr	r1, [pc, #60]	; (8008f50 <MX_USB_DEVICE_Init+0x58>)
 8008f12:	480e      	ldr	r0, [pc, #56]	; (8008f4c <MX_USB_DEVICE_Init+0x54>)
 8008f14:	f7fe fed5 	bl	8007cc2 <USBD_RegisterClass>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 8008f1e:	f7f8 fdbf 	bl	8001aa0 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 8008f22:	490c      	ldr	r1, [pc, #48]	; (8008f54 <MX_USB_DEVICE_Init+0x5c>)
 8008f24:	4809      	ldr	r0, [pc, #36]	; (8008f4c <MX_USB_DEVICE_Init+0x54>)
 8008f26:	f7fe fe85 	bl	8007c34 <USBD_Midi_RegisterInterface>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 8008f30:	f7f8 fdb6 	bl	8001aa0 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008f34:	4805      	ldr	r0, [pc, #20]	; (8008f4c <MX_USB_DEVICE_Init+0x54>)
 8008f36:	f7fe feeb 	bl	8007d10 <USBD_Start>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 8008f40:	f7f8 fdae 	bl	8001aa0 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f44:	bf00      	nop
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000100 	.word	0x20000100
 8008f4c:	2000230c 	.word	0x2000230c
 8008f50:	20000054 	.word	0x20000054
 8008f54:	20000150 	.word	0x20000150

08008f58 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	71fb      	strb	r3, [r7, #7]
 8008f62:	460b      	mov	r3, r1
 8008f64:	71bb      	strb	r3, [r7, #6]
 8008f66:	4613      	mov	r3, r2
 8008f68:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 8008f6a:	230b      	movs	r3, #11
 8008f6c:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8008f74:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 8008f7e:	79bb      	ldrb	r3, [r7, #6]
 8008f80:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 8008f82:	797b      	ldrb	r3, [r7, #5]
 8008f84:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 8008f86:	f107 0208 	add.w	r2, r7, #8
 8008f8a:	2304      	movs	r3, #4
 8008f8c:	2181      	movs	r1, #129	; 0x81
 8008f8e:	4810      	ldr	r0, [pc, #64]	; (8008fd0 <MX_USB_Send_Midi+0x78>)
 8008f90:	f000 fbb5 	bl	80096fe <USBD_LL_Transmit>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d00a      	beq.n	8008fb0 <MX_USB_Send_Midi+0x58>
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	dc10      	bgt.n	8008fc0 <MX_USB_Send_Midi+0x68>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <MX_USB_Send_Midi+0x50>
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d008      	beq.n	8008fb8 <MX_USB_Send_Midi+0x60>
 8008fa6:	e00b      	b.n	8008fc0 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 8008fa8:	480a      	ldr	r0, [pc, #40]	; (8008fd4 <MX_USB_Send_Midi+0x7c>)
 8008faa:	f000 ffb7 	bl	8009f1c <puts>
        break;
 8008fae:	e00b      	b.n	8008fc8 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 8008fb0:	4809      	ldr	r0, [pc, #36]	; (8008fd8 <MX_USB_Send_Midi+0x80>)
 8008fb2:	f000 ffb3 	bl	8009f1c <puts>
        break;
 8008fb6:	e007      	b.n	8008fc8 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 8008fb8:	4808      	ldr	r0, [pc, #32]	; (8008fdc <MX_USB_Send_Midi+0x84>)
 8008fba:	f000 ffaf 	bl	8009f1c <puts>
        break;
 8008fbe:	e003      	b.n	8008fc8 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 8008fc0:	4807      	ldr	r0, [pc, #28]	; (8008fe0 <MX_USB_Send_Midi+0x88>)
 8008fc2:	f000 ffab 	bl	8009f1c <puts>
    }
}
 8008fc6:	bf00      	nop
 8008fc8:	bf00      	nop
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	2000230c 	.word	0x2000230c
 8008fd4:	0800ab18 	.word	0x0800ab18
 8008fd8:	0800ab1c 	.word	0x0800ab1c
 8008fdc:	0800ab2c 	.word	0x0800ab2c
 8008fe0:	0800ab3c 	.word	0x0800ab3c

08008fe4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	6039      	str	r1, [r7, #0]
 8008fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2212      	movs	r2, #18
 8008ff4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	; (8009004 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	2000011c 	.word	0x2000011c

08009008 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	6039      	str	r1, [r7, #0]
 8009012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2204      	movs	r2, #4
 8009018:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800901a:	4b03      	ldr	r3, [pc, #12]	; (8009028 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800901c:	4618      	mov	r0, r3
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	20000130 	.word	0x20000130

0800902c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	6039      	str	r1, [r7, #0]
 8009036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d105      	bne.n	800904a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	4907      	ldr	r1, [pc, #28]	; (8009060 <USBD_FS_ProductStrDescriptor+0x34>)
 8009042:	4808      	ldr	r0, [pc, #32]	; (8009064 <USBD_FS_ProductStrDescriptor+0x38>)
 8009044:	f7ff fe95 	bl	8008d72 <USBD_GetString>
 8009048:	e004      	b.n	8009054 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	4904      	ldr	r1, [pc, #16]	; (8009060 <USBD_FS_ProductStrDescriptor+0x34>)
 800904e:	4805      	ldr	r0, [pc, #20]	; (8009064 <USBD_FS_ProductStrDescriptor+0x38>)
 8009050:	f7ff fe8f 	bl	8008d72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009054:	4b02      	ldr	r3, [pc, #8]	; (8009060 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	200025dc 	.word	0x200025dc
 8009064:	0800ab58 	.word	0x0800ab58

08009068 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	6039      	str	r1, [r7, #0]
 8009072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	4904      	ldr	r1, [pc, #16]	; (8009088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009078:	4804      	ldr	r0, [pc, #16]	; (800908c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800907a:	f7ff fe7a 	bl	8008d72 <USBD_GetString>
  return USBD_StrDesc;
 800907e:	4b02      	ldr	r3, [pc, #8]	; (8009088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	200025dc 	.word	0x200025dc
 800908c:	0800ab6c 	.word	0x0800ab6c

08009090 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	221a      	movs	r2, #26
 80090a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090a2:	f000 f843 	bl	800912c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090a6:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20000134 	.word	0x20000134

080090b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090c0:	79fb      	ldrb	r3, [r7, #7]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d105      	bne.n	80090d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	4907      	ldr	r1, [pc, #28]	; (80090e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090ca:	4808      	ldr	r0, [pc, #32]	; (80090ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80090cc:	f7ff fe51 	bl	8008d72 <USBD_GetString>
 80090d0:	e004      	b.n	80090dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	4904      	ldr	r1, [pc, #16]	; (80090e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090d6:	4805      	ldr	r0, [pc, #20]	; (80090ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80090d8:	f7ff fe4b 	bl	8008d72 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090dc:	4b02      	ldr	r3, [pc, #8]	; (80090e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	200025dc 	.word	0x200025dc
 80090ec:	0800ab80 	.word	0x0800ab80

080090f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d105      	bne.n	800910e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	4907      	ldr	r1, [pc, #28]	; (8009124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009106:	4808      	ldr	r0, [pc, #32]	; (8009128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009108:	f7ff fe33 	bl	8008d72 <USBD_GetString>
 800910c:	e004      	b.n	8009118 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	4904      	ldr	r1, [pc, #16]	; (8009124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009112:	4805      	ldr	r0, [pc, #20]	; (8009128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009114:	f7ff fe2d 	bl	8008d72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009118:	4b02      	ldr	r3, [pc, #8]	; (8009124 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800911a:	4618      	mov	r0, r3
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	200025dc 	.word	0x200025dc
 8009128:	0800ab90 	.word	0x0800ab90

0800912c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009132:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <Get_SerialNum+0x44>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009138:	4b0e      	ldr	r3, [pc, #56]	; (8009174 <Get_SerialNum+0x48>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800913e:	4b0e      	ldr	r3, [pc, #56]	; (8009178 <Get_SerialNum+0x4c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4413      	add	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d009      	beq.n	8009166 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009152:	2208      	movs	r2, #8
 8009154:	4909      	ldr	r1, [pc, #36]	; (800917c <Get_SerialNum+0x50>)
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 f814 	bl	8009184 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800915c:	2204      	movs	r2, #4
 800915e:	4908      	ldr	r1, [pc, #32]	; (8009180 <Get_SerialNum+0x54>)
 8009160:	68b8      	ldr	r0, [r7, #8]
 8009162:	f000 f80f 	bl	8009184 <IntToUnicode>
  }
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	1fff7a10 	.word	0x1fff7a10
 8009174:	1fff7a14 	.word	0x1fff7a14
 8009178:	1fff7a18 	.word	0x1fff7a18
 800917c:	20000136 	.word	0x20000136
 8009180:	20000146 	.word	0x20000146

08009184 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	4613      	mov	r3, r2
 8009190:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009196:	2300      	movs	r3, #0
 8009198:	75fb      	strb	r3, [r7, #23]
 800919a:	e027      	b.n	80091ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	0f1b      	lsrs	r3, r3, #28
 80091a0:	2b09      	cmp	r3, #9
 80091a2:	d80b      	bhi.n	80091bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	0f1b      	lsrs	r3, r3, #28
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	4619      	mov	r1, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	440b      	add	r3, r1
 80091b4:	3230      	adds	r2, #48	; 0x30
 80091b6:	b2d2      	uxtb	r2, r2
 80091b8:	701a      	strb	r2, [r3, #0]
 80091ba:	e00a      	b.n	80091d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	0f1b      	lsrs	r3, r3, #28
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	4619      	mov	r1, r3
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	440b      	add	r3, r1
 80091cc:	3237      	adds	r2, #55	; 0x37
 80091ce:	b2d2      	uxtb	r2, r2
 80091d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	3301      	adds	r3, #1
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	4413      	add	r3, r2
 80091e2:	2200      	movs	r2, #0
 80091e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	3301      	adds	r3, #1
 80091ea:	75fb      	strb	r3, [r7, #23]
 80091ec:	7dfa      	ldrb	r2, [r7, #23]
 80091ee:	79fb      	ldrb	r3, [r7, #7]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d3d3      	bcc.n	800919c <IntToUnicode+0x18>
  }
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop
 80091f8:	371c      	adds	r7, #28
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
	...

0800921c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08a      	sub	sp, #40	; 0x28
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009224:	f107 0314 	add.w	r3, r7, #20
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	605a      	str	r2, [r3, #4]
 800922e:	609a      	str	r2, [r3, #8]
 8009230:	60da      	str	r2, [r3, #12]
 8009232:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800923c:	d13a      	bne.n	80092b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800923e:	2300      	movs	r3, #0
 8009240:	613b      	str	r3, [r7, #16]
 8009242:	4b1e      	ldr	r3, [pc, #120]	; (80092bc <HAL_PCD_MspInit+0xa0>)
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	4a1d      	ldr	r2, [pc, #116]	; (80092bc <HAL_PCD_MspInit+0xa0>)
 8009248:	f043 0301 	orr.w	r3, r3, #1
 800924c:	6313      	str	r3, [r2, #48]	; 0x30
 800924e:	4b1b      	ldr	r3, [pc, #108]	; (80092bc <HAL_PCD_MspInit+0xa0>)
 8009250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	613b      	str	r3, [r7, #16]
 8009258:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800925a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800925e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009260:	2302      	movs	r3, #2
 8009262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009264:	2300      	movs	r3, #0
 8009266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009268:	2300      	movs	r3, #0
 800926a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800926c:	230a      	movs	r3, #10
 800926e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009270:	f107 0314 	add.w	r3, r7, #20
 8009274:	4619      	mov	r1, r3
 8009276:	4812      	ldr	r0, [pc, #72]	; (80092c0 <HAL_PCD_MspInit+0xa4>)
 8009278:	f7fa f984 	bl	8003584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800927c:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <HAL_PCD_MspInit+0xa0>)
 800927e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009280:	4a0e      	ldr	r2, [pc, #56]	; (80092bc <HAL_PCD_MspInit+0xa0>)
 8009282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009286:	6353      	str	r3, [r2, #52]	; 0x34
 8009288:	2300      	movs	r3, #0
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	4b0b      	ldr	r3, [pc, #44]	; (80092bc <HAL_PCD_MspInit+0xa0>)
 800928e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009290:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <HAL_PCD_MspInit+0xa0>)
 8009292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009296:	6453      	str	r3, [r2, #68]	; 0x44
 8009298:	4b08      	ldr	r3, [pc, #32]	; (80092bc <HAL_PCD_MspInit+0xa0>)
 800929a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092a0:	60fb      	str	r3, [r7, #12]
 80092a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092a4:	2200      	movs	r2, #0
 80092a6:	2100      	movs	r1, #0
 80092a8:	2043      	movs	r0, #67	; 0x43
 80092aa:	f7fa f934 	bl	8003516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092ae:	2043      	movs	r0, #67	; 0x43
 80092b0:	f7fa f94d 	bl	800354e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092b4:	bf00      	nop
 80092b6:	3728      	adds	r7, #40	; 0x28
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	40023800 	.word	0x40023800
 80092c0:	40020000 	.word	0x40020000

080092c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80092d8:	4619      	mov	r1, r3
 80092da:	4610      	mov	r0, r2
 80092dc:	f7fe fd63 	bl	8007da6 <USBD_LL_SetupStage>
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	460b      	mov	r3, r1
 80092f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	4613      	mov	r3, r2
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	440b      	add	r3, r1
 8009308:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	78fb      	ldrb	r3, [r7, #3]
 8009310:	4619      	mov	r1, r3
 8009312:	f7fe fd9d 	bl	8007e50 <USBD_LL_DataOutStage>
}
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	460b      	mov	r3, r1
 8009328:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009330:	78fa      	ldrb	r2, [r7, #3]
 8009332:	6879      	ldr	r1, [r7, #4]
 8009334:	4613      	mov	r3, r2
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	1a9b      	subs	r3, r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	440b      	add	r3, r1
 800933e:	3348      	adds	r3, #72	; 0x48
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	4619      	mov	r1, r3
 8009346:	f7fe fde6 	bl	8007f16 <USBD_LL_DataInStage>
}
 800934a:	bf00      	nop
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fefa 	bl	800815a <USBD_LL_SOF>
}
 8009366:	bf00      	nop
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009376:	2301      	movs	r3, #1
 8009378:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	2b02      	cmp	r3, #2
 8009380:	d001      	beq.n	8009386 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009382:	f7f8 fb8d 	bl	8001aa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800938c:	7bfa      	ldrb	r2, [r7, #15]
 800938e:	4611      	mov	r1, r2
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe fea4 	bl	80080de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe fe50 	bl	8008042 <USBD_LL_Reset>
}
 80093a2:	bf00      	nop
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe fe9f 	bl	80080fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	6812      	ldr	r2, [r2, #0]
 80093ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093d2:	f043 0301 	orr.w	r3, r3, #1
 80093d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093e0:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <HAL_PCD_SuspendCallback+0x48>)
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	4a03      	ldr	r2, [pc, #12]	; (80093f4 <HAL_PCD_SuspendCallback+0x48>)
 80093e6:	f043 0306 	orr.w	r3, r3, #6
 80093ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	e000ed00 	.word	0xe000ed00

080093f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fe8f 	bl	800812a <USBD_LL_Resume>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fedd 	bl	80081ea <USBD_LL_IsoOUTIncomplete>
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	460b      	mov	r3, r1
 8009442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800944a:	78fa      	ldrb	r2, [r7, #3]
 800944c:	4611      	mov	r1, r2
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe fea5 	bl	800819e <USBD_LL_IsoINIncomplete>
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800946a:	4618      	mov	r0, r3
 800946c:	f7fe fee3 	bl	8008236 <USBD_LL_DevConnected>
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fee0 	bl	800824c <USBD_LL_DevDisconnected>
}
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d13c      	bne.n	800951e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80094a4:	4a20      	ldr	r2, [pc, #128]	; (8009528 <USBD_LL_Init+0x94>)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a1e      	ldr	r2, [pc, #120]	; (8009528 <USBD_LL_Init+0x94>)
 80094b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094b4:	4b1c      	ldr	r3, [pc, #112]	; (8009528 <USBD_LL_Init+0x94>)
 80094b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80094ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80094bc:	4b1a      	ldr	r3, [pc, #104]	; (8009528 <USBD_LL_Init+0x94>)
 80094be:	2204      	movs	r2, #4
 80094c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094c2:	4b19      	ldr	r3, [pc, #100]	; (8009528 <USBD_LL_Init+0x94>)
 80094c4:	2202      	movs	r2, #2
 80094c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094c8:	4b17      	ldr	r3, [pc, #92]	; (8009528 <USBD_LL_Init+0x94>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094ce:	4b16      	ldr	r3, [pc, #88]	; (8009528 <USBD_LL_Init+0x94>)
 80094d0:	2202      	movs	r2, #2
 80094d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094d4:	4b14      	ldr	r3, [pc, #80]	; (8009528 <USBD_LL_Init+0x94>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80094da:	4b13      	ldr	r3, [pc, #76]	; (8009528 <USBD_LL_Init+0x94>)
 80094dc:	2200      	movs	r2, #0
 80094de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094e0:	4b11      	ldr	r3, [pc, #68]	; (8009528 <USBD_LL_Init+0x94>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094e6:	4b10      	ldr	r3, [pc, #64]	; (8009528 <USBD_LL_Init+0x94>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094ec:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <USBD_LL_Init+0x94>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094f2:	480d      	ldr	r0, [pc, #52]	; (8009528 <USBD_LL_Init+0x94>)
 80094f4:	f7fa fff1 	bl	80044da <HAL_PCD_Init>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094fe:	f7f8 facf 	bl	8001aa0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009502:	2180      	movs	r1, #128	; 0x80
 8009504:	4808      	ldr	r0, [pc, #32]	; (8009528 <USBD_LL_Init+0x94>)
 8009506:	f7fc f94e 	bl	80057a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800950a:	2240      	movs	r2, #64	; 0x40
 800950c:	2100      	movs	r1, #0
 800950e:	4806      	ldr	r0, [pc, #24]	; (8009528 <USBD_LL_Init+0x94>)
 8009510:	f7fc f902 	bl	8005718 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009514:	2280      	movs	r2, #128	; 0x80
 8009516:	2101      	movs	r1, #1
 8009518:	4803      	ldr	r0, [pc, #12]	; (8009528 <USBD_LL_Init+0x94>)
 800951a:	f7fc f8fd 	bl	8005718 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	200027dc 	.word	0x200027dc

0800952c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009542:	4618      	mov	r0, r3
 8009544:	f7fb f8e6 	bl	8004714 <HAL_PCD_Start>
 8009548:	4603      	mov	r3, r0
 800954a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800954c:	7bfb      	ldrb	r3, [r7, #15]
 800954e:	4618      	mov	r0, r3
 8009550:	f000 f938 	bl	80097c4 <USBD_Get_USB_Status>
 8009554:	4603      	mov	r3, r0
 8009556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009558:	7bbb      	ldrb	r3, [r7, #14]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	4608      	mov	r0, r1
 800956c:	4611      	mov	r1, r2
 800956e:	461a      	mov	r2, r3
 8009570:	4603      	mov	r3, r0
 8009572:	70fb      	strb	r3, [r7, #3]
 8009574:	460b      	mov	r3, r1
 8009576:	70bb      	strb	r3, [r7, #2]
 8009578:	4613      	mov	r3, r2
 800957a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800958a:	78bb      	ldrb	r3, [r7, #2]
 800958c:	883a      	ldrh	r2, [r7, #0]
 800958e:	78f9      	ldrb	r1, [r7, #3]
 8009590:	f7fb fcca 	bl	8004f28 <HAL_PCD_EP_Open>
 8009594:	4603      	mov	r3, r0
 8009596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	4618      	mov	r0, r3
 800959c:	f000 f912 	bl	80097c4 <USBD_Get_USB_Status>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095c8:	78fa      	ldrb	r2, [r7, #3]
 80095ca:	4611      	mov	r1, r2
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fb fd13 	bl	8004ff8 <HAL_PCD_EP_Close>
 80095d2:	4603      	mov	r3, r0
 80095d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 f8f3 	bl	80097c4 <USBD_Get_USB_Status>
 80095de:	4603      	mov	r3, r0
 80095e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009606:	78fa      	ldrb	r2, [r7, #3]
 8009608:	4611      	mov	r1, r2
 800960a:	4618      	mov	r0, r3
 800960c:	f7fb fdeb 	bl	80051e6 <HAL_PCD_EP_SetStall>
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	4618      	mov	r0, r3
 8009618:	f000 f8d4 	bl	80097c4 <USBD_Get_USB_Status>
 800961c:	4603      	mov	r3, r0
 800961e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009620:	7bbb      	ldrb	r3, [r7, #14]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009644:	78fa      	ldrb	r2, [r7, #3]
 8009646:	4611      	mov	r1, r2
 8009648:	4618      	mov	r0, r3
 800964a:	f7fb fe30 	bl	80052ae <HAL_PCD_EP_ClrStall>
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009652:	7bfb      	ldrb	r3, [r7, #15]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 f8b5 	bl	80097c4 <USBD_Get_USB_Status>
 800965a:	4603      	mov	r3, r0
 800965c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800965e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800967a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800967c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009680:	2b00      	cmp	r3, #0
 8009682:	da0b      	bge.n	800969c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800968a:	68f9      	ldr	r1, [r7, #12]
 800968c:	4613      	mov	r3, r2
 800968e:	00db      	lsls	r3, r3, #3
 8009690:	1a9b      	subs	r3, r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	440b      	add	r3, r1
 8009696:	333e      	adds	r3, #62	; 0x3e
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	e00b      	b.n	80096b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096a2:	68f9      	ldr	r1, [r7, #12]
 80096a4:	4613      	mov	r3, r2
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	1a9b      	subs	r3, r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80096b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096da:	78fa      	ldrb	r2, [r7, #3]
 80096dc:	4611      	mov	r1, r2
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fb fbfd 	bl	8004ede <HAL_PCD_SetAddress>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 f86a 	bl	80097c4 <USBD_Get_USB_Status>
 80096f0:	4603      	mov	r3, r0
 80096f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b086      	sub	sp, #24
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
 800970a:	460b      	mov	r3, r1
 800970c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800971c:	7af9      	ldrb	r1, [r7, #11]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	f7fb fd16 	bl	8005152 <HAL_PCD_EP_Transmit>
 8009726:	4603      	mov	r3, r0
 8009728:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	4618      	mov	r0, r3
 800972e:	f000 f849 	bl	80097c4 <USBD_Get_USB_Status>
 8009732:	4603      	mov	r3, r0
 8009734:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009736:	7dbb      	ldrb	r3, [r7, #22]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3718      	adds	r7, #24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	607a      	str	r2, [r7, #4]
 800974a:	603b      	str	r3, [r7, #0]
 800974c:	460b      	mov	r3, r1
 800974e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800975e:	7af9      	ldrb	r1, [r7, #11]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	f7fb fc92 	bl	800508c <HAL_PCD_EP_Receive>
 8009768:	4603      	mov	r3, r0
 800976a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	4618      	mov	r0, r3
 8009770:	f000 f828 	bl	80097c4 <USBD_Get_USB_Status>
 8009774:	4603      	mov	r3, r0
 8009776:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009778:	7dbb      	ldrb	r3, [r7, #22]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	460b      	mov	r3, r1
 800978c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009794:	78fa      	ldrb	r2, [r7, #3]
 8009796:	4611      	mov	r1, r2
 8009798:	4618      	mov	r0, r3
 800979a:	f7fb fcc2 	bl	8005122 <HAL_PCD_EP_GetRxCount>
 800979e:	4603      	mov	r3, r0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097b0:	4b03      	ldr	r3, [pc, #12]	; (80097c0 <USBD_static_malloc+0x18>)
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	200005ec 	.word	0x200005ec

080097c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097d2:	79fb      	ldrb	r3, [r7, #7]
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d817      	bhi.n	8009808 <USBD_Get_USB_Status+0x44>
 80097d8:	a201      	add	r2, pc, #4	; (adr r2, 80097e0 <USBD_Get_USB_Status+0x1c>)
 80097da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097de:	bf00      	nop
 80097e0:	080097f1 	.word	0x080097f1
 80097e4:	080097f7 	.word	0x080097f7
 80097e8:	080097fd 	.word	0x080097fd
 80097ec:	08009803 	.word	0x08009803
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]
    break;
 80097f4:	e00b      	b.n	800980e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097f6:	2303      	movs	r3, #3
 80097f8:	73fb      	strb	r3, [r7, #15]
    break;
 80097fa:	e008      	b.n	800980e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097fc:	2301      	movs	r3, #1
 80097fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009800:	e005      	b.n	800980e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009802:	2303      	movs	r3, #3
 8009804:	73fb      	strb	r3, [r7, #15]
    break;
 8009806:	e002      	b.n	800980e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009808:	2303      	movs	r3, #3
 800980a:	73fb      	strb	r3, [r7, #15]
    break;
 800980c:	bf00      	nop
  }
  return usb_status;
 800980e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <__errno>:
 800981c:	4b01      	ldr	r3, [pc, #4]	; (8009824 <__errno+0x8>)
 800981e:	6818      	ldr	r0, [r3, #0]
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	20000154 	.word	0x20000154

08009828 <__sflush_r>:
 8009828:	898a      	ldrh	r2, [r1, #12]
 800982a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800982e:	4605      	mov	r5, r0
 8009830:	0710      	lsls	r0, r2, #28
 8009832:	460c      	mov	r4, r1
 8009834:	d458      	bmi.n	80098e8 <__sflush_r+0xc0>
 8009836:	684b      	ldr	r3, [r1, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	dc05      	bgt.n	8009848 <__sflush_r+0x20>
 800983c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800983e:	2b00      	cmp	r3, #0
 8009840:	dc02      	bgt.n	8009848 <__sflush_r+0x20>
 8009842:	2000      	movs	r0, #0
 8009844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800984a:	2e00      	cmp	r6, #0
 800984c:	d0f9      	beq.n	8009842 <__sflush_r+0x1a>
 800984e:	2300      	movs	r3, #0
 8009850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009854:	682f      	ldr	r7, [r5, #0]
 8009856:	602b      	str	r3, [r5, #0]
 8009858:	d032      	beq.n	80098c0 <__sflush_r+0x98>
 800985a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	075a      	lsls	r2, r3, #29
 8009860:	d505      	bpl.n	800986e <__sflush_r+0x46>
 8009862:	6863      	ldr	r3, [r4, #4]
 8009864:	1ac0      	subs	r0, r0, r3
 8009866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009868:	b10b      	cbz	r3, 800986e <__sflush_r+0x46>
 800986a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800986c:	1ac0      	subs	r0, r0, r3
 800986e:	2300      	movs	r3, #0
 8009870:	4602      	mov	r2, r0
 8009872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009874:	6a21      	ldr	r1, [r4, #32]
 8009876:	4628      	mov	r0, r5
 8009878:	47b0      	blx	r6
 800987a:	1c43      	adds	r3, r0, #1
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	d106      	bne.n	800988e <__sflush_r+0x66>
 8009880:	6829      	ldr	r1, [r5, #0]
 8009882:	291d      	cmp	r1, #29
 8009884:	d82c      	bhi.n	80098e0 <__sflush_r+0xb8>
 8009886:	4a2a      	ldr	r2, [pc, #168]	; (8009930 <__sflush_r+0x108>)
 8009888:	40ca      	lsrs	r2, r1
 800988a:	07d6      	lsls	r6, r2, #31
 800988c:	d528      	bpl.n	80098e0 <__sflush_r+0xb8>
 800988e:	2200      	movs	r2, #0
 8009890:	6062      	str	r2, [r4, #4]
 8009892:	04d9      	lsls	r1, r3, #19
 8009894:	6922      	ldr	r2, [r4, #16]
 8009896:	6022      	str	r2, [r4, #0]
 8009898:	d504      	bpl.n	80098a4 <__sflush_r+0x7c>
 800989a:	1c42      	adds	r2, r0, #1
 800989c:	d101      	bne.n	80098a2 <__sflush_r+0x7a>
 800989e:	682b      	ldr	r3, [r5, #0]
 80098a0:	b903      	cbnz	r3, 80098a4 <__sflush_r+0x7c>
 80098a2:	6560      	str	r0, [r4, #84]	; 0x54
 80098a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098a6:	602f      	str	r7, [r5, #0]
 80098a8:	2900      	cmp	r1, #0
 80098aa:	d0ca      	beq.n	8009842 <__sflush_r+0x1a>
 80098ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098b0:	4299      	cmp	r1, r3
 80098b2:	d002      	beq.n	80098ba <__sflush_r+0x92>
 80098b4:	4628      	mov	r0, r5
 80098b6:	f000 fa19 	bl	8009cec <_free_r>
 80098ba:	2000      	movs	r0, #0
 80098bc:	6360      	str	r0, [r4, #52]	; 0x34
 80098be:	e7c1      	b.n	8009844 <__sflush_r+0x1c>
 80098c0:	6a21      	ldr	r1, [r4, #32]
 80098c2:	2301      	movs	r3, #1
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b0      	blx	r6
 80098c8:	1c41      	adds	r1, r0, #1
 80098ca:	d1c7      	bne.n	800985c <__sflush_r+0x34>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0c4      	beq.n	800985c <__sflush_r+0x34>
 80098d2:	2b1d      	cmp	r3, #29
 80098d4:	d001      	beq.n	80098da <__sflush_r+0xb2>
 80098d6:	2b16      	cmp	r3, #22
 80098d8:	d101      	bne.n	80098de <__sflush_r+0xb6>
 80098da:	602f      	str	r7, [r5, #0]
 80098dc:	e7b1      	b.n	8009842 <__sflush_r+0x1a>
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	e7ad      	b.n	8009844 <__sflush_r+0x1c>
 80098e8:	690f      	ldr	r7, [r1, #16]
 80098ea:	2f00      	cmp	r7, #0
 80098ec:	d0a9      	beq.n	8009842 <__sflush_r+0x1a>
 80098ee:	0793      	lsls	r3, r2, #30
 80098f0:	680e      	ldr	r6, [r1, #0]
 80098f2:	bf08      	it	eq
 80098f4:	694b      	ldreq	r3, [r1, #20]
 80098f6:	600f      	str	r7, [r1, #0]
 80098f8:	bf18      	it	ne
 80098fa:	2300      	movne	r3, #0
 80098fc:	eba6 0807 	sub.w	r8, r6, r7
 8009900:	608b      	str	r3, [r1, #8]
 8009902:	f1b8 0f00 	cmp.w	r8, #0
 8009906:	dd9c      	ble.n	8009842 <__sflush_r+0x1a>
 8009908:	6a21      	ldr	r1, [r4, #32]
 800990a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800990c:	4643      	mov	r3, r8
 800990e:	463a      	mov	r2, r7
 8009910:	4628      	mov	r0, r5
 8009912:	47b0      	blx	r6
 8009914:	2800      	cmp	r0, #0
 8009916:	dc06      	bgt.n	8009926 <__sflush_r+0xfe>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800991e:	81a3      	strh	r3, [r4, #12]
 8009920:	f04f 30ff 	mov.w	r0, #4294967295
 8009924:	e78e      	b.n	8009844 <__sflush_r+0x1c>
 8009926:	4407      	add	r7, r0
 8009928:	eba8 0800 	sub.w	r8, r8, r0
 800992c:	e7e9      	b.n	8009902 <__sflush_r+0xda>
 800992e:	bf00      	nop
 8009930:	20400001 	.word	0x20400001

08009934 <_fflush_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	690b      	ldr	r3, [r1, #16]
 8009938:	4605      	mov	r5, r0
 800993a:	460c      	mov	r4, r1
 800993c:	b913      	cbnz	r3, 8009944 <_fflush_r+0x10>
 800993e:	2500      	movs	r5, #0
 8009940:	4628      	mov	r0, r5
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	b118      	cbz	r0, 800994e <_fflush_r+0x1a>
 8009946:	6983      	ldr	r3, [r0, #24]
 8009948:	b90b      	cbnz	r3, 800994e <_fflush_r+0x1a>
 800994a:	f000 f887 	bl	8009a5c <__sinit>
 800994e:	4b14      	ldr	r3, [pc, #80]	; (80099a0 <_fflush_r+0x6c>)
 8009950:	429c      	cmp	r4, r3
 8009952:	d11b      	bne.n	800998c <_fflush_r+0x58>
 8009954:	686c      	ldr	r4, [r5, #4]
 8009956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0ef      	beq.n	800993e <_fflush_r+0xa>
 800995e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009960:	07d0      	lsls	r0, r2, #31
 8009962:	d404      	bmi.n	800996e <_fflush_r+0x3a>
 8009964:	0599      	lsls	r1, r3, #22
 8009966:	d402      	bmi.n	800996e <_fflush_r+0x3a>
 8009968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800996a:	f000 f93a 	bl	8009be2 <__retarget_lock_acquire_recursive>
 800996e:	4628      	mov	r0, r5
 8009970:	4621      	mov	r1, r4
 8009972:	f7ff ff59 	bl	8009828 <__sflush_r>
 8009976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009978:	07da      	lsls	r2, r3, #31
 800997a:	4605      	mov	r5, r0
 800997c:	d4e0      	bmi.n	8009940 <_fflush_r+0xc>
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	059b      	lsls	r3, r3, #22
 8009982:	d4dd      	bmi.n	8009940 <_fflush_r+0xc>
 8009984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009986:	f000 f92d 	bl	8009be4 <__retarget_lock_release_recursive>
 800998a:	e7d9      	b.n	8009940 <_fflush_r+0xc>
 800998c:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <_fflush_r+0x70>)
 800998e:	429c      	cmp	r4, r3
 8009990:	d101      	bne.n	8009996 <_fflush_r+0x62>
 8009992:	68ac      	ldr	r4, [r5, #8]
 8009994:	e7df      	b.n	8009956 <_fflush_r+0x22>
 8009996:	4b04      	ldr	r3, [pc, #16]	; (80099a8 <_fflush_r+0x74>)
 8009998:	429c      	cmp	r4, r3
 800999a:	bf08      	it	eq
 800999c:	68ec      	ldreq	r4, [r5, #12]
 800999e:	e7da      	b.n	8009956 <_fflush_r+0x22>
 80099a0:	0800be70 	.word	0x0800be70
 80099a4:	0800be90 	.word	0x0800be90
 80099a8:	0800be50 	.word	0x0800be50

080099ac <std>:
 80099ac:	2300      	movs	r3, #0
 80099ae:	b510      	push	{r4, lr}
 80099b0:	4604      	mov	r4, r0
 80099b2:	e9c0 3300 	strd	r3, r3, [r0]
 80099b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099ba:	6083      	str	r3, [r0, #8]
 80099bc:	8181      	strh	r1, [r0, #12]
 80099be:	6643      	str	r3, [r0, #100]	; 0x64
 80099c0:	81c2      	strh	r2, [r0, #14]
 80099c2:	6183      	str	r3, [r0, #24]
 80099c4:	4619      	mov	r1, r3
 80099c6:	2208      	movs	r2, #8
 80099c8:	305c      	adds	r0, #92	; 0x5c
 80099ca:	f000 f987 	bl	8009cdc <memset>
 80099ce:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <std+0x38>)
 80099d0:	6263      	str	r3, [r4, #36]	; 0x24
 80099d2:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <std+0x3c>)
 80099d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80099d6:	4b05      	ldr	r3, [pc, #20]	; (80099ec <std+0x40>)
 80099d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099da:	4b05      	ldr	r3, [pc, #20]	; (80099f0 <std+0x44>)
 80099dc:	6224      	str	r4, [r4, #32]
 80099de:	6323      	str	r3, [r4, #48]	; 0x30
 80099e0:	bd10      	pop	{r4, pc}
 80099e2:	bf00      	nop
 80099e4:	08009fb5 	.word	0x08009fb5
 80099e8:	08009fd7 	.word	0x08009fd7
 80099ec:	0800a00f 	.word	0x0800a00f
 80099f0:	0800a033 	.word	0x0800a033

080099f4 <_cleanup_r>:
 80099f4:	4901      	ldr	r1, [pc, #4]	; (80099fc <_cleanup_r+0x8>)
 80099f6:	f000 b8af 	b.w	8009b58 <_fwalk_reent>
 80099fa:	bf00      	nop
 80099fc:	08009935 	.word	0x08009935

08009a00 <__sfmoreglue>:
 8009a00:	b570      	push	{r4, r5, r6, lr}
 8009a02:	1e4a      	subs	r2, r1, #1
 8009a04:	2568      	movs	r5, #104	; 0x68
 8009a06:	4355      	muls	r5, r2
 8009a08:	460e      	mov	r6, r1
 8009a0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a0e:	f000 f9bd 	bl	8009d8c <_malloc_r>
 8009a12:	4604      	mov	r4, r0
 8009a14:	b140      	cbz	r0, 8009a28 <__sfmoreglue+0x28>
 8009a16:	2100      	movs	r1, #0
 8009a18:	e9c0 1600 	strd	r1, r6, [r0]
 8009a1c:	300c      	adds	r0, #12
 8009a1e:	60a0      	str	r0, [r4, #8]
 8009a20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a24:	f000 f95a 	bl	8009cdc <memset>
 8009a28:	4620      	mov	r0, r4
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}

08009a2c <__sfp_lock_acquire>:
 8009a2c:	4801      	ldr	r0, [pc, #4]	; (8009a34 <__sfp_lock_acquire+0x8>)
 8009a2e:	f000 b8d8 	b.w	8009be2 <__retarget_lock_acquire_recursive>
 8009a32:	bf00      	nop
 8009a34:	20002bec 	.word	0x20002bec

08009a38 <__sfp_lock_release>:
 8009a38:	4801      	ldr	r0, [pc, #4]	; (8009a40 <__sfp_lock_release+0x8>)
 8009a3a:	f000 b8d3 	b.w	8009be4 <__retarget_lock_release_recursive>
 8009a3e:	bf00      	nop
 8009a40:	20002bec 	.word	0x20002bec

08009a44 <__sinit_lock_acquire>:
 8009a44:	4801      	ldr	r0, [pc, #4]	; (8009a4c <__sinit_lock_acquire+0x8>)
 8009a46:	f000 b8cc 	b.w	8009be2 <__retarget_lock_acquire_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	20002be7 	.word	0x20002be7

08009a50 <__sinit_lock_release>:
 8009a50:	4801      	ldr	r0, [pc, #4]	; (8009a58 <__sinit_lock_release+0x8>)
 8009a52:	f000 b8c7 	b.w	8009be4 <__retarget_lock_release_recursive>
 8009a56:	bf00      	nop
 8009a58:	20002be7 	.word	0x20002be7

08009a5c <__sinit>:
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	4604      	mov	r4, r0
 8009a60:	f7ff fff0 	bl	8009a44 <__sinit_lock_acquire>
 8009a64:	69a3      	ldr	r3, [r4, #24]
 8009a66:	b11b      	cbz	r3, 8009a70 <__sinit+0x14>
 8009a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a6c:	f7ff bff0 	b.w	8009a50 <__sinit_lock_release>
 8009a70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a74:	6523      	str	r3, [r4, #80]	; 0x50
 8009a76:	4b13      	ldr	r3, [pc, #76]	; (8009ac4 <__sinit+0x68>)
 8009a78:	4a13      	ldr	r2, [pc, #76]	; (8009ac8 <__sinit+0x6c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a7e:	42a3      	cmp	r3, r4
 8009a80:	bf04      	itt	eq
 8009a82:	2301      	moveq	r3, #1
 8009a84:	61a3      	streq	r3, [r4, #24]
 8009a86:	4620      	mov	r0, r4
 8009a88:	f000 f820 	bl	8009acc <__sfp>
 8009a8c:	6060      	str	r0, [r4, #4]
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f000 f81c 	bl	8009acc <__sfp>
 8009a94:	60a0      	str	r0, [r4, #8]
 8009a96:	4620      	mov	r0, r4
 8009a98:	f000 f818 	bl	8009acc <__sfp>
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	60e0      	str	r0, [r4, #12]
 8009aa0:	2104      	movs	r1, #4
 8009aa2:	6860      	ldr	r0, [r4, #4]
 8009aa4:	f7ff ff82 	bl	80099ac <std>
 8009aa8:	68a0      	ldr	r0, [r4, #8]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	2109      	movs	r1, #9
 8009aae:	f7ff ff7d 	bl	80099ac <std>
 8009ab2:	68e0      	ldr	r0, [r4, #12]
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	2112      	movs	r1, #18
 8009ab8:	f7ff ff78 	bl	80099ac <std>
 8009abc:	2301      	movs	r3, #1
 8009abe:	61a3      	str	r3, [r4, #24]
 8009ac0:	e7d2      	b.n	8009a68 <__sinit+0xc>
 8009ac2:	bf00      	nop
 8009ac4:	0800beb0 	.word	0x0800beb0
 8009ac8:	080099f5 	.word	0x080099f5

08009acc <__sfp>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	4607      	mov	r7, r0
 8009ad0:	f7ff ffac 	bl	8009a2c <__sfp_lock_acquire>
 8009ad4:	4b1e      	ldr	r3, [pc, #120]	; (8009b50 <__sfp+0x84>)
 8009ad6:	681e      	ldr	r6, [r3, #0]
 8009ad8:	69b3      	ldr	r3, [r6, #24]
 8009ada:	b913      	cbnz	r3, 8009ae2 <__sfp+0x16>
 8009adc:	4630      	mov	r0, r6
 8009ade:	f7ff ffbd 	bl	8009a5c <__sinit>
 8009ae2:	3648      	adds	r6, #72	; 0x48
 8009ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	d503      	bpl.n	8009af4 <__sfp+0x28>
 8009aec:	6833      	ldr	r3, [r6, #0]
 8009aee:	b30b      	cbz	r3, 8009b34 <__sfp+0x68>
 8009af0:	6836      	ldr	r6, [r6, #0]
 8009af2:	e7f7      	b.n	8009ae4 <__sfp+0x18>
 8009af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009af8:	b9d5      	cbnz	r5, 8009b30 <__sfp+0x64>
 8009afa:	4b16      	ldr	r3, [pc, #88]	; (8009b54 <__sfp+0x88>)
 8009afc:	60e3      	str	r3, [r4, #12]
 8009afe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b02:	6665      	str	r5, [r4, #100]	; 0x64
 8009b04:	f000 f86c 	bl	8009be0 <__retarget_lock_init_recursive>
 8009b08:	f7ff ff96 	bl	8009a38 <__sfp_lock_release>
 8009b0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b14:	6025      	str	r5, [r4, #0]
 8009b16:	61a5      	str	r5, [r4, #24]
 8009b18:	2208      	movs	r2, #8
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b20:	f000 f8dc 	bl	8009cdc <memset>
 8009b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b30:	3468      	adds	r4, #104	; 0x68
 8009b32:	e7d9      	b.n	8009ae8 <__sfp+0x1c>
 8009b34:	2104      	movs	r1, #4
 8009b36:	4638      	mov	r0, r7
 8009b38:	f7ff ff62 	bl	8009a00 <__sfmoreglue>
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	6030      	str	r0, [r6, #0]
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d1d5      	bne.n	8009af0 <__sfp+0x24>
 8009b44:	f7ff ff78 	bl	8009a38 <__sfp_lock_release>
 8009b48:	230c      	movs	r3, #12
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	e7ee      	b.n	8009b2c <__sfp+0x60>
 8009b4e:	bf00      	nop
 8009b50:	0800beb0 	.word	0x0800beb0
 8009b54:	ffff0001 	.word	0xffff0001

08009b58 <_fwalk_reent>:
 8009b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	4688      	mov	r8, r1
 8009b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b64:	2700      	movs	r7, #0
 8009b66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b6a:	f1b9 0901 	subs.w	r9, r9, #1
 8009b6e:	d505      	bpl.n	8009b7c <_fwalk_reent+0x24>
 8009b70:	6824      	ldr	r4, [r4, #0]
 8009b72:	2c00      	cmp	r4, #0
 8009b74:	d1f7      	bne.n	8009b66 <_fwalk_reent+0xe>
 8009b76:	4638      	mov	r0, r7
 8009b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b7c:	89ab      	ldrh	r3, [r5, #12]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d907      	bls.n	8009b92 <_fwalk_reent+0x3a>
 8009b82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b86:	3301      	adds	r3, #1
 8009b88:	d003      	beq.n	8009b92 <_fwalk_reent+0x3a>
 8009b8a:	4629      	mov	r1, r5
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	47c0      	blx	r8
 8009b90:	4307      	orrs	r7, r0
 8009b92:	3568      	adds	r5, #104	; 0x68
 8009b94:	e7e9      	b.n	8009b6a <_fwalk_reent+0x12>
	...

08009b98 <__libc_init_array>:
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	4d0d      	ldr	r5, [pc, #52]	; (8009bd0 <__libc_init_array+0x38>)
 8009b9c:	4c0d      	ldr	r4, [pc, #52]	; (8009bd4 <__libc_init_array+0x3c>)
 8009b9e:	1b64      	subs	r4, r4, r5
 8009ba0:	10a4      	asrs	r4, r4, #2
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	42a6      	cmp	r6, r4
 8009ba6:	d109      	bne.n	8009bbc <__libc_init_array+0x24>
 8009ba8:	4d0b      	ldr	r5, [pc, #44]	; (8009bd8 <__libc_init_array+0x40>)
 8009baa:	4c0c      	ldr	r4, [pc, #48]	; (8009bdc <__libc_init_array+0x44>)
 8009bac:	f000 fec4 	bl	800a938 <_init>
 8009bb0:	1b64      	subs	r4, r4, r5
 8009bb2:	10a4      	asrs	r4, r4, #2
 8009bb4:	2600      	movs	r6, #0
 8009bb6:	42a6      	cmp	r6, r4
 8009bb8:	d105      	bne.n	8009bc6 <__libc_init_array+0x2e>
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc0:	4798      	blx	r3
 8009bc2:	3601      	adds	r6, #1
 8009bc4:	e7ee      	b.n	8009ba4 <__libc_init_array+0xc>
 8009bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bca:	4798      	blx	r3
 8009bcc:	3601      	adds	r6, #1
 8009bce:	e7f2      	b.n	8009bb6 <__libc_init_array+0x1e>
 8009bd0:	0800bef0 	.word	0x0800bef0
 8009bd4:	0800bef0 	.word	0x0800bef0
 8009bd8:	0800bef0 	.word	0x0800bef0
 8009bdc:	0800bef4 	.word	0x0800bef4

08009be0 <__retarget_lock_init_recursive>:
 8009be0:	4770      	bx	lr

08009be2 <__retarget_lock_acquire_recursive>:
 8009be2:	4770      	bx	lr

08009be4 <__retarget_lock_release_recursive>:
 8009be4:	4770      	bx	lr

08009be6 <__swhatbuf_r>:
 8009be6:	b570      	push	{r4, r5, r6, lr}
 8009be8:	460e      	mov	r6, r1
 8009bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bee:	2900      	cmp	r1, #0
 8009bf0:	b096      	sub	sp, #88	; 0x58
 8009bf2:	4614      	mov	r4, r2
 8009bf4:	461d      	mov	r5, r3
 8009bf6:	da07      	bge.n	8009c08 <__swhatbuf_r+0x22>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	602b      	str	r3, [r5, #0]
 8009bfc:	89b3      	ldrh	r3, [r6, #12]
 8009bfe:	061a      	lsls	r2, r3, #24
 8009c00:	d410      	bmi.n	8009c24 <__swhatbuf_r+0x3e>
 8009c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c06:	e00e      	b.n	8009c26 <__swhatbuf_r+0x40>
 8009c08:	466a      	mov	r2, sp
 8009c0a:	f000 fb0b 	bl	800a224 <_fstat_r>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	dbf2      	blt.n	8009bf8 <__swhatbuf_r+0x12>
 8009c12:	9a01      	ldr	r2, [sp, #4]
 8009c14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c1c:	425a      	negs	r2, r3
 8009c1e:	415a      	adcs	r2, r3
 8009c20:	602a      	str	r2, [r5, #0]
 8009c22:	e7ee      	b.n	8009c02 <__swhatbuf_r+0x1c>
 8009c24:	2340      	movs	r3, #64	; 0x40
 8009c26:	2000      	movs	r0, #0
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	b016      	add	sp, #88	; 0x58
 8009c2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c30 <__smakebuf_r>:
 8009c30:	898b      	ldrh	r3, [r1, #12]
 8009c32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c34:	079d      	lsls	r5, r3, #30
 8009c36:	4606      	mov	r6, r0
 8009c38:	460c      	mov	r4, r1
 8009c3a:	d507      	bpl.n	8009c4c <__smakebuf_r+0x1c>
 8009c3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	6123      	str	r3, [r4, #16]
 8009c44:	2301      	movs	r3, #1
 8009c46:	6163      	str	r3, [r4, #20]
 8009c48:	b002      	add	sp, #8
 8009c4a:	bd70      	pop	{r4, r5, r6, pc}
 8009c4c:	ab01      	add	r3, sp, #4
 8009c4e:	466a      	mov	r2, sp
 8009c50:	f7ff ffc9 	bl	8009be6 <__swhatbuf_r>
 8009c54:	9900      	ldr	r1, [sp, #0]
 8009c56:	4605      	mov	r5, r0
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f000 f897 	bl	8009d8c <_malloc_r>
 8009c5e:	b948      	cbnz	r0, 8009c74 <__smakebuf_r+0x44>
 8009c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c64:	059a      	lsls	r2, r3, #22
 8009c66:	d4ef      	bmi.n	8009c48 <__smakebuf_r+0x18>
 8009c68:	f023 0303 	bic.w	r3, r3, #3
 8009c6c:	f043 0302 	orr.w	r3, r3, #2
 8009c70:	81a3      	strh	r3, [r4, #12]
 8009c72:	e7e3      	b.n	8009c3c <__smakebuf_r+0xc>
 8009c74:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <__smakebuf_r+0x7c>)
 8009c76:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	6020      	str	r0, [r4, #0]
 8009c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	9b00      	ldr	r3, [sp, #0]
 8009c84:	6163      	str	r3, [r4, #20]
 8009c86:	9b01      	ldr	r3, [sp, #4]
 8009c88:	6120      	str	r0, [r4, #16]
 8009c8a:	b15b      	cbz	r3, 8009ca4 <__smakebuf_r+0x74>
 8009c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c90:	4630      	mov	r0, r6
 8009c92:	f000 fad9 	bl	800a248 <_isatty_r>
 8009c96:	b128      	cbz	r0, 8009ca4 <__smakebuf_r+0x74>
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	f023 0303 	bic.w	r3, r3, #3
 8009c9e:	f043 0301 	orr.w	r3, r3, #1
 8009ca2:	81a3      	strh	r3, [r4, #12]
 8009ca4:	89a0      	ldrh	r0, [r4, #12]
 8009ca6:	4305      	orrs	r5, r0
 8009ca8:	81a5      	strh	r5, [r4, #12]
 8009caa:	e7cd      	b.n	8009c48 <__smakebuf_r+0x18>
 8009cac:	080099f5 	.word	0x080099f5

08009cb0 <malloc>:
 8009cb0:	4b02      	ldr	r3, [pc, #8]	; (8009cbc <malloc+0xc>)
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	6818      	ldr	r0, [r3, #0]
 8009cb6:	f000 b869 	b.w	8009d8c <_malloc_r>
 8009cba:	bf00      	nop
 8009cbc:	20000154 	.word	0x20000154

08009cc0 <memcpy>:
 8009cc0:	440a      	add	r2, r1
 8009cc2:	4291      	cmp	r1, r2
 8009cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cc8:	d100      	bne.n	8009ccc <memcpy+0xc>
 8009cca:	4770      	bx	lr
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cd6:	4291      	cmp	r1, r2
 8009cd8:	d1f9      	bne.n	8009cce <memcpy+0xe>
 8009cda:	bd10      	pop	{r4, pc}

08009cdc <memset>:
 8009cdc:	4402      	add	r2, r0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d100      	bne.n	8009ce6 <memset+0xa>
 8009ce4:	4770      	bx	lr
 8009ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cea:	e7f9      	b.n	8009ce0 <memset+0x4>

08009cec <_free_r>:
 8009cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cee:	2900      	cmp	r1, #0
 8009cf0:	d048      	beq.n	8009d84 <_free_r+0x98>
 8009cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf6:	9001      	str	r0, [sp, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f1a1 0404 	sub.w	r4, r1, #4
 8009cfe:	bfb8      	it	lt
 8009d00:	18e4      	addlt	r4, r4, r3
 8009d02:	f000 fac3 	bl	800a28c <__malloc_lock>
 8009d06:	4a20      	ldr	r2, [pc, #128]	; (8009d88 <_free_r+0x9c>)
 8009d08:	9801      	ldr	r0, [sp, #4]
 8009d0a:	6813      	ldr	r3, [r2, #0]
 8009d0c:	4615      	mov	r5, r2
 8009d0e:	b933      	cbnz	r3, 8009d1e <_free_r+0x32>
 8009d10:	6063      	str	r3, [r4, #4]
 8009d12:	6014      	str	r4, [r2, #0]
 8009d14:	b003      	add	sp, #12
 8009d16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d1a:	f000 babd 	b.w	800a298 <__malloc_unlock>
 8009d1e:	42a3      	cmp	r3, r4
 8009d20:	d90b      	bls.n	8009d3a <_free_r+0x4e>
 8009d22:	6821      	ldr	r1, [r4, #0]
 8009d24:	1862      	adds	r2, r4, r1
 8009d26:	4293      	cmp	r3, r2
 8009d28:	bf04      	itt	eq
 8009d2a:	681a      	ldreq	r2, [r3, #0]
 8009d2c:	685b      	ldreq	r3, [r3, #4]
 8009d2e:	6063      	str	r3, [r4, #4]
 8009d30:	bf04      	itt	eq
 8009d32:	1852      	addeq	r2, r2, r1
 8009d34:	6022      	streq	r2, [r4, #0]
 8009d36:	602c      	str	r4, [r5, #0]
 8009d38:	e7ec      	b.n	8009d14 <_free_r+0x28>
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	b10b      	cbz	r3, 8009d44 <_free_r+0x58>
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	d9fa      	bls.n	8009d3a <_free_r+0x4e>
 8009d44:	6811      	ldr	r1, [r2, #0]
 8009d46:	1855      	adds	r5, r2, r1
 8009d48:	42a5      	cmp	r5, r4
 8009d4a:	d10b      	bne.n	8009d64 <_free_r+0x78>
 8009d4c:	6824      	ldr	r4, [r4, #0]
 8009d4e:	4421      	add	r1, r4
 8009d50:	1854      	adds	r4, r2, r1
 8009d52:	42a3      	cmp	r3, r4
 8009d54:	6011      	str	r1, [r2, #0]
 8009d56:	d1dd      	bne.n	8009d14 <_free_r+0x28>
 8009d58:	681c      	ldr	r4, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	6053      	str	r3, [r2, #4]
 8009d5e:	4421      	add	r1, r4
 8009d60:	6011      	str	r1, [r2, #0]
 8009d62:	e7d7      	b.n	8009d14 <_free_r+0x28>
 8009d64:	d902      	bls.n	8009d6c <_free_r+0x80>
 8009d66:	230c      	movs	r3, #12
 8009d68:	6003      	str	r3, [r0, #0]
 8009d6a:	e7d3      	b.n	8009d14 <_free_r+0x28>
 8009d6c:	6825      	ldr	r5, [r4, #0]
 8009d6e:	1961      	adds	r1, r4, r5
 8009d70:	428b      	cmp	r3, r1
 8009d72:	bf04      	itt	eq
 8009d74:	6819      	ldreq	r1, [r3, #0]
 8009d76:	685b      	ldreq	r3, [r3, #4]
 8009d78:	6063      	str	r3, [r4, #4]
 8009d7a:	bf04      	itt	eq
 8009d7c:	1949      	addeq	r1, r1, r5
 8009d7e:	6021      	streq	r1, [r4, #0]
 8009d80:	6054      	str	r4, [r2, #4]
 8009d82:	e7c7      	b.n	8009d14 <_free_r+0x28>
 8009d84:	b003      	add	sp, #12
 8009d86:	bd30      	pop	{r4, r5, pc}
 8009d88:	200021c0 	.word	0x200021c0

08009d8c <_malloc_r>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	1ccd      	adds	r5, r1, #3
 8009d90:	f025 0503 	bic.w	r5, r5, #3
 8009d94:	3508      	adds	r5, #8
 8009d96:	2d0c      	cmp	r5, #12
 8009d98:	bf38      	it	cc
 8009d9a:	250c      	movcc	r5, #12
 8009d9c:	2d00      	cmp	r5, #0
 8009d9e:	4606      	mov	r6, r0
 8009da0:	db01      	blt.n	8009da6 <_malloc_r+0x1a>
 8009da2:	42a9      	cmp	r1, r5
 8009da4:	d903      	bls.n	8009dae <_malloc_r+0x22>
 8009da6:	230c      	movs	r3, #12
 8009da8:	6033      	str	r3, [r6, #0]
 8009daa:	2000      	movs	r0, #0
 8009dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dae:	f000 fa6d 	bl	800a28c <__malloc_lock>
 8009db2:	4921      	ldr	r1, [pc, #132]	; (8009e38 <_malloc_r+0xac>)
 8009db4:	680a      	ldr	r2, [r1, #0]
 8009db6:	4614      	mov	r4, r2
 8009db8:	b99c      	cbnz	r4, 8009de2 <_malloc_r+0x56>
 8009dba:	4f20      	ldr	r7, [pc, #128]	; (8009e3c <_malloc_r+0xb0>)
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	b923      	cbnz	r3, 8009dca <_malloc_r+0x3e>
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f000 f8b2 	bl	8009f2c <_sbrk_r>
 8009dc8:	6038      	str	r0, [r7, #0]
 8009dca:	4629      	mov	r1, r5
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f000 f8ad 	bl	8009f2c <_sbrk_r>
 8009dd2:	1c43      	adds	r3, r0, #1
 8009dd4:	d123      	bne.n	8009e1e <_malloc_r+0x92>
 8009dd6:	230c      	movs	r3, #12
 8009dd8:	6033      	str	r3, [r6, #0]
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f000 fa5c 	bl	800a298 <__malloc_unlock>
 8009de0:	e7e3      	b.n	8009daa <_malloc_r+0x1e>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	1b5b      	subs	r3, r3, r5
 8009de6:	d417      	bmi.n	8009e18 <_malloc_r+0x8c>
 8009de8:	2b0b      	cmp	r3, #11
 8009dea:	d903      	bls.n	8009df4 <_malloc_r+0x68>
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	441c      	add	r4, r3
 8009df0:	6025      	str	r5, [r4, #0]
 8009df2:	e004      	b.n	8009dfe <_malloc_r+0x72>
 8009df4:	6863      	ldr	r3, [r4, #4]
 8009df6:	42a2      	cmp	r2, r4
 8009df8:	bf0c      	ite	eq
 8009dfa:	600b      	streq	r3, [r1, #0]
 8009dfc:	6053      	strne	r3, [r2, #4]
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f000 fa4a 	bl	800a298 <__malloc_unlock>
 8009e04:	f104 000b 	add.w	r0, r4, #11
 8009e08:	1d23      	adds	r3, r4, #4
 8009e0a:	f020 0007 	bic.w	r0, r0, #7
 8009e0e:	1ac2      	subs	r2, r0, r3
 8009e10:	d0cc      	beq.n	8009dac <_malloc_r+0x20>
 8009e12:	1a1b      	subs	r3, r3, r0
 8009e14:	50a3      	str	r3, [r4, r2]
 8009e16:	e7c9      	b.n	8009dac <_malloc_r+0x20>
 8009e18:	4622      	mov	r2, r4
 8009e1a:	6864      	ldr	r4, [r4, #4]
 8009e1c:	e7cc      	b.n	8009db8 <_malloc_r+0x2c>
 8009e1e:	1cc4      	adds	r4, r0, #3
 8009e20:	f024 0403 	bic.w	r4, r4, #3
 8009e24:	42a0      	cmp	r0, r4
 8009e26:	d0e3      	beq.n	8009df0 <_malloc_r+0x64>
 8009e28:	1a21      	subs	r1, r4, r0
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f000 f87e 	bl	8009f2c <_sbrk_r>
 8009e30:	3001      	adds	r0, #1
 8009e32:	d1dd      	bne.n	8009df0 <_malloc_r+0x64>
 8009e34:	e7cf      	b.n	8009dd6 <_malloc_r+0x4a>
 8009e36:	bf00      	nop
 8009e38:	200021c0 	.word	0x200021c0
 8009e3c:	200021c4 	.word	0x200021c4

08009e40 <_puts_r>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	460e      	mov	r6, r1
 8009e44:	4605      	mov	r5, r0
 8009e46:	b118      	cbz	r0, 8009e50 <_puts_r+0x10>
 8009e48:	6983      	ldr	r3, [r0, #24]
 8009e4a:	b90b      	cbnz	r3, 8009e50 <_puts_r+0x10>
 8009e4c:	f7ff fe06 	bl	8009a5c <__sinit>
 8009e50:	69ab      	ldr	r3, [r5, #24]
 8009e52:	68ac      	ldr	r4, [r5, #8]
 8009e54:	b913      	cbnz	r3, 8009e5c <_puts_r+0x1c>
 8009e56:	4628      	mov	r0, r5
 8009e58:	f7ff fe00 	bl	8009a5c <__sinit>
 8009e5c:	4b2c      	ldr	r3, [pc, #176]	; (8009f10 <_puts_r+0xd0>)
 8009e5e:	429c      	cmp	r4, r3
 8009e60:	d120      	bne.n	8009ea4 <_puts_r+0x64>
 8009e62:	686c      	ldr	r4, [r5, #4]
 8009e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e66:	07db      	lsls	r3, r3, #31
 8009e68:	d405      	bmi.n	8009e76 <_puts_r+0x36>
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	0598      	lsls	r0, r3, #22
 8009e6e:	d402      	bmi.n	8009e76 <_puts_r+0x36>
 8009e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e72:	f7ff feb6 	bl	8009be2 <__retarget_lock_acquire_recursive>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	0719      	lsls	r1, r3, #28
 8009e7a:	d51d      	bpl.n	8009eb8 <_puts_r+0x78>
 8009e7c:	6923      	ldr	r3, [r4, #16]
 8009e7e:	b1db      	cbz	r3, 8009eb8 <_puts_r+0x78>
 8009e80:	3e01      	subs	r6, #1
 8009e82:	68a3      	ldr	r3, [r4, #8]
 8009e84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	60a3      	str	r3, [r4, #8]
 8009e8c:	bb39      	cbnz	r1, 8009ede <_puts_r+0x9e>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	da38      	bge.n	8009f04 <_puts_r+0xc4>
 8009e92:	4622      	mov	r2, r4
 8009e94:	210a      	movs	r1, #10
 8009e96:	4628      	mov	r0, r5
 8009e98:	f000 f8e2 	bl	800a060 <__swbuf_r>
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	d011      	beq.n	8009ec4 <_puts_r+0x84>
 8009ea0:	250a      	movs	r5, #10
 8009ea2:	e011      	b.n	8009ec8 <_puts_r+0x88>
 8009ea4:	4b1b      	ldr	r3, [pc, #108]	; (8009f14 <_puts_r+0xd4>)
 8009ea6:	429c      	cmp	r4, r3
 8009ea8:	d101      	bne.n	8009eae <_puts_r+0x6e>
 8009eaa:	68ac      	ldr	r4, [r5, #8]
 8009eac:	e7da      	b.n	8009e64 <_puts_r+0x24>
 8009eae:	4b1a      	ldr	r3, [pc, #104]	; (8009f18 <_puts_r+0xd8>)
 8009eb0:	429c      	cmp	r4, r3
 8009eb2:	bf08      	it	eq
 8009eb4:	68ec      	ldreq	r4, [r5, #12]
 8009eb6:	e7d5      	b.n	8009e64 <_puts_r+0x24>
 8009eb8:	4621      	mov	r1, r4
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f000 f934 	bl	800a128 <__swsetup_r>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d0dd      	beq.n	8009e80 <_puts_r+0x40>
 8009ec4:	f04f 35ff 	mov.w	r5, #4294967295
 8009ec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009eca:	07da      	lsls	r2, r3, #31
 8009ecc:	d405      	bmi.n	8009eda <_puts_r+0x9a>
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	059b      	lsls	r3, r3, #22
 8009ed2:	d402      	bmi.n	8009eda <_puts_r+0x9a>
 8009ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ed6:	f7ff fe85 	bl	8009be4 <__retarget_lock_release_recursive>
 8009eda:	4628      	mov	r0, r5
 8009edc:	bd70      	pop	{r4, r5, r6, pc}
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da04      	bge.n	8009eec <_puts_r+0xac>
 8009ee2:	69a2      	ldr	r2, [r4, #24]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	dc06      	bgt.n	8009ef6 <_puts_r+0xb6>
 8009ee8:	290a      	cmp	r1, #10
 8009eea:	d004      	beq.n	8009ef6 <_puts_r+0xb6>
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	6022      	str	r2, [r4, #0]
 8009ef2:	7019      	strb	r1, [r3, #0]
 8009ef4:	e7c5      	b.n	8009e82 <_puts_r+0x42>
 8009ef6:	4622      	mov	r2, r4
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f000 f8b1 	bl	800a060 <__swbuf_r>
 8009efe:	3001      	adds	r0, #1
 8009f00:	d1bf      	bne.n	8009e82 <_puts_r+0x42>
 8009f02:	e7df      	b.n	8009ec4 <_puts_r+0x84>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	250a      	movs	r5, #10
 8009f08:	1c5a      	adds	r2, r3, #1
 8009f0a:	6022      	str	r2, [r4, #0]
 8009f0c:	701d      	strb	r5, [r3, #0]
 8009f0e:	e7db      	b.n	8009ec8 <_puts_r+0x88>
 8009f10:	0800be70 	.word	0x0800be70
 8009f14:	0800be90 	.word	0x0800be90
 8009f18:	0800be50 	.word	0x0800be50

08009f1c <puts>:
 8009f1c:	4b02      	ldr	r3, [pc, #8]	; (8009f28 <puts+0xc>)
 8009f1e:	4601      	mov	r1, r0
 8009f20:	6818      	ldr	r0, [r3, #0]
 8009f22:	f7ff bf8d 	b.w	8009e40 <_puts_r>
 8009f26:	bf00      	nop
 8009f28:	20000154 	.word	0x20000154

08009f2c <_sbrk_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4d06      	ldr	r5, [pc, #24]	; (8009f48 <_sbrk_r+0x1c>)
 8009f30:	2300      	movs	r3, #0
 8009f32:	4604      	mov	r4, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	602b      	str	r3, [r5, #0]
 8009f38:	f7f8 fc98 	bl	800286c <_sbrk>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_sbrk_r+0x1a>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_sbrk_r+0x1a>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20002bf0 	.word	0x20002bf0

08009f4c <sniprintf>:
 8009f4c:	b40c      	push	{r2, r3}
 8009f4e:	b530      	push	{r4, r5, lr}
 8009f50:	4b17      	ldr	r3, [pc, #92]	; (8009fb0 <sniprintf+0x64>)
 8009f52:	1e0c      	subs	r4, r1, #0
 8009f54:	681d      	ldr	r5, [r3, #0]
 8009f56:	b09d      	sub	sp, #116	; 0x74
 8009f58:	da08      	bge.n	8009f6c <sniprintf+0x20>
 8009f5a:	238b      	movs	r3, #139	; 0x8b
 8009f5c:	602b      	str	r3, [r5, #0]
 8009f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f62:	b01d      	add	sp, #116	; 0x74
 8009f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f68:	b002      	add	sp, #8
 8009f6a:	4770      	bx	lr
 8009f6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009f70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009f74:	bf14      	ite	ne
 8009f76:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f7a:	4623      	moveq	r3, r4
 8009f7c:	9304      	str	r3, [sp, #16]
 8009f7e:	9307      	str	r3, [sp, #28]
 8009f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f84:	9002      	str	r0, [sp, #8]
 8009f86:	9006      	str	r0, [sp, #24]
 8009f88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009f8e:	ab21      	add	r3, sp, #132	; 0x84
 8009f90:	a902      	add	r1, sp, #8
 8009f92:	4628      	mov	r0, r5
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	f000 fa07 	bl	800a3a8 <_svfiprintf_r>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	bfbc      	itt	lt
 8009f9e:	238b      	movlt	r3, #139	; 0x8b
 8009fa0:	602b      	strlt	r3, [r5, #0]
 8009fa2:	2c00      	cmp	r4, #0
 8009fa4:	d0dd      	beq.n	8009f62 <sniprintf+0x16>
 8009fa6:	9b02      	ldr	r3, [sp, #8]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	701a      	strb	r2, [r3, #0]
 8009fac:	e7d9      	b.n	8009f62 <sniprintf+0x16>
 8009fae:	bf00      	nop
 8009fb0:	20000154 	.word	0x20000154

08009fb4 <__sread>:
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fbc:	f000 fc88 	bl	800a8d0 <_read_r>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	bfab      	itete	ge
 8009fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8009fc8:	181b      	addge	r3, r3, r0
 8009fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fce:	bfac      	ite	ge
 8009fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fd2:	81a3      	strhlt	r3, [r4, #12]
 8009fd4:	bd10      	pop	{r4, pc}

08009fd6 <__swrite>:
 8009fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fda:	461f      	mov	r7, r3
 8009fdc:	898b      	ldrh	r3, [r1, #12]
 8009fde:	05db      	lsls	r3, r3, #23
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	4616      	mov	r6, r2
 8009fe6:	d505      	bpl.n	8009ff4 <__swrite+0x1e>
 8009fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fec:	2302      	movs	r3, #2
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f000 f93a 	bl	800a268 <_lseek_r>
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ffe:	81a3      	strh	r3, [r4, #12]
 800a000:	4632      	mov	r2, r6
 800a002:	463b      	mov	r3, r7
 800a004:	4628      	mov	r0, r5
 800a006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a00a:	f000 b87b 	b.w	800a104 <_write_r>

0800a00e <__sseek>:
 800a00e:	b510      	push	{r4, lr}
 800a010:	460c      	mov	r4, r1
 800a012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a016:	f000 f927 	bl	800a268 <_lseek_r>
 800a01a:	1c43      	adds	r3, r0, #1
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	bf15      	itete	ne
 800a020:	6560      	strne	r0, [r4, #84]	; 0x54
 800a022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a02a:	81a3      	strheq	r3, [r4, #12]
 800a02c:	bf18      	it	ne
 800a02e:	81a3      	strhne	r3, [r4, #12]
 800a030:	bd10      	pop	{r4, pc}

0800a032 <__sclose>:
 800a032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a036:	f000 b8e5 	b.w	800a204 <_close_r>

0800a03a <strncpy>:
 800a03a:	b510      	push	{r4, lr}
 800a03c:	3901      	subs	r1, #1
 800a03e:	4603      	mov	r3, r0
 800a040:	b132      	cbz	r2, 800a050 <strncpy+0x16>
 800a042:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a046:	f803 4b01 	strb.w	r4, [r3], #1
 800a04a:	3a01      	subs	r2, #1
 800a04c:	2c00      	cmp	r4, #0
 800a04e:	d1f7      	bne.n	800a040 <strncpy+0x6>
 800a050:	441a      	add	r2, r3
 800a052:	2100      	movs	r1, #0
 800a054:	4293      	cmp	r3, r2
 800a056:	d100      	bne.n	800a05a <strncpy+0x20>
 800a058:	bd10      	pop	{r4, pc}
 800a05a:	f803 1b01 	strb.w	r1, [r3], #1
 800a05e:	e7f9      	b.n	800a054 <strncpy+0x1a>

0800a060 <__swbuf_r>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	460e      	mov	r6, r1
 800a064:	4614      	mov	r4, r2
 800a066:	4605      	mov	r5, r0
 800a068:	b118      	cbz	r0, 800a072 <__swbuf_r+0x12>
 800a06a:	6983      	ldr	r3, [r0, #24]
 800a06c:	b90b      	cbnz	r3, 800a072 <__swbuf_r+0x12>
 800a06e:	f7ff fcf5 	bl	8009a5c <__sinit>
 800a072:	4b21      	ldr	r3, [pc, #132]	; (800a0f8 <__swbuf_r+0x98>)
 800a074:	429c      	cmp	r4, r3
 800a076:	d12b      	bne.n	800a0d0 <__swbuf_r+0x70>
 800a078:	686c      	ldr	r4, [r5, #4]
 800a07a:	69a3      	ldr	r3, [r4, #24]
 800a07c:	60a3      	str	r3, [r4, #8]
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	071a      	lsls	r2, r3, #28
 800a082:	d52f      	bpl.n	800a0e4 <__swbuf_r+0x84>
 800a084:	6923      	ldr	r3, [r4, #16]
 800a086:	b36b      	cbz	r3, 800a0e4 <__swbuf_r+0x84>
 800a088:	6923      	ldr	r3, [r4, #16]
 800a08a:	6820      	ldr	r0, [r4, #0]
 800a08c:	1ac0      	subs	r0, r0, r3
 800a08e:	6963      	ldr	r3, [r4, #20]
 800a090:	b2f6      	uxtb	r6, r6
 800a092:	4283      	cmp	r3, r0
 800a094:	4637      	mov	r7, r6
 800a096:	dc04      	bgt.n	800a0a2 <__swbuf_r+0x42>
 800a098:	4621      	mov	r1, r4
 800a09a:	4628      	mov	r0, r5
 800a09c:	f7ff fc4a 	bl	8009934 <_fflush_r>
 800a0a0:	bb30      	cbnz	r0, 800a0f0 <__swbuf_r+0x90>
 800a0a2:	68a3      	ldr	r3, [r4, #8]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	60a3      	str	r3, [r4, #8]
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	6022      	str	r2, [r4, #0]
 800a0ae:	701e      	strb	r6, [r3, #0]
 800a0b0:	6963      	ldr	r3, [r4, #20]
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	4283      	cmp	r3, r0
 800a0b6:	d004      	beq.n	800a0c2 <__swbuf_r+0x62>
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	07db      	lsls	r3, r3, #31
 800a0bc:	d506      	bpl.n	800a0cc <__swbuf_r+0x6c>
 800a0be:	2e0a      	cmp	r6, #10
 800a0c0:	d104      	bne.n	800a0cc <__swbuf_r+0x6c>
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f7ff fc35 	bl	8009934 <_fflush_r>
 800a0ca:	b988      	cbnz	r0, 800a0f0 <__swbuf_r+0x90>
 800a0cc:	4638      	mov	r0, r7
 800a0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d0:	4b0a      	ldr	r3, [pc, #40]	; (800a0fc <__swbuf_r+0x9c>)
 800a0d2:	429c      	cmp	r4, r3
 800a0d4:	d101      	bne.n	800a0da <__swbuf_r+0x7a>
 800a0d6:	68ac      	ldr	r4, [r5, #8]
 800a0d8:	e7cf      	b.n	800a07a <__swbuf_r+0x1a>
 800a0da:	4b09      	ldr	r3, [pc, #36]	; (800a100 <__swbuf_r+0xa0>)
 800a0dc:	429c      	cmp	r4, r3
 800a0de:	bf08      	it	eq
 800a0e0:	68ec      	ldreq	r4, [r5, #12]
 800a0e2:	e7ca      	b.n	800a07a <__swbuf_r+0x1a>
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f000 f81e 	bl	800a128 <__swsetup_r>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d0cb      	beq.n	800a088 <__swbuf_r+0x28>
 800a0f0:	f04f 37ff 	mov.w	r7, #4294967295
 800a0f4:	e7ea      	b.n	800a0cc <__swbuf_r+0x6c>
 800a0f6:	bf00      	nop
 800a0f8:	0800be70 	.word	0x0800be70
 800a0fc:	0800be90 	.word	0x0800be90
 800a100:	0800be50 	.word	0x0800be50

0800a104 <_write_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d07      	ldr	r5, [pc, #28]	; (800a124 <_write_r+0x20>)
 800a108:	4604      	mov	r4, r0
 800a10a:	4608      	mov	r0, r1
 800a10c:	4611      	mov	r1, r2
 800a10e:	2200      	movs	r2, #0
 800a110:	602a      	str	r2, [r5, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	f7f8 fb59 	bl	80027ca <_write>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_write_r+0x1e>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_write_r+0x1e>
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	20002bf0 	.word	0x20002bf0

0800a128 <__swsetup_r>:
 800a128:	4b32      	ldr	r3, [pc, #200]	; (800a1f4 <__swsetup_r+0xcc>)
 800a12a:	b570      	push	{r4, r5, r6, lr}
 800a12c:	681d      	ldr	r5, [r3, #0]
 800a12e:	4606      	mov	r6, r0
 800a130:	460c      	mov	r4, r1
 800a132:	b125      	cbz	r5, 800a13e <__swsetup_r+0x16>
 800a134:	69ab      	ldr	r3, [r5, #24]
 800a136:	b913      	cbnz	r3, 800a13e <__swsetup_r+0x16>
 800a138:	4628      	mov	r0, r5
 800a13a:	f7ff fc8f 	bl	8009a5c <__sinit>
 800a13e:	4b2e      	ldr	r3, [pc, #184]	; (800a1f8 <__swsetup_r+0xd0>)
 800a140:	429c      	cmp	r4, r3
 800a142:	d10f      	bne.n	800a164 <__swsetup_r+0x3c>
 800a144:	686c      	ldr	r4, [r5, #4]
 800a146:	89a3      	ldrh	r3, [r4, #12]
 800a148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a14c:	0719      	lsls	r1, r3, #28
 800a14e:	d42c      	bmi.n	800a1aa <__swsetup_r+0x82>
 800a150:	06dd      	lsls	r5, r3, #27
 800a152:	d411      	bmi.n	800a178 <__swsetup_r+0x50>
 800a154:	2309      	movs	r3, #9
 800a156:	6033      	str	r3, [r6, #0]
 800a158:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a15c:	81a3      	strh	r3, [r4, #12]
 800a15e:	f04f 30ff 	mov.w	r0, #4294967295
 800a162:	e03e      	b.n	800a1e2 <__swsetup_r+0xba>
 800a164:	4b25      	ldr	r3, [pc, #148]	; (800a1fc <__swsetup_r+0xd4>)
 800a166:	429c      	cmp	r4, r3
 800a168:	d101      	bne.n	800a16e <__swsetup_r+0x46>
 800a16a:	68ac      	ldr	r4, [r5, #8]
 800a16c:	e7eb      	b.n	800a146 <__swsetup_r+0x1e>
 800a16e:	4b24      	ldr	r3, [pc, #144]	; (800a200 <__swsetup_r+0xd8>)
 800a170:	429c      	cmp	r4, r3
 800a172:	bf08      	it	eq
 800a174:	68ec      	ldreq	r4, [r5, #12]
 800a176:	e7e6      	b.n	800a146 <__swsetup_r+0x1e>
 800a178:	0758      	lsls	r0, r3, #29
 800a17a:	d512      	bpl.n	800a1a2 <__swsetup_r+0x7a>
 800a17c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a17e:	b141      	cbz	r1, 800a192 <__swsetup_r+0x6a>
 800a180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a184:	4299      	cmp	r1, r3
 800a186:	d002      	beq.n	800a18e <__swsetup_r+0x66>
 800a188:	4630      	mov	r0, r6
 800a18a:	f7ff fdaf 	bl	8009cec <_free_r>
 800a18e:	2300      	movs	r3, #0
 800a190:	6363      	str	r3, [r4, #52]	; 0x34
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a198:	81a3      	strh	r3, [r4, #12]
 800a19a:	2300      	movs	r3, #0
 800a19c:	6063      	str	r3, [r4, #4]
 800a19e:	6923      	ldr	r3, [r4, #16]
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	f043 0308 	orr.w	r3, r3, #8
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	b94b      	cbnz	r3, 800a1c2 <__swsetup_r+0x9a>
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1b8:	d003      	beq.n	800a1c2 <__swsetup_r+0x9a>
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7ff fd37 	bl	8009c30 <__smakebuf_r>
 800a1c2:	89a0      	ldrh	r0, [r4, #12]
 800a1c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1c8:	f010 0301 	ands.w	r3, r0, #1
 800a1cc:	d00a      	beq.n	800a1e4 <__swsetup_r+0xbc>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	60a3      	str	r3, [r4, #8]
 800a1d2:	6963      	ldr	r3, [r4, #20]
 800a1d4:	425b      	negs	r3, r3
 800a1d6:	61a3      	str	r3, [r4, #24]
 800a1d8:	6923      	ldr	r3, [r4, #16]
 800a1da:	b943      	cbnz	r3, 800a1ee <__swsetup_r+0xc6>
 800a1dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1e0:	d1ba      	bne.n	800a158 <__swsetup_r+0x30>
 800a1e2:	bd70      	pop	{r4, r5, r6, pc}
 800a1e4:	0781      	lsls	r1, r0, #30
 800a1e6:	bf58      	it	pl
 800a1e8:	6963      	ldrpl	r3, [r4, #20]
 800a1ea:	60a3      	str	r3, [r4, #8]
 800a1ec:	e7f4      	b.n	800a1d8 <__swsetup_r+0xb0>
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	e7f7      	b.n	800a1e2 <__swsetup_r+0xba>
 800a1f2:	bf00      	nop
 800a1f4:	20000154 	.word	0x20000154
 800a1f8:	0800be70 	.word	0x0800be70
 800a1fc:	0800be90 	.word	0x0800be90
 800a200:	0800be50 	.word	0x0800be50

0800a204 <_close_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4d06      	ldr	r5, [pc, #24]	; (800a220 <_close_r+0x1c>)
 800a208:	2300      	movs	r3, #0
 800a20a:	4604      	mov	r4, r0
 800a20c:	4608      	mov	r0, r1
 800a20e:	602b      	str	r3, [r5, #0]
 800a210:	f7f8 faf7 	bl	8002802 <_close>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_close_r+0x1a>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_close_r+0x1a>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	20002bf0 	.word	0x20002bf0

0800a224 <_fstat_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d07      	ldr	r5, [pc, #28]	; (800a244 <_fstat_r+0x20>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	f7f8 faf2 	bl	800281a <_fstat>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d102      	bne.n	800a240 <_fstat_r+0x1c>
 800a23a:	682b      	ldr	r3, [r5, #0]
 800a23c:	b103      	cbz	r3, 800a240 <_fstat_r+0x1c>
 800a23e:	6023      	str	r3, [r4, #0]
 800a240:	bd38      	pop	{r3, r4, r5, pc}
 800a242:	bf00      	nop
 800a244:	20002bf0 	.word	0x20002bf0

0800a248 <_isatty_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d06      	ldr	r5, [pc, #24]	; (800a264 <_isatty_r+0x1c>)
 800a24c:	2300      	movs	r3, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	4608      	mov	r0, r1
 800a252:	602b      	str	r3, [r5, #0]
 800a254:	f7f8 faf1 	bl	800283a <_isatty>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_isatty_r+0x1a>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_isatty_r+0x1a>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	20002bf0 	.word	0x20002bf0

0800a268 <_lseek_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4d07      	ldr	r5, [pc, #28]	; (800a288 <_lseek_r+0x20>)
 800a26c:	4604      	mov	r4, r0
 800a26e:	4608      	mov	r0, r1
 800a270:	4611      	mov	r1, r2
 800a272:	2200      	movs	r2, #0
 800a274:	602a      	str	r2, [r5, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	f7f8 faea 	bl	8002850 <_lseek>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d102      	bne.n	800a286 <_lseek_r+0x1e>
 800a280:	682b      	ldr	r3, [r5, #0]
 800a282:	b103      	cbz	r3, 800a286 <_lseek_r+0x1e>
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	20002bf0 	.word	0x20002bf0

0800a28c <__malloc_lock>:
 800a28c:	4801      	ldr	r0, [pc, #4]	; (800a294 <__malloc_lock+0x8>)
 800a28e:	f7ff bca8 	b.w	8009be2 <__retarget_lock_acquire_recursive>
 800a292:	bf00      	nop
 800a294:	20002be8 	.word	0x20002be8

0800a298 <__malloc_unlock>:
 800a298:	4801      	ldr	r0, [pc, #4]	; (800a2a0 <__malloc_unlock+0x8>)
 800a29a:	f7ff bca3 	b.w	8009be4 <__retarget_lock_release_recursive>
 800a29e:	bf00      	nop
 800a2a0:	20002be8 	.word	0x20002be8

0800a2a4 <_realloc_r>:
 800a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a6:	4607      	mov	r7, r0
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	460e      	mov	r6, r1
 800a2ac:	b921      	cbnz	r1, 800a2b8 <_realloc_r+0x14>
 800a2ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	f7ff bd6a 	b.w	8009d8c <_malloc_r>
 800a2b8:	b922      	cbnz	r2, 800a2c4 <_realloc_r+0x20>
 800a2ba:	f7ff fd17 	bl	8009cec <_free_r>
 800a2be:	4625      	mov	r5, r4
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2c4:	f000 fb30 	bl	800a928 <_malloc_usable_size_r>
 800a2c8:	42a0      	cmp	r0, r4
 800a2ca:	d20f      	bcs.n	800a2ec <_realloc_r+0x48>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	f7ff fd5c 	bl	8009d8c <_malloc_r>
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d0f2      	beq.n	800a2c0 <_realloc_r+0x1c>
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4622      	mov	r2, r4
 800a2de:	f7ff fcef 	bl	8009cc0 <memcpy>
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7ff fd01 	bl	8009cec <_free_r>
 800a2ea:	e7e9      	b.n	800a2c0 <_realloc_r+0x1c>
 800a2ec:	4635      	mov	r5, r6
 800a2ee:	e7e7      	b.n	800a2c0 <_realloc_r+0x1c>

0800a2f0 <__ssputs_r>:
 800a2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f4:	688e      	ldr	r6, [r1, #8]
 800a2f6:	429e      	cmp	r6, r3
 800a2f8:	4682      	mov	sl, r0
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	4690      	mov	r8, r2
 800a2fe:	461f      	mov	r7, r3
 800a300:	d838      	bhi.n	800a374 <__ssputs_r+0x84>
 800a302:	898a      	ldrh	r2, [r1, #12]
 800a304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a308:	d032      	beq.n	800a370 <__ssputs_r+0x80>
 800a30a:	6825      	ldr	r5, [r4, #0]
 800a30c:	6909      	ldr	r1, [r1, #16]
 800a30e:	eba5 0901 	sub.w	r9, r5, r1
 800a312:	6965      	ldr	r5, [r4, #20]
 800a314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a318:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a31c:	3301      	adds	r3, #1
 800a31e:	444b      	add	r3, r9
 800a320:	106d      	asrs	r5, r5, #1
 800a322:	429d      	cmp	r5, r3
 800a324:	bf38      	it	cc
 800a326:	461d      	movcc	r5, r3
 800a328:	0553      	lsls	r3, r2, #21
 800a32a:	d531      	bpl.n	800a390 <__ssputs_r+0xa0>
 800a32c:	4629      	mov	r1, r5
 800a32e:	f7ff fd2d 	bl	8009d8c <_malloc_r>
 800a332:	4606      	mov	r6, r0
 800a334:	b950      	cbnz	r0, 800a34c <__ssputs_r+0x5c>
 800a336:	230c      	movs	r3, #12
 800a338:	f8ca 3000 	str.w	r3, [sl]
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	f04f 30ff 	mov.w	r0, #4294967295
 800a348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a34c:	6921      	ldr	r1, [r4, #16]
 800a34e:	464a      	mov	r2, r9
 800a350:	f7ff fcb6 	bl	8009cc0 <memcpy>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a35a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a35e:	81a3      	strh	r3, [r4, #12]
 800a360:	6126      	str	r6, [r4, #16]
 800a362:	6165      	str	r5, [r4, #20]
 800a364:	444e      	add	r6, r9
 800a366:	eba5 0509 	sub.w	r5, r5, r9
 800a36a:	6026      	str	r6, [r4, #0]
 800a36c:	60a5      	str	r5, [r4, #8]
 800a36e:	463e      	mov	r6, r7
 800a370:	42be      	cmp	r6, r7
 800a372:	d900      	bls.n	800a376 <__ssputs_r+0x86>
 800a374:	463e      	mov	r6, r7
 800a376:	4632      	mov	r2, r6
 800a378:	6820      	ldr	r0, [r4, #0]
 800a37a:	4641      	mov	r1, r8
 800a37c:	f000 faba 	bl	800a8f4 <memmove>
 800a380:	68a3      	ldr	r3, [r4, #8]
 800a382:	6822      	ldr	r2, [r4, #0]
 800a384:	1b9b      	subs	r3, r3, r6
 800a386:	4432      	add	r2, r6
 800a388:	60a3      	str	r3, [r4, #8]
 800a38a:	6022      	str	r2, [r4, #0]
 800a38c:	2000      	movs	r0, #0
 800a38e:	e7db      	b.n	800a348 <__ssputs_r+0x58>
 800a390:	462a      	mov	r2, r5
 800a392:	f7ff ff87 	bl	800a2a4 <_realloc_r>
 800a396:	4606      	mov	r6, r0
 800a398:	2800      	cmp	r0, #0
 800a39a:	d1e1      	bne.n	800a360 <__ssputs_r+0x70>
 800a39c:	6921      	ldr	r1, [r4, #16]
 800a39e:	4650      	mov	r0, sl
 800a3a0:	f7ff fca4 	bl	8009cec <_free_r>
 800a3a4:	e7c7      	b.n	800a336 <__ssputs_r+0x46>
	...

0800a3a8 <_svfiprintf_r>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	4698      	mov	r8, r3
 800a3ae:	898b      	ldrh	r3, [r1, #12]
 800a3b0:	061b      	lsls	r3, r3, #24
 800a3b2:	b09d      	sub	sp, #116	; 0x74
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	460d      	mov	r5, r1
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	d50e      	bpl.n	800a3da <_svfiprintf_r+0x32>
 800a3bc:	690b      	ldr	r3, [r1, #16]
 800a3be:	b963      	cbnz	r3, 800a3da <_svfiprintf_r+0x32>
 800a3c0:	2140      	movs	r1, #64	; 0x40
 800a3c2:	f7ff fce3 	bl	8009d8c <_malloc_r>
 800a3c6:	6028      	str	r0, [r5, #0]
 800a3c8:	6128      	str	r0, [r5, #16]
 800a3ca:	b920      	cbnz	r0, 800a3d6 <_svfiprintf_r+0x2e>
 800a3cc:	230c      	movs	r3, #12
 800a3ce:	603b      	str	r3, [r7, #0]
 800a3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d4:	e0d1      	b.n	800a57a <_svfiprintf_r+0x1d2>
 800a3d6:	2340      	movs	r3, #64	; 0x40
 800a3d8:	616b      	str	r3, [r5, #20]
 800a3da:	2300      	movs	r3, #0
 800a3dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3de:	2320      	movs	r3, #32
 800a3e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3e8:	2330      	movs	r3, #48	; 0x30
 800a3ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a594 <_svfiprintf_r+0x1ec>
 800a3ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3f2:	f04f 0901 	mov.w	r9, #1
 800a3f6:	4623      	mov	r3, r4
 800a3f8:	469a      	mov	sl, r3
 800a3fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3fe:	b10a      	cbz	r2, 800a404 <_svfiprintf_r+0x5c>
 800a400:	2a25      	cmp	r2, #37	; 0x25
 800a402:	d1f9      	bne.n	800a3f8 <_svfiprintf_r+0x50>
 800a404:	ebba 0b04 	subs.w	fp, sl, r4
 800a408:	d00b      	beq.n	800a422 <_svfiprintf_r+0x7a>
 800a40a:	465b      	mov	r3, fp
 800a40c:	4622      	mov	r2, r4
 800a40e:	4629      	mov	r1, r5
 800a410:	4638      	mov	r0, r7
 800a412:	f7ff ff6d 	bl	800a2f0 <__ssputs_r>
 800a416:	3001      	adds	r0, #1
 800a418:	f000 80aa 	beq.w	800a570 <_svfiprintf_r+0x1c8>
 800a41c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a41e:	445a      	add	r2, fp
 800a420:	9209      	str	r2, [sp, #36]	; 0x24
 800a422:	f89a 3000 	ldrb.w	r3, [sl]
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 80a2 	beq.w	800a570 <_svfiprintf_r+0x1c8>
 800a42c:	2300      	movs	r3, #0
 800a42e:	f04f 32ff 	mov.w	r2, #4294967295
 800a432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a436:	f10a 0a01 	add.w	sl, sl, #1
 800a43a:	9304      	str	r3, [sp, #16]
 800a43c:	9307      	str	r3, [sp, #28]
 800a43e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a442:	931a      	str	r3, [sp, #104]	; 0x68
 800a444:	4654      	mov	r4, sl
 800a446:	2205      	movs	r2, #5
 800a448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a44c:	4851      	ldr	r0, [pc, #324]	; (800a594 <_svfiprintf_r+0x1ec>)
 800a44e:	f7f5 fecf 	bl	80001f0 <memchr>
 800a452:	9a04      	ldr	r2, [sp, #16]
 800a454:	b9d8      	cbnz	r0, 800a48e <_svfiprintf_r+0xe6>
 800a456:	06d0      	lsls	r0, r2, #27
 800a458:	bf44      	itt	mi
 800a45a:	2320      	movmi	r3, #32
 800a45c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a460:	0711      	lsls	r1, r2, #28
 800a462:	bf44      	itt	mi
 800a464:	232b      	movmi	r3, #43	; 0x2b
 800a466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a46a:	f89a 3000 	ldrb.w	r3, [sl]
 800a46e:	2b2a      	cmp	r3, #42	; 0x2a
 800a470:	d015      	beq.n	800a49e <_svfiprintf_r+0xf6>
 800a472:	9a07      	ldr	r2, [sp, #28]
 800a474:	4654      	mov	r4, sl
 800a476:	2000      	movs	r0, #0
 800a478:	f04f 0c0a 	mov.w	ip, #10
 800a47c:	4621      	mov	r1, r4
 800a47e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a482:	3b30      	subs	r3, #48	; 0x30
 800a484:	2b09      	cmp	r3, #9
 800a486:	d94e      	bls.n	800a526 <_svfiprintf_r+0x17e>
 800a488:	b1b0      	cbz	r0, 800a4b8 <_svfiprintf_r+0x110>
 800a48a:	9207      	str	r2, [sp, #28]
 800a48c:	e014      	b.n	800a4b8 <_svfiprintf_r+0x110>
 800a48e:	eba0 0308 	sub.w	r3, r0, r8
 800a492:	fa09 f303 	lsl.w	r3, r9, r3
 800a496:	4313      	orrs	r3, r2
 800a498:	9304      	str	r3, [sp, #16]
 800a49a:	46a2      	mov	sl, r4
 800a49c:	e7d2      	b.n	800a444 <_svfiprintf_r+0x9c>
 800a49e:	9b03      	ldr	r3, [sp, #12]
 800a4a0:	1d19      	adds	r1, r3, #4
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	9103      	str	r1, [sp, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	bfbb      	ittet	lt
 800a4aa:	425b      	neglt	r3, r3
 800a4ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a4b0:	9307      	strge	r3, [sp, #28]
 800a4b2:	9307      	strlt	r3, [sp, #28]
 800a4b4:	bfb8      	it	lt
 800a4b6:	9204      	strlt	r2, [sp, #16]
 800a4b8:	7823      	ldrb	r3, [r4, #0]
 800a4ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a4bc:	d10c      	bne.n	800a4d8 <_svfiprintf_r+0x130>
 800a4be:	7863      	ldrb	r3, [r4, #1]
 800a4c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c2:	d135      	bne.n	800a530 <_svfiprintf_r+0x188>
 800a4c4:	9b03      	ldr	r3, [sp, #12]
 800a4c6:	1d1a      	adds	r2, r3, #4
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	9203      	str	r2, [sp, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	bfb8      	it	lt
 800a4d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4d4:	3402      	adds	r4, #2
 800a4d6:	9305      	str	r3, [sp, #20]
 800a4d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5a4 <_svfiprintf_r+0x1fc>
 800a4dc:	7821      	ldrb	r1, [r4, #0]
 800a4de:	2203      	movs	r2, #3
 800a4e0:	4650      	mov	r0, sl
 800a4e2:	f7f5 fe85 	bl	80001f0 <memchr>
 800a4e6:	b140      	cbz	r0, 800a4fa <_svfiprintf_r+0x152>
 800a4e8:	2340      	movs	r3, #64	; 0x40
 800a4ea:	eba0 000a 	sub.w	r0, r0, sl
 800a4ee:	fa03 f000 	lsl.w	r0, r3, r0
 800a4f2:	9b04      	ldr	r3, [sp, #16]
 800a4f4:	4303      	orrs	r3, r0
 800a4f6:	3401      	adds	r4, #1
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fe:	4826      	ldr	r0, [pc, #152]	; (800a598 <_svfiprintf_r+0x1f0>)
 800a500:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a504:	2206      	movs	r2, #6
 800a506:	f7f5 fe73 	bl	80001f0 <memchr>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d038      	beq.n	800a580 <_svfiprintf_r+0x1d8>
 800a50e:	4b23      	ldr	r3, [pc, #140]	; (800a59c <_svfiprintf_r+0x1f4>)
 800a510:	bb1b      	cbnz	r3, 800a55a <_svfiprintf_r+0x1b2>
 800a512:	9b03      	ldr	r3, [sp, #12]
 800a514:	3307      	adds	r3, #7
 800a516:	f023 0307 	bic.w	r3, r3, #7
 800a51a:	3308      	adds	r3, #8
 800a51c:	9303      	str	r3, [sp, #12]
 800a51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a520:	4433      	add	r3, r6
 800a522:	9309      	str	r3, [sp, #36]	; 0x24
 800a524:	e767      	b.n	800a3f6 <_svfiprintf_r+0x4e>
 800a526:	fb0c 3202 	mla	r2, ip, r2, r3
 800a52a:	460c      	mov	r4, r1
 800a52c:	2001      	movs	r0, #1
 800a52e:	e7a5      	b.n	800a47c <_svfiprintf_r+0xd4>
 800a530:	2300      	movs	r3, #0
 800a532:	3401      	adds	r4, #1
 800a534:	9305      	str	r3, [sp, #20]
 800a536:	4619      	mov	r1, r3
 800a538:	f04f 0c0a 	mov.w	ip, #10
 800a53c:	4620      	mov	r0, r4
 800a53e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a542:	3a30      	subs	r2, #48	; 0x30
 800a544:	2a09      	cmp	r2, #9
 800a546:	d903      	bls.n	800a550 <_svfiprintf_r+0x1a8>
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d0c5      	beq.n	800a4d8 <_svfiprintf_r+0x130>
 800a54c:	9105      	str	r1, [sp, #20]
 800a54e:	e7c3      	b.n	800a4d8 <_svfiprintf_r+0x130>
 800a550:	fb0c 2101 	mla	r1, ip, r1, r2
 800a554:	4604      	mov	r4, r0
 800a556:	2301      	movs	r3, #1
 800a558:	e7f0      	b.n	800a53c <_svfiprintf_r+0x194>
 800a55a:	ab03      	add	r3, sp, #12
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	462a      	mov	r2, r5
 800a560:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <_svfiprintf_r+0x1f8>)
 800a562:	a904      	add	r1, sp, #16
 800a564:	4638      	mov	r0, r7
 800a566:	f3af 8000 	nop.w
 800a56a:	1c42      	adds	r2, r0, #1
 800a56c:	4606      	mov	r6, r0
 800a56e:	d1d6      	bne.n	800a51e <_svfiprintf_r+0x176>
 800a570:	89ab      	ldrh	r3, [r5, #12]
 800a572:	065b      	lsls	r3, r3, #25
 800a574:	f53f af2c 	bmi.w	800a3d0 <_svfiprintf_r+0x28>
 800a578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a57a:	b01d      	add	sp, #116	; 0x74
 800a57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a580:	ab03      	add	r3, sp, #12
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	462a      	mov	r2, r5
 800a586:	4b06      	ldr	r3, [pc, #24]	; (800a5a0 <_svfiprintf_r+0x1f8>)
 800a588:	a904      	add	r1, sp, #16
 800a58a:	4638      	mov	r0, r7
 800a58c:	f000 f87a 	bl	800a684 <_printf_i>
 800a590:	e7eb      	b.n	800a56a <_svfiprintf_r+0x1c2>
 800a592:	bf00      	nop
 800a594:	0800beb4 	.word	0x0800beb4
 800a598:	0800bebe 	.word	0x0800bebe
 800a59c:	00000000 	.word	0x00000000
 800a5a0:	0800a2f1 	.word	0x0800a2f1
 800a5a4:	0800beba 	.word	0x0800beba

0800a5a8 <_printf_common>:
 800a5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ac:	4616      	mov	r6, r2
 800a5ae:	4699      	mov	r9, r3
 800a5b0:	688a      	ldr	r2, [r1, #8]
 800a5b2:	690b      	ldr	r3, [r1, #16]
 800a5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	bfb8      	it	lt
 800a5bc:	4613      	movlt	r3, r2
 800a5be:	6033      	str	r3, [r6, #0]
 800a5c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5c4:	4607      	mov	r7, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	b10a      	cbz	r2, 800a5ce <_printf_common+0x26>
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	6033      	str	r3, [r6, #0]
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	0699      	lsls	r1, r3, #26
 800a5d2:	bf42      	ittt	mi
 800a5d4:	6833      	ldrmi	r3, [r6, #0]
 800a5d6:	3302      	addmi	r3, #2
 800a5d8:	6033      	strmi	r3, [r6, #0]
 800a5da:	6825      	ldr	r5, [r4, #0]
 800a5dc:	f015 0506 	ands.w	r5, r5, #6
 800a5e0:	d106      	bne.n	800a5f0 <_printf_common+0x48>
 800a5e2:	f104 0a19 	add.w	sl, r4, #25
 800a5e6:	68e3      	ldr	r3, [r4, #12]
 800a5e8:	6832      	ldr	r2, [r6, #0]
 800a5ea:	1a9b      	subs	r3, r3, r2
 800a5ec:	42ab      	cmp	r3, r5
 800a5ee:	dc26      	bgt.n	800a63e <_printf_common+0x96>
 800a5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5f4:	1e13      	subs	r3, r2, #0
 800a5f6:	6822      	ldr	r2, [r4, #0]
 800a5f8:	bf18      	it	ne
 800a5fa:	2301      	movne	r3, #1
 800a5fc:	0692      	lsls	r2, r2, #26
 800a5fe:	d42b      	bmi.n	800a658 <_printf_common+0xb0>
 800a600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a604:	4649      	mov	r1, r9
 800a606:	4638      	mov	r0, r7
 800a608:	47c0      	blx	r8
 800a60a:	3001      	adds	r0, #1
 800a60c:	d01e      	beq.n	800a64c <_printf_common+0xa4>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	68e5      	ldr	r5, [r4, #12]
 800a612:	6832      	ldr	r2, [r6, #0]
 800a614:	f003 0306 	and.w	r3, r3, #6
 800a618:	2b04      	cmp	r3, #4
 800a61a:	bf08      	it	eq
 800a61c:	1aad      	subeq	r5, r5, r2
 800a61e:	68a3      	ldr	r3, [r4, #8]
 800a620:	6922      	ldr	r2, [r4, #16]
 800a622:	bf0c      	ite	eq
 800a624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a628:	2500      	movne	r5, #0
 800a62a:	4293      	cmp	r3, r2
 800a62c:	bfc4      	itt	gt
 800a62e:	1a9b      	subgt	r3, r3, r2
 800a630:	18ed      	addgt	r5, r5, r3
 800a632:	2600      	movs	r6, #0
 800a634:	341a      	adds	r4, #26
 800a636:	42b5      	cmp	r5, r6
 800a638:	d11a      	bne.n	800a670 <_printf_common+0xc8>
 800a63a:	2000      	movs	r0, #0
 800a63c:	e008      	b.n	800a650 <_printf_common+0xa8>
 800a63e:	2301      	movs	r3, #1
 800a640:	4652      	mov	r2, sl
 800a642:	4649      	mov	r1, r9
 800a644:	4638      	mov	r0, r7
 800a646:	47c0      	blx	r8
 800a648:	3001      	adds	r0, #1
 800a64a:	d103      	bne.n	800a654 <_printf_common+0xac>
 800a64c:	f04f 30ff 	mov.w	r0, #4294967295
 800a650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a654:	3501      	adds	r5, #1
 800a656:	e7c6      	b.n	800a5e6 <_printf_common+0x3e>
 800a658:	18e1      	adds	r1, r4, r3
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	2030      	movs	r0, #48	; 0x30
 800a65e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a662:	4422      	add	r2, r4
 800a664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a66c:	3302      	adds	r3, #2
 800a66e:	e7c7      	b.n	800a600 <_printf_common+0x58>
 800a670:	2301      	movs	r3, #1
 800a672:	4622      	mov	r2, r4
 800a674:	4649      	mov	r1, r9
 800a676:	4638      	mov	r0, r7
 800a678:	47c0      	blx	r8
 800a67a:	3001      	adds	r0, #1
 800a67c:	d0e6      	beq.n	800a64c <_printf_common+0xa4>
 800a67e:	3601      	adds	r6, #1
 800a680:	e7d9      	b.n	800a636 <_printf_common+0x8e>
	...

0800a684 <_printf_i>:
 800a684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a688:	460c      	mov	r4, r1
 800a68a:	4691      	mov	r9, r2
 800a68c:	7e27      	ldrb	r7, [r4, #24]
 800a68e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a690:	2f78      	cmp	r7, #120	; 0x78
 800a692:	4680      	mov	r8, r0
 800a694:	469a      	mov	sl, r3
 800a696:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a69a:	d807      	bhi.n	800a6ac <_printf_i+0x28>
 800a69c:	2f62      	cmp	r7, #98	; 0x62
 800a69e:	d80a      	bhi.n	800a6b6 <_printf_i+0x32>
 800a6a0:	2f00      	cmp	r7, #0
 800a6a2:	f000 80d8 	beq.w	800a856 <_printf_i+0x1d2>
 800a6a6:	2f58      	cmp	r7, #88	; 0x58
 800a6a8:	f000 80a3 	beq.w	800a7f2 <_printf_i+0x16e>
 800a6ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a6b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6b4:	e03a      	b.n	800a72c <_printf_i+0xa8>
 800a6b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6ba:	2b15      	cmp	r3, #21
 800a6bc:	d8f6      	bhi.n	800a6ac <_printf_i+0x28>
 800a6be:	a001      	add	r0, pc, #4	; (adr r0, 800a6c4 <_printf_i+0x40>)
 800a6c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a6c4:	0800a71d 	.word	0x0800a71d
 800a6c8:	0800a731 	.word	0x0800a731
 800a6cc:	0800a6ad 	.word	0x0800a6ad
 800a6d0:	0800a6ad 	.word	0x0800a6ad
 800a6d4:	0800a6ad 	.word	0x0800a6ad
 800a6d8:	0800a6ad 	.word	0x0800a6ad
 800a6dc:	0800a731 	.word	0x0800a731
 800a6e0:	0800a6ad 	.word	0x0800a6ad
 800a6e4:	0800a6ad 	.word	0x0800a6ad
 800a6e8:	0800a6ad 	.word	0x0800a6ad
 800a6ec:	0800a6ad 	.word	0x0800a6ad
 800a6f0:	0800a83d 	.word	0x0800a83d
 800a6f4:	0800a761 	.word	0x0800a761
 800a6f8:	0800a81f 	.word	0x0800a81f
 800a6fc:	0800a6ad 	.word	0x0800a6ad
 800a700:	0800a6ad 	.word	0x0800a6ad
 800a704:	0800a85f 	.word	0x0800a85f
 800a708:	0800a6ad 	.word	0x0800a6ad
 800a70c:	0800a761 	.word	0x0800a761
 800a710:	0800a6ad 	.word	0x0800a6ad
 800a714:	0800a6ad 	.word	0x0800a6ad
 800a718:	0800a827 	.word	0x0800a827
 800a71c:	680b      	ldr	r3, [r1, #0]
 800a71e:	1d1a      	adds	r2, r3, #4
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	600a      	str	r2, [r1, #0]
 800a724:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a72c:	2301      	movs	r3, #1
 800a72e:	e0a3      	b.n	800a878 <_printf_i+0x1f4>
 800a730:	6825      	ldr	r5, [r4, #0]
 800a732:	6808      	ldr	r0, [r1, #0]
 800a734:	062e      	lsls	r6, r5, #24
 800a736:	f100 0304 	add.w	r3, r0, #4
 800a73a:	d50a      	bpl.n	800a752 <_printf_i+0xce>
 800a73c:	6805      	ldr	r5, [r0, #0]
 800a73e:	600b      	str	r3, [r1, #0]
 800a740:	2d00      	cmp	r5, #0
 800a742:	da03      	bge.n	800a74c <_printf_i+0xc8>
 800a744:	232d      	movs	r3, #45	; 0x2d
 800a746:	426d      	negs	r5, r5
 800a748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a74c:	485e      	ldr	r0, [pc, #376]	; (800a8c8 <_printf_i+0x244>)
 800a74e:	230a      	movs	r3, #10
 800a750:	e019      	b.n	800a786 <_printf_i+0x102>
 800a752:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a756:	6805      	ldr	r5, [r0, #0]
 800a758:	600b      	str	r3, [r1, #0]
 800a75a:	bf18      	it	ne
 800a75c:	b22d      	sxthne	r5, r5
 800a75e:	e7ef      	b.n	800a740 <_printf_i+0xbc>
 800a760:	680b      	ldr	r3, [r1, #0]
 800a762:	6825      	ldr	r5, [r4, #0]
 800a764:	1d18      	adds	r0, r3, #4
 800a766:	6008      	str	r0, [r1, #0]
 800a768:	0628      	lsls	r0, r5, #24
 800a76a:	d501      	bpl.n	800a770 <_printf_i+0xec>
 800a76c:	681d      	ldr	r5, [r3, #0]
 800a76e:	e002      	b.n	800a776 <_printf_i+0xf2>
 800a770:	0669      	lsls	r1, r5, #25
 800a772:	d5fb      	bpl.n	800a76c <_printf_i+0xe8>
 800a774:	881d      	ldrh	r5, [r3, #0]
 800a776:	4854      	ldr	r0, [pc, #336]	; (800a8c8 <_printf_i+0x244>)
 800a778:	2f6f      	cmp	r7, #111	; 0x6f
 800a77a:	bf0c      	ite	eq
 800a77c:	2308      	moveq	r3, #8
 800a77e:	230a      	movne	r3, #10
 800a780:	2100      	movs	r1, #0
 800a782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a786:	6866      	ldr	r6, [r4, #4]
 800a788:	60a6      	str	r6, [r4, #8]
 800a78a:	2e00      	cmp	r6, #0
 800a78c:	bfa2      	ittt	ge
 800a78e:	6821      	ldrge	r1, [r4, #0]
 800a790:	f021 0104 	bicge.w	r1, r1, #4
 800a794:	6021      	strge	r1, [r4, #0]
 800a796:	b90d      	cbnz	r5, 800a79c <_printf_i+0x118>
 800a798:	2e00      	cmp	r6, #0
 800a79a:	d04d      	beq.n	800a838 <_printf_i+0x1b4>
 800a79c:	4616      	mov	r6, r2
 800a79e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7a2:	fb03 5711 	mls	r7, r3, r1, r5
 800a7a6:	5dc7      	ldrb	r7, [r0, r7]
 800a7a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7ac:	462f      	mov	r7, r5
 800a7ae:	42bb      	cmp	r3, r7
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	d9f4      	bls.n	800a79e <_printf_i+0x11a>
 800a7b4:	2b08      	cmp	r3, #8
 800a7b6:	d10b      	bne.n	800a7d0 <_printf_i+0x14c>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	07df      	lsls	r7, r3, #31
 800a7bc:	d508      	bpl.n	800a7d0 <_printf_i+0x14c>
 800a7be:	6923      	ldr	r3, [r4, #16]
 800a7c0:	6861      	ldr	r1, [r4, #4]
 800a7c2:	4299      	cmp	r1, r3
 800a7c4:	bfde      	ittt	le
 800a7c6:	2330      	movle	r3, #48	; 0x30
 800a7c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7d0:	1b92      	subs	r2, r2, r6
 800a7d2:	6122      	str	r2, [r4, #16]
 800a7d4:	f8cd a000 	str.w	sl, [sp]
 800a7d8:	464b      	mov	r3, r9
 800a7da:	aa03      	add	r2, sp, #12
 800a7dc:	4621      	mov	r1, r4
 800a7de:	4640      	mov	r0, r8
 800a7e0:	f7ff fee2 	bl	800a5a8 <_printf_common>
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d14c      	bne.n	800a882 <_printf_i+0x1fe>
 800a7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ec:	b004      	add	sp, #16
 800a7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f2:	4835      	ldr	r0, [pc, #212]	; (800a8c8 <_printf_i+0x244>)
 800a7f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	680e      	ldr	r6, [r1, #0]
 800a7fc:	061f      	lsls	r7, r3, #24
 800a7fe:	f856 5b04 	ldr.w	r5, [r6], #4
 800a802:	600e      	str	r6, [r1, #0]
 800a804:	d514      	bpl.n	800a830 <_printf_i+0x1ac>
 800a806:	07d9      	lsls	r1, r3, #31
 800a808:	bf44      	itt	mi
 800a80a:	f043 0320 	orrmi.w	r3, r3, #32
 800a80e:	6023      	strmi	r3, [r4, #0]
 800a810:	b91d      	cbnz	r5, 800a81a <_printf_i+0x196>
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	f023 0320 	bic.w	r3, r3, #32
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	2310      	movs	r3, #16
 800a81c:	e7b0      	b.n	800a780 <_printf_i+0xfc>
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	f043 0320 	orr.w	r3, r3, #32
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	2378      	movs	r3, #120	; 0x78
 800a828:	4828      	ldr	r0, [pc, #160]	; (800a8cc <_printf_i+0x248>)
 800a82a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a82e:	e7e3      	b.n	800a7f8 <_printf_i+0x174>
 800a830:	065e      	lsls	r6, r3, #25
 800a832:	bf48      	it	mi
 800a834:	b2ad      	uxthmi	r5, r5
 800a836:	e7e6      	b.n	800a806 <_printf_i+0x182>
 800a838:	4616      	mov	r6, r2
 800a83a:	e7bb      	b.n	800a7b4 <_printf_i+0x130>
 800a83c:	680b      	ldr	r3, [r1, #0]
 800a83e:	6826      	ldr	r6, [r4, #0]
 800a840:	6960      	ldr	r0, [r4, #20]
 800a842:	1d1d      	adds	r5, r3, #4
 800a844:	600d      	str	r5, [r1, #0]
 800a846:	0635      	lsls	r5, r6, #24
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	d501      	bpl.n	800a850 <_printf_i+0x1cc>
 800a84c:	6018      	str	r0, [r3, #0]
 800a84e:	e002      	b.n	800a856 <_printf_i+0x1d2>
 800a850:	0671      	lsls	r1, r6, #25
 800a852:	d5fb      	bpl.n	800a84c <_printf_i+0x1c8>
 800a854:	8018      	strh	r0, [r3, #0]
 800a856:	2300      	movs	r3, #0
 800a858:	6123      	str	r3, [r4, #16]
 800a85a:	4616      	mov	r6, r2
 800a85c:	e7ba      	b.n	800a7d4 <_printf_i+0x150>
 800a85e:	680b      	ldr	r3, [r1, #0]
 800a860:	1d1a      	adds	r2, r3, #4
 800a862:	600a      	str	r2, [r1, #0]
 800a864:	681e      	ldr	r6, [r3, #0]
 800a866:	6862      	ldr	r2, [r4, #4]
 800a868:	2100      	movs	r1, #0
 800a86a:	4630      	mov	r0, r6
 800a86c:	f7f5 fcc0 	bl	80001f0 <memchr>
 800a870:	b108      	cbz	r0, 800a876 <_printf_i+0x1f2>
 800a872:	1b80      	subs	r0, r0, r6
 800a874:	6060      	str	r0, [r4, #4]
 800a876:	6863      	ldr	r3, [r4, #4]
 800a878:	6123      	str	r3, [r4, #16]
 800a87a:	2300      	movs	r3, #0
 800a87c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a880:	e7a8      	b.n	800a7d4 <_printf_i+0x150>
 800a882:	6923      	ldr	r3, [r4, #16]
 800a884:	4632      	mov	r2, r6
 800a886:	4649      	mov	r1, r9
 800a888:	4640      	mov	r0, r8
 800a88a:	47d0      	blx	sl
 800a88c:	3001      	adds	r0, #1
 800a88e:	d0ab      	beq.n	800a7e8 <_printf_i+0x164>
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	079b      	lsls	r3, r3, #30
 800a894:	d413      	bmi.n	800a8be <_printf_i+0x23a>
 800a896:	68e0      	ldr	r0, [r4, #12]
 800a898:	9b03      	ldr	r3, [sp, #12]
 800a89a:	4298      	cmp	r0, r3
 800a89c:	bfb8      	it	lt
 800a89e:	4618      	movlt	r0, r3
 800a8a0:	e7a4      	b.n	800a7ec <_printf_i+0x168>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	4640      	mov	r0, r8
 800a8aa:	47d0      	blx	sl
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	d09b      	beq.n	800a7e8 <_printf_i+0x164>
 800a8b0:	3501      	adds	r5, #1
 800a8b2:	68e3      	ldr	r3, [r4, #12]
 800a8b4:	9903      	ldr	r1, [sp, #12]
 800a8b6:	1a5b      	subs	r3, r3, r1
 800a8b8:	42ab      	cmp	r3, r5
 800a8ba:	dcf2      	bgt.n	800a8a2 <_printf_i+0x21e>
 800a8bc:	e7eb      	b.n	800a896 <_printf_i+0x212>
 800a8be:	2500      	movs	r5, #0
 800a8c0:	f104 0619 	add.w	r6, r4, #25
 800a8c4:	e7f5      	b.n	800a8b2 <_printf_i+0x22e>
 800a8c6:	bf00      	nop
 800a8c8:	0800bec5 	.word	0x0800bec5
 800a8cc:	0800bed6 	.word	0x0800bed6

0800a8d0 <_read_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d07      	ldr	r5, [pc, #28]	; (800a8f0 <_read_r+0x20>)
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	4608      	mov	r0, r1
 800a8d8:	4611      	mov	r1, r2
 800a8da:	2200      	movs	r2, #0
 800a8dc:	602a      	str	r2, [r5, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	f7f7 ff56 	bl	8002790 <_read>
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	d102      	bne.n	800a8ee <_read_r+0x1e>
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	b103      	cbz	r3, 800a8ee <_read_r+0x1e>
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	20002bf0 	.word	0x20002bf0

0800a8f4 <memmove>:
 800a8f4:	4288      	cmp	r0, r1
 800a8f6:	b510      	push	{r4, lr}
 800a8f8:	eb01 0402 	add.w	r4, r1, r2
 800a8fc:	d902      	bls.n	800a904 <memmove+0x10>
 800a8fe:	4284      	cmp	r4, r0
 800a900:	4623      	mov	r3, r4
 800a902:	d807      	bhi.n	800a914 <memmove+0x20>
 800a904:	1e43      	subs	r3, r0, #1
 800a906:	42a1      	cmp	r1, r4
 800a908:	d008      	beq.n	800a91c <memmove+0x28>
 800a90a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a90e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a912:	e7f8      	b.n	800a906 <memmove+0x12>
 800a914:	4402      	add	r2, r0
 800a916:	4601      	mov	r1, r0
 800a918:	428a      	cmp	r2, r1
 800a91a:	d100      	bne.n	800a91e <memmove+0x2a>
 800a91c:	bd10      	pop	{r4, pc}
 800a91e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a926:	e7f7      	b.n	800a918 <memmove+0x24>

0800a928 <_malloc_usable_size_r>:
 800a928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a92c:	1f18      	subs	r0, r3, #4
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bfbc      	itt	lt
 800a932:	580b      	ldrlt	r3, [r1, r0]
 800a934:	18c0      	addlt	r0, r0, r3
 800a936:	4770      	bx	lr

0800a938 <_init>:
 800a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93a:	bf00      	nop
 800a93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93e:	bc08      	pop	{r3}
 800a940:	469e      	mov	lr, r3
 800a942:	4770      	bx	lr

0800a944 <_fini>:
 800a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a946:	bf00      	nop
 800a948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94a:	bc08      	pop	{r3}
 800a94c:	469e      	mov	lr, r3
 800a94e:	4770      	bx	lr
