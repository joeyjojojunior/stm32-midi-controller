
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e0c  08013b60  08013b60  00023b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801596c  0801596c  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  0801596c  0801596c  0002596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015974  08015974  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015974  08015974  00025974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015978  08015978  00025978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0801597c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035ac  20000354  08015cd0  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003900  08015cd0  00033900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fc68  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062b2  00000000  00000000  0005ffec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d20  00000000  00000000  000662a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021122  00000000  00000000  00067fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028a35  00000000  00000000  000890e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a6e82  00000000  00000000  000b1b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00158999  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001b28  00000000  00000000  001589f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008cc4  00000000  00000000  0015a518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000354 	.word	0x20000354
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013b44 	.word	0x08013b44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000358 	.word	0x20000358
 80001dc:	08013b44 	.word	0x08013b44

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9a4 	b.w	8000fec <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468c      	mov	ip, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8083 	bne.w	8000e3e <__udivmoddi4+0x116>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d947      	bls.n	8000dce <__udivmoddi4+0xa6>
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b142      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	f1c2 0020 	rsb	r0, r2, #32
 8000d48:	fa24 f000 	lsr.w	r0, r4, r0
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	4097      	lsls	r7, r2
 8000d50:	ea40 0c01 	orr.w	ip, r0, r1
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d60:	fa1f fe87 	uxth.w	lr, r7
 8000d64:	fb08 c116 	mls	r1, r8, r6, ip
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 8119 	bcs.w	8000fb0 <__udivmoddi4+0x288>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8116 	bls.w	8000fb0 <__udivmoddi4+0x288>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	f080 8105 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f240 8102 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	b902      	cbnz	r2, 8000dd2 <__udivmoddi4+0xaa>
 8000dd0:	deff      	udf	#255	; 0xff
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d150      	bne.n	8000e7c <__udivmoddi4+0x154>
 8000dda:	1bcb      	subs	r3, r1, r7
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	fa1f f887 	uxth.w	r8, r7
 8000de4:	2601      	movs	r6, #1
 8000de6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dea:	0c21      	lsrs	r1, r4, #16
 8000dec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb08 f30c 	mul.w	r3, r8, ip
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0xe2>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	f200 80e9 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1ac9      	subs	r1, r1, r3
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x10a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80d9 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e7bf      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x12e>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80b1 	beq.w	8000faa <__udivmoddi4+0x282>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x1cc>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0x140>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80b8 	bhi.w	8000fd8 <__udivmoddi4+0x2b0>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	468c      	mov	ip, r1
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0a8      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e7a:	e7a5      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f603 	lsr.w	r6, r0, r3
 8000e84:	4097      	lsls	r7, r2
 8000e86:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	4330      	orrs	r0, r6
 8000e92:	0c03      	lsrs	r3, r0, #16
 8000e94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea4:	fb06 f108 	mul.w	r1, r6, r8
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	fa04 f402 	lsl.w	r4, r4, r2
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x19c>
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb6:	f080 808d 	bcs.w	8000fd4 <__udivmoddi4+0x2ac>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 808a 	bls.w	8000fd4 <__udivmoddi4+0x2ac>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	443b      	add	r3, r7
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b281      	uxth	r1, r0
 8000ec8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ecc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed4:	fb00 f308 	mul.w	r3, r0, r8
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d907      	bls.n	8000eec <__udivmoddi4+0x1c4>
 8000edc:	1879      	adds	r1, r7, r1
 8000ede:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee2:	d273      	bcs.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d971      	bls.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4439      	add	r1, r7
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ef2:	e778      	b.n	8000de6 <__udivmoddi4+0xbe>
 8000ef4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef8:	fa03 f406 	lsl.w	r4, r3, r6
 8000efc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f00:	431c      	orrs	r4, r3
 8000f02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f12:	431f      	orrs	r7, r3
 8000f14:	0c3b      	lsrs	r3, r7, #16
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fa1f f884 	uxth.w	r8, r4
 8000f1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f26:	fb09 fa08 	mul.w	sl, r9, r8
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f30:	fa00 f306 	lsl.w	r3, r0, r6
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x220>
 8000f36:	1861      	adds	r1, r4, r1
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f3c:	d248      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f3e:	458a      	cmp	sl, r1
 8000f40:	d946      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f42:	f1a9 0902 	sub.w	r9, r9, #2
 8000f46:	4421      	add	r1, r4
 8000f48:	eba1 010a 	sub.w	r1, r1, sl
 8000f4c:	b2bf      	uxth	r7, r7
 8000f4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f5a:	fb00 f808 	mul.w	r8, r0, r8
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x24a>
 8000f62:	19e7      	adds	r7, r4, r7
 8000f64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f68:	d22e      	bcs.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d92c      	bls.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	4427      	add	r7, r4
 8000f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f76:	eba7 0708 	sub.w	r7, r7, r8
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	454f      	cmp	r7, r9
 8000f80:	46c6      	mov	lr, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	d31a      	bcc.n	8000fbc <__udivmoddi4+0x294>
 8000f86:	d017      	beq.n	8000fb8 <__udivmoddi4+0x290>
 8000f88:	b15d      	cbz	r5, 8000fa2 <__udivmoddi4+0x27a>
 8000f8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f96:	40f2      	lsrs	r2, r6
 8000f98:	ea4c 0202 	orr.w	r2, ip, r2
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e70b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6fd      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fb8:	4543      	cmp	r3, r8
 8000fba:	d2e5      	bcs.n	8000f88 <__udivmoddi4+0x260>
 8000fbc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7df      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e7d2      	b.n	8000f72 <__udivmoddi4+0x24a>
 8000fcc:	4660      	mov	r0, ip
 8000fce:	e78d      	b.n	8000eec <__udivmoddi4+0x1c4>
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	e7b9      	b.n	8000f48 <__udivmoddi4+0x220>
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	e775      	b.n	8000ec4 <__udivmoddi4+0x19c>
 8000fd8:	4630      	mov	r0, r6
 8000fda:	e74a      	b.n	8000e72 <__udivmoddi4+0x14a>
 8000fdc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe0:	4439      	add	r1, r7
 8000fe2:	e713      	b.n	8000e0c <__udivmoddi4+0xe4>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	443c      	add	r4, r7
 8000fe8:	e724      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <Knob_Map>:
void Knob_Free(Knob *k) {
    free(k->sub_labels);
}

// Maps values from (0, max_values-1) to (0, m)
uint8_t Knob_Map(Knob *k, uint8_t value, uint8_t m) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	78ba      	ldrb	r2, [r7, #2]
 8001004:	fb02 f203 	mul.w	r2, r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7f1b      	ldrb	r3, [r3, #28]
 800100c:	3b01      	subs	r3, #1
 800100e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ffc2 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80010be:	f002 f8a3 	bl	8003208 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80010c2:	f000 f941 	bl	8001348 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80010c6:	f000 fa89 	bl	80015dc <MX_GPIO_Init>
    MX_ADC1_Init();
 80010ca:	f000 f9bf 	bl	800144c <MX_ADC1_Init>
    MX_I2C1_Init();
 80010ce:	f000 fa11 	bl	80014f4 <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 80010d2:	f00d fd69 	bl	800eba8 <MX_USB_DEVICE_Init>
    MX_SDIO_SD_Init();
 80010d6:	f000 fa61 	bl	800159c <MX_SDIO_SD_Init>
    MX_RTC_Init();
 80010da:	f000 fa39 	bl	8001550 <MX_RTC_Init>
    MX_FATFS_Init();
 80010de:	f008 ff87 	bl	8009ff0 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    SystemCoreClockUpdate();
 80010e2:	f001 ffe7 	bl	80030b4 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 40);
 80010e6:	4b8b      	ldr	r3, [pc, #556]	; (8001314 <main+0x25c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a8b      	ldr	r2, [pc, #556]	; (8001318 <main+0x260>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	095b      	lsrs	r3, r3, #5
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffbe 	bl	8001074 <SysTick_Config>

    SD_LoadPreset("knobs1.json");
 80010f8:	4888      	ldr	r0, [pc, #544]	; (800131c <main+0x264>)
 80010fa:	f000 fed7 	bl	8001eac <SD_LoadPreset>

    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	75fb      	strb	r3, [r7, #23]
 8001102:	e010      	b.n	8001126 <main+0x6e>
        ssd1306_Init(&knobs[i]);
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	015b      	lsls	r3, r3, #5
 8001108:	4a85      	ldr	r2, [pc, #532]	; (8001320 <main+0x268>)
 800110a:	4413      	add	r3, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f000 ff5f 	bl	8001fd0 <ssd1306_Init>
        ssd1306_WriteKnob(&knobs[i]);
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	015b      	lsls	r3, r3, #5
 8001116:	4a82      	ldr	r2, [pc, #520]	; (8001320 <main+0x268>)
 8001118:	4413      	add	r3, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f001 f8f2 	bl	8002304 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	3301      	adds	r3, #1
 8001124:	75fb      	strb	r3, [r7, #23]
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d9eb      	bls.n	8001104 <main+0x4c>
    }
    uint64_t cycles = 0;
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	e9c7 2302 	strd	r2, r3, [r7, #8]

    while (1) {

        if (isMenuActive) {
 8001138:	4b7a      	ldr	r3, [pc, #488]	; (8001324 <main+0x26c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d036      	beq.n	80011ae <main+0xf6>
            if (!isKnobsStale && !isLoadPresetActive) {
 8001140:	4b79      	ldr	r3, [pc, #484]	; (8001328 <main+0x270>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	f083 0301 	eor.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <main+0xae>
 800114e:	4b77      	ldr	r3, [pc, #476]	; (800132c <main+0x274>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f083 0301 	eor.w	r3, r3, #1
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d004      	beq.n	8001166 <main+0xae>
                ssd1306_WriteMainMenu();
 800115c:	f001 fa26 	bl	80025ac <ssd1306_WriteMainMenu>
                isKnobsStale = true;
 8001160:	4b71      	ldr	r3, [pc, #452]	; (8001328 <main+0x270>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
            }

            if (isLoadPresetActive && !isPresetsLoaded) {
 8001166:	4b71      	ldr	r3, [pc, #452]	; (800132c <main+0x274>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d02f      	beq.n	80011ce <main+0x116>
 800116e:	4b70      	ldr	r3, [pc, #448]	; (8001330 <main+0x278>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f083 0301 	eor.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d028      	beq.n	80011ce <main+0x116>
                for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 800117c:	2300      	movs	r3, #0
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	e00a      	b.n	8001198 <main+0xe0>
                    adcAveragedPrev[i] = adcAveraged[i];
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	496b      	ldr	r1, [pc, #428]	; (8001334 <main+0x27c>)
 8001188:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800118c:	4a6a      	ldr	r2, [pc, #424]	; (8001338 <main+0x280>)
 800118e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	3301      	adds	r3, #1
 8001196:	71fb      	strb	r3, [r7, #7]
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d9f1      	bls.n	8001182 <main+0xca>
                }
                SD_FetchPresetNames();
 800119e:	f000 fd79 	bl	8001c94 <SD_FetchPresetNames>
                ssd1306_WritePresets();
 80011a2:	f001 fa53 	bl	800264c <ssd1306_WritePresets>
                isPresetsLoaded = true;
 80011a6:	4b62      	ldr	r3, [pc, #392]	; (8001330 <main+0x278>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e00f      	b.n	80011ce <main+0x116>
            }
        } else if (isKnobsStale) {
 80011ae:	4b5e      	ldr	r3, [pc, #376]	; (8001328 <main+0x270>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <main+0x10a>
            ssd1306_WriteAllKnobs();
 80011b6:	f001 f88b 	bl	80022d0 <ssd1306_WriteAllKnobs>
            isKnobsStale = false;
 80011ba:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <main+0x270>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e005      	b.n	80011ce <main+0x116>
        } else {
            isLoadPresetActive = false;
 80011c2:	4b5a      	ldr	r3, [pc, #360]	; (800132c <main+0x274>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
            isPresetsLoaded = false;
 80011c8:	4b59      	ldr	r3, [pc, #356]	; (8001330 <main+0x278>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
        }

        for (uint8_t col = 0; col < NUM_COLS; col++) {
 80011ce:	2300      	movs	r3, #0
 80011d0:	71bb      	strb	r3, [r7, #6]
 80011d2:	e093      	b.n	80012fc <main+0x244>
            //adcAveragedPrev[i + col * NUM_ROWS] = adcAveraged[i];

            ADC_ReadKnobs();
 80011d4:	f000 fac4 	bl	8001760 <ADC_ReadKnobs>

            for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	717b      	strb	r3, [r7, #5]
 80011dc:	e087      	b.n	80012ee <main+0x236>
                if (isMenuActive) {
 80011de:	4b51      	ldr	r3, [pc, #324]	; (8001324 <main+0x26c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d02f      	beq.n	8001246 <main+0x18e>
                    if (isPresetsLoaded) {
 80011e6:	4b52      	ldr	r3, [pc, #328]	; (8001330 <main+0x278>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d07c      	beq.n	80012e8 <main+0x230>
                        int16_t knobDiff = abs(adcAveraged[i] - adcAveragedPrev[i]);
 80011ee:	797b      	ldrb	r3, [r7, #5]
 80011f0:	4a50      	ldr	r2, [pc, #320]	; (8001334 <main+0x27c>)
 80011f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f6:	4619      	mov	r1, r3
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <main+0x280>)
 80011fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001200:	1acb      	subs	r3, r1, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	bfb8      	it	lt
 8001206:	425b      	neglt	r3, r3
 8001208:	807b      	strh	r3, [r7, #2]
                        if (knobDiff > 50) {
 800120a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800120e:	2b32      	cmp	r3, #50	; 0x32
 8001210:	dd6a      	ble.n	80012e8 <main+0x230>
                            SD_LoadPreset(presetFilenames[i]);
 8001212:	797b      	ldrb	r3, [r7, #5]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	4a49      	ldr	r2, [pc, #292]	; (800133c <main+0x284>)
 8001218:	4413      	add	r3, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fe46 	bl	8001eac <SD_LoadPreset>
                            knobs[i].isLocked = true;
 8001220:	797b      	ldrb	r3, [r7, #5]
 8001222:	4a3f      	ldr	r2, [pc, #252]	; (8001320 <main+0x268>)
 8001224:	015b      	lsls	r3, r3, #5
 8001226:	4413      	add	r3, r2
 8001228:	331e      	adds	r3, #30
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
                            isMenuActive = false;
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <main+0x26c>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
                            ssd1306_WriteAllKnobs();
 8001234:	f001 f84c 	bl	80022d0 <ssd1306_WriteAllKnobs>
                            HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[BUTTON_MENU]);
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <main+0x288>)
 800123a:	895b      	ldrh	r3, [r3, #10]
 800123c:	4619      	mov	r1, r3
 800123e:	4841      	ldr	r0, [pc, #260]	; (8001344 <main+0x28c>)
 8001240:	f002 ff31 	bl	80040a6 <HAL_GPIO_TogglePin>
 8001244:	e050      	b.n	80012e8 <main+0x230>
                        }
                    }
                } else {
                    uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	015b      	lsls	r3, r3, #5
 800124a:	4a35      	ldr	r2, [pc, #212]	; (8001320 <main+0x268>)
 800124c:	441a      	add	r2, r3
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	4938      	ldr	r1, [pc, #224]	; (8001334 <main+0x27c>)
 8001252:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f000 fb28 	bl	80018b0 <MIDI_Scale_And_Filter>
 8001260:	4603      	mov	r3, r0
 8001262:	713b      	strb	r3, [r7, #4]
                    if (curr_MIDI_val != knobs[i].value) {
 8001264:	797b      	ldrb	r3, [r7, #5]
 8001266:	4a2e      	ldr	r2, [pc, #184]	; (8001320 <main+0x268>)
 8001268:	015b      	lsls	r3, r3, #5
 800126a:	4413      	add	r3, r2
 800126c:	331b      	adds	r3, #27
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	793a      	ldrb	r2, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	d038      	beq.n	80012e8 <main+0x230>
                        knobs[i].value = curr_MIDI_val;
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	4a29      	ldr	r2, [pc, #164]	; (8001320 <main+0x268>)
 800127a:	015b      	lsls	r3, r3, #5
 800127c:	4413      	add	r3, r2
 800127e:	331b      	adds	r3, #27
 8001280:	793a      	ldrb	r2, [r7, #4]
 8001282:	701a      	strb	r2, [r3, #0]
                        ssd1306_WriteKnob(&knobs[i]);
 8001284:	797b      	ldrb	r3, [r7, #5]
 8001286:	015b      	lsls	r3, r3, #5
 8001288:	4a25      	ldr	r2, [pc, #148]	; (8001320 <main+0x268>)
 800128a:	4413      	add	r3, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f001 f839 	bl	8002304 <ssd1306_WriteKnob>
                        if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 8001292:	797b      	ldrb	r3, [r7, #5]
 8001294:	4a22      	ldr	r2, [pc, #136]	; (8001320 <main+0x268>)
 8001296:	015b      	lsls	r3, r3, #5
 8001298:	4413      	add	r3, r2
 800129a:	331b      	adds	r3, #27
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	797b      	ldrb	r3, [r7, #5]
 80012a0:	491f      	ldr	r1, [pc, #124]	; (8001320 <main+0x268>)
 80012a2:	015b      	lsls	r3, r3, #5
 80012a4:	440b      	add	r3, r1
 80012a6:	331a      	adds	r3, #26
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d106      	bne.n	80012bc <main+0x204>
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <main+0x268>)
 80012b2:	015b      	lsls	r3, r3, #5
 80012b4:	4413      	add	r3, r2
 80012b6:	331e      	adds	r3, #30
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
                        if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 80012bc:	797b      	ldrb	r3, [r7, #5]
 80012be:	4a18      	ldr	r2, [pc, #96]	; (8001320 <main+0x268>)
 80012c0:	015b      	lsls	r3, r3, #5
 80012c2:	4413      	add	r3, r2
 80012c4:	331e      	adds	r3, #30
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10d      	bne.n	80012e8 <main+0x230>
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	015b      	lsls	r3, r3, #5
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <main+0x268>)
 80012d2:	441a      	add	r2, r3
 80012d4:	797b      	ldrb	r3, [r7, #5]
 80012d6:	4912      	ldr	r1, [pc, #72]	; (8001320 <main+0x268>)
 80012d8:	015b      	lsls	r3, r3, #5
 80012da:	440b      	add	r3, r1
 80012dc:	331b      	adds	r3, #27
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	4610      	mov	r0, r2
 80012e4:	f000 fac9 	bl	800187a <MIDI_Send>
            for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 80012e8:	797b      	ldrb	r3, [r7, #5]
 80012ea:	3301      	adds	r3, #1
 80012ec:	717b      	strb	r3, [r7, #5]
 80012ee:	797b      	ldrb	r3, [r7, #5]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	f67f af74 	bls.w	80011de <main+0x126>
        for (uint8_t col = 0; col < NUM_COLS; col++) {
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	3301      	adds	r3, #1
 80012fa:	71bb      	strb	r3, [r7, #6]
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f43f af68 	beq.w	80011d4 <main+0x11c>
                }

            }
        }

        cycles++;
 8001304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001308:	1c54      	adds	r4, r2, #1
 800130a:	f143 0500 	adc.w	r5, r3, #0
 800130e:	e9c7 4502 	strd	r4, r5, [r7, #8]
        if (isMenuActive) {
 8001312:	e711      	b.n	8001138 <main+0x80>
 8001314:	20000068 	.word	0x20000068
 8001318:	cccccccd 	.word	0xcccccccd
 800131c:	08013b60 	.word	0x08013b60
 8001320:	20002a84 	.word	0x20002a84
 8001324:	20000370 	.word	0x20000370
 8001328:	20000373 	.word	0x20000373
 800132c:	20000371 	.word	0x20000371
 8001330:	20000372 	.word	0x20000372
 8001334:	20000374 	.word	0x20000374
 8001338:	2000037c 	.word	0x2000037c
 800133c:	200025ac 	.word	0x200025ac
 8001340:	2000005c 	.word	0x2000005c
 8001344:	40020400 	.word	0x40020400

08001348 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b09a      	sub	sp, #104	; 0x68
 800134c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800134e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001352:	2230      	movs	r2, #48	; 0x30
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f00f f992 	bl	8010680 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b30      	ldr	r3, [pc, #192]	; (8001444 <SystemClock_Config+0xfc>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a2f      	ldr	r2, [pc, #188]	; (8001444 <SystemClock_Config+0xfc>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <SystemClock_Config+0xfc>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <SystemClock_Config+0x100>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a29      	ldr	r2, [pc, #164]	; (8001448 <SystemClock_Config+0x100>)
 80013a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b27      	ldr	r3, [pc, #156]	; (8001448 <SystemClock_Config+0x100>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80013b6:	2309      	movs	r3, #9
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013c0:	2301      	movs	r3, #1
 80013c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c4:	2302      	movs	r3, #2
 80013c6:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013cc:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLM = 25;
 80013ce:	2319      	movs	r3, #25
 80013d0:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLN = 192;
 80013d2:	23c0      	movs	r3, #192	; 0xc0
 80013d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80013da:	2304      	movs	r3, #4
 80013dc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013e2:	4618      	mov	r0, r3
 80013e4:	f004 fdd8 	bl	8005f98 <HAL_RCC_OscConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0xaa>
            {
        Error_Handler();
 80013ee:	f000 fa3f 	bl	8001870 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013f2:	230f      	movs	r3, #15
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f6:	2302      	movs	r3, #2
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	2103      	movs	r1, #3
 800140e:	4618      	mov	r0, r3
 8001410:	f005 f83a 	bl	8006488 <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xd6>
            {
        Error_Handler();
 800141a:	f000 fa29 	bl	8001870 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800141e:	2302      	movs	r3, #2
 8001420:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001426:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4618      	mov	r0, r3
 800142e:	f005 f9e7 	bl	8006800 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0xf4>
            {
        Error_Handler();
 8001438:	f000 fa1a 	bl	8001870 <Error_Handler>
    }
}
 800143c:	bf00      	nop
 800143e:	3768      	adds	r7, #104	; 0x68
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40007000 	.word	0x40007000

0800144c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <MX_ADC1_Init+0x9c>)
 8001460:	4a22      	ldr	r2, [pc, #136]	; (80014ec <MX_ADC1_Init+0xa0>)
 8001462:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_ADC1_Init+0x9c>)
 8001466:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800146a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <MX_ADC1_Init+0x9c>)
 800146e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001472:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_ADC1_Init+0x9c>)
 8001476:	2201      	movs	r2, #1
 8001478:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_ADC1_Init+0x9c>)
 800147c:	2201      	movs	r2, #1
 800147e:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_ADC1_Init+0x9c>)
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_ADC1_Init+0x9c>)
 800148a:	2200      	movs	r2, #0
 800148c:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_ADC1_Init+0x9c>)
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <MX_ADC1_Init+0xa4>)
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_ADC1_Init+0x9c>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_ADC1_Init+0x9c>)
 800149c:	2201      	movs	r2, #1
 800149e:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_ADC1_Init+0x9c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_ADC1_Init+0x9c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <MX_ADC1_Init+0x9c>)
 80014b0:	f001 ff40 	bl	8003334 <HAL_ADC_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_ADC1_Init+0x72>
            {
        Error_Handler();
 80014ba:	f000 f9d9 	bl	8001870 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	4619      	mov	r1, r3
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_ADC1_Init+0x9c>)
 80014d0:	f002 f8f4 	bl	80036bc <HAL_ADC_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_ADC1_Init+0x92>
            {
        Error_Handler();
 80014da:	f000 f9c9 	bl	8001870 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20002a3c 	.word	0x20002a3c
 80014ec:	40012000 	.word	0x40012000
 80014f0:	0f000001 	.word	0x0f000001

080014f4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_I2C1_Init+0x50>)
 80014fa:	4a13      	ldr	r2, [pc, #76]	; (8001548 <MX_I2C1_Init+0x54>)
 80014fc:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 800000;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_I2C1_Init+0x50>)
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <MX_I2C1_Init+0x58>)
 8001502:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_I2C1_Init+0x50>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_I2C1_Init+0x50>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_I2C1_Init+0x50>)
 8001512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001516:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <MX_I2C1_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_I2C1_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_I2C1_Init+0x50>)
 8001532:	f002 fdd3 	bl	80040dc <HAL_I2C_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_I2C1_Init+0x4c>
            {
        Error_Handler();
 800153c:	f000 f998 	bl	8001870 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200029ac 	.word	0x200029ac
 8001548:	40005400 	.word	0x40005400
 800154c:	000c3500 	.word	0x000c3500

08001550 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_RTC_Init+0x44>)
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <MX_RTC_Init+0x48>)
 8001558:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_RTC_Init+0x44>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_RTC_Init+0x44>)
 8001562:	227f      	movs	r2, #127	; 0x7f
 8001564:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_RTC_Init+0x44>)
 8001568:	22ff      	movs	r2, #255	; 0xff
 800156a:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_RTC_Init+0x44>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_RTC_Init+0x44>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_RTC_Init+0x44>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_RTC_Init+0x44>)
 8001580:	f005 fa2e 	bl	80069e0 <HAL_RTC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_RTC_Init+0x3e>
            {
        Error_Handler();
 800158a:	f000 f971 	bl	8001870 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20002b04 	.word	0x20002b04
 8001598:	40002800 	.word	0x40002800

0800159c <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015a2:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <MX_SDIO_SD_Init+0x3c>)
 80015a4:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 12;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <MX_SDIO_SD_Init+0x38>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	20002b24 	.word	0x20002b24
 80015d8:	40012c00 	.word	0x40012c00

080015dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <MX_GPIO_Init+0x108>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a3a      	ldr	r2, [pc, #232]	; (80016e4 <MX_GPIO_Init+0x108>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <MX_GPIO_Init+0x108>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <MX_GPIO_Init+0x108>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a33      	ldr	r2, [pc, #204]	; (80016e4 <MX_GPIO_Init+0x108>)
 8001618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <MX_GPIO_Init+0x108>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <MX_GPIO_Init+0x108>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a2c      	ldr	r2, [pc, #176]	; (80016e4 <MX_GPIO_Init+0x108>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <MX_GPIO_Init+0x108>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <MX_GPIO_Init+0x108>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <MX_GPIO_Init+0x108>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <MX_GPIO_Init+0x108>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001662:	2200      	movs	r2, #0
 8001664:	f247 710f 	movw	r1, #30479	; 0x770f
 8001668:	481f      	ldr	r0, [pc, #124]	; (80016e8 <MX_GPIO_Init+0x10c>)
 800166a:	f002 fd03 	bl	8004074 <HAL_GPIO_WritePin>
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : Detect_SDIO_Pin */
    GPIO_InitStruct.Pin = Detect_SDIO_Pin;
 800166e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001678:	2302      	movs	r3, #2
 800167a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Detect_SDIO_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	481a      	ldr	r0, [pc, #104]	; (80016ec <MX_GPIO_Init+0x110>)
 8001684:	f002 fb5a 	bl	8003d3c <HAL_GPIO_Init>

    /*Configure GPIO pin : Button_6_Pin */
    GPIO_InitStruct.Pin = Button_6_Pin;
 8001688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800168c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001692:	2301      	movs	r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Button_6_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <MX_GPIO_Init+0x110>)
 800169e:	f002 fb4d 	bl	8003d3c <HAL_GPIO_Init>

    /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
     Button_5_Pin */
    GPIO_InitStruct.Pin = Button_1_Pin | Button_2_Pin | Button_3_Pin | Button_4_Pin
 80016a2:	f248 43b0 	movw	r3, #33968	; 0x84b0
 80016a6:	617b      	str	r3, [r7, #20]
            | Button_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	480e      	ldr	r0, [pc, #56]	; (80016f0 <MX_GPIO_Init+0x114>)
 80016b8:	f002 fb40 	bl	8003d3c <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
     LED_5_Pin LED_6_Pin AMUX_S1_Pin AMUX_S0_Pin
     AMUX_S2_Pin AMUX_S3_Pin */
    GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 80016bc:	f247 730f 	movw	r3, #30479	; 0x770f
 80016c0:	617b      	str	r3, [r7, #20]
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_GPIO_Init+0x10c>)
 80016d6:	f002 fb31 	bl	8003d3c <HAL_GPIO_Init>

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020000 	.word	0x40020000

080016f4 <ADC_MuxSelect>:

/* USER CODE BEGIN 4 */
void ADC_MuxSelect(uint8_t c) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
    if (c > NUM_ADC_CHANNELS) return;
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b04      	cmp	r3, #4
 8001702:	d824      	bhi.n	800174e <ADC_MuxSelect+0x5a>

    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e01d      	b.n	8001746 <ADC_MuxSelect+0x52>
        if (c & (1 << i)) {
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	fa42 f303 	asr.w	r3, r2, r3
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <ADC_MuxSelect+0x3a>
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_SET);
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <ADC_MuxSelect+0x64>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001722:	2201      	movs	r2, #1
 8001724:	4619      	mov	r1, r3
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <ADC_MuxSelect+0x68>)
 8001728:	f002 fca4 	bl	8004074 <HAL_GPIO_WritePin>
 800172c:	e008      	b.n	8001740 <ADC_MuxSelect+0x4c>
        } else {
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_RESET);
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <ADC_MuxSelect+0x64>)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001736:	2200      	movs	r2, #0
 8001738:	4619      	mov	r1, r3
 800173a:	4808      	ldr	r0, [pc, #32]	; (800175c <ADC_MuxSelect+0x68>)
 800173c:	f002 fc9a 	bl	8004074 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3301      	adds	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b03      	cmp	r3, #3
 800174a:	ddde      	ble.n	800170a <ADC_MuxSelect+0x16>
 800174c:	e000      	b.n	8001750 <ADC_MuxSelect+0x5c>
    if (c > NUM_ADC_CHANNELS) return;
 800174e:	bf00      	nop
        }
    }
}
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	080150c0 	.word	0x080150c0
 800175c:	40020400 	.word	0x40020400

08001760 <ADC_ReadKnobs>:

void ADC_ReadKnobs() {
 8001760:	b580      	push	{r7, lr}
 8001762:	b096      	sub	sp, #88	; 0x58
 8001764:	af00      	add	r7, sp, #0
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 8001766:	2300      	movs	r3, #0
 8001768:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800176c:	e070      	b.n	8001850 <ADC_ReadKnobs+0xf0>
        uint16_t adcBuf[NUM_ADC_SAMPLES];

        ADC_MuxSelect(channel);
 800176e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ffbe 	bl	80016f4 <ADC_MuxSelect>

        // Select channel
        ADC_ChannelConfTypeDef sConfig = { 0 };
 8001778:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
        sConfig.Channel = adcChannels[channel];
 8001786:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800178a:	4a36      	ldr	r2, [pc, #216]	; (8001864 <ADC_ReadKnobs+0x104>)
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
        sConfig.Rank = 1;
 8001792:	2301      	movs	r3, #1
 8001794:	647b      	str	r3, [r7, #68]	; 0x44
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001796:	2300      	movs	r3, #0
 8001798:	64bb      	str	r3, [r7, #72]	; 0x48
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800179a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800179e:	4619      	mov	r1, r3
 80017a0:	4831      	ldr	r0, [pc, #196]	; (8001868 <ADC_ReadKnobs+0x108>)
 80017a2:	f001 ff8b 	bl	80036bc <HAL_ADC_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <ADC_ReadKnobs+0x50>
            Error_Handler();
 80017ac:	f000 f860 	bl	8001870 <Error_Handler>
        }

        // Sample the channel NUM_ADC_SAMPLES times to the buffer
        HAL_ADC_Start(&hadc1);
 80017b0:	482d      	ldr	r0, [pc, #180]	; (8001868 <ADC_ReadKnobs+0x108>)
 80017b2:	f001 fe03 	bl	80033bc <HAL_ADC_Start>
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80017bc:	e016      	b.n	80017ec <ADC_ReadKnobs+0x8c>
            HAL_ADC_PollForConversion(&hadc1, 1000);
 80017be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017c2:	4829      	ldr	r0, [pc, #164]	; (8001868 <ADC_ReadKnobs+0x108>)
 80017c4:	f001 fee1 	bl	800358a <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 80017c8:	4827      	ldr	r0, [pc, #156]	; (8001868 <ADC_ReadKnobs+0x108>)
 80017ca:	f001 ff69 	bl	80036a0 <HAL_ADC_GetValue>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80017d4:	b292      	uxth	r2, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80017dc:	440b      	add	r3, r1
 80017de:	f823 2c58 	strh.w	r2, [r3, #-88]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80017e2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80017e6:	3301      	adds	r3, #1
 80017e8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80017ec:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80017f0:	2b1f      	cmp	r3, #31
 80017f2:	d9e4      	bls.n	80017be <ADC_ReadKnobs+0x5e>
        }
        HAL_ADC_Stop(&hadc1);
 80017f4:	481c      	ldr	r0, [pc, #112]	; (8001868 <ADC_ReadKnobs+0x108>)
 80017f6:	f001 fe95 	bl	8003524 <HAL_ADC_Stop>

        // Calculate average of all samples for the channel
        uint16_t adc_sum = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8001800:	2300      	movs	r3, #0
 8001802:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8001806:	e011      	b.n	800182c <ADC_ReadKnobs+0xcc>
            adc_sum += adcBuf[i];
 8001808:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001812:	4413      	add	r3, r2
 8001814:	f833 2c58 	ldrh.w	r2, [r3, #-88]
 8001818:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800181c:	4413      	add	r3, r2
 800181e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8001822:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001826:	3301      	adds	r3, #1
 8001828:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800182c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001830:	2b1f      	cmp	r3, #31
 8001832:	d9e9      	bls.n	8001808 <ADC_ReadKnobs+0xa8>
        }

        adcAveraged[channel] = adc_sum / NUM_ADC_SAMPLES;
 8001834:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001838:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800183c:	0952      	lsrs	r2, r2, #5
 800183e:	b291      	uxth	r1, r2
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <ADC_ReadKnobs+0x10c>)
 8001842:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 8001846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800184a:	3301      	adds	r3, #1
 800184c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001854:	2b03      	cmp	r3, #3
 8001856:	d98a      	bls.n	800176e <ADC_ReadKnobs+0xe>
    }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3758      	adds	r7, #88	; 0x58
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	080150b0 	.word	0x080150b0
 8001868:	20002a3c 	.word	0x20002a3c
 800186c:	20000374 	.word	0x20000374

08001870 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    __disable_irq();
    while (1) {
 8001878:	e7fe      	b.n	8001878 <Error_Handler+0x8>

0800187a <MIDI_Send>:

#include "midi.h"
#include "usb_device.h"

// Sends a CC message for knob k with the specified value
void MIDI_Send(Knob *k, uint8_t value) {
 800187a:	b5b0      	push	{r4, r5, r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, Knob_Map(k, value, k->max_range));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7e1c      	ldrb	r4, [r3, #24]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7e5d      	ldrb	r5, [r3, #25]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7f5a      	ldrb	r2, [r3, #29]
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	4619      	mov	r1, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fbaa 	bl	8000ff0 <Knob_Map>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	4629      	mov	r1, r5
 80018a2:	4620      	mov	r0, r4
 80018a4:	f00d f9b0 	bl	800ec08 <MX_USB_Send_Midi>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bdb0      	pop	{r4, r5, r7, pc}

080018b0 <MIDI_Scale_And_Filter>:

// Scales an ADC value from (0, 255) to (0, k->max_values) an applies EMA filter
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * k->max_values / UPPER_BOUND_ADC;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7f1b      	ldrb	r3, [r3, #28]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe47 	bl	8000554 <__aeabi_i2d>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b45      	ldr	r3, [pc, #276]	; (80019e0 <MIDI_Scale_And_Filter+0x130>)
 80018cc:	f7fe ffd6 	bl	800087c <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f988 	bl	8000bec <__aeabi_d2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7fe fe49 	bl	8000578 <__aeabi_f2d>
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <MIDI_Scale_And_Filter+0x134>)
 80018ec:	f7fe fe9c 	bl	8000628 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe2a 	bl	8000554 <__aeabi_i2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4620      	mov	r0, r4
 8001906:	4629      	mov	r1, r5
 8001908:	f7fe fe8e 	bl	8000628 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4614      	mov	r4, r2
 8001912:	461d      	mov	r5, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7edb      	ldrb	r3, [r3, #27]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe1b 	bl	8000554 <__aeabi_i2d>
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <MIDI_Scale_And_Filter+0x134>)
 8001924:	f7fe fe80 	bl	8000628 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fcc4 	bl	80002bc <__adddf3>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7f5b      	ldrb	r3, [r3, #29]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fe07 	bl	8000554 <__aeabi_i2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f7ff f8dd 	bl	8000b0c <__aeabi_dcmplt>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d032      	beq.n	80019be <MIDI_Scale_And_Filter+0x10e>
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7fe fe0d 	bl	8000578 <__aeabi_f2d>
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <MIDI_Scale_And_Filter+0x134>)
 8001964:	f7fe fe60 	bl	8000628 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4614      	mov	r4, r2
 800196e:	461d      	mov	r5, r3
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdee 	bl	8000554 <__aeabi_i2d>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fe52 	bl	8000628 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7edb      	ldrb	r3, [r3, #27]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fddf 	bl	8000554 <__aeabi_i2d>
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <MIDI_Scale_And_Filter+0x134>)
 800199c:	f7fe fe44 	bl	8000628 <__aeabi_dmul>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4620      	mov	r0, r4
 80019a6:	4629      	mov	r1, r5
 80019a8:	f7fe fc88 	bl	80002bc <__adddf3>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f8fa 	bl	8000bac <__aeabi_d2uiz>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	e00c      	b.n	80019d8 <MIDI_Scale_And_Filter+0x128>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7f5b      	ldrb	r3, [r3, #29]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdc6 	bl	8000554 <__aeabi_i2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f8ec 	bl	8000bac <__aeabi_d2uiz>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b2db      	uxtb	r3, r3
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bdb0      	pop	{r4, r5, r7, pc}
 80019e0:	406f4000 	.word	0x406f4000
 80019e4:	3fe00000 	.word	0x3fe00000

080019e8 <Preset_GetName>:
#include "preset.h"

void Preset_GetName(char *file_buffer, char *name_buffer) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
    cJSON *preset_json = cJSON_Parse(file_buffer);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f00e fae8 	bl	800ffc8 <cJSON_Parse>
 80019f8:	60f8      	str	r0, [r7, #12]
    if (preset_json == NULL) return;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d012      	beq.n	8001a26 <Preset_GetName+0x3e>
    printf("test");
 8001a00:	480b      	ldr	r0, [pc, #44]	; (8001a30 <Preset_GetName+0x48>)
 8001a02:	f00e feef 	bl	80107e4 <iprintf>
    const cJSON *name = cJSON_GetObjectItemCaseSensitive(preset_json, "name");
 8001a06:	490b      	ldr	r1, [pc, #44]	; (8001a34 <Preset_GetName+0x4c>)
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f00e fde2 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001a0e:	60b8      	str	r0, [r7, #8]
    snprintf(name_buffer, MAX_LABEL_CHARS+1, "%s", name->valuestring);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <Preset_GetName+0x50>)
 8001a16:	210f      	movs	r1, #15
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f00f f913 	bl	8010c44 <sniprintf>

    cJSON_Delete(preset_json);
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f00d fdd6 	bl	800f5d0 <cJSON_Delete>
 8001a24:	e000      	b.n	8001a28 <Preset_GetName+0x40>
    if (preset_json == NULL) return;
 8001a26:	bf00      	nop
}
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	08013b6c 	.word	0x08013b6c
 8001a34:	08013b74 	.word	0x08013b74
 8001a38:	08013b7c 	.word	0x08013b7c

08001a3c <Preset_Load>:

void Preset_Load(char *buffer) {
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b093      	sub	sp, #76	; 0x4c
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    cJSON *preset_json = cJSON_Parse(buffer);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f00e fabf 	bl	800ffc8 <cJSON_Parse>
 8001a4a:	6378      	str	r0, [r7, #52]	; 0x34
    if (preset_json == NULL) return;
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8100 	beq.w	8001c54 <Preset_Load+0x218>

    const cJSON *knobs_json = cJSON_GetObjectItemCaseSensitive(preset_json, "knobs");
 8001a54:	4982      	ldr	r1, [pc, #520]	; (8001c60 <Preset_Load+0x224>)
 8001a56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a58:	f00e fdbb 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001a5c:	6338      	str	r0, [r7, #48]	; 0x30
    const cJSON *knob_json = NULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	647b      	str	r3, [r7, #68]	; 0x44

    uint8_t i = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 8001a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <Preset_Load+0x38>
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	e000      	b.n	8001a76 <Preset_Load+0x3a>
 8001a74:	2300      	movs	r3, #0
 8001a76:	647b      	str	r3, [r7, #68]	; 0x44
 8001a78:	e0e4      	b.n	8001c44 <Preset_Load+0x208>
    {
        if (i >= NUM_KNOBS) return;
 8001a7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	f200 80ea 	bhi.w	8001c58 <Preset_Load+0x21c>

        const cJSON *row = cJSON_GetObjectItemCaseSensitive(knob_json, "row");
 8001a84:	4977      	ldr	r1, [pc, #476]	; (8001c64 <Preset_Load+0x228>)
 8001a86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a88:	f00e fda3 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001a8c:	62f8      	str	r0, [r7, #44]	; 0x2c
        const cJSON *col = cJSON_GetObjectItemCaseSensitive(knob_json, "col");
 8001a8e:	4976      	ldr	r1, [pc, #472]	; (8001c68 <Preset_Load+0x22c>)
 8001a90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a92:	f00e fd9e 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001a96:	62b8      	str	r0, [r7, #40]	; 0x28
        const cJSON *label = cJSON_GetObjectItemCaseSensitive(knob_json, "label");
 8001a98:	4974      	ldr	r1, [pc, #464]	; (8001c6c <Preset_Load+0x230>)
 8001a9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a9c:	f00e fd99 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001aa0:	6278      	str	r0, [r7, #36]	; 0x24
        const cJSON *channel = cJSON_GetObjectItemCaseSensitive(knob_json, "channel");
 8001aa2:	4973      	ldr	r1, [pc, #460]	; (8001c70 <Preset_Load+0x234>)
 8001aa4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001aa6:	f00e fd94 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001aaa:	6238      	str	r0, [r7, #32]
        const cJSON *cc = cJSON_GetObjectItemCaseSensitive(knob_json, "cc");
 8001aac:	4971      	ldr	r1, [pc, #452]	; (8001c74 <Preset_Load+0x238>)
 8001aae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ab0:	f00e fd8f 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001ab4:	61f8      	str	r0, [r7, #28]
        const cJSON *init_value = cJSON_GetObjectItemCaseSensitive(knob_json, "init_value");
 8001ab6:	4970      	ldr	r1, [pc, #448]	; (8001c78 <Preset_Load+0x23c>)
 8001ab8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001aba:	f00e fd8a 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001abe:	61b8      	str	r0, [r7, #24]
        const cJSON *max_values = cJSON_GetObjectItemCaseSensitive(knob_json, "max_values");
 8001ac0:	496e      	ldr	r1, [pc, #440]	; (8001c7c <Preset_Load+0x240>)
 8001ac2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ac4:	f00e fd85 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001ac8:	6178      	str	r0, [r7, #20]
        const cJSON *max_range = cJSON_GetObjectItemCaseSensitive(knob_json, "max_range");
 8001aca:	496d      	ldr	r1, [pc, #436]	; (8001c80 <Preset_Load+0x244>)
 8001acc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ace:	f00e fd80 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001ad2:	6138      	str	r0, [r7, #16]
        const cJSON *isLocked = cJSON_GetObjectItemCaseSensitive(knob_json, "isLocked");
 8001ad4:	496b      	ldr	r1, [pc, #428]	; (8001c84 <Preset_Load+0x248>)
 8001ad6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ad8:	f00e fd7b 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001adc:	60f8      	str	r0, [r7, #12]

        knobs[i].row = row->valueint;
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ae6:	b2d1      	uxtb	r1, r2
 8001ae8:	4a67      	ldr	r2, [pc, #412]	; (8001c88 <Preset_Load+0x24c>)
 8001aea:	015b      	lsls	r3, r3, #5
 8001aec:	4413      	add	r3, r2
 8001aee:	460a      	mov	r2, r1
 8001af0:	701a      	strb	r2, [r3, #0]
        knobs[i].col = col->valueint;
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001afa:	b2d1      	uxtb	r1, r2
 8001afc:	4a62      	ldr	r2, [pc, #392]	; (8001c88 <Preset_Load+0x24c>)
 8001afe:	015b      	lsls	r3, r3, #5
 8001b00:	4413      	add	r3, r2
 8001b02:	3301      	adds	r3, #1
 8001b04:	460a      	mov	r2, r1
 8001b06:	701a      	strb	r2, [r3, #0]
        snprintf(knobs[i].label, sizeof(knobs[i].label) / sizeof(knobs[i].label[0]), "%s", label->valuestring);
 8001b08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b0c:	015b      	lsls	r3, r3, #5
 8001b0e:	4a5e      	ldr	r2, [pc, #376]	; (8001c88 <Preset_Load+0x24c>)
 8001b10:	4413      	add	r3, r2
 8001b12:	1c98      	adds	r0, r3, #2
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	4a5c      	ldr	r2, [pc, #368]	; (8001c8c <Preset_Load+0x250>)
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f00f f892 	bl	8010c44 <sniprintf>
        knobs[i].channel = channel->valueint;
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b28:	b2d1      	uxtb	r1, r2
 8001b2a:	4a57      	ldr	r2, [pc, #348]	; (8001c88 <Preset_Load+0x24c>)
 8001b2c:	015b      	lsls	r3, r3, #5
 8001b2e:	4413      	add	r3, r2
 8001b30:	3318      	adds	r3, #24
 8001b32:	460a      	mov	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
        knobs[i].cc = cc->valueint;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b3e:	b2d1      	uxtb	r1, r2
 8001b40:	4a51      	ldr	r2, [pc, #324]	; (8001c88 <Preset_Load+0x24c>)
 8001b42:	015b      	lsls	r3, r3, #5
 8001b44:	4413      	add	r3, r2
 8001b46:	3319      	adds	r3, #25
 8001b48:	460a      	mov	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
        knobs[i].init_value = init_value->valueint;
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b54:	b2d1      	uxtb	r1, r2
 8001b56:	4a4c      	ldr	r2, [pc, #304]	; (8001c88 <Preset_Load+0x24c>)
 8001b58:	015b      	lsls	r3, r3, #5
 8001b5a:	4413      	add	r3, r2
 8001b5c:	331a      	adds	r3, #26
 8001b5e:	460a      	mov	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
        knobs[i].max_values = max_values->valueint;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b6a:	b2d1      	uxtb	r1, r2
 8001b6c:	4a46      	ldr	r2, [pc, #280]	; (8001c88 <Preset_Load+0x24c>)
 8001b6e:	015b      	lsls	r3, r3, #5
 8001b70:	4413      	add	r3, r2
 8001b72:	331c      	adds	r3, #28
 8001b74:	460a      	mov	r2, r1
 8001b76:	701a      	strb	r2, [r3, #0]
        knobs[i].max_range = max_range->valueint;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b80:	b2d1      	uxtb	r1, r2
 8001b82:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <Preset_Load+0x24c>)
 8001b84:	015b      	lsls	r3, r3, #5
 8001b86:	4413      	add	r3, r2
 8001b88:	331d      	adds	r3, #29
 8001b8a:	460a      	mov	r2, r1
 8001b8c:	701a      	strb	r2, [r3, #0]
        knobs[i].isLocked = isLocked->valueint;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b96:	b2d1      	uxtb	r1, r2
 8001b98:	4a3b      	ldr	r2, [pc, #236]	; (8001c88 <Preset_Load+0x24c>)
 8001b9a:	015b      	lsls	r3, r3, #5
 8001b9c:	4413      	add	r3, r2
 8001b9e:	331e      	adds	r3, #30
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	701a      	strb	r2, [r3, #0]

        const cJSON *sub_labels = cJSON_GetObjectItemCaseSensitive(knob_json, "sub_labels");
 8001ba4:	493a      	ldr	r1, [pc, #232]	; (8001c90 <Preset_Load+0x254>)
 8001ba6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ba8:	f00e fd13 	bl	80105d2 <cJSON_GetObjectItemCaseSensitive>
 8001bac:	60b8      	str	r0, [r7, #8]
        const cJSON *sub_label = NULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 8001bb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001bb6:	4a34      	ldr	r2, [pc, #208]	; (8001c88 <Preset_Load+0x24c>)
 8001bb8:	015b      	lsls	r3, r3, #5
 8001bba:	4413      	add	r3, r2
 8001bbc:	331c      	adds	r3, #28
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00e fd39 	bl	8010644 <malloc>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <Preset_Load+0x24c>)
 8001bd8:	0163      	lsls	r3, r4, #5
 8001bda:	4413      	add	r3, r2
 8001bdc:	3314      	adds	r3, #20
 8001bde:	6019      	str	r1, [r3, #0]

        uint8_t label_index = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <Preset_Load+0x1b6>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	e000      	b.n	8001bf4 <Preset_Load+0x1b8>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf6:	e01a      	b.n	8001c2e <Preset_Load+0x1f2>
        {
            snprintf(knobs[i].sub_labels[label_index], sizeof(knobs[i].sub_labels[0]) / sizeof(knobs[i].sub_labels[0][0]), "%s", sub_label->valuestring);
 8001bf8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001bfc:	4a22      	ldr	r2, [pc, #136]	; (8001c88 <Preset_Load+0x24c>)
 8001bfe:	015b      	lsls	r3, r3, #5
 8001c00:	4413      	add	r3, r2
 8001c02:	3314      	adds	r3, #20
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	18c8      	adds	r0, r1, r3
 8001c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <Preset_Load+0x250>)
 8001c18:	210f      	movs	r1, #15
 8001c1a:	f00f f813 	bl	8010c44 <sniprintf>
            label_index++;
 8001c1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c22:	3301      	adds	r3, #1
 8001c24:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e1      	bne.n	8001bf8 <Preset_Load+0x1bc>
        }
        i++;
 8001c34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 8001c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	647b      	str	r3, [r7, #68]	; 0x44
 8001c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f47f af17 	bne.w	8001a7a <Preset_Load+0x3e>
    }

    cJSON_Delete(preset_json);
 8001c4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c4e:	f00d fcbf 	bl	800f5d0 <cJSON_Delete>
 8001c52:	e002      	b.n	8001c5a <Preset_Load+0x21e>
    if (preset_json == NULL) return;
 8001c54:	bf00      	nop
 8001c56:	e000      	b.n	8001c5a <Preset_Load+0x21e>
        if (i >= NUM_KNOBS) return;
 8001c58:	bf00      	nop
}
 8001c5a:	374c      	adds	r7, #76	; 0x4c
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}
 8001c60:	08013b80 	.word	0x08013b80
 8001c64:	08013b88 	.word	0x08013b88
 8001c68:	08013b8c 	.word	0x08013b8c
 8001c6c:	08013b90 	.word	0x08013b90
 8001c70:	08013b98 	.word	0x08013b98
 8001c74:	08013ba0 	.word	0x08013ba0
 8001c78:	08013ba4 	.word	0x08013ba4
 8001c7c:	08013bb0 	.word	0x08013bb0
 8001c80:	08013bbc 	.word	0x08013bbc
 8001c84:	08013bc8 	.word	0x08013bc8
 8001c88:	20002a84 	.word	0x20002a84
 8001c8c:	08013b7c 	.word	0x08013b7c
 8001c90:	08013bd4 	.word	0x08013bd4

08001c94 <SD_FetchPresetNames>:
 */
#include "stm32f4xx_hal.h"
#include "sd.h"
#include "ssd1306.h"

void SD_FetchPresetNames() {
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b0dc      	sub	sp, #368	; 0x170
 8001c98:	af00      	add	r7, sp, #0
    DIR root;
    FILINFO root_info;
    retSD = f_mount(&SDFatFS, "", 1);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	497a      	ldr	r1, [pc, #488]	; (8001e88 <SD_FetchPresetNames+0x1f4>)
 8001c9e:	487b      	ldr	r0, [pc, #492]	; (8001e8c <SD_FetchPresetNames+0x1f8>)
 8001ca0:	f00c f958 	bl	800df54 <f_mount>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b79      	ldr	r3, [pc, #484]	; (8001e90 <SD_FetchPresetNames+0x1fc>)
 8001caa:	701a      	strb	r2, [r3, #0]

    // Count the number of preset files on the card
    uint8_t presetCount = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
    retSD = f_findfirst(&root, &root_info, "", "*.json");
 8001cb2:	f107 0114 	add.w	r1, r7, #20
 8001cb6:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001cba:	4b76      	ldr	r3, [pc, #472]	; (8001e94 <SD_FetchPresetNames+0x200>)
 8001cbc:	4a72      	ldr	r2, [pc, #456]	; (8001e88 <SD_FetchPresetNames+0x1f4>)
 8001cbe:	f00c fe32 	bl	800e926 <f_findfirst>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b72      	ldr	r3, [pc, #456]	; (8001e90 <SD_FetchPresetNames+0x1fc>)
 8001cc8:	701a      	strb	r2, [r3, #0]
    while (retSD == FR_OK && root_info.fname[0]) {
 8001cca:	e010      	b.n	8001cee <SD_FetchPresetNames+0x5a>
        presetCount++;
 8001ccc:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
        retSD = f_findnext(&root, &root_info);
 8001cd6:	f107 0214 	add.w	r2, r7, #20
 8001cda:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00c fdf8 	bl	800e8d6 <f_findnext>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <SD_FetchPresetNames+0x1fc>)
 8001cec:	701a      	strb	r2, [r3, #0]
    while (retSD == FR_OK && root_info.fname[0]) {
 8001cee:	4b68      	ldr	r3, [pc, #416]	; (8001e90 <SD_FetchPresetNames+0x1fc>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d104      	bne.n	8001d00 <SD_FetchPresetNames+0x6c>
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	7d9b      	ldrb	r3, [r3, #22]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e5      	bne.n	8001ccc <SD_FetchPresetNames+0x38>
    }
    f_closedir(&root);
 8001d00:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001d04:	4618      	mov	r0, r3
 8001d06:	f00c fd83 	bl	800e810 <f_closedir>

    // Save the filename of each file so we can sort the list
    uint8_t i = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
    retSD = f_findfirst(&root, &root_info, "", "*.json");
 8001d10:	f107 0114 	add.w	r1, r7, #20
 8001d14:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001d18:	4b5e      	ldr	r3, [pc, #376]	; (8001e94 <SD_FetchPresetNames+0x200>)
 8001d1a:	4a5b      	ldr	r2, [pc, #364]	; (8001e88 <SD_FetchPresetNames+0x1f4>)
 8001d1c:	f00c fe03 	bl	800e926 <f_findfirst>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b5a      	ldr	r3, [pc, #360]	; (8001e90 <SD_FetchPresetNames+0x1fc>)
 8001d26:	701a      	strb	r2, [r3, #0]
    while (retSD == FR_OK && root_info.fname[0]) {
 8001d28:	e01d      	b.n	8001d66 <SD_FetchPresetNames+0xd2>
        snprintf(presetFilenames[i], _MAX_LFN+1, "%s", root_info.fname);
 8001d2a:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4a59      	ldr	r2, [pc, #356]	; (8001e98 <SD_FetchPresetNames+0x204>)
 8001d32:	1898      	adds	r0, r3, r2
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	3316      	adds	r3, #22
 8001d3a:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <SD_FetchPresetNames+0x208>)
 8001d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d40:	f00e ff80 	bl	8010c44 <sniprintf>
        retSD = f_findnext(&root, &root_info);
 8001d44:	f107 0214 	add.w	r2, r7, #20
 8001d48:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00c fdc1 	bl	800e8d6 <f_findnext>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b4d      	ldr	r3, [pc, #308]	; (8001e90 <SD_FetchPresetNames+0x1fc>)
 8001d5a:	701a      	strb	r2, [r3, #0]
        i++;
 8001d5c:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8001d60:	3301      	adds	r3, #1
 8001d62:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
    while (retSD == FR_OK && root_info.fname[0]) {
 8001d66:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <SD_FetchPresetNames+0x1fc>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d104      	bne.n	8001d78 <SD_FetchPresetNames+0xe4>
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	7d9b      	ldrb	r3, [r3, #22]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1d8      	bne.n	8001d2a <SD_FetchPresetNames+0x96>
    }

    // Sort the filenames
    qsort(presetFilenames, presetCount, sizeof(presetFilenames[0]), qsort_cmp);
 8001d78:	f897 116e 	ldrb.w	r1, [r7, #366]	; 0x16e
 8001d7c:	4b48      	ldr	r3, [pc, #288]	; (8001ea0 <SD_FetchPresetNames+0x20c>)
 8001d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d82:	4845      	ldr	r0, [pc, #276]	; (8001e98 <SD_FetchPresetNames+0x204>)
 8001d84:	f00e fdf5 	bl	8010972 <qsort>

    // Open each file, parse the name, and save it to the presets array
    for (i = 0; i < presetCount; i++) {
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 8001d8e:	e066      	b.n	8001e5e <SD_FetchPresetNames+0x1ca>
 8001d90:	466b      	mov	r3, sp
 8001d92:	461d      	mov	r5, r3
        retSD = f_open(&SDFile, presetFilenames[i], FA_READ);
 8001d94:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	4a3f      	ldr	r2, [pc, #252]	; (8001e98 <SD_FetchPresetNames+0x204>)
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4619      	mov	r1, r3
 8001da2:	4840      	ldr	r0, [pc, #256]	; (8001ea4 <SD_FetchPresetNames+0x210>)
 8001da4:	f00c f91c 	bl	800dfe0 <f_open>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <SD_FetchPresetNames+0x1fc>)
 8001dae:	701a      	strb	r2, [r3, #0]

        char presetBuffer[f_size(&SDFile) + 1];
 8001db0:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <SD_FetchPresetNames+0x210>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	1c5c      	adds	r4, r3, #1
 8001db6:	4623      	mov	r3, r4
 8001db8:	3b01      	subs	r3, #1
 8001dba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f04f 0100 	mov.w	r1, #0
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	00cb      	lsls	r3, r1, #3
 8001dce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001dd2:	00c2      	lsls	r2, r0, #3
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f04f 0100 	mov.w	r1, #0
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	00cb      	lsls	r3, r1, #3
 8001de4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001de8:	00c2      	lsls	r2, r0, #3
 8001dea:	1de3      	adds	r3, r4, #7
 8001dec:	08db      	lsrs	r3, r3, #3
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	ebad 0d03 	sub.w	sp, sp, r3
 8001df4:	466b      	mov	r3, sp
 8001df6:	3300      	adds	r3, #0
 8001df8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        char nameBuffer[MAX_LABEL_CHARS + 1];
        unsigned int bytesRead;
        retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001dfc:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8001e00:	1e62      	subs	r2, r4, #1
 8001e02:	463b      	mov	r3, r7
 8001e04:	4827      	ldr	r0, [pc, #156]	; (8001ea4 <SD_FetchPresetNames+0x210>)
 8001e06:	f00c faa9 	bl	800e35c <f_read>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <SD_FetchPresetNames+0x1fc>)
 8001e10:	701a      	strb	r2, [r3, #0]
        presetBuffer[bytesRead] = '\0';
 8001e12:	463b      	mov	r3, r7
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	54d1      	strb	r1, [r2, r3]

        Preset_GetName(presetBuffer, nameBuffer);
 8001e1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001e22:	1d3a      	adds	r2, r7, #4
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fdde 	bl	80019e8 <Preset_GetName>

        snprintf(presetNames[i], MAX_LABEL_CHARS + 1, "%s", nameBuffer);
 8001e2c:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 8001e30:	4613      	mov	r3, r2
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <SD_FetchPresetNames+0x214>)
 8001e38:	1898      	adds	r0, r3, r2
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <SD_FetchPresetNames+0x208>)
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f00e ff00 	bl	8010c44 <sniprintf>
        retSD = f_close(&SDFile);
 8001e44:	4817      	ldr	r0, [pc, #92]	; (8001ea4 <SD_FetchPresetNames+0x210>)
 8001e46:	f00c fc46 	bl	800e6d6 <f_close>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <SD_FetchPresetNames+0x1fc>)
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	46ad      	mov	sp, r5
    for (i = 0; i < presetCount; i++) {
 8001e54:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 8001e5e:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 8001e62:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d392      	bcc.n	8001d90 <SD_FetchPresetNames+0xfc>
    }

    retSD = f_mount(NULL, "", 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <SD_FetchPresetNames+0x1f4>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f00c f870 	bl	800df54 <f_mount>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <SD_FetchPresetNames+0x1fc>)
 8001e7a:	701a      	strb	r2, [r3, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bdb0      	pop	{r4, r5, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	08013be0 	.word	0x08013be0
 8001e8c:	20002de4 	.word	0x20002de4
 8001e90:	20002bac 	.word	0x20002bac
 8001e94:	08013be4 	.word	0x08013be4
 8001e98:	200025ac 	.word	0x200025ac
 8001e9c:	08013bec 	.word	0x08013bec
 8001ea0:	08001f85 	.word	0x08001f85
 8001ea4:	20002bb4 	.word	0x20002bb4
 8001ea8:	20002a00 	.word	0x20002a00

08001eac <SD_LoadPreset>:

void SD_LoadPreset(char *filename) {
 8001eac:	b5b0      	push	{r4, r5, r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	466b      	mov	r3, sp
 8001eb6:	461d      	mov	r5, r3
    retSD = f_mount(&SDFatFS, "", 1);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	492e      	ldr	r1, [pc, #184]	; (8001f74 <SD_LoadPreset+0xc8>)
 8001ebc:	482e      	ldr	r0, [pc, #184]	; (8001f78 <SD_LoadPreset+0xcc>)
 8001ebe:	f00c f849 	bl	800df54 <f_mount>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <SD_LoadPreset+0xd0>)
 8001ec8:	701a      	strb	r2, [r3, #0]
    retSD = f_open(&SDFile, filename, FA_READ);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	482c      	ldr	r0, [pc, #176]	; (8001f80 <SD_LoadPreset+0xd4>)
 8001ed0:	f00c f886 	bl	800dfe0 <f_open>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <SD_LoadPreset+0xd0>)
 8001eda:	701a      	strb	r2, [r3, #0]

    char presetBuffer[f_size(&SDFile) + 1];
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <SD_LoadPreset+0xd4>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	1c5c      	adds	r4, r3, #1
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f04f 0100 	mov.w	r1, #0
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	00cb      	lsls	r3, r1, #3
 8001ef8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001efc:	00c2      	lsls	r2, r0, #3
 8001efe:	4620      	mov	r0, r4
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	00cb      	lsls	r3, r1, #3
 8001f0e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f12:	00c2      	lsls	r2, r0, #3
 8001f14:	1de3      	adds	r3, r4, #7
 8001f16:	08db      	lsrs	r3, r3, #3
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	ebad 0d03 	sub.w	sp, sp, r3
 8001f1e:	466b      	mov	r3, sp
 8001f20:	3300      	adds	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
    unsigned int bytesRead;
    retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001f24:	6939      	ldr	r1, [r7, #16]
 8001f26:	1e62      	subs	r2, r4, #1
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	4814      	ldr	r0, [pc, #80]	; (8001f80 <SD_LoadPreset+0xd4>)
 8001f2e:	f00c fa15 	bl	800e35c <f_read>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <SD_LoadPreset+0xd0>)
 8001f38:	701a      	strb	r2, [r3, #0]
    presetBuffer[bytesRead] = '\0';
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	2100      	movs	r1, #0
 8001f40:	54d1      	strb	r1, [r2, r3]

    Preset_Load(presetBuffer);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fd79 	bl	8001a3c <Preset_Load>

    retSD = f_close(&SDFile);
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <SD_LoadPreset+0xd4>)
 8001f4c:	f00c fbc3 	bl	800e6d6 <f_close>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <SD_LoadPreset+0xd0>)
 8001f56:	701a      	strb	r2, [r3, #0]
    retSD = f_mount(NULL, "", 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4906      	ldr	r1, [pc, #24]	; (8001f74 <SD_LoadPreset+0xc8>)
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f00b fff9 	bl	800df54 <f_mount>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <SD_LoadPreset+0xd0>)
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	46ad      	mov	sp, r5

}
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bdb0      	pop	{r4, r5, r7, pc}
 8001f74:	08013be0 	.word	0x08013be0
 8001f78:	20002de4 	.word	0x20002de4
 8001f7c:	20002bac 	.word	0x20002bac
 8001f80:	20002bb4 	.word	0x20002bb4

08001f84 <qsort_cmp>:
void SD_Disable() {
    __HAL_SD_DISABLE(hsd);
    hsd.State = HAL_SD_STATE_RESET;
}

int qsort_cmp(const void *lhs, const void *rhs) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
    return strcmp(lhs, rhs);
 8001f8e:	6839      	ldr	r1, [r7, #0]
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7fe f925 	bl	80001e0 <strcmp>
 8001f96:	4603      	mov	r3, r0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(uint8_t command) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af04      	add	r7, sp, #16
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001faa:	230a      	movs	r3, #10
 8001fac:	9302      	str	r3, [sp, #8]
 8001fae:	2301      	movs	r3, #1
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	1dfb      	adds	r3, r7, #7
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2178      	movs	r1, #120	; 0x78
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <ssd1306_WriteCommand+0x2c>)
 8001fbe:	f002 facf 	bl	8004560 <HAL_I2C_Mem_Write>
 8001fc2:	4603      	mov	r3, r0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200029ac 	.word	0x200029ac

08001fd0 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(Knob *k) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    int status = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(k);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fccb 	bl	8002978 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(0xAE);   // Display off
 8001fe2:	20ae      	movs	r0, #174	; 0xae
 8001fe4:	f7ff ffdc 	bl	8001fa0 <ssd1306_WriteCommand>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // Set Memory Addressing Mode
 8001ff2:	2020      	movs	r0, #32
 8001ff4:	f7ff ffd4 	bl	8001fa0 <ssd1306_WriteCommand>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002002:	2010      	movs	r0, #16
 8002004:	f7ff ffcc 	bl	8001fa0 <ssd1306_WriteCommand>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8002012:	20b0      	movs	r0, #176	; 0xb0
 8002014:	f7ff ffc4 	bl	8001fa0 <ssd1306_WriteCommand>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xC8);   // Set COM Output Scan Direction
 8002022:	20c8      	movs	r0, #200	; 0xc8
 8002024:	f7ff ffbc 	bl	8001fa0 <ssd1306_WriteCommand>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // Set low column address
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff ffb4 	bl	8001fa0 <ssd1306_WriteCommand>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // Set high column address
 8002042:	2010      	movs	r0, #16
 8002044:	f7ff ffac 	bl	8001fa0 <ssd1306_WriteCommand>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);   // Set start line address
 8002052:	2040      	movs	r0, #64	; 0x40
 8002054:	f7ff ffa4 	bl	8001fa0 <ssd1306_WriteCommand>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x81);   // set contrast control register
 8002062:	2081      	movs	r0, #129	; 0x81
 8002064:	f7ff ff9c 	bl	8001fa0 <ssd1306_WriteCommand>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);
 8002072:	2040      	movs	r0, #64	; 0x40
 8002074:	f7ff ff94 	bl	8001fa0 <ssd1306_WriteCommand>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA1);   // Set segment re-map 0 to 127
 8002082:	20a1      	movs	r0, #161	; 0xa1
 8002084:	f7ff ff8c 	bl	8001fa0 <ssd1306_WriteCommand>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA6);   // Set normal display
 8002092:	20a6      	movs	r0, #166	; 0xa6
 8002094:	f7ff ff84 	bl	8001fa0 <ssd1306_WriteCommand>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA8);   // Set multiplex ratio(1 to 64)
 80020a2:	20a8      	movs	r0, #168	; 0xa8
 80020a4:	f7ff ff7c 	bl	8001fa0 <ssd1306_WriteCommand>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(SSD1306_HEIGHT - 1);
 80020b2:	203f      	movs	r0, #63	; 0x3f
 80020b4:	f7ff ff74 	bl	8001fa0 <ssd1306_WriteCommand>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80020c2:	20a4      	movs	r0, #164	; 0xa4
 80020c4:	f7ff ff6c 	bl	8001fa0 <ssd1306_WriteCommand>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD3);   // Set display offset
 80020d2:	20d3      	movs	r0, #211	; 0xd3
 80020d4:	f7ff ff64 	bl	8001fa0 <ssd1306_WriteCommand>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // No offset
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff ff5c 	bl	8001fa0 <ssd1306_WriteCommand>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD5);   // Set display clock divide ratio/oscillator frequency
 80020f2:	20d5      	movs	r0, #213	; 0xd5
 80020f4:	f7ff ff54 	bl	8001fa0 <ssd1306_WriteCommand>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xF0);   // Set divide ratio
 8002102:	20f0      	movs	r0, #240	; 0xf0
 8002104:	f7ff ff4c 	bl	8001fa0 <ssd1306_WriteCommand>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD9);   // Set pre-charge period
 8002112:	20d9      	movs	r0, #217	; 0xd9
 8002114:	f7ff ff44 	bl	8001fa0 <ssd1306_WriteCommand>
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x22);
 8002122:	2022      	movs	r0, #34	; 0x22
 8002124:	f7ff ff3c 	bl	8001fa0 <ssd1306_WriteCommand>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xDA);   // Set com pins hardware configuration
 8002132:	20da      	movs	r0, #218	; 0xda
 8002134:	f7ff ff34 	bl	8001fa0 <ssd1306_WriteCommand>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4413      	add	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(0x12);   // Do not use COM left/right remap
 8002142:	2012      	movs	r0, #18
 8002144:	f7ff ff2c 	bl	8001fa0 <ssd1306_WriteCommand>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4413      	add	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(0xDB);   // Set vcomh
 8002152:	20db      	movs	r0, #219	; 0xdb
 8002154:	f7ff ff24 	bl	8001fa0 <ssd1306_WriteCommand>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // 0x20,0.77xVcc
 8002162:	2020      	movs	r0, #32
 8002164:	f7ff ff1c 	bl	8001fa0 <ssd1306_WriteCommand>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x8D);   // Set DC-DC enable
 8002172:	208d      	movs	r0, #141	; 0x8d
 8002174:	f7ff ff14 	bl	8001fa0 <ssd1306_WriteCommand>
 8002178:	4603      	mov	r3, r0
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x14);   //
 8002182:	2014      	movs	r0, #20
 8002184:	f7ff ff0c 	bl	8001fa0 <ssd1306_WriteCommand>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xAF);   // Turn on SSD1306 panel
 8002192:	20af      	movs	r0, #175	; 0xaf
 8002194:	f7ff ff04 	bl	8001fa0 <ssd1306_WriteCommand>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <ssd1306_Init+0x1dc>
        return 1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e012      	b.n	80021d2 <ssd1306_Init+0x202>
    }

    ssd1306_Fill(Black);
 80021ac:	2000      	movs	r0, #0
 80021ae:	f000 f819 	bl	80021e4 <ssd1306_Fill>
    ssd1306_AdjustBrightness(0x63);
 80021b2:	2063      	movs	r0, #99	; 0x63
 80021b4:	f000 fbb6 	bl	8002924 <ssd1306_AdjustBrightness>
    ssd1306_UpdateScreen(&hi2c1);
 80021b8:	4808      	ldr	r0, [pc, #32]	; (80021dc <ssd1306_Init+0x20c>)
 80021ba:	f000 f859 	bl	8002270 <ssd1306_UpdateScreen>

    SSD1306.CurrentX = 0;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <ssd1306_Init+0x210>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <ssd1306_Init+0x210>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <ssd1306_Init+0x210>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	715a      	strb	r2, [r3, #5]

    return 0;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200029ac 	.word	0x200029ac
 80021e0:	20000784 	.word	0x20000784

080021e4 <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	e00d      	b.n	8002210 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <ssd1306_Fill+0x1a>
 80021fa:	2100      	movs	r1, #0
 80021fc:	e000      	b.n	8002200 <ssd1306_Fill+0x1c>
 80021fe:	21ff      	movs	r1, #255	; 0xff
 8002200:	4a09      	ldr	r2, [pc, #36]	; (8002228 <ssd1306_Fill+0x44>)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4413      	add	r3, r2
 8002206:	460a      	mov	r2, r1
 8002208:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3301      	adds	r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002216:	d3ed      	bcc.n	80021f4 <ssd1306_Fill+0x10>
    }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000384 	.word	0x20000384

0800222c <ssd1306_FillAll>:

void ssd1306_FillAll(SSD1306_COLOR color) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	e00f      	b.n	800225c <ssd1306_FillAll+0x30>
        ssd1306_Select(&knobs[i]);
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	015b      	lsls	r3, r3, #5
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <ssd1306_FillAll+0x40>)
 8002242:	4413      	add	r3, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fb97 	bl	8002978 <ssd1306_Select>
        ssd1306_Fill(color);
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ffc9 	bl	80021e4 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8002252:	f000 f80d 	bl	8002270 <ssd1306_UpdateScreen>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	3301      	adds	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d9ec      	bls.n	800223c <ssd1306_FillAll+0x10>
    }
}
 8002262:	bf00      	nop
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20002a84 	.word	0x20002a84

08002270 <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen() {
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af04      	add	r7, sp, #16
    for (uint8_t i = 0; i < 8; i++) {
 8002276:	2300      	movs	r3, #0
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	e01d      	b.n	80022b8 <ssd1306_UpdateScreen+0x48>
        ssd1306_WriteCommand(0xB0 + i);
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	3b50      	subs	r3, #80	; 0x50
 8002280:	b2db      	uxtb	r3, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fe8c 	bl	8001fa0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002288:	2000      	movs	r0, #0
 800228a:	f7ff fe89 	bl	8001fa0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800228e:	2010      	movs	r0, #16
 8002290:	f7ff fe86 	bl	8001fa0 <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	01db      	lsls	r3, r3, #7
 8002298:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <ssd1306_UpdateScreen+0x58>)
 800229a:	4413      	add	r3, r2
 800229c:	2264      	movs	r2, #100	; 0x64
 800229e:	9202      	str	r2, [sp, #8]
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	9201      	str	r2, [sp, #4]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2301      	movs	r3, #1
 80022a8:	2240      	movs	r2, #64	; 0x40
 80022aa:	2178      	movs	r1, #120	; 0x78
 80022ac:	4807      	ldr	r0, [pc, #28]	; (80022cc <ssd1306_UpdateScreen+0x5c>)
 80022ae:	f002 f957 	bl	8004560 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	3301      	adds	r3, #1
 80022b6:	71fb      	strb	r3, [r7, #7]
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d9de      	bls.n	800227c <ssd1306_UpdateScreen+0xc>
    }
}
 80022be:	bf00      	nop
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000384 	.word	0x20000384
 80022cc:	200029ac 	.word	0x200029ac

080022d0 <ssd1306_WriteAllKnobs>:

void ssd1306_WriteAllKnobs() {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80022d6:	2300      	movs	r3, #0
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	e009      	b.n	80022f0 <ssd1306_WriteAllKnobs+0x20>
        ssd1306_WriteKnob(&knobs[i]);
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	015b      	lsls	r3, r3, #5
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <ssd1306_WriteAllKnobs+0x30>)
 80022e2:	4413      	add	r3, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f80d 	bl	8002304 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	3301      	adds	r3, #1
 80022ee:	71fb      	strb	r3, [r7, #7]
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d9f2      	bls.n	80022dc <ssd1306_WriteAllKnobs+0xc>
    }
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20002a84 	.word	0x20002a84

08002304 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(Knob *k) {
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b08d      	sub	sp, #52	; 0x34
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
    ssd1306_Select(k);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fb33 	bl	8002978 <ssd1306_Select>
    ssd1306_Fill(Black);
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff ff66 	bl	80021e4 <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8002318:	4b9d      	ldr	r3, [pc, #628]	; (8002590 <ssd1306_WriteKnob+0x28c>)
 800231a:	f107 0410 	add.w	r4, r7, #16
 800231e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002320:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7e1b      	ldrb	r3, [r3, #24]
 8002328:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800232c:	4a99      	ldr	r2, [pc, #612]	; (8002594 <ssd1306_WriteKnob+0x290>)
 800232e:	2103      	movs	r1, #3
 8002330:	f00e fc88 	bl	8010c44 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7e5b      	ldrb	r3, [r3, #25]
 8002338:	f107 0020 	add.w	r0, r7, #32
 800233c:	4a96      	ldr	r2, [pc, #600]	; (8002598 <ssd1306_WriteKnob+0x294>)
 800233e:	2104      	movs	r1, #4
 8002340:	f00e fc80 	bl	8010c44 <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	4618      	mov	r0, r3
 800234a:	f7fd ff53 	bl	80001f4 <strlen>
 800234e:	4604      	mov	r4, r0
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fb47 	bl	80029e4 <update_init_indicator>
 8002356:	4603      	mov	r3, r0
 8002358:	f107 0010 	add.w	r0, r7, #16
 800235c:	4a8f      	ldr	r2, [pc, #572]	; (800259c <ssd1306_WriteKnob+0x298>)
 800235e:	4621      	mov	r1, r4
 8002360:	f00e fc70 	bl	8010c44 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) Knob_Map(k, k->value, k->max_range));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7ed9      	ldrb	r1, [r3, #27]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7f5b      	ldrb	r3, [r3, #29]
 800236c:	461a      	mov	r2, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fe3e 	bl	8000ff0 <Knob_Map>
 8002374:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8002376:	f107 000c 	add.w	r0, r7, #12
 800237a:	4a87      	ldr	r2, [pc, #540]	; (8002598 <ssd1306_WriteKnob+0x294>)
 800237c:	2104      	movs	r1, #4
 800237e:	f00e fc61 	bl	8010c44 <sniprintf>

    ssd1306_SetCursor(0, 0);
 8002382:	2100      	movs	r1, #0
 8002384:	2000      	movs	r0, #0
 8002386:	f000 fab5 	bl	80028f4 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 800238a:	4a85      	ldr	r2, [pc, #532]	; (80025a0 <ssd1306_WriteKnob+0x29c>)
 800238c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002390:	2301      	movs	r3, #1
 8002392:	ca06      	ldmia	r2, {r1, r2}
 8002394:	f000 fa88 	bl	80028a8 <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 8002398:	4b81      	ldr	r3, [pc, #516]	; (80025a0 <ssd1306_WriteKnob+0x29c>)
 800239a:	785b      	ldrb	r3, [r3, #1]
 800239c:	3301      	adds	r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4619      	mov	r1, r3
 80023a2:	2000      	movs	r0, #0
 80023a4:	f000 faa6 	bl	80028f4 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 80023a8:	4a7d      	ldr	r2, [pc, #500]	; (80025a0 <ssd1306_WriteKnob+0x29c>)
 80023aa:	f107 0020 	add.w	r0, r7, #32
 80023ae:	2301      	movs	r3, #1
 80023b0:	ca06      	ldmia	r2, {r1, r2}
 80023b2:	f000 fa79 	bl	80028a8 <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fd ff1a 	bl	80001f4 <strlen>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4a77      	ldr	r2, [pc, #476]	; (80025a0 <ssd1306_WriteKnob+0x29c>)
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	b2d8      	uxtb	r0, r3
 80023d2:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <ssd1306_WriteKnob+0x29c>)
 80023d4:	785b      	ldrb	r3, [r3, #1]
 80023d6:	3301      	adds	r3, #1
 80023d8:	0fda      	lsrs	r2, r3, #31
 80023da:	4413      	add	r3, r2
 80023dc:	105b      	asrs	r3, r3, #1
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4619      	mov	r1, r3
 80023e2:	f000 fa87 	bl	80028f4 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 80023e6:	4a6e      	ldr	r2, [pc, #440]	; (80025a0 <ssd1306_WriteKnob+0x29c>)
 80023e8:	f107 0010 	add.w	r0, r7, #16
 80023ec:	2301      	movs	r3, #1
 80023ee:	ca06      	ldmia	r2, {r1, r2}
 80023f0:	f000 fa5a 	bl	80028a8 <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 80023f4:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <ssd1306_WriteKnob+0x29c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f1c3 0320 	rsb	r3, r3, #32
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b2d8      	uxtb	r0, r3
 8002406:	4b66      	ldr	r3, [pc, #408]	; (80025a0 <ssd1306_WriteKnob+0x29c>)
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	3301      	adds	r3, #1
 800240c:	0fda      	lsrs	r2, r3, #31
 800240e:	4413      	add	r3, r2
 8002410:	105b      	asrs	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	4619      	mov	r1, r3
 8002416:	f000 fa6d 	bl	80028f4 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 800241a:	4a61      	ldr	r2, [pc, #388]	; (80025a0 <ssd1306_WriteKnob+0x29c>)
 800241c:	f107 000c 	add.w	r0, r7, #12
 8002420:	2301      	movs	r3, #1
 8002422:	ca06      	ldmia	r2, {r1, r2}
 8002424:	f000 fa40 	bl	80028a8 <ssd1306_WriteString>

    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8002428:	2300      	movs	r3, #0
 800242a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800242e:	e013      	b.n	8002458 <ssd1306_WriteKnob+0x154>
        ssd1306_DrawPixel(i, SSD1306.CurrentY + NumFont_5x7.FontHeight + 4, White);
 8002430:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <ssd1306_WriteKnob+0x2a0>)
 8002432:	885b      	ldrh	r3, [r3, #2]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <ssd1306_WriteKnob+0x29c>)
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	4413      	add	r3, r2
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3304      	adds	r3, #4
 8002440:	b2d9      	uxtb	r1, r3
 8002442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002446:	2201      	movs	r2, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f94d 	bl	80026e8 <ssd1306_DrawPixel>
    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 800244e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002452:	3301      	adds	r3, #1
 8002454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002458:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800245c:	2b00      	cmp	r3, #0
 800245e:	dae7      	bge.n	8002430 <ssd1306_WriteKnob+0x12c>
    }

    uint8_t len_label = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t x = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t y = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    uint8_t y_remaining = SSD1306_HEIGHT - 2 * NumFont_5x7.FontHeight;
 8002472:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <ssd1306_WriteKnob+0x29c>)
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	f1c3 0320 	rsb	r3, r3, #32
 800247a:	b2db      	uxtb	r3, r3
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    // Draw main label
    len_label = strlen(k->label);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3302      	adds	r3, #2
 8002486:	4618      	mov	r0, r3
 8002488:	f7fd feb4 	bl	80001f4 <strlen>
 800248c:	4603      	mov	r3, r0
 800248e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8002492:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002496:	4a44      	ldr	r2, [pc, #272]	; (80025a8 <ssd1306_WriteKnob+0x2a4>)
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80024a2:	0fda      	lsrs	r2, r3, #31
 80024a4:	4413      	add	r3, r2
 80024a6:	105b      	asrs	r3, r3, #1
 80024a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = (float) y_remaining / 3 + (Font_10x18.FontHeight / 4);
 80024ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80024bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024c0:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <ssd1306_WriteKnob+0x2a4>)
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d8:	edc7 7a00 	vstr	s15, [r7]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 80024e2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80024e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fa01 	bl	80028f4 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	1c98      	adds	r0, r3, #2
 80024f6:	4a2c      	ldr	r2, [pc, #176]	; (80025a8 <ssd1306_WriteKnob+0x2a4>)
 80024f8:	2301      	movs	r3, #1
 80024fa:	ca06      	ldmia	r2, {r1, r2}
 80024fc:	f000 f9d4 	bl	80028a8 <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7f1b      	ldrb	r3, [r3, #28]
 8002504:	b25b      	sxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	db02      	blt.n	8002510 <ssd1306_WriteKnob+0x20c>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7edb      	ldrb	r3, [r3, #27]
 800250e:	e000      	b.n	8002512 <ssd1306_WriteKnob+0x20e>
 8002510:	2300      	movs	r3, #0
 8002512:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    len_label = strlen(k->sub_labels[sl_index]);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6959      	ldr	r1, [r3, #20]
 800251a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	440b      	add	r3, r1
 8002526:	4618      	mov	r0, r3
 8002528:	f7fd fe64 	bl	80001f4 <strlen>
 800252c:	4603      	mov	r3, r0
 800252e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8002532:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002536:	4a1c      	ldr	r2, [pc, #112]	; (80025a8 <ssd1306_WriteKnob+0x2a4>)
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002542:	0fda      	lsrs	r2, r3, #31
 8002544:	4413      	add	r3, r2
 8002546:	105b      	asrs	r3, r3, #1
 8002548:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = SSD1306_HEIGHT - Font_10x18.FontHeight - 1;
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <ssd1306_WriteKnob+0x2a4>)
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002554:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 8002558:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800255c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f9c6 	bl	80028f4 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6959      	ldr	r1, [r3, #20]
 800256c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	18c8      	adds	r0, r1, r3
 8002578:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <ssd1306_WriteKnob+0x2a4>)
 800257a:	2301      	movs	r3, #1
 800257c:	ca06      	ldmia	r2, {r1, r2}
 800257e:	f000 f993 	bl	80028a8 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8002582:	f7ff fe75 	bl	8002270 <ssd1306_UpdateScreen>
}
 8002586:	bf00      	nop
 8002588:	3734      	adds	r7, #52	; 0x34
 800258a:	46bd      	mov	sp, r7
 800258c:	bd90      	pop	{r4, r7, pc}
 800258e:	bf00      	nop
 8002590:	08013c04 	.word	0x08013c04
 8002594:	08013bf0 	.word	0x08013bf0
 8002598:	08013bf8 	.word	0x08013bf8
 800259c:	08013c00 	.word	0x08013c00
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000784 	.word	0x20000784
 80025a8:	20000008 	.word	0x20000008

080025ac <ssd1306_WriteMainMenu>:

void ssd1306_WriteMainMenu() {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
    ssd1306_FillAll(Black);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7ff fe3a 	bl	800222c <ssd1306_FillAll>
    for (uint8_t i = 0; i < 3; i++) {
 80025b8:	2300      	movs	r3, #0
 80025ba:	71fb      	strb	r3, [r7, #7]
 80025bc:	e038      	b.n	8002630 <ssd1306_WriteMainMenu+0x84>
        ssd1306_Select(&knobs[i]);
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	015b      	lsls	r3, r3, #5
 80025c2:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <ssd1306_WriteMainMenu+0x94>)
 80025c4:	4413      	add	r3, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f9d6 	bl	8002978 <ssd1306_Select>
        ssd1306_Fill(Black);
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7ff fe09 	bl	80021e4 <ssd1306_Fill>
        uint8_t x = (SSD1306_WIDTH - strlen(menuItems[i]) * Font_10x18.FontWidth) / 2;
 80025d2:	79fa      	ldrb	r2, [r7, #7]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	4a1a      	ldr	r2, [pc, #104]	; (8002644 <ssd1306_WriteMainMenu+0x98>)
 80025dc:	4413      	add	r3, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd fe08 	bl	80001f4 <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <ssd1306_WriteMainMenu+0x9c>)
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	71bb      	strb	r3, [r7, #6]
        uint8_t y = SSD1306_HEIGHT / 2 - Font_10x18.FontHeight / 2;
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <ssd1306_WriteMainMenu+0x9c>)
 80025f8:	785b      	ldrb	r3, [r3, #1]
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f1c3 0320 	rsb	r3, r3, #32
 8002602:	717b      	strb	r3, [r7, #5]
        ssd1306_SetCursor(x,y);
 8002604:	797a      	ldrb	r2, [r7, #5]
 8002606:	79bb      	ldrb	r3, [r7, #6]
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f972 	bl	80028f4 <ssd1306_SetCursor>
        ssd1306_WriteString(menuItems[i], Font_10x18, White);
 8002610:	79fa      	ldrb	r2, [r7, #7]
 8002612:	4613      	mov	r3, r2
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <ssd1306_WriteMainMenu+0x98>)
 800261a:	1898      	adds	r0, r3, r2
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <ssd1306_WriteMainMenu+0x9c>)
 800261e:	2301      	movs	r3, #1
 8002620:	ca06      	ldmia	r2, {r1, r2}
 8002622:	f000 f941 	bl	80028a8 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8002626:	f7ff fe23 	bl	8002270 <ssd1306_UpdateScreen>
    for (uint8_t i = 0; i < 3; i++) {
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	3301      	adds	r3, #1
 800262e:	71fb      	strb	r3, [r7, #7]
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d9c3      	bls.n	80025be <ssd1306_WriteMainMenu+0x12>
    }
}
 8002636:	bf00      	nop
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20002a84 	.word	0x20002a84
 8002644:	20000010 	.word	0x20000010
 8002648:	20000008 	.word	0x20000008

0800264c <ssd1306_WritePresets>:

void ssd1306_WritePresets() {
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8002652:	2300      	movs	r3, #0
 8002654:	71fb      	strb	r3, [r7, #7]
 8002656:	e038      	b.n	80026ca <ssd1306_WritePresets+0x7e>
        ssd1306_Select(&knobs[i]);
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	015b      	lsls	r3, r3, #5
 800265c:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <ssd1306_WritePresets+0x90>)
 800265e:	4413      	add	r3, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f000 f989 	bl	8002978 <ssd1306_Select>
        ssd1306_Fill(Black);
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff fdbc 	bl	80021e4 <ssd1306_Fill>
        uint8_t x = (SSD1306_WIDTH - strlen(presetNames[i]) * Font_10x18.FontWidth) / 2;
 800266c:	79fa      	ldrb	r2, [r7, #7]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <ssd1306_WritePresets+0x94>)
 8002676:	4413      	add	r3, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd fdbb 	bl	80001f4 <strlen>
 800267e:	4603      	mov	r3, r0
 8002680:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <ssd1306_WritePresets+0x98>)
 8002682:	7812      	ldrb	r2, [r2, #0]
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800268c:	085b      	lsrs	r3, r3, #1
 800268e:	71bb      	strb	r3, [r7, #6]
        uint8_t y = SSD1306_HEIGHT / 2 - Font_10x18.FontHeight / 2;
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <ssd1306_WritePresets+0x98>)
 8002692:	785b      	ldrb	r3, [r3, #1]
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f1c3 0320 	rsb	r3, r3, #32
 800269c:	717b      	strb	r3, [r7, #5]
        ssd1306_SetCursor(x, y);
 800269e:	797a      	ldrb	r2, [r7, #5]
 80026a0:	79bb      	ldrb	r3, [r7, #6]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f925 	bl	80028f4 <ssd1306_SetCursor>
        ssd1306_WriteString(presetNames[i], Font_10x18, White);
 80026aa:	79fa      	ldrb	r2, [r7, #7]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <ssd1306_WritePresets+0x94>)
 80026b4:	1898      	adds	r0, r3, r2
 80026b6:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <ssd1306_WritePresets+0x98>)
 80026b8:	2301      	movs	r3, #1
 80026ba:	ca06      	ldmia	r2, {r1, r2}
 80026bc:	f000 f8f4 	bl	80028a8 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80026c0:	f7ff fdd6 	bl	8002270 <ssd1306_UpdateScreen>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	3301      	adds	r3, #1
 80026c8:	71fb      	strb	r3, [r7, #7]
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d9c3      	bls.n	8002658 <ssd1306_WritePresets+0xc>
    }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20002a84 	.word	0x20002a84
 80026e0:	20002a00 	.word	0x20002a00
 80026e4:	20000008 	.word	0x20000008

080026e8 <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
 80026f2:	460b      	mov	r3, r1
 80026f4:	71bb      	strb	r3, [r7, #6]
 80026f6:	4613      	mov	r3, r2
 80026f8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	db48      	blt.n	8002794 <ssd1306_DrawPixel+0xac>
 8002702:	79bb      	ldrb	r3, [r7, #6]
 8002704:	2b3f      	cmp	r3, #63	; 0x3f
 8002706:	d845      	bhi.n	8002794 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 8002708:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <ssd1306_DrawPixel+0xb8>)
 800270a:	791b      	ldrb	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8002710:	797b      	ldrb	r3, [r7, #5]
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf0c      	ite	eq
 8002716:	2301      	moveq	r3, #1
 8002718:	2300      	movne	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 800271e:	797b      	ldrb	r3, [r7, #5]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d11a      	bne.n	800275a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002724:	79fa      	ldrb	r2, [r7, #7]
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	b2d8      	uxtb	r0, r3
 800272c:	4603      	mov	r3, r0
 800272e:	01db      	lsls	r3, r3, #7
 8002730:	4413      	add	r3, r2
 8002732:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <ssd1306_DrawPixel+0xbc>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	b25a      	sxtb	r2, r3
 8002738:	79bb      	ldrb	r3, [r7, #6]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	b25b      	sxtb	r3, r3
 8002746:	4313      	orrs	r3, r2
 8002748:	b259      	sxtb	r1, r3
 800274a:	79fa      	ldrb	r2, [r7, #7]
 800274c:	4603      	mov	r3, r0
 800274e:	01db      	lsls	r3, r3, #7
 8002750:	4413      	add	r3, r2
 8002752:	b2c9      	uxtb	r1, r1
 8002754:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <ssd1306_DrawPixel+0xbc>)
 8002756:	54d1      	strb	r1, [r2, r3]
 8002758:	e01d      	b.n	8002796 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800275a:	79fa      	ldrb	r2, [r7, #7]
 800275c:	79bb      	ldrb	r3, [r7, #6]
 800275e:	08db      	lsrs	r3, r3, #3
 8002760:	b2d8      	uxtb	r0, r3
 8002762:	4603      	mov	r3, r0
 8002764:	01db      	lsls	r3, r3, #7
 8002766:	4413      	add	r3, r2
 8002768:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <ssd1306_DrawPixel+0xbc>)
 800276a:	5cd3      	ldrb	r3, [r2, r3]
 800276c:	b25a      	sxtb	r2, r3
 800276e:	79bb      	ldrb	r3, [r7, #6]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	b25b      	sxtb	r3, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	b25b      	sxtb	r3, r3
 8002780:	4013      	ands	r3, r2
 8002782:	b259      	sxtb	r1, r3
 8002784:	79fa      	ldrb	r2, [r7, #7]
 8002786:	4603      	mov	r3, r0
 8002788:	01db      	lsls	r3, r3, #7
 800278a:	4413      	add	r3, r2
 800278c:	b2c9      	uxtb	r1, r1
 800278e:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <ssd1306_DrawPixel+0xbc>)
 8002790:	54d1      	strb	r1, [r2, r3]
 8002792:	e000      	b.n	8002796 <ssd1306_DrawPixel+0xae>
        return;
 8002794:	bf00      	nop
    }
}
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	20000784 	.word	0x20000784
 80027a4:	20000384 	.word	0x20000384

080027a8 <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4604      	mov	r4, r0
 80027b0:	1d38      	adds	r0, r7, #4
 80027b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80027b6:	461a      	mov	r2, r3
 80027b8:	4623      	mov	r3, r4
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	4613      	mov	r3, r2
 80027be:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80027c0:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <ssd1306_WriteChar+0xfc>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	793b      	ldrb	r3, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	2b7f      	cmp	r3, #127	; 0x7f
 80027cc:	dc06      	bgt.n	80027dc <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 80027ce:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <ssd1306_WriteChar+0xfc>)
 80027d0:	885b      	ldrh	r3, [r3, #2]
 80027d2:	461a      	mov	r2, r3
 80027d4:	797b      	ldrb	r3, [r7, #5]
 80027d6:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80027d8:	2b3f      	cmp	r3, #63	; 0x3f
 80027da:	dd01      	ble.n	80027e0 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	e05d      	b.n	800289c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	e04c      	b.n	8002880 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	3b20      	subs	r3, #32
 80027ec:	7979      	ldrb	r1, [r7, #5]
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4619      	mov	r1, r3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	440b      	add	r3, r1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	e034      	b.n	8002870 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d012      	beq.n	800283c <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002816:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <ssd1306_WriteChar+0xfc>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4413      	add	r3, r2
 8002822:	b2d8      	uxtb	r0, r3
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <ssd1306_WriteChar+0xfc>)
 8002826:	885b      	ldrh	r3, [r3, #2]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	4413      	add	r3, r2
 8002830:	b2db      	uxtb	r3, r3
 8002832:	7bba      	ldrb	r2, [r7, #14]
 8002834:	4619      	mov	r1, r3
 8002836:	f7ff ff57 	bl	80026e8 <ssd1306_DrawPixel>
 800283a:	e016      	b.n	800286a <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <ssd1306_WriteChar+0xfc>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4413      	add	r3, r2
 8002848:	b2d8      	uxtb	r0, r3
 800284a:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <ssd1306_WriteChar+0xfc>)
 800284c:	885b      	ldrh	r3, [r3, #2]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	4413      	add	r3, r2
 8002856:	b2d9      	uxtb	r1, r3
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf0c      	ite	eq
 800285e:	2301      	moveq	r3, #1
 8002860:	2300      	movne	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	f7ff ff3f 	bl	80026e8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	3301      	adds	r3, #1
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	793b      	ldrb	r3, [r7, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4293      	cmp	r3, r2
 8002878:	d3c5      	bcc.n	8002806 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3301      	adds	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	797b      	ldrb	r3, [r7, #5]
 8002882:	461a      	mov	r2, r3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	4293      	cmp	r3, r2
 8002888:	d3ad      	bcc.n	80027e6 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <ssd1306_WriteChar+0xfc>)
 800288c:	881a      	ldrh	r2, [r3, #0]
 800288e:	793b      	ldrb	r3, [r7, #4]
 8002890:	b29b      	uxth	r3, r3
 8002892:	4413      	add	r3, r2
 8002894:	b29a      	uxth	r2, r3
 8002896:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <ssd1306_WriteChar+0xfc>)
 8002898:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3724      	adds	r7, #36	; 0x24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	20000784 	.word	0x20000784

080028a8 <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	1d38      	adds	r0, r7, #4
 80028b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80028b6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80028b8:	e012      	b.n	80028e0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	7818      	ldrb	r0, [r3, #0]
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	1d3a      	adds	r2, r7, #4
 80028c2:	ca06      	ldmia	r2, {r1, r2}
 80028c4:	f7ff ff70 	bl	80027a8 <ssd1306_WriteChar>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d002      	beq.n	80028da <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	e008      	b.n	80028ec <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3301      	adds	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e8      	bne.n	80028ba <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	781b      	ldrb	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	460a      	mov	r2, r1
 80028fe:	71fb      	strb	r3, [r7, #7]
 8002900:	4613      	mov	r3, r2
 8002902:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	b29a      	uxth	r2, r3
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <ssd1306_SetCursor+0x2c>)
 800290a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800290c:	79bb      	ldrb	r3, [r7, #6]
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <ssd1306_SetCursor+0x2c>)
 8002912:	805a      	strh	r2, [r3, #2]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	20000784 	.word	0x20000784

08002924 <ssd1306_AdjustBrightness>:

// Adjust brightness
void ssd1306_AdjustBrightness(uint8_t brightness) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af04      	add	r7, sp, #16
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
    uint8_t contrast_cmd = 0x81;
 800292e:	2381      	movs	r3, #129	; 0x81
 8002930:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast_level = brightness;
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_cmd, 1, 10);
 8002936:	230a      	movs	r3, #10
 8002938:	9302      	str	r3, [sp, #8]
 800293a:	2301      	movs	r3, #1
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	f107 030f 	add.w	r3, r7, #15
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2301      	movs	r3, #1
 8002946:	2200      	movs	r2, #0
 8002948:	2178      	movs	r1, #120	; 0x78
 800294a:	480a      	ldr	r0, [pc, #40]	; (8002974 <ssd1306_AdjustBrightness+0x50>)
 800294c:	f001 fe08 	bl	8004560 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_level, 1, 10);
 8002950:	230a      	movs	r3, #10
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	2301      	movs	r3, #1
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	f107 030e 	add.w	r3, r7, #14
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2301      	movs	r3, #1
 8002960:	2200      	movs	r2, #0
 8002962:	2178      	movs	r1, #120	; 0x78
 8002964:	4803      	ldr	r0, [pc, #12]	; (8002974 <ssd1306_AdjustBrightness+0x50>)
 8002966:	f001 fdfb 	bl	8004560 <HAL_I2C_Mem_Write>
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200029ac 	.word	0x200029ac

08002978 <ssd1306_Select>:

// Select a display
void ssd1306_Select(Knob *k) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    i2c_Select(I2C_MUX_MASTER_ADDR, k->row);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4619      	mov	r1, r3
 8002986:	20e2      	movs	r0, #226	; 0xe2
 8002988:	f000 f80a 	bl	80029a0 <i2c_Select>
    i2c_Select(I2C_MUX_SLAVE_ADDR, k->col);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	785b      	ldrb	r3, [r3, #1]
 8002990:	4619      	mov	r1, r3
 8002992:	20e0      	movs	r0, #224	; 0xe0
 8002994:	f000 f804 	bl	80029a0 <i2c_Select>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(uint8_t mux_addr, uint8_t i) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	4603      	mov	r3, r0
 80029a8:	460a      	mov	r2, r1
 80029aa:	71fb      	strb	r3, [r7, #7]
 80029ac:	4613      	mov	r3, r2
 80029ae:	71bb      	strb	r3, [r7, #6]
    if (i > 7) return;
 80029b0:	79bb      	ldrb	r3, [r7, #6]
 80029b2:	2b07      	cmp	r3, #7
 80029b4:	d810      	bhi.n	80029d8 <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 80029b6:	79bb      	ldrb	r3, [r7, #6]
 80029b8:	2201      	movs	r2, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, mux_addr, temp, 1, 100);
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	b299      	uxth	r1, r3
 80029c6:	f107 020c 	add.w	r2, r7, #12
 80029ca:	2364      	movs	r3, #100	; 0x64
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2301      	movs	r3, #1
 80029d0:	4803      	ldr	r0, [pc, #12]	; (80029e0 <i2c_Select+0x40>)
 80029d2:	f001 fcc7 	bl	8004364 <HAL_I2C_Master_Transmit>
 80029d6:	e000      	b.n	80029da <i2c_Select+0x3a>
    if (i > 7) return;
 80029d8:	bf00      	nop
}
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200029ac 	.word	0x200029ac

080029e4 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    int8_t init_diff = Knob_Map(k, k->init_value, MIDI_MAX) - Knob_Map(k, k->value, MIDI_MAX);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7e9b      	ldrb	r3, [r3, #26]
 80029f0:	227f      	movs	r2, #127	; 0x7f
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7fe fafb 	bl	8000ff0 <Knob_Map>
 80029fa:	4603      	mov	r3, r0
 80029fc:	461c      	mov	r4, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7edb      	ldrb	r3, [r3, #27]
 8002a02:	227f      	movs	r2, #127	; 0x7f
 8002a04:	4619      	mov	r1, r3
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe faf2 	bl	8000ff0 <Knob_Map>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	1ae3      	subs	r3, r4, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 8002a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bfb8      	it	lt
 8002a1c:	425b      	neglt	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a28:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002b14 <update_init_indicator+0x130>
 8002a2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a30:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002b18 <update_init_indicator+0x134>
 8002a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a3c:	edc7 7a00 	vstr	s15, [r7]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 8002a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <update_init_indicator+0x6c>
 8002a4c:	4b33      	ldr	r3, [pc, #204]	; (8002b1c <update_init_indicator+0x138>)
 8002a4e:	e05c      	b.n	8002b0a <update_init_indicator+0x126>

    if (init_pct < 15) {
 8002a50:	7bbb      	ldrb	r3, [r7, #14]
 8002a52:	2b0e      	cmp	r3, #14
 8002a54:	d807      	bhi.n	8002a66 <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 8002a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	dd01      	ble.n	8002a62 <update_init_indicator+0x7e>
 8002a5e:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <update_init_indicator+0x13c>)
 8002a60:	e053      	b.n	8002b0a <update_init_indicator+0x126>
        else return "        <      ";
 8002a62:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <update_init_indicator+0x140>)
 8002a64:	e051      	b.n	8002b0a <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 8002a66:	7bbb      	ldrb	r3, [r7, #14]
 8002a68:	2b0e      	cmp	r3, #14
 8002a6a:	d90a      	bls.n	8002a82 <update_init_indicator+0x9e>
 8002a6c:	7bbb      	ldrb	r3, [r7, #14]
 8002a6e:	2b1d      	cmp	r3, #29
 8002a70:	d807      	bhi.n	8002a82 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	dd01      	ble.n	8002a7e <update_init_indicator+0x9a>
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <update_init_indicator+0x144>)
 8002a7c:	e045      	b.n	8002b0a <update_init_indicator+0x126>
        else return "        <<     ";
 8002a7e:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <update_init_indicator+0x148>)
 8002a80:	e043      	b.n	8002b0a <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 8002a82:	7bbb      	ldrb	r3, [r7, #14]
 8002a84:	2b1d      	cmp	r3, #29
 8002a86:	d90a      	bls.n	8002a9e <update_init_indicator+0xba>
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	2b2c      	cmp	r3, #44	; 0x2c
 8002a8c:	d807      	bhi.n	8002a9e <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 8002a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	dd01      	ble.n	8002a9a <update_init_indicator+0xb6>
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <update_init_indicator+0x14c>)
 8002a98:	e037      	b.n	8002b0a <update_init_indicator+0x126>
        else return "        <<<    ";
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <update_init_indicator+0x150>)
 8002a9c:	e035      	b.n	8002b0a <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 8002a9e:	7bbb      	ldrb	r3, [r7, #14]
 8002aa0:	2b2c      	cmp	r3, #44	; 0x2c
 8002aa2:	d90a      	bls.n	8002aba <update_init_indicator+0xd6>
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
 8002aa6:	2b3c      	cmp	r3, #60	; 0x3c
 8002aa8:	d807      	bhi.n	8002aba <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 8002aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	dd01      	ble.n	8002ab6 <update_init_indicator+0xd2>
 8002ab2:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <update_init_indicator+0x154>)
 8002ab4:	e029      	b.n	8002b0a <update_init_indicator+0x126>
        else return "        <<<<   ";
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <update_init_indicator+0x158>)
 8002ab8:	e027      	b.n	8002b0a <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 8002aba:	7bbb      	ldrb	r3, [r7, #14]
 8002abc:	2b3c      	cmp	r3, #60	; 0x3c
 8002abe:	d90a      	bls.n	8002ad6 <update_init_indicator+0xf2>
 8002ac0:	7bbb      	ldrb	r3, [r7, #14]
 8002ac2:	2b4c      	cmp	r3, #76	; 0x4c
 8002ac4:	d807      	bhi.n	8002ad6 <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 8002ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	dd01      	ble.n	8002ad2 <update_init_indicator+0xee>
 8002ace:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <update_init_indicator+0x15c>)
 8002ad0:	e01b      	b.n	8002b0a <update_init_indicator+0x126>
        else return "        <<<<<  ";
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <update_init_indicator+0x160>)
 8002ad4:	e019      	b.n	8002b0a <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 8002ad6:	7bbb      	ldrb	r3, [r7, #14]
 8002ad8:	2b4c      	cmp	r3, #76	; 0x4c
 8002ada:	d90a      	bls.n	8002af2 <update_init_indicator+0x10e>
 8002adc:	7bbb      	ldrb	r3, [r7, #14]
 8002ade:	2b5c      	cmp	r3, #92	; 0x5c
 8002ae0:	d807      	bhi.n	8002af2 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 8002ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	dd01      	ble.n	8002aee <update_init_indicator+0x10a>
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <update_init_indicator+0x164>)
 8002aec:	e00d      	b.n	8002b0a <update_init_indicator+0x126>
        else return "        <<<<<< ";
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <update_init_indicator+0x168>)
 8002af0:	e00b      	b.n	8002b0a <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002af2:	7bbb      	ldrb	r3, [r7, #14]
 8002af4:	2b5c      	cmp	r3, #92	; 0x5c
 8002af6:	d907      	bls.n	8002b08 <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 8002af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	dd01      	ble.n	8002b04 <update_init_indicator+0x120>
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <update_init_indicator+0x16c>)
 8002b02:	e002      	b.n	8002b0a <update_init_indicator+0x126>
        else return "        <<<<<<<";
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <update_init_indicator+0x170>)
 8002b06:	e000      	b.n	8002b0a <update_init_indicator+0x126>
    } else {
        return " ";
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <update_init_indicator+0x174>)
    }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd90      	pop	{r4, r7, pc}
 8002b12:	bf00      	nop
 8002b14:	42fe0000 	.word	0x42fe0000
 8002b18:	42c80000 	.word	0x42c80000
 8002b1c:	08013c04 	.word	0x08013c04
 8002b20:	08013c24 	.word	0x08013c24
 8002b24:	08013c34 	.word	0x08013c34
 8002b28:	08013c44 	.word	0x08013c44
 8002b2c:	08013c54 	.word	0x08013c54
 8002b30:	08013c64 	.word	0x08013c64
 8002b34:	08013c74 	.word	0x08013c74
 8002b38:	08013c84 	.word	0x08013c84
 8002b3c:	08013c94 	.word	0x08013c94
 8002b40:	08013ca4 	.word	0x08013ca4
 8002b44:	08013cb4 	.word	0x08013cb4
 8002b48:	08013cc4 	.word	0x08013cc4
 8002b4c:	08013cd4 	.word	0x08013cd4
 8002b50:	08013ce4 	.word	0x08013ce4
 8002b54:	08013cf4 	.word	0x08013cf4
 8002b58:	08013d04 	.word	0x08013d04

08002b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b70:	6453      	str	r3, [r2, #68]	; 0x44
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800

08002bac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <HAL_ADC_MspInit+0x7c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d127      	bne.n	8002c1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <HAL_ADC_MspInit+0x80>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <HAL_ADC_MspInit+0x80>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_ADC_MspInit+0x80>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <HAL_ADC_MspInit+0x80>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <HAL_ADC_MspInit+0x80>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_ADC_MspInit+0x80>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002c06:	230f      	movs	r3, #15
 8002c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	4619      	mov	r1, r3
 8002c18:	4805      	ldr	r0, [pc, #20]	; (8002c30 <HAL_ADC_MspInit+0x84>)
 8002c1a:	f001 f88f 	bl	8003d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c1e:	bf00      	nop
 8002c20:	3728      	adds	r7, #40	; 0x28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40012000 	.word	0x40012000
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020000 	.word	0x40020000

08002c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_I2C_MspInit+0x84>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d12b      	bne.n	8002cae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_I2C_MspInit+0x88>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <HAL_I2C_MspInit+0x88>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_I2C_MspInit+0x88>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c72:	23c0      	movs	r3, #192	; 0xc0
 8002c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c76:	2312      	movs	r3, #18
 8002c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c82:	2304      	movs	r3, #4
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <HAL_I2C_MspInit+0x8c>)
 8002c8e:	f001 f855 	bl	8003d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_I2C_MspInit+0x88>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <HAL_I2C_MspInit+0x88>)
 8002c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_I2C_MspInit+0x88>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40005400 	.word	0x40005400
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40020400 	.word	0x40020400

08002cc4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <HAL_RTC_MspInit+0x24>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d102      	bne.n	8002cdc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RTC_MspInit+0x28>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	40002800 	.word	0x40002800
 8002cec:	42470e3c 	.word	0x42470e3c

08002cf0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <HAL_SD_MspInit+0xc4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d14b      	bne.n	8002daa <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <HAL_SD_MspInit+0xc8>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <HAL_SD_MspInit+0xc8>)
 8002d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d20:	6453      	str	r3, [r2, #68]	; 0x44
 8002d22:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <HAL_SD_MspInit+0xc8>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <HAL_SD_MspInit+0xc8>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <HAL_SD_MspInit+0xc8>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <HAL_SD_MspInit+0xc8>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_SD_MspInit+0xc8>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <HAL_SD_MspInit+0xc8>)
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <HAL_SD_MspInit+0xc8>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8002d66:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d74:	2303      	movs	r3, #3
 8002d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002d78:	230c      	movs	r3, #12
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	4619      	mov	r1, r3
 8002d82:	480e      	ldr	r0, [pc, #56]	; (8002dbc <HAL_SD_MspInit+0xcc>)
 8002d84:	f000 ffda 	bl	8003d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 8002d88:	f248 0330 	movw	r3, #32816	; 0x8030
 8002d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d96:	2303      	movs	r3, #3
 8002d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4619      	mov	r1, r3
 8002da4:	4806      	ldr	r0, [pc, #24]	; (8002dc0 <HAL_SD_MspInit+0xd0>)
 8002da6:	f000 ffc9 	bl	8003d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002daa:	bf00      	nop
 8002dac:	3728      	adds	r7, #40	; 0x28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40012c00 	.word	0x40012c00
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	40020400 	.word	0x40020400

08002dc4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <NMI_Handler+0x4>

08002dca <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8002dce:	e7fe      	b.n	8002dce <HardFault_Handler+0x4>

08002dd0 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <MemManage_Handler+0x4>

08002dd6 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8002dda:	e7fe      	b.n	8002dda <BusFault_Handler+0x4>

08002ddc <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8002de0:	e7fe      	b.n	8002de0 <UsageFault_Handler+0x4>

08002de2 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e050      	b.n	8002eba <SysTick_Handler+0xae>
        GPIO_TypeDef *t = (i == BUTTON_MENU) ? GPIO_PORT_BUTTON_6 : GPIO_PORT_BUTTONS_1TO5;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d101      	bne.n	8002e22 <SysTick_Handler+0x16>
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <SysTick_Handler+0xc0>)
 8002e20:	e000      	b.n	8002e24 <SysTick_Handler+0x18>
 8002e22:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <SysTick_Handler+0xc4>)
 8002e24:	60bb      	str	r3, [r7, #8]
        uint8_t reading = HAL_GPIO_ReadPin(t, btnPins[i]);
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <SysTick_Handler+0xc8>)
 8002e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	68b8      	ldr	r0, [r7, #8]
 8002e32:	f001 f907 	bl	8004044 <HAL_GPIO_ReadPin>
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]

        if (reading == btnStatesLast[i] && reading != btnStates[i]) {
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	4a26      	ldr	r2, [pc, #152]	; (8002ed8 <SysTick_Handler+0xcc>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	79fa      	ldrb	r2, [r7, #7]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d132      	bne.n	8002eac <SysTick_Handler+0xa0>
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	4a24      	ldr	r2, [pc, #144]	; (8002edc <SysTick_Handler+0xd0>)
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	79fa      	ldrb	r2, [r7, #7]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d02c      	beq.n	8002eac <SysTick_Handler+0xa0>
            btnStates[i] = reading;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	4921      	ldr	r1, [pc, #132]	; (8002edc <SysTick_Handler+0xd0>)
 8002e56:	79fa      	ldrb	r2, [r7, #7]
 8002e58:	54ca      	strb	r2, [r1, r3]

            if (btnStates[i] == GPIO_PIN_RESET) {
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <SysTick_Handler+0xd0>)
 8002e5e:	5cd3      	ldrb	r3, [r2, r3]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d123      	bne.n	8002eac <SysTick_Handler+0xa0>
                if (i == BUTTON_MENU) {
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d10e      	bne.n	8002e88 <SysTick_Handler+0x7c>
                    isMenuActive = !isMenuActive;
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <SysTick_Handler+0xd4>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f083 0301 	eor.w	r3, r3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <SysTick_Handler+0xd4>)
 8002e86:	701a      	strb	r2, [r3, #0]
                }

                if (isMenuActive && i == 0) {
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <SysTick_Handler+0xd4>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <SysTick_Handler+0x90>
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <SysTick_Handler+0x90>
                    isLoadPresetActive = true;
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <SysTick_Handler+0xd8>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
                }
                HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[i]);
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <SysTick_Handler+0xdc>)
 8002ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4811      	ldr	r0, [pc, #68]	; (8002eec <SysTick_Handler+0xe0>)
 8002ea8:	f001 f8fd 	bl	80040a6 <HAL_GPIO_TogglePin>

            }
        }
        btnStatesLast[i] = reading;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	490a      	ldr	r1, [pc, #40]	; (8002ed8 <SysTick_Handler+0xcc>)
 8002eb0:	79fa      	ldrb	r2, [r7, #7]
 8002eb2:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d9ab      	bls.n	8002e18 <SysTick_Handler+0xc>
    }

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002ec0:	f000 f9f4 	bl	80032ac <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40020800 	.word	0x40020800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	20000050 	.word	0x20000050
 8002ed8:	20000048 	.word	0x20000048
 8002edc:	20000040 	.word	0x20000040
 8002ee0:	20000370 	.word	0x20000370
 8002ee4:	20000371 	.word	0x20000371
 8002ee8:	2000005c 	.word	0x2000005c
 8002eec:	40020400 	.word	0x40020400

08002ef0 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <OTG_FS_IRQHandler+0x10>)
 8002ef6:	f002 f81c 	bl	8004f32 <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	200034e8 	.word	0x200034e8

08002f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
	return 1;
 8002f08:	2301      	movs	r3, #1
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <_kill>:

int _kill(int pid, int sig)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f1e:	f00d fb67 	bl	80105f0 <__errno>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2216      	movs	r2, #22
 8002f26:	601a      	str	r2, [r3, #0]
	return -1;
 8002f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <_exit>:

void _exit (int status)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ffe7 	bl	8002f14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f46:	e7fe      	b.n	8002f46 <_exit+0x12>

08002f48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e00a      	b.n	8002f70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f5a:	f3af 8000 	nop.w
 8002f5e:	4601      	mov	r1, r0
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	60ba      	str	r2, [r7, #8]
 8002f66:	b2ca      	uxtb	r2, r1
 8002f68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	dbf0      	blt.n	8002f5a <_read+0x12>
	}

return len;
 8002f78:	687b      	ldr	r3, [r7, #4]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e009      	b.n	8002fa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	60ba      	str	r2, [r7, #8]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	dbf1      	blt.n	8002f94 <_write+0x12>
	}
	return len;
 8002fb0:	687b      	ldr	r3, [r7, #4]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <_close>:

int _close(int file)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
	return -1;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fe2:	605a      	str	r2, [r3, #4]
	return 0;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <_isatty>:

int _isatty(int file)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
	return 1;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
	return 0;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <_sbrk+0x5c>)
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <_sbrk+0x60>)
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003038:	4b13      	ldr	r3, [pc, #76]	; (8003088 <_sbrk+0x64>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <_sbrk+0x64>)
 8003042:	4a12      	ldr	r2, [pc, #72]	; (800308c <_sbrk+0x68>)
 8003044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <_sbrk+0x64>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	429a      	cmp	r2, r3
 8003052:	d207      	bcs.n	8003064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003054:	f00d facc 	bl	80105f0 <__errno>
 8003058:	4603      	mov	r3, r0
 800305a:	220c      	movs	r2, #12
 800305c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	e009      	b.n	8003078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <_sbrk+0x64>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <_sbrk+0x64>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	4a05      	ldr	r2, [pc, #20]	; (8003088 <_sbrk+0x64>)
 8003074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003076:	68fb      	ldr	r3, [r7, #12]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20020000 	.word	0x20020000
 8003084:	00000400 	.word	0x00000400
 8003088:	2000078c 	.word	0x2000078c
 800308c:	20003900 	.word	0x20003900

08003090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <SystemInit+0x20>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <SystemInit+0x20>)
 800309c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	2302      	movs	r3, #2
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	2302      	movs	r3, #2
 80030cc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80030ce:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <SystemCoreClockUpdate+0xec>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d011      	beq.n	8003102 <SystemCoreClockUpdate+0x4e>
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d844      	bhi.n	800316e <SystemCoreClockUpdate+0xba>
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <SystemCoreClockUpdate+0x3e>
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d004      	beq.n	80030fa <SystemCoreClockUpdate+0x46>
 80030f0:	e03d      	b.n	800316e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80030f2:	4b2c      	ldr	r3, [pc, #176]	; (80031a4 <SystemCoreClockUpdate+0xf0>)
 80030f4:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <SystemCoreClockUpdate+0xf4>)
 80030f6:	601a      	str	r2, [r3, #0]
      break;
 80030f8:	e03d      	b.n	8003176 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <SystemCoreClockUpdate+0xf0>)
 80030fc:	4a2b      	ldr	r2, [pc, #172]	; (80031ac <SystemCoreClockUpdate+0xf8>)
 80030fe:	601a      	str	r2, [r3, #0]
      break;
 8003100:	e039      	b.n	8003176 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <SystemCoreClockUpdate+0xec>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	0d9b      	lsrs	r3, r3, #22
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <SystemCoreClockUpdate+0xec>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003116:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00c      	beq.n	8003138 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800311e:	4a23      	ldr	r2, [pc, #140]	; (80031ac <SystemCoreClockUpdate+0xf8>)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	fbb2 f3f3 	udiv	r3, r2, r3
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <SystemCoreClockUpdate+0xec>)
 8003128:	6852      	ldr	r2, [r2, #4]
 800312a:	0992      	lsrs	r2, r2, #6
 800312c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003130:	fb02 f303 	mul.w	r3, r2, r3
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e00b      	b.n	8003150 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003138:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <SystemCoreClockUpdate+0xf4>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <SystemCoreClockUpdate+0xec>)
 8003142:	6852      	ldr	r2, [r2, #4]
 8003144:	0992      	lsrs	r2, r2, #6
 8003146:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <SystemCoreClockUpdate+0xec>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <SystemCoreClockUpdate+0xf0>)
 800316a:	6013      	str	r3, [r2, #0]
      break;
 800316c:	e003      	b.n	8003176 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <SystemCoreClockUpdate+0xf0>)
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <SystemCoreClockUpdate+0xf4>)
 8003172:	601a      	str	r2, [r3, #0]
      break;
 8003174:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <SystemCoreClockUpdate+0xec>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <SystemCoreClockUpdate+0xfc>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <SystemCoreClockUpdate+0xf0>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
 8003190:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <SystemCoreClockUpdate+0xf0>)
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40023800 	.word	0x40023800
 80031a4:	20000068 	.word	0x20000068
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	017d7840 	.word	0x017d7840
 80031b0:	080150c8 	.word	0x080150c8

080031b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031b8:	480d      	ldr	r0, [pc, #52]	; (80031f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031ba:	490e      	ldr	r1, [pc, #56]	; (80031f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031bc:	4a0e      	ldr	r2, [pc, #56]	; (80031f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c0:	e002      	b.n	80031c8 <LoopCopyDataInit>

080031c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031c6:	3304      	adds	r3, #4

080031c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031cc:	d3f9      	bcc.n	80031c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ce:	4a0b      	ldr	r2, [pc, #44]	; (80031fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031d0:	4c0b      	ldr	r4, [pc, #44]	; (8003200 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d4:	e001      	b.n	80031da <LoopFillZerobss>

080031d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d8:	3204      	adds	r2, #4

080031da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031dc:	d3fb      	bcc.n	80031d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031de:	f7ff ff57 	bl	8003090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031e2:	f00d fa0b 	bl	80105fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031e6:	f7fd ff67 	bl	80010b8 <main>
  bx  lr    
 80031ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f4:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 80031f8:	0801597c 	.word	0x0801597c
  ldr r2, =_sbss
 80031fc:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8003200:	20003900 	.word	0x20003900

08003204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003204:	e7fe      	b.n	8003204 <ADC_IRQHandler>
	...

08003208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_Init+0x40>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <HAL_Init+0x40>)
 8003212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_Init+0x40>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <HAL_Init+0x40>)
 800321e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_Init+0x40>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a07      	ldr	r2, [pc, #28]	; (8003248 <HAL_Init+0x40>)
 800322a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003230:	2003      	movs	r0, #3
 8003232:	f000 fd41 	bl	8003cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003236:	2000      	movs	r0, #0
 8003238:	f000 f808 	bl	800324c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800323c:	f7ff fc8e 	bl	8002b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023c00 	.word	0x40023c00

0800324c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003254:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_InitTick+0x54>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_InitTick+0x58>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003262:	fbb3 f3f1 	udiv	r3, r3, r1
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fd59 	bl	8003d22 <HAL_SYSTICK_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e00e      	b.n	8003298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b0f      	cmp	r3, #15
 800327e:	d80a      	bhi.n	8003296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003280:	2200      	movs	r2, #0
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	f000 fd21 	bl	8003cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800328c:	4a06      	ldr	r2, [pc, #24]	; (80032a8 <HAL_InitTick+0x5c>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	e000      	b.n	8003298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000068 	.word	0x20000068
 80032a4:	20000070 	.word	0x20000070
 80032a8:	2000006c 	.word	0x2000006c

080032ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_IncTick+0x20>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_IncTick+0x24>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <HAL_IncTick+0x24>)
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000070 	.word	0x20000070
 80032d0:	20002ba8 	.word	0x20002ba8

080032d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return uwTick;
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <HAL_GetTick+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20002ba8 	.word	0x20002ba8

080032ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff ffee 	bl	80032d4 <HAL_GetTick>
 80032f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d005      	beq.n	8003312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <HAL_Delay+0x44>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003312:	bf00      	nop
 8003314:	f7ff ffde 	bl	80032d4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	429a      	cmp	r2, r3
 8003322:	d8f7      	bhi.n	8003314 <HAL_Delay+0x28>
  {
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000070 	.word	0x20000070

08003334 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e033      	b.n	80033b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff fc2a 	bl	8002bac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b00      	cmp	r3, #0
 8003370:	d118      	bne.n	80033a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800337a:	f023 0302 	bic.w	r3, r3, #2
 800337e:	f043 0202 	orr.w	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 faca 	bl	8003920 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f023 0303 	bic.w	r3, r3, #3
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
 80033a2:	e001      	b.n	80033a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_Start+0x1a>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e097      	b.n	8003506 <HAL_ADC_Start+0x14a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d018      	beq.n	800341e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033fc:	4b45      	ldr	r3, [pc, #276]	; (8003514 <HAL_ADC_Start+0x158>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a45      	ldr	r2, [pc, #276]	; (8003518 <HAL_ADC_Start+0x15c>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0c9a      	lsrs	r2, r3, #18
 8003408:	4613      	mov	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003410:	e002      	b.n	8003418 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3b01      	subs	r3, #1
 8003416:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f9      	bne.n	8003412 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d15f      	bne.n	80034ec <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003456:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346a:	d106      	bne.n	800347a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f023 0206 	bic.w	r2, r3, #6
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
 8003478:	e002      	b.n	8003480 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003488:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_ADC_Start+0x160>)
 800348a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003494:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d129      	bne.n	8003504 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	e020      	b.n	8003504 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a16      	ldr	r2, [pc, #88]	; (8003520 <HAL_ADC_Start+0x164>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d11b      	bne.n	8003504 <HAL_ADC_Start+0x148>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d114      	bne.n	8003504 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	e00b      	b.n	8003504 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f043 0210 	orr.w	r2, r3, #16
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	f043 0201 	orr.w	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000068 	.word	0x20000068
 8003518:	431bde83 	.word	0x431bde83
 800351c:	40012300 	.word	0x40012300
 8003520:	40012000 	.word	0x40012000

08003524 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_ADC_Stop+0x16>
 8003536:	2302      	movs	r3, #2
 8003538:	e021      	b.n	800357e <HAL_ADC_Stop+0x5a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d109      	bne.n	8003574 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a6:	d113      	bne.n	80035d0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b6:	d10b      	bne.n	80035d0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e063      	b.n	8003698 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80035d0:	f7ff fe80 	bl	80032d4 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035d6:	e021      	b.n	800361c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d01d      	beq.n	800361c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d007      	beq.n	80035f6 <HAL_ADC_PollForConversion+0x6c>
 80035e6:	f7ff fe75 	bl	80032d4 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d212      	bcs.n	800361c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d00b      	beq.n	800361c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f043 0204 	orr.w	r2, r3, #4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e03d      	b.n	8003698 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b02      	cmp	r3, #2
 8003628:	d1d6      	bne.n	80035d8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f06f 0212 	mvn.w	r2, #18
 8003632:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d123      	bne.n	8003696 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11f      	bne.n	8003696 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003660:	2b00      	cmp	r3, #0
 8003662:	d006      	beq.n	8003672 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800366e:	2b00      	cmp	r3, #0
 8003670:	d111      	bne.n	8003696 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d105      	bne.n	8003696 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f043 0201 	orr.w	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x1c>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e113      	b.n	8003900 <HAL_ADC_ConfigChannel+0x244>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b09      	cmp	r3, #9
 80036e6:	d925      	bls.n	8003734 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68d9      	ldr	r1, [r3, #12]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	3b1e      	subs	r3, #30
 80036fe:	2207      	movs	r2, #7
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43da      	mvns	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	400a      	ands	r2, r1
 800370c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68d9      	ldr	r1, [r3, #12]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	4618      	mov	r0, r3
 8003720:	4603      	mov	r3, r0
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4403      	add	r3, r0
 8003726:	3b1e      	subs	r3, #30
 8003728:	409a      	lsls	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	e022      	b.n	800377a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6919      	ldr	r1, [r3, #16]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	2207      	movs	r2, #7
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43da      	mvns	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	400a      	ands	r2, r1
 8003756:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6919      	ldr	r1, [r3, #16]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	b29b      	uxth	r3, r3
 8003768:	4618      	mov	r0, r3
 800376a:	4603      	mov	r3, r0
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4403      	add	r3, r0
 8003770:	409a      	lsls	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b06      	cmp	r3, #6
 8003780:	d824      	bhi.n	80037cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	3b05      	subs	r3, #5
 8003794:	221f      	movs	r2, #31
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43da      	mvns	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	400a      	ands	r2, r1
 80037a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	4618      	mov	r0, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	3b05      	subs	r3, #5
 80037be:	fa00 f203 	lsl.w	r2, r0, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	635a      	str	r2, [r3, #52]	; 0x34
 80037ca:	e04c      	b.n	8003866 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b0c      	cmp	r3, #12
 80037d2:	d824      	bhi.n	800381e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	3b23      	subs	r3, #35	; 0x23
 80037e6:	221f      	movs	r2, #31
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43da      	mvns	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	400a      	ands	r2, r1
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	4618      	mov	r0, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	3b23      	subs	r3, #35	; 0x23
 8003810:	fa00 f203 	lsl.w	r2, r0, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
 800381c:	e023      	b.n	8003866 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	3b41      	subs	r3, #65	; 0x41
 8003830:	221f      	movs	r2, #31
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43da      	mvns	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	400a      	ands	r2, r1
 800383e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	4618      	mov	r0, r3
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	3b41      	subs	r3, #65	; 0x41
 800385a:	fa00 f203 	lsl.w	r2, r0, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003866:	4b29      	ldr	r3, [pc, #164]	; (800390c <HAL_ADC_ConfigChannel+0x250>)
 8003868:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a28      	ldr	r2, [pc, #160]	; (8003910 <HAL_ADC_ConfigChannel+0x254>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d10f      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x1d8>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b12      	cmp	r3, #18
 800387a:	d10b      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <HAL_ADC_ConfigChannel+0x254>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d12b      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x23a>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <HAL_ADC_ConfigChannel+0x258>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <HAL_ADC_ConfigChannel+0x1f4>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b11      	cmp	r3, #17
 80038ae:	d122      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a11      	ldr	r2, [pc, #68]	; (8003914 <HAL_ADC_ConfigChannel+0x258>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d111      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038d2:	4b11      	ldr	r3, [pc, #68]	; (8003918 <HAL_ADC_ConfigChannel+0x25c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a11      	ldr	r2, [pc, #68]	; (800391c <HAL_ADC_ConfigChannel+0x260>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	0c9a      	lsrs	r2, r3, #18
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038e8:	e002      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f9      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40012300 	.word	0x40012300
 8003910:	40012000 	.word	0x40012000
 8003914:	10000012 	.word	0x10000012
 8003918:	20000068 	.word	0x20000068
 800391c:	431bde83 	.word	0x431bde83

08003920 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003928:	4b79      	ldr	r3, [pc, #484]	; (8003b10 <ADC_Init+0x1f0>)
 800392a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	431a      	orrs	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	021a      	lsls	r2, r3, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6899      	ldr	r1, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	4a58      	ldr	r2, [pc, #352]	; (8003b14 <ADC_Init+0x1f4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6899      	ldr	r1, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6899      	ldr	r1, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	e00f      	b.n	8003a1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0202 	bic.w	r2, r2, #2
 8003a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6899      	ldr	r1, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7e1b      	ldrb	r3, [r3, #24]
 8003a38:	005a      	lsls	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01b      	beq.n	8003a84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	3b01      	subs	r3, #1
 8003a78:	035a      	lsls	r2, r3, #13
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	e007      	b.n	8003a94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	051a      	lsls	r2, r3, #20
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6899      	ldr	r1, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ad6:	025a      	lsls	r2, r3, #9
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6899      	ldr	r1, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	029a      	lsls	r2, r3, #10
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40012300 	.word	0x40012300
 8003b14:	0f000001 	.word	0x0f000001

08003b18 <__NVIC_SetPriorityGrouping>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <__NVIC_SetPriorityGrouping+0x44>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b34:	4013      	ands	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b4a:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <__NVIC_SetPriorityGrouping+0x44>)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	60d3      	str	r3, [r2, #12]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <__NVIC_GetPriorityGrouping>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <__NVIC_GetPriorityGrouping+0x18>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	f003 0307 	and.w	r3, r3, #7
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <__NVIC_EnableIRQ>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	db0b      	blt.n	8003ba6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	f003 021f 	and.w	r2, r3, #31
 8003b94:	4907      	ldr	r1, [pc, #28]	; (8003bb4 <__NVIC_EnableIRQ+0x38>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	e000e100 	.word	0xe000e100

08003bb8 <__NVIC_SetPriority>:
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	6039      	str	r1, [r7, #0]
 8003bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	db0a      	blt.n	8003be2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	490c      	ldr	r1, [pc, #48]	; (8003c04 <__NVIC_SetPriority+0x4c>)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	0112      	lsls	r2, r2, #4
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003be0:	e00a      	b.n	8003bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4908      	ldr	r1, [pc, #32]	; (8003c08 <__NVIC_SetPriority+0x50>)
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3b04      	subs	r3, #4
 8003bf0:	0112      	lsls	r2, r2, #4
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	761a      	strb	r2, [r3, #24]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000e100 	.word	0xe000e100
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <NVIC_EncodePriority>:
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f1c3 0307 	rsb	r3, r3, #7
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	bf28      	it	cs
 8003c2a:	2304      	movcs	r3, #4
 8003c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3304      	adds	r3, #4
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d902      	bls.n	8003c3c <NVIC_EncodePriority+0x30>
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3b03      	subs	r3, #3
 8003c3a:	e000      	b.n	8003c3e <NVIC_EncodePriority+0x32>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	401a      	ands	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c54:	f04f 31ff 	mov.w	r1, #4294967295
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	43d9      	mvns	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c64:	4313      	orrs	r3, r2
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3724      	adds	r7, #36	; 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <SysTick_Config>:
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c84:	d301      	bcc.n	8003c8a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003c86:	2301      	movs	r3, #1
 8003c88:	e00f      	b.n	8003caa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <SysTick_Config+0x40>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c92:	210f      	movs	r1, #15
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295
 8003c98:	f7ff ff8e 	bl	8003bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <SysTick_Config+0x40>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ca2:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <SysTick_Config+0x40>)
 8003ca4:	2207      	movs	r2, #7
 8003ca6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	e000e010 	.word	0xe000e010

08003cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff29 	bl	8003b18 <__NVIC_SetPriorityGrouping>
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b086      	sub	sp, #24
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce0:	f7ff ff3e 	bl	8003b60 <__NVIC_GetPriorityGrouping>
 8003ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	6978      	ldr	r0, [r7, #20]
 8003cec:	f7ff ff8e 	bl	8003c0c <NVIC_EncodePriority>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff5d 	bl	8003bb8 <__NVIC_SetPriority>
}
 8003cfe:	bf00      	nop
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff31 	bl	8003b7c <__NVIC_EnableIRQ>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ffa2 	bl	8003c74 <SysTick_Config>
 8003d30:	4603      	mov	r3, r0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e159      	b.n	800400c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d58:	2201      	movs	r2, #1
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	f040 8148 	bne.w	8004006 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d005      	beq.n	8003d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d130      	bne.n	8003df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	2203      	movs	r2, #3
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f003 0201 	and.w	r2, r3, #1
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d017      	beq.n	8003e2c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	2203      	movs	r2, #3
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d123      	bne.n	8003e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	08da      	lsrs	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3208      	adds	r2, #8
 8003e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	220f      	movs	r2, #15
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	08da      	lsrs	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3208      	adds	r2, #8
 8003e7a:	69b9      	ldr	r1, [r7, #24]
 8003e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0203 	and.w	r2, r3, #3
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a2 	beq.w	8004006 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	4b57      	ldr	r3, [pc, #348]	; (8004024 <HAL_GPIO_Init+0x2e8>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	4a56      	ldr	r2, [pc, #344]	; (8004024 <HAL_GPIO_Init+0x2e8>)
 8003ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed2:	4b54      	ldr	r3, [pc, #336]	; (8004024 <HAL_GPIO_Init+0x2e8>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ede:	4a52      	ldr	r2, [pc, #328]	; (8004028 <HAL_GPIO_Init+0x2ec>)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a49      	ldr	r2, [pc, #292]	; (800402c <HAL_GPIO_Init+0x2f0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d019      	beq.n	8003f3e <HAL_GPIO_Init+0x202>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a48      	ldr	r2, [pc, #288]	; (8004030 <HAL_GPIO_Init+0x2f4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_GPIO_Init+0x1fe>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a47      	ldr	r2, [pc, #284]	; (8004034 <HAL_GPIO_Init+0x2f8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00d      	beq.n	8003f36 <HAL_GPIO_Init+0x1fa>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a46      	ldr	r2, [pc, #280]	; (8004038 <HAL_GPIO_Init+0x2fc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d007      	beq.n	8003f32 <HAL_GPIO_Init+0x1f6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a45      	ldr	r2, [pc, #276]	; (800403c <HAL_GPIO_Init+0x300>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <HAL_GPIO_Init+0x1f2>
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	e008      	b.n	8003f40 <HAL_GPIO_Init+0x204>
 8003f2e:	2307      	movs	r3, #7
 8003f30:	e006      	b.n	8003f40 <HAL_GPIO_Init+0x204>
 8003f32:	2303      	movs	r3, #3
 8003f34:	e004      	b.n	8003f40 <HAL_GPIO_Init+0x204>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e002      	b.n	8003f40 <HAL_GPIO_Init+0x204>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_GPIO_Init+0x204>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	f002 0203 	and.w	r2, r2, #3
 8003f46:	0092      	lsls	r2, r2, #2
 8003f48:	4093      	lsls	r3, r2
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f50:	4935      	ldr	r1, [pc, #212]	; (8004028 <HAL_GPIO_Init+0x2ec>)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	3302      	adds	r3, #2
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f5e:	4b38      	ldr	r3, [pc, #224]	; (8004040 <HAL_GPIO_Init+0x304>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f82:	4a2f      	ldr	r2, [pc, #188]	; (8004040 <HAL_GPIO_Init+0x304>)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <HAL_GPIO_Init+0x304>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fac:	4a24      	ldr	r2, [pc, #144]	; (8004040 <HAL_GPIO_Init+0x304>)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fb2:	4b23      	ldr	r3, [pc, #140]	; (8004040 <HAL_GPIO_Init+0x304>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fd6:	4a1a      	ldr	r2, [pc, #104]	; (8004040 <HAL_GPIO_Init+0x304>)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fdc:	4b18      	ldr	r3, [pc, #96]	; (8004040 <HAL_GPIO_Init+0x304>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004000:	4a0f      	ldr	r2, [pc, #60]	; (8004040 <HAL_GPIO_Init+0x304>)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3301      	adds	r3, #1
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b0f      	cmp	r3, #15
 8004010:	f67f aea2 	bls.w	8003d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	3724      	adds	r7, #36	; 0x24
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800
 8004028:	40013800 	.word	0x40013800
 800402c:	40020000 	.word	0x40020000
 8004030:	40020400 	.word	0x40020400
 8004034:	40020800 	.word	0x40020800
 8004038:	40020c00 	.word	0x40020c00
 800403c:	40021000 	.word	0x40021000
 8004040:	40013c00 	.word	0x40013c00

08004044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	e001      	b.n	8004066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
 8004080:	4613      	mov	r3, r2
 8004082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004084:	787b      	ldrb	r3, [r7, #1]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004090:	e003      	b.n	800409a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004092:	887b      	ldrh	r3, [r7, #2]
 8004094:	041a      	lsls	r2, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	619a      	str	r2, [r3, #24]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040b8:	887a      	ldrh	r2, [r7, #2]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4013      	ands	r3, r2
 80040be:	041a      	lsls	r2, r3, #16
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	43d9      	mvns	r1, r3
 80040c4:	887b      	ldrh	r3, [r7, #2]
 80040c6:	400b      	ands	r3, r1
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	619a      	str	r2, [r3, #24]
}
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e12b      	b.n	8004346 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fe fd96 	bl	8002c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	; 0x24
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800412e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800413e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004140:	f002 fb4a 	bl	80067d8 <HAL_RCC_GetPCLK1Freq>
 8004144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4a81      	ldr	r2, [pc, #516]	; (8004350 <HAL_I2C_Init+0x274>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d807      	bhi.n	8004160 <HAL_I2C_Init+0x84>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a80      	ldr	r2, [pc, #512]	; (8004354 <HAL_I2C_Init+0x278>)
 8004154:	4293      	cmp	r3, r2
 8004156:	bf94      	ite	ls
 8004158:	2301      	movls	r3, #1
 800415a:	2300      	movhi	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e006      	b.n	800416e <HAL_I2C_Init+0x92>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a7d      	ldr	r2, [pc, #500]	; (8004358 <HAL_I2C_Init+0x27c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	bf94      	ite	ls
 8004168:	2301      	movls	r3, #1
 800416a:	2300      	movhi	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0e7      	b.n	8004346 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a78      	ldr	r2, [pc, #480]	; (800435c <HAL_I2C_Init+0x280>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	0c9b      	lsrs	r3, r3, #18
 8004180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a6a      	ldr	r2, [pc, #424]	; (8004350 <HAL_I2C_Init+0x274>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d802      	bhi.n	80041b0 <HAL_I2C_Init+0xd4>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	3301      	adds	r3, #1
 80041ae:	e009      	b.n	80041c4 <HAL_I2C_Init+0xe8>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	4a69      	ldr	r2, [pc, #420]	; (8004360 <HAL_I2C_Init+0x284>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	099b      	lsrs	r3, r3, #6
 80041c2:	3301      	adds	r3, #1
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	495c      	ldr	r1, [pc, #368]	; (8004350 <HAL_I2C_Init+0x274>)
 80041e0:	428b      	cmp	r3, r1
 80041e2:	d819      	bhi.n	8004218 <HAL_I2C_Init+0x13c>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e59      	subs	r1, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80041f2:	1c59      	adds	r1, r3, #1
 80041f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041f8:	400b      	ands	r3, r1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_I2C_Init+0x138>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1e59      	subs	r1, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	fbb1 f3f3 	udiv	r3, r1, r3
 800420c:	3301      	adds	r3, #1
 800420e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004212:	e051      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004214:	2304      	movs	r3, #4
 8004216:	e04f      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d111      	bne.n	8004244 <HAL_I2C_Init+0x168>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1e58      	subs	r0, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	440b      	add	r3, r1
 800422e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004232:	3301      	adds	r3, #1
 8004234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf0c      	ite	eq
 800423c:	2301      	moveq	r3, #1
 800423e:	2300      	movne	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e012      	b.n	800426a <HAL_I2C_Init+0x18e>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1e58      	subs	r0, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	0099      	lsls	r1, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	fbb0 f3f3 	udiv	r3, r0, r3
 800425a:	3301      	adds	r3, #1
 800425c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_I2C_Init+0x196>
 800426e:	2301      	movs	r3, #1
 8004270:	e022      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10e      	bne.n	8004298 <HAL_I2C_Init+0x1bc>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1e58      	subs	r0, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6859      	ldr	r1, [r3, #4]
 8004282:	460b      	mov	r3, r1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	440b      	add	r3, r1
 8004288:	fbb0 f3f3 	udiv	r3, r0, r3
 800428c:	3301      	adds	r3, #1
 800428e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004296:	e00f      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1e58      	subs	r0, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	0099      	lsls	r1, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ae:	3301      	adds	r3, #1
 80042b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	6809      	ldr	r1, [r1, #0]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69da      	ldr	r2, [r3, #28]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6911      	ldr	r1, [r2, #16]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68d2      	ldr	r2, [r2, #12]
 80042f2:	4311      	orrs	r1, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	000186a0 	.word	0x000186a0
 8004354:	001e847f 	.word	0x001e847f
 8004358:	003d08ff 	.word	0x003d08ff
 800435c:	431bde83 	.word	0x431bde83
 8004360:	10624dd3 	.word	0x10624dd3

08004364 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	461a      	mov	r2, r3
 8004370:	460b      	mov	r3, r1
 8004372:	817b      	strh	r3, [r7, #10]
 8004374:	4613      	mov	r3, r2
 8004376:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004378:	f7fe ffac 	bl	80032d4 <HAL_GetTick>
 800437c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b20      	cmp	r3, #32
 8004388:	f040 80e0 	bne.w	800454c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	2319      	movs	r3, #25
 8004392:	2201      	movs	r2, #1
 8004394:	4970      	ldr	r1, [pc, #448]	; (8004558 <HAL_I2C_Master_Transmit+0x1f4>)
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 faf4 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
 80043a4:	e0d3      	b.n	800454e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_I2C_Master_Transmit+0x50>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e0cc      	b.n	800454e <HAL_I2C_Master_Transmit+0x1ea>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d007      	beq.n	80043da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0201 	orr.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2221      	movs	r2, #33	; 0x21
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2210      	movs	r2, #16
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	893a      	ldrh	r2, [r7, #8]
 800440a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4a50      	ldr	r2, [pc, #320]	; (800455c <HAL_I2C_Master_Transmit+0x1f8>)
 800441a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800441c:	8979      	ldrh	r1, [r7, #10]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	6a3a      	ldr	r2, [r7, #32]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f996 	bl	8004754 <I2C_MasterRequestWrite>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e08d      	b.n	800454e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004432:	2300      	movs	r3, #0
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004448:	e066      	b.n	8004518 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	6a39      	ldr	r1, [r7, #32]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fb6e 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00d      	beq.n	8004476 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	2b04      	cmp	r3, #4
 8004460:	d107      	bne.n	8004472 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004470:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e06b      	b.n	800454e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	781a      	ldrb	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d11b      	bne.n	80044ec <HAL_I2C_Master_Transmit+0x188>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d017      	beq.n	80044ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	781a      	ldrb	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	6a39      	ldr	r1, [r7, #32]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fb5e 	bl	8004bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00d      	beq.n	8004518 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	2b04      	cmp	r3, #4
 8004502:	d107      	bne.n	8004514 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004512:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e01a      	b.n	800454e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451c:	2b00      	cmp	r3, #0
 800451e:	d194      	bne.n	800444a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	e000      	b.n	800454e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800454c:	2302      	movs	r3, #2
  }
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	00100002 	.word	0x00100002
 800455c:	ffff0000 	.word	0xffff0000

08004560 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	4608      	mov	r0, r1
 800456a:	4611      	mov	r1, r2
 800456c:	461a      	mov	r2, r3
 800456e:	4603      	mov	r3, r0
 8004570:	817b      	strh	r3, [r7, #10]
 8004572:	460b      	mov	r3, r1
 8004574:	813b      	strh	r3, [r7, #8]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800457a:	f7fe feab 	bl	80032d4 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b20      	cmp	r3, #32
 800458a:	f040 80d9 	bne.w	8004740 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	2319      	movs	r3, #25
 8004594:	2201      	movs	r2, #1
 8004596:	496d      	ldr	r1, [pc, #436]	; (800474c <HAL_I2C_Mem_Write+0x1ec>)
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f9f3 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
 80045a6:	e0cc      	b.n	8004742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_I2C_Mem_Write+0x56>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e0c5      	b.n	8004742 <HAL_I2C_Mem_Write+0x1e2>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d007      	beq.n	80045dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2221      	movs	r2, #33	; 0x21
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2240      	movs	r2, #64	; 0x40
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a3a      	ldr	r2, [r7, #32]
 8004606:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a4d      	ldr	r2, [pc, #308]	; (8004750 <HAL_I2C_Mem_Write+0x1f0>)
 800461c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800461e:	88f8      	ldrh	r0, [r7, #6]
 8004620:	893a      	ldrh	r2, [r7, #8]
 8004622:	8979      	ldrh	r1, [r7, #10]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4603      	mov	r3, r0
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f912 	bl	8004858 <I2C_RequestMemoryWrite>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d052      	beq.n	80046e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e081      	b.n	8004742 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fa74 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00d      	beq.n	800466a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	2b04      	cmp	r3, #4
 8004654:	d107      	bne.n	8004666 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e06b      	b.n	8004742 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	781a      	ldrb	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d11b      	bne.n	80046e0 <HAL_I2C_Mem_Write+0x180>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d017      	beq.n	80046e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1aa      	bne.n	800463e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fa60 	bl	8004bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d107      	bne.n	8004710 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e016      	b.n	8004742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	00100002 	.word	0x00100002
 8004750:	ffff0000 	.word	0xffff0000

08004754 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	460b      	mov	r3, r1
 8004762:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b08      	cmp	r3, #8
 800476e:	d006      	beq.n	800477e <I2C_MasterRequestWrite+0x2a>
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d003      	beq.n	800477e <I2C_MasterRequestWrite+0x2a>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800477c:	d108      	bne.n	8004790 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e00b      	b.n	80047a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	2b12      	cmp	r3, #18
 8004796:	d107      	bne.n	80047a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f8e5 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00d      	beq.n	80047dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ce:	d103      	bne.n	80047d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e035      	b.n	8004848 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047e4:	d108      	bne.n	80047f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047e6:	897b      	ldrh	r3, [r7, #10]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047f4:	611a      	str	r2, [r3, #16]
 80047f6:	e01b      	b.n	8004830 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047f8:	897b      	ldrh	r3, [r7, #10]
 80047fa:	11db      	asrs	r3, r3, #7
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 0306 	and.w	r3, r3, #6
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f063 030f 	orn	r3, r3, #15
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	490e      	ldr	r1, [pc, #56]	; (8004850 <I2C_MasterRequestWrite+0xfc>)
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f90b 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e010      	b.n	8004848 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4907      	ldr	r1, [pc, #28]	; (8004854 <I2C_MasterRequestWrite+0x100>)
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f8fb 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	00010008 	.word	0x00010008
 8004854:	00010002 	.word	0x00010002

08004858 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4603      	mov	r3, r0
 8004868:	817b      	strh	r3, [r7, #10]
 800486a:	460b      	mov	r3, r1
 800486c:	813b      	strh	r3, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004880:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	2200      	movs	r2, #0
 800488a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f878 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00d      	beq.n	80048b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a8:	d103      	bne.n	80048b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e05f      	b.n	8004976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048b6:	897b      	ldrh	r3, [r7, #10]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	6a3a      	ldr	r2, [r7, #32]
 80048ca:	492d      	ldr	r1, [pc, #180]	; (8004980 <I2C_RequestMemoryWrite+0x128>)
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f8b0 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e04c      	b.n	8004976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f4:	6a39      	ldr	r1, [r7, #32]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f91a 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00d      	beq.n	800491e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	2b04      	cmp	r3, #4
 8004908:	d107      	bne.n	800491a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004918:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e02b      	b.n	8004976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d105      	bne.n	8004930 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004924:	893b      	ldrh	r3, [r7, #8]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	611a      	str	r2, [r3, #16]
 800492e:	e021      	b.n	8004974 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004930:	893b      	ldrh	r3, [r7, #8]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	b29b      	uxth	r3, r3
 8004936:	b2da      	uxtb	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004940:	6a39      	ldr	r1, [r7, #32]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f8f4 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00d      	beq.n	800496a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	2b04      	cmp	r3, #4
 8004954:	d107      	bne.n	8004966 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004964:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e005      	b.n	8004976 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800496a:	893b      	ldrh	r3, [r7, #8]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	00010002 	.word	0x00010002

08004984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004994:	e025      	b.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d021      	beq.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fe fc99 	bl	80032d4 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d116      	bne.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e023      	b.n	8004a2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d10d      	bne.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0x84>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	43da      	mvns	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4013      	ands	r3, r2
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	e00c      	b.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d0b6      	beq.n	8004996 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a40:	e051      	b.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a50:	d123      	bne.n	8004a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f043 0204 	orr.w	r2, r3, #4
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e046      	b.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d021      	beq.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fe fc17 	bl	80032d4 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d116      	bne.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e020      	b.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	0c1b      	lsrs	r3, r3, #16
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10c      	bne.n	8004b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	43da      	mvns	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bf14      	ite	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	2300      	moveq	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	e00b      	b.n	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	43da      	mvns	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf14      	ite	ne
 8004b1c:	2301      	movne	r3, #1
 8004b1e:	2300      	moveq	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d18d      	bne.n	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b3c:	e02d      	b.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f878 	bl	8004c34 <I2C_IsAcknowledgeFailed>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e02d      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d021      	beq.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b56:	f7fe fbbd 	bl	80032d4 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d116      	bne.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f043 0220 	orr.w	r2, r3, #32
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e007      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d1ca      	bne.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bbe:	e02d      	b.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f837 	bl	8004c34 <I2C_IsAcknowledgeFailed>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e02d      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d021      	beq.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd8:	f7fe fb7c 	bl	80032d4 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d116      	bne.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f043 0220 	orr.w	r2, r3, #32
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e007      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d1ca      	bne.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4a:	d11b      	bne.n	8004c84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f043 0204 	orr.w	r2, r3, #4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c94:	b08f      	sub	sp, #60	; 0x3c
 8004c96:	af0a      	add	r7, sp, #40	; 0x28
 8004c98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e10f      	b.n	8004ec4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f00a f904 	bl	800eecc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f003 ff73 	bl	8008bce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	687e      	ldr	r6, [r7, #4]
 8004cf0:	466d      	mov	r5, sp
 8004cf2:	f106 0410 	add.w	r4, r6, #16
 8004cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d02:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d06:	1d33      	adds	r3, r6, #4
 8004d08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d0a:	6838      	ldr	r0, [r7, #0]
 8004d0c:	f003 fe4a 	bl	80089a4 <USB_CoreInit>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e0d0      	b.n	8004ec4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f003 ff61 	bl	8008bf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	73fb      	strb	r3, [r7, #15]
 8004d32:	e04a      	b.n	8004dca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	333d      	adds	r3, #61	; 0x3d
 8004d44:	2201      	movs	r2, #1
 8004d46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	333c      	adds	r3, #60	; 0x3c
 8004d58:	7bfa      	ldrb	r2, [r7, #15]
 8004d5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d5c:	7bfa      	ldrb	r2, [r7, #15]
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	b298      	uxth	r0, r3
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3342      	adds	r3, #66	; 0x42
 8004d70:	4602      	mov	r2, r0
 8004d72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d74:	7bfa      	ldrb	r2, [r7, #15]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	333f      	adds	r3, #63	; 0x3f
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	3344      	adds	r3, #68	; 0x44
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d9c:	7bfa      	ldrb	r2, [r7, #15]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	3348      	adds	r3, #72	; 0x48
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004db0:	7bfa      	ldrb	r2, [r7, #15]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	3350      	adds	r3, #80	; 0x50
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	73fb      	strb	r3, [r7, #15]
 8004dca:	7bfa      	ldrb	r2, [r7, #15]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d3af      	bcc.n	8004d34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	73fb      	strb	r3, [r7, #15]
 8004dd8:	e044      	b.n	8004e64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dda:	7bfa      	ldrb	r2, [r7, #15]
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004e02:	7bfa      	ldrb	r2, [r7, #15]
 8004e04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e06:	7bfa      	ldrb	r2, [r7, #15]
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e1c:	7bfa      	ldrb	r2, [r7, #15]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e32:	7bfa      	ldrb	r2, [r7, #15]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e48:	7bfa      	ldrb	r2, [r7, #15]
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	1a9b      	subs	r3, r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	3301      	adds	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d3b5      	bcc.n	8004dda <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	687e      	ldr	r6, [r7, #4]
 8004e76:	466d      	mov	r5, sp
 8004e78:	f106 0410 	add.w	r4, r6, #16
 8004e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e88:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e8c:	1d33      	adds	r3, r6, #4
 8004e8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e90:	6838      	ldr	r0, [r7, #0]
 8004e92:	f003 fed7 	bl	8008c44 <USB_DevInit>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e00d      	b.n	8004ec4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f004 ff1f 	bl	8009d00 <USB_DevDisconnect>

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ecc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_PCD_Start+0x1c>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e020      	b.n	8004f2a <HAL_PCD_Start+0x5e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d109      	bne.n	8004f0c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d005      	beq.n	8004f0c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f003 fe4b 	bl	8008bac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f004 fecf 	bl	8009cbe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f32:	b590      	push	{r4, r7, lr}
 8004f34:	b08d      	sub	sp, #52	; 0x34
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f004 ff8d 	bl	8009e68 <USB_GetMode>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f040 839d 	bne.w	8005690 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f004 fef1 	bl	8009d42 <USB_ReadInterrupts>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8393 	beq.w	800568e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f004 fee8 	bl	8009d42 <USB_ReadInterrupts>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d107      	bne.n	8004f8c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695a      	ldr	r2, [r3, #20]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f002 0202 	and.w	r2, r2, #2
 8004f8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f004 fed6 	bl	8009d42 <USB_ReadInterrupts>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d161      	bne.n	8005064 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0210 	bic.w	r2, r2, #16
 8004fae:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f003 020f 	and.w	r2, r3, #15
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	1a9b      	subs	r3, r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	4413      	add	r3, r2
 8004fcc:	3304      	adds	r3, #4
 8004fce:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	0c5b      	lsrs	r3, r3, #17
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d124      	bne.n	8005026 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d035      	beq.n	8005054 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6a38      	ldr	r0, [r7, #32]
 8004ffc:	f004 fd3c 	bl	8009a78 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800500c:	441a      	add	r2, r3
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800501e:	441a      	add	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	619a      	str	r2, [r3, #24]
 8005024:	e016      	b.n	8005054 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	0c5b      	lsrs	r3, r3, #17
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	2b06      	cmp	r3, #6
 8005030:	d110      	bne.n	8005054 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005038:	2208      	movs	r2, #8
 800503a:	4619      	mov	r1, r3
 800503c:	6a38      	ldr	r0, [r7, #32]
 800503e:	f004 fd1b 	bl	8009a78 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800504e:	441a      	add	r2, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0210 	orr.w	r2, r2, #16
 8005062:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f004 fe6a 	bl	8009d42 <USB_ReadInterrupts>
 800506e:	4603      	mov	r3, r0
 8005070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005074:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005078:	d16e      	bne.n	8005158 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f004 fe70 	bl	8009d68 <USB_ReadDevAllOutEpInterrupt>
 8005088:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800508a:	e062      	b.n	8005152 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d057      	beq.n	8005146 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f004 fe95 	bl	8009dd0 <USB_ReadDevOutEPInterrupt>
 80050a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00c      	beq.n	80050cc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	461a      	mov	r2, r3
 80050c0:	2301      	movs	r3, #1
 80050c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fdb0 	bl	8005c2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00c      	beq.n	80050f0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	461a      	mov	r2, r3
 80050e4:	2308      	movs	r3, #8
 80050e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80050e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 feaa 	bl	8005e44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	461a      	mov	r2, r3
 8005108:	2310      	movs	r3, #16
 800510a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d008      	beq.n	8005128 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	461a      	mov	r2, r3
 8005124:	2320      	movs	r3, #32
 8005126:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	461a      	mov	r2, r3
 8005140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005144:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	3301      	adds	r3, #1
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	2b00      	cmp	r3, #0
 8005156:	d199      	bne.n	800508c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4618      	mov	r0, r3
 800515e:	f004 fdf0 	bl	8009d42 <USB_ReadInterrupts>
 8005162:	4603      	mov	r3, r0
 8005164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005168:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800516c:	f040 80c0 	bne.w	80052f0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f004 fe11 	bl	8009d9c <USB_ReadDevAllInEpInterrupt>
 800517a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005180:	e0b2      	b.n	80052e8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80a7 	beq.w	80052dc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	4611      	mov	r1, r2
 8005198:	4618      	mov	r0, r3
 800519a:	f004 fe37 	bl	8009e0c <USB_ReadDevInEPInterrupt>
 800519e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d057      	beq.n	800525a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	2201      	movs	r2, #1
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	43db      	mvns	r3, r3
 80051c4:	69f9      	ldr	r1, [r7, #28]
 80051c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ca:	4013      	ands	r3, r2
 80051cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051da:	461a      	mov	r2, r3
 80051dc:	2301      	movs	r3, #1
 80051de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d132      	bne.n	800524e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ec:	4613      	mov	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	3348      	adds	r3, #72	; 0x48
 80051f8:	6819      	ldr	r1, [r3, #0]
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fe:	4613      	mov	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4403      	add	r3, r0
 8005208:	3344      	adds	r3, #68	; 0x44
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4419      	add	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4403      	add	r3, r0
 800521c:	3348      	adds	r3, #72	; 0x48
 800521e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d113      	bne.n	800524e <HAL_PCD_IRQHandler+0x31c>
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522a:	4613      	mov	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	3350      	adds	r3, #80	; 0x50
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d108      	bne.n	800524e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005246:	461a      	mov	r2, r3
 8005248:	2101      	movs	r1, #1
 800524a:	f004 fe3f 	bl	8009ecc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	b2db      	uxtb	r3, r3
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f009 feba 	bl	800efce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	461a      	mov	r2, r3
 8005272:	2308      	movs	r3, #8
 8005274:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	461a      	mov	r2, r3
 800528e:	2310      	movs	r3, #16
 8005290:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d008      	beq.n	80052ae <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	461a      	mov	r2, r3
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c4:	461a      	mov	r2, r3
 80052c6:	2302      	movs	r3, #2
 80052c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80052d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fc1b 	bl	8005b12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	3301      	adds	r3, #1
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f47f af49 	bne.w	8005182 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f004 fd24 	bl	8009d42 <USB_ReadInterrupts>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005304:	d122      	bne.n	800534c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005320:	2b01      	cmp	r3, #1
 8005322:	d108      	bne.n	8005336 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800532c:	2100      	movs	r1, #0
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fe26 	bl	8005f80 <HAL_PCDEx_LPM_Callback>
 8005334:	e002      	b.n	800533c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f009 feb6 	bl	800f0a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800534a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f004 fcf6 	bl	8009d42 <USB_ReadInterrupts>
 8005356:	4603      	mov	r3, r0
 8005358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800535c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005360:	d112      	bne.n	8005388 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b01      	cmp	r3, #1
 8005370:	d102      	bne.n	8005378 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f009 fe72 	bl	800f05c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005386:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f004 fcd8 	bl	8009d42 <USB_ReadInterrupts>
 8005392:	4603      	mov	r3, r0
 8005394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539c:	f040 80c7 	bne.w	800552e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2110      	movs	r1, #16
 80053ba:	4618      	mov	r0, r3
 80053bc:	f003 fda6 	bl	8008f0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053c0:	2300      	movs	r3, #0
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c4:	e056      	b.n	8005474 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d2:	461a      	mov	r2, r3
 80053d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ea:	0151      	lsls	r1, r2, #5
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053f8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540a:	0151      	lsls	r1, r2, #5
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	440a      	add	r2, r1
 8005410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005414:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005418:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005426:	461a      	mov	r2, r3
 8005428:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800542c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005448:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800544c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545e:	0151      	lsls	r1, r2, #5
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	440a      	add	r2, r1
 8005464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005468:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800546c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	3301      	adds	r3, #1
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547a:	429a      	cmp	r2, r3
 800547c:	d3a3      	bcc.n	80053c6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800548c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005490:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054aa:	f043 030b 	orr.w	r3, r3, #11
 80054ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c0:	f043 030b 	orr.w	r3, r3, #11
 80054c4:	6453      	str	r3, [r2, #68]	; 0x44
 80054c6:	e015      	b.n	80054f4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80054de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ee:	f043 030b 	orr.w	r3, r3, #11
 80054f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005502:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005506:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005518:	461a      	mov	r2, r3
 800551a:	f004 fcd7 	bl	8009ecc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800552c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f004 fc05 	bl	8009d42 <USB_ReadInterrupts>
 8005538:	4603      	mov	r3, r0
 800553a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800553e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005542:	d124      	bne.n	800558e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f004 fc9b 	bl	8009e84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f003 fd3b 	bl	8008fce <USB_GetDevSpeed>
 8005558:	4603      	mov	r3, r0
 800555a:	461a      	mov	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681c      	ldr	r4, [r3, #0]
 8005564:	f001 f92c 	bl	80067c0 <HAL_RCC_GetHCLKFreq>
 8005568:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	4620      	mov	r0, r4
 8005574:	f003 fa78 	bl	8008a68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f009 fd50 	bl	800f01e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800558c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f004 fbd5 	bl	8009d42 <USB_ReadInterrupts>
 8005598:	4603      	mov	r3, r0
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d10a      	bne.n	80055b8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f009 fd2d 	bl	800f002 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f002 0208 	and.w	r2, r2, #8
 80055b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f004 fbc0 	bl	8009d42 <USB_ReadInterrupts>
 80055c2:	4603      	mov	r3, r0
 80055c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055cc:	d10f      	bne.n	80055ee <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f009 fd85 	bl	800f0e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80055ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f004 fba5 	bl	8009d42 <USB_ReadInterrupts>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005602:	d10f      	bne.n	8005624 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	b2db      	uxtb	r3, r3
 800560c:	4619      	mov	r1, r3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f009 fd58 	bl	800f0c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005622:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f004 fb8a 	bl	8009d42 <USB_ReadInterrupts>
 800562e:	4603      	mov	r3, r0
 8005630:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005638:	d10a      	bne.n	8005650 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f009 fd66 	bl	800f10c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695a      	ldr	r2, [r3, #20]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800564e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f004 fb74 	bl	8009d42 <USB_ReadInterrupts>
 800565a:	4603      	mov	r3, r0
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b04      	cmp	r3, #4
 8005662:	d115      	bne.n	8005690 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f009 fd56 	bl	800f128 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6859      	ldr	r1, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
 800568c:	e000      	b.n	8005690 <HAL_PCD_IRQHandler+0x75e>
      return;
 800568e:	bf00      	nop
    }
  }
}
 8005690:	3734      	adds	r7, #52	; 0x34
 8005692:	46bd      	mov	sp, r7
 8005694:	bd90      	pop	{r4, r7, pc}

08005696 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_PCD_SetAddress+0x1a>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e013      	b.n	80056d8 <HAL_PCD_SetAddress+0x42>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	4611      	mov	r1, r2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f004 fad2 	bl	8009c72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	4608      	mov	r0, r1
 80056ea:	4611      	mov	r1, r2
 80056ec:	461a      	mov	r2, r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	70fb      	strb	r3, [r7, #3]
 80056f2:	460b      	mov	r3, r1
 80056f4:	803b      	strh	r3, [r7, #0]
 80056f6:	4613      	mov	r3, r2
 80056f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005702:	2b00      	cmp	r3, #0
 8005704:	da0f      	bge.n	8005726 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	f003 020f 	and.w	r2, r3, #15
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	3338      	adds	r3, #56	; 0x38
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	3304      	adds	r3, #4
 800571c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	705a      	strb	r2, [r3, #1]
 8005724:	e00f      	b.n	8005746 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	f003 020f 	and.w	r2, r3, #15
 800572c:	4613      	mov	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	4413      	add	r3, r2
 800573c:	3304      	adds	r3, #4
 800573e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	b2da      	uxtb	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005752:	883a      	ldrh	r2, [r7, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	78ba      	ldrb	r2, [r7, #2]
 800575c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	785b      	ldrb	r3, [r3, #1]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005770:	78bb      	ldrb	r3, [r7, #2]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d102      	bne.n	800577c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_PCD_EP_Open+0xaa>
 8005786:	2302      	movs	r3, #2
 8005788:	e00e      	b.n	80057a8 <HAL_PCD_EP_Open+0xc8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	4618      	mov	r0, r3
 800579a:	f003 fc3d 	bl	8009018 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80057a6:	7afb      	ldrb	r3, [r7, #11]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	da0f      	bge.n	80057e4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	f003 020f 	and.w	r2, r3, #15
 80057ca:	4613      	mov	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	3338      	adds	r3, #56	; 0x38
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	3304      	adds	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	705a      	strb	r2, [r3, #1]
 80057e2:	e00f      	b.n	8005804 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	f003 020f 	and.w	r2, r3, #15
 80057ea:	4613      	mov	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	1a9b      	subs	r3, r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	3304      	adds	r3, #4
 80057fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	b2da      	uxtb	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_PCD_EP_Close+0x6e>
 800581a:	2302      	movs	r3, #2
 800581c:	e00e      	b.n	800583c <HAL_PCD_EP_Close+0x8c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	4618      	mov	r0, r3
 800582e:	f003 fc7b 	bl	8009128 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	460b      	mov	r3, r1
 8005852:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005854:	7afb      	ldrb	r3, [r7, #11]
 8005856:	f003 020f 	and.w	r2, r3, #15
 800585a:	4613      	mov	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	3304      	adds	r3, #4
 800586c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2200      	movs	r2, #0
 800587e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005886:	7afb      	ldrb	r3, [r7, #11]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	b2da      	uxtb	r2, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d102      	bne.n	80058a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058a0:	7afb      	ldrb	r3, [r7, #11]
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d109      	bne.n	80058be <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	6979      	ldr	r1, [r7, #20]
 80058b8:	f003 ff56 	bl	8009768 <USB_EP0StartXfer>
 80058bc:	e008      	b.n	80058d0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	6979      	ldr	r1, [r7, #20]
 80058cc:	f003 fd08 	bl	80092e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	f003 020f 	and.w	r2, r3, #15
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	1a9b      	subs	r3, r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80058fc:	681b      	ldr	r3, [r3, #0]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	460b      	mov	r3, r1
 8005918:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800591a:	7afb      	ldrb	r3, [r7, #11]
 800591c:	f003 020f 	and.w	r2, r3, #15
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	3338      	adds	r3, #56	; 0x38
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	3304      	adds	r3, #4
 8005930:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2201      	movs	r2, #1
 8005948:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800594a:	7afb      	ldrb	r3, [r7, #11]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	b2da      	uxtb	r2, r3
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d102      	bne.n	8005964 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005964:	7afb      	ldrb	r3, [r7, #11]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	2b00      	cmp	r3, #0
 800596c:	d109      	bne.n	8005982 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	f003 fef4 	bl	8009768 <USB_EP0StartXfer>
 8005980:	e008      	b.n	8005994 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	6979      	ldr	r1, [r7, #20]
 8005990:	f003 fca6 	bl	80092e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	460b      	mov	r3, r1
 80059a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f003 020f 	and.w	r2, r3, #15
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d901      	bls.n	80059bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e050      	b.n	8005a5e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	da0f      	bge.n	80059e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	4613      	mov	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	3338      	adds	r3, #56	; 0x38
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	4413      	add	r3, r2
 80059d8:	3304      	adds	r3, #4
 80059da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	705a      	strb	r2, [r3, #1]
 80059e2:	e00d      	b.n	8005a00 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059e4:	78fa      	ldrb	r2, [r7, #3]
 80059e6:	4613      	mov	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	4413      	add	r3, r2
 80059f6:	3304      	adds	r3, #4
 80059f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <HAL_PCD_EP_SetStall+0x82>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e01e      	b.n	8005a5e <HAL_PCD_EP_SetStall+0xc0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68f9      	ldr	r1, [r7, #12]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f004 f84b 	bl	8009aca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	b2d9      	uxtb	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f004 fa3c 	bl	8009ecc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	f003 020f 	and.w	r2, r3, #15
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d901      	bls.n	8005a84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e042      	b.n	8005b0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	da0f      	bge.n	8005aac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	f003 020f 	and.w	r2, r3, #15
 8005a92:	4613      	mov	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	1a9b      	subs	r3, r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	3338      	adds	r3, #56	; 0x38
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	705a      	strb	r2, [r3, #1]
 8005aaa:	e00f      	b.n	8005acc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	f003 020f 	and.w	r2, r3, #15
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_PCD_EP_ClrStall+0x86>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e00e      	b.n	8005b0a <HAL_PCD_EP_ClrStall+0xa4>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f004 f853 	bl	8009ba6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b08a      	sub	sp, #40	; 0x28
 8005b16:	af02      	add	r7, sp, #8
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	3338      	adds	r3, #56	; 0x38
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	4413      	add	r3, r2
 8005b36:	3304      	adds	r3, #4
 8005b38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d901      	bls.n	8005b4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e06c      	b.n	8005c24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d902      	bls.n	8005b66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3303      	adds	r3, #3
 8005b6a:	089b      	lsrs	r3, r3, #2
 8005b6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b6e:	e02b      	b.n	8005bc8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	695a      	ldr	r2, [r3, #20]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d902      	bls.n	8005b8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	3303      	adds	r3, #3
 8005b90:	089b      	lsrs	r3, r3, #2
 8005b92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68d9      	ldr	r1, [r3, #12]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	4603      	mov	r3, r0
 8005baa:	6978      	ldr	r0, [r7, #20]
 8005bac:	f003 ff2f 	bl	8009a0e <USB_WritePacket>

    ep->xfer_buff  += len;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	441a      	add	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	441a      	add	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d809      	bhi.n	8005bf2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d203      	bcs.n	8005bf2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1be      	bne.n	8005b70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d811      	bhi.n	8005c22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	2201      	movs	r2, #1
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	43db      	mvns	r3, r3
 8005c18:	6939      	ldr	r1, [r7, #16]
 8005c1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c1e:	4013      	ands	r3, r2
 8005c20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	333c      	adds	r3, #60	; 0x3c
 8005c44:	3304      	adds	r3, #4
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	f040 80a0 	bne.w	8005da4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d015      	beq.n	8005c9a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a72      	ldr	r2, [pc, #456]	; (8005e3c <PCD_EP_OutXfrComplete_int+0x210>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	f240 80dd 	bls.w	8005e32 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80d7 	beq.w	8005e32 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	461a      	mov	r2, r3
 8005c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c96:	6093      	str	r3, [r2, #8]
 8005c98:	e0cb      	b.n	8005e32 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d009      	beq.n	8005cb8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2320      	movs	r3, #32
 8005cb4:	6093      	str	r3, [r2, #8]
 8005cb6:	e0bc      	b.n	8005e32 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 80b7 	bne.w	8005e32 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4a5d      	ldr	r2, [pc, #372]	; (8005e3c <PCD_EP_OutXfrComplete_int+0x210>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d90f      	bls.n	8005cec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce8:	6093      	str	r3, [r2, #8]
 8005cea:	e0a2      	b.n	8005e32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005cfe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	0159      	lsls	r1, r3, #5
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	440b      	add	r3, r1
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005d12:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4403      	add	r3, r0
 8005d22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005d26:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d3a:	6819      	ldr	r1, [r3, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4403      	add	r3, r0
 8005d4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4419      	add	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	4613      	mov	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	1a9b      	subs	r3, r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4403      	add	r3, r0
 8005d60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d64:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d114      	bne.n	8005d96 <PCD_EP_OutXfrComplete_int+0x16a>
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	4613      	mov	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d108      	bne.n	8005d96 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2101      	movs	r1, #1
 8005d92:	f004 f89b 	bl	8009ecc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f009 f8fb 	bl	800ef98 <HAL_PCD_DataOutStageCallback>
 8005da2:	e046      	b.n	8005e32 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a26      	ldr	r2, [pc, #152]	; (8005e40 <PCD_EP_OutXfrComplete_int+0x214>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d124      	bne.n	8005df6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc8:	6093      	str	r3, [r2, #8]
 8005dca:	e032      	b.n	8005e32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d008      	beq.n	8005de8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	461a      	mov	r2, r3
 8005de4:	2320      	movs	r3, #32
 8005de6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f009 f8d2 	bl	800ef98 <HAL_PCD_DataOutStageCallback>
 8005df4:	e01d      	b.n	8005e32 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d114      	bne.n	8005e26 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d108      	bne.n	8005e26 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e1e:	461a      	mov	r2, r3
 8005e20:	2100      	movs	r1, #0
 8005e22:	f004 f853 	bl	8009ecc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f009 f8b3 	bl	800ef98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	4f54300a 	.word	0x4f54300a
 8005e40:	4f54310a 	.word	0x4f54310a

08005e44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	333c      	adds	r3, #60	; 0x3c
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <PCD_EP_OutSetupPacket_int+0x88>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d90e      	bls.n	8005e98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	461a      	mov	r2, r3
 8005e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f009 f86b 	bl	800ef74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <PCD_EP_OutSetupPacket_int+0x88>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d90c      	bls.n	8005ec0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d108      	bne.n	8005ec0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005eb8:	461a      	mov	r2, r3
 8005eba:	2101      	movs	r1, #1
 8005ebc:	f004 f806 	bl	8009ecc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	4f54300a 	.word	0x4f54300a

08005ed0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
 8005edc:	4613      	mov	r3, r2
 8005ede:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d107      	bne.n	8005efe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005eee:	883b      	ldrh	r3, [r7, #0]
 8005ef0:	0419      	lsls	r1, r3, #16
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	629a      	str	r2, [r3, #40]	; 0x28
 8005efc:	e028      	b.n	8005f50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	0c1b      	lsrs	r3, r3, #16
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	4413      	add	r3, r2
 8005f0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	73fb      	strb	r3, [r7, #15]
 8005f10:	e00d      	b.n	8005f2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	3340      	adds	r3, #64	; 0x40
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	0c1b      	lsrs	r3, r3, #16
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	4413      	add	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
 8005f2e:	7bfa      	ldrb	r2, [r7, #15]
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d3ec      	bcc.n	8005f12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f38:	883b      	ldrh	r3, [r7, #0]
 8005f3a:	0418      	lsls	r0, r3, #16
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6819      	ldr	r1, [r3, #0]
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	4302      	orrs	r2, r0
 8005f48:	3340      	adds	r3, #64	; 0x40
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	887a      	ldrh	r2, [r7, #2]
 8005f70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e264      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d075      	beq.n	80060a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fb6:	4ba3      	ldr	r3, [pc, #652]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 030c 	and.w	r3, r3, #12
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d00c      	beq.n	8005fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fc2:	4ba0      	ldr	r3, [pc, #640]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d112      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fce:	4b9d      	ldr	r3, [pc, #628]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fda:	d10b      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fdc:	4b99      	ldr	r3, [pc, #612]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d05b      	beq.n	80060a0 <HAL_RCC_OscConfig+0x108>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d157      	bne.n	80060a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e23f      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffc:	d106      	bne.n	800600c <HAL_RCC_OscConfig+0x74>
 8005ffe:	4b91      	ldr	r3, [pc, #580]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a90      	ldr	r2, [pc, #576]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	e01d      	b.n	8006048 <HAL_RCC_OscConfig+0xb0>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006014:	d10c      	bne.n	8006030 <HAL_RCC_OscConfig+0x98>
 8006016:	4b8b      	ldr	r3, [pc, #556]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a8a      	ldr	r2, [pc, #552]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 800601c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	4b88      	ldr	r3, [pc, #544]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a87      	ldr	r2, [pc, #540]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	e00b      	b.n	8006048 <HAL_RCC_OscConfig+0xb0>
 8006030:	4b84      	ldr	r3, [pc, #528]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a83      	ldr	r2, [pc, #524]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	4b81      	ldr	r3, [pc, #516]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a80      	ldr	r2, [pc, #512]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d013      	beq.n	8006078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fd f940 	bl	80032d4 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006058:	f7fd f93c 	bl	80032d4 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	; 0x64
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e204      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606a:	4b76      	ldr	r3, [pc, #472]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f0      	beq.n	8006058 <HAL_RCC_OscConfig+0xc0>
 8006076:	e014      	b.n	80060a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006078:	f7fd f92c 	bl	80032d4 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006080:	f7fd f928 	bl	80032d4 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	; 0x64
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e1f0      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006092:	4b6c      	ldr	r3, [pc, #432]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCC_OscConfig+0xe8>
 800609e:	e000      	b.n	80060a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d063      	beq.n	8006176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060ae:	4b65      	ldr	r3, [pc, #404]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 030c 	and.w	r3, r3, #12
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00b      	beq.n	80060d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ba:	4b62      	ldr	r3, [pc, #392]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d11c      	bne.n	8006100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060c6:	4b5f      	ldr	r3, [pc, #380]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d116      	bne.n	8006100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d2:	4b5c      	ldr	r3, [pc, #368]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_RCC_OscConfig+0x152>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d001      	beq.n	80060ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e1c4      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ea:	4b56      	ldr	r3, [pc, #344]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4952      	ldr	r1, [pc, #328]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060fe:	e03a      	b.n	8006176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d020      	beq.n	800614a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006108:	4b4f      	ldr	r3, [pc, #316]	; (8006248 <HAL_RCC_OscConfig+0x2b0>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610e:	f7fd f8e1 	bl	80032d4 <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006116:	f7fd f8dd 	bl	80032d4 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e1a5      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006128:	4b46      	ldr	r3, [pc, #280]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0f0      	beq.n	8006116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006134:	4b43      	ldr	r3, [pc, #268]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	4940      	ldr	r1, [pc, #256]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006144:	4313      	orrs	r3, r2
 8006146:	600b      	str	r3, [r1, #0]
 8006148:	e015      	b.n	8006176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800614a:	4b3f      	ldr	r3, [pc, #252]	; (8006248 <HAL_RCC_OscConfig+0x2b0>)
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006150:	f7fd f8c0 	bl	80032d4 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006158:	f7fd f8bc 	bl	80032d4 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e184      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800616a:	4b36      	ldr	r3, [pc, #216]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f0      	bne.n	8006158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d030      	beq.n	80061e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d016      	beq.n	80061b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800618a:	4b30      	ldr	r3, [pc, #192]	; (800624c <HAL_RCC_OscConfig+0x2b4>)
 800618c:	2201      	movs	r2, #1
 800618e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006190:	f7fd f8a0 	bl	80032d4 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006198:	f7fd f89c 	bl	80032d4 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e164      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061aa:	4b26      	ldr	r3, [pc, #152]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 80061ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0x200>
 80061b6:	e015      	b.n	80061e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b8:	4b24      	ldr	r3, [pc, #144]	; (800624c <HAL_RCC_OscConfig+0x2b4>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061be:	f7fd f889 	bl	80032d4 <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061c6:	f7fd f885 	bl	80032d4 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e14d      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d8:	4b1a      	ldr	r3, [pc, #104]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 80061da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1f0      	bne.n	80061c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80a0 	beq.w	8006332 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061f2:	2300      	movs	r3, #0
 80061f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061f6:	4b13      	ldr	r3, [pc, #76]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10f      	bne.n	8006222 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	4a0e      	ldr	r2, [pc, #56]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 800620c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006210:	6413      	str	r3, [r2, #64]	; 0x40
 8006212:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <HAL_RCC_OscConfig+0x2ac>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621a:	60bb      	str	r3, [r7, #8]
 800621c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800621e:	2301      	movs	r3, #1
 8006220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006222:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <HAL_RCC_OscConfig+0x2b8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622a:	2b00      	cmp	r3, #0
 800622c:	d121      	bne.n	8006272 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800622e:	4b08      	ldr	r3, [pc, #32]	; (8006250 <HAL_RCC_OscConfig+0x2b8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a07      	ldr	r2, [pc, #28]	; (8006250 <HAL_RCC_OscConfig+0x2b8>)
 8006234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800623a:	f7fd f84b 	bl	80032d4 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006240:	e011      	b.n	8006266 <HAL_RCC_OscConfig+0x2ce>
 8006242:	bf00      	nop
 8006244:	40023800 	.word	0x40023800
 8006248:	42470000 	.word	0x42470000
 800624c:	42470e80 	.word	0x42470e80
 8006250:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006254:	f7fd f83e 	bl	80032d4 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b02      	cmp	r3, #2
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e106      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006266:	4b85      	ldr	r3, [pc, #532]	; (800647c <HAL_RCC_OscConfig+0x4e4>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0f0      	beq.n	8006254 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d106      	bne.n	8006288 <HAL_RCC_OscConfig+0x2f0>
 800627a:	4b81      	ldr	r3, [pc, #516]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	4a80      	ldr	r2, [pc, #512]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	6713      	str	r3, [r2, #112]	; 0x70
 8006286:	e01c      	b.n	80062c2 <HAL_RCC_OscConfig+0x32a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2b05      	cmp	r3, #5
 800628e:	d10c      	bne.n	80062aa <HAL_RCC_OscConfig+0x312>
 8006290:	4b7b      	ldr	r3, [pc, #492]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006294:	4a7a      	ldr	r2, [pc, #488]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 8006296:	f043 0304 	orr.w	r3, r3, #4
 800629a:	6713      	str	r3, [r2, #112]	; 0x70
 800629c:	4b78      	ldr	r3, [pc, #480]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	4a77      	ldr	r2, [pc, #476]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	6713      	str	r3, [r2, #112]	; 0x70
 80062a8:	e00b      	b.n	80062c2 <HAL_RCC_OscConfig+0x32a>
 80062aa:	4b75      	ldr	r3, [pc, #468]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 80062ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ae:	4a74      	ldr	r2, [pc, #464]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	6713      	str	r3, [r2, #112]	; 0x70
 80062b6:	4b72      	ldr	r3, [pc, #456]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 80062b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ba:	4a71      	ldr	r2, [pc, #452]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 80062bc:	f023 0304 	bic.w	r3, r3, #4
 80062c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d015      	beq.n	80062f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ca:	f7fd f803 	bl	80032d4 <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d0:	e00a      	b.n	80062e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d2:	f7fc ffff 	bl	80032d4 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e0c5      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e8:	4b65      	ldr	r3, [pc, #404]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 80062ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0ee      	beq.n	80062d2 <HAL_RCC_OscConfig+0x33a>
 80062f4:	e014      	b.n	8006320 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f6:	f7fc ffed 	bl	80032d4 <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062fc:	e00a      	b.n	8006314 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062fe:	f7fc ffe9 	bl	80032d4 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f241 3288 	movw	r2, #5000	; 0x1388
 800630c:	4293      	cmp	r3, r2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e0af      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006314:	4b5a      	ldr	r3, [pc, #360]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 8006316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1ee      	bne.n	80062fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d105      	bne.n	8006332 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006326:	4b56      	ldr	r3, [pc, #344]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	4a55      	ldr	r2, [pc, #340]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 800632c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006330:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 809b 	beq.w	8006472 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800633c:	4b50      	ldr	r3, [pc, #320]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 030c 	and.w	r3, r3, #12
 8006344:	2b08      	cmp	r3, #8
 8006346:	d05c      	beq.n	8006402 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d141      	bne.n	80063d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006350:	4b4c      	ldr	r3, [pc, #304]	; (8006484 <HAL_RCC_OscConfig+0x4ec>)
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006356:	f7fc ffbd 	bl	80032d4 <HAL_GetTick>
 800635a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635c:	e008      	b.n	8006370 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800635e:	f7fc ffb9 	bl	80032d4 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e081      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006370:	4b43      	ldr	r3, [pc, #268]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f0      	bne.n	800635e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	019b      	lsls	r3, r3, #6
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	085b      	lsrs	r3, r3, #1
 8006394:	3b01      	subs	r3, #1
 8006396:	041b      	lsls	r3, r3, #16
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	061b      	lsls	r3, r3, #24
 80063a0:	4937      	ldr	r1, [pc, #220]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a6:	4b37      	ldr	r3, [pc, #220]	; (8006484 <HAL_RCC_OscConfig+0x4ec>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fc ff92 	bl	80032d4 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b4:	f7fc ff8e 	bl	80032d4 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e056      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063c6:	4b2e      	ldr	r3, [pc, #184]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0x41c>
 80063d2:	e04e      	b.n	8006472 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d4:	4b2b      	ldr	r3, [pc, #172]	; (8006484 <HAL_RCC_OscConfig+0x4ec>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063da:	f7fc ff7b 	bl	80032d4 <HAL_GetTick>
 80063de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e0:	e008      	b.n	80063f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e2:	f7fc ff77 	bl	80032d4 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e03f      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063f4:	4b22      	ldr	r3, [pc, #136]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1f0      	bne.n	80063e2 <HAL_RCC_OscConfig+0x44a>
 8006400:	e037      	b.n	8006472 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e032      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800640e:	4b1c      	ldr	r3, [pc, #112]	; (8006480 <HAL_RCC_OscConfig+0x4e8>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d028      	beq.n	800646e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006426:	429a      	cmp	r2, r3
 8006428:	d121      	bne.n	800646e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006434:	429a      	cmp	r2, r3
 8006436:	d11a      	bne.n	800646e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800643e:	4013      	ands	r3, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006444:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006446:	4293      	cmp	r3, r2
 8006448:	d111      	bne.n	800646e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	085b      	lsrs	r3, r3, #1
 8006456:	3b01      	subs	r3, #1
 8006458:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800645a:	429a      	cmp	r2, r3
 800645c:	d107      	bne.n	800646e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800646a:	429a      	cmp	r2, r3
 800646c:	d001      	beq.n	8006472 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	40007000 	.word	0x40007000
 8006480:	40023800 	.word	0x40023800
 8006484:	42470060 	.word	0x42470060

08006488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0cc      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800649c:	4b68      	ldr	r3, [pc, #416]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d90c      	bls.n	80064c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064aa:	4b65      	ldr	r3, [pc, #404]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b2:	4b63      	ldr	r3, [pc, #396]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d001      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e0b8      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d020      	beq.n	8006512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064dc:	4b59      	ldr	r3, [pc, #356]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	4a58      	ldr	r2, [pc, #352]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0308 	and.w	r3, r3, #8
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064f4:	4b53      	ldr	r3, [pc, #332]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	4a52      	ldr	r2, [pc, #328]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80064fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006500:	4b50      	ldr	r3, [pc, #320]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	494d      	ldr	r1, [pc, #308]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	4313      	orrs	r3, r2
 8006510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d044      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d107      	bne.n	8006536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006526:	4b47      	ldr	r3, [pc, #284]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d119      	bne.n	8006566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e07f      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d003      	beq.n	8006546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006542:	2b03      	cmp	r3, #3
 8006544:	d107      	bne.n	8006556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006546:	4b3f      	ldr	r3, [pc, #252]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e06f      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006556:	4b3b      	ldr	r3, [pc, #236]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e067      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006566:	4b37      	ldr	r3, [pc, #220]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f023 0203 	bic.w	r2, r3, #3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4934      	ldr	r1, [pc, #208]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006574:	4313      	orrs	r3, r2
 8006576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006578:	f7fc feac 	bl	80032d4 <HAL_GetTick>
 800657c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657e:	e00a      	b.n	8006596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006580:	f7fc fea8 	bl	80032d4 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	f241 3288 	movw	r2, #5000	; 0x1388
 800658e:	4293      	cmp	r3, r2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e04f      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006596:	4b2b      	ldr	r3, [pc, #172]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 020c 	and.w	r2, r3, #12
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d1eb      	bne.n	8006580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065a8:	4b25      	ldr	r3, [pc, #148]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d20c      	bcs.n	80065d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b6:	4b22      	ldr	r3, [pc, #136]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065be:	4b20      	ldr	r3, [pc, #128]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d001      	beq.n	80065d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e032      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065dc:	4b19      	ldr	r3, [pc, #100]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4916      	ldr	r1, [pc, #88]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0308 	and.w	r3, r3, #8
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d009      	beq.n	800660e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065fa:	4b12      	ldr	r3, [pc, #72]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	490e      	ldr	r1, [pc, #56]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 800660a:	4313      	orrs	r3, r2
 800660c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800660e:	f000 f821 	bl	8006654 <HAL_RCC_GetSysClockFreq>
 8006612:	4602      	mov	r2, r0
 8006614:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	490a      	ldr	r1, [pc, #40]	; (8006648 <HAL_RCC_ClockConfig+0x1c0>)
 8006620:	5ccb      	ldrb	r3, [r1, r3]
 8006622:	fa22 f303 	lsr.w	r3, r2, r3
 8006626:	4a09      	ldr	r2, [pc, #36]	; (800664c <HAL_RCC_ClockConfig+0x1c4>)
 8006628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800662a:	4b09      	ldr	r3, [pc, #36]	; (8006650 <HAL_RCC_ClockConfig+0x1c8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f7fc fe0c 	bl	800324c <HAL_InitTick>

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40023c00 	.word	0x40023c00
 8006644:	40023800 	.word	0x40023800
 8006648:	080150c8 	.word	0x080150c8
 800664c:	20000068 	.word	0x20000068
 8006650:	2000006c 	.word	0x2000006c

08006654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006654:	b5b0      	push	{r4, r5, r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800665a:	2100      	movs	r1, #0
 800665c:	6079      	str	r1, [r7, #4]
 800665e:	2100      	movs	r1, #0
 8006660:	60f9      	str	r1, [r7, #12]
 8006662:	2100      	movs	r1, #0
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006666:	2100      	movs	r1, #0
 8006668:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800666a:	4952      	ldr	r1, [pc, #328]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800666c:	6889      	ldr	r1, [r1, #8]
 800666e:	f001 010c 	and.w	r1, r1, #12
 8006672:	2908      	cmp	r1, #8
 8006674:	d00d      	beq.n	8006692 <HAL_RCC_GetSysClockFreq+0x3e>
 8006676:	2908      	cmp	r1, #8
 8006678:	f200 8094 	bhi.w	80067a4 <HAL_RCC_GetSysClockFreq+0x150>
 800667c:	2900      	cmp	r1, #0
 800667e:	d002      	beq.n	8006686 <HAL_RCC_GetSysClockFreq+0x32>
 8006680:	2904      	cmp	r1, #4
 8006682:	d003      	beq.n	800668c <HAL_RCC_GetSysClockFreq+0x38>
 8006684:	e08e      	b.n	80067a4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006686:	4b4c      	ldr	r3, [pc, #304]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8006688:	60bb      	str	r3, [r7, #8]
       break;
 800668a:	e08e      	b.n	80067aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800668c:	4b4b      	ldr	r3, [pc, #300]	; (80067bc <HAL_RCC_GetSysClockFreq+0x168>)
 800668e:	60bb      	str	r3, [r7, #8]
      break;
 8006690:	e08b      	b.n	80067aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006692:	4948      	ldr	r1, [pc, #288]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006694:	6849      	ldr	r1, [r1, #4]
 8006696:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800669a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800669c:	4945      	ldr	r1, [pc, #276]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800669e:	6849      	ldr	r1, [r1, #4]
 80066a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80066a4:	2900      	cmp	r1, #0
 80066a6:	d024      	beq.n	80066f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066a8:	4942      	ldr	r1, [pc, #264]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80066aa:	6849      	ldr	r1, [r1, #4]
 80066ac:	0989      	lsrs	r1, r1, #6
 80066ae:	4608      	mov	r0, r1
 80066b0:	f04f 0100 	mov.w	r1, #0
 80066b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80066b8:	f04f 0500 	mov.w	r5, #0
 80066bc:	ea00 0204 	and.w	r2, r0, r4
 80066c0:	ea01 0305 	and.w	r3, r1, r5
 80066c4:	493d      	ldr	r1, [pc, #244]	; (80067bc <HAL_RCC_GetSysClockFreq+0x168>)
 80066c6:	fb01 f003 	mul.w	r0, r1, r3
 80066ca:	2100      	movs	r1, #0
 80066cc:	fb01 f102 	mul.w	r1, r1, r2
 80066d0:	1844      	adds	r4, r0, r1
 80066d2:	493a      	ldr	r1, [pc, #232]	; (80067bc <HAL_RCC_GetSysClockFreq+0x168>)
 80066d4:	fba2 0101 	umull	r0, r1, r2, r1
 80066d8:	1863      	adds	r3, r4, r1
 80066da:	4619      	mov	r1, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	461a      	mov	r2, r3
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	f7fa fad2 	bl	8000c8c <__aeabi_uldivmod>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4613      	mov	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e04a      	b.n	8006788 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066f2:	4b30      	ldr	r3, [pc, #192]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	099b      	lsrs	r3, r3, #6
 80066f8:	461a      	mov	r2, r3
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006702:	f04f 0100 	mov.w	r1, #0
 8006706:	ea02 0400 	and.w	r4, r2, r0
 800670a:	ea03 0501 	and.w	r5, r3, r1
 800670e:	4620      	mov	r0, r4
 8006710:	4629      	mov	r1, r5
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	014b      	lsls	r3, r1, #5
 800671c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006720:	0142      	lsls	r2, r0, #5
 8006722:	4610      	mov	r0, r2
 8006724:	4619      	mov	r1, r3
 8006726:	1b00      	subs	r0, r0, r4
 8006728:	eb61 0105 	sbc.w	r1, r1, r5
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	018b      	lsls	r3, r1, #6
 8006736:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800673a:	0182      	lsls	r2, r0, #6
 800673c:	1a12      	subs	r2, r2, r0
 800673e:	eb63 0301 	sbc.w	r3, r3, r1
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f04f 0100 	mov.w	r1, #0
 800674a:	00d9      	lsls	r1, r3, #3
 800674c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006750:	00d0      	lsls	r0, r2, #3
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	1912      	adds	r2, r2, r4
 8006758:	eb45 0303 	adc.w	r3, r5, r3
 800675c:	f04f 0000 	mov.w	r0, #0
 8006760:	f04f 0100 	mov.w	r1, #0
 8006764:	0299      	lsls	r1, r3, #10
 8006766:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800676a:	0290      	lsls	r0, r2, #10
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4610      	mov	r0, r2
 8006772:	4619      	mov	r1, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	461a      	mov	r2, r3
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	f7fa fa86 	bl	8000c8c <__aeabi_uldivmod>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4613      	mov	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	0c1b      	lsrs	r3, r3, #16
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	3301      	adds	r3, #1
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a0:	60bb      	str	r3, [r7, #8]
      break;
 80067a2:	e002      	b.n	80067aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x164>)
 80067a6:	60bb      	str	r3, [r7, #8]
      break;
 80067a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067aa:	68bb      	ldr	r3, [r7, #8]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bdb0      	pop	{r4, r5, r7, pc}
 80067b4:	40023800 	.word	0x40023800
 80067b8:	00f42400 	.word	0x00f42400
 80067bc:	017d7840 	.word	0x017d7840

080067c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067c4:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067c6:	681b      	ldr	r3, [r3, #0]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20000068 	.word	0x20000068

080067d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067dc:	f7ff fff0 	bl	80067c0 <HAL_RCC_GetHCLKFreq>
 80067e0:	4602      	mov	r2, r0
 80067e2:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	0a9b      	lsrs	r3, r3, #10
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	4903      	ldr	r1, [pc, #12]	; (80067fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80067ee:	5ccb      	ldrb	r3, [r1, r3]
 80067f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40023800 	.word	0x40023800
 80067fc:	080150d8 	.word	0x080150d8

08006800 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006824:	2b00      	cmp	r3, #0
 8006826:	d038      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006828:	4b68      	ldr	r3, [pc, #416]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800682e:	f7fc fd51 	bl	80032d4 <HAL_GetTick>
 8006832:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006834:	e008      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006836:	f7fc fd4d 	bl	80032d4 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e0bd      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006848:	4b61      	ldr	r3, [pc, #388]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1f0      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	019b      	lsls	r3, r3, #6
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	071b      	lsls	r3, r3, #28
 8006866:	495a      	ldr	r1, [pc, #360]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800686e:	4b57      	ldr	r3, [pc, #348]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006870:	2201      	movs	r2, #1
 8006872:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006874:	f7fc fd2e 	bl	80032d4 <HAL_GetTick>
 8006878:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800687a:	e008      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800687c:	f7fc fd2a 	bl	80032d4 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e09a      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800688e:	4b50      	ldr	r3, [pc, #320]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0f0      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 8083 	beq.w	80069ae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	4b48      	ldr	r3, [pc, #288]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	4a47      	ldr	r2, [pc, #284]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b6:	6413      	str	r3, [r2, #64]	; 0x40
 80068b8:	4b45      	ldr	r3, [pc, #276]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068c4:	4b43      	ldr	r3, [pc, #268]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a42      	ldr	r2, [pc, #264]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068d0:	f7fc fd00 	bl	80032d4 <HAL_GetTick>
 80068d4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068d6:	e008      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068d8:	f7fc fcfc 	bl	80032d4 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e06c      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068ea:	4b3a      	ldr	r3, [pc, #232]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f0      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068f6:	4b36      	ldr	r3, [pc, #216]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068fe:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d02f      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	429a      	cmp	r2, r3
 8006912:	d028      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006914:	4b2e      	ldr	r3, [pc, #184]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800691c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800691e:	4b2e      	ldr	r3, [pc, #184]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006920:	2201      	movs	r2, #1
 8006922:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006924:	4b2c      	ldr	r3, [pc, #176]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800692a:	4a29      	ldr	r2, [pc, #164]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006930:	4b27      	ldr	r3, [pc, #156]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b01      	cmp	r3, #1
 800693a:	d114      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800693c:	f7fc fcca 	bl	80032d4 <HAL_GetTick>
 8006940:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006942:	e00a      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006944:	f7fc fcc6 	bl	80032d4 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006952:	4293      	cmp	r3, r2
 8006954:	d901      	bls.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e034      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800695a:	4b1d      	ldr	r3, [pc, #116]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0ee      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800696e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006972:	d10d      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006974:	4b16      	ldr	r3, [pc, #88]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006988:	4911      	ldr	r1, [pc, #68]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800698a:	4313      	orrs	r3, r2
 800698c:	608b      	str	r3, [r1, #8]
 800698e:	e005      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006990:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	4a0e      	ldr	r2, [pc, #56]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006996:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800699a:	6093      	str	r3, [r2, #8]
 800699c:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a8:	4909      	ldr	r1, [pc, #36]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	7d1a      	ldrb	r2, [r3, #20]
 80069be:	4b07      	ldr	r3, [pc, #28]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80069c0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	42470068 	.word	0x42470068
 80069d0:	40023800 	.word	0x40023800
 80069d4:	40007000 	.word	0x40007000
 80069d8:	42470e40 	.word	0x42470e40
 80069dc:	424711e0 	.word	0x424711e0

080069e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e083      	b.n	8006afa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	7f5b      	ldrb	r3, [r3, #29]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d105      	bne.n	8006a08 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fc f95e 	bl	8002cc4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	22ca      	movs	r2, #202	; 0xca
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2253      	movs	r2, #83	; 0x53
 8006a1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f897 	bl	8006b52 <RTC_EnterInitMode>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d008      	beq.n	8006a3c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	22ff      	movs	r2, #255	; 0xff
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2204      	movs	r2, #4
 8006a36:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e05e      	b.n	8006afa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6899      	ldr	r1, [r3, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68d2      	ldr	r2, [r2, #12]
 8006a76:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6919      	ldr	r1, [r3, #16]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	041a      	lsls	r2, r3, #16
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a9a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10e      	bne.n	8006ac8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f829 	bl	8006b02 <HAL_RTC_WaitForSynchro>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	22ff      	movs	r2, #255	; 0xff
 8006abc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e018      	b.n	8006afa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699a      	ldr	r2, [r3, #24]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	22ff      	movs	r2, #255	; 0xff
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
  }
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b1c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b1e:	f7fc fbd9 	bl	80032d4 <HAL_GetTick>
 8006b22:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006b24:	e009      	b.n	8006b3a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006b26:	f7fc fbd5 	bl	80032d4 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b34:	d901      	bls.n	8006b3a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e007      	b.n	8006b4a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0ee      	beq.n	8006b26 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d119      	bne.n	8006ba0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f04f 32ff 	mov.w	r2, #4294967295
 8006b74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b76:	f7fc fbad 	bl	80032d4 <HAL_GetTick>
 8006b7a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006b7c:	e009      	b.n	8006b92 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006b7e:	f7fc fba9 	bl	80032d4 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b8c:	d901      	bls.n	8006b92 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e007      	b.n	8006ba2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d0ee      	beq.n	8006b7e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b082      	sub	sp, #8
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e022      	b.n	8006c02 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d105      	bne.n	8006bd4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7fc f88e 	bl	8002cf0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f815 	bl	8006c0c <HAL_SD_InitCard>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e00a      	b.n	8006c02 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c0c:	b5b0      	push	{r4, r5, r7, lr}
 8006c0e:	b08e      	sub	sp, #56	; 0x38
 8006c10:	af04      	add	r7, sp, #16
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006c28:	2376      	movs	r3, #118	; 0x76
 8006c2a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681d      	ldr	r5, [r3, #0]
 8006c30:	466c      	mov	r4, sp
 8006c32:	f107 0314 	add.w	r3, r7, #20
 8006c36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c3e:	f107 0308 	add.w	r3, r7, #8
 8006c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c44:	4628      	mov	r0, r5
 8006c46:	f001 f938 	bl	8007eba <SDIO_Init>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e04c      	b.n	8006cf6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006c5c:	4b28      	ldr	r3, [pc, #160]	; (8006d00 <HAL_SD_InitCard+0xf4>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f001 f970 	bl	8007f4c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006c6c:	4b24      	ldr	r3, [pc, #144]	; (8006d00 <HAL_SD_InitCard+0xf4>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 ff02 	bl	8007a7c <SD_PowerON>
 8006c78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e02e      	b.n	8006cf6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fe23 	bl	80078e4 <SD_InitCard>
 8006c9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e01b      	b.n	8006cf6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 f9d3 	bl	8008072 <SDMMC_CmdBlockLength>
 8006ccc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00f      	beq.n	8006cf4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a0a      	ldr	r2, [pc, #40]	; (8006d04 <HAL_SD_InitCard+0xf8>)
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3728      	adds	r7, #40	; 0x28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	422580a0 	.word	0x422580a0
 8006d04:	004005ff 	.word	0x004005ff

08006d08 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b092      	sub	sp, #72	; 0x48
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d16:	f7fc fadd 	bl	80032d4 <HAL_GetTick>
 8006d1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d107      	bne.n	8006d3a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e1bd      	b.n	80070b6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	f040 81b0 	bne.w	80070a8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	441a      	add	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d907      	bls.n	8006d6c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e1a4      	b.n	80070b6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2203      	movs	r2, #3
 8006d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d002      	beq.n	8006d8a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d86:	025b      	lsls	r3, r3, #9
 8006d88:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	025b      	lsls	r3, r3, #9
 8006d94:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006d96:	2390      	movs	r3, #144	; 0x90
 8006d98:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006da2:	2301      	movs	r3, #1
 8006da4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f107 0214 	add.w	r2, r7, #20
 8006dae:	4611      	mov	r1, r2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 f932 	bl	800801a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d90a      	bls.n	8006dd2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f001 f996 	bl	80080fa <SDMMC_CmdReadMultiBlock>
 8006dce:	6478      	str	r0, [r7, #68]	; 0x44
 8006dd0:	e009      	b.n	8006de6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 f969 	bl	80080b6 <SDMMC_CmdReadSingleBlock>
 8006de4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d012      	beq.n	8006e12 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a7a      	ldr	r2, [pc, #488]	; (8006fdc <HAL_SD_ReadBlocks+0x2d4>)
 8006df2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e151      	b.n	80070b6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006e16:	e061      	b.n	8006edc <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d03c      	beq.n	8006ea0 <HAL_SD_ReadBlocks+0x198>
 8006e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d039      	beq.n	8006ea0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e30:	e033      	b.n	8006e9a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 f86a 	bl	8007f10 <SDIO_ReadFIFO>
 8006e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e48:	3301      	adds	r3, #1
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	0a1b      	lsrs	r3, r3, #8
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5e:	3301      	adds	r3, #1
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e64:	3b01      	subs	r3, #1
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	0c1b      	lsrs	r3, r3, #16
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e74:	3301      	adds	r3, #1
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	0e1b      	lsrs	r3, r3, #24
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e90:	3b01      	subs	r3, #1
 8006e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e96:	3301      	adds	r3, #1
 8006e98:	643b      	str	r3, [r7, #64]	; 0x40
 8006e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e9c:	2b07      	cmp	r3, #7
 8006e9e:	d9c8      	bls.n	8006e32 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006ea0:	f7fc fa18 	bl	80032d4 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d902      	bls.n	8006eb6 <HAL_SD_ReadBlocks+0x1ae>
 8006eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d112      	bne.n	8006edc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a48      	ldr	r2, [pc, #288]	; (8006fdc <HAL_SD_ReadBlocks+0x2d4>)
 8006ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e0ec      	b.n	80070b6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee2:	f240 332a 	movw	r3, #810	; 0x32a
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d095      	beq.n	8006e18 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d022      	beq.n	8006f40 <HAL_SD_ReadBlocks+0x238>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d91f      	bls.n	8006f40 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d01b      	beq.n	8006f40 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 f95b 	bl	80081c8 <SDMMC_CmdStopTransfer>
 8006f12:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d012      	beq.n	8006f40 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a2f      	ldr	r2, [pc, #188]	; (8006fdc <HAL_SD_ReadBlocks+0x2d4>)
 8006f20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e0ba      	b.n	80070b6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d012      	beq.n	8006f74 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a22      	ldr	r2, [pc, #136]	; (8006fdc <HAL_SD_ReadBlocks+0x2d4>)
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	f043 0208 	orr.w	r2, r3, #8
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0a0      	b.n	80070b6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d012      	beq.n	8006fa8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a15      	ldr	r2, [pc, #84]	; (8006fdc <HAL_SD_ReadBlocks+0x2d4>)
 8006f88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	f043 0202 	orr.w	r2, r3, #2
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e086      	b.n	80070b6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d063      	beq.n	800707e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a08      	ldr	r2, [pc, #32]	; (8006fdc <HAL_SD_ReadBlocks+0x2d4>)
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	f043 0220 	orr.w	r2, r3, #32
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e06c      	b.n	80070b6 <HAL_SD_ReadBlocks+0x3ae>
 8006fdc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 ff93 	bl	8007f10 <SDIO_ReadFIFO>
 8006fea:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	0a1b      	lsrs	r3, r3, #8
 8007004:	b2da      	uxtb	r2, r3
 8007006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007008:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700c:	3301      	adds	r3, #1
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007012:	3b01      	subs	r3, #1
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	0c1b      	lsrs	r3, r3, #16
 800701a:	b2da      	uxtb	r2, r3
 800701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007022:	3301      	adds	r3, #1
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	3b01      	subs	r3, #1
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702e:	0e1b      	lsrs	r3, r3, #24
 8007030:	b2da      	uxtb	r2, r3
 8007032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007034:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007038:	3301      	adds	r3, #1
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800703c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703e:	3b01      	subs	r3, #1
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007042:	f7fc f947 	bl	80032d4 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800704e:	429a      	cmp	r2, r3
 8007050:	d902      	bls.n	8007058 <HAL_SD_ReadBlocks+0x350>
 8007052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007054:	2b00      	cmp	r3, #0
 8007056:	d112      	bne.n	800707e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a18      	ldr	r2, [pc, #96]	; (80070c0 <HAL_SD_ReadBlocks+0x3b8>)
 800705e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e01b      	b.n	80070b6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <HAL_SD_ReadBlocks+0x38a>
 800708c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1a6      	bne.n	8006fe0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f240 523a 	movw	r2, #1338	; 0x53a
 800709a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e006      	b.n	80070b6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
  }
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3748      	adds	r7, #72	; 0x48
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	004005ff 	.word	0x004005ff

080070c4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b092      	sub	sp, #72	; 0x48
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80070d2:	f7fc f8ff 	bl	80032d4 <HAL_GetTick>
 80070d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d107      	bne.n	80070f6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e166      	b.n	80073c4 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b01      	cmp	r3, #1
 8007100:	f040 8159 	bne.w	80073b6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800710a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	441a      	add	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007114:	429a      	cmp	r2, r3
 8007116:	d907      	bls.n	8007128 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e14d      	b.n	80073c4 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2203      	movs	r2, #3
 800712c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2200      	movs	r2, #0
 8007136:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713c:	2b01      	cmp	r3, #1
 800713e:	d002      	beq.n	8007146 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	025b      	lsls	r3, r3, #9
 8007144:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007146:	f04f 33ff 	mov.w	r3, #4294967295
 800714a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	025b      	lsls	r3, r3, #9
 8007150:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007152:	2390      	movs	r3, #144	; 0x90
 8007154:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007156:	2300      	movs	r3, #0
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800715a:	2300      	movs	r3, #0
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800715e:	2301      	movs	r3, #1
 8007160:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f107 0218 	add.w	r2, r7, #24
 800716a:	4611      	mov	r1, r2
 800716c:	4618      	mov	r0, r3
 800716e:	f000 ff54 	bl	800801a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d90a      	bls.n	800718e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007184:	4618      	mov	r0, r3
 8007186:	f000 fffc 	bl	8008182 <SDMMC_CmdWriteMultiBlock>
 800718a:	6478      	str	r0, [r7, #68]	; 0x44
 800718c:	e009      	b.n	80071a2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2210      	movs	r2, #16
 8007192:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800719a:	4618      	mov	r0, r3
 800719c:	f000 ffcf 	bl	800813e <SDMMC_CmdWriteSingleBlock>
 80071a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80071a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d012      	beq.n	80071ce <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a87      	ldr	r2, [pc, #540]	; (80073cc <HAL_SD_WriteBlocks+0x308>)
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b6:	431a      	orrs	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e0fa      	b.n	80073c4 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80071d2:	e065      	b.n	80072a0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d040      	beq.n	8007264 <HAL_SD_WriteBlocks+0x1a0>
 80071e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d03d      	beq.n	8007264 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80071e8:	2300      	movs	r3, #0
 80071ea:	643b      	str	r3, [r7, #64]	; 0x40
 80071ec:	e037      	b.n	800725e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80071ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80071f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f6:	3301      	adds	r3, #1
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80071fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fc:	3b01      	subs	r3, #1
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	021a      	lsls	r2, r3, #8
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800720c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720e:	3301      	adds	r3, #1
 8007210:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007214:	3b01      	subs	r3, #1
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	041a      	lsls	r2, r3, #16
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007226:	3301      	adds	r3, #1
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800722a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722c:	3b01      	subs	r3, #1
 800722e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	061a      	lsls	r2, r3, #24
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800723c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723e:	3301      	adds	r3, #1
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007244:	3b01      	subs	r3, #1
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f107 0214 	add.w	r2, r7, #20
 8007250:	4611      	mov	r1, r2
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fe69 	bl	8007f2a <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800725a:	3301      	adds	r3, #1
 800725c:	643b      	str	r3, [r7, #64]	; 0x40
 800725e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007260:	2b07      	cmp	r3, #7
 8007262:	d9c4      	bls.n	80071ee <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007264:	f7fc f836 	bl	80032d4 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007270:	429a      	cmp	r2, r3
 8007272:	d902      	bls.n	800727a <HAL_SD_WriteBlocks+0x1b6>
 8007274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007276:	2b00      	cmp	r3, #0
 8007278:	d112      	bne.n	80072a0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a53      	ldr	r2, [pc, #332]	; (80073cc <HAL_SD_WriteBlocks+0x308>)
 8007280:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007288:	431a      	orrs	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e091      	b.n	80073c4 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072a6:	f240 331a 	movw	r3, #794	; 0x31a
 80072aa:	4013      	ands	r3, r2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d091      	beq.n	80071d4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d022      	beq.n	8007304 <HAL_SD_WriteBlocks+0x240>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d91f      	bls.n	8007304 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d01b      	beq.n	8007304 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 ff79 	bl	80081c8 <SDMMC_CmdStopTransfer>
 80072d6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80072d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d012      	beq.n	8007304 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a3a      	ldr	r2, [pc, #232]	; (80073cc <HAL_SD_WriteBlocks+0x308>)
 80072e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ec:	431a      	orrs	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e05f      	b.n	80073c4 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d012      	beq.n	8007338 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2d      	ldr	r2, [pc, #180]	; (80073cc <HAL_SD_WriteBlocks+0x308>)
 8007318:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	f043 0208 	orr.w	r2, r3, #8
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e045      	b.n	80073c4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d012      	beq.n	800736c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a20      	ldr	r2, [pc, #128]	; (80073cc <HAL_SD_WriteBlocks+0x308>)
 800734c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	f043 0202 	orr.w	r2, r3, #2
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e02b      	b.n	80073c4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007372:	f003 0310 	and.w	r3, r3, #16
 8007376:	2b00      	cmp	r3, #0
 8007378:	d012      	beq.n	80073a0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a13      	ldr	r2, [pc, #76]	; (80073cc <HAL_SD_WriteBlocks+0x308>)
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	f043 0210 	orr.w	r2, r3, #16
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e011      	b.n	80073c4 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80073a8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	e006      	b.n	80073c4 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
  }
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3748      	adds	r7, #72	; 0x48
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	004005ff 	.word	0x004005ff

080073d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073de:	0f9b      	lsrs	r3, r3, #30
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ea:	0e9b      	lsrs	r3, r3, #26
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073fc:	0e1b      	lsrs	r3, r3, #24
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	b2da      	uxtb	r2, r3
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800740e:	0c1b      	lsrs	r3, r3, #16
 8007410:	b2da      	uxtb	r2, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	b2da      	uxtb	r2, r3
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007426:	b2da      	uxtb	r2, r3
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007430:	0d1b      	lsrs	r3, r3, #20
 8007432:	b29a      	uxth	r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800743c:	0c1b      	lsrs	r3, r3, #16
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f003 030f 	and.w	r3, r3, #15
 8007444:	b2da      	uxtb	r2, r3
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800744e:	0bdb      	lsrs	r3, r3, #15
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	b2da      	uxtb	r2, r3
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007460:	0b9b      	lsrs	r3, r3, #14
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	b2da      	uxtb	r2, r3
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007472:	0b5b      	lsrs	r3, r3, #13
 8007474:	b2db      	uxtb	r3, r3
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	b2da      	uxtb	r2, r3
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007484:	0b1b      	lsrs	r3, r3, #12
 8007486:	b2db      	uxtb	r3, r3
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	b2da      	uxtb	r2, r3
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2200      	movs	r2, #0
 8007496:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749c:	2b00      	cmp	r3, #0
 800749e:	d163      	bne.n	8007568 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074a4:	009a      	lsls	r2, r3, #2
 80074a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80074aa:	4013      	ands	r3, r2
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80074b0:	0f92      	lsrs	r2, r2, #30
 80074b2:	431a      	orrs	r2, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074bc:	0edb      	lsrs	r3, r3, #27
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ce:	0e1b      	lsrs	r3, r3, #24
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	f003 0307 	and.w	r3, r3, #7
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e0:	0d5b      	lsrs	r3, r3, #21
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074f2:	0c9b      	lsrs	r3, r3, #18
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007504:	0bdb      	lsrs	r3, r3, #15
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	b2da      	uxtb	r2, r3
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	7e1b      	ldrb	r3, [r3, #24]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	3302      	adds	r3, #2
 8007528:	2201      	movs	r2, #1
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007532:	fb02 f203 	mul.w	r2, r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	7a1b      	ldrb	r3, [r3, #8]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	2201      	movs	r2, #1
 8007546:	409a      	lsls	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007554:	0a52      	lsrs	r2, r2, #9
 8007556:	fb02 f203 	mul.w	r2, r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007564:	661a      	str	r2, [r3, #96]	; 0x60
 8007566:	e031      	b.n	80075cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756c:	2b01      	cmp	r3, #1
 800756e:	d11d      	bne.n	80075ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007574:	041b      	lsls	r3, r3, #16
 8007576:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800757e:	0c1b      	lsrs	r3, r3, #16
 8007580:	431a      	orrs	r2, r3
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	3301      	adds	r3, #1
 800758c:	029a      	lsls	r2, r3, #10
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	661a      	str	r2, [r3, #96]	; 0x60
 80075aa:	e00f      	b.n	80075cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a58      	ldr	r2, [pc, #352]	; (8007714 <HAL_SD_GetCardCSD+0x344>)
 80075b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e09d      	b.n	8007708 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d0:	0b9b      	lsrs	r3, r3, #14
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e2:	09db      	lsrs	r3, r3, #7
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007604:	0fdb      	lsrs	r3, r3, #31
 8007606:	b2da      	uxtb	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007610:	0f5b      	lsrs	r3, r3, #29
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f003 0303 	and.w	r3, r3, #3
 8007618:	b2da      	uxtb	r2, r3
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	0e9b      	lsrs	r3, r3, #26
 8007624:	b2db      	uxtb	r3, r3
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	b2da      	uxtb	r2, r3
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	0d9b      	lsrs	r3, r3, #22
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	b2da      	uxtb	r2, r3
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007646:	0d5b      	lsrs	r3, r3, #21
 8007648:	b2db      	uxtb	r3, r3
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	b2da      	uxtb	r2, r3
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007662:	0c1b      	lsrs	r3, r3, #16
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	b2da      	uxtb	r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007676:	0bdb      	lsrs	r3, r3, #15
 8007678:	b2db      	uxtb	r3, r3
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	b2da      	uxtb	r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800768a:	0b9b      	lsrs	r3, r3, #14
 800768c:	b2db      	uxtb	r3, r3
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	b2da      	uxtb	r2, r3
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769e:	0b5b      	lsrs	r3, r3, #13
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b2:	0b1b      	lsrs	r3, r3, #12
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c6:	0a9b      	lsrs	r3, r3, #10
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ee:	085b      	lsrs	r3, r3, #1
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	004005ff 	.word	0x004005ff

08007718 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007770:	b5b0      	push	{r4, r5, r7, lr}
 8007772:	b08e      	sub	sp, #56	; 0x38
 8007774:	af04      	add	r7, sp, #16
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2203      	movs	r2, #3
 8007784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778c:	2b03      	cmp	r3, #3
 800778e:	d02e      	beq.n	80077ee <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007796:	d106      	bne.n	80077a6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	639a      	str	r2, [r3, #56]	; 0x38
 80077a4:	e029      	b.n	80077fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ac:	d10a      	bne.n	80077c4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa1a 	bl	8007be8 <SD_WideBus_Enable>
 80077b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	639a      	str	r2, [r3, #56]	; 0x38
 80077c2:	e01a      	b.n	80077fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa57 	bl	8007c7e <SD_WideBus_Disable>
 80077d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38
 80077de:	e00c      	b.n	80077fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	639a      	str	r2, [r3, #56]	; 0x38
 80077ec:	e005      	b.n	80077fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a26      	ldr	r2, [pc, #152]	; (80078a0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007808:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007818:	e01f      	b.n	800785a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681d      	ldr	r5, [r3, #0]
 8007840:	466c      	mov	r4, sp
 8007842:	f107 0314 	add.w	r3, r7, #20
 8007846:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800784a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800784e:	f107 0308 	add.w	r3, r7, #8
 8007852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007854:	4628      	mov	r0, r5
 8007856:	f000 fb30 	bl	8007eba <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fc05 	bl	8008072 <SDMMC_CmdBlockLength>
 8007868:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00c      	beq.n	800788a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a0a      	ldr	r2, [pc, #40]	; (80078a0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007896:	4618      	mov	r0, r3
 8007898:	3728      	adds	r7, #40	; 0x28
 800789a:	46bd      	mov	sp, r7
 800789c:	bdb0      	pop	{r4, r5, r7, pc}
 800789e:	bf00      	nop
 80078a0:	004005ff 	.word	0x004005ff

080078a4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80078b0:	f107 030c 	add.w	r3, r7, #12
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f96e 	bl	8007b98 <SD_SendStatus>
 80078bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	0a5b      	lsrs	r3, r3, #9
 80078d4:	f003 030f 	and.w	r3, r3, #15
 80078d8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80078da:	693b      	ldr	r3, [r7, #16]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80078e4:	b5b0      	push	{r4, r5, r7, lr}
 80078e6:	b094      	sub	sp, #80	; 0x50
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80078ec:	2301      	movs	r3, #1
 80078ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fb38 	bl	8007f6a <SDIO_GetPowerState>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007900:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007904:	e0b6      	b.n	8007a74 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790a:	2b03      	cmp	r3, #3
 800790c:	d02f      	beq.n	800796e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fd62 	bl	80083dc <SDMMC_CmdSendCID>
 8007918:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800791a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <SD_InitCard+0x40>
    {
      return errorstate;
 8007920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007922:	e0a7      	b.n	8007a74 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fb62 	bl	8007ff4 <SDIO_GetResponse>
 8007930:	4602      	mov	r2, r0
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2104      	movs	r1, #4
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fb59 	bl	8007ff4 <SDIO_GetResponse>
 8007942:	4602      	mov	r2, r0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2108      	movs	r1, #8
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fb50 	bl	8007ff4 <SDIO_GetResponse>
 8007954:	4602      	mov	r2, r0
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	210c      	movs	r1, #12
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fb47 	bl	8007ff4 <SDIO_GetResponse>
 8007966:	4602      	mov	r2, r0
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007972:	2b03      	cmp	r3, #3
 8007974:	d00d      	beq.n	8007992 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f107 020e 	add.w	r2, r7, #14
 800797e:	4611      	mov	r1, r2
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fd68 	bl	8008456 <SDMMC_CmdSetRelAdd>
 8007986:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <SD_InitCard+0xae>
    {
      return errorstate;
 800798e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007990:	e070      	b.n	8007a74 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	2b03      	cmp	r3, #3
 8007998:	d036      	beq.n	8007a08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800799a:	89fb      	ldrh	r3, [r7, #14]
 800799c:	461a      	mov	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079aa:	041b      	lsls	r3, r3, #16
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f000 fd32 	bl	8008418 <SDMMC_CmdSendCSD>
 80079b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80079b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80079bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079be:	e059      	b.n	8007a74 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fb14 	bl	8007ff4 <SDIO_GetResponse>
 80079cc:	4602      	mov	r2, r0
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2104      	movs	r1, #4
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fb0b 	bl	8007ff4 <SDIO_GetResponse>
 80079de:	4602      	mov	r2, r0
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2108      	movs	r1, #8
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fb02 	bl	8007ff4 <SDIO_GetResponse>
 80079f0:	4602      	mov	r2, r0
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	210c      	movs	r1, #12
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 faf9 	bl	8007ff4 <SDIO_GetResponse>
 8007a02:	4602      	mov	r2, r0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2104      	movs	r1, #4
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 faf0 	bl	8007ff4 <SDIO_GetResponse>
 8007a14:	4603      	mov	r3, r0
 8007a16:	0d1a      	lsrs	r2, r3, #20
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007a1c:	f107 0310 	add.w	r3, r7, #16
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff fcd4 	bl	80073d0 <HAL_SD_GetCardCSD>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a32:	e01f      	b.n	8007a74 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6819      	ldr	r1, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a3c:	041b      	lsls	r3, r3, #16
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	4608      	mov	r0, r1
 8007a46:	f000 fbe1 	bl	800820c <SDMMC_CmdSelDesel>
 8007a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <SD_InitCard+0x172>
  {
    return errorstate;
 8007a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a54:	e00e      	b.n	8007a74 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681d      	ldr	r5, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	466c      	mov	r4, sp
 8007a5e:	f103 0210 	add.w	r2, r3, #16
 8007a62:	ca07      	ldmia	r2, {r0, r1, r2}
 8007a64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a68:	3304      	adds	r3, #4
 8007a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 fa24 	bl	8007eba <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3740      	adds	r7, #64	; 0x40
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bdb0      	pop	{r4, r5, r7, pc}

08007a7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 fbdc 	bl	8008252 <SDMMC_CmdGoIdleState>
 8007a9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	e072      	b.n	8007b8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fbef 	bl	800828e <SDMMC_CmdOperCond>
 8007ab0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00d      	beq.n	8007ad4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fbc5 	bl	8008252 <SDMMC_CmdGoIdleState>
 8007ac8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d004      	beq.n	8007ada <SD_PowerON+0x5e>
    {
      return errorstate;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	e05b      	b.n	8007b8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d137      	bne.n	8007b52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fbef 	bl	80082cc <SDMMC_CmdAppCommand>
 8007aee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d02d      	beq.n	8007b52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007afa:	e047      	b.n	8007b8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2100      	movs	r1, #0
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fbe2 	bl	80082cc <SDMMC_CmdAppCommand>
 8007b08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <SD_PowerON+0x98>
    {
      return errorstate;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	e03b      	b.n	8007b8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	491e      	ldr	r1, [pc, #120]	; (8007b94 <SD_PowerON+0x118>)
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fbf8 	bl	8008310 <SDMMC_CmdAppOperCommand>
 8007b20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b2c:	e02e      	b.n	8007b8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2100      	movs	r1, #0
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fa5d 	bl	8007ff4 <SDIO_GetResponse>
 8007b3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	0fdb      	lsrs	r3, r3, #31
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <SD_PowerON+0xcc>
 8007b44:	2301      	movs	r3, #1
 8007b46:	e000      	b.n	8007b4a <SD_PowerON+0xce>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	613b      	str	r3, [r7, #16]

    count++;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d802      	bhi.n	8007b62 <SD_PowerON+0xe6>
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0cc      	beq.n	8007afc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d902      	bls.n	8007b72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b70:	e00c      	b.n	8007b8c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	645a      	str	r2, [r3, #68]	; 0x44
 8007b82:	e002      	b.n	8007b8a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	c1100000 	.word	0xc1100000

08007b98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007ba8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bac:	e018      	b.n	8007be0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f000 fc6c 	bl	8008498 <SDMMC_CmdSendStatus>
 8007bc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <SD_SendStatus+0x34>
  {
    return errorstate;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	e009      	b.n	8007be0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fa0e 	bl	8007ff4 <SDIO_GetResponse>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f9f8 	bl	8007ff4 <SDIO_GetResponse>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c0e:	d102      	bne.n	8007c16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c14:	e02f      	b.n	8007c76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007c16:	f107 030c 	add.w	r3, r7, #12
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f879 	bl	8007d14 <SD_FindSCR>
 8007c22:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	e023      	b.n	8007c76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01c      	beq.n	8007c72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c40:	041b      	lsls	r3, r3, #16
 8007c42:	4619      	mov	r1, r3
 8007c44:	4610      	mov	r0, r2
 8007c46:	f000 fb41 	bl	80082cc <SDMMC_CmdAppCommand>
 8007c4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	e00f      	b.n	8007c76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2102      	movs	r1, #2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fb7a 	bl	8008356 <SDMMC_CmdBusWidth>
 8007c62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	e003      	b.n	8007c76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e001      	b.n	8007c76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b086      	sub	sp, #24
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 f9ad 	bl	8007ff4 <SDIO_GetResponse>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ca4:	d102      	bne.n	8007cac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ca6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007caa:	e02f      	b.n	8007d0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007cac:	f107 030c 	add.w	r3, r7, #12
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f82e 	bl	8007d14 <SD_FindSCR>
 8007cb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	e023      	b.n	8007d0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d01c      	beq.n	8007d08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd6:	041b      	lsls	r3, r3, #16
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f000 faf6 	bl	80082cc <SDMMC_CmdAppCommand>
 8007ce0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	e00f      	b.n	8007d0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 fb2f 	bl	8008356 <SDMMC_CmdBusWidth>
 8007cf8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	e003      	b.n	8007d0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	e001      	b.n	8007d0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007d14:	b590      	push	{r4, r7, lr}
 8007d16:	b08f      	sub	sp, #60	; 0x3c
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d1e:	f7fb fad9 	bl	80032d4 <HAL_GetTick>
 8007d22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60bb      	str	r3, [r7, #8]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2108      	movs	r1, #8
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f999 	bl	8008072 <SDMMC_CmdBlockLength>
 8007d40:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	e0b2      	b.n	8007eb2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d54:	041b      	lsls	r3, r3, #16
 8007d56:	4619      	mov	r1, r3
 8007d58:	4610      	mov	r0, r2
 8007d5a:	f000 fab7 	bl	80082cc <SDMMC_CmdAppCommand>
 8007d5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	e0a3      	b.n	8007eb2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007d70:	2308      	movs	r3, #8
 8007d72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007d74:	2330      	movs	r3, #48	; 0x30
 8007d76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007d78:	2302      	movs	r3, #2
 8007d7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007d80:	2301      	movs	r3, #1
 8007d82:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f107 0210 	add.w	r2, r7, #16
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 f943 	bl	800801a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fafe 	bl	800839a <SDMMC_CmdSendSCR>
 8007d9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d02a      	beq.n	8007dfc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da8:	e083      	b.n	8007eb2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00f      	beq.n	8007dd8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6819      	ldr	r1, [r3, #0]
 8007dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	f107 0208 	add.w	r2, r7, #8
 8007dc4:	18d4      	adds	r4, r2, r3
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	f000 f8a2 	bl	8007f10 <SDIO_ReadFIFO>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	6023      	str	r3, [r4, #0]
      index++;
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd6:	e006      	b.n	8007de6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d012      	beq.n	8007e0c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007de6:	f7fb fa75 	bl	80032d4 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df4:	d102      	bne.n	8007dfc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007df6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dfa:	e05a      	b.n	8007eb2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e02:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0cf      	beq.n	8007daa <SD_FindSCR+0x96>
 8007e0a:	e000      	b.n	8007e0e <SD_FindSCR+0xfa>
      break;
 8007e0c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d005      	beq.n	8007e28 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2208      	movs	r2, #8
 8007e22:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007e24:	2308      	movs	r3, #8
 8007e26:	e044      	b.n	8007eb2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d005      	beq.n	8007e42 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e037      	b.n	8007eb2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2220      	movs	r2, #32
 8007e56:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007e58:	2320      	movs	r3, #32
 8007e5a:	e02a      	b.n	8007eb2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f240 523a 	movw	r2, #1338	; 0x53a
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	061a      	lsls	r2, r3, #24
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e72:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	0a1b      	lsrs	r3, r3, #8
 8007e78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e7c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	0e1b      	lsrs	r3, r3, #24
 8007e82:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	601a      	str	r2, [r3, #0]
    scr++;
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	061a      	lsls	r2, r3, #24
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e9a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	0a1b      	lsrs	r3, r3, #8
 8007ea0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ea4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	0e1b      	lsrs	r3, r3, #24
 8007eaa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eae:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	373c      	adds	r7, #60	; 0x3c
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd90      	pop	{r4, r7, pc}

08007eba <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007eba:	b084      	sub	sp, #16
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	f107 001c 	add.w	r0, r7, #28
 8007ec8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007ed0:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007ed4:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007ed8:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007edc:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007ee0:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007ee4:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007ef4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	b004      	add	sp, #16
 8007f0e:	4770      	bx	lr

08007f10 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2203      	movs	r2, #3
 8007f58:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007f5a:	2002      	movs	r0, #2
 8007f5c:	f7fb f9c6 	bl	80032ec <HAL_Delay>
  
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0303 	and.w	r3, r3, #3
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b085      	sub	sp, #20
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007fa4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007faa:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007fb0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007fc0:	f023 030f 	bic.w	r3, r3, #15
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	b2db      	uxtb	r3, r3
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3314      	adds	r3, #20
 8008002:	461a      	mov	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	4413      	add	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
}  
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008040:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008046:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800804c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	4313      	orrs	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	431a      	orrs	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008064:	2300      	movs	r3, #0

}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b088      	sub	sp, #32
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008080:	2310      	movs	r3, #16
 8008082:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008084:	2340      	movs	r3, #64	; 0x40
 8008086:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800808c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008090:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff ff74 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800809e:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a2:	2110      	movs	r1, #16
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fa45 	bl	8008534 <SDMMC_GetCmdResp1>
 80080aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ac:	69fb      	ldr	r3, [r7, #28]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3720      	adds	r7, #32
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b088      	sub	sp, #32
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80080c4:	2311      	movs	r3, #17
 80080c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080c8:	2340      	movs	r3, #64	; 0x40
 80080ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080d6:	f107 0308 	add.w	r3, r7, #8
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff ff52 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80080e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e6:	2111      	movs	r1, #17
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fa23 	bl	8008534 <SDMMC_GetCmdResp1>
 80080ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080f0:	69fb      	ldr	r3, [r7, #28]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b088      	sub	sp, #32
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008108:	2312      	movs	r3, #18
 800810a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800810c:	2340      	movs	r3, #64	; 0x40
 800810e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008118:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800811a:	f107 0308 	add.w	r3, r7, #8
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7ff ff30 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008126:	f241 3288 	movw	r2, #5000	; 0x1388
 800812a:	2112      	movs	r1, #18
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fa01 	bl	8008534 <SDMMC_GetCmdResp1>
 8008132:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008134:	69fb      	ldr	r3, [r7, #28]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3720      	adds	r7, #32
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b088      	sub	sp, #32
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800814c:	2318      	movs	r3, #24
 800814e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008150:	2340      	movs	r3, #64	; 0x40
 8008152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008154:	2300      	movs	r3, #0
 8008156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800815c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800815e:	f107 0308 	add.w	r3, r7, #8
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff ff0e 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800816a:	f241 3288 	movw	r2, #5000	; 0x1388
 800816e:	2118      	movs	r1, #24
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f9df 	bl	8008534 <SDMMC_GetCmdResp1>
 8008176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008178:	69fb      	ldr	r3, [r7, #28]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b088      	sub	sp, #32
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008190:	2319      	movs	r3, #25
 8008192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008194:	2340      	movs	r3, #64	; 0x40
 8008196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008198:	2300      	movs	r3, #0
 800819a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800819c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081a2:	f107 0308 	add.w	r3, r7, #8
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff feec 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80081ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80081b2:	2119      	movs	r1, #25
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f9bd 	bl	8008534 <SDMMC_GetCmdResp1>
 80081ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081bc:	69fb      	ldr	r3, [r7, #28]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3720      	adds	r7, #32
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80081d4:	230c      	movs	r3, #12
 80081d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081d8:	2340      	movs	r3, #64	; 0x40
 80081da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081dc:	2300      	movs	r3, #0
 80081de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081e6:	f107 0308 	add.w	r3, r7, #8
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff feca 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80081f2:	4a05      	ldr	r2, [pc, #20]	; (8008208 <SDMMC_CmdStopTransfer+0x40>)
 80081f4:	210c      	movs	r1, #12
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f99c 	bl	8008534 <SDMMC_GetCmdResp1>
 80081fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081fe:	69fb      	ldr	r3, [r7, #28]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3720      	adds	r7, #32
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	05f5e100 	.word	0x05f5e100

0800820c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b08a      	sub	sp, #40	; 0x28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800821c:	2307      	movs	r3, #7
 800821e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008220:	2340      	movs	r3, #64	; 0x40
 8008222:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800822c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800822e:	f107 0310 	add.w	r3, r7, #16
 8008232:	4619      	mov	r1, r3
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7ff fea6 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800823a:	f241 3288 	movw	r2, #5000	; 0x1388
 800823e:	2107      	movs	r1, #7
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 f977 	bl	8008534 <SDMMC_GetCmdResp1>
 8008246:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800824a:	4618      	mov	r0, r3
 800824c:	3728      	adds	r7, #40	; 0x28
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b088      	sub	sp, #32
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800825e:	2300      	movs	r3, #0
 8008260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008262:	2300      	movs	r3, #0
 8008264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800826a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800826e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008270:	f107 0308 	add.w	r3, r7, #8
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff fe85 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f92d 	bl	80084dc <SDMMC_GetCmdError>
 8008282:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008284:	69fb      	ldr	r3, [r7, #28]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3720      	adds	r7, #32
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b088      	sub	sp, #32
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008296:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800829a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800829c:	2308      	movs	r3, #8
 800829e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082a0:	2340      	movs	r3, #64	; 0x40
 80082a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082a4:	2300      	movs	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082ae:	f107 0308 	add.w	r3, r7, #8
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff fe66 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fb24 	bl	8008908 <SDMMC_GetCmdResp7>
 80082c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082c2:	69fb      	ldr	r3, [r7, #28]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3720      	adds	r7, #32
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80082da:	2337      	movs	r3, #55	; 0x37
 80082dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082de:	2340      	movs	r3, #64	; 0x40
 80082e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082e2:	2300      	movs	r3, #0
 80082e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082ec:	f107 0308 	add.w	r3, r7, #8
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fe47 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80082f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082fc:	2137      	movs	r1, #55	; 0x37
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f918 	bl	8008534 <SDMMC_GetCmdResp1>
 8008304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008306:	69fb      	ldr	r3, [r7, #28]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3720      	adds	r7, #32
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008326:	2329      	movs	r3, #41	; 0x29
 8008328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800832a:	2340      	movs	r3, #64	; 0x40
 800832c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800832e:	2300      	movs	r3, #0
 8008330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008336:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008338:	f107 0308 	add.w	r3, r7, #8
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff fe21 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fa2b 	bl	80087a0 <SDMMC_GetCmdResp3>
 800834a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800834c:	69fb      	ldr	r3, [r7, #28]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3720      	adds	r7, #32
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b088      	sub	sp, #32
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008364:	2306      	movs	r3, #6
 8008366:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800836c:	2300      	movs	r3, #0
 800836e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008374:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008376:	f107 0308 	add.w	r3, r7, #8
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff fe02 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008382:	f241 3288 	movw	r2, #5000	; 0x1388
 8008386:	2106      	movs	r1, #6
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f8d3 	bl	8008534 <SDMMC_GetCmdResp1>
 800838e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008390:	69fb      	ldr	r3, [r7, #28]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3720      	adds	r7, #32
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b088      	sub	sp, #32
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80083a6:	2333      	movs	r3, #51	; 0x33
 80083a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083aa:	2340      	movs	r3, #64	; 0x40
 80083ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083b8:	f107 0308 	add.w	r3, r7, #8
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7ff fde1 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80083c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c8:	2133      	movs	r1, #51	; 0x33
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f8b2 	bl	8008534 <SDMMC_GetCmdResp1>
 80083d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083d2:	69fb      	ldr	r3, [r7, #28]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3720      	adds	r7, #32
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80083e8:	2302      	movs	r3, #2
 80083ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80083ec:	23c0      	movs	r3, #192	; 0xc0
 80083ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083f0:	2300      	movs	r3, #0
 80083f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083fa:	f107 0308 	add.w	r3, r7, #8
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7ff fdc0 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f982 	bl	8008710 <SDMMC_GetCmdResp2>
 800840c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800840e:	69fb      	ldr	r3, [r7, #28]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3720      	adds	r7, #32
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008426:	2309      	movs	r3, #9
 8008428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800842a:	23c0      	movs	r3, #192	; 0xc0
 800842c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800842e:	2300      	movs	r3, #0
 8008430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008436:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008438:	f107 0308 	add.w	r3, r7, #8
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff fda1 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f963 	bl	8008710 <SDMMC_GetCmdResp2>
 800844a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800844c:	69fb      	ldr	r3, [r7, #28]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3720      	adds	r7, #32
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b088      	sub	sp, #32
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008464:	2303      	movs	r3, #3
 8008466:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008468:	2340      	movs	r3, #64	; 0x40
 800846a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800846c:	2300      	movs	r3, #0
 800846e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008474:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008476:	f107 0308 	add.w	r3, r7, #8
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff fd82 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	2103      	movs	r1, #3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f9c8 	bl	800881c <SDMMC_GetCmdResp6>
 800848c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800848e:	69fb      	ldr	r3, [r7, #28]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80084a6:	230d      	movs	r3, #13
 80084a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084aa:	2340      	movs	r3, #64	; 0x40
 80084ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084b8:	f107 0308 	add.w	r3, r7, #8
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff fd61 	bl	8007f86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80084c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084c8:	210d      	movs	r1, #13
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f832 	bl	8008534 <SDMMC_GetCmdResp1>
 80084d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084d2:	69fb      	ldr	r3, [r7, #28]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3720      	adds	r7, #32
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80084e4:	4b11      	ldr	r3, [pc, #68]	; (800852c <SDMMC_GetCmdError+0x50>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a11      	ldr	r2, [pc, #68]	; (8008530 <SDMMC_GetCmdError+0x54>)
 80084ea:	fba2 2303 	umull	r2, r3, r2, r3
 80084ee:	0a5b      	lsrs	r3, r3, #9
 80084f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f4:	fb02 f303 	mul.w	r3, r2, r3
 80084f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	1e5a      	subs	r2, r3, #1
 80084fe:	60fa      	str	r2, [r7, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d102      	bne.n	800850a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008504:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008508:	e009      	b.n	800851e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0f1      	beq.n	80084fa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	22c5      	movs	r2, #197	; 0xc5
 800851a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	20000068 	.word	0x20000068
 8008530:	10624dd3 	.word	0x10624dd3

08008534 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	460b      	mov	r3, r1
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008542:	4b70      	ldr	r3, [pc, #448]	; (8008704 <SDMMC_GetCmdResp1+0x1d0>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a70      	ldr	r2, [pc, #448]	; (8008708 <SDMMC_GetCmdResp1+0x1d4>)
 8008548:	fba2 2303 	umull	r2, r3, r2, r3
 800854c:	0a5a      	lsrs	r2, r3, #9
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	fb02 f303 	mul.w	r3, r2, r3
 8008554:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	1e5a      	subs	r2, r3, #1
 800855a:	61fa      	str	r2, [r7, #28]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d102      	bne.n	8008566 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008560:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008564:	e0c9      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0ef      	beq.n	8008556 <SDMMC_GetCmdResp1+0x22>
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1ea      	bne.n	8008556 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d004      	beq.n	8008596 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2204      	movs	r2, #4
 8008590:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008592:	2304      	movs	r3, #4
 8008594:	e0b1      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d004      	beq.n	80085ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e0a6      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	22c5      	movs	r2, #197	; 0xc5
 80085b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f7ff fd11 	bl	8007fda <SDIO_GetCommandResponse>
 80085b8:	4603      	mov	r3, r0
 80085ba:	461a      	mov	r2, r3
 80085bc:	7afb      	ldrb	r3, [r7, #11]
 80085be:	4293      	cmp	r3, r2
 80085c0:	d001      	beq.n	80085c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e099      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80085c6:	2100      	movs	r1, #0
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff fd13 	bl	8007ff4 <SDIO_GetResponse>
 80085ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	4b4e      	ldr	r3, [pc, #312]	; (800870c <SDMMC_GetCmdResp1+0x1d8>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80085da:	2300      	movs	r3, #0
 80085dc:	e08d      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	da02      	bge.n	80085ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80085e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085e8:	e087      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80085f4:	2340      	movs	r3, #64	; 0x40
 80085f6:	e080      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008602:	2380      	movs	r3, #128	; 0x80
 8008604:	e079      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008614:	e071      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008624:	e069      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008634:	e061      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008640:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008644:	e059      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008654:	e051      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008664:	e049      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008670:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008674:	e041      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008684:	e039      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008694:	e031      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80086a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80086a4:	e029      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80086b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80086b4:	e021      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80086c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80086c4:	e019      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80086d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086d4:	e011      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80086e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80086e4:	e009      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80086f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80086f4:	e001      	b.n	80086fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80086f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3720      	adds	r7, #32
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20000068 	.word	0x20000068
 8008708:	10624dd3 	.word	0x10624dd3
 800870c:	fdffe008 	.word	0xfdffe008

08008710 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008718:	4b1f      	ldr	r3, [pc, #124]	; (8008798 <SDMMC_GetCmdResp2+0x88>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a1f      	ldr	r2, [pc, #124]	; (800879c <SDMMC_GetCmdResp2+0x8c>)
 800871e:	fba2 2303 	umull	r2, r3, r2, r3
 8008722:	0a5b      	lsrs	r3, r3, #9
 8008724:	f241 3288 	movw	r2, #5000	; 0x1388
 8008728:	fb02 f303 	mul.w	r3, r2, r3
 800872c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1e5a      	subs	r2, r3, #1
 8008732:	60fa      	str	r2, [r7, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d102      	bne.n	800873e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800873c:	e026      	b.n	800878c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008742:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0ef      	beq.n	800872e <SDMMC_GetCmdResp2+0x1e>
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1ea      	bne.n	800872e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875c:	f003 0304 	and.w	r3, r3, #4
 8008760:	2b00      	cmp	r3, #0
 8008762:	d004      	beq.n	800876e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2204      	movs	r2, #4
 8008768:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800876a:	2304      	movs	r3, #4
 800876c:	e00e      	b.n	800878c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008780:	2301      	movs	r3, #1
 8008782:	e003      	b.n	800878c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	22c5      	movs	r2, #197	; 0xc5
 8008788:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	20000068 	.word	0x20000068
 800879c:	10624dd3 	.word	0x10624dd3

080087a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087a8:	4b1a      	ldr	r3, [pc, #104]	; (8008814 <SDMMC_GetCmdResp3+0x74>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a1a      	ldr	r2, [pc, #104]	; (8008818 <SDMMC_GetCmdResp3+0x78>)
 80087ae:	fba2 2303 	umull	r2, r3, r2, r3
 80087b2:	0a5b      	lsrs	r3, r3, #9
 80087b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b8:	fb02 f303 	mul.w	r3, r2, r3
 80087bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	1e5a      	subs	r2, r3, #1
 80087c2:	60fa      	str	r2, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d102      	bne.n	80087ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087cc:	e01b      	b.n	8008806 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0ef      	beq.n	80087be <SDMMC_GetCmdResp3+0x1e>
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1ea      	bne.n	80087be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d004      	beq.n	80087fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2204      	movs	r2, #4
 80087f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087fa:	2304      	movs	r3, #4
 80087fc:	e003      	b.n	8008806 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	22c5      	movs	r2, #197	; 0xc5
 8008802:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20000068 	.word	0x20000068
 8008818:	10624dd3 	.word	0x10624dd3

0800881c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	460b      	mov	r3, r1
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800882a:	4b35      	ldr	r3, [pc, #212]	; (8008900 <SDMMC_GetCmdResp6+0xe4>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a35      	ldr	r2, [pc, #212]	; (8008904 <SDMMC_GetCmdResp6+0xe8>)
 8008830:	fba2 2303 	umull	r2, r3, r2, r3
 8008834:	0a5b      	lsrs	r3, r3, #9
 8008836:	f241 3288 	movw	r2, #5000	; 0x1388
 800883a:	fb02 f303 	mul.w	r3, r2, r3
 800883e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	1e5a      	subs	r2, r3, #1
 8008844:	61fa      	str	r2, [r7, #28]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d102      	bne.n	8008850 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800884a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800884e:	e052      	b.n	80088f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008854:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0ef      	beq.n	8008840 <SDMMC_GetCmdResp6+0x24>
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1ea      	bne.n	8008840 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b00      	cmp	r3, #0
 8008874:	d004      	beq.n	8008880 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2204      	movs	r2, #4
 800887a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800887c:	2304      	movs	r3, #4
 800887e:	e03a      	b.n	80088f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d004      	beq.n	8008896 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008892:	2301      	movs	r3, #1
 8008894:	e02f      	b.n	80088f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f7ff fb9f 	bl	8007fda <SDIO_GetCommandResponse>
 800889c:	4603      	mov	r3, r0
 800889e:	461a      	mov	r2, r3
 80088a0:	7afb      	ldrb	r3, [r7, #11]
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d001      	beq.n	80088aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e025      	b.n	80088f6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	22c5      	movs	r2, #197	; 0xc5
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80088b0:	2100      	movs	r1, #0
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff fb9e 	bl	8007ff4 <SDIO_GetResponse>
 80088b8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d106      	bne.n	80088d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	0c1b      	lsrs	r3, r3, #16
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80088ce:	2300      	movs	r3, #0
 80088d0:	e011      	b.n	80088f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80088dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088e0:	e009      	b.n	80088f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80088ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088f0:	e001      	b.n	80088f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80088f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3720      	adds	r7, #32
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000068 	.word	0x20000068
 8008904:	10624dd3 	.word	0x10624dd3

08008908 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008910:	4b22      	ldr	r3, [pc, #136]	; (800899c <SDMMC_GetCmdResp7+0x94>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a22      	ldr	r2, [pc, #136]	; (80089a0 <SDMMC_GetCmdResp7+0x98>)
 8008916:	fba2 2303 	umull	r2, r3, r2, r3
 800891a:	0a5b      	lsrs	r3, r3, #9
 800891c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008920:	fb02 f303 	mul.w	r3, r2, r3
 8008924:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	1e5a      	subs	r2, r3, #1
 800892a:	60fa      	str	r2, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d102      	bne.n	8008936 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008934:	e02c      	b.n	8008990 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0ef      	beq.n	8008926 <SDMMC_GetCmdResp7+0x1e>
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1ea      	bne.n	8008926 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d004      	beq.n	8008966 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2204      	movs	r2, #4
 8008960:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008962:	2304      	movs	r3, #4
 8008964:	e014      	b.n	8008990 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d004      	beq.n	800897c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008978:	2301      	movs	r3, #1
 800897a:	e009      	b.n	8008990 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2240      	movs	r2, #64	; 0x40
 800898c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800898e:	2300      	movs	r3, #0
  
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	20000068 	.word	0x20000068
 80089a0:	10624dd3 	.word	0x10624dd3

080089a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089a4:	b084      	sub	sp, #16
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	f107 001c 	add.w	r0, r7, #28
 80089b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d122      	bne.n	8008a02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80089d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d105      	bne.n	80089f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 fac6 	bl	8009f88 <USB_CoreReset>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]
 8008a00:	e01a      	b.n	8008a38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 faba 	bl	8009f88 <USB_CoreReset>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d106      	bne.n	8008a2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	639a      	str	r2, [r3, #56]	; 0x38
 8008a2a:	e005      	b.n	8008a38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d10b      	bne.n	8008a56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f043 0206 	orr.w	r2, r3, #6
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f043 0220 	orr.w	r2, r3, #32
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a62:	b004      	add	sp, #16
 8008a64:	4770      	bx	lr
	...

08008a68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	4613      	mov	r3, r2
 8008a74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d165      	bne.n	8008b48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	4a41      	ldr	r2, [pc, #260]	; (8008b84 <USB_SetTurnaroundTime+0x11c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d906      	bls.n	8008a92 <USB_SetTurnaroundTime+0x2a>
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	4a40      	ldr	r2, [pc, #256]	; (8008b88 <USB_SetTurnaroundTime+0x120>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d202      	bcs.n	8008a92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008a8c:	230f      	movs	r3, #15
 8008a8e:	617b      	str	r3, [r7, #20]
 8008a90:	e062      	b.n	8008b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	4a3c      	ldr	r2, [pc, #240]	; (8008b88 <USB_SetTurnaroundTime+0x120>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d306      	bcc.n	8008aa8 <USB_SetTurnaroundTime+0x40>
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	4a3b      	ldr	r2, [pc, #236]	; (8008b8c <USB_SetTurnaroundTime+0x124>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d202      	bcs.n	8008aa8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008aa2:	230e      	movs	r3, #14
 8008aa4:	617b      	str	r3, [r7, #20]
 8008aa6:	e057      	b.n	8008b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	4a38      	ldr	r2, [pc, #224]	; (8008b8c <USB_SetTurnaroundTime+0x124>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d306      	bcc.n	8008abe <USB_SetTurnaroundTime+0x56>
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	4a37      	ldr	r2, [pc, #220]	; (8008b90 <USB_SetTurnaroundTime+0x128>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d202      	bcs.n	8008abe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008ab8:	230d      	movs	r3, #13
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	e04c      	b.n	8008b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	4a33      	ldr	r2, [pc, #204]	; (8008b90 <USB_SetTurnaroundTime+0x128>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d306      	bcc.n	8008ad4 <USB_SetTurnaroundTime+0x6c>
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	4a32      	ldr	r2, [pc, #200]	; (8008b94 <USB_SetTurnaroundTime+0x12c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d802      	bhi.n	8008ad4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008ace:	230c      	movs	r3, #12
 8008ad0:	617b      	str	r3, [r7, #20]
 8008ad2:	e041      	b.n	8008b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	4a2f      	ldr	r2, [pc, #188]	; (8008b94 <USB_SetTurnaroundTime+0x12c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d906      	bls.n	8008aea <USB_SetTurnaroundTime+0x82>
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	4a2e      	ldr	r2, [pc, #184]	; (8008b98 <USB_SetTurnaroundTime+0x130>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d802      	bhi.n	8008aea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008ae4:	230b      	movs	r3, #11
 8008ae6:	617b      	str	r3, [r7, #20]
 8008ae8:	e036      	b.n	8008b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	4a2a      	ldr	r2, [pc, #168]	; (8008b98 <USB_SetTurnaroundTime+0x130>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d906      	bls.n	8008b00 <USB_SetTurnaroundTime+0x98>
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	4a29      	ldr	r2, [pc, #164]	; (8008b9c <USB_SetTurnaroundTime+0x134>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d802      	bhi.n	8008b00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008afa:	230a      	movs	r3, #10
 8008afc:	617b      	str	r3, [r7, #20]
 8008afe:	e02b      	b.n	8008b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4a26      	ldr	r2, [pc, #152]	; (8008b9c <USB_SetTurnaroundTime+0x134>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d906      	bls.n	8008b16 <USB_SetTurnaroundTime+0xae>
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	4a25      	ldr	r2, [pc, #148]	; (8008ba0 <USB_SetTurnaroundTime+0x138>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d202      	bcs.n	8008b16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b10:	2309      	movs	r3, #9
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	e020      	b.n	8008b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	4a21      	ldr	r2, [pc, #132]	; (8008ba0 <USB_SetTurnaroundTime+0x138>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d306      	bcc.n	8008b2c <USB_SetTurnaroundTime+0xc4>
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	4a20      	ldr	r2, [pc, #128]	; (8008ba4 <USB_SetTurnaroundTime+0x13c>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d802      	bhi.n	8008b2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b26:	2308      	movs	r3, #8
 8008b28:	617b      	str	r3, [r7, #20]
 8008b2a:	e015      	b.n	8008b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	4a1d      	ldr	r2, [pc, #116]	; (8008ba4 <USB_SetTurnaroundTime+0x13c>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d906      	bls.n	8008b42 <USB_SetTurnaroundTime+0xda>
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	4a1c      	ldr	r2, [pc, #112]	; (8008ba8 <USB_SetTurnaroundTime+0x140>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d202      	bcs.n	8008b42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b3c:	2307      	movs	r3, #7
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	e00a      	b.n	8008b58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b42:	2306      	movs	r3, #6
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	e007      	b.n	8008b58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d102      	bne.n	8008b54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008b4e:	2309      	movs	r3, #9
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	e001      	b.n	8008b58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008b54:	2309      	movs	r3, #9
 8008b56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	029b      	lsls	r3, r3, #10
 8008b6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008b70:	431a      	orrs	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	371c      	adds	r7, #28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	00d8acbf 	.word	0x00d8acbf
 8008b88:	00e4e1c0 	.word	0x00e4e1c0
 8008b8c:	00f42400 	.word	0x00f42400
 8008b90:	01067380 	.word	0x01067380
 8008b94:	011a499f 	.word	0x011a499f
 8008b98:	01312cff 	.word	0x01312cff
 8008b9c:	014ca43f 	.word	0x014ca43f
 8008ba0:	016e3600 	.word	0x016e3600
 8008ba4:	01a6ab1f 	.word	0x01a6ab1f
 8008ba8:	01e84800 	.word	0x01e84800

08008bac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f043 0201 	orr.w	r2, r3, #1
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f023 0201 	bic.w	r2, r3, #1
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d106      	bne.n	8008c1c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60da      	str	r2, [r3, #12]
 8008c1a:	e00b      	b.n	8008c34 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c1c:	78fb      	ldrb	r3, [r7, #3]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d106      	bne.n	8008c30 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	60da      	str	r2, [r3, #12]
 8008c2e:	e001      	b.n	8008c34 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e003      	b.n	8008c3c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008c34:	2032      	movs	r0, #50	; 0x32
 8008c36:	f7fa fb59 	bl	80032ec <HAL_Delay>

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c44:	b084      	sub	sp, #16
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b086      	sub	sp, #24
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c5e:	2300      	movs	r3, #0
 8008c60:	613b      	str	r3, [r7, #16]
 8008c62:	e009      	b.n	8008c78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	3340      	adds	r3, #64	; 0x40
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	2200      	movs	r2, #0
 8008c70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	3301      	adds	r3, #1
 8008c76:	613b      	str	r3, [r7, #16]
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b0e      	cmp	r3, #14
 8008c7c:	d9f2      	bls.n	8008c64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d11c      	bne.n	8008cbe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c92:	f043 0302 	orr.w	r3, r3, #2
 8008c96:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38
 8008cbc:	e00b      	b.n	8008cd6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cdc:	461a      	mov	r2, r3
 8008cde:	2300      	movs	r3, #0
 8008ce0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce8:	4619      	mov	r1, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	680b      	ldr	r3, [r1, #0]
 8008cf4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d10c      	bne.n	8008d16 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d104      	bne.n	8008d0c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d02:	2100      	movs	r1, #0
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f949 	bl	8008f9c <USB_SetDevSpeed>
 8008d0a:	e008      	b.n	8008d1e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f944 	bl	8008f9c <USB_SetDevSpeed>
 8008d14:	e003      	b.n	8008d1e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d16:	2103      	movs	r1, #3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f93f 	bl	8008f9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d1e:	2110      	movs	r1, #16
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f8f3 	bl	8008f0c <USB_FlushTxFifo>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f911 	bl	8008f58 <USB_FlushRxFifo>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d46:	461a      	mov	r2, r3
 8008d48:	2300      	movs	r3, #0
 8008d4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d52:	461a      	mov	r2, r3
 8008d54:	2300      	movs	r3, #0
 8008d56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d5e:	461a      	mov	r2, r3
 8008d60:	2300      	movs	r3, #0
 8008d62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d64:	2300      	movs	r3, #0
 8008d66:	613b      	str	r3, [r7, #16]
 8008d68:	e043      	b.n	8008df2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d80:	d118      	bne.n	8008db4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10a      	bne.n	8008d9e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d94:	461a      	mov	r2, r3
 8008d96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	e013      	b.n	8008dc6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008daa:	461a      	mov	r2, r3
 8008dac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	e008      	b.n	8008dc6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de4:	461a      	mov	r2, r3
 8008de6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008dea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	3301      	adds	r3, #1
 8008df0:	613b      	str	r3, [r7, #16]
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d3b7      	bcc.n	8008d6a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	613b      	str	r3, [r7, #16]
 8008dfe:	e043      	b.n	8008e88 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e16:	d118      	bne.n	8008e4a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10a      	bne.n	8008e34 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	015a      	lsls	r2, r3, #5
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	e013      	b.n	8008e5c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e40:	461a      	mov	r2, r3
 8008e42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	e008      	b.n	8008e5c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e56:	461a      	mov	r2, r3
 8008e58:	2300      	movs	r3, #0
 8008e5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e68:	461a      	mov	r2, r3
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	015a      	lsls	r2, r3, #5
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	4413      	add	r3, r2
 8008e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	3301      	adds	r3, #1
 8008e86:	613b      	str	r3, [r7, #16]
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d3b7      	bcc.n	8008e00 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ea2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008eb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d105      	bne.n	8008ec4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	f043 0210 	orr.w	r2, r3, #16
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699a      	ldr	r2, [r3, #24]
 8008ec8:	4b0f      	ldr	r3, [pc, #60]	; (8008f08 <USB_DevInit+0x2c4>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d005      	beq.n	8008ee2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	f043 0208 	orr.w	r2, r3, #8
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d107      	bne.n	8008ef8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ef0:	f043 0304 	orr.w	r3, r3, #4
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f04:	b004      	add	sp, #16
 8008f06:	4770      	bx	lr
 8008f08:	803c3800 	.word	0x803c3800

08008f0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	019b      	lsls	r3, r3, #6
 8008f1e:	f043 0220 	orr.w	r2, r3, #32
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4a09      	ldr	r2, [pc, #36]	; (8008f54 <USB_FlushTxFifo+0x48>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d901      	bls.n	8008f38 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e006      	b.n	8008f46 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	f003 0320 	and.w	r3, r3, #32
 8008f40:	2b20      	cmp	r3, #32
 8008f42:	d0f0      	beq.n	8008f26 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	00030d40 	.word	0x00030d40

08008f58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2210      	movs	r2, #16
 8008f68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4a09      	ldr	r2, [pc, #36]	; (8008f98 <USB_FlushRxFifo+0x40>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d901      	bls.n	8008f7c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e006      	b.n	8008f8a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	f003 0310 	and.w	r3, r3, #16
 8008f84:	2b10      	cmp	r3, #16
 8008f86:	d0f0      	beq.n	8008f6a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	00030d40 	.word	0x00030d40

08008f9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	68f9      	ldr	r1, [r7, #12]
 8008fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b087      	sub	sp, #28
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f003 0306 	and.w	r3, r3, #6
 8008fe6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d102      	bne.n	8008ff4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	75fb      	strb	r3, [r7, #23]
 8008ff2:	e00a      	b.n	800900a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d002      	beq.n	8009000 <USB_GetDevSpeed+0x32>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b06      	cmp	r3, #6
 8008ffe:	d102      	bne.n	8009006 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009000:	2302      	movs	r3, #2
 8009002:	75fb      	strb	r3, [r7, #23]
 8009004:	e001      	b.n	800900a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009006:	230f      	movs	r3, #15
 8009008:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800900a:	7dfb      	ldrb	r3, [r7, #23]
}
 800900c:	4618      	mov	r0, r3
 800900e:	371c      	adds	r7, #28
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	785b      	ldrb	r3, [r3, #1]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d13a      	bne.n	80090aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903a:	69da      	ldr	r2, [r3, #28]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 030f 	and.w	r3, r3, #15
 8009044:	2101      	movs	r1, #1
 8009046:	fa01 f303 	lsl.w	r3, r1, r3
 800904a:	b29b      	uxth	r3, r3
 800904c:	68f9      	ldr	r1, [r7, #12]
 800904e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009052:	4313      	orrs	r3, r2
 8009054:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4413      	add	r3, r2
 800905e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d155      	bne.n	8009118 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	78db      	ldrb	r3, [r3, #3]
 8009086:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009088:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	059b      	lsls	r3, r3, #22
 800908e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009090:	4313      	orrs	r3, r2
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	0151      	lsls	r1, r2, #5
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	440a      	add	r2, r1
 800909a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800909e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	e036      	b.n	8009118 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b0:	69da      	ldr	r2, [r3, #28]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	f003 030f 	and.w	r3, r3, #15
 80090ba:	2101      	movs	r1, #1
 80090bc:	fa01 f303 	lsl.w	r3, r1, r3
 80090c0:	041b      	lsls	r3, r3, #16
 80090c2:	68f9      	ldr	r1, [r7, #12]
 80090c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090c8:	4313      	orrs	r3, r2
 80090ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d11a      	bne.n	8009118 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	78db      	ldrb	r3, [r3, #3]
 80090fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090fe:	430b      	orrs	r3, r1
 8009100:	4313      	orrs	r3, r2
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	0151      	lsls	r1, r2, #5
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	440a      	add	r2, r1
 800910a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800910e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009116:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
	...

08009128 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d161      	bne.n	8009208 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800915a:	d11f      	bne.n	800919c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	0151      	lsls	r1, r2, #5
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	440a      	add	r2, r1
 8009172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800917a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	0151      	lsls	r1, r2, #5
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	440a      	add	r2, r1
 8009192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800919a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	f003 030f 	and.w	r3, r3, #15
 80091ac:	2101      	movs	r1, #1
 80091ae:	fa01 f303 	lsl.w	r3, r1, r3
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	43db      	mvns	r3, r3
 80091b6:	68f9      	ldr	r1, [r7, #12]
 80091b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091bc:	4013      	ands	r3, r2
 80091be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c6:	69da      	ldr	r2, [r3, #28]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	2101      	movs	r1, #1
 80091d2:	fa01 f303 	lsl.w	r3, r1, r3
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	43db      	mvns	r3, r3
 80091da:	68f9      	ldr	r1, [r7, #12]
 80091dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091e0:	4013      	ands	r3, r2
 80091e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	015a      	lsls	r2, r3, #5
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	0159      	lsls	r1, r3, #5
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	440b      	add	r3, r1
 80091fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fe:	4619      	mov	r1, r3
 8009200:	4b35      	ldr	r3, [pc, #212]	; (80092d8 <USB_DeactivateEndpoint+0x1b0>)
 8009202:	4013      	ands	r3, r2
 8009204:	600b      	str	r3, [r1, #0]
 8009206:	e060      	b.n	80092ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800921a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800921e:	d11f      	bne.n	8009260 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	0151      	lsls	r1, r2, #5
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	440a      	add	r2, r1
 8009236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800923a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800923e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800925a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800925e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	f003 030f 	and.w	r3, r3, #15
 8009270:	2101      	movs	r1, #1
 8009272:	fa01 f303 	lsl.w	r3, r1, r3
 8009276:	041b      	lsls	r3, r3, #16
 8009278:	43db      	mvns	r3, r3
 800927a:	68f9      	ldr	r1, [r7, #12]
 800927c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009280:	4013      	ands	r3, r2
 8009282:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800928a:	69da      	ldr	r2, [r3, #28]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	f003 030f 	and.w	r3, r3, #15
 8009294:	2101      	movs	r1, #1
 8009296:	fa01 f303 	lsl.w	r3, r1, r3
 800929a:	041b      	lsls	r3, r3, #16
 800929c:	43db      	mvns	r3, r3
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092a4:	4013      	ands	r3, r2
 80092a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	0159      	lsls	r1, r3, #5
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	440b      	add	r3, r1
 80092be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c2:	4619      	mov	r1, r3
 80092c4:	4b05      	ldr	r3, [pc, #20]	; (80092dc <USB_DeactivateEndpoint+0x1b4>)
 80092c6:	4013      	ands	r3, r2
 80092c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	ec337800 	.word	0xec337800
 80092dc:	eff37800 	.word	0xeff37800

080092e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08a      	sub	sp, #40	; 0x28
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	4613      	mov	r3, r2
 80092ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	785b      	ldrb	r3, [r3, #1]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	f040 815c 	bne.w	80095ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d132      	bne.n	8009370 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	69ba      	ldr	r2, [r7, #24]
 800931a:	0151      	lsls	r1, r2, #5
 800931c:	69fa      	ldr	r2, [r7, #28]
 800931e:	440a      	add	r2, r1
 8009320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009324:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009328:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800932c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	4413      	add	r3, r2
 8009336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	0151      	lsls	r1, r2, #5
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	440a      	add	r2, r1
 8009344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800934c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	440a      	add	r2, r1
 8009364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009368:	0cdb      	lsrs	r3, r3, #19
 800936a:	04db      	lsls	r3, r3, #19
 800936c:	6113      	str	r3, [r2, #16]
 800936e:	e074      	b.n	800945a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	69ba      	ldr	r2, [r7, #24]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	69fa      	ldr	r2, [r7, #28]
 8009384:	440a      	add	r2, r1
 8009386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800938a:	0cdb      	lsrs	r3, r3, #19
 800938c:	04db      	lsls	r3, r3, #19
 800938e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	0151      	lsls	r1, r2, #5
 80093a2:	69fa      	ldr	r2, [r7, #28]
 80093a4:	440a      	add	r2, r1
 80093a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c0:	691a      	ldr	r2, [r3, #16]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	6959      	ldr	r1, [r3, #20]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	440b      	add	r3, r1
 80093cc:	1e59      	subs	r1, r3, #1
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80093d6:	04d9      	lsls	r1, r3, #19
 80093d8:	4b9d      	ldr	r3, [pc, #628]	; (8009650 <USB_EPStartXfer+0x370>)
 80093da:	400b      	ands	r3, r1
 80093dc:	69b9      	ldr	r1, [r7, #24]
 80093de:	0148      	lsls	r0, r1, #5
 80093e0:	69f9      	ldr	r1, [r7, #28]
 80093e2:	4401      	add	r1, r0
 80093e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093e8:	4313      	orrs	r3, r2
 80093ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f8:	691a      	ldr	r2, [r3, #16]
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009402:	69b9      	ldr	r1, [r7, #24]
 8009404:	0148      	lsls	r0, r1, #5
 8009406:	69f9      	ldr	r1, [r7, #28]
 8009408:	4401      	add	r1, r0
 800940a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800940e:	4313      	orrs	r3, r2
 8009410:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	78db      	ldrb	r3, [r3, #3]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d11f      	bne.n	800945a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	0151      	lsls	r1, r2, #5
 800942c:	69fa      	ldr	r2, [r7, #28]
 800942e:	440a      	add	r2, r1
 8009430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009434:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009438:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	0151      	lsls	r1, r2, #5
 800944c:	69fa      	ldr	r2, [r7, #28]
 800944e:	440a      	add	r2, r1
 8009450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009454:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009458:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d14b      	bne.n	80094f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d009      	beq.n	800947c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009474:	461a      	mov	r2, r3
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	78db      	ldrb	r3, [r3, #3]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d128      	bne.n	80094d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009490:	2b00      	cmp	r3, #0
 8009492:	d110      	bne.n	80094b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	0151      	lsls	r1, r2, #5
 80094a6:	69fa      	ldr	r2, [r7, #28]
 80094a8:	440a      	add	r2, r1
 80094aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	e00f      	b.n	80094d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	0151      	lsls	r1, r2, #5
 80094c8:	69fa      	ldr	r2, [r7, #28]
 80094ca:	440a      	add	r2, r1
 80094cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	0151      	lsls	r1, r2, #5
 80094e8:	69fa      	ldr	r2, [r7, #28]
 80094ea:	440a      	add	r2, r1
 80094ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	e12f      	b.n	8009758 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	0151      	lsls	r1, r2, #5
 800950a:	69fa      	ldr	r2, [r7, #28]
 800950c:	440a      	add	r2, r1
 800950e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009516:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	78db      	ldrb	r3, [r3, #3]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d015      	beq.n	800954c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 8117 	beq.w	8009758 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	f003 030f 	and.w	r3, r3, #15
 800953a:	2101      	movs	r1, #1
 800953c:	fa01 f303 	lsl.w	r3, r1, r3
 8009540:	69f9      	ldr	r1, [r7, #28]
 8009542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009546:	4313      	orrs	r3, r2
 8009548:	634b      	str	r3, [r1, #52]	; 0x34
 800954a:	e105      	b.n	8009758 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009558:	2b00      	cmp	r3, #0
 800955a:	d110      	bne.n	800957e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	0151      	lsls	r1, r2, #5
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	440a      	add	r2, r1
 8009572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	e00f      	b.n	800959e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	69fa      	ldr	r2, [r7, #28]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800959c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	68d9      	ldr	r1, [r3, #12]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	781a      	ldrb	r2, [r3, #0]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	b298      	uxth	r0, r3
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	4603      	mov	r3, r0
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 fa2b 	bl	8009a0e <USB_WritePacket>
 80095b8:	e0ce      	b.n	8009758 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	0151      	lsls	r1, r2, #5
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	440a      	add	r2, r1
 80095d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095d4:	0cdb      	lsrs	r3, r3, #19
 80095d6:	04db      	lsls	r3, r3, #19
 80095d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	69ba      	ldr	r2, [r7, #24]
 80095ea:	0151      	lsls	r1, r2, #5
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	440a      	add	r2, r1
 80095f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d126      	bne.n	8009654 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	4413      	add	r3, r2
 800960e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009612:	691a      	ldr	r2, [r3, #16]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800961c:	69b9      	ldr	r1, [r7, #24]
 800961e:	0148      	lsls	r0, r1, #5
 8009620:	69f9      	ldr	r1, [r7, #28]
 8009622:	4401      	add	r1, r0
 8009624:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009628:	4313      	orrs	r3, r2
 800962a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	69ba      	ldr	r2, [r7, #24]
 800963c:	0151      	lsls	r1, r2, #5
 800963e:	69fa      	ldr	r2, [r7, #28]
 8009640:	440a      	add	r2, r1
 8009642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800964a:	6113      	str	r3, [r2, #16]
 800964c:	e036      	b.n	80096bc <USB_EPStartXfer+0x3dc>
 800964e:	bf00      	nop
 8009650:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	695a      	ldr	r2, [r3, #20]
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	4413      	add	r3, r2
 800965e:	1e5a      	subs	r2, r3, #1
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	fbb2 f3f3 	udiv	r3, r2, r3
 8009668:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009676:	691a      	ldr	r2, [r3, #16]
 8009678:	8afb      	ldrh	r3, [r7, #22]
 800967a:	04d9      	lsls	r1, r3, #19
 800967c:	4b39      	ldr	r3, [pc, #228]	; (8009764 <USB_EPStartXfer+0x484>)
 800967e:	400b      	ands	r3, r1
 8009680:	69b9      	ldr	r1, [r7, #24]
 8009682:	0148      	lsls	r0, r1, #5
 8009684:	69f9      	ldr	r1, [r7, #28]
 8009686:	4401      	add	r1, r0
 8009688:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800968c:	4313      	orrs	r3, r2
 800968e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969c:	691a      	ldr	r2, [r3, #16]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	8af9      	ldrh	r1, [r7, #22]
 80096a4:	fb01 f303 	mul.w	r3, r1, r3
 80096a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096ac:	69b9      	ldr	r1, [r7, #24]
 80096ae:	0148      	lsls	r0, r1, #5
 80096b0:	69f9      	ldr	r1, [r7, #28]
 80096b2:	4401      	add	r1, r0
 80096b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096b8:	4313      	orrs	r3, r2
 80096ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d10d      	bne.n	80096de <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d009      	beq.n	80096de <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	68d9      	ldr	r1, [r3, #12]
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096da:	460a      	mov	r2, r1
 80096dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	78db      	ldrb	r3, [r3, #3]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d128      	bne.n	8009738 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d110      	bne.n	8009718 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	0151      	lsls	r1, r2, #5
 8009708:	69fa      	ldr	r2, [r7, #28]
 800970a:	440a      	add	r2, r1
 800970c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009714:	6013      	str	r3, [r2, #0]
 8009716:	e00f      	b.n	8009738 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	0151      	lsls	r1, r2, #5
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	440a      	add	r2, r1
 800972e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009736:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	69ba      	ldr	r2, [r7, #24]
 8009748:	0151      	lsls	r1, r2, #5
 800974a:	69fa      	ldr	r2, [r7, #28]
 800974c:	440a      	add	r2, r1
 800974e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009752:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009756:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3720      	adds	r7, #32
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	1ff80000 	.word	0x1ff80000

08009768 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009768:	b480      	push	{r7}
 800976a:	b087      	sub	sp, #28
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	4613      	mov	r3, r2
 8009774:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	785b      	ldrb	r3, [r3, #1]
 8009784:	2b01      	cmp	r3, #1
 8009786:	f040 80cd 	bne.w	8009924 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d132      	bne.n	80097f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	0151      	lsls	r1, r2, #5
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	440a      	add	r2, r1
 80097a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	015a      	lsls	r2, r3, #5
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	4413      	add	r3, r2
 80097be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	0151      	lsls	r1, r2, #5
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	440a      	add	r2, r1
 80097cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	0151      	lsls	r1, r2, #5
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	440a      	add	r2, r1
 80097ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097f0:	0cdb      	lsrs	r3, r3, #19
 80097f2:	04db      	lsls	r3, r3, #19
 80097f4:	6113      	str	r3, [r2, #16]
 80097f6:	e04e      	b.n	8009896 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	0151      	lsls	r1, r2, #5
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	440a      	add	r2, r1
 800980e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009812:	0cdb      	lsrs	r3, r3, #19
 8009814:	04db      	lsls	r3, r3, #19
 8009816:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	4413      	add	r3, r2
 8009820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	0151      	lsls	r1, r2, #5
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	440a      	add	r2, r1
 800982e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009832:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009836:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800983a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	695a      	ldr	r2, [r3, #20]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	429a      	cmp	r2, r3
 8009846:	d903      	bls.n	8009850 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	0151      	lsls	r1, r2, #5
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	440a      	add	r2, r1
 8009866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800986a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800986e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987c:	691a      	ldr	r2, [r3, #16]
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009886:	6939      	ldr	r1, [r7, #16]
 8009888:	0148      	lsls	r0, r1, #5
 800988a:	6979      	ldr	r1, [r7, #20]
 800988c:	4401      	add	r1, r0
 800988e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009892:	4313      	orrs	r3, r2
 8009894:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009896:	79fb      	ldrb	r3, [r7, #7]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d11e      	bne.n	80098da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d009      	beq.n	80098b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b0:	461a      	mov	r2, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	0151      	lsls	r1, r2, #5
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	440a      	add	r2, r1
 80098ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	e092      	b.n	8009a00 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	0151      	lsls	r1, r2, #5
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	440a      	add	r2, r1
 80098f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d07e      	beq.n	8009a00 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	f003 030f 	and.w	r3, r3, #15
 8009912:	2101      	movs	r1, #1
 8009914:	fa01 f303 	lsl.w	r3, r1, r3
 8009918:	6979      	ldr	r1, [r7, #20]
 800991a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800991e:	4313      	orrs	r3, r2
 8009920:	634b      	str	r3, [r1, #52]	; 0x34
 8009922:	e06d      	b.n	8009a00 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	0151      	lsls	r1, r2, #5
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	440a      	add	r2, r1
 800993a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800993e:	0cdb      	lsrs	r3, r3, #19
 8009940:	04db      	lsls	r3, r3, #19
 8009942:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	0151      	lsls	r1, r2, #5
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	440a      	add	r2, r1
 800995a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800995e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009962:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009966:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	689a      	ldr	r2, [r3, #8]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	0151      	lsls	r1, r2, #5
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	440a      	add	r2, r1
 800998e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009996:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a4:	691a      	ldr	r2, [r3, #16]
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099ae:	6939      	ldr	r1, [r7, #16]
 80099b0:	0148      	lsls	r0, r1, #5
 80099b2:	6979      	ldr	r1, [r7, #20]
 80099b4:	4401      	add	r1, r0
 80099b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099ba:	4313      	orrs	r3, r2
 80099bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80099be:	79fb      	ldrb	r3, [r7, #7]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d10d      	bne.n	80099e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d009      	beq.n	80099e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	68d9      	ldr	r1, [r3, #12]
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099dc:	460a      	mov	r2, r1
 80099de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	0151      	lsls	r1, r2, #5
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	440a      	add	r2, r1
 80099f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	371c      	adds	r7, #28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b089      	sub	sp, #36	; 0x24
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	4611      	mov	r1, r2
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	71fb      	strb	r3, [r7, #7]
 8009a20:	4613      	mov	r3, r2
 8009a22:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009a2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d11a      	bne.n	8009a6a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a34:	88bb      	ldrh	r3, [r7, #4]
 8009a36:	3303      	adds	r3, #3
 8009a38:	089b      	lsrs	r3, r3, #2
 8009a3a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	61bb      	str	r3, [r7, #24]
 8009a40:	e00f      	b.n	8009a62 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	031a      	lsls	r2, r3, #12
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a4e:	461a      	mov	r2, r3
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	61bb      	str	r3, [r7, #24]
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d3eb      	bcc.n	8009a42 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3724      	adds	r7, #36	; 0x24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b089      	sub	sp, #36	; 0x24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	4613      	mov	r3, r2
 8009a84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009a8e:	88fb      	ldrh	r3, [r7, #6]
 8009a90:	3303      	adds	r3, #3
 8009a92:	089b      	lsrs	r3, r3, #2
 8009a94:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009a96:	2300      	movs	r3, #0
 8009a98:	61bb      	str	r3, [r7, #24]
 8009a9a:	e00b      	b.n	8009ab4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	3304      	adds	r3, #4
 8009aac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	61bb      	str	r3, [r7, #24]
 8009ab4:	69ba      	ldr	r2, [r7, #24]
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d3ef      	bcc.n	8009a9c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009abc:	69fb      	ldr	r3, [r7, #28]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3724      	adds	r7, #36	; 0x24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b085      	sub	sp, #20
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d12c      	bne.n	8009b40 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	db12      	blt.n	8009b1e <USB_EPSetStall+0x54>
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00f      	beq.n	8009b1e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	0151      	lsls	r1, r2, #5
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	440a      	add	r2, r1
 8009b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b1c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	0151      	lsls	r1, r2, #5
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	440a      	add	r2, r1
 8009b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	e02b      	b.n	8009b98 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	db12      	blt.n	8009b78 <USB_EPSetStall+0xae>
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00f      	beq.n	8009b78 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	0151      	lsls	r1, r2, #5
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	440a      	add	r2, r1
 8009b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b76:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	0151      	lsls	r1, r2, #5
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	440a      	add	r2, r1
 8009b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	785b      	ldrb	r3, [r3, #1]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d128      	bne.n	8009c14 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	0151      	lsls	r1, r2, #5
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	440a      	add	r2, r1
 8009bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009be0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	78db      	ldrb	r3, [r3, #3]
 8009be6:	2b03      	cmp	r3, #3
 8009be8:	d003      	beq.n	8009bf2 <USB_EPClearStall+0x4c>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	78db      	ldrb	r3, [r3, #3]
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d138      	bne.n	8009c64 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	0151      	lsls	r1, r2, #5
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	440a      	add	r2, r1
 8009c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c10:	6013      	str	r3, [r2, #0]
 8009c12:	e027      	b.n	8009c64 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	0151      	lsls	r1, r2, #5
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	440a      	add	r2, r1
 8009c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	78db      	ldrb	r3, [r3, #3]
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d003      	beq.n	8009c44 <USB_EPClearStall+0x9e>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	78db      	ldrb	r3, [r3, #3]
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d10f      	bne.n	8009c64 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	0151      	lsls	r1, r2, #5
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	440a      	add	r2, r1
 8009c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c62:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b085      	sub	sp, #20
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c94:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	78fb      	ldrb	r3, [r7, #3]
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009ca6:	68f9      	ldr	r1, [r7, #12]
 8009ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cac:	4313      	orrs	r3, r2
 8009cae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b085      	sub	sp, #20
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cd8:	f023 0303 	bic.w	r3, r3, #3
 8009cdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cec:	f023 0302 	bic.w	r3, r3, #2
 8009cf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d1a:	f023 0303 	bic.w	r3, r3, #3
 8009d1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d2e:	f043 0302 	orr.w	r3, r3, #2
 8009d32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b085      	sub	sp, #20
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4013      	ands	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d84:	69db      	ldr	r3, [r3, #28]
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	4013      	ands	r3, r2
 8009d8a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	0c1b      	lsrs	r3, r3, #16
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db8:	69db      	ldr	r3, [r3, #28]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	b29b      	uxth	r3, r3
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	015a      	lsls	r2, r3, #5
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	4413      	add	r3, r2
 8009de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	f003 030f 	and.w	r3, r3, #15
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3c:	01db      	lsls	r3, r3, #7
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e46:	78fb      	ldrb	r3, [r7, #3]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	4013      	ands	r3, r2
 8009e58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	371c      	adds	r7, #28
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	f003 0301 	and.w	r3, r3, #1
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009ea2:	f023 0307 	bic.w	r3, r3, #7
 8009ea6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
	...

08009ecc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b087      	sub	sp, #28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	607a      	str	r2, [r7, #4]
 8009ed8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	333c      	adds	r3, #60	; 0x3c
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	4a26      	ldr	r2, [pc, #152]	; (8009f84 <USB_EP0_OutStart+0xb8>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d90a      	bls.n	8009f06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f00:	d101      	bne.n	8009f06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	e037      	b.n	8009f76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	2300      	movs	r3, #0
 8009f10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f34:	f043 0318 	orr.w	r3, r3, #24
 8009f38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f4e:	7afb      	ldrb	r3, [r7, #11]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d10f      	bne.n	8009f74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	371c      	adds	r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	4f54300a 	.word	0x4f54300a

08009f88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	3301      	adds	r3, #1
 8009f98:	60fb      	str	r3, [r7, #12]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4a13      	ldr	r2, [pc, #76]	; (8009fec <USB_CoreReset+0x64>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d901      	bls.n	8009fa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e01b      	b.n	8009fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	daf2      	bge.n	8009f94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	f043 0201 	orr.w	r2, r3, #1
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	60fb      	str	r3, [r7, #12]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	4a09      	ldr	r2, [pc, #36]	; (8009fec <USB_CoreReset+0x64>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d901      	bls.n	8009fd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e006      	b.n	8009fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	f003 0301 	and.w	r3, r3, #1
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d0f0      	beq.n	8009fbe <USB_CoreReset+0x36>

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	00030d40 	.word	0x00030d40

08009ff0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009ff4:	4904      	ldr	r1, [pc, #16]	; (800a008 <MX_FATFS_Init+0x18>)
 8009ff6:	4805      	ldr	r0, [pc, #20]	; (800a00c <MX_FATFS_Init+0x1c>)
 8009ff8:	f004 fd00 	bl	800e9fc <FATFS_LinkDriver>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	461a      	mov	r2, r3
 800a000:	4b03      	ldr	r3, [pc, #12]	; (800a010 <MX_FATFS_Init+0x20>)
 800a002:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a004:	bf00      	nop
 800a006:	bd80      	pop	{r7, pc}
 800a008:	20002bb0 	.word	0x20002bb0
 800a00c:	080150e0 	.word	0x080150e0
 800a010:	20002bac 	.word	0x20002bac

0800a014 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a014:	b480      	push	{r7}
 800a016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a018:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a02e:	f000 f879 	bl	800a124 <BSP_SD_IsDetected>
 800a032:	4603      	mov	r3, r0
 800a034:	2b01      	cmp	r3, #1
 800a036:	d001      	beq.n	800a03c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e012      	b.n	800a062 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a03c:	480b      	ldr	r0, [pc, #44]	; (800a06c <BSP_SD_Init+0x48>)
 800a03e:	f7fc fdb4 	bl	8006baa <HAL_SD_Init>
 800a042:	4603      	mov	r3, r0
 800a044:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d109      	bne.n	800a060 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a04c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a050:	4806      	ldr	r0, [pc, #24]	; (800a06c <BSP_SD_Init+0x48>)
 800a052:	f7fd fb8d 	bl	8007770 <HAL_SD_ConfigWideBusOperation>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a060:	79fb      	ldrb	r3, [r7, #7]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20002b24 	.word	0x20002b24

0800a070 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af02      	add	r7, sp, #8
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	4806      	ldr	r0, [pc, #24]	; (800a0a8 <BSP_SD_ReadBlocks+0x38>)
 800a08e:	f7fc fe3b 	bl	8006d08 <HAL_SD_ReadBlocks>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20002b24 	.word	0x20002b24

0800a0ac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b088      	sub	sp, #32
 800a0b0:	af02      	add	r7, sp, #8
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	68f9      	ldr	r1, [r7, #12]
 800a0c8:	4806      	ldr	r0, [pc, #24]	; (800a0e4 <BSP_SD_WriteBlocks+0x38>)
 800a0ca:	f7fc fffb 	bl	80070c4 <HAL_SD_WriteBlocks>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20002b24 	.word	0x20002b24

0800a0e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a0ec:	4805      	ldr	r0, [pc, #20]	; (800a104 <BSP_SD_GetCardState+0x1c>)
 800a0ee:	f7fd fbd9 	bl	80078a4 <HAL_SD_GetCardState>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	bf14      	ite	ne
 800a0f8:	2301      	movne	r3, #1
 800a0fa:	2300      	moveq	r3, #0
 800a0fc:	b2db      	uxtb	r3, r3
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	20002b24 	.word	0x20002b24

0800a108 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a110:	6879      	ldr	r1, [r7, #4]
 800a112:	4803      	ldr	r0, [pc, #12]	; (800a120 <BSP_SD_GetCardInfo+0x18>)
 800a114:	f7fd fb00 	bl	8007718 <HAL_SD_GetCardInfo>
}
 800a118:	bf00      	nop
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	20002b24 	.word	0x20002b24

0800a124 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a12a:	2301      	movs	r3, #1
 800a12c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a12e:	f000 f80b 	bl	800a148 <BSP_PlatformIsDetected>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d101      	bne.n	800a13c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a138:	2300      	movs	r3, #0
 800a13a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	b2db      	uxtb	r3, r3
}
 800a140:	4618      	mov	r0, r3
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a14e:	2301      	movs	r3, #1
 800a150:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a156:	4807      	ldr	r0, [pc, #28]	; (800a174 <BSP_PlatformIsDetected+0x2c>)
 800a158:	f7f9 ff74 	bl	8004044 <HAL_GPIO_ReadPin>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a162:	2300      	movs	r3, #0
 800a164:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
 800a166:	2301      	movs	r3, #1
 800a168:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */
    return status;
 800a16a:	79fb      	ldrb	r3, [r7, #7]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	40020800 	.word	0x40020800

0800a178 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	4603      	mov	r3, r0
 800a180:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a182:	4b0b      	ldr	r3, [pc, #44]	; (800a1b0 <SD_CheckStatus+0x38>)
 800a184:	2201      	movs	r2, #1
 800a186:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a188:	f7ff ffae 	bl	800a0e8 <BSP_SD_GetCardState>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d107      	bne.n	800a1a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a192:	4b07      	ldr	r3, [pc, #28]	; (800a1b0 <SD_CheckStatus+0x38>)
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	b2db      	uxtb	r3, r3
 800a198:	f023 0301 	bic.w	r3, r3, #1
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	4b04      	ldr	r3, [pc, #16]	; (800a1b0 <SD_CheckStatus+0x38>)
 800a1a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a1a2:	4b03      	ldr	r3, [pc, #12]	; (800a1b0 <SD_CheckStatus+0x38>)
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	b2db      	uxtb	r3, r3
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	20000071 	.word	0x20000071

0800a1b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a1be:	4b0b      	ldr	r3, [pc, #44]	; (800a1ec <SD_initialize+0x38>)
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a1c4:	f7ff ff2e 	bl	800a024 <BSP_SD_Init>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d107      	bne.n	800a1de <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a1ce:	79fb      	ldrb	r3, [r7, #7]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff ffd1 	bl	800a178 <SD_CheckStatus>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4b04      	ldr	r3, [pc, #16]	; (800a1ec <SD_initialize+0x38>)
 800a1dc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a1de:	4b03      	ldr	r3, [pc, #12]	; (800a1ec <SD_initialize+0x38>)
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	b2db      	uxtb	r3, r3
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20000071 	.word	0x20000071

0800a1f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a1fa:	79fb      	ldrb	r3, [r7, #7]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff ffbb 	bl	800a178 <SD_CheckStatus>
 800a202:	4603      	mov	r3, r0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	603b      	str	r3, [r7, #0]
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a220:	f04f 33ff 	mov.w	r3, #4294967295
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	6879      	ldr	r1, [r7, #4]
 800a228:	68b8      	ldr	r0, [r7, #8]
 800a22a:	f7ff ff21 	bl	800a070 <BSP_SD_ReadBlocks>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d107      	bne.n	800a244 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a234:	bf00      	nop
 800a236:	f7ff ff57 	bl	800a0e8 <BSP_SD_GetCardState>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1fa      	bne.n	800a236 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a244:	7dfb      	ldrb	r3, [r7, #23]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b086      	sub	sp, #24
 800a252:	af00      	add	r7, sp, #0
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
 800a25a:	4603      	mov	r3, r0
 800a25c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a262:	f04f 33ff 	mov.w	r3, #4294967295
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	68b8      	ldr	r0, [r7, #8]
 800a26c:	f7ff ff1e 	bl	800a0ac <BSP_SD_WriteBlocks>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d107      	bne.n	800a286 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a276:	bf00      	nop
 800a278:	f7ff ff36 	bl	800a0e8 <BSP_SD_GetCardState>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1fa      	bne.n	800a278 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a286:	7dfb      	ldrb	r3, [r7, #23]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3718      	adds	r7, #24
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08c      	sub	sp, #48	; 0x30
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	603a      	str	r2, [r7, #0]
 800a29a:	71fb      	strb	r3, [r7, #7]
 800a29c:	460b      	mov	r3, r1
 800a29e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a2a6:	4b25      	ldr	r3, [pc, #148]	; (800a33c <SD_ioctl+0xac>)
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	f003 0301 	and.w	r3, r3, #1
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <SD_ioctl+0x28>
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e03c      	b.n	800a332 <SD_ioctl+0xa2>

  switch (cmd)
 800a2b8:	79bb      	ldrb	r3, [r7, #6]
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d834      	bhi.n	800a328 <SD_ioctl+0x98>
 800a2be:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <SD_ioctl+0x34>)
 800a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c4:	0800a2d5 	.word	0x0800a2d5
 800a2c8:	0800a2dd 	.word	0x0800a2dd
 800a2cc:	0800a2f5 	.word	0x0800a2f5
 800a2d0:	0800a30f 	.word	0x0800a30f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a2da:	e028      	b.n	800a32e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a2dc:	f107 030c 	add.w	r3, r7, #12
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff ff11 	bl	800a108 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a2e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a2f2:	e01c      	b.n	800a32e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a2f4:	f107 030c 	add.w	r3, r7, #12
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7ff ff05 	bl	800a108 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	b29a      	uxth	r2, r3
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a30c:	e00f      	b.n	800a32e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a30e:	f107 030c 	add.w	r3, r7, #12
 800a312:	4618      	mov	r0, r3
 800a314:	f7ff fef8 	bl	800a108 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31a:	0a5a      	lsrs	r2, r3, #9
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a326:	e002      	b.n	800a32e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a328:	2304      	movs	r3, #4
 800a32a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a32e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a332:	4618      	mov	r0, r3
 800a334:	3730      	adds	r7, #48	; 0x30
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20000071 	.word	0x20000071

0800a340 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 800a34c:	2044      	movs	r0, #68	; 0x44
 800a34e:	f005 f883 	bl	800f458 <USBD_static_malloc>
 800a352:	4602      	mov	r2, r0
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 800a364:	2303      	movs	r3, #3
 800a366:	e016      	b.n	800a396 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a36e:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 800a370:	2340      	movs	r3, #64	; 0x40
 800a372:	2202      	movs	r2, #2
 800a374:	2181      	movs	r1, #129	; 0x81
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f004 ff4b 	bl	800f212 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 800a37c:	2340      	movs	r3, #64	; 0x40
 800a37e:	2202      	movs	r2, #2
 800a380:	2101      	movs	r1, #1
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f004 ff45 	bl	800f212 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 800a388:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 800a38a:	2340      	movs	r3, #64	; 0x40
 800a38c:	2101      	movs	r1, #1
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f005 f82e 	bl	800f3f0 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800a394:	2300      	movs	r3, #0
  }
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b082      	sub	sp, #8
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 800a3aa:	2181      	movs	r1, #129	; 0x81
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f004 ff56 	bl	800f25e <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f004 ff52 	bl	800f25e <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d007      	beq.n	800a3ea <USBD_Midi_Setup+0x26>
 800a3da:	2b20      	cmp	r3, #32
 800a3dc:	d10b      	bne.n	800a3f6 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f001 f937 	bl	800b654 <USBD_CtlError>
      return USBD_FAIL;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e006      	b.n	800a3f8 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f001 f931 	bl	800b654 <USBD_CtlError>
      return USBD_FAIL;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e000      	b.n	800a3f8 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2265      	movs	r2, #101	; 0x65
 800a40c:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 800a40e:	4b03      	ldr	r3, [pc, #12]	; (800a41c <USBD_Midi_GetCfgDesc+0x1c>)
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	200000ac 	.word	0x200000ac

0800a420 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4c2:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 800a4c4:	78fb      	ldrb	r3, [r7, #3]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f004 ffb2 	bl	800f432 <USBD_LL_GetRxDataSize>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a4d8:	2300      	movs	r3, #0
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	e00c      	b.n	800a4f8 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68f9      	ldr	r1, [r7, #12]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	440a      	add	r2, r1
 800a4ec:	2104      	movs	r1, #4
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	617b      	str	r3, [r7, #20]
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d3ed      	bcc.n	800a4de <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 800a502:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 800a504:	2340      	movs	r3, #64	; 0x40
 800a506:	2101      	movs	r1, #1
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f004 ff71 	bl	800f3f0 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	220a      	movs	r2, #10
 800a524:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 800a526:	4b03      	ldr	r3, [pc, #12]	; (800a534 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	20000114 	.word	0x20000114

0800a538 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a542:	2303      	movs	r3, #3
 800a544:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d005      	beq.n	800a558 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a558:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b086      	sub	sp, #24
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	60b9      	str	r1, [r7, #8]
 800a570:	4613      	mov	r3, r2
 800a572:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e01f      	b.n	800a5be <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d003      	beq.n	800a5a4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	79fa      	ldrb	r2, [r7, #7]
 800a5b0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f004 fdc6 	bl	800f144 <USBD_LL_Init>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a5bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3718      	adds	r7, #24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e016      	b.n	800a60c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00b      	beq.n	800a60a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fa:	f107 020e 	add.w	r2, r7, #14
 800a5fe:	4610      	mov	r0, r2
 800a600:	4798      	blx	r3
 800a602:	4602      	mov	r2, r0
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f004 fddd 	bl	800f1dc <USBD_LL_Start>
 800a622:	4603      	mov	r3, r0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	460b      	mov	r3, r1
 800a64c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a64e:	2303      	movs	r3, #3
 800a650:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d009      	beq.n	800a670 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	78fa      	ldrb	r2, [r7, #3]
 800a666:	4611      	mov	r1, r2
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	4798      	blx	r3
 800a66c:	4603      	mov	r3, r0
 800a66e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a670:	7bfb      	ldrb	r3, [r7, #15]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b082      	sub	sp, #8
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	460b      	mov	r3, r1
 800a684:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d007      	beq.n	800a6a0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	78fa      	ldrb	r2, [r7, #3]
 800a69a:	4611      	mov	r1, r2
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	4798      	blx	r3
  }

  return USBD_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 ff8f 	bl	800b5e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6de:	f003 031f 	and.w	r3, r3, #31
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d01a      	beq.n	800a71c <USBD_LL_SetupStage+0x72>
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d822      	bhi.n	800a730 <USBD_LL_SetupStage+0x86>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <USBD_LL_SetupStage+0x4a>
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d00a      	beq.n	800a708 <USBD_LL_SetupStage+0x5e>
 800a6f2:	e01d      	b.n	800a730 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fa61 	bl	800abc4 <USBD_StdDevReq>
 800a702:	4603      	mov	r3, r0
 800a704:	73fb      	strb	r3, [r7, #15]
      break;
 800a706:	e020      	b.n	800a74a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fac5 	bl	800aca0 <USBD_StdItfReq>
 800a716:	4603      	mov	r3, r0
 800a718:	73fb      	strb	r3, [r7, #15]
      break;
 800a71a:	e016      	b.n	800a74a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fb04 	bl	800ad32 <USBD_StdEPReq>
 800a72a:	4603      	mov	r3, r0
 800a72c:	73fb      	strb	r3, [r7, #15]
      break;
 800a72e:	e00c      	b.n	800a74a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a736:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	4619      	mov	r1, r3
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f004 fdac 	bl	800f29c <USBD_LL_StallEP>
 800a744:	4603      	mov	r3, r0
 800a746:	73fb      	strb	r3, [r7, #15]
      break;
 800a748:	bf00      	nop
  }

  return ret;
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	460b      	mov	r3, r1
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a762:	7afb      	ldrb	r3, [r7, #11]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d138      	bne.n	800a7da <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a76e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a776:	2b03      	cmp	r3, #3
 800a778:	d14a      	bne.n	800a810 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	689a      	ldr	r2, [r3, #8]
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	429a      	cmp	r2, r3
 800a784:	d913      	bls.n	800a7ae <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	689a      	ldr	r2, [r3, #8]
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	68da      	ldr	r2, [r3, #12]
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	4293      	cmp	r3, r2
 800a79e:	bf28      	it	cs
 800a7a0:	4613      	movcs	r3, r2
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f000 fff1 	bl	800b78e <USBD_CtlContinueRx>
 800a7ac:	e030      	b.n	800a810 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d10b      	bne.n	800a7d2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d005      	beq.n	800a7d2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 ffec 	bl	800b7b0 <USBD_CtlSendStatus>
 800a7d8:	e01a      	b.n	800a810 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	d114      	bne.n	800a810 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00e      	beq.n	800a810 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	7afa      	ldrb	r2, [r7, #11]
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	4798      	blx	r3
 800a802:	4603      	mov	r3, r0
 800a804:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	e000      	b.n	800a812 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3718      	adds	r7, #24
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b086      	sub	sp, #24
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	460b      	mov	r3, r1
 800a824:	607a      	str	r2, [r7, #4]
 800a826:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a828:	7afb      	ldrb	r3, [r7, #11]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d16b      	bne.n	800a906 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3314      	adds	r3, #20
 800a832:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d156      	bne.n	800a8ec <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	689a      	ldr	r2, [r3, #8]
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	429a      	cmp	r2, r3
 800a848:	d914      	bls.n	800a874 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	1ad2      	subs	r2, r2, r3
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	461a      	mov	r2, r3
 800a85e:	6879      	ldr	r1, [r7, #4]
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 ff83 	bl	800b76c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a866:	2300      	movs	r3, #0
 800a868:	2200      	movs	r2, #0
 800a86a:	2100      	movs	r1, #0
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f004 fdbf 	bl	800f3f0 <USBD_LL_PrepareReceive>
 800a872:	e03b      	b.n	800a8ec <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	68da      	ldr	r2, [r3, #12]
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d11c      	bne.n	800a8ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a888:	429a      	cmp	r2, r3
 800a88a:	d316      	bcc.n	800a8ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a896:	429a      	cmp	r2, r3
 800a898:	d20f      	bcs.n	800a8ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a89a:	2200      	movs	r2, #0
 800a89c:	2100      	movs	r1, #0
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f000 ff64 	bl	800b76c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f004 fd9c 	bl	800f3f0 <USBD_LL_PrepareReceive>
 800a8b8:	e018      	b.n	800a8ec <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d10b      	bne.n	800a8de <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d005      	beq.n	800a8de <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8de:	2180      	movs	r1, #128	; 0x80
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f004 fcdb 	bl	800f29c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f000 ff75 	bl	800b7d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d122      	bne.n	800a93c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7ff fe98 	bl	800a62c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a904:	e01a      	b.n	800a93c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d114      	bne.n	800a93c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00e      	beq.n	800a93c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	7afa      	ldrb	r2, [r7, #11]
 800a928:	4611      	mov	r1, r2
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	4798      	blx	r3
 800a92e:	4603      	mov	r3, r0
 800a930:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a932:	7dfb      	ldrb	r3, [r7, #23]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a938:	7dfb      	ldrb	r3, [r7, #23]
 800a93a:	e000      	b.n	800a93e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3718      	adds	r7, #24
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b082      	sub	sp, #8
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a976:	2303      	movs	r3, #3
 800a978:	e02f      	b.n	800a9da <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00f      	beq.n	800a9a4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d009      	beq.n	800a9a4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	6852      	ldr	r2, [r2, #4]
 800a99c:	b2d2      	uxtb	r2, r2
 800a99e:	4611      	mov	r1, r2
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9a4:	2340      	movs	r3, #64	; 0x40
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f004 fc31 	bl	800f212 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2240      	movs	r2, #64	; 0x40
 800a9bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9c0:	2340      	movs	r3, #64	; 0x40
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2180      	movs	r1, #128	; 0x80
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f004 fc23 	bl	800f212 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2240      	movs	r2, #64	; 0x40
 800a9d6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b083      	sub	sp, #12
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	78fa      	ldrb	r2, [r7, #3]
 800a9f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b083      	sub	sp, #12
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2204      	movs	r2, #4
 800aa1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b04      	cmp	r3, #4
 800aa40:	d106      	bne.n	800aa50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d101      	bne.n	800aa74 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e012      	b.n	800aa9a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d10b      	bne.n	800aa98 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa86:	69db      	ldr	r3, [r3, #28]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d005      	beq.n	800aa98 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	460b      	mov	r3, r1
 800aaac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e014      	b.n	800aae6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	2b03      	cmp	r3, #3
 800aac6:	d10d      	bne.n	800aae4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aace:	6a1b      	ldr	r3, [r3, #32]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d007      	beq.n	800aae4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	78fa      	ldrb	r2, [r7, #3]
 800aade:	4611      	mov	r1, r2
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b082      	sub	sp, #8
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e014      	b.n	800ab32 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b03      	cmp	r3, #3
 800ab12:	d10d      	bne.n	800ab30 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d007      	beq.n	800ab30 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	78fa      	ldrb	r2, [r7, #3]
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b083      	sub	sp, #12
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d009      	beq.n	800ab7e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	6852      	ldr	r2, [r2, #4]
 800ab76:	b2d2      	uxtb	r2, r2
 800ab78:	4611      	mov	r1, r2
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	4798      	blx	r3
  }

  return USBD_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aba6:	8a3b      	ldrh	r3, [r7, #16]
 800aba8:	021b      	lsls	r3, r3, #8
 800abaa:	b21a      	sxth	r2, r3
 800abac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	b21b      	sxth	r3, r3
 800abb4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800abb6:	89fb      	ldrh	r3, [r7, #14]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	371c      	adds	r7, #28
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abda:	2b40      	cmp	r3, #64	; 0x40
 800abdc:	d005      	beq.n	800abea <USBD_StdDevReq+0x26>
 800abde:	2b40      	cmp	r3, #64	; 0x40
 800abe0:	d853      	bhi.n	800ac8a <USBD_StdDevReq+0xc6>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00b      	beq.n	800abfe <USBD_StdDevReq+0x3a>
 800abe6:	2b20      	cmp	r3, #32
 800abe8:	d14f      	bne.n	800ac8a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	4798      	blx	r3
 800abf8:	4603      	mov	r3, r0
 800abfa:	73fb      	strb	r3, [r7, #15]
      break;
 800abfc:	e04a      	b.n	800ac94 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	785b      	ldrb	r3, [r3, #1]
 800ac02:	2b09      	cmp	r3, #9
 800ac04:	d83b      	bhi.n	800ac7e <USBD_StdDevReq+0xba>
 800ac06:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <USBD_StdDevReq+0x48>)
 800ac08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0c:	0800ac61 	.word	0x0800ac61
 800ac10:	0800ac75 	.word	0x0800ac75
 800ac14:	0800ac7f 	.word	0x0800ac7f
 800ac18:	0800ac6b 	.word	0x0800ac6b
 800ac1c:	0800ac7f 	.word	0x0800ac7f
 800ac20:	0800ac3f 	.word	0x0800ac3f
 800ac24:	0800ac35 	.word	0x0800ac35
 800ac28:	0800ac7f 	.word	0x0800ac7f
 800ac2c:	0800ac57 	.word	0x0800ac57
 800ac30:	0800ac49 	.word	0x0800ac49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f9de 	bl	800aff8 <USBD_GetDescriptor>
          break;
 800ac3c:	e024      	b.n	800ac88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fb43 	bl	800b2cc <USBD_SetAddress>
          break;
 800ac46:	e01f      	b.n	800ac88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fb82 	bl	800b354 <USBD_SetConfig>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73fb      	strb	r3, [r7, #15]
          break;
 800ac54:	e018      	b.n	800ac88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ac56:	6839      	ldr	r1, [r7, #0]
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fc21 	bl	800b4a0 <USBD_GetConfig>
          break;
 800ac5e:	e013      	b.n	800ac88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fc52 	bl	800b50c <USBD_GetStatus>
          break;
 800ac68:	e00e      	b.n	800ac88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ac6a:	6839      	ldr	r1, [r7, #0]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fc81 	bl	800b574 <USBD_SetFeature>
          break;
 800ac72:	e009      	b.n	800ac88 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ac74:	6839      	ldr	r1, [r7, #0]
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 fc90 	bl	800b59c <USBD_ClrFeature>
          break;
 800ac7c:	e004      	b.n	800ac88 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fce7 	bl	800b654 <USBD_CtlError>
          break;
 800ac86:	bf00      	nop
      }
      break;
 800ac88:	e004      	b.n	800ac94 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fce1 	bl	800b654 <USBD_CtlError>
      break;
 800ac92:	bf00      	nop
  }

  return ret;
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop

0800aca0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acb6:	2b40      	cmp	r3, #64	; 0x40
 800acb8:	d005      	beq.n	800acc6 <USBD_StdItfReq+0x26>
 800acba:	2b40      	cmp	r3, #64	; 0x40
 800acbc:	d82f      	bhi.n	800ad1e <USBD_StdItfReq+0x7e>
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <USBD_StdItfReq+0x26>
 800acc2:	2b20      	cmp	r3, #32
 800acc4:	d12b      	bne.n	800ad1e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800accc:	b2db      	uxtb	r3, r3
 800acce:	3b01      	subs	r3, #1
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d81d      	bhi.n	800ad10 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	889b      	ldrh	r3, [r3, #4]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d813      	bhi.n	800ad06 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	4798      	blx	r3
 800acec:	4603      	mov	r3, r0
 800acee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	88db      	ldrh	r3, [r3, #6]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d110      	bne.n	800ad1a <USBD_StdItfReq+0x7a>
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10d      	bne.n	800ad1a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fd56 	bl	800b7b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ad04:	e009      	b.n	800ad1a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fca3 	bl	800b654 <USBD_CtlError>
          break;
 800ad0e:	e004      	b.n	800ad1a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fc9e 	bl	800b654 <USBD_CtlError>
          break;
 800ad18:	e000      	b.n	800ad1c <USBD_StdItfReq+0x7c>
          break;
 800ad1a:	bf00      	nop
      }
      break;
 800ad1c:	e004      	b.n	800ad28 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fc97 	bl	800b654 <USBD_CtlError>
      break;
 800ad26:	bf00      	nop
  }

  return ret;
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b084      	sub	sp, #16
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	889b      	ldrh	r3, [r3, #4]
 800ad44:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad4e:	2b40      	cmp	r3, #64	; 0x40
 800ad50:	d007      	beq.n	800ad62 <USBD_StdEPReq+0x30>
 800ad52:	2b40      	cmp	r3, #64	; 0x40
 800ad54:	f200 8145 	bhi.w	800afe2 <USBD_StdEPReq+0x2b0>
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00c      	beq.n	800ad76 <USBD_StdEPReq+0x44>
 800ad5c:	2b20      	cmp	r3, #32
 800ad5e:	f040 8140 	bne.w	800afe2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	4798      	blx	r3
 800ad70:	4603      	mov	r3, r0
 800ad72:	73fb      	strb	r3, [r7, #15]
      break;
 800ad74:	e13a      	b.n	800afec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d007      	beq.n	800ad8e <USBD_StdEPReq+0x5c>
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	f300 8129 	bgt.w	800afd6 <USBD_StdEPReq+0x2a4>
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d07f      	beq.n	800ae88 <USBD_StdEPReq+0x156>
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d03c      	beq.n	800ae06 <USBD_StdEPReq+0xd4>
 800ad8c:	e123      	b.n	800afd6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d002      	beq.n	800ada0 <USBD_StdEPReq+0x6e>
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d016      	beq.n	800adcc <USBD_StdEPReq+0x9a>
 800ad9e:	e02c      	b.n	800adfa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ada0:	7bbb      	ldrb	r3, [r7, #14]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00d      	beq.n	800adc2 <USBD_StdEPReq+0x90>
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	2b80      	cmp	r3, #128	; 0x80
 800adaa:	d00a      	beq.n	800adc2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800adac:	7bbb      	ldrb	r3, [r7, #14]
 800adae:	4619      	mov	r1, r3
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f004 fa73 	bl	800f29c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800adb6:	2180      	movs	r1, #128	; 0x80
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f004 fa6f 	bl	800f29c <USBD_LL_StallEP>
 800adbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800adc0:	e020      	b.n	800ae04 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fc45 	bl	800b654 <USBD_CtlError>
              break;
 800adca:	e01b      	b.n	800ae04 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	885b      	ldrh	r3, [r3, #2]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10e      	bne.n	800adf2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800add4:	7bbb      	ldrb	r3, [r7, #14]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00b      	beq.n	800adf2 <USBD_StdEPReq+0xc0>
 800adda:	7bbb      	ldrb	r3, [r7, #14]
 800addc:	2b80      	cmp	r3, #128	; 0x80
 800adde:	d008      	beq.n	800adf2 <USBD_StdEPReq+0xc0>
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	88db      	ldrh	r3, [r3, #6]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d104      	bne.n	800adf2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ade8:	7bbb      	ldrb	r3, [r7, #14]
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f004 fa55 	bl	800f29c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fcdc 	bl	800b7b0 <USBD_CtlSendStatus>

              break;
 800adf8:	e004      	b.n	800ae04 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fc29 	bl	800b654 <USBD_CtlError>
              break;
 800ae02:	bf00      	nop
          }
          break;
 800ae04:	e0ec      	b.n	800afe0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d002      	beq.n	800ae18 <USBD_StdEPReq+0xe6>
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d016      	beq.n	800ae44 <USBD_StdEPReq+0x112>
 800ae16:	e030      	b.n	800ae7a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00d      	beq.n	800ae3a <USBD_StdEPReq+0x108>
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	2b80      	cmp	r3, #128	; 0x80
 800ae22:	d00a      	beq.n	800ae3a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f004 fa37 	bl	800f29c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae2e:	2180      	movs	r1, #128	; 0x80
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f004 fa33 	bl	800f29c <USBD_LL_StallEP>
 800ae36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae38:	e025      	b.n	800ae86 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fc09 	bl	800b654 <USBD_CtlError>
              break;
 800ae42:	e020      	b.n	800ae86 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	885b      	ldrh	r3, [r3, #2]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d11b      	bne.n	800ae84 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae4c:	7bbb      	ldrb	r3, [r7, #14]
 800ae4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d004      	beq.n	800ae60 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f004 fa3d 	bl	800f2da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fca5 	bl	800b7b0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	4798      	blx	r3
 800ae74:	4603      	mov	r3, r0
 800ae76:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ae78:	e004      	b.n	800ae84 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fbe9 	bl	800b654 <USBD_CtlError>
              break;
 800ae82:	e000      	b.n	800ae86 <USBD_StdEPReq+0x154>
              break;
 800ae84:	bf00      	nop
          }
          break;
 800ae86:	e0ab      	b.n	800afe0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d002      	beq.n	800ae9a <USBD_StdEPReq+0x168>
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d032      	beq.n	800aefe <USBD_StdEPReq+0x1cc>
 800ae98:	e097      	b.n	800afca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae9a:	7bbb      	ldrb	r3, [r7, #14]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d007      	beq.n	800aeb0 <USBD_StdEPReq+0x17e>
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	2b80      	cmp	r3, #128	; 0x80
 800aea4:	d004      	beq.n	800aeb0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fbd3 	bl	800b654 <USBD_CtlError>
                break;
 800aeae:	e091      	b.n	800afd4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aeb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	da0b      	bge.n	800aed0 <USBD_StdEPReq+0x19e>
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aebe:	4613      	mov	r3, r2
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	3310      	adds	r3, #16
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	4413      	add	r3, r2
 800aecc:	3304      	adds	r3, #4
 800aece:	e00b      	b.n	800aee8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aed6:	4613      	mov	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	4413      	add	r3, r2
 800aee6:	3304      	adds	r3, #4
 800aee8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2202      	movs	r2, #2
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fc1d 	bl	800b736 <USBD_CtlSendData>
              break;
 800aefc:	e06a      	b.n	800afd4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aefe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af02:	2b00      	cmp	r3, #0
 800af04:	da11      	bge.n	800af2a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af06:	7bbb      	ldrb	r3, [r7, #14]
 800af08:	f003 020f 	and.w	r2, r3, #15
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	4613      	mov	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	440b      	add	r3, r1
 800af18:	3324      	adds	r3, #36	; 0x24
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d117      	bne.n	800af50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fb96 	bl	800b654 <USBD_CtlError>
                  break;
 800af28:	e054      	b.n	800afd4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	f003 020f 	and.w	r2, r3, #15
 800af30:	6879      	ldr	r1, [r7, #4]
 800af32:	4613      	mov	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	440b      	add	r3, r1
 800af3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af40:	881b      	ldrh	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d104      	bne.n	800af50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fb83 	bl	800b654 <USBD_CtlError>
                  break;
 800af4e:	e041      	b.n	800afd4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af54:	2b00      	cmp	r3, #0
 800af56:	da0b      	bge.n	800af70 <USBD_StdEPReq+0x23e>
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af5e:	4613      	mov	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	3310      	adds	r3, #16
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	4413      	add	r3, r2
 800af6c:	3304      	adds	r3, #4
 800af6e:	e00b      	b.n	800af88 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af70:	7bbb      	ldrb	r3, [r7, #14]
 800af72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af76:	4613      	mov	r3, r2
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	4413      	add	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	4413      	add	r3, r2
 800af86:	3304      	adds	r3, #4
 800af88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d002      	beq.n	800af96 <USBD_StdEPReq+0x264>
 800af90:	7bbb      	ldrb	r3, [r7, #14]
 800af92:	2b80      	cmp	r3, #128	; 0x80
 800af94:	d103      	bne.n	800af9e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	e00e      	b.n	800afbc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af9e:	7bbb      	ldrb	r3, [r7, #14]
 800afa0:	4619      	mov	r1, r3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f004 f9b8 	bl	800f318 <USBD_LL_IsStallEP>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2201      	movs	r2, #1
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	e002      	b.n	800afbc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	2200      	movs	r2, #0
 800afba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2202      	movs	r2, #2
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fbb7 	bl	800b736 <USBD_CtlSendData>
              break;
 800afc8:	e004      	b.n	800afd4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fb41 	bl	800b654 <USBD_CtlError>
              break;
 800afd2:	bf00      	nop
          }
          break;
 800afd4:	e004      	b.n	800afe0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fb3b 	bl	800b654 <USBD_CtlError>
          break;
 800afde:	bf00      	nop
      }
      break;
 800afe0:	e004      	b.n	800afec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fb35 	bl	800b654 <USBD_CtlError>
      break;
 800afea:	bf00      	nop
  }

  return ret;
 800afec:	7bfb      	ldrb	r3, [r7, #15]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b002:	2300      	movs	r3, #0
 800b004:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b006:	2300      	movs	r3, #0
 800b008:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	885b      	ldrh	r3, [r3, #2]
 800b012:	0a1b      	lsrs	r3, r3, #8
 800b014:	b29b      	uxth	r3, r3
 800b016:	3b01      	subs	r3, #1
 800b018:	2b06      	cmp	r3, #6
 800b01a:	f200 8128 	bhi.w	800b26e <USBD_GetDescriptor+0x276>
 800b01e:	a201      	add	r2, pc, #4	; (adr r2, 800b024 <USBD_GetDescriptor+0x2c>)
 800b020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b024:	0800b041 	.word	0x0800b041
 800b028:	0800b059 	.word	0x0800b059
 800b02c:	0800b099 	.word	0x0800b099
 800b030:	0800b26f 	.word	0x0800b26f
 800b034:	0800b26f 	.word	0x0800b26f
 800b038:	0800b20f 	.word	0x0800b20f
 800b03c:	0800b23b 	.word	0x0800b23b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	7c12      	ldrb	r2, [r2, #16]
 800b04c:	f107 0108 	add.w	r1, r7, #8
 800b050:	4610      	mov	r0, r2
 800b052:	4798      	blx	r3
 800b054:	60f8      	str	r0, [r7, #12]
      break;
 800b056:	e112      	b.n	800b27e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	7c1b      	ldrb	r3, [r3, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10d      	bne.n	800b07c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b068:	f107 0208 	add.w	r2, r7, #8
 800b06c:	4610      	mov	r0, r2
 800b06e:	4798      	blx	r3
 800b070:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3301      	adds	r3, #1
 800b076:	2202      	movs	r2, #2
 800b078:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b07a:	e100      	b.n	800b27e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b084:	f107 0208 	add.w	r2, r7, #8
 800b088:	4610      	mov	r0, r2
 800b08a:	4798      	blx	r3
 800b08c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	3301      	adds	r3, #1
 800b092:	2202      	movs	r2, #2
 800b094:	701a      	strb	r2, [r3, #0]
      break;
 800b096:	e0f2      	b.n	800b27e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	885b      	ldrh	r3, [r3, #2]
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b05      	cmp	r3, #5
 800b0a0:	f200 80ac 	bhi.w	800b1fc <USBD_GetDescriptor+0x204>
 800b0a4:	a201      	add	r2, pc, #4	; (adr r2, 800b0ac <USBD_GetDescriptor+0xb4>)
 800b0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0aa:	bf00      	nop
 800b0ac:	0800b0c5 	.word	0x0800b0c5
 800b0b0:	0800b0f9 	.word	0x0800b0f9
 800b0b4:	0800b12d 	.word	0x0800b12d
 800b0b8:	0800b161 	.word	0x0800b161
 800b0bc:	0800b195 	.word	0x0800b195
 800b0c0:	0800b1c9 	.word	0x0800b1c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00b      	beq.n	800b0e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	7c12      	ldrb	r2, [r2, #16]
 800b0dc:	f107 0108 	add.w	r1, r7, #8
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	4798      	blx	r3
 800b0e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0e6:	e091      	b.n	800b20c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fab2 	bl	800b654 <USBD_CtlError>
            err++;
 800b0f0:	7afb      	ldrb	r3, [r7, #11]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b0f6:	e089      	b.n	800b20c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00b      	beq.n	800b11c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	7c12      	ldrb	r2, [r2, #16]
 800b110:	f107 0108 	add.w	r1, r7, #8
 800b114:	4610      	mov	r0, r2
 800b116:	4798      	blx	r3
 800b118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b11a:	e077      	b.n	800b20c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fa98 	bl	800b654 <USBD_CtlError>
            err++;
 800b124:	7afb      	ldrb	r3, [r7, #11]
 800b126:	3301      	adds	r3, #1
 800b128:	72fb      	strb	r3, [r7, #11]
          break;
 800b12a:	e06f      	b.n	800b20c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00b      	beq.n	800b150 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	7c12      	ldrb	r2, [r2, #16]
 800b144:	f107 0108 	add.w	r1, r7, #8
 800b148:	4610      	mov	r0, r2
 800b14a:	4798      	blx	r3
 800b14c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b14e:	e05d      	b.n	800b20c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fa7e 	bl	800b654 <USBD_CtlError>
            err++;
 800b158:	7afb      	ldrb	r3, [r7, #11]
 800b15a:	3301      	adds	r3, #1
 800b15c:	72fb      	strb	r3, [r7, #11]
          break;
 800b15e:	e055      	b.n	800b20c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00b      	beq.n	800b184 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	7c12      	ldrb	r2, [r2, #16]
 800b178:	f107 0108 	add.w	r1, r7, #8
 800b17c:	4610      	mov	r0, r2
 800b17e:	4798      	blx	r3
 800b180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b182:	e043      	b.n	800b20c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fa64 	bl	800b654 <USBD_CtlError>
            err++;
 800b18c:	7afb      	ldrb	r3, [r7, #11]
 800b18e:	3301      	adds	r3, #1
 800b190:	72fb      	strb	r3, [r7, #11]
          break;
 800b192:	e03b      	b.n	800b20c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00b      	beq.n	800b1b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1a6:	695b      	ldr	r3, [r3, #20]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	7c12      	ldrb	r2, [r2, #16]
 800b1ac:	f107 0108 	add.w	r1, r7, #8
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	4798      	blx	r3
 800b1b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1b6:	e029      	b.n	800b20c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fa4a 	bl	800b654 <USBD_CtlError>
            err++;
 800b1c0:	7afb      	ldrb	r3, [r7, #11]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1c6:	e021      	b.n	800b20c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00b      	beq.n	800b1ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	7c12      	ldrb	r2, [r2, #16]
 800b1e0:	f107 0108 	add.w	r1, r7, #8
 800b1e4:	4610      	mov	r0, r2
 800b1e6:	4798      	blx	r3
 800b1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ea:	e00f      	b.n	800b20c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fa30 	bl	800b654 <USBD_CtlError>
            err++;
 800b1f4:	7afb      	ldrb	r3, [r7, #11]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1fa:	e007      	b.n	800b20c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b1fc:	6839      	ldr	r1, [r7, #0]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fa28 	bl	800b654 <USBD_CtlError>
          err++;
 800b204:	7afb      	ldrb	r3, [r7, #11]
 800b206:	3301      	adds	r3, #1
 800b208:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b20a:	bf00      	nop
      }
      break;
 800b20c:	e037      	b.n	800b27e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	7c1b      	ldrb	r3, [r3, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d109      	bne.n	800b22a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21e:	f107 0208 	add.w	r2, r7, #8
 800b222:	4610      	mov	r0, r2
 800b224:	4798      	blx	r3
 800b226:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b228:	e029      	b.n	800b27e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fa11 	bl	800b654 <USBD_CtlError>
        err++;
 800b232:	7afb      	ldrb	r3, [r7, #11]
 800b234:	3301      	adds	r3, #1
 800b236:	72fb      	strb	r3, [r7, #11]
      break;
 800b238:	e021      	b.n	800b27e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	7c1b      	ldrb	r3, [r3, #16]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10d      	bne.n	800b25e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24a:	f107 0208 	add.w	r2, r7, #8
 800b24e:	4610      	mov	r0, r2
 800b250:	4798      	blx	r3
 800b252:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3301      	adds	r3, #1
 800b258:	2207      	movs	r2, #7
 800b25a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b25c:	e00f      	b.n	800b27e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f9f7 	bl	800b654 <USBD_CtlError>
        err++;
 800b266:	7afb      	ldrb	r3, [r7, #11]
 800b268:	3301      	adds	r3, #1
 800b26a:	72fb      	strb	r3, [r7, #11]
      break;
 800b26c:	e007      	b.n	800b27e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 f9ef 	bl	800b654 <USBD_CtlError>
      err++;
 800b276:	7afb      	ldrb	r3, [r7, #11]
 800b278:	3301      	adds	r3, #1
 800b27a:	72fb      	strb	r3, [r7, #11]
      break;
 800b27c:	bf00      	nop
  }

  if (err != 0U)
 800b27e:	7afb      	ldrb	r3, [r7, #11]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d11e      	bne.n	800b2c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	88db      	ldrh	r3, [r3, #6]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d016      	beq.n	800b2ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b28c:	893b      	ldrh	r3, [r7, #8]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00e      	beq.n	800b2b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	88da      	ldrh	r2, [r3, #6]
 800b296:	893b      	ldrh	r3, [r7, #8]
 800b298:	4293      	cmp	r3, r2
 800b29a:	bf28      	it	cs
 800b29c:	4613      	movcs	r3, r2
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2a2:	893b      	ldrh	r3, [r7, #8]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	68f9      	ldr	r1, [r7, #12]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fa44 	bl	800b736 <USBD_CtlSendData>
 800b2ae:	e009      	b.n	800b2c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f9ce 	bl	800b654 <USBD_CtlError>
 800b2b8:	e004      	b.n	800b2c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fa78 	bl	800b7b0 <USBD_CtlSendStatus>
 800b2c0:	e000      	b.n	800b2c4 <USBD_GetDescriptor+0x2cc>
    return;
 800b2c2:	bf00      	nop
  }
}
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop

0800b2cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	889b      	ldrh	r3, [r3, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d131      	bne.n	800b342 <USBD_SetAddress+0x76>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	88db      	ldrh	r3, [r3, #6]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d12d      	bne.n	800b342 <USBD_SetAddress+0x76>
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	885b      	ldrh	r3, [r3, #2]
 800b2ea:	2b7f      	cmp	r3, #127	; 0x7f
 800b2ec:	d829      	bhi.n	800b342 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	885b      	ldrh	r3, [r3, #2]
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b03      	cmp	r3, #3
 800b304:	d104      	bne.n	800b310 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b306:	6839      	ldr	r1, [r7, #0]
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f9a3 	bl	800b654 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b30e:	e01d      	b.n	800b34c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	7bfa      	ldrb	r2, [r7, #15]
 800b314:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b318:	7bfb      	ldrb	r3, [r7, #15]
 800b31a:	4619      	mov	r1, r3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f004 f827 	bl	800f370 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fa44 	bl	800b7b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b328:	7bfb      	ldrb	r3, [r7, #15]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d004      	beq.n	800b338 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2202      	movs	r2, #2
 800b332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b336:	e009      	b.n	800b34c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b340:	e004      	b.n	800b34c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f985 	bl	800b654 <USBD_CtlError>
  }
}
 800b34a:	bf00      	nop
 800b34c:	bf00      	nop
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	885b      	ldrh	r3, [r3, #2]
 800b366:	b2da      	uxtb	r2, r3
 800b368:	4b4c      	ldr	r3, [pc, #304]	; (800b49c <USBD_SetConfig+0x148>)
 800b36a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b36c:	4b4b      	ldr	r3, [pc, #300]	; (800b49c <USBD_SetConfig+0x148>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d905      	bls.n	800b380 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f96c 	bl	800b654 <USBD_CtlError>
    return USBD_FAIL;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e088      	b.n	800b492 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b02      	cmp	r3, #2
 800b38a:	d002      	beq.n	800b392 <USBD_SetConfig+0x3e>
 800b38c:	2b03      	cmp	r3, #3
 800b38e:	d025      	beq.n	800b3dc <USBD_SetConfig+0x88>
 800b390:	e071      	b.n	800b476 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b392:	4b42      	ldr	r3, [pc, #264]	; (800b49c <USBD_SetConfig+0x148>)
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d01c      	beq.n	800b3d4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b39a:	4b40      	ldr	r3, [pc, #256]	; (800b49c <USBD_SetConfig+0x148>)
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3a4:	4b3d      	ldr	r3, [pc, #244]	; (800b49c <USBD_SetConfig+0x148>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7ff f949 	bl	800a642 <USBD_SetClassConfig>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 f949 	bl	800b654 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3c2:	e065      	b.n	800b490 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f9f3 	bl	800b7b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2203      	movs	r2, #3
 800b3ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b3d2:	e05d      	b.n	800b490 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f9eb 	bl	800b7b0 <USBD_CtlSendStatus>
      break;
 800b3da:	e059      	b.n	800b490 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b3dc:	4b2f      	ldr	r3, [pc, #188]	; (800b49c <USBD_SetConfig+0x148>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d112      	bne.n	800b40a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2202      	movs	r2, #2
 800b3e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b3ec:	4b2b      	ldr	r3, [pc, #172]	; (800b49c <USBD_SetConfig+0x148>)
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3f6:	4b29      	ldr	r3, [pc, #164]	; (800b49c <USBD_SetConfig+0x148>)
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff f93c 	bl	800a67a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f9d4 	bl	800b7b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b408:	e042      	b.n	800b490 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b40a:	4b24      	ldr	r3, [pc, #144]	; (800b49c <USBD_SetConfig+0x148>)
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	461a      	mov	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	429a      	cmp	r2, r3
 800b416:	d02a      	beq.n	800b46e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff f92a 	bl	800a67a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b426:	4b1d      	ldr	r3, [pc, #116]	; (800b49c <USBD_SetConfig+0x148>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b430:	4b1a      	ldr	r3, [pc, #104]	; (800b49c <USBD_SetConfig+0x148>)
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	4619      	mov	r1, r3
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f7ff f903 	bl	800a642 <USBD_SetClassConfig>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00f      	beq.n	800b466 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 f903 	bl	800b654 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	b2db      	uxtb	r3, r3
 800b454:	4619      	mov	r1, r3
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7ff f90f 	bl	800a67a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2202      	movs	r2, #2
 800b460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b464:	e014      	b.n	800b490 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f9a2 	bl	800b7b0 <USBD_CtlSendStatus>
      break;
 800b46c:	e010      	b.n	800b490 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f99e 	bl	800b7b0 <USBD_CtlSendStatus>
      break;
 800b474:	e00c      	b.n	800b490 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f8eb 	bl	800b654 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b47e:	4b07      	ldr	r3, [pc, #28]	; (800b49c <USBD_SetConfig+0x148>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	4619      	mov	r1, r3
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f7ff f8f8 	bl	800a67a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b48a:	2303      	movs	r3, #3
 800b48c:	73fb      	strb	r3, [r7, #15]
      break;
 800b48e:	bf00      	nop
  }

  return ret;
 800b490:	7bfb      	ldrb	r3, [r7, #15]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	20000790 	.word	0x20000790

0800b4a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	88db      	ldrh	r3, [r3, #6]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d004      	beq.n	800b4bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b4b2:	6839      	ldr	r1, [r7, #0]
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f8cd 	bl	800b654 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4ba:	e023      	b.n	800b504 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	dc02      	bgt.n	800b4ce <USBD_GetConfig+0x2e>
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	dc03      	bgt.n	800b4d4 <USBD_GetConfig+0x34>
 800b4cc:	e015      	b.n	800b4fa <USBD_GetConfig+0x5a>
 800b4ce:	2b03      	cmp	r3, #3
 800b4d0:	d00b      	beq.n	800b4ea <USBD_GetConfig+0x4a>
 800b4d2:	e012      	b.n	800b4fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	3308      	adds	r3, #8
 800b4de:	2201      	movs	r2, #1
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f927 	bl	800b736 <USBD_CtlSendData>
        break;
 800b4e8:	e00c      	b.n	800b504 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	3304      	adds	r3, #4
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f91f 	bl	800b736 <USBD_CtlSendData>
        break;
 800b4f8:	e004      	b.n	800b504 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f8a9 	bl	800b654 <USBD_CtlError>
        break;
 800b502:	bf00      	nop
}
 800b504:	bf00      	nop
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	3b01      	subs	r3, #1
 800b520:	2b02      	cmp	r3, #2
 800b522:	d81e      	bhi.n	800b562 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	88db      	ldrh	r3, [r3, #6]
 800b528:	2b02      	cmp	r3, #2
 800b52a:	d004      	beq.n	800b536 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f890 	bl	800b654 <USBD_CtlError>
        break;
 800b534:	e01a      	b.n	800b56c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2201      	movs	r2, #1
 800b53a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b542:	2b00      	cmp	r3, #0
 800b544:	d005      	beq.n	800b552 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	f043 0202 	orr.w	r2, r3, #2
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	330c      	adds	r3, #12
 800b556:	2202      	movs	r2, #2
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 f8eb 	bl	800b736 <USBD_CtlSendData>
      break;
 800b560:	e004      	b.n	800b56c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f875 	bl	800b654 <USBD_CtlError>
      break;
 800b56a:	bf00      	nop
  }
}
 800b56c:	bf00      	nop
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	885b      	ldrh	r3, [r3, #2]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d106      	bne.n	800b594 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2201      	movs	r2, #1
 800b58a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f90e 	bl	800b7b0 <USBD_CtlSendStatus>
  }
}
 800b594:	bf00      	nop
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	d80b      	bhi.n	800b5cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	885b      	ldrh	r3, [r3, #2]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d10c      	bne.n	800b5d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f8f3 	bl	800b7b0 <USBD_CtlSendStatus>
      }
      break;
 800b5ca:	e004      	b.n	800b5d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b5cc:	6839      	ldr	r1, [r7, #0]
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f840 	bl	800b654 <USBD_CtlError>
      break;
 800b5d4:	e000      	b.n	800b5d8 <USBD_ClrFeature+0x3c>
      break;
 800b5d6:	bf00      	nop
  }
}
 800b5d8:	bf00      	nop
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	781a      	ldrb	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	781a      	ldrb	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	3301      	adds	r3, #1
 800b608:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f7ff fabc 	bl	800ab88 <SWAPBYTE>
 800b610:	4603      	mov	r3, r0
 800b612:	461a      	mov	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	3301      	adds	r3, #1
 800b61c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	3301      	adds	r3, #1
 800b622:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f7ff faaf 	bl	800ab88 <SWAPBYTE>
 800b62a:	4603      	mov	r3, r0
 800b62c:	461a      	mov	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	3301      	adds	r3, #1
 800b636:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	3301      	adds	r3, #1
 800b63c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7ff faa2 	bl	800ab88 <SWAPBYTE>
 800b644:	4603      	mov	r3, r0
 800b646:	461a      	mov	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	80da      	strh	r2, [r3, #6]
}
 800b64c:	bf00      	nop
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b65e:	2180      	movs	r1, #128	; 0x80
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f003 fe1b 	bl	800f29c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b666:	2100      	movs	r1, #0
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f003 fe17 	bl	800f29c <USBD_LL_StallEP>
}
 800b66e:	bf00      	nop
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b086      	sub	sp, #24
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	60f8      	str	r0, [r7, #12]
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d036      	beq.n	800b6fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b690:	6938      	ldr	r0, [r7, #16]
 800b692:	f000 f836 	bl	800b702 <USBD_GetLen>
 800b696:	4603      	mov	r3, r0
 800b698:	3301      	adds	r3, #1
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	005b      	lsls	r3, r3, #1
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b6a4:	7dfb      	ldrb	r3, [r7, #23]
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	7812      	ldrb	r2, [r2, #0]
 800b6ae:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6b0:	7dfb      	ldrb	r3, [r7, #23]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b6b6:	7dfb      	ldrb	r3, [r7, #23]
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	2203      	movs	r2, #3
 800b6be:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6c0:	7dfb      	ldrb	r3, [r7, #23]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b6c6:	e013      	b.n	800b6f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	693a      	ldr	r2, [r7, #16]
 800b6d0:	7812      	ldrb	r2, [r2, #0]
 800b6d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	613b      	str	r3, [r7, #16]
    idx++;
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	701a      	strb	r2, [r3, #0]
    idx++;
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1e7      	bne.n	800b6c8 <USBD_GetString+0x52>
 800b6f8:	e000      	b.n	800b6fc <USBD_GetString+0x86>
    return;
 800b6fa:	bf00      	nop
  }
}
 800b6fc:	3718      	adds	r7, #24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b702:	b480      	push	{r7}
 800b704:	b085      	sub	sp, #20
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b70a:	2300      	movs	r3, #0
 800b70c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b712:	e005      	b.n	800b720 <USBD_GetLen+0x1e>
  {
    len++;
 800b714:	7bfb      	ldrb	r3, [r7, #15]
 800b716:	3301      	adds	r3, #1
 800b718:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	3301      	adds	r3, #1
 800b71e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1f5      	bne.n	800b714 <USBD_GetLen+0x12>
  }

  return len;
 800b728:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3714      	adds	r7, #20
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2202      	movs	r2, #2
 800b746:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	2100      	movs	r1, #0
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f003 fe26 	bl	800f3ae <USBD_LL_Transmit>

  return USBD_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	2100      	movs	r1, #0
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f003 fe15 	bl	800f3ae <USBD_LL_Transmit>

  return USBD_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b084      	sub	sp, #16
 800b792:	af00      	add	r7, sp, #0
 800b794:	60f8      	str	r0, [r7, #12]
 800b796:	60b9      	str	r1, [r7, #8]
 800b798:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	2100      	movs	r1, #0
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f003 fe25 	bl	800f3f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2204      	movs	r2, #4
 800b7bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f003 fdf1 	bl	800f3ae <USBD_LL_Transmit>

  return USBD_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b082      	sub	sp, #8
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2205      	movs	r2, #5
 800b7e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f003 fdff 	bl	800f3f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	4603      	mov	r3, r0
 800b804:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b806:	79fb      	ldrb	r3, [r7, #7]
 800b808:	4a08      	ldr	r2, [pc, #32]	; (800b82c <disk_status+0x30>)
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	79fa      	ldrb	r2, [r7, #7]
 800b814:	4905      	ldr	r1, [pc, #20]	; (800b82c <disk_status+0x30>)
 800b816:	440a      	add	r2, r1
 800b818:	7a12      	ldrb	r2, [r2, #8]
 800b81a:	4610      	mov	r0, r2
 800b81c:	4798      	blx	r3
 800b81e:	4603      	mov	r3, r0
 800b820:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b822:	7bfb      	ldrb	r3, [r7, #15]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	200009bc 	.word	0x200009bc

0800b830 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	4603      	mov	r3, r0
 800b838:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b83a:	2300      	movs	r3, #0
 800b83c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b83e:	79fb      	ldrb	r3, [r7, #7]
 800b840:	4a0d      	ldr	r2, [pc, #52]	; (800b878 <disk_initialize+0x48>)
 800b842:	5cd3      	ldrb	r3, [r2, r3]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d111      	bne.n	800b86c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b848:	79fb      	ldrb	r3, [r7, #7]
 800b84a:	4a0b      	ldr	r2, [pc, #44]	; (800b878 <disk_initialize+0x48>)
 800b84c:	2101      	movs	r1, #1
 800b84e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b850:	79fb      	ldrb	r3, [r7, #7]
 800b852:	4a09      	ldr	r2, [pc, #36]	; (800b878 <disk_initialize+0x48>)
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	79fa      	ldrb	r2, [r7, #7]
 800b85e:	4906      	ldr	r1, [pc, #24]	; (800b878 <disk_initialize+0x48>)
 800b860:	440a      	add	r2, r1
 800b862:	7a12      	ldrb	r2, [r2, #8]
 800b864:	4610      	mov	r0, r2
 800b866:	4798      	blx	r3
 800b868:	4603      	mov	r3, r0
 800b86a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	200009bc 	.word	0x200009bc

0800b87c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b87c:	b590      	push	{r4, r7, lr}
 800b87e:	b087      	sub	sp, #28
 800b880:	af00      	add	r7, sp, #0
 800b882:	60b9      	str	r1, [r7, #8]
 800b884:	607a      	str	r2, [r7, #4]
 800b886:	603b      	str	r3, [r7, #0]
 800b888:	4603      	mov	r3, r0
 800b88a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
 800b88e:	4a0a      	ldr	r2, [pc, #40]	; (800b8b8 <disk_read+0x3c>)
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	689c      	ldr	r4, [r3, #8]
 800b898:	7bfb      	ldrb	r3, [r7, #15]
 800b89a:	4a07      	ldr	r2, [pc, #28]	; (800b8b8 <disk_read+0x3c>)
 800b89c:	4413      	add	r3, r2
 800b89e:	7a18      	ldrb	r0, [r3, #8]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	68b9      	ldr	r1, [r7, #8]
 800b8a6:	47a0      	blx	r4
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	371c      	adds	r7, #28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd90      	pop	{r4, r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	200009bc 	.word	0x200009bc

0800b8bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b8bc:	b590      	push	{r4, r7, lr}
 800b8be:	b087      	sub	sp, #28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60b9      	str	r1, [r7, #8]
 800b8c4:	607a      	str	r2, [r7, #4]
 800b8c6:	603b      	str	r3, [r7, #0]
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b8cc:	7bfb      	ldrb	r3, [r7, #15]
 800b8ce:	4a0a      	ldr	r2, [pc, #40]	; (800b8f8 <disk_write+0x3c>)
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4413      	add	r3, r2
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	68dc      	ldr	r4, [r3, #12]
 800b8d8:	7bfb      	ldrb	r3, [r7, #15]
 800b8da:	4a07      	ldr	r2, [pc, #28]	; (800b8f8 <disk_write+0x3c>)
 800b8dc:	4413      	add	r3, r2
 800b8de:	7a18      	ldrb	r0, [r3, #8]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	68b9      	ldr	r1, [r7, #8]
 800b8e6:	47a0      	blx	r4
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	371c      	adds	r7, #28
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd90      	pop	{r4, r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	200009bc 	.word	0x200009bc

0800b8fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	4603      	mov	r3, r0
 800b904:	603a      	str	r2, [r7, #0]
 800b906:	71fb      	strb	r3, [r7, #7]
 800b908:	460b      	mov	r3, r1
 800b90a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b90c:	79fb      	ldrb	r3, [r7, #7]
 800b90e:	4a09      	ldr	r2, [pc, #36]	; (800b934 <disk_ioctl+0x38>)
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	79fa      	ldrb	r2, [r7, #7]
 800b91a:	4906      	ldr	r1, [pc, #24]	; (800b934 <disk_ioctl+0x38>)
 800b91c:	440a      	add	r2, r1
 800b91e:	7a10      	ldrb	r0, [r2, #8]
 800b920:	79b9      	ldrb	r1, [r7, #6]
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	4798      	blx	r3
 800b926:	4603      	mov	r3, r0
 800b928:	73fb      	strb	r3, [r7, #15]
  return res;
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	200009bc 	.word	0x200009bc

0800b938 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	3301      	adds	r3, #1
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b948:	89fb      	ldrh	r3, [r7, #14]
 800b94a:	021b      	lsls	r3, r3, #8
 800b94c:	b21a      	sxth	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	b21b      	sxth	r3, r3
 800b954:	4313      	orrs	r3, r2
 800b956:	b21b      	sxth	r3, r3
 800b958:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b95a:	89fb      	ldrh	r3, [r7, #14]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3714      	adds	r7, #20
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3303      	adds	r3, #3
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	021b      	lsls	r3, r3, #8
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	3202      	adds	r2, #2
 800b980:	7812      	ldrb	r2, [r2, #0]
 800b982:	4313      	orrs	r3, r2
 800b984:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	021b      	lsls	r3, r3, #8
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	3201      	adds	r2, #1
 800b98e:	7812      	ldrb	r2, [r2, #0]
 800b990:	4313      	orrs	r3, r2
 800b992:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	021b      	lsls	r3, r3, #8
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	7812      	ldrb	r2, [r2, #0]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]
	return rv;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b083      	sub	sp, #12
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	887a      	ldrh	r2, [r7, #2]
 800b9c2:	b2d2      	uxtb	r2, r2
 800b9c4:	701a      	strb	r2, [r3, #0]
 800b9c6:	887b      	ldrh	r3, [r7, #2]
 800b9c8:	0a1b      	lsrs	r3, r3, #8
 800b9ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	1c5a      	adds	r2, r3, #1
 800b9d0:	607a      	str	r2, [r7, #4]
 800b9d2:	887a      	ldrh	r2, [r7, #2]
 800b9d4:	b2d2      	uxtb	r2, r2
 800b9d6:	701a      	strb	r2, [r3, #0]
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	1c5a      	adds	r2, r3, #1
 800b9f2:	607a      	str	r2, [r7, #4]
 800b9f4:	683a      	ldr	r2, [r7, #0]
 800b9f6:	b2d2      	uxtb	r2, r2
 800b9f8:	701a      	strb	r2, [r3, #0]
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	0a1b      	lsrs	r3, r3, #8
 800b9fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	607a      	str	r2, [r7, #4]
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	b2d2      	uxtb	r2, r2
 800ba0a:	701a      	strb	r2, [r3, #0]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	0a1b      	lsrs	r3, r3, #8
 800ba10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	1c5a      	adds	r2, r3, #1
 800ba16:	607a      	str	r2, [r7, #4]
 800ba18:	683a      	ldr	r2, [r7, #0]
 800ba1a:	b2d2      	uxtb	r2, r2
 800ba1c:	701a      	strb	r2, [r3, #0]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	0a1b      	lsrs	r3, r3, #8
 800ba22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	1c5a      	adds	r2, r3, #1
 800ba28:	607a      	str	r2, [r7, #4]
 800ba2a:	683a      	ldr	r2, [r7, #0]
 800ba2c:	b2d2      	uxtb	r2, r2
 800ba2e:	701a      	strb	r2, [r3, #0]
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ba3c:	b480      	push	{r7}
 800ba3e:	b087      	sub	sp, #28
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00d      	beq.n	800ba72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ba56:	693a      	ldr	r2, [r7, #16]
 800ba58:	1c53      	adds	r3, r2, #1
 800ba5a:	613b      	str	r3, [r7, #16]
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	1c59      	adds	r1, r3, #1
 800ba60:	6179      	str	r1, [r7, #20]
 800ba62:	7812      	ldrb	r2, [r2, #0]
 800ba64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	607b      	str	r3, [r7, #4]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1f1      	bne.n	800ba56 <mem_cpy+0x1a>
	}
}
 800ba72:	bf00      	nop
 800ba74:	371c      	adds	r7, #28
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ba7e:	b480      	push	{r7}
 800ba80:	b087      	sub	sp, #28
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	60f8      	str	r0, [r7, #12]
 800ba86:	60b9      	str	r1, [r7, #8]
 800ba88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	1c5a      	adds	r2, r3, #1
 800ba92:	617a      	str	r2, [r7, #20]
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	b2d2      	uxtb	r2, r2
 800ba98:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	607b      	str	r3, [r7, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1f3      	bne.n	800ba8e <mem_set+0x10>
}
 800baa6:	bf00      	nop
 800baa8:	bf00      	nop
 800baaa:	371c      	adds	r7, #28
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bab4:	b480      	push	{r7}
 800bab6:	b089      	sub	sp, #36	; 0x24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	61fb      	str	r3, [r7, #28]
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bac8:	2300      	movs	r3, #0
 800baca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	1c5a      	adds	r2, r3, #1
 800bad0:	61fa      	str	r2, [r7, #28]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	4619      	mov	r1, r3
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	1c5a      	adds	r2, r3, #1
 800bada:	61ba      	str	r2, [r7, #24]
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	1acb      	subs	r3, r1, r3
 800bae0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	3b01      	subs	r3, #1
 800bae6:	607b      	str	r3, [r7, #4]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <mem_cmp+0x40>
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d0eb      	beq.n	800bacc <mem_cmp+0x18>

	return r;
 800baf4:	697b      	ldr	r3, [r7, #20]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3724      	adds	r7, #36	; 0x24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bb02:	b480      	push	{r7}
 800bb04:	b083      	sub	sp, #12
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bb0c:	e002      	b.n	800bb14 <chk_chr+0x12>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	3301      	adds	r3, #1
 800bb12:	607b      	str	r3, [r7, #4]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d005      	beq.n	800bb28 <chk_chr+0x26>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	461a      	mov	r2, r3
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d1f2      	bne.n	800bb0e <chk_chr+0xc>
	return *str;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb42:	2300      	movs	r3, #0
 800bb44:	60bb      	str	r3, [r7, #8]
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	60fb      	str	r3, [r7, #12]
 800bb4a:	e029      	b.n	800bba0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bb4c:	4a27      	ldr	r2, [pc, #156]	; (800bbec <chk_lock+0xb4>)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	011b      	lsls	r3, r3, #4
 800bb52:	4413      	add	r3, r2
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d01d      	beq.n	800bb96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb5a:	4a24      	ldr	r2, [pc, #144]	; (800bbec <chk_lock+0xb4>)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	011b      	lsls	r3, r3, #4
 800bb60:	4413      	add	r3, r2
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d116      	bne.n	800bb9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bb6c:	4a1f      	ldr	r2, [pc, #124]	; (800bbec <chk_lock+0xb4>)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	011b      	lsls	r3, r3, #4
 800bb72:	4413      	add	r3, r2
 800bb74:	3304      	adds	r3, #4
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d10c      	bne.n	800bb9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb80:	4a1a      	ldr	r2, [pc, #104]	; (800bbec <chk_lock+0xb4>)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	011b      	lsls	r3, r3, #4
 800bb86:	4413      	add	r3, r2
 800bb88:	3308      	adds	r3, #8
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d102      	bne.n	800bb9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb94:	e007      	b.n	800bba6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bb96:	2301      	movs	r3, #1
 800bb98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	60fb      	str	r3, [r7, #12]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d9d2      	bls.n	800bb4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d109      	bne.n	800bbc0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d102      	bne.n	800bbb8 <chk_lock+0x80>
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d101      	bne.n	800bbbc <chk_lock+0x84>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	e010      	b.n	800bbde <chk_lock+0xa6>
 800bbbc:	2312      	movs	r3, #18
 800bbbe:	e00e      	b.n	800bbde <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d108      	bne.n	800bbd8 <chk_lock+0xa0>
 800bbc6:	4a09      	ldr	r2, [pc, #36]	; (800bbec <chk_lock+0xb4>)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	011b      	lsls	r3, r3, #4
 800bbcc:	4413      	add	r3, r2
 800bbce:	330c      	adds	r3, #12
 800bbd0:	881b      	ldrh	r3, [r3, #0]
 800bbd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbd6:	d101      	bne.n	800bbdc <chk_lock+0xa4>
 800bbd8:	2310      	movs	r3, #16
 800bbda:	e000      	b.n	800bbde <chk_lock+0xa6>
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	2000079c 	.word	0x2000079c

0800bbf0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	607b      	str	r3, [r7, #4]
 800bbfa:	e002      	b.n	800bc02 <enq_lock+0x12>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	607b      	str	r3, [r7, #4]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d806      	bhi.n	800bc16 <enq_lock+0x26>
 800bc08:	4a09      	ldr	r2, [pc, #36]	; (800bc30 <enq_lock+0x40>)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	011b      	lsls	r3, r3, #4
 800bc0e:	4413      	add	r3, r2
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1f2      	bne.n	800bbfc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	bf14      	ite	ne
 800bc1c:	2301      	movne	r3, #1
 800bc1e:	2300      	moveq	r3, #0
 800bc20:	b2db      	uxtb	r3, r3
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	2000079c 	.word	0x2000079c

0800bc34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]
 800bc42:	e01f      	b.n	800bc84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bc44:	4a41      	ldr	r2, [pc, #260]	; (800bd4c <inc_lock+0x118>)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	011b      	lsls	r3, r3, #4
 800bc4a:	4413      	add	r3, r2
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d113      	bne.n	800bc7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bc56:	4a3d      	ldr	r2, [pc, #244]	; (800bd4c <inc_lock+0x118>)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	011b      	lsls	r3, r3, #4
 800bc5c:	4413      	add	r3, r2
 800bc5e:	3304      	adds	r3, #4
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d109      	bne.n	800bc7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bc6a:	4a38      	ldr	r2, [pc, #224]	; (800bd4c <inc_lock+0x118>)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	011b      	lsls	r3, r3, #4
 800bc70:	4413      	add	r3, r2
 800bc72:	3308      	adds	r3, #8
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d006      	beq.n	800bc8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3301      	adds	r3, #1
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d9dc      	bls.n	800bc44 <inc_lock+0x10>
 800bc8a:	e000      	b.n	800bc8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bc8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d132      	bne.n	800bcfa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bc94:	2300      	movs	r3, #0
 800bc96:	60fb      	str	r3, [r7, #12]
 800bc98:	e002      	b.n	800bca0 <inc_lock+0x6c>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	60fb      	str	r3, [r7, #12]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d806      	bhi.n	800bcb4 <inc_lock+0x80>
 800bca6:	4a29      	ldr	r2, [pc, #164]	; (800bd4c <inc_lock+0x118>)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	011b      	lsls	r3, r3, #4
 800bcac:	4413      	add	r3, r2
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1f2      	bne.n	800bc9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d101      	bne.n	800bcbe <inc_lock+0x8a>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e040      	b.n	800bd40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	4922      	ldr	r1, [pc, #136]	; (800bd4c <inc_lock+0x118>)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	011b      	lsls	r3, r3, #4
 800bcc8:	440b      	add	r3, r1
 800bcca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	689a      	ldr	r2, [r3, #8]
 800bcd0:	491e      	ldr	r1, [pc, #120]	; (800bd4c <inc_lock+0x118>)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	011b      	lsls	r3, r3, #4
 800bcd6:	440b      	add	r3, r1
 800bcd8:	3304      	adds	r3, #4
 800bcda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	695a      	ldr	r2, [r3, #20]
 800bce0:	491a      	ldr	r1, [pc, #104]	; (800bd4c <inc_lock+0x118>)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	011b      	lsls	r3, r3, #4
 800bce6:	440b      	add	r3, r1
 800bce8:	3308      	adds	r3, #8
 800bcea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bcec:	4a17      	ldr	r2, [pc, #92]	; (800bd4c <inc_lock+0x118>)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	011b      	lsls	r3, r3, #4
 800bcf2:	4413      	add	r3, r2
 800bcf4:	330c      	adds	r3, #12
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d009      	beq.n	800bd14 <inc_lock+0xe0>
 800bd00:	4a12      	ldr	r2, [pc, #72]	; (800bd4c <inc_lock+0x118>)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	011b      	lsls	r3, r3, #4
 800bd06:	4413      	add	r3, r2
 800bd08:	330c      	adds	r3, #12
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <inc_lock+0xe0>
 800bd10:	2300      	movs	r3, #0
 800bd12:	e015      	b.n	800bd40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d108      	bne.n	800bd2c <inc_lock+0xf8>
 800bd1a:	4a0c      	ldr	r2, [pc, #48]	; (800bd4c <inc_lock+0x118>)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	4413      	add	r3, r2
 800bd22:	330c      	adds	r3, #12
 800bd24:	881b      	ldrh	r3, [r3, #0]
 800bd26:	3301      	adds	r3, #1
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	e001      	b.n	800bd30 <inc_lock+0xfc>
 800bd2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd30:	4906      	ldr	r1, [pc, #24]	; (800bd4c <inc_lock+0x118>)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	011b      	lsls	r3, r3, #4
 800bd36:	440b      	add	r3, r1
 800bd38:	330c      	adds	r3, #12
 800bd3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	3301      	adds	r3, #1
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	2000079c 	.word	0x2000079c

0800bd50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	607b      	str	r3, [r7, #4]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d825      	bhi.n	800bdb0 <dec_lock+0x60>
		n = Files[i].ctr;
 800bd64:	4a17      	ldr	r2, [pc, #92]	; (800bdc4 <dec_lock+0x74>)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	011b      	lsls	r3, r3, #4
 800bd6a:	4413      	add	r3, r2
 800bd6c:	330c      	adds	r3, #12
 800bd6e:	881b      	ldrh	r3, [r3, #0]
 800bd70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bd72:	89fb      	ldrh	r3, [r7, #14]
 800bd74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd78:	d101      	bne.n	800bd7e <dec_lock+0x2e>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bd7e:	89fb      	ldrh	r3, [r7, #14]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <dec_lock+0x3a>
 800bd84:	89fb      	ldrh	r3, [r7, #14]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bd8a:	4a0e      	ldr	r2, [pc, #56]	; (800bdc4 <dec_lock+0x74>)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	011b      	lsls	r3, r3, #4
 800bd90:	4413      	add	r3, r2
 800bd92:	330c      	adds	r3, #12
 800bd94:	89fa      	ldrh	r2, [r7, #14]
 800bd96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bd98:	89fb      	ldrh	r3, [r7, #14]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d105      	bne.n	800bdaa <dec_lock+0x5a>
 800bd9e:	4a09      	ldr	r2, [pc, #36]	; (800bdc4 <dec_lock+0x74>)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	011b      	lsls	r3, r3, #4
 800bda4:	4413      	add	r3, r2
 800bda6:	2200      	movs	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	737b      	strb	r3, [r7, #13]
 800bdae:	e001      	b.n	800bdb4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bdb0:	2302      	movs	r3, #2
 800bdb2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bdb4:	7b7b      	ldrb	r3, [r7, #13]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	2000079c 	.word	0x2000079c

0800bdc8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	e010      	b.n	800bdf8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bdd6:	4a0d      	ldr	r2, [pc, #52]	; (800be0c <clear_lock+0x44>)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	011b      	lsls	r3, r3, #4
 800bddc:	4413      	add	r3, r2
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d105      	bne.n	800bdf2 <clear_lock+0x2a>
 800bde6:	4a09      	ldr	r2, [pc, #36]	; (800be0c <clear_lock+0x44>)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	011b      	lsls	r3, r3, #4
 800bdec:	4413      	add	r3, r2
 800bdee:	2200      	movs	r2, #0
 800bdf0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	60fb      	str	r3, [r7, #12]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d9eb      	bls.n	800bdd6 <clear_lock+0xe>
	}
}
 800bdfe:	bf00      	nop
 800be00:	bf00      	nop
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr
 800be0c:	2000079c 	.word	0x2000079c

0800be10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	78db      	ldrb	r3, [r3, #3]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d034      	beq.n	800be8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	7858      	ldrb	r0, [r3, #1]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be34:	2301      	movs	r3, #1
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	f7ff fd40 	bl	800b8bc <disk_write>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d002      	beq.n	800be48 <sync_window+0x38>
			res = FR_DISK_ERR;
 800be42:	2301      	movs	r3, #1
 800be44:	73fb      	strb	r3, [r7, #15]
 800be46:	e022      	b.n	800be8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	1ad2      	subs	r2, r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	69db      	ldr	r3, [r3, #28]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d217      	bcs.n	800be8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	789b      	ldrb	r3, [r3, #2]
 800be62:	613b      	str	r3, [r7, #16]
 800be64:	e010      	b.n	800be88 <sync_window+0x78>
					wsect += fs->fsize;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	4413      	add	r3, r2
 800be6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	7858      	ldrb	r0, [r3, #1]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be7a:	2301      	movs	r3, #1
 800be7c:	697a      	ldr	r2, [r7, #20]
 800be7e:	f7ff fd1d 	bl	800b8bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	3b01      	subs	r3, #1
 800be86:	613b      	str	r3, [r7, #16]
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d8eb      	bhi.n	800be66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800be8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3718      	adds	r7, #24
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	429a      	cmp	r2, r3
 800beae:	d01b      	beq.n	800bee8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f7ff ffad 	bl	800be10 <sync_window>
 800beb6:	4603      	mov	r3, r0
 800beb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800beba:	7bfb      	ldrb	r3, [r7, #15]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d113      	bne.n	800bee8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	7858      	ldrb	r0, [r3, #1]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800beca:	2301      	movs	r3, #1
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	f7ff fcd5 	bl	800b87c <disk_read>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d004      	beq.n	800bee2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bed8:	f04f 33ff 	mov.w	r3, #4294967295
 800bedc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bede:	2301      	movs	r3, #1
 800bee0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	683a      	ldr	r2, [r7, #0]
 800bee6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
	...

0800bef4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f7ff ff87 	bl	800be10 <sync_window>
 800bf02:	4603      	mov	r3, r0
 800bf04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d158      	bne.n	800bfbe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	d148      	bne.n	800bfa6 <sync_fs+0xb2>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	791b      	ldrb	r3, [r3, #4]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d144      	bne.n	800bfa6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	3334      	adds	r3, #52	; 0x34
 800bf20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf24:	2100      	movs	r1, #0
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff fda9 	bl	800ba7e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	3334      	adds	r3, #52	; 0x34
 800bf30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf34:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff fd38 	bl	800b9ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	3334      	adds	r3, #52	; 0x34
 800bf42:	4921      	ldr	r1, [pc, #132]	; (800bfc8 <sync_fs+0xd4>)
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff fd4d 	bl	800b9e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	3334      	adds	r3, #52	; 0x34
 800bf4e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bf52:	491e      	ldr	r1, [pc, #120]	; (800bfcc <sync_fs+0xd8>)
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7ff fd45 	bl	800b9e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	3334      	adds	r3, #52	; 0x34
 800bf5e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	695b      	ldr	r3, [r3, #20]
 800bf66:	4619      	mov	r1, r3
 800bf68:	4610      	mov	r0, r2
 800bf6a:	f7ff fd3b 	bl	800b9e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	3334      	adds	r3, #52	; 0x34
 800bf72:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f7ff fd31 	bl	800b9e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	1c5a      	adds	r2, r3, #1
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	7858      	ldrb	r0, [r3, #1]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	f7ff fc8e 	bl	800b8bc <disk_write>
			fs->fsi_flag = 0;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	785b      	ldrb	r3, [r3, #1]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	2100      	movs	r1, #0
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7ff fca4 	bl	800b8fc <disk_ioctl>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <sync_fs+0xca>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	41615252 	.word	0x41615252
 800bfcc:	61417272 	.word	0x61417272

0800bfd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	3b02      	subs	r3, #2
 800bfde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	699b      	ldr	r3, [r3, #24]
 800bfe4:	3b02      	subs	r3, #2
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d301      	bcc.n	800bff0 <clust2sect+0x20>
 800bfec:	2300      	movs	r3, #0
 800bfee:	e008      	b.n	800c002 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	895b      	ldrh	r3, [r3, #10]
 800bff4:	461a      	mov	r2, r3
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	fb03 f202 	mul.w	r2, r3, r2
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c000:	4413      	add	r3, r2
}
 800c002:	4618      	mov	r0, r3
 800c004:	370c      	adds	r7, #12
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr

0800c00e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b086      	sub	sp, #24
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d904      	bls.n	800c02e <get_fat+0x20>
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	699b      	ldr	r3, [r3, #24]
 800c028:	683a      	ldr	r2, [r7, #0]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d302      	bcc.n	800c034 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c02e:	2301      	movs	r3, #1
 800c030:	617b      	str	r3, [r7, #20]
 800c032:	e08f      	b.n	800c154 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c034:	f04f 33ff 	mov.w	r3, #4294967295
 800c038:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d062      	beq.n	800c108 <get_fat+0xfa>
 800c042:	2b03      	cmp	r3, #3
 800c044:	dc7c      	bgt.n	800c140 <get_fat+0x132>
 800c046:	2b01      	cmp	r3, #1
 800c048:	d002      	beq.n	800c050 <get_fat+0x42>
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d042      	beq.n	800c0d4 <get_fat+0xc6>
 800c04e:	e077      	b.n	800c140 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	085b      	lsrs	r3, r3, #1
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	4413      	add	r3, r2
 800c05c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	0a5b      	lsrs	r3, r3, #9
 800c066:	4413      	add	r3, r2
 800c068:	4619      	mov	r1, r3
 800c06a:	6938      	ldr	r0, [r7, #16]
 800c06c:	f7ff ff14 	bl	800be98 <move_window>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d167      	bne.n	800c146 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	1c5a      	adds	r2, r3, #1
 800c07a:	60fa      	str	r2, [r7, #12]
 800c07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	4413      	add	r3, r2
 800c084:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c088:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	0a5b      	lsrs	r3, r3, #9
 800c092:	4413      	add	r3, r2
 800c094:	4619      	mov	r1, r3
 800c096:	6938      	ldr	r0, [r7, #16]
 800c098:	f7ff fefe 	bl	800be98 <move_window>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d153      	bne.n	800c14a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a8:	693a      	ldr	r2, [r7, #16]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c0b0:	021b      	lsls	r3, r3, #8
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d002      	beq.n	800c0ca <get_fat+0xbc>
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	091b      	lsrs	r3, r3, #4
 800c0c8:	e002      	b.n	800c0d0 <get_fat+0xc2>
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0d0:	617b      	str	r3, [r7, #20]
			break;
 800c0d2:	e03f      	b.n	800c154 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	0a1b      	lsrs	r3, r3, #8
 800c0dc:	4413      	add	r3, r2
 800c0de:	4619      	mov	r1, r3
 800c0e0:	6938      	ldr	r0, [r7, #16]
 800c0e2:	f7ff fed9 	bl	800be98 <move_window>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d130      	bne.n	800c14e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	005b      	lsls	r3, r3, #1
 800c0f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c0fa:	4413      	add	r3, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff fc1b 	bl	800b938 <ld_word>
 800c102:	4603      	mov	r3, r0
 800c104:	617b      	str	r3, [r7, #20]
			break;
 800c106:	e025      	b.n	800c154 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	09db      	lsrs	r3, r3, #7
 800c110:	4413      	add	r3, r2
 800c112:	4619      	mov	r1, r3
 800c114:	6938      	ldr	r0, [r7, #16]
 800c116:	f7ff febf 	bl	800be98 <move_window>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d118      	bne.n	800c152 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c12e:	4413      	add	r3, r2
 800c130:	4618      	mov	r0, r3
 800c132:	f7ff fc19 	bl	800b968 <ld_dword>
 800c136:	4603      	mov	r3, r0
 800c138:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c13c:	617b      	str	r3, [r7, #20]
			break;
 800c13e:	e009      	b.n	800c154 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c140:	2301      	movs	r3, #1
 800c142:	617b      	str	r3, [r7, #20]
 800c144:	e006      	b.n	800c154 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c146:	bf00      	nop
 800c148:	e004      	b.n	800c154 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c14a:	bf00      	nop
 800c14c:	e002      	b.n	800c154 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c14e:	bf00      	nop
 800c150:	e000      	b.n	800c154 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c152:	bf00      	nop
		}
	}

	return val;
 800c154:	697b      	ldr	r3, [r7, #20]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3718      	adds	r7, #24
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c15e:	b590      	push	{r4, r7, lr}
 800c160:	b089      	sub	sp, #36	; 0x24
 800c162:	af00      	add	r7, sp, #0
 800c164:	60f8      	str	r0, [r7, #12]
 800c166:	60b9      	str	r1, [r7, #8]
 800c168:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c16a:	2302      	movs	r3, #2
 800c16c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b01      	cmp	r3, #1
 800c172:	f240 80d2 	bls.w	800c31a <put_fat+0x1bc>
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	f080 80cc 	bcs.w	800c31a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	2b03      	cmp	r3, #3
 800c188:	f000 8096 	beq.w	800c2b8 <put_fat+0x15a>
 800c18c:	2b03      	cmp	r3, #3
 800c18e:	f300 80cd 	bgt.w	800c32c <put_fat+0x1ce>
 800c192:	2b01      	cmp	r3, #1
 800c194:	d002      	beq.n	800c19c <put_fat+0x3e>
 800c196:	2b02      	cmp	r3, #2
 800c198:	d06e      	beq.n	800c278 <put_fat+0x11a>
 800c19a:	e0c7      	b.n	800c32c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	61bb      	str	r3, [r7, #24]
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	085b      	lsrs	r3, r3, #1
 800c1a4:	69ba      	ldr	r2, [r7, #24]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	0a5b      	lsrs	r3, r3, #9
 800c1b2:	4413      	add	r3, r2
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f7ff fe6e 	bl	800be98 <move_window>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1c0:	7ffb      	ldrb	r3, [r7, #31]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f040 80ab 	bne.w	800c31e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	1c59      	adds	r1, r3, #1
 800c1d2:	61b9      	str	r1, [r7, #24]
 800c1d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d8:	4413      	add	r3, r2
 800c1da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	f003 0301 	and.w	r3, r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00d      	beq.n	800c202 <put_fat+0xa4>
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	b25b      	sxtb	r3, r3
 800c1ec:	f003 030f 	and.w	r3, r3, #15
 800c1f0:	b25a      	sxtb	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	011b      	lsls	r3, r3, #4
 800c1f8:	b25b      	sxtb	r3, r3
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	b25b      	sxtb	r3, r3
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	e001      	b.n	800c206 <put_fat+0xa8>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	b2db      	uxtb	r3, r3
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2201      	movs	r2, #1
 800c20e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	0a5b      	lsrs	r3, r3, #9
 800c218:	4413      	add	r3, r2
 800c21a:	4619      	mov	r1, r3
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f7ff fe3b 	bl	800be98 <move_window>
 800c222:	4603      	mov	r3, r0
 800c224:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c226:	7ffb      	ldrb	r3, [r7, #31]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d17a      	bne.n	800c322 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c238:	4413      	add	r3, r2
 800c23a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	f003 0301 	and.w	r3, r3, #1
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <put_fat+0xf0>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	091b      	lsrs	r3, r3, #4
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	e00e      	b.n	800c26c <put_fat+0x10e>
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	b25b      	sxtb	r3, r3
 800c254:	f023 030f 	bic.w	r3, r3, #15
 800c258:	b25a      	sxtb	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	0a1b      	lsrs	r3, r3, #8
 800c25e:	b25b      	sxtb	r3, r3
 800c260:	f003 030f 	and.w	r3, r3, #15
 800c264:	b25b      	sxtb	r3, r3
 800c266:	4313      	orrs	r3, r2
 800c268:	b25b      	sxtb	r3, r3
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	697a      	ldr	r2, [r7, #20]
 800c26e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2201      	movs	r2, #1
 800c274:	70da      	strb	r2, [r3, #3]
			break;
 800c276:	e059      	b.n	800c32c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	0a1b      	lsrs	r3, r3, #8
 800c280:	4413      	add	r3, r2
 800c282:	4619      	mov	r1, r3
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f7ff fe07 	bl	800be98 <move_window>
 800c28a:	4603      	mov	r3, r0
 800c28c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c28e:	7ffb      	ldrb	r3, [r7, #31]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d148      	bne.n	800c326 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	005b      	lsls	r3, r3, #1
 800c29e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c2a2:	4413      	add	r3, r2
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	b292      	uxth	r2, r2
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff fb7f 	bl	800b9ae <st_word>
			fs->wflag = 1;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	70da      	strb	r2, [r3, #3]
			break;
 800c2b6:	e039      	b.n	800c32c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	09db      	lsrs	r3, r3, #7
 800c2c0:	4413      	add	r3, r2
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f7ff fde7 	bl	800be98 <move_window>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2ce:	7ffb      	ldrb	r3, [r7, #31]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d12a      	bne.n	800c32a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c2e8:	4413      	add	r3, r2
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7ff fb3c 	bl	800b968 <ld_dword>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c2f6:	4323      	orrs	r3, r4
 800c2f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c308:	4413      	add	r3, r2
 800c30a:	6879      	ldr	r1, [r7, #4]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7ff fb69 	bl	800b9e4 <st_dword>
			fs->wflag = 1;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2201      	movs	r2, #1
 800c316:	70da      	strb	r2, [r3, #3]
			break;
 800c318:	e008      	b.n	800c32c <put_fat+0x1ce>
		}
	}
 800c31a:	bf00      	nop
 800c31c:	e006      	b.n	800c32c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c31e:	bf00      	nop
 800c320:	e004      	b.n	800c32c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c322:	bf00      	nop
 800c324:	e002      	b.n	800c32c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c326:	bf00      	nop
 800c328:	e000      	b.n	800c32c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c32a:	bf00      	nop
	return res;
 800c32c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3724      	adds	r7, #36	; 0x24
 800c332:	46bd      	mov	sp, r7
 800c334:	bd90      	pop	{r4, r7, pc}

0800c336 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b088      	sub	sp, #32
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	60b9      	str	r1, [r7, #8]
 800c340:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d904      	bls.n	800c35c <remove_chain+0x26>
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	699b      	ldr	r3, [r3, #24]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d301      	bcc.n	800c360 <remove_chain+0x2a>
 800c35c:	2302      	movs	r3, #2
 800c35e:	e04b      	b.n	800c3f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00c      	beq.n	800c380 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c366:	f04f 32ff 	mov.w	r2, #4294967295
 800c36a:	6879      	ldr	r1, [r7, #4]
 800c36c:	69b8      	ldr	r0, [r7, #24]
 800c36e:	f7ff fef6 	bl	800c15e <put_fat>
 800c372:	4603      	mov	r3, r0
 800c374:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c376:	7ffb      	ldrb	r3, [r7, #31]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d001      	beq.n	800c380 <remove_chain+0x4a>
 800c37c:	7ffb      	ldrb	r3, [r7, #31]
 800c37e:	e03b      	b.n	800c3f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f7ff fe43 	bl	800c00e <get_fat>
 800c388:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d031      	beq.n	800c3f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	2b01      	cmp	r3, #1
 800c394:	d101      	bne.n	800c39a <remove_chain+0x64>
 800c396:	2302      	movs	r3, #2
 800c398:	e02e      	b.n	800c3f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a0:	d101      	bne.n	800c3a6 <remove_chain+0x70>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e028      	b.n	800c3f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	68b9      	ldr	r1, [r7, #8]
 800c3aa:	69b8      	ldr	r0, [r7, #24]
 800c3ac:	f7ff fed7 	bl	800c15e <put_fat>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c3b4:	7ffb      	ldrb	r3, [r7, #31]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d001      	beq.n	800c3be <remove_chain+0x88>
 800c3ba:	7ffb      	ldrb	r3, [r7, #31]
 800c3bc:	e01c      	b.n	800c3f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	695a      	ldr	r2, [r3, #20]
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	699b      	ldr	r3, [r3, #24]
 800c3c6:	3b02      	subs	r3, #2
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d20b      	bcs.n	800c3e4 <remove_chain+0xae>
			fs->free_clst++;
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	695b      	ldr	r3, [r3, #20]
 800c3d0:	1c5a      	adds	r2, r3, #1
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	791b      	ldrb	r3, [r3, #4]
 800c3da:	f043 0301 	orr.w	r3, r3, #1
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d3c6      	bcc.n	800c380 <remove_chain+0x4a>
 800c3f2:	e000      	b.n	800c3f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c3f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3720      	adds	r7, #32
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b088      	sub	sp, #32
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10d      	bne.n	800c432 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d004      	beq.n	800c42c <create_chain+0x2c>
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	69ba      	ldr	r2, [r7, #24]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d31b      	bcc.n	800c464 <create_chain+0x64>
 800c42c:	2301      	movs	r3, #1
 800c42e:	61bb      	str	r3, [r7, #24]
 800c430:	e018      	b.n	800c464 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f7ff fdea 	bl	800c00e <get_fat>
 800c43a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d801      	bhi.n	800c446 <create_chain+0x46>
 800c442:	2301      	movs	r3, #1
 800c444:	e070      	b.n	800c528 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44c:	d101      	bne.n	800c452 <create_chain+0x52>
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	e06a      	b.n	800c528 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d201      	bcs.n	800c460 <create_chain+0x60>
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	e063      	b.n	800c528 <create_chain+0x128>
		scl = clst;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	3301      	adds	r3, #1
 800c46c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	69fa      	ldr	r2, [r7, #28]
 800c474:	429a      	cmp	r2, r3
 800c476:	d307      	bcc.n	800c488 <create_chain+0x88>
				ncl = 2;
 800c478:	2302      	movs	r3, #2
 800c47a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c47c:	69fa      	ldr	r2, [r7, #28]
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	429a      	cmp	r2, r3
 800c482:	d901      	bls.n	800c488 <create_chain+0x88>
 800c484:	2300      	movs	r3, #0
 800c486:	e04f      	b.n	800c528 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c488:	69f9      	ldr	r1, [r7, #28]
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7ff fdbf 	bl	800c00e <get_fat>
 800c490:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00e      	beq.n	800c4b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d003      	beq.n	800c4a6 <create_chain+0xa6>
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a4:	d101      	bne.n	800c4aa <create_chain+0xaa>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	e03e      	b.n	800c528 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c4aa:	69fa      	ldr	r2, [r7, #28]
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d1da      	bne.n	800c468 <create_chain+0x68>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	e038      	b.n	800c528 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c4b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4bc:	69f9      	ldr	r1, [r7, #28]
 800c4be:	6938      	ldr	r0, [r7, #16]
 800c4c0:	f7ff fe4d 	bl	800c15e <put_fat>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d109      	bne.n	800c4e2 <create_chain+0xe2>
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d006      	beq.n	800c4e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c4d4:	69fa      	ldr	r2, [r7, #28]
 800c4d6:	6839      	ldr	r1, [r7, #0]
 800c4d8:	6938      	ldr	r0, [r7, #16]
 800c4da:	f7ff fe40 	bl	800c15e <put_fat>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d116      	bne.n	800c516 <create_chain+0x116>
		fs->last_clst = ncl;
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	69fa      	ldr	r2, [r7, #28]
 800c4ec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	695a      	ldr	r2, [r3, #20]
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	699b      	ldr	r3, [r3, #24]
 800c4f6:	3b02      	subs	r3, #2
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d804      	bhi.n	800c506 <create_chain+0x106>
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	695b      	ldr	r3, [r3, #20]
 800c500:	1e5a      	subs	r2, r3, #1
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	791b      	ldrb	r3, [r3, #4]
 800c50a:	f043 0301 	orr.w	r3, r3, #1
 800c50e:	b2da      	uxtb	r2, r3
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	711a      	strb	r2, [r3, #4]
 800c514:	e007      	b.n	800c526 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c516:	7dfb      	ldrb	r3, [r7, #23]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d102      	bne.n	800c522 <create_chain+0x122>
 800c51c:	f04f 33ff 	mov.w	r3, #4294967295
 800c520:	e000      	b.n	800c524 <create_chain+0x124>
 800c522:	2301      	movs	r3, #1
 800c524:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c526:	69fb      	ldr	r3, [r7, #28]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3720      	adds	r7, #32
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c544:	3304      	adds	r3, #4
 800c546:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	0a5b      	lsrs	r3, r3, #9
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	8952      	ldrh	r2, [r2, #10]
 800c550:	fbb3 f3f2 	udiv	r3, r3, r2
 800c554:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	1d1a      	adds	r2, r3, #4
 800c55a:	613a      	str	r2, [r7, #16]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d101      	bne.n	800c56a <clmt_clust+0x3a>
 800c566:	2300      	movs	r3, #0
 800c568:	e010      	b.n	800c58c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d307      	bcc.n	800c582 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	617b      	str	r3, [r7, #20]
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	3304      	adds	r3, #4
 800c57e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c580:	e7e9      	b.n	800c556 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c582:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	4413      	add	r3, r2
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	371c      	adds	r7, #28
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5ae:	d204      	bcs.n	800c5ba <dir_sdi+0x22>
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	f003 031f 	and.w	r3, r3, #31
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d001      	beq.n	800c5be <dir_sdi+0x26>
		return FR_INT_ERR;
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	e063      	b.n	800c686 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d106      	bne.n	800c5de <dir_sdi+0x46>
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	d902      	bls.n	800c5de <dir_sdi+0x46>
		clst = fs->dirbase;
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5dc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d10c      	bne.n	800c5fe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	095b      	lsrs	r3, r3, #5
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	8912      	ldrh	r2, [r2, #8]
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d301      	bcc.n	800c5f4 <dir_sdi+0x5c>
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	e048      	b.n	800c686 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	61da      	str	r2, [r3, #28]
 800c5fc:	e029      	b.n	800c652 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	895b      	ldrh	r3, [r3, #10]
 800c602:	025b      	lsls	r3, r3, #9
 800c604:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c606:	e019      	b.n	800c63c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6979      	ldr	r1, [r7, #20]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7ff fcfe 	bl	800c00e <get_fat>
 800c612:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61a:	d101      	bne.n	800c620 <dir_sdi+0x88>
 800c61c:	2301      	movs	r3, #1
 800c61e:	e032      	b.n	800c686 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d904      	bls.n	800c630 <dir_sdi+0x98>
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	697a      	ldr	r2, [r7, #20]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d301      	bcc.n	800c634 <dir_sdi+0x9c>
 800c630:	2302      	movs	r3, #2
 800c632:	e028      	b.n	800c686 <dir_sdi+0xee>
			ofs -= csz;
 800c634:	683a      	ldr	r2, [r7, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c63c:	683a      	ldr	r2, [r7, #0]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	429a      	cmp	r2, r3
 800c642:	d2e1      	bcs.n	800c608 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c644:	6979      	ldr	r1, [r7, #20]
 800c646:	6938      	ldr	r0, [r7, #16]
 800c648:	f7ff fcc2 	bl	800bfd0 <clust2sect>
 800c64c:	4602      	mov	r2, r0
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	69db      	ldr	r3, [r3, #28]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d101      	bne.n	800c664 <dir_sdi+0xcc>
 800c660:	2302      	movs	r3, #2
 800c662:	e010      	b.n	800c686 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	69da      	ldr	r2, [r3, #28]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	0a5b      	lsrs	r3, r3, #9
 800c66c:	441a      	add	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c67e:	441a      	add	r2, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3718      	adds	r7, #24
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b086      	sub	sp, #24
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	3320      	adds	r3, #32
 800c6a4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	69db      	ldr	r3, [r3, #28]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d003      	beq.n	800c6b6 <dir_next+0x28>
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6b4:	d301      	bcc.n	800c6ba <dir_next+0x2c>
 800c6b6:	2304      	movs	r3, #4
 800c6b8:	e0aa      	b.n	800c810 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f040 8098 	bne.w	800c7f6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	69db      	ldr	r3, [r3, #28]
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10b      	bne.n	800c6f0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	095b      	lsrs	r3, r3, #5
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	8912      	ldrh	r2, [r2, #8]
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	f0c0 8088 	bcc.w	800c7f6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	61da      	str	r2, [r3, #28]
 800c6ec:	2304      	movs	r3, #4
 800c6ee:	e08f      	b.n	800c810 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	0a5b      	lsrs	r3, r3, #9
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	8952      	ldrh	r2, [r2, #10]
 800c6f8:	3a01      	subs	r2, #1
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d17a      	bne.n	800c7f6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	4619      	mov	r1, r3
 800c708:	4610      	mov	r0, r2
 800c70a:	f7ff fc80 	bl	800c00e <get_fat>
 800c70e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	2b01      	cmp	r3, #1
 800c714:	d801      	bhi.n	800c71a <dir_next+0x8c>
 800c716:	2302      	movs	r3, #2
 800c718:	e07a      	b.n	800c810 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c720:	d101      	bne.n	800c726 <dir_next+0x98>
 800c722:	2301      	movs	r3, #1
 800c724:	e074      	b.n	800c810 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	697a      	ldr	r2, [r7, #20]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d358      	bcc.n	800c7e2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d104      	bne.n	800c740 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	61da      	str	r2, [r3, #28]
 800c73c:	2304      	movs	r3, #4
 800c73e:	e067      	b.n	800c810 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	699b      	ldr	r3, [r3, #24]
 800c746:	4619      	mov	r1, r3
 800c748:	4610      	mov	r0, r2
 800c74a:	f7ff fe59 	bl	800c400 <create_chain>
 800c74e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d101      	bne.n	800c75a <dir_next+0xcc>
 800c756:	2307      	movs	r3, #7
 800c758:	e05a      	b.n	800c810 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d101      	bne.n	800c764 <dir_next+0xd6>
 800c760:	2302      	movs	r3, #2
 800c762:	e055      	b.n	800c810 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76a:	d101      	bne.n	800c770 <dir_next+0xe2>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e04f      	b.n	800c810 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f7ff fb4d 	bl	800be10 <sync_window>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <dir_next+0xf2>
 800c77c:	2301      	movs	r3, #1
 800c77e:	e047      	b.n	800c810 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	3334      	adds	r3, #52	; 0x34
 800c784:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c788:	2100      	movs	r1, #0
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7ff f977 	bl	800ba7e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c790:	2300      	movs	r3, #0
 800c792:	613b      	str	r3, [r7, #16]
 800c794:	6979      	ldr	r1, [r7, #20]
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	f7ff fc1a 	bl	800bfd0 <clust2sect>
 800c79c:	4602      	mov	r2, r0
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	631a      	str	r2, [r3, #48]	; 0x30
 800c7a2:	e012      	b.n	800c7ca <dir_next+0x13c>
						fs->wflag = 1;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f7ff fb30 	bl	800be10 <sync_window>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d001      	beq.n	800c7ba <dir_next+0x12c>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e02a      	b.n	800c810 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	613b      	str	r3, [r7, #16]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c4:	1c5a      	adds	r2, r3, #1
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	631a      	str	r2, [r3, #48]	; 0x30
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	895b      	ldrh	r3, [r3, #10]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d3e6      	bcc.n	800c7a4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	1ad2      	subs	r2, r2, r3
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	697a      	ldr	r2, [r7, #20]
 800c7e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c7e8:	6979      	ldr	r1, [r7, #20]
 800c7ea:	68f8      	ldr	r0, [r7, #12]
 800c7ec:	f7ff fbf0 	bl	800bfd0 <clust2sect>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c808:	441a      	add	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3718      	adds	r7, #24
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c828:	2100      	movs	r1, #0
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f7ff feb4 	bl	800c598 <dir_sdi>
 800c830:	4603      	mov	r3, r0
 800c832:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c834:	7dfb      	ldrb	r3, [r7, #23]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d12b      	bne.n	800c892 <dir_alloc+0x7a>
		n = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	69db      	ldr	r3, [r3, #28]
 800c842:	4619      	mov	r1, r3
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f7ff fb27 	bl	800be98 <move_window>
 800c84a:	4603      	mov	r3, r0
 800c84c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c84e:	7dfb      	ldrb	r3, [r7, #23]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d11d      	bne.n	800c890 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6a1b      	ldr	r3, [r3, #32]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	2be5      	cmp	r3, #229	; 0xe5
 800c85c:	d004      	beq.n	800c868 <dir_alloc+0x50>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d107      	bne.n	800c878 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	3301      	adds	r3, #1
 800c86c:	613b      	str	r3, [r7, #16]
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	429a      	cmp	r2, r3
 800c874:	d102      	bne.n	800c87c <dir_alloc+0x64>
 800c876:	e00c      	b.n	800c892 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c878:	2300      	movs	r3, #0
 800c87a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c87c:	2101      	movs	r1, #1
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7ff ff05 	bl	800c68e <dir_next>
 800c884:	4603      	mov	r3, r0
 800c886:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c888:	7dfb      	ldrb	r3, [r7, #23]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d0d7      	beq.n	800c83e <dir_alloc+0x26>
 800c88e:	e000      	b.n	800c892 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c890:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c892:	7dfb      	ldrb	r3, [r7, #23]
 800c894:	2b04      	cmp	r3, #4
 800c896:	d101      	bne.n	800c89c <dir_alloc+0x84>
 800c898:	2307      	movs	r3, #7
 800c89a:	75fb      	strb	r3, [r7, #23]
	return res;
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3718      	adds	r7, #24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	331a      	adds	r3, #26
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7ff f83f 	bl	800b938 <ld_word>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d109      	bne.n	800c8da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	3314      	adds	r3, #20
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7ff f834 	bl	800b938 <ld_word>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	041b      	lsls	r3, r3, #16
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c8da:	68fb      	ldr	r3, [r7, #12]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	331a      	adds	r3, #26
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	b292      	uxth	r2, r2
 800c8f8:	4611      	mov	r1, r2
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7ff f857 	bl	800b9ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	2b03      	cmp	r3, #3
 800c906:	d109      	bne.n	800c91c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	f103 0214 	add.w	r2, r3, #20
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	0c1b      	lsrs	r3, r3, #16
 800c912:	b29b      	uxth	r3, r3
 800c914:	4619      	mov	r1, r3
 800c916:	4610      	mov	r0, r2
 800c918:	f7ff f849 	bl	800b9ae <st_word>
	}
}
 800c91c:	bf00      	nop
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c924:	b590      	push	{r4, r7, lr}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	331a      	adds	r3, #26
 800c932:	4618      	mov	r0, r3
 800c934:	f7ff f800 	bl	800b938 <ld_word>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <cmp_lfn+0x1e>
 800c93e:	2300      	movs	r3, #0
 800c940:	e059      	b.n	800c9f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c94a:	1e5a      	subs	r2, r3, #1
 800c94c:	4613      	mov	r3, r2
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	4413      	add	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c958:	2301      	movs	r3, #1
 800c95a:	81fb      	strh	r3, [r7, #14]
 800c95c:	2300      	movs	r3, #0
 800c95e:	613b      	str	r3, [r7, #16]
 800c960:	e033      	b.n	800c9ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c962:	4a27      	ldr	r2, [pc, #156]	; (800ca00 <cmp_lfn+0xdc>)
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	4413      	add	r3, r2
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	461a      	mov	r2, r3
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	4413      	add	r3, r2
 800c970:	4618      	mov	r0, r3
 800c972:	f7fe ffe1 	bl	800b938 <ld_word>
 800c976:	4603      	mov	r3, r0
 800c978:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c97a:	89fb      	ldrh	r3, [r7, #14]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d01a      	beq.n	800c9b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	2bfe      	cmp	r3, #254	; 0xfe
 800c984:	d812      	bhi.n	800c9ac <cmp_lfn+0x88>
 800c986:	89bb      	ldrh	r3, [r7, #12]
 800c988:	4618      	mov	r0, r3
 800c98a:	f002 f883 	bl	800ea94 <ff_wtoupper>
 800c98e:	4603      	mov	r3, r0
 800c990:	461c      	mov	r4, r3
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	1c5a      	adds	r2, r3, #1
 800c996:	617a      	str	r2, [r7, #20]
 800c998:	005b      	lsls	r3, r3, #1
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	4413      	add	r3, r2
 800c99e:	881b      	ldrh	r3, [r3, #0]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f002 f877 	bl	800ea94 <ff_wtoupper>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	429c      	cmp	r4, r3
 800c9aa:	d001      	beq.n	800c9b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	e022      	b.n	800c9f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c9b0:	89bb      	ldrh	r3, [r7, #12]
 800c9b2:	81fb      	strh	r3, [r7, #14]
 800c9b4:	e006      	b.n	800c9c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c9b6:	89bb      	ldrh	r3, [r7, #12]
 800c9b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d001      	beq.n	800c9c4 <cmp_lfn+0xa0>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	e018      	b.n	800c9f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	613b      	str	r3, [r7, #16]
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	2b0c      	cmp	r3, #12
 800c9ce:	d9c8      	bls.n	800c962 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00b      	beq.n	800c9f4 <cmp_lfn+0xd0>
 800c9dc:	89fb      	ldrh	r3, [r7, #14]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d008      	beq.n	800c9f4 <cmp_lfn+0xd0>
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	881b      	ldrh	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <cmp_lfn+0xd0>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	e000      	b.n	800c9f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c9f4:	2301      	movs	r3, #1
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	371c      	adds	r7, #28
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd90      	pop	{r4, r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	08015174 	.word	0x08015174

0800ca04 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b086      	sub	sp, #24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	331a      	adds	r3, #26
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fe ff90 	bl	800b938 <ld_word>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d001      	beq.n	800ca22 <pick_lfn+0x1e>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	e04d      	b.n	800cabe <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca2a:	1e5a      	subs	r2, r3, #1
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	005b      	lsls	r3, r3, #1
 800ca30:	4413      	add	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4413      	add	r3, r2
 800ca36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ca38:	2301      	movs	r3, #1
 800ca3a:	81fb      	strh	r3, [r7, #14]
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	613b      	str	r3, [r7, #16]
 800ca40:	e028      	b.n	800ca94 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ca42:	4a21      	ldr	r2, [pc, #132]	; (800cac8 <pick_lfn+0xc4>)
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	4413      	add	r3, r2
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	4413      	add	r3, r2
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7fe ff71 	bl	800b938 <ld_word>
 800ca56:	4603      	mov	r3, r0
 800ca58:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ca5a:	89fb      	ldrh	r3, [r7, #14]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00f      	beq.n	800ca80 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	2bfe      	cmp	r3, #254	; 0xfe
 800ca64:	d901      	bls.n	800ca6a <pick_lfn+0x66>
 800ca66:	2300      	movs	r3, #0
 800ca68:	e029      	b.n	800cabe <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ca6a:	89bb      	ldrh	r3, [r7, #12]
 800ca6c:	81fb      	strh	r3, [r7, #14]
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	617a      	str	r2, [r7, #20]
 800ca74:	005b      	lsls	r3, r3, #1
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	4413      	add	r3, r2
 800ca7a:	89fa      	ldrh	r2, [r7, #14]
 800ca7c:	801a      	strh	r2, [r3, #0]
 800ca7e:	e006      	b.n	800ca8e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ca80:	89bb      	ldrh	r3, [r7, #12]
 800ca82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d001      	beq.n	800ca8e <pick_lfn+0x8a>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	e017      	b.n	800cabe <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	3301      	adds	r3, #1
 800ca92:	613b      	str	r3, [r7, #16]
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	2b0c      	cmp	r3, #12
 800ca98:	d9d3      	bls.n	800ca42 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00a      	beq.n	800cabc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	2bfe      	cmp	r3, #254	; 0xfe
 800caaa:	d901      	bls.n	800cab0 <pick_lfn+0xac>
 800caac:	2300      	movs	r3, #0
 800caae:	e006      	b.n	800cabe <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	005b      	lsls	r3, r3, #1
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	4413      	add	r3, r2
 800cab8:	2200      	movs	r2, #0
 800caba:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800cabc:	2301      	movs	r3, #1
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3718      	adds	r7, #24
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	08015174 	.word	0x08015174

0800cacc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b088      	sub	sp, #32
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	4611      	mov	r1, r2
 800cad8:	461a      	mov	r2, r3
 800cada:	460b      	mov	r3, r1
 800cadc:	71fb      	strb	r3, [r7, #7]
 800cade:	4613      	mov	r3, r2
 800cae0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	330d      	adds	r3, #13
 800cae6:	79ba      	ldrb	r2, [r7, #6]
 800cae8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	330b      	adds	r3, #11
 800caee:	220f      	movs	r2, #15
 800caf0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	330c      	adds	r3, #12
 800caf6:	2200      	movs	r2, #0
 800caf8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	331a      	adds	r3, #26
 800cafe:	2100      	movs	r1, #0
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fe ff54 	bl	800b9ae <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cb06:	79fb      	ldrb	r3, [r7, #7]
 800cb08:	1e5a      	subs	r2, r3, #1
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	4413      	add	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	82fb      	strh	r3, [r7, #22]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cb1e:	8afb      	ldrh	r3, [r7, #22]
 800cb20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d007      	beq.n	800cb38 <put_lfn+0x6c>
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	1c5a      	adds	r2, r3, #1
 800cb2c:	61fa      	str	r2, [r7, #28]
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	4413      	add	r3, r2
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cb38:	4a17      	ldr	r2, [pc, #92]	; (800cb98 <put_lfn+0xcc>)
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	461a      	mov	r2, r3
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	4413      	add	r3, r2
 800cb46:	8afa      	ldrh	r2, [r7, #22]
 800cb48:	4611      	mov	r1, r2
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fe ff2f 	bl	800b9ae <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cb50:	8afb      	ldrh	r3, [r7, #22]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d102      	bne.n	800cb5c <put_lfn+0x90>
 800cb56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb5a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	61bb      	str	r3, [r7, #24]
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	2b0c      	cmp	r3, #12
 800cb66:	d9da      	bls.n	800cb1e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cb68:	8afb      	ldrh	r3, [r7, #22]
 800cb6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d006      	beq.n	800cb80 <put_lfn+0xb4>
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	005b      	lsls	r3, r3, #1
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	4413      	add	r3, r2
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d103      	bne.n	800cb88 <put_lfn+0xbc>
 800cb80:	79fb      	ldrb	r3, [r7, #7]
 800cb82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb86:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	79fa      	ldrb	r2, [r7, #7]
 800cb8c:	701a      	strb	r2, [r3, #0]
}
 800cb8e:	bf00      	nop
 800cb90:	3720      	adds	r7, #32
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	08015174 	.word	0x08015174

0800cb9c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b08c      	sub	sp, #48	; 0x30
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	607a      	str	r2, [r7, #4]
 800cba8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cbaa:	220b      	movs	r2, #11
 800cbac:	68b9      	ldr	r1, [r7, #8]
 800cbae:	68f8      	ldr	r0, [r7, #12]
 800cbb0:	f7fe ff44 	bl	800ba3c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	2b05      	cmp	r3, #5
 800cbb8:	d92b      	bls.n	800cc12 <gen_numname+0x76>
		sr = seq;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cbbe:	e022      	b.n	800cc06 <gen_numname+0x6a>
			wc = *lfn++;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	1c9a      	adds	r2, r3, #2
 800cbc4:	607a      	str	r2, [r7, #4]
 800cbc6:	881b      	ldrh	r3, [r3, #0]
 800cbc8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cbca:	2300      	movs	r3, #0
 800cbcc:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbce:	e017      	b.n	800cc00 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	005a      	lsls	r2, r3, #1
 800cbd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbd6:	f003 0301 	and.w	r3, r3, #1
 800cbda:	4413      	add	r3, r2
 800cbdc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cbde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbe0:	085b      	lsrs	r3, r3, #1
 800cbe2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d005      	beq.n	800cbfa <gen_numname+0x5e>
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800cbf4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800cbf8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc02:	2b0f      	cmp	r3, #15
 800cc04:	d9e4      	bls.n	800cbd0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	881b      	ldrh	r3, [r3, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1d8      	bne.n	800cbc0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cc12:	2307      	movs	r3, #7
 800cc14:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	f003 030f 	and.w	r3, r3, #15
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	3330      	adds	r3, #48	; 0x30
 800cc22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cc26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc2a:	2b39      	cmp	r3, #57	; 0x39
 800cc2c:	d904      	bls.n	800cc38 <gen_numname+0x9c>
 800cc2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc32:	3307      	adds	r3, #7
 800cc34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3a:	1e5a      	subs	r2, r3, #1
 800cc3c:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cc42:	4413      	add	r3, r2
 800cc44:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cc48:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	091b      	lsrs	r3, r3, #4
 800cc50:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1de      	bne.n	800cc16 <gen_numname+0x7a>
	ns[i] = '~';
 800cc58:	f107 0214 	add.w	r2, r7, #20
 800cc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5e:	4413      	add	r3, r2
 800cc60:	227e      	movs	r2, #126	; 0x7e
 800cc62:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cc64:	2300      	movs	r3, #0
 800cc66:	627b      	str	r3, [r7, #36]	; 0x24
 800cc68:	e002      	b.n	800cc70 <gen_numname+0xd4>
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d205      	bcs.n	800cc84 <gen_numname+0xe8>
 800cc78:	68fa      	ldr	r2, [r7, #12]
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7c:	4413      	add	r3, r2
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	2b20      	cmp	r3, #32
 800cc82:	d1f2      	bne.n	800cc6a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	2b07      	cmp	r3, #7
 800cc88:	d808      	bhi.n	800cc9c <gen_numname+0x100>
 800cc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8c:	1c5a      	adds	r2, r3, #1
 800cc8e:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cc94:	4413      	add	r3, r2
 800cc96:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cc9a:	e000      	b.n	800cc9e <gen_numname+0x102>
 800cc9c:	2120      	movs	r1, #32
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca0:	1c5a      	adds	r2, r3, #1
 800cca2:	627a      	str	r2, [r7, #36]	; 0x24
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	4413      	add	r3, r2
 800cca8:	460a      	mov	r2, r1
 800ccaa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ccac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccae:	2b07      	cmp	r3, #7
 800ccb0:	d9e8      	bls.n	800cc84 <gen_numname+0xe8>
}
 800ccb2:	bf00      	nop
 800ccb4:	bf00      	nop
 800ccb6:	3730      	adds	r7, #48	; 0x30
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ccc8:	230b      	movs	r3, #11
 800ccca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	0852      	lsrs	r2, r2, #1
 800ccd2:	01db      	lsls	r3, r3, #7
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	1c59      	adds	r1, r3, #1
 800ccdc:	6079      	str	r1, [r7, #4]
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	4413      	add	r3, r2
 800cce2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	60bb      	str	r3, [r7, #8]
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d1ed      	bne.n	800cccc <sum_sfn+0x10>
	return sum;
 800ccf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b086      	sub	sp, #24
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cd08:	2304      	movs	r3, #4
 800cd0a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800cd12:	23ff      	movs	r3, #255	; 0xff
 800cd14:	757b      	strb	r3, [r7, #21]
 800cd16:	23ff      	movs	r3, #255	; 0xff
 800cd18:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800cd1a:	e081      	b.n	800ce20 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	69db      	ldr	r3, [r3, #28]
 800cd20:	4619      	mov	r1, r3
 800cd22:	6938      	ldr	r0, [r7, #16]
 800cd24:	f7ff f8b8 	bl	800be98 <move_window>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cd2c:	7dfb      	ldrb	r3, [r7, #23]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d17c      	bne.n	800ce2c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a1b      	ldr	r3, [r3, #32]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800cd3a:	7dbb      	ldrb	r3, [r7, #22]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d102      	bne.n	800cd46 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cd40:	2304      	movs	r3, #4
 800cd42:	75fb      	strb	r3, [r7, #23]
 800cd44:	e077      	b.n	800ce36 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a1b      	ldr	r3, [r3, #32]
 800cd4a:	330b      	adds	r3, #11
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd52:	73fb      	strb	r3, [r7, #15]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	7bfa      	ldrb	r2, [r7, #15]
 800cd58:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cd5a:	7dbb      	ldrb	r3, [r7, #22]
 800cd5c:	2be5      	cmp	r3, #229	; 0xe5
 800cd5e:	d00e      	beq.n	800cd7e <dir_read+0x80>
 800cd60:	7dbb      	ldrb	r3, [r7, #22]
 800cd62:	2b2e      	cmp	r3, #46	; 0x2e
 800cd64:	d00b      	beq.n	800cd7e <dir_read+0x80>
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
 800cd68:	f023 0320 	bic.w	r3, r3, #32
 800cd6c:	2b08      	cmp	r3, #8
 800cd6e:	bf0c      	ite	eq
 800cd70:	2301      	moveq	r3, #1
 800cd72:	2300      	movne	r3, #0
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	461a      	mov	r2, r3
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d002      	beq.n	800cd84 <dir_read+0x86>
				ord = 0xFF;
 800cd7e:	23ff      	movs	r3, #255	; 0xff
 800cd80:	757b      	strb	r3, [r7, #21]
 800cd82:	e044      	b.n	800ce0e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
 800cd86:	2b0f      	cmp	r3, #15
 800cd88:	d12f      	bne.n	800cdea <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800cd8a:	7dbb      	ldrb	r3, [r7, #22]
 800cd8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00d      	beq.n	800cdb0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a1b      	ldr	r3, [r3, #32]
 800cd98:	7b5b      	ldrb	r3, [r3, #13]
 800cd9a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800cd9c:	7dbb      	ldrb	r3, [r7, #22]
 800cd9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cda2:	75bb      	strb	r3, [r7, #22]
 800cda4:	7dbb      	ldrb	r3, [r7, #22]
 800cda6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	695a      	ldr	r2, [r3, #20]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cdb0:	7dba      	ldrb	r2, [r7, #22]
 800cdb2:	7d7b      	ldrb	r3, [r7, #21]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d115      	bne.n	800cde4 <dir_read+0xe6>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6a1b      	ldr	r3, [r3, #32]
 800cdbc:	330d      	adds	r3, #13
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	7d3a      	ldrb	r2, [r7, #20]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d10e      	bne.n	800cde4 <dir_read+0xe6>
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	68da      	ldr	r2, [r3, #12]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6a1b      	ldr	r3, [r3, #32]
 800cdce:	4619      	mov	r1, r3
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	f7ff fe17 	bl	800ca04 <pick_lfn>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d003      	beq.n	800cde4 <dir_read+0xe6>
 800cddc:	7d7b      	ldrb	r3, [r7, #21]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	e000      	b.n	800cde6 <dir_read+0xe8>
 800cde4:	23ff      	movs	r3, #255	; 0xff
 800cde6:	757b      	strb	r3, [r7, #21]
 800cde8:	e011      	b.n	800ce0e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cdea:	7d7b      	ldrb	r3, [r7, #21]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d109      	bne.n	800ce04 <dir_read+0x106>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6a1b      	ldr	r3, [r3, #32]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7ff ff61 	bl	800ccbc <sum_sfn>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	7d3b      	ldrb	r3, [r7, #20]
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d015      	beq.n	800ce30 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f04f 32ff 	mov.w	r2, #4294967295
 800ce0a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800ce0c:	e010      	b.n	800ce30 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ce0e:	2100      	movs	r1, #0
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7ff fc3c 	bl	800c68e <dir_next>
 800ce16:	4603      	mov	r3, r0
 800ce18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce1a:	7dfb      	ldrb	r3, [r7, #23]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d109      	bne.n	800ce34 <dir_read+0x136>
	while (dp->sect) {
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	69db      	ldr	r3, [r3, #28]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f47f af79 	bne.w	800cd1c <dir_read+0x1e>
 800ce2a:	e004      	b.n	800ce36 <dir_read+0x138>
		if (res != FR_OK) break;
 800ce2c:	bf00      	nop
 800ce2e:	e002      	b.n	800ce36 <dir_read+0x138>
					break;
 800ce30:	bf00      	nop
 800ce32:	e000      	b.n	800ce36 <dir_read+0x138>
		if (res != FR_OK) break;
 800ce34:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ce36:	7dfb      	ldrb	r3, [r7, #23]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <dir_read+0x144>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	61da      	str	r2, [r3, #28]
	return res;
 800ce42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3718      	adds	r7, #24
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b086      	sub	sp, #24
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7ff fb9b 	bl	800c598 <dir_sdi>
 800ce62:	4603      	mov	r3, r0
 800ce64:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ce66:	7dfb      	ldrb	r3, [r7, #23]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d001      	beq.n	800ce70 <dir_find+0x24>
 800ce6c:	7dfb      	ldrb	r3, [r7, #23]
 800ce6e:	e0a9      	b.n	800cfc4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce70:	23ff      	movs	r3, #255	; 0xff
 800ce72:	753b      	strb	r3, [r7, #20]
 800ce74:	7d3b      	ldrb	r3, [r7, #20]
 800ce76:	757b      	strb	r3, [r7, #21]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce7e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	69db      	ldr	r3, [r3, #28]
 800ce84:	4619      	mov	r1, r3
 800ce86:	6938      	ldr	r0, [r7, #16]
 800ce88:	f7ff f806 	bl	800be98 <move_window>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce90:	7dfb      	ldrb	r3, [r7, #23]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	f040 8090 	bne.w	800cfb8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a1b      	ldr	r3, [r3, #32]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cea0:	7dbb      	ldrb	r3, [r7, #22]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d102      	bne.n	800ceac <dir_find+0x60>
 800cea6:	2304      	movs	r3, #4
 800cea8:	75fb      	strb	r3, [r7, #23]
 800ceaa:	e08a      	b.n	800cfc2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a1b      	ldr	r3, [r3, #32]
 800ceb0:	330b      	adds	r3, #11
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ceb8:	73fb      	strb	r3, [r7, #15]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	7bfa      	ldrb	r2, [r7, #15]
 800cebe:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cec0:	7dbb      	ldrb	r3, [r7, #22]
 800cec2:	2be5      	cmp	r3, #229	; 0xe5
 800cec4:	d007      	beq.n	800ced6 <dir_find+0x8a>
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
 800cec8:	f003 0308 	and.w	r3, r3, #8
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d009      	beq.n	800cee4 <dir_find+0x98>
 800ced0:	7bfb      	ldrb	r3, [r7, #15]
 800ced2:	2b0f      	cmp	r3, #15
 800ced4:	d006      	beq.n	800cee4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ced6:	23ff      	movs	r3, #255	; 0xff
 800ced8:	757b      	strb	r3, [r7, #21]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f04f 32ff 	mov.w	r2, #4294967295
 800cee0:	631a      	str	r2, [r3, #48]	; 0x30
 800cee2:	e05e      	b.n	800cfa2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cee4:	7bfb      	ldrb	r3, [r7, #15]
 800cee6:	2b0f      	cmp	r3, #15
 800cee8:	d136      	bne.n	800cf58 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d154      	bne.n	800cfa2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cef8:	7dbb      	ldrb	r3, [r7, #22]
 800cefa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00d      	beq.n	800cf1e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	7b5b      	ldrb	r3, [r3, #13]
 800cf08:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cf0a:	7dbb      	ldrb	r3, [r7, #22]
 800cf0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf10:	75bb      	strb	r3, [r7, #22]
 800cf12:	7dbb      	ldrb	r3, [r7, #22]
 800cf14:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	695a      	ldr	r2, [r3, #20]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cf1e:	7dba      	ldrb	r2, [r7, #22]
 800cf20:	7d7b      	ldrb	r3, [r7, #21]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d115      	bne.n	800cf52 <dir_find+0x106>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a1b      	ldr	r3, [r3, #32]
 800cf2a:	330d      	adds	r3, #13
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	7d3a      	ldrb	r2, [r7, #20]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d10e      	bne.n	800cf52 <dir_find+0x106>
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	68da      	ldr	r2, [r3, #12]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6a1b      	ldr	r3, [r3, #32]
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	4610      	mov	r0, r2
 800cf40:	f7ff fcf0 	bl	800c924 <cmp_lfn>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d003      	beq.n	800cf52 <dir_find+0x106>
 800cf4a:	7d7b      	ldrb	r3, [r7, #21]
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	e000      	b.n	800cf54 <dir_find+0x108>
 800cf52:	23ff      	movs	r3, #255	; 0xff
 800cf54:	757b      	strb	r3, [r7, #21]
 800cf56:	e024      	b.n	800cfa2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cf58:	7d7b      	ldrb	r3, [r7, #21]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d109      	bne.n	800cf72 <dir_find+0x126>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6a1b      	ldr	r3, [r3, #32]
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7ff feaa 	bl	800ccbc <sum_sfn>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	7d3b      	ldrb	r3, [r7, #20]
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d024      	beq.n	800cfbc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf78:	f003 0301 	and.w	r3, r3, #1
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10a      	bne.n	800cf96 <dir_find+0x14a>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6a18      	ldr	r0, [r3, #32]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	3324      	adds	r3, #36	; 0x24
 800cf88:	220b      	movs	r2, #11
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	f7fe fd92 	bl	800bab4 <mem_cmp>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d014      	beq.n	800cfc0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cf96:	23ff      	movs	r3, #255	; 0xff
 800cf98:	757b      	strb	r3, [r7, #21]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7ff fb72 	bl	800c68e <dir_next>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f43f af65 	beq.w	800ce80 <dir_find+0x34>
 800cfb6:	e004      	b.n	800cfc2 <dir_find+0x176>
		if (res != FR_OK) break;
 800cfb8:	bf00      	nop
 800cfba:	e002      	b.n	800cfc2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cfbc:	bf00      	nop
 800cfbe:	e000      	b.n	800cfc2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cfc0:	bf00      	nop

	return res;
 800cfc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3718      	adds	r7, #24
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b08c      	sub	sp, #48	; 0x30
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cfe0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <dir_register+0x20>
 800cfe8:	2306      	movs	r3, #6
 800cfea:	e0e0      	b.n	800d1ae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cfec:	2300      	movs	r3, #0
 800cfee:	627b      	str	r3, [r7, #36]	; 0x24
 800cff0:	e002      	b.n	800cff8 <dir_register+0x2c>
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff4:	3301      	adds	r3, #1
 800cff6:	627b      	str	r3, [r7, #36]	; 0x24
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	68da      	ldr	r2, [r3, #12]
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	4413      	add	r3, r2
 800d002:	881b      	ldrh	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1f4      	bne.n	800cff2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d00e:	f107 030c 	add.w	r3, r7, #12
 800d012:	220c      	movs	r2, #12
 800d014:	4618      	mov	r0, r3
 800d016:	f7fe fd11 	bl	800ba3c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d01a:	7dfb      	ldrb	r3, [r7, #23]
 800d01c:	f003 0301 	and.w	r3, r3, #1
 800d020:	2b00      	cmp	r3, #0
 800d022:	d032      	beq.n	800d08a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2240      	movs	r2, #64	; 0x40
 800d028:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d02c:	2301      	movs	r3, #1
 800d02e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d030:	e016      	b.n	800d060 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	68da      	ldr	r2, [r3, #12]
 800d03c:	f107 010c 	add.w	r1, r7, #12
 800d040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d042:	f7ff fdab 	bl	800cb9c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f7ff ff00 	bl	800ce4c <dir_find>
 800d04c:	4603      	mov	r3, r0
 800d04e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d056:	2b00      	cmp	r3, #0
 800d058:	d106      	bne.n	800d068 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	3301      	adds	r3, #1
 800d05e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d062:	2b63      	cmp	r3, #99	; 0x63
 800d064:	d9e5      	bls.n	800d032 <dir_register+0x66>
 800d066:	e000      	b.n	800d06a <dir_register+0x9e>
			if (res != FR_OK) break;
 800d068:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06c:	2b64      	cmp	r3, #100	; 0x64
 800d06e:	d101      	bne.n	800d074 <dir_register+0xa8>
 800d070:	2307      	movs	r3, #7
 800d072:	e09c      	b.n	800d1ae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d078:	2b04      	cmp	r3, #4
 800d07a:	d002      	beq.n	800d082 <dir_register+0xb6>
 800d07c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d080:	e095      	b.n	800d1ae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d082:	7dfa      	ldrb	r2, [r7, #23]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d08a:	7dfb      	ldrb	r3, [r7, #23]
 800d08c:	f003 0302 	and.w	r3, r3, #2
 800d090:	2b00      	cmp	r3, #0
 800d092:	d007      	beq.n	800d0a4 <dir_register+0xd8>
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	330c      	adds	r3, #12
 800d098:	4a47      	ldr	r2, [pc, #284]	; (800d1b8 <dir_register+0x1ec>)
 800d09a:	fba2 2303 	umull	r2, r3, r2, r3
 800d09e:	089b      	lsrs	r3, r3, #2
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	e000      	b.n	800d0a6 <dir_register+0xda>
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d0a8:	6a39      	ldr	r1, [r7, #32]
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f7ff fbb4 	bl	800c818 <dir_alloc>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d0b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d148      	bne.n	800d150 <dir_register+0x184>
 800d0be:	6a3b      	ldr	r3, [r7, #32]
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	623b      	str	r3, [r7, #32]
 800d0c4:	6a3b      	ldr	r3, [r7, #32]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d042      	beq.n	800d150 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	695a      	ldr	r2, [r3, #20]
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	015b      	lsls	r3, r3, #5
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f7ff fa5e 	bl	800c598 <dir_sdi>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d132      	bne.n	800d150 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	3324      	adds	r3, #36	; 0x24
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7ff fde4 	bl	800ccbc <sum_sfn>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	69db      	ldr	r3, [r3, #28]
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	69f8      	ldr	r0, [r7, #28]
 800d100:	f7fe feca 	bl	800be98 <move_window>
 800d104:	4603      	mov	r3, r0
 800d106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d10a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d11d      	bne.n	800d14e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	68d8      	ldr	r0, [r3, #12]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6a19      	ldr	r1, [r3, #32]
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	7efb      	ldrb	r3, [r7, #27]
 800d120:	f7ff fcd4 	bl	800cacc <put_lfn>
				fs->wflag = 1;
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	2201      	movs	r2, #1
 800d128:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d12a:	2100      	movs	r1, #0
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7ff faae 	bl	800c68e <dir_next>
 800d132:	4603      	mov	r3, r0
 800d134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d107      	bne.n	800d150 <dir_register+0x184>
 800d140:	6a3b      	ldr	r3, [r7, #32]
 800d142:	3b01      	subs	r3, #1
 800d144:	623b      	str	r3, [r7, #32]
 800d146:	6a3b      	ldr	r3, [r7, #32]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1d5      	bne.n	800d0f8 <dir_register+0x12c>
 800d14c:	e000      	b.n	800d150 <dir_register+0x184>
				if (res != FR_OK) break;
 800d14e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d154:	2b00      	cmp	r3, #0
 800d156:	d128      	bne.n	800d1aa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	69db      	ldr	r3, [r3, #28]
 800d15c:	4619      	mov	r1, r3
 800d15e:	69f8      	ldr	r0, [r7, #28]
 800d160:	f7fe fe9a 	bl	800be98 <move_window>
 800d164:	4603      	mov	r3, r0
 800d166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d16a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d11b      	bne.n	800d1aa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a1b      	ldr	r3, [r3, #32]
 800d176:	2220      	movs	r2, #32
 800d178:	2100      	movs	r1, #0
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fe fc7f 	bl	800ba7e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6a18      	ldr	r0, [r3, #32]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3324      	adds	r3, #36	; 0x24
 800d188:	220b      	movs	r2, #11
 800d18a:	4619      	mov	r1, r3
 800d18c:	f7fe fc56 	bl	800ba3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	330c      	adds	r3, #12
 800d19c:	f002 0218 	and.w	r2, r2, #24
 800d1a0:	b2d2      	uxtb	r2, r2
 800d1a2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d1aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3730      	adds	r7, #48	; 0x30
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	4ec4ec4f 	.word	0x4ec4ec4f

0800d1bc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b088      	sub	sp, #32
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	69db      	ldr	r3, [r3, #28]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f000 80c9 	beq.w	800d36e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e4:	d032      	beq.n	800d24c <get_fileinfo+0x90>
			i = j = 0;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	61bb      	str	r3, [r7, #24]
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d1ee:	e01b      	b.n	800d228 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d1f0:	89fb      	ldrh	r3, [r7, #14]
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f001 fc11 	bl	800ea1c <ff_convert>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d1fe:	89fb      	ldrh	r3, [r7, #14]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d102      	bne.n	800d20a <get_fileinfo+0x4e>
 800d204:	2300      	movs	r3, #0
 800d206:	61fb      	str	r3, [r7, #28]
 800d208:	e01a      	b.n	800d240 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	2bfe      	cmp	r3, #254	; 0xfe
 800d20e:	d902      	bls.n	800d216 <get_fileinfo+0x5a>
 800d210:	2300      	movs	r3, #0
 800d212:	61fb      	str	r3, [r7, #28]
 800d214:	e014      	b.n	800d240 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	1c5a      	adds	r2, r3, #1
 800d21a:	61fa      	str	r2, [r7, #28]
 800d21c:	89fa      	ldrh	r2, [r7, #14]
 800d21e:	b2d1      	uxtb	r1, r2
 800d220:	683a      	ldr	r2, [r7, #0]
 800d222:	4413      	add	r3, r2
 800d224:	460a      	mov	r2, r1
 800d226:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	68da      	ldr	r2, [r3, #12]
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	1c59      	adds	r1, r3, #1
 800d230:	61b9      	str	r1, [r7, #24]
 800d232:	005b      	lsls	r3, r3, #1
 800d234:	4413      	add	r3, r2
 800d236:	881b      	ldrh	r3, [r3, #0]
 800d238:	81fb      	strh	r3, [r7, #14]
 800d23a:	89fb      	ldrh	r3, [r7, #14]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1d7      	bne.n	800d1f0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d240:	683a      	ldr	r2, [r7, #0]
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	4413      	add	r3, r2
 800d246:	3316      	adds	r3, #22
 800d248:	2200      	movs	r2, #0
 800d24a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d24c:	2300      	movs	r3, #0
 800d24e:	61bb      	str	r3, [r7, #24]
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d254:	683a      	ldr	r2, [r7, #0]
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	4413      	add	r3, r2
 800d25a:	3316      	adds	r3, #22
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d260:	e04c      	b.n	800d2fc <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a1a      	ldr	r2, [r3, #32]
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	1c59      	adds	r1, r3, #1
 800d26a:	61f9      	str	r1, [r7, #28]
 800d26c:	4413      	add	r3, r2
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d272:	7dfb      	ldrb	r3, [r7, #23]
 800d274:	2b20      	cmp	r3, #32
 800d276:	d100      	bne.n	800d27a <get_fileinfo+0xbe>
 800d278:	e040      	b.n	800d2fc <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d27a:	7dfb      	ldrb	r3, [r7, #23]
 800d27c:	2b05      	cmp	r3, #5
 800d27e:	d101      	bne.n	800d284 <get_fileinfo+0xc8>
 800d280:	23e5      	movs	r3, #229	; 0xe5
 800d282:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	2b09      	cmp	r3, #9
 800d288:	d10f      	bne.n	800d2aa <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d28a:	89bb      	ldrh	r3, [r7, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d105      	bne.n	800d29c <get_fileinfo+0xe0>
 800d290:	683a      	ldr	r2, [r7, #0]
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	4413      	add	r3, r2
 800d296:	3316      	adds	r3, #22
 800d298:	222e      	movs	r2, #46	; 0x2e
 800d29a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	1c5a      	adds	r2, r3, #1
 800d2a0:	61ba      	str	r2, [r7, #24]
 800d2a2:	683a      	ldr	r2, [r7, #0]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	222e      	movs	r2, #46	; 0x2e
 800d2a8:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	3309      	adds	r3, #9
 800d2b2:	7dfa      	ldrb	r2, [r7, #23]
 800d2b4:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d2b6:	89bb      	ldrh	r3, [r7, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d11c      	bne.n	800d2f6 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d2bc:	7dfb      	ldrb	r3, [r7, #23]
 800d2be:	2b40      	cmp	r3, #64	; 0x40
 800d2c0:	d913      	bls.n	800d2ea <get_fileinfo+0x12e>
 800d2c2:	7dfb      	ldrb	r3, [r7, #23]
 800d2c4:	2b5a      	cmp	r3, #90	; 0x5a
 800d2c6:	d810      	bhi.n	800d2ea <get_fileinfo+0x12e>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6a1b      	ldr	r3, [r3, #32]
 800d2cc:	330c      	adds	r3, #12
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	2b08      	cmp	r3, #8
 800d2d6:	d901      	bls.n	800d2dc <get_fileinfo+0x120>
 800d2d8:	2310      	movs	r3, #16
 800d2da:	e000      	b.n	800d2de <get_fileinfo+0x122>
 800d2dc:	2308      	movs	r3, #8
 800d2de:	4013      	ands	r3, r2
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d002      	beq.n	800d2ea <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d2e4:	7dfb      	ldrb	r3, [r7, #23]
 800d2e6:	3320      	adds	r3, #32
 800d2e8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d2ea:	683a      	ldr	r2, [r7, #0]
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	3316      	adds	r3, #22
 800d2f2:	7dfa      	ldrb	r2, [r7, #23]
 800d2f4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	2b0a      	cmp	r3, #10
 800d300:	d9af      	bls.n	800d262 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d302:	89bb      	ldrh	r3, [r7, #12]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10d      	bne.n	800d324 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d308:	683a      	ldr	r2, [r7, #0]
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	4413      	add	r3, r2
 800d30e:	3316      	adds	r3, #22
 800d310:	2200      	movs	r2, #0
 800d312:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6a1b      	ldr	r3, [r3, #32]
 800d318:	330c      	adds	r3, #12
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d101      	bne.n	800d324 <get_fileinfo+0x168>
 800d320:	2300      	movs	r3, #0
 800d322:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d324:	683a      	ldr	r2, [r7, #0]
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	4413      	add	r3, r2
 800d32a:	3309      	adds	r3, #9
 800d32c:	2200      	movs	r2, #0
 800d32e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a1b      	ldr	r3, [r3, #32]
 800d334:	7ada      	ldrb	r2, [r3, #11]
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	331c      	adds	r3, #28
 800d340:	4618      	mov	r0, r3
 800d342:	f7fe fb11 	bl	800b968 <ld_dword>
 800d346:	4602      	mov	r2, r0
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6a1b      	ldr	r3, [r3, #32]
 800d350:	3316      	adds	r3, #22
 800d352:	4618      	mov	r0, r3
 800d354:	f7fe fb08 	bl	800b968 <ld_dword>
 800d358:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	80da      	strh	r2, [r3, #6]
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	0c1b      	lsrs	r3, r3, #16
 800d366:	b29a      	uxth	r2, r3
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	809a      	strh	r2, [r3, #4]
 800d36c:	e000      	b.n	800d370 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d36e:	bf00      	nop
}
 800d370:	3720      	adds	r7, #32
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
	...

0800d378 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	1c59      	adds	r1, r3, #1
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	6011      	str	r1, [r2, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d38e:	89fb      	ldrh	r3, [r7, #14]
 800d390:	2b60      	cmp	r3, #96	; 0x60
 800d392:	d905      	bls.n	800d3a0 <get_achar+0x28>
 800d394:	89fb      	ldrh	r3, [r7, #14]
 800d396:	2b7a      	cmp	r3, #122	; 0x7a
 800d398:	d802      	bhi.n	800d3a0 <get_achar+0x28>
 800d39a:	89fb      	ldrh	r3, [r7, #14]
 800d39c:	3b20      	subs	r3, #32
 800d39e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d3a0:	89fb      	ldrh	r3, [r7, #14]
 800d3a2:	2b7f      	cmp	r3, #127	; 0x7f
 800d3a4:	d904      	bls.n	800d3b0 <get_achar+0x38>
 800d3a6:	89fb      	ldrh	r3, [r7, #14]
 800d3a8:	3b80      	subs	r3, #128	; 0x80
 800d3aa:	4a05      	ldr	r2, [pc, #20]	; (800d3c0 <get_achar+0x48>)
 800d3ac:	5cd3      	ldrb	r3, [r2, r3]
 800d3ae:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800d3b0:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3714      	adds	r7, #20
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	080150f4 	.word	0x080150f4

0800d3c4 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b08a      	sub	sp, #40	; 0x28
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	607a      	str	r2, [r7, #4]
 800d3d0:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800d3d2:	e009      	b.n	800d3e8 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800d3d4:	f107 0308 	add.w	r3, r7, #8
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7ff ffcd 	bl	800d378 <get_achar>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d101      	bne.n	800d3e8 <pattern_matching+0x24>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	e064      	b.n	800d4b2 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	1e5a      	subs	r2, r3, #1
 800d3ec:	607a      	str	r2, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1f0      	bne.n	800d3d4 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d104      	bne.n	800d404 <pattern_matching+0x40>
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <pattern_matching+0x40>
 800d400:	2301      	movs	r3, #1
 800d402:	e056      	b.n	800d4b2 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	617b      	str	r3, [r7, #20]
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	2b3f      	cmp	r3, #63	; 0x3f
 800d412:	d003      	beq.n	800d41c <pattern_matching+0x58>
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	2b2a      	cmp	r3, #42	; 0x2a
 800d41a:	d126      	bne.n	800d46a <pattern_matching+0xa6>
				nm = nx = 0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	61fb      	str	r3, [r7, #28]
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	1c5a      	adds	r2, r3, #1
 800d428:	617a      	str	r2, [r7, #20]
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	2b3f      	cmp	r3, #63	; 0x3f
 800d42e:	d103      	bne.n	800d438 <pattern_matching+0x74>
 800d430:	6a3b      	ldr	r3, [r7, #32]
 800d432:	3301      	adds	r3, #1
 800d434:	623b      	str	r3, [r7, #32]
 800d436:	e001      	b.n	800d43c <pattern_matching+0x78>
 800d438:	2301      	movs	r3, #1
 800d43a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b3f      	cmp	r3, #63	; 0x3f
 800d442:	d0ef      	beq.n	800d424 <pattern_matching+0x60>
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b2a      	cmp	r3, #42	; 0x2a
 800d44a:	d0eb      	beq.n	800d424 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800d44c:	6978      	ldr	r0, [r7, #20]
 800d44e:	6939      	ldr	r1, [r7, #16]
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	6a3a      	ldr	r2, [r7, #32]
 800d454:	f7ff ffb6 	bl	800d3c4 <pattern_matching>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d001      	beq.n	800d462 <pattern_matching+0x9e>
 800d45e:	2301      	movs	r3, #1
 800d460:	e027      	b.n	800d4b2 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d468:	e017      	b.n	800d49a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800d46a:	f107 0314 	add.w	r3, r7, #20
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff ff82 	bl	800d378 <get_achar>
 800d474:	4603      	mov	r3, r0
 800d476:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800d478:	f107 0310 	add.w	r3, r7, #16
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7ff ff7b 	bl	800d378 <get_achar>
 800d482:	4603      	mov	r3, r0
 800d484:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800d486:	8b7a      	ldrh	r2, [r7, #26]
 800d488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d104      	bne.n	800d498 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800d48e:	8b7b      	ldrh	r3, [r7, #26]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d1bb      	bne.n	800d40c <pattern_matching+0x48>
 800d494:	2301      	movs	r3, #1
 800d496:	e00c      	b.n	800d4b2 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800d498:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800d49a:	f107 0308 	add.w	r3, r7, #8
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7ff ff6a 	bl	800d378 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d002      	beq.n	800d4b0 <pattern_matching+0xec>
 800d4aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1a9      	bne.n	800d404 <pattern_matching+0x40>

	return 0;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3728      	adds	r7, #40	; 0x28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
	...

0800d4bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b08a      	sub	sp, #40	; 0x28
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	613b      	str	r3, [r7, #16]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	60fb      	str	r3, [r7, #12]
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	617b      	str	r3, [r7, #20]
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	1c5a      	adds	r2, r3, #1
 800d4e0:	61ba      	str	r2, [r7, #24]
 800d4e2:	693a      	ldr	r2, [r7, #16]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d4ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4ec:	2b1f      	cmp	r3, #31
 800d4ee:	d940      	bls.n	800d572 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d4f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4f2:	2b2f      	cmp	r3, #47	; 0x2f
 800d4f4:	d006      	beq.n	800d504 <create_name+0x48>
 800d4f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4f8:	2b5c      	cmp	r3, #92	; 0x5c
 800d4fa:	d110      	bne.n	800d51e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d4fc:	e002      	b.n	800d504 <create_name+0x48>
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	3301      	adds	r3, #1
 800d502:	61bb      	str	r3, [r7, #24]
 800d504:	693a      	ldr	r2, [r7, #16]
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	4413      	add	r3, r2
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	2b2f      	cmp	r3, #47	; 0x2f
 800d50e:	d0f6      	beq.n	800d4fe <create_name+0x42>
 800d510:	693a      	ldr	r2, [r7, #16]
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	4413      	add	r3, r2
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	2b5c      	cmp	r3, #92	; 0x5c
 800d51a:	d0f0      	beq.n	800d4fe <create_name+0x42>
			break;
 800d51c:	e02a      	b.n	800d574 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	2bfe      	cmp	r3, #254	; 0xfe
 800d522:	d901      	bls.n	800d528 <create_name+0x6c>
 800d524:	2306      	movs	r3, #6
 800d526:	e177      	b.n	800d818 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d52e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d530:	2101      	movs	r1, #1
 800d532:	4618      	mov	r0, r3
 800d534:	f001 fa72 	bl	800ea1c <ff_convert>
 800d538:	4603      	mov	r3, r0
 800d53a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d53c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d101      	bne.n	800d546 <create_name+0x8a>
 800d542:	2306      	movs	r3, #6
 800d544:	e168      	b.n	800d818 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d548:	2b7f      	cmp	r3, #127	; 0x7f
 800d54a:	d809      	bhi.n	800d560 <create_name+0xa4>
 800d54c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d54e:	4619      	mov	r1, r3
 800d550:	48b3      	ldr	r0, [pc, #716]	; (800d820 <create_name+0x364>)
 800d552:	f7fe fad6 	bl	800bb02 <chk_chr>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d001      	beq.n	800d560 <create_name+0xa4>
 800d55c:	2306      	movs	r3, #6
 800d55e:	e15b      	b.n	800d818 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	1c5a      	adds	r2, r3, #1
 800d564:	617a      	str	r2, [r7, #20]
 800d566:	005b      	lsls	r3, r3, #1
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	4413      	add	r3, r2
 800d56c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d56e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d570:	e7b4      	b.n	800d4dc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d572:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	441a      	add	r2, r3
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d57e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d580:	2b1f      	cmp	r3, #31
 800d582:	d801      	bhi.n	800d588 <create_name+0xcc>
 800d584:	2304      	movs	r3, #4
 800d586:	e000      	b.n	800d58a <create_name+0xce>
 800d588:	2300      	movs	r3, #0
 800d58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d58e:	e011      	b.n	800d5b4 <create_name+0xf8>
		w = lfn[di - 1];
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d596:	3b01      	subs	r3, #1
 800d598:	005b      	lsls	r3, r3, #1
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	4413      	add	r3, r2
 800d59e:	881b      	ldrh	r3, [r3, #0]
 800d5a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d5a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5a4:	2b20      	cmp	r3, #32
 800d5a6:	d002      	beq.n	800d5ae <create_name+0xf2>
 800d5a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d5ac:	d106      	bne.n	800d5bc <create_name+0x100>
		di--;
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1ea      	bne.n	800d590 <create_name+0xd4>
 800d5ba:	e000      	b.n	800d5be <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d5bc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	005b      	lsls	r3, r3, #1
 800d5c2:	68fa      	ldr	r2, [r7, #12]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <create_name+0x118>
 800d5d0:	2306      	movs	r3, #6
 800d5d2:	e121      	b.n	800d818 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	3324      	adds	r3, #36	; 0x24
 800d5d8:	220b      	movs	r2, #11
 800d5da:	2120      	movs	r1, #32
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fe fa4e 	bl	800ba7e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	61bb      	str	r3, [r7, #24]
 800d5e6:	e002      	b.n	800d5ee <create_name+0x132>
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	61bb      	str	r3, [r7, #24]
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	005b      	lsls	r3, r3, #1
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	2b20      	cmp	r3, #32
 800d5fa:	d0f5      	beq.n	800d5e8 <create_name+0x12c>
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	4413      	add	r3, r2
 800d604:	881b      	ldrh	r3, [r3, #0]
 800d606:	2b2e      	cmp	r3, #46	; 0x2e
 800d608:	d0ee      	beq.n	800d5e8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d009      	beq.n	800d624 <create_name+0x168>
 800d610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d614:	f043 0303 	orr.w	r3, r3, #3
 800d618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d61c:	e002      	b.n	800d624 <create_name+0x168>
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	3b01      	subs	r3, #1
 800d622:	617b      	str	r3, [r7, #20]
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d009      	beq.n	800d63e <create_name+0x182>
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d630:	3b01      	subs	r3, #1
 800d632:	005b      	lsls	r3, r3, #1
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	4413      	add	r3, r2
 800d638:	881b      	ldrh	r3, [r3, #0]
 800d63a:	2b2e      	cmp	r3, #46	; 0x2e
 800d63c:	d1ef      	bne.n	800d61e <create_name+0x162>

	i = b = 0; ni = 8;
 800d63e:	2300      	movs	r3, #0
 800d640:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d644:	2300      	movs	r3, #0
 800d646:	623b      	str	r3, [r7, #32]
 800d648:	2308      	movs	r3, #8
 800d64a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	1c5a      	adds	r2, r3, #1
 800d650:	61ba      	str	r2, [r7, #24]
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	4413      	add	r3, r2
 800d658:	881b      	ldrh	r3, [r3, #0]
 800d65a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d65c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f000 8090 	beq.w	800d784 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d666:	2b20      	cmp	r3, #32
 800d668:	d006      	beq.n	800d678 <create_name+0x1bc>
 800d66a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d66c:	2b2e      	cmp	r3, #46	; 0x2e
 800d66e:	d10a      	bne.n	800d686 <create_name+0x1ca>
 800d670:	69ba      	ldr	r2, [r7, #24]
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	429a      	cmp	r2, r3
 800d676:	d006      	beq.n	800d686 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d67c:	f043 0303 	orr.w	r3, r3, #3
 800d680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d684:	e07d      	b.n	800d782 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d686:	6a3a      	ldr	r2, [r7, #32]
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d203      	bcs.n	800d696 <create_name+0x1da>
 800d68e:	69ba      	ldr	r2, [r7, #24]
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	429a      	cmp	r2, r3
 800d694:	d123      	bne.n	800d6de <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	2b0b      	cmp	r3, #11
 800d69a:	d106      	bne.n	800d6aa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6a0:	f043 0303 	orr.w	r3, r3, #3
 800d6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6a8:	e06f      	b.n	800d78a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d6aa:	69ba      	ldr	r2, [r7, #24]
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d005      	beq.n	800d6be <create_name+0x202>
 800d6b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6b6:	f043 0303 	orr.w	r3, r3, #3
 800d6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d6be:	69ba      	ldr	r2, [r7, #24]
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d860      	bhi.n	800d788 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	61bb      	str	r3, [r7, #24]
 800d6ca:	2308      	movs	r3, #8
 800d6cc:	623b      	str	r3, [r7, #32]
 800d6ce:	230b      	movs	r3, #11
 800d6d0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d6d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d6dc:	e051      	b.n	800d782 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d6de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6e0:	2b7f      	cmp	r3, #127	; 0x7f
 800d6e2:	d914      	bls.n	800d70e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d6e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f001 f997 	bl	800ea1c <ff_convert>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d6f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d004      	beq.n	800d702 <create_name+0x246>
 800d6f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6fa:	3b80      	subs	r3, #128	; 0x80
 800d6fc:	4a49      	ldr	r2, [pc, #292]	; (800d824 <create_name+0x368>)
 800d6fe:	5cd3      	ldrb	r3, [r2, r3]
 800d700:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d706:	f043 0302 	orr.w	r3, r3, #2
 800d70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d70e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d710:	2b00      	cmp	r3, #0
 800d712:	d007      	beq.n	800d724 <create_name+0x268>
 800d714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d716:	4619      	mov	r1, r3
 800d718:	4843      	ldr	r0, [pc, #268]	; (800d828 <create_name+0x36c>)
 800d71a:	f7fe f9f2 	bl	800bb02 <chk_chr>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d008      	beq.n	800d736 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d724:	235f      	movs	r3, #95	; 0x5f
 800d726:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d72c:	f043 0303 	orr.w	r3, r3, #3
 800d730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d734:	e01b      	b.n	800d76e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d738:	2b40      	cmp	r3, #64	; 0x40
 800d73a:	d909      	bls.n	800d750 <create_name+0x294>
 800d73c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d73e:	2b5a      	cmp	r3, #90	; 0x5a
 800d740:	d806      	bhi.n	800d750 <create_name+0x294>
					b |= 2;
 800d742:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d746:	f043 0302 	orr.w	r3, r3, #2
 800d74a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d74e:	e00e      	b.n	800d76e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d752:	2b60      	cmp	r3, #96	; 0x60
 800d754:	d90b      	bls.n	800d76e <create_name+0x2b2>
 800d756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d758:	2b7a      	cmp	r3, #122	; 0x7a
 800d75a:	d808      	bhi.n	800d76e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d75c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d760:	f043 0301 	orr.w	r3, r3, #1
 800d764:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d76a:	3b20      	subs	r3, #32
 800d76c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d76e:	6a3b      	ldr	r3, [r7, #32]
 800d770:	1c5a      	adds	r2, r3, #1
 800d772:	623a      	str	r2, [r7, #32]
 800d774:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d776:	b2d1      	uxtb	r1, r2
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	4413      	add	r3, r2
 800d77c:	460a      	mov	r2, r1
 800d77e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d782:	e763      	b.n	800d64c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d784:	bf00      	nop
 800d786:	e000      	b.n	800d78a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d788:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d790:	2be5      	cmp	r3, #229	; 0xe5
 800d792:	d103      	bne.n	800d79c <create_name+0x2e0>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2205      	movs	r2, #5
 800d798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	2b08      	cmp	r3, #8
 800d7a0:	d104      	bne.n	800d7ac <create_name+0x2f0>
 800d7a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d7ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7b0:	f003 030c 	and.w	r3, r3, #12
 800d7b4:	2b0c      	cmp	r3, #12
 800d7b6:	d005      	beq.n	800d7c4 <create_name+0x308>
 800d7b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7bc:	f003 0303 	and.w	r3, r3, #3
 800d7c0:	2b03      	cmp	r3, #3
 800d7c2:	d105      	bne.n	800d7d0 <create_name+0x314>
 800d7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7c8:	f043 0302 	orr.w	r3, r3, #2
 800d7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d4:	f003 0302 	and.w	r3, r3, #2
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d117      	bne.n	800d80c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d7dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7e0:	f003 0303 	and.w	r3, r3, #3
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d105      	bne.n	800d7f4 <create_name+0x338>
 800d7e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7ec:	f043 0310 	orr.w	r3, r3, #16
 800d7f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d7f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7f8:	f003 030c 	and.w	r3, r3, #12
 800d7fc:	2b04      	cmp	r3, #4
 800d7fe:	d105      	bne.n	800d80c <create_name+0x350>
 800d800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d804:	f043 0308 	orr.w	r3, r3, #8
 800d808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d812:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d816:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3728      	adds	r7, #40	; 0x28
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	08013d08 	.word	0x08013d08
 800d824:	080150f4 	.word	0x080150f4
 800d828:	08013d14 	.word	0x08013d14

0800d82c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b086      	sub	sp, #24
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d840:	e002      	b.n	800d848 <follow_path+0x1c>
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	3301      	adds	r3, #1
 800d846:	603b      	str	r3, [r7, #0]
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b2f      	cmp	r3, #47	; 0x2f
 800d84e:	d0f8      	beq.n	800d842 <follow_path+0x16>
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	2b5c      	cmp	r3, #92	; 0x5c
 800d856:	d0f4      	beq.n	800d842 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	2200      	movs	r2, #0
 800d85c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b1f      	cmp	r3, #31
 800d864:	d80a      	bhi.n	800d87c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2280      	movs	r2, #128	; 0x80
 800d86a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d86e:	2100      	movs	r1, #0
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f7fe fe91 	bl	800c598 <dir_sdi>
 800d876:	4603      	mov	r3, r0
 800d878:	75fb      	strb	r3, [r7, #23]
 800d87a:	e043      	b.n	800d904 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d87c:	463b      	mov	r3, r7
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7ff fe1b 	bl	800d4bc <create_name>
 800d886:	4603      	mov	r3, r0
 800d888:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d134      	bne.n	800d8fa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff fadb 	bl	800ce4c <dir_find>
 800d896:	4603      	mov	r3, r0
 800d898:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d8a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d8a2:	7dfb      	ldrb	r3, [r7, #23]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00a      	beq.n	800d8be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d8a8:	7dfb      	ldrb	r3, [r7, #23]
 800d8aa:	2b04      	cmp	r3, #4
 800d8ac:	d127      	bne.n	800d8fe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d8ae:	7afb      	ldrb	r3, [r7, #11]
 800d8b0:	f003 0304 	and.w	r3, r3, #4
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d122      	bne.n	800d8fe <follow_path+0xd2>
 800d8b8:	2305      	movs	r3, #5
 800d8ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d8bc:	e01f      	b.n	800d8fe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d8be:	7afb      	ldrb	r3, [r7, #11]
 800d8c0:	f003 0304 	and.w	r3, r3, #4
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d11c      	bne.n	800d902 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	799b      	ldrb	r3, [r3, #6]
 800d8cc:	f003 0310 	and.w	r3, r3, #16
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d102      	bne.n	800d8da <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d8d4:	2305      	movs	r3, #5
 800d8d6:	75fb      	strb	r3, [r7, #23]
 800d8d8:	e014      	b.n	800d904 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	695b      	ldr	r3, [r3, #20]
 800d8e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8e8:	4413      	add	r3, r2
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f7fe ffda 	bl	800c8a6 <ld_clust>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d8f8:	e7c0      	b.n	800d87c <follow_path+0x50>
			if (res != FR_OK) break;
 800d8fa:	bf00      	nop
 800d8fc:	e002      	b.n	800d904 <follow_path+0xd8>
				break;
 800d8fe:	bf00      	nop
 800d900:	e000      	b.n	800d904 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d902:	bf00      	nop
			}
		}
	}

	return res;
 800d904:	7dfb      	ldrb	r3, [r7, #23]
}
 800d906:	4618      	mov	r0, r3
 800d908:	3718      	adds	r7, #24
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d90e:	b480      	push	{r7}
 800d910:	b087      	sub	sp, #28
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d916:	f04f 33ff 	mov.w	r3, #4294967295
 800d91a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d031      	beq.n	800d988 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	617b      	str	r3, [r7, #20]
 800d92a:	e002      	b.n	800d932 <get_ldnumber+0x24>
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	3301      	adds	r3, #1
 800d930:	617b      	str	r3, [r7, #20]
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	2b1f      	cmp	r3, #31
 800d938:	d903      	bls.n	800d942 <get_ldnumber+0x34>
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	2b3a      	cmp	r3, #58	; 0x3a
 800d940:	d1f4      	bne.n	800d92c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b3a      	cmp	r3, #58	; 0x3a
 800d948:	d11c      	bne.n	800d984 <get_ldnumber+0x76>
			tp = *path;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	1c5a      	adds	r2, r3, #1
 800d954:	60fa      	str	r2, [r7, #12]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	3b30      	subs	r3, #48	; 0x30
 800d95a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	2b09      	cmp	r3, #9
 800d960:	d80e      	bhi.n	800d980 <get_ldnumber+0x72>
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	429a      	cmp	r2, r3
 800d968:	d10a      	bne.n	800d980 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d107      	bne.n	800d980 <get_ldnumber+0x72>
					vol = (int)i;
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	3301      	adds	r3, #1
 800d978:	617b      	str	r3, [r7, #20]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	e002      	b.n	800d98a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d984:	2300      	movs	r3, #0
 800d986:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d988:	693b      	ldr	r3, [r7, #16]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	371c      	adds	r7, #28
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
	...

0800d998 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	70da      	strb	r2, [r3, #3]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ae:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d9b0:	6839      	ldr	r1, [r7, #0]
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f7fe fa70 	bl	800be98 <move_window>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d001      	beq.n	800d9c2 <check_fs+0x2a>
 800d9be:	2304      	movs	r3, #4
 800d9c0:	e038      	b.n	800da34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	3334      	adds	r3, #52	; 0x34
 800d9c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fd ffb4 	bl	800b938 <ld_word>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d001      	beq.n	800d9e0 <check_fs+0x48>
 800d9dc:	2303      	movs	r3, #3
 800d9de:	e029      	b.n	800da34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9e6:	2be9      	cmp	r3, #233	; 0xe9
 800d9e8:	d009      	beq.n	800d9fe <check_fs+0x66>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9f0:	2beb      	cmp	r3, #235	; 0xeb
 800d9f2:	d11e      	bne.n	800da32 <check_fs+0x9a>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d9fa:	2b90      	cmp	r3, #144	; 0x90
 800d9fc:	d119      	bne.n	800da32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	3334      	adds	r3, #52	; 0x34
 800da02:	3336      	adds	r3, #54	; 0x36
 800da04:	4618      	mov	r0, r3
 800da06:	f7fd ffaf 	bl	800b968 <ld_dword>
 800da0a:	4603      	mov	r3, r0
 800da0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da10:	4a0a      	ldr	r2, [pc, #40]	; (800da3c <check_fs+0xa4>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d101      	bne.n	800da1a <check_fs+0x82>
 800da16:	2300      	movs	r3, #0
 800da18:	e00c      	b.n	800da34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	3334      	adds	r3, #52	; 0x34
 800da1e:	3352      	adds	r3, #82	; 0x52
 800da20:	4618      	mov	r0, r3
 800da22:	f7fd ffa1 	bl	800b968 <ld_dword>
 800da26:	4603      	mov	r3, r0
 800da28:	4a05      	ldr	r2, [pc, #20]	; (800da40 <check_fs+0xa8>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d101      	bne.n	800da32 <check_fs+0x9a>
 800da2e:	2300      	movs	r3, #0
 800da30:	e000      	b.n	800da34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800da32:	2302      	movs	r3, #2
}
 800da34:	4618      	mov	r0, r3
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	00544146 	.word	0x00544146
 800da40:	33544146 	.word	0x33544146

0800da44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b096      	sub	sp, #88	; 0x58
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	4613      	mov	r3, r2
 800da50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	2200      	movs	r2, #0
 800da56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f7ff ff58 	bl	800d90e <get_ldnumber>
 800da5e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800da60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da62:	2b00      	cmp	r3, #0
 800da64:	da01      	bge.n	800da6a <find_volume+0x26>
 800da66:	230b      	movs	r3, #11
 800da68:	e231      	b.n	800dece <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800da6a:	4aa8      	ldr	r2, [pc, #672]	; (800dd0c <find_volume+0x2c8>)
 800da6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da72:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800da74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da76:	2b00      	cmp	r3, #0
 800da78:	d101      	bne.n	800da7e <find_volume+0x3a>
 800da7a:	230c      	movs	r3, #12
 800da7c:	e227      	b.n	800dece <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da82:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800da84:	79fb      	ldrb	r3, [r7, #7]
 800da86:	f023 0301 	bic.w	r3, r3, #1
 800da8a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800da8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d01a      	beq.n	800daca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800da94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da96:	785b      	ldrb	r3, [r3, #1]
 800da98:	4618      	mov	r0, r3
 800da9a:	f7fd feaf 	bl	800b7fc <disk_status>
 800da9e:	4603      	mov	r3, r0
 800daa0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800daa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800daa8:	f003 0301 	and.w	r3, r3, #1
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10c      	bne.n	800daca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dab0:	79fb      	ldrb	r3, [r7, #7]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d007      	beq.n	800dac6 <find_volume+0x82>
 800dab6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800daba:	f003 0304 	and.w	r3, r3, #4
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d001      	beq.n	800dac6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dac2:	230a      	movs	r3, #10
 800dac4:	e203      	b.n	800dece <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800dac6:	2300      	movs	r3, #0
 800dac8:	e201      	b.n	800dece <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800daca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dacc:	2200      	movs	r2, #0
 800dace:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad2:	b2da      	uxtb	r2, r3
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dada:	785b      	ldrb	r3, [r3, #1]
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fd fea7 	bl	800b830 <disk_initialize>
 800dae2:	4603      	mov	r3, r0
 800dae4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dae8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800daec:	f003 0301 	and.w	r3, r3, #1
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800daf4:	2303      	movs	r3, #3
 800daf6:	e1ea      	b.n	800dece <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800daf8:	79fb      	ldrb	r3, [r7, #7]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d007      	beq.n	800db0e <find_volume+0xca>
 800dafe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db02:	f003 0304 	and.w	r3, r3, #4
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800db0a:	230a      	movs	r3, #10
 800db0c:	e1df      	b.n	800dece <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800db0e:	2300      	movs	r3, #0
 800db10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800db12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db16:	f7ff ff3f 	bl	800d998 <check_fs>
 800db1a:	4603      	mov	r3, r0
 800db1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800db20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db24:	2b02      	cmp	r3, #2
 800db26:	d14b      	bne.n	800dbc0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db28:	2300      	movs	r3, #0
 800db2a:	643b      	str	r3, [r7, #64]	; 0x40
 800db2c:	e01f      	b.n	800db6e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800db2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db36:	011b      	lsls	r3, r3, #4
 800db38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800db3c:	4413      	add	r3, r2
 800db3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800db40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db42:	3304      	adds	r3, #4
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d006      	beq.n	800db58 <find_volume+0x114>
 800db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4c:	3308      	adds	r3, #8
 800db4e:	4618      	mov	r0, r3
 800db50:	f7fd ff0a 	bl	800b968 <ld_dword>
 800db54:	4602      	mov	r2, r0
 800db56:	e000      	b.n	800db5a <find_volume+0x116>
 800db58:	2200      	movs	r2, #0
 800db5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800db62:	440b      	add	r3, r1
 800db64:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db6a:	3301      	adds	r3, #1
 800db6c:	643b      	str	r3, [r7, #64]	; 0x40
 800db6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db70:	2b03      	cmp	r3, #3
 800db72:	d9dc      	bls.n	800db2e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800db74:	2300      	movs	r3, #0
 800db76:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800db78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <find_volume+0x140>
 800db7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db80:	3b01      	subs	r3, #1
 800db82:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800db84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800db8c:	4413      	add	r3, r2
 800db8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800db92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800db94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db96:	2b00      	cmp	r3, #0
 800db98:	d005      	beq.n	800dba6 <find_volume+0x162>
 800db9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db9e:	f7ff fefb 	bl	800d998 <check_fs>
 800dba2:	4603      	mov	r3, r0
 800dba4:	e000      	b.n	800dba8 <find_volume+0x164>
 800dba6:	2303      	movs	r3, #3
 800dba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dbac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d905      	bls.n	800dbc0 <find_volume+0x17c>
 800dbb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	643b      	str	r3, [r7, #64]	; 0x40
 800dbba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbbc:	2b03      	cmp	r3, #3
 800dbbe:	d9e1      	bls.n	800db84 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dbc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbc4:	2b04      	cmp	r3, #4
 800dbc6:	d101      	bne.n	800dbcc <find_volume+0x188>
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e180      	b.n	800dece <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dbcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d901      	bls.n	800dbd8 <find_volume+0x194>
 800dbd4:	230d      	movs	r3, #13
 800dbd6:	e17a      	b.n	800dece <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbda:	3334      	adds	r3, #52	; 0x34
 800dbdc:	330b      	adds	r3, #11
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fd feaa 	bl	800b938 <ld_word>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbea:	d001      	beq.n	800dbf0 <find_volume+0x1ac>
 800dbec:	230d      	movs	r3, #13
 800dbee:	e16e      	b.n	800dece <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf2:	3334      	adds	r3, #52	; 0x34
 800dbf4:	3316      	adds	r3, #22
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fd fe9e 	bl	800b938 <ld_word>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dc00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d106      	bne.n	800dc14 <find_volume+0x1d0>
 800dc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc08:	3334      	adds	r3, #52	; 0x34
 800dc0a:	3324      	adds	r3, #36	; 0x24
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fd feab 	bl	800b968 <ld_dword>
 800dc12:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc18:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc22:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	789b      	ldrb	r3, [r3, #2]
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d005      	beq.n	800dc38 <find_volume+0x1f4>
 800dc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2e:	789b      	ldrb	r3, [r3, #2]
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	d001      	beq.n	800dc38 <find_volume+0x1f4>
 800dc34:	230d      	movs	r3, #13
 800dc36:	e14a      	b.n	800dece <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3a:	789b      	ldrb	r3, [r3, #2]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc40:	fb02 f303 	mul.w	r3, r2, r3
 800dc44:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc4c:	b29a      	uxth	r2, r3
 800dc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc50:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc54:	895b      	ldrh	r3, [r3, #10]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d008      	beq.n	800dc6c <find_volume+0x228>
 800dc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5c:	895b      	ldrh	r3, [r3, #10]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc62:	895b      	ldrh	r3, [r3, #10]
 800dc64:	3b01      	subs	r3, #1
 800dc66:	4013      	ands	r3, r2
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d001      	beq.n	800dc70 <find_volume+0x22c>
 800dc6c:	230d      	movs	r3, #13
 800dc6e:	e12e      	b.n	800dece <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc72:	3334      	adds	r3, #52	; 0x34
 800dc74:	3311      	adds	r3, #17
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fd fe5e 	bl	800b938 <ld_word>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	461a      	mov	r2, r3
 800dc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc82:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc86:	891b      	ldrh	r3, [r3, #8]
 800dc88:	f003 030f 	and.w	r3, r3, #15
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d001      	beq.n	800dc96 <find_volume+0x252>
 800dc92:	230d      	movs	r3, #13
 800dc94:	e11b      	b.n	800dece <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc98:	3334      	adds	r3, #52	; 0x34
 800dc9a:	3313      	adds	r3, #19
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7fd fe4b 	bl	800b938 <ld_word>
 800dca2:	4603      	mov	r3, r0
 800dca4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d106      	bne.n	800dcba <find_volume+0x276>
 800dcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcae:	3334      	adds	r3, #52	; 0x34
 800dcb0:	3320      	adds	r3, #32
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fd fe58 	bl	800b968 <ld_dword>
 800dcb8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbc:	3334      	adds	r3, #52	; 0x34
 800dcbe:	330e      	adds	r3, #14
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fd fe39 	bl	800b938 <ld_word>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dcca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d101      	bne.n	800dcd4 <find_volume+0x290>
 800dcd0:	230d      	movs	r3, #13
 800dcd2:	e0fc      	b.n	800dece <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dcd4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dcd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcd8:	4413      	add	r3, r2
 800dcda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcdc:	8912      	ldrh	r2, [r2, #8]
 800dcde:	0912      	lsrs	r2, r2, #4
 800dce0:	b292      	uxth	r2, r2
 800dce2:	4413      	add	r3, r2
 800dce4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d201      	bcs.n	800dcf2 <find_volume+0x2ae>
 800dcee:	230d      	movs	r3, #13
 800dcf0:	e0ed      	b.n	800dece <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dcf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf6:	1ad3      	subs	r3, r2, r3
 800dcf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcfa:	8952      	ldrh	r2, [r2, #10]
 800dcfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd00:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d103      	bne.n	800dd10 <find_volume+0x2cc>
 800dd08:	230d      	movs	r3, #13
 800dd0a:	e0e0      	b.n	800dece <find_volume+0x48a>
 800dd0c:	20000794 	.word	0x20000794
		fmt = FS_FAT32;
 800dd10:	2303      	movs	r3, #3
 800dd12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd18:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d802      	bhi.n	800dd26 <find_volume+0x2e2>
 800dd20:	2302      	movs	r3, #2
 800dd22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d802      	bhi.n	800dd36 <find_volume+0x2f2>
 800dd30:	2301      	movs	r3, #1
 800dd32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd38:	1c9a      	adds	r2, r3, #2
 800dd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800dd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd42:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dd44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dd46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd48:	441a      	add	r2, r3
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800dd4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd52:	441a      	add	r2, r3
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800dd58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd5c:	2b03      	cmp	r3, #3
 800dd5e:	d11e      	bne.n	800dd9e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd62:	3334      	adds	r3, #52	; 0x34
 800dd64:	332a      	adds	r3, #42	; 0x2a
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fd fde6 	bl	800b938 <ld_word>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d001      	beq.n	800dd76 <find_volume+0x332>
 800dd72:	230d      	movs	r3, #13
 800dd74:	e0ab      	b.n	800dece <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd78:	891b      	ldrh	r3, [r3, #8]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <find_volume+0x33e>
 800dd7e:	230d      	movs	r3, #13
 800dd80:	e0a5      	b.n	800dece <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd84:	3334      	adds	r3, #52	; 0x34
 800dd86:	332c      	adds	r3, #44	; 0x2c
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fd fded 	bl	800b968 <ld_dword>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd92:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd96:	699b      	ldr	r3, [r3, #24]
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	647b      	str	r3, [r7, #68]	; 0x44
 800dd9c:	e01f      	b.n	800ddde <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda0:	891b      	ldrh	r3, [r3, #8]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d101      	bne.n	800ddaa <find_volume+0x366>
 800dda6:	230d      	movs	r3, #13
 800dda8:	e091      	b.n	800dece <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ddaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddb0:	441a      	add	r2, r3
 800ddb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ddb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ddba:	2b02      	cmp	r3, #2
 800ddbc:	d103      	bne.n	800ddc6 <find_volume+0x382>
 800ddbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc0:	699b      	ldr	r3, [r3, #24]
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	e00a      	b.n	800dddc <find_volume+0x398>
 800ddc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc8:	699a      	ldr	r2, [r3, #24]
 800ddca:	4613      	mov	r3, r2
 800ddcc:	005b      	lsls	r3, r3, #1
 800ddce:	4413      	add	r3, r2
 800ddd0:	085a      	lsrs	r2, r3, #1
 800ddd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd4:	699b      	ldr	r3, [r3, #24]
 800ddd6:	f003 0301 	and.w	r3, r3, #1
 800ddda:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dddc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ddde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde0:	69da      	ldr	r2, [r3, #28]
 800dde2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dde4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dde8:	0a5b      	lsrs	r3, r3, #9
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d201      	bcs.n	800ddf2 <find_volume+0x3ae>
 800ddee:	230d      	movs	r3, #13
 800ddf0:	e06d      	b.n	800dece <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ddf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf8:	615a      	str	r2, [r3, #20]
 800ddfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfc:	695a      	ldr	r2, [r3, #20]
 800ddfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de00:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800de02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de04:	2280      	movs	r2, #128	; 0x80
 800de06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800de08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de0c:	2b03      	cmp	r3, #3
 800de0e:	d149      	bne.n	800dea4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800de10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de12:	3334      	adds	r3, #52	; 0x34
 800de14:	3330      	adds	r3, #48	; 0x30
 800de16:	4618      	mov	r0, r3
 800de18:	f7fd fd8e 	bl	800b938 <ld_word>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d140      	bne.n	800dea4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800de22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de24:	3301      	adds	r3, #1
 800de26:	4619      	mov	r1, r3
 800de28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de2a:	f7fe f835 	bl	800be98 <move_window>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d137      	bne.n	800dea4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de36:	2200      	movs	r2, #0
 800de38:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800de3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3c:	3334      	adds	r3, #52	; 0x34
 800de3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de42:	4618      	mov	r0, r3
 800de44:	f7fd fd78 	bl	800b938 <ld_word>
 800de48:	4603      	mov	r3, r0
 800de4a:	461a      	mov	r2, r3
 800de4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800de50:	429a      	cmp	r2, r3
 800de52:	d127      	bne.n	800dea4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800de54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de56:	3334      	adds	r3, #52	; 0x34
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fd fd85 	bl	800b968 <ld_dword>
 800de5e:	4603      	mov	r3, r0
 800de60:	4a1d      	ldr	r2, [pc, #116]	; (800ded8 <find_volume+0x494>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d11e      	bne.n	800dea4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800de66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de68:	3334      	adds	r3, #52	; 0x34
 800de6a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800de6e:	4618      	mov	r0, r3
 800de70:	f7fd fd7a 	bl	800b968 <ld_dword>
 800de74:	4603      	mov	r3, r0
 800de76:	4a19      	ldr	r2, [pc, #100]	; (800dedc <find_volume+0x498>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d113      	bne.n	800dea4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800de7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7e:	3334      	adds	r3, #52	; 0x34
 800de80:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800de84:	4618      	mov	r0, r3
 800de86:	f7fd fd6f 	bl	800b968 <ld_dword>
 800de8a:	4602      	mov	r2, r0
 800de8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800de90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de92:	3334      	adds	r3, #52	; 0x34
 800de94:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800de98:	4618      	mov	r0, r3
 800de9a:	f7fd fd65 	bl	800b968 <ld_dword>
 800de9e:	4602      	mov	r2, r0
 800dea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800deaa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800deac:	4b0c      	ldr	r3, [pc, #48]	; (800dee0 <find_volume+0x49c>)
 800deae:	881b      	ldrh	r3, [r3, #0]
 800deb0:	3301      	adds	r3, #1
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	4b0a      	ldr	r3, [pc, #40]	; (800dee0 <find_volume+0x49c>)
 800deb6:	801a      	strh	r2, [r3, #0]
 800deb8:	4b09      	ldr	r3, [pc, #36]	; (800dee0 <find_volume+0x49c>)
 800deba:	881a      	ldrh	r2, [r3, #0]
 800debc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800debe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec2:	4a08      	ldr	r2, [pc, #32]	; (800dee4 <find_volume+0x4a0>)
 800dec4:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dec6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dec8:	f7fd ff7e 	bl	800bdc8 <clear_lock>
#endif
	return FR_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3758      	adds	r7, #88	; 0x58
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	41615252 	.word	0x41615252
 800dedc:	61417272 	.word	0x61417272
 800dee0:	20000798 	.word	0x20000798
 800dee4:	200007bc 	.word	0x200007bc

0800dee8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800def2:	2309      	movs	r3, #9
 800def4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d01c      	beq.n	800df36 <validate+0x4e>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d018      	beq.n	800df36 <validate+0x4e>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d013      	beq.n	800df36 <validate+0x4e>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	889a      	ldrh	r2, [r3, #4]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	88db      	ldrh	r3, [r3, #6]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d10c      	bne.n	800df36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	785b      	ldrb	r3, [r3, #1]
 800df22:	4618      	mov	r0, r3
 800df24:	f7fd fc6a 	bl	800b7fc <disk_status>
 800df28:	4603      	mov	r3, r0
 800df2a:	f003 0301 	and.w	r3, r3, #1
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d101      	bne.n	800df36 <validate+0x4e>
			res = FR_OK;
 800df32:	2300      	movs	r3, #0
 800df34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800df36:	7bfb      	ldrb	r3, [r7, #15]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d102      	bne.n	800df42 <validate+0x5a>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	e000      	b.n	800df44 <validate+0x5c>
 800df42:	2300      	movs	r3, #0
 800df44:	683a      	ldr	r2, [r7, #0]
 800df46:	6013      	str	r3, [r2, #0]
	return res;
 800df48:	7bfb      	ldrb	r3, [r7, #15]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3710      	adds	r7, #16
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
	...

0800df54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b088      	sub	sp, #32
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	4613      	mov	r3, r2
 800df60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800df66:	f107 0310 	add.w	r3, r7, #16
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7ff fccf 	bl	800d90e <get_ldnumber>
 800df70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	2b00      	cmp	r3, #0
 800df76:	da01      	bge.n	800df7c <f_mount+0x28>
 800df78:	230b      	movs	r3, #11
 800df7a:	e02b      	b.n	800dfd4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800df7c:	4a17      	ldr	r2, [pc, #92]	; (800dfdc <f_mount+0x88>)
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d005      	beq.n	800df98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800df8c:	69b8      	ldr	r0, [r7, #24]
 800df8e:	f7fd ff1b 	bl	800bdc8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	2200      	movs	r2, #0
 800df96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d002      	beq.n	800dfa4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	490d      	ldr	r1, [pc, #52]	; (800dfdc <f_mount+0x88>)
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <f_mount+0x66>
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d001      	beq.n	800dfbe <f_mount+0x6a>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	e00a      	b.n	800dfd4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dfbe:	f107 010c 	add.w	r1, r7, #12
 800dfc2:	f107 0308 	add.w	r3, r7, #8
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7ff fd3b 	bl	800da44 <find_volume>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dfd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3720      	adds	r7, #32
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	20000794 	.word	0x20000794

0800dfe0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b09a      	sub	sp, #104	; 0x68
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	4613      	mov	r3, r2
 800dfec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d101      	bne.n	800dff8 <f_open+0x18>
 800dff4:	2309      	movs	r3, #9
 800dff6:	e1ad      	b.n	800e354 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dff8:	79fb      	ldrb	r3, [r7, #7]
 800dffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dffe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e000:	79fa      	ldrb	r2, [r7, #7]
 800e002:	f107 0110 	add.w	r1, r7, #16
 800e006:	f107 0308 	add.w	r3, r7, #8
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7ff fd1a 	bl	800da44 <find_volume>
 800e010:	4603      	mov	r3, r0
 800e012:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e016:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f040 8191 	bne.w	800e342 <f_open+0x362>
		dj.obj.fs = fs;
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	f107 0314 	add.w	r3, r7, #20
 800e02a:	4611      	mov	r1, r2
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7ff fbfd 	bl	800d82c <follow_path>
 800e032:	4603      	mov	r3, r0
 800e034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e038:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d11a      	bne.n	800e076 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e040:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e044:	b25b      	sxtb	r3, r3
 800e046:	2b00      	cmp	r3, #0
 800e048:	da03      	bge.n	800e052 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e04a:	2306      	movs	r3, #6
 800e04c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e050:	e011      	b.n	800e076 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e052:	79fb      	ldrb	r3, [r7, #7]
 800e054:	f023 0301 	bic.w	r3, r3, #1
 800e058:	2b00      	cmp	r3, #0
 800e05a:	bf14      	ite	ne
 800e05c:	2301      	movne	r3, #1
 800e05e:	2300      	moveq	r3, #0
 800e060:	b2db      	uxtb	r3, r3
 800e062:	461a      	mov	r2, r3
 800e064:	f107 0314 	add.w	r3, r7, #20
 800e068:	4611      	mov	r1, r2
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fd fd64 	bl	800bb38 <chk_lock>
 800e070:	4603      	mov	r3, r0
 800e072:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e076:	79fb      	ldrb	r3, [r7, #7]
 800e078:	f003 031c 	and.w	r3, r3, #28
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d07f      	beq.n	800e180 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e080:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e084:	2b00      	cmp	r3, #0
 800e086:	d017      	beq.n	800e0b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e088:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e08c:	2b04      	cmp	r3, #4
 800e08e:	d10e      	bne.n	800e0ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e090:	f7fd fdae 	bl	800bbf0 <enq_lock>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d006      	beq.n	800e0a8 <f_open+0xc8>
 800e09a:	f107 0314 	add.w	r3, r7, #20
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fe ff94 	bl	800cfcc <dir_register>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	e000      	b.n	800e0aa <f_open+0xca>
 800e0a8:	2312      	movs	r3, #18
 800e0aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e0ae:	79fb      	ldrb	r3, [r7, #7]
 800e0b0:	f043 0308 	orr.w	r3, r3, #8
 800e0b4:	71fb      	strb	r3, [r7, #7]
 800e0b6:	e010      	b.n	800e0da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e0b8:	7ebb      	ldrb	r3, [r7, #26]
 800e0ba:	f003 0311 	and.w	r3, r3, #17
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d003      	beq.n	800e0ca <f_open+0xea>
					res = FR_DENIED;
 800e0c2:	2307      	movs	r3, #7
 800e0c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e0c8:	e007      	b.n	800e0da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e0ca:	79fb      	ldrb	r3, [r7, #7]
 800e0cc:	f003 0304 	and.w	r3, r3, #4
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d002      	beq.n	800e0da <f_open+0xfa>
 800e0d4:	2308      	movs	r3, #8
 800e0d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e0da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d168      	bne.n	800e1b4 <f_open+0x1d4>
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	f003 0308 	and.w	r3, r3, #8
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d063      	beq.n	800e1b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e0ec:	f7fb ff92 	bl	800a014 <get_fattime>
 800e0f0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f4:	330e      	adds	r3, #14
 800e0f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fd fc73 	bl	800b9e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e100:	3316      	adds	r3, #22
 800e102:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e104:	4618      	mov	r0, r3
 800e106:	f7fd fc6d 	bl	800b9e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10c:	330b      	adds	r3, #11
 800e10e:	2220      	movs	r2, #32
 800e110:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e116:	4611      	mov	r1, r2
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fe fbc4 	bl	800c8a6 <ld_clust>
 800e11e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e124:	2200      	movs	r2, #0
 800e126:	4618      	mov	r0, r3
 800e128:	f7fe fbdc 	bl	800c8e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e12e:	331c      	adds	r3, #28
 800e130:	2100      	movs	r1, #0
 800e132:	4618      	mov	r0, r3
 800e134:	f7fd fc56 	bl	800b9e4 <st_dword>
					fs->wflag = 1;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	2201      	movs	r2, #1
 800e13c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e13e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e140:	2b00      	cmp	r3, #0
 800e142:	d037      	beq.n	800e1b4 <f_open+0x1d4>
						dw = fs->winsect;
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e148:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e14a:	f107 0314 	add.w	r3, r7, #20
 800e14e:	2200      	movs	r2, #0
 800e150:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e152:	4618      	mov	r0, r3
 800e154:	f7fe f8ef 	bl	800c336 <remove_chain>
 800e158:	4603      	mov	r3, r0
 800e15a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e15e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e162:	2b00      	cmp	r3, #0
 800e164:	d126      	bne.n	800e1b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fd fe94 	bl	800be98 <move_window>
 800e170:	4603      	mov	r3, r0
 800e172:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e17a:	3a01      	subs	r2, #1
 800e17c:	611a      	str	r2, [r3, #16]
 800e17e:	e019      	b.n	800e1b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e180:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e184:	2b00      	cmp	r3, #0
 800e186:	d115      	bne.n	800e1b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e188:	7ebb      	ldrb	r3, [r7, #26]
 800e18a:	f003 0310 	and.w	r3, r3, #16
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d003      	beq.n	800e19a <f_open+0x1ba>
					res = FR_NO_FILE;
 800e192:	2304      	movs	r3, #4
 800e194:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e198:	e00c      	b.n	800e1b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e19a:	79fb      	ldrb	r3, [r7, #7]
 800e19c:	f003 0302 	and.w	r3, r3, #2
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d007      	beq.n	800e1b4 <f_open+0x1d4>
 800e1a4:	7ebb      	ldrb	r3, [r7, #26]
 800e1a6:	f003 0301 	and.w	r3, r3, #1
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d002      	beq.n	800e1b4 <f_open+0x1d4>
						res = FR_DENIED;
 800e1ae:	2307      	movs	r3, #7
 800e1b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e1b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d128      	bne.n	800e20e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e1bc:	79fb      	ldrb	r3, [r7, #7]
 800e1be:	f003 0308 	and.w	r3, r3, #8
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d003      	beq.n	800e1ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e1c6:	79fb      	ldrb	r3, [r7, #7]
 800e1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e1d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e1dc:	79fb      	ldrb	r3, [r7, #7]
 800e1de:	f023 0301 	bic.w	r3, r3, #1
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	bf14      	ite	ne
 800e1e6:	2301      	movne	r3, #1
 800e1e8:	2300      	moveq	r3, #0
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	f107 0314 	add.w	r3, r7, #20
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7fd fd1d 	bl	800bc34 <inc_lock>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	691b      	ldr	r3, [r3, #16]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d102      	bne.n	800e20e <f_open+0x22e>
 800e208:	2302      	movs	r3, #2
 800e20a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e20e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e212:	2b00      	cmp	r3, #0
 800e214:	f040 8095 	bne.w	800e342 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e21c:	4611      	mov	r1, r2
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fe fb41 	bl	800c8a6 <ld_clust>
 800e224:	4602      	mov	r2, r0
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e22c:	331c      	adds	r3, #28
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fd fb9a 	bl	800b968 <ld_dword>
 800e234:	4602      	mov	r2, r0
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2200      	movs	r2, #0
 800e23e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e240:	693a      	ldr	r2, [r7, #16]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	88da      	ldrh	r2, [r3, #6]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	79fa      	ldrb	r2, [r7, #7]
 800e252:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2200      	movs	r2, #0
 800e258:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2200      	movs	r2, #0
 800e25e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2200      	movs	r2, #0
 800e264:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	3330      	adds	r3, #48	; 0x30
 800e26a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e26e:	2100      	movs	r1, #0
 800e270:	4618      	mov	r0, r3
 800e272:	f7fd fc04 	bl	800ba7e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e276:	79fb      	ldrb	r3, [r7, #7]
 800e278:	f003 0320 	and.w	r3, r3, #32
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d060      	beq.n	800e342 <f_open+0x362>
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d05c      	beq.n	800e342 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	68da      	ldr	r2, [r3, #12]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	895b      	ldrh	r3, [r3, #10]
 800e294:	025b      	lsls	r3, r3, #9
 800e296:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e2a4:	e016      	b.n	800e2d4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fd feaf 	bl	800c00e <get_fat>
 800e2b0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e2b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d802      	bhi.n	800e2be <f_open+0x2de>
 800e2b8:	2302      	movs	r3, #2
 800e2ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e2be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c4:	d102      	bne.n	800e2cc <f_open+0x2ec>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e2cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e2ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e2d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d103      	bne.n	800e2e4 <f_open+0x304>
 800e2dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e2de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d8e0      	bhi.n	800e2a6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e2e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e2ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d127      	bne.n	800e342 <f_open+0x362>
 800e2f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d022      	beq.n	800e342 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e300:	4618      	mov	r0, r3
 800e302:	f7fd fe65 	bl	800bfd0 <clust2sect>
 800e306:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d103      	bne.n	800e316 <f_open+0x336>
						res = FR_INT_ERR;
 800e30e:	2302      	movs	r3, #2
 800e310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e314:	e015      	b.n	800e342 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e318:	0a5a      	lsrs	r2, r3, #9
 800e31a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e31c:	441a      	add	r2, r3
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	7858      	ldrb	r0, [r3, #1]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6a1a      	ldr	r2, [r3, #32]
 800e330:	2301      	movs	r3, #1
 800e332:	f7fd faa3 	bl	800b87c <disk_read>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d002      	beq.n	800e342 <f_open+0x362>
 800e33c:	2301      	movs	r3, #1
 800e33e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e342:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e346:	2b00      	cmp	r3, #0
 800e348:	d002      	beq.n	800e350 <f_open+0x370>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2200      	movs	r2, #0
 800e34e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e350:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e354:	4618      	mov	r0, r3
 800e356:	3768      	adds	r7, #104	; 0x68
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08e      	sub	sp, #56	; 0x38
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
 800e368:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	2200      	movs	r2, #0
 800e372:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f107 0214 	add.w	r2, r7, #20
 800e37a:	4611      	mov	r1, r2
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7ff fdb3 	bl	800dee8 <validate>
 800e382:	4603      	mov	r3, r0
 800e384:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d107      	bne.n	800e3a0 <f_read+0x44>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	7d5b      	ldrb	r3, [r3, #21]
 800e394:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e398:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d002      	beq.n	800e3a6 <f_read+0x4a>
 800e3a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3a4:	e115      	b.n	800e5d2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	7d1b      	ldrb	r3, [r3, #20]
 800e3aa:	f003 0301 	and.w	r3, r3, #1
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <f_read+0x5a>
 800e3b2:	2307      	movs	r3, #7
 800e3b4:	e10d      	b.n	800e5d2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	68da      	ldr	r2, [r3, #12]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	699b      	ldr	r3, [r3, #24]
 800e3be:	1ad3      	subs	r3, r2, r3
 800e3c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	6a3b      	ldr	r3, [r7, #32]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	f240 80fe 	bls.w	800e5c8 <f_read+0x26c>
 800e3cc:	6a3b      	ldr	r3, [r7, #32]
 800e3ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e3d0:	e0fa      	b.n	800e5c8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f040 80c6 	bne.w	800e56c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	699b      	ldr	r3, [r3, #24]
 800e3e4:	0a5b      	lsrs	r3, r3, #9
 800e3e6:	697a      	ldr	r2, [r7, #20]
 800e3e8:	8952      	ldrh	r2, [r2, #10]
 800e3ea:	3a01      	subs	r2, #1
 800e3ec:	4013      	ands	r3, r2
 800e3ee:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d12f      	bne.n	800e456 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	699b      	ldr	r3, [r3, #24]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d103      	bne.n	800e406 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	633b      	str	r3, [r7, #48]	; 0x30
 800e404:	e013      	b.n	800e42e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d007      	beq.n	800e41e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	699b      	ldr	r3, [r3, #24]
 800e412:	4619      	mov	r1, r3
 800e414:	68f8      	ldr	r0, [r7, #12]
 800e416:	f7fe f88b 	bl	800c530 <clmt_clust>
 800e41a:	6338      	str	r0, [r7, #48]	; 0x30
 800e41c:	e007      	b.n	800e42e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e41e:	68fa      	ldr	r2, [r7, #12]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	69db      	ldr	r3, [r3, #28]
 800e424:	4619      	mov	r1, r3
 800e426:	4610      	mov	r0, r2
 800e428:	f7fd fdf1 	bl	800c00e <get_fat>
 800e42c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e430:	2b01      	cmp	r3, #1
 800e432:	d804      	bhi.n	800e43e <f_read+0xe2>
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2202      	movs	r2, #2
 800e438:	755a      	strb	r2, [r3, #21]
 800e43a:	2302      	movs	r3, #2
 800e43c:	e0c9      	b.n	800e5d2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e444:	d104      	bne.n	800e450 <f_read+0xf4>
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2201      	movs	r2, #1
 800e44a:	755a      	strb	r2, [r3, #21]
 800e44c:	2301      	movs	r3, #1
 800e44e:	e0c0      	b.n	800e5d2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e454:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e456:	697a      	ldr	r2, [r7, #20]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	69db      	ldr	r3, [r3, #28]
 800e45c:	4619      	mov	r1, r3
 800e45e:	4610      	mov	r0, r2
 800e460:	f7fd fdb6 	bl	800bfd0 <clust2sect>
 800e464:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e466:	69bb      	ldr	r3, [r7, #24]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d104      	bne.n	800e476 <f_read+0x11a>
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2202      	movs	r2, #2
 800e470:	755a      	strb	r2, [r3, #21]
 800e472:	2302      	movs	r3, #2
 800e474:	e0ad      	b.n	800e5d2 <f_read+0x276>
			sect += csect;
 800e476:	69ba      	ldr	r2, [r7, #24]
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	4413      	add	r3, r2
 800e47c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	0a5b      	lsrs	r3, r3, #9
 800e482:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e486:	2b00      	cmp	r3, #0
 800e488:	d039      	beq.n	800e4fe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e48a:	69fa      	ldr	r2, [r7, #28]
 800e48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48e:	4413      	add	r3, r2
 800e490:	697a      	ldr	r2, [r7, #20]
 800e492:	8952      	ldrh	r2, [r2, #10]
 800e494:	4293      	cmp	r3, r2
 800e496:	d905      	bls.n	800e4a4 <f_read+0x148>
					cc = fs->csize - csect;
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	895b      	ldrh	r3, [r3, #10]
 800e49c:	461a      	mov	r2, r3
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	1ad3      	subs	r3, r2, r3
 800e4a2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	7858      	ldrb	r0, [r3, #1]
 800e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4aa:	69ba      	ldr	r2, [r7, #24]
 800e4ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4ae:	f7fd f9e5 	bl	800b87c <disk_read>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d004      	beq.n	800e4c2 <f_read+0x166>
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	755a      	strb	r2, [r3, #21]
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e087      	b.n	800e5d2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	7d1b      	ldrb	r3, [r3, #20]
 800e4c6:	b25b      	sxtb	r3, r3
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	da14      	bge.n	800e4f6 <f_read+0x19a>
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6a1a      	ldr	r2, [r3, #32]
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	1ad3      	subs	r3, r2, r3
 800e4d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d90d      	bls.n	800e4f6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6a1a      	ldr	r2, [r3, #32]
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	1ad3      	subs	r3, r2, r3
 800e4e2:	025b      	lsls	r3, r3, #9
 800e4e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4e6:	18d0      	adds	r0, r2, r3
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	3330      	adds	r3, #48	; 0x30
 800e4ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	f7fd faa3 	bl	800ba3c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f8:	025b      	lsls	r3, r3, #9
 800e4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e4fc:	e050      	b.n	800e5a0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6a1b      	ldr	r3, [r3, #32]
 800e502:	69ba      	ldr	r2, [r7, #24]
 800e504:	429a      	cmp	r2, r3
 800e506:	d02e      	beq.n	800e566 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	7d1b      	ldrb	r3, [r3, #20]
 800e50c:	b25b      	sxtb	r3, r3
 800e50e:	2b00      	cmp	r3, #0
 800e510:	da18      	bge.n	800e544 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	7858      	ldrb	r0, [r3, #1]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6a1a      	ldr	r2, [r3, #32]
 800e520:	2301      	movs	r3, #1
 800e522:	f7fd f9cb 	bl	800b8bc <disk_write>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d004      	beq.n	800e536 <f_read+0x1da>
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2201      	movs	r2, #1
 800e530:	755a      	strb	r2, [r3, #21]
 800e532:	2301      	movs	r3, #1
 800e534:	e04d      	b.n	800e5d2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	7d1b      	ldrb	r3, [r3, #20]
 800e53a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e53e:	b2da      	uxtb	r2, r3
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	7858      	ldrb	r0, [r3, #1]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e54e:	2301      	movs	r3, #1
 800e550:	69ba      	ldr	r2, [r7, #24]
 800e552:	f7fd f993 	bl	800b87c <disk_read>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d004      	beq.n	800e566 <f_read+0x20a>
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2201      	movs	r2, #1
 800e560:	755a      	strb	r2, [r3, #21]
 800e562:	2301      	movs	r3, #1
 800e564:	e035      	b.n	800e5d2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	69ba      	ldr	r2, [r7, #24]
 800e56a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	699b      	ldr	r3, [r3, #24]
 800e570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e574:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e578:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e57a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d901      	bls.n	800e586 <f_read+0x22a>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	699b      	ldr	r3, [r3, #24]
 800e590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e594:	4413      	add	r3, r2
 800e596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e598:	4619      	mov	r1, r3
 800e59a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e59c:	f7fd fa4e 	bl	800ba3c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a4:	4413      	add	r3, r2
 800e5a6:	627b      	str	r3, [r7, #36]	; 0x24
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	699a      	ldr	r2, [r3, #24]
 800e5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ae:	441a      	add	r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	619a      	str	r2, [r3, #24]
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ba:	441a      	add	r2, r3
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	601a      	str	r2, [r3, #0]
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c4:	1ad3      	subs	r3, r2, r3
 800e5c6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f47f af01 	bne.w	800e3d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e5d0:	2300      	movs	r3, #0
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3738      	adds	r7, #56	; 0x38
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}

0800e5da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e5da:	b580      	push	{r7, lr}
 800e5dc:	b086      	sub	sp, #24
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f107 0208 	add.w	r2, r7, #8
 800e5e8:	4611      	mov	r1, r2
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7ff fc7c 	bl	800dee8 <validate>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e5f4:	7dfb      	ldrb	r3, [r7, #23]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d168      	bne.n	800e6cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	7d1b      	ldrb	r3, [r3, #20]
 800e5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e602:	2b00      	cmp	r3, #0
 800e604:	d062      	beq.n	800e6cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	7d1b      	ldrb	r3, [r3, #20]
 800e60a:	b25b      	sxtb	r3, r3
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	da15      	bge.n	800e63c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	7858      	ldrb	r0, [r3, #1]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6a1a      	ldr	r2, [r3, #32]
 800e61e:	2301      	movs	r3, #1
 800e620:	f7fd f94c 	bl	800b8bc <disk_write>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <f_sync+0x54>
 800e62a:	2301      	movs	r3, #1
 800e62c:	e04f      	b.n	800e6ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	7d1b      	ldrb	r3, [r3, #20]
 800e632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e636:	b2da      	uxtb	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e63c:	f7fb fcea 	bl	800a014 <get_fattime>
 800e640:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e648:	4619      	mov	r1, r3
 800e64a:	4610      	mov	r0, r2
 800e64c:	f7fd fc24 	bl	800be98 <move_window>
 800e650:	4603      	mov	r3, r0
 800e652:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e654:	7dfb      	ldrb	r3, [r7, #23]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d138      	bne.n	800e6cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e65e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	330b      	adds	r3, #11
 800e664:	781a      	ldrb	r2, [r3, #0]
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	330b      	adds	r3, #11
 800e66a:	f042 0220 	orr.w	r2, r2, #32
 800e66e:	b2d2      	uxtb	r2, r2
 800e670:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6818      	ldr	r0, [r3, #0]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	461a      	mov	r2, r3
 800e67c:	68f9      	ldr	r1, [r7, #12]
 800e67e:	f7fe f931 	bl	800c8e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f103 021c 	add.w	r2, r3, #28
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	4619      	mov	r1, r3
 800e68e:	4610      	mov	r0, r2
 800e690:	f7fd f9a8 	bl	800b9e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	3316      	adds	r3, #22
 800e698:	6939      	ldr	r1, [r7, #16]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fd f9a2 	bl	800b9e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	3312      	adds	r3, #18
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fd f981 	bl	800b9ae <st_word>
					fs->wflag = 1;
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fd fc1d 	bl	800bef4 <sync_fs>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	7d1b      	ldrb	r3, [r3, #20]
 800e6c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6c6:	b2da      	uxtb	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e6cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3718      	adds	r7, #24
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b084      	sub	sp, #16
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7ff ff7b 	bl	800e5da <f_sync>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e6e8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d118      	bne.n	800e720 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f107 0208 	add.w	r2, r7, #8
 800e6f4:	4611      	mov	r1, r2
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7ff fbf6 	bl	800dee8 <validate>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e700:	7bfb      	ldrb	r3, [r7, #15]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d10c      	bne.n	800e720 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	691b      	ldr	r3, [r3, #16]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fd fb20 	bl	800bd50 <dec_lock>
 800e710:	4603      	mov	r3, r0
 800e712:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e714:	7bfb      	ldrb	r3, [r7, #15]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d102      	bne.n	800e720 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e720:	7bfb      	ldrb	r3, [r7, #15]
}
 800e722:	4618      	mov	r0, r3
 800e724:	3710      	adds	r7, #16
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b086      	sub	sp, #24
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
 800e732:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d101      	bne.n	800e73e <f_opendir+0x14>
 800e73a:	2309      	movs	r3, #9
 800e73c:	e064      	b.n	800e808 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e742:	f107 010c 	add.w	r1, r7, #12
 800e746:	463b      	mov	r3, r7
 800e748:	2200      	movs	r2, #0
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7ff f97a 	bl	800da44 <find_volume>
 800e750:	4603      	mov	r3, r0
 800e752:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e754:	7dfb      	ldrb	r3, [r7, #23]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d14f      	bne.n	800e7fa <f_opendir+0xd0>
		obj->fs = fs;
 800e75a:	68fa      	ldr	r2, [r7, #12]
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	4619      	mov	r1, r3
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f7ff f861 	bl	800d82c <follow_path>
 800e76a:	4603      	mov	r3, r0
 800e76c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e76e:	7dfb      	ldrb	r3, [r7, #23]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d13d      	bne.n	800e7f0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e77a:	b25b      	sxtb	r3, r3
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	db12      	blt.n	800e7a6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	799b      	ldrb	r3, [r3, #6]
 800e784:	f003 0310 	and.w	r3, r3, #16
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00a      	beq.n	800e7a2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a1b      	ldr	r3, [r3, #32]
 800e792:	4619      	mov	r1, r3
 800e794:	4610      	mov	r0, r2
 800e796:	f7fe f886 	bl	800c8a6 <ld_clust>
 800e79a:	4602      	mov	r2, r0
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	609a      	str	r2, [r3, #8]
 800e7a0:	e001      	b.n	800e7a6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e7a2:	2305      	movs	r3, #5
 800e7a4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e7a6:	7dfb      	ldrb	r3, [r7, #23]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d121      	bne.n	800e7f0 <f_opendir+0xc6>
				obj->id = fs->id;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	88da      	ldrh	r2, [r3, #6]
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7fd feee 	bl	800c598 <dir_sdi>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e7c0:	7dfb      	ldrb	r3, [r7, #23]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d114      	bne.n	800e7f0 <f_opendir+0xc6>
					if (obj->sclust) {
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	689b      	ldr	r3, [r3, #8]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d00d      	beq.n	800e7ea <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e7ce:	2100      	movs	r1, #0
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7fd fa2f 	bl	800bc34 <inc_lock>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	691b      	ldr	r3, [r3, #16]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d105      	bne.n	800e7f0 <f_opendir+0xc6>
 800e7e4:	2312      	movs	r3, #18
 800e7e6:	75fb      	strb	r3, [r7, #23]
 800e7e8:	e002      	b.n	800e7f0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e7f0:	7dfb      	ldrb	r3, [r7, #23]
 800e7f2:	2b04      	cmp	r3, #4
 800e7f4:	d101      	bne.n	800e7fa <f_opendir+0xd0>
 800e7f6:	2305      	movs	r3, #5
 800e7f8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <f_opendir+0xdc>
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	2200      	movs	r2, #0
 800e804:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e806:	7dfb      	ldrb	r3, [r7, #23]
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3718      	adds	r7, #24
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f107 0208 	add.w	r2, r7, #8
 800e81e:	4611      	mov	r1, r2
 800e820:	4618      	mov	r0, r3
 800e822:	f7ff fb61 	bl	800dee8 <validate>
 800e826:	4603      	mov	r3, r0
 800e828:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e82a:	7bfb      	ldrb	r3, [r7, #15]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d110      	bne.n	800e852 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	691b      	ldr	r3, [r3, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d006      	beq.n	800e846 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	691b      	ldr	r3, [r3, #16]
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fd fa87 	bl	800bd50 <dec_lock>
 800e842:	4603      	mov	r3, r0
 800e844:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e846:	7bfb      	ldrb	r3, [r7, #15]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d102      	bne.n	800e852 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e852:	7bfb      	ldrb	r3, [r7, #15]
}
 800e854:	4618      	mov	r0, r3
 800e856:	3710      	adds	r7, #16
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f107 0208 	add.w	r2, r7, #8
 800e86c:	4611      	mov	r1, r2
 800e86e:	4618      	mov	r0, r3
 800e870:	f7ff fb3a 	bl	800dee8 <validate>
 800e874:	4603      	mov	r3, r0
 800e876:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e878:	7bfb      	ldrb	r3, [r7, #15]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d126      	bne.n	800e8cc <f_readdir+0x70>
		if (!fno) {
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d106      	bne.n	800e892 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e884:	2100      	movs	r1, #0
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f7fd fe86 	bl	800c598 <dir_sdi>
 800e88c:	4603      	mov	r3, r0
 800e88e:	73fb      	strb	r3, [r7, #15]
 800e890:	e01c      	b.n	800e8cc <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e892:	2100      	movs	r1, #0
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7fe fa32 	bl	800ccfe <dir_read>
 800e89a:	4603      	mov	r3, r0
 800e89c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e89e:	7bfb      	ldrb	r3, [r7, #15]
 800e8a0:	2b04      	cmp	r3, #4
 800e8a2:	d101      	bne.n	800e8a8 <f_readdir+0x4c>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e8a8:	7bfb      	ldrb	r3, [r7, #15]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10e      	bne.n	800e8cc <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e8ae:	6839      	ldr	r1, [r7, #0]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7fe fc83 	bl	800d1bc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e8b6:	2100      	movs	r1, #0
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7fd fee8 	bl	800c68e <dir_next>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e8c2:	7bfb      	ldrb	r3, [r7, #15]
 800e8c4:	2b04      	cmp	r3, #4
 800e8c6:	d101      	bne.n	800e8cc <f_readdir+0x70>
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b084      	sub	sp, #16
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
 800e8de:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800e8e0:	6839      	ldr	r1, [r7, #0]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7ff ffba 	bl	800e85c <f_readdir>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d114      	bne.n	800e91c <f_findnext+0x46>
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d011      	beq.n	800e91c <f_findnext+0x46>
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	7d9b      	ldrb	r3, [r3, #22]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00d      	beq.n	800e91c <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	f103 0116 	add.w	r1, r3, #22
 800e90a:	2300      	movs	r3, #0
 800e90c:	2200      	movs	r2, #0
 800e90e:	f7fe fd59 	bl	800d3c4 <pattern_matching>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d100      	bne.n	800e91a <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800e918:	e7e2      	b.n	800e8e0 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800e91a:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800e91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b086      	sub	sp, #24
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	60f8      	str	r0, [r7, #12]
 800e92e:	60b9      	str	r1, [r7, #8]
 800e930:	607a      	str	r2, [r7, #4]
 800e932:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	683a      	ldr	r2, [r7, #0]
 800e938:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800e93a:	6879      	ldr	r1, [r7, #4]
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f7ff fef4 	bl	800e72a <f_opendir>
 800e942:	4603      	mov	r3, r0
 800e944:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e946:	7dfb      	ldrb	r3, [r7, #23]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d105      	bne.n	800e958 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800e94c:	68b9      	ldr	r1, [r7, #8]
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f7ff ffc1 	bl	800e8d6 <f_findnext>
 800e954:	4603      	mov	r3, r0
 800e956:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800e958:	7dfb      	ldrb	r3, [r7, #23]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3718      	adds	r7, #24
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
	...

0800e964 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e964:	b480      	push	{r7}
 800e966:	b087      	sub	sp, #28
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	4613      	mov	r3, r2
 800e970:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e972:	2301      	movs	r3, #1
 800e974:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e976:	2300      	movs	r3, #0
 800e978:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e97a:	4b1f      	ldr	r3, [pc, #124]	; (800e9f8 <FATFS_LinkDriverEx+0x94>)
 800e97c:	7a5b      	ldrb	r3, [r3, #9]
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	2b00      	cmp	r3, #0
 800e982:	d131      	bne.n	800e9e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e984:	4b1c      	ldr	r3, [pc, #112]	; (800e9f8 <FATFS_LinkDriverEx+0x94>)
 800e986:	7a5b      	ldrb	r3, [r3, #9]
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	461a      	mov	r2, r3
 800e98c:	4b1a      	ldr	r3, [pc, #104]	; (800e9f8 <FATFS_LinkDriverEx+0x94>)
 800e98e:	2100      	movs	r1, #0
 800e990:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e992:	4b19      	ldr	r3, [pc, #100]	; (800e9f8 <FATFS_LinkDriverEx+0x94>)
 800e994:	7a5b      	ldrb	r3, [r3, #9]
 800e996:	b2db      	uxtb	r3, r3
 800e998:	4a17      	ldr	r2, [pc, #92]	; (800e9f8 <FATFS_LinkDriverEx+0x94>)
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	4413      	add	r3, r2
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e9a2:	4b15      	ldr	r3, [pc, #84]	; (800e9f8 <FATFS_LinkDriverEx+0x94>)
 800e9a4:	7a5b      	ldrb	r3, [r3, #9]
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	4b13      	ldr	r3, [pc, #76]	; (800e9f8 <FATFS_LinkDriverEx+0x94>)
 800e9ac:	4413      	add	r3, r2
 800e9ae:	79fa      	ldrb	r2, [r7, #7]
 800e9b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e9b2:	4b11      	ldr	r3, [pc, #68]	; (800e9f8 <FATFS_LinkDriverEx+0x94>)
 800e9b4:	7a5b      	ldrb	r3, [r3, #9]
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	1c5a      	adds	r2, r3, #1
 800e9ba:	b2d1      	uxtb	r1, r2
 800e9bc:	4a0e      	ldr	r2, [pc, #56]	; (800e9f8 <FATFS_LinkDriverEx+0x94>)
 800e9be:	7251      	strb	r1, [r2, #9]
 800e9c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e9c2:	7dbb      	ldrb	r3, [r7, #22]
 800e9c4:	3330      	adds	r3, #48	; 0x30
 800e9c6:	b2da      	uxtb	r2, r3
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	223a      	movs	r2, #58	; 0x3a
 800e9d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	3302      	adds	r3, #2
 800e9d8:	222f      	movs	r2, #47	; 0x2f
 800e9da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	3303      	adds	r3, #3
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e9e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	371c      	adds	r7, #28
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr
 800e9f6:	bf00      	nop
 800e9f8:	200009bc 	.word	0x200009bc

0800e9fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ea06:	2200      	movs	r2, #0
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7ff ffaa 	bl	800e964 <FATFS_LinkDriverEx>
 800ea10:	4603      	mov	r3, r0
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3708      	adds	r7, #8
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
	...

0800ea1c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	4603      	mov	r3, r0
 800ea24:	6039      	str	r1, [r7, #0]
 800ea26:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ea28:	88fb      	ldrh	r3, [r7, #6]
 800ea2a:	2b7f      	cmp	r3, #127	; 0x7f
 800ea2c:	d802      	bhi.n	800ea34 <ff_convert+0x18>
		c = chr;
 800ea2e:	88fb      	ldrh	r3, [r7, #6]
 800ea30:	81fb      	strh	r3, [r7, #14]
 800ea32:	e025      	b.n	800ea80 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00b      	beq.n	800ea52 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ea3a:	88fb      	ldrh	r3, [r7, #6]
 800ea3c:	2bff      	cmp	r3, #255	; 0xff
 800ea3e:	d805      	bhi.n	800ea4c <ff_convert+0x30>
 800ea40:	88fb      	ldrh	r3, [r7, #6]
 800ea42:	3b80      	subs	r3, #128	; 0x80
 800ea44:	4a12      	ldr	r2, [pc, #72]	; (800ea90 <ff_convert+0x74>)
 800ea46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea4a:	e000      	b.n	800ea4e <ff_convert+0x32>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	81fb      	strh	r3, [r7, #14]
 800ea50:	e016      	b.n	800ea80 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ea52:	2300      	movs	r3, #0
 800ea54:	81fb      	strh	r3, [r7, #14]
 800ea56:	e009      	b.n	800ea6c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ea58:	89fb      	ldrh	r3, [r7, #14]
 800ea5a:	4a0d      	ldr	r2, [pc, #52]	; (800ea90 <ff_convert+0x74>)
 800ea5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea60:	88fa      	ldrh	r2, [r7, #6]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d006      	beq.n	800ea74 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ea66:	89fb      	ldrh	r3, [r7, #14]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	81fb      	strh	r3, [r7, #14]
 800ea6c:	89fb      	ldrh	r3, [r7, #14]
 800ea6e:	2b7f      	cmp	r3, #127	; 0x7f
 800ea70:	d9f2      	bls.n	800ea58 <ff_convert+0x3c>
 800ea72:	e000      	b.n	800ea76 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ea74:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ea76:	89fb      	ldrh	r3, [r7, #14]
 800ea78:	3380      	adds	r3, #128	; 0x80
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ea80:	89fb      	ldrh	r3, [r7, #14]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3714      	adds	r7, #20
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	08015184 	.word	0x08015184

0800ea94 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ea9e:	88fb      	ldrh	r3, [r7, #6]
 800eaa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eaa4:	d201      	bcs.n	800eaaa <ff_wtoupper+0x16>
 800eaa6:	4b3e      	ldr	r3, [pc, #248]	; (800eba0 <ff_wtoupper+0x10c>)
 800eaa8:	e000      	b.n	800eaac <ff_wtoupper+0x18>
 800eaaa:	4b3e      	ldr	r3, [pc, #248]	; (800eba4 <ff_wtoupper+0x110>)
 800eaac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	1c9a      	adds	r2, r3, #2
 800eab2:	617a      	str	r2, [r7, #20]
 800eab4:	881b      	ldrh	r3, [r3, #0]
 800eab6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800eab8:	8a7b      	ldrh	r3, [r7, #18]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d068      	beq.n	800eb90 <ff_wtoupper+0xfc>
 800eabe:	88fa      	ldrh	r2, [r7, #6]
 800eac0:	8a7b      	ldrh	r3, [r7, #18]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d364      	bcc.n	800eb90 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	1c9a      	adds	r2, r3, #2
 800eaca:	617a      	str	r2, [r7, #20]
 800eacc:	881b      	ldrh	r3, [r3, #0]
 800eace:	823b      	strh	r3, [r7, #16]
 800ead0:	8a3b      	ldrh	r3, [r7, #16]
 800ead2:	0a1b      	lsrs	r3, r3, #8
 800ead4:	81fb      	strh	r3, [r7, #14]
 800ead6:	8a3b      	ldrh	r3, [r7, #16]
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800eadc:	88fa      	ldrh	r2, [r7, #6]
 800eade:	8a79      	ldrh	r1, [r7, #18]
 800eae0:	8a3b      	ldrh	r3, [r7, #16]
 800eae2:	440b      	add	r3, r1
 800eae4:	429a      	cmp	r2, r3
 800eae6:	da49      	bge.n	800eb7c <ff_wtoupper+0xe8>
			switch (cmd) {
 800eae8:	89fb      	ldrh	r3, [r7, #14]
 800eaea:	2b08      	cmp	r3, #8
 800eaec:	d84f      	bhi.n	800eb8e <ff_wtoupper+0xfa>
 800eaee:	a201      	add	r2, pc, #4	; (adr r2, 800eaf4 <ff_wtoupper+0x60>)
 800eaf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf4:	0800eb19 	.word	0x0800eb19
 800eaf8:	0800eb2b 	.word	0x0800eb2b
 800eafc:	0800eb41 	.word	0x0800eb41
 800eb00:	0800eb49 	.word	0x0800eb49
 800eb04:	0800eb51 	.word	0x0800eb51
 800eb08:	0800eb59 	.word	0x0800eb59
 800eb0c:	0800eb61 	.word	0x0800eb61
 800eb10:	0800eb69 	.word	0x0800eb69
 800eb14:	0800eb71 	.word	0x0800eb71
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800eb18:	88fa      	ldrh	r2, [r7, #6]
 800eb1a:	8a7b      	ldrh	r3, [r7, #18]
 800eb1c:	1ad3      	subs	r3, r2, r3
 800eb1e:	005b      	lsls	r3, r3, #1
 800eb20:	697a      	ldr	r2, [r7, #20]
 800eb22:	4413      	add	r3, r2
 800eb24:	881b      	ldrh	r3, [r3, #0]
 800eb26:	80fb      	strh	r3, [r7, #6]
 800eb28:	e027      	b.n	800eb7a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800eb2a:	88fa      	ldrh	r2, [r7, #6]
 800eb2c:	8a7b      	ldrh	r3, [r7, #18]
 800eb2e:	1ad3      	subs	r3, r2, r3
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	f003 0301 	and.w	r3, r3, #1
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	88fa      	ldrh	r2, [r7, #6]
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	80fb      	strh	r3, [r7, #6]
 800eb3e:	e01c      	b.n	800eb7a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800eb40:	88fb      	ldrh	r3, [r7, #6]
 800eb42:	3b10      	subs	r3, #16
 800eb44:	80fb      	strh	r3, [r7, #6]
 800eb46:	e018      	b.n	800eb7a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800eb48:	88fb      	ldrh	r3, [r7, #6]
 800eb4a:	3b20      	subs	r3, #32
 800eb4c:	80fb      	strh	r3, [r7, #6]
 800eb4e:	e014      	b.n	800eb7a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800eb50:	88fb      	ldrh	r3, [r7, #6]
 800eb52:	3b30      	subs	r3, #48	; 0x30
 800eb54:	80fb      	strh	r3, [r7, #6]
 800eb56:	e010      	b.n	800eb7a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800eb58:	88fb      	ldrh	r3, [r7, #6]
 800eb5a:	3b1a      	subs	r3, #26
 800eb5c:	80fb      	strh	r3, [r7, #6]
 800eb5e:	e00c      	b.n	800eb7a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800eb60:	88fb      	ldrh	r3, [r7, #6]
 800eb62:	3308      	adds	r3, #8
 800eb64:	80fb      	strh	r3, [r7, #6]
 800eb66:	e008      	b.n	800eb7a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800eb68:	88fb      	ldrh	r3, [r7, #6]
 800eb6a:	3b50      	subs	r3, #80	; 0x50
 800eb6c:	80fb      	strh	r3, [r7, #6]
 800eb6e:	e004      	b.n	800eb7a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800eb70:	88fb      	ldrh	r3, [r7, #6]
 800eb72:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800eb76:	80fb      	strh	r3, [r7, #6]
 800eb78:	bf00      	nop
			}
			break;
 800eb7a:	e008      	b.n	800eb8e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800eb7c:	89fb      	ldrh	r3, [r7, #14]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d195      	bne.n	800eaae <ff_wtoupper+0x1a>
 800eb82:	8a3b      	ldrh	r3, [r7, #16]
 800eb84:	005b      	lsls	r3, r3, #1
 800eb86:	697a      	ldr	r2, [r7, #20]
 800eb88:	4413      	add	r3, r2
 800eb8a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800eb8c:	e78f      	b.n	800eaae <ff_wtoupper+0x1a>
			break;
 800eb8e:	bf00      	nop
	}

	return chr;
 800eb90:	88fb      	ldrh	r3, [r7, #6]
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	371c      	adds	r7, #28
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop
 800eba0:	08015284 	.word	0x08015284
 800eba4:	08015478 	.word	0x08015478

0800eba8 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800ebac:	2200      	movs	r2, #0
 800ebae:	4912      	ldr	r1, [pc, #72]	; (800ebf8 <MX_USB_DEVICE_Init+0x50>)
 800ebb0:	4812      	ldr	r0, [pc, #72]	; (800ebfc <MX_USB_DEVICE_Init+0x54>)
 800ebb2:	f7fb fcd8 	bl	800a566 <USBD_Init>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d001      	beq.n	800ebc0 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800ebbc:	f7f2 fe58 	bl	8001870 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 800ebc0:	490f      	ldr	r1, [pc, #60]	; (800ec00 <MX_USB_DEVICE_Init+0x58>)
 800ebc2:	480e      	ldr	r0, [pc, #56]	; (800ebfc <MX_USB_DEVICE_Init+0x54>)
 800ebc4:	f7fb fcff 	bl	800a5c6 <USBD_RegisterClass>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d001      	beq.n	800ebd2 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800ebce:	f7f2 fe4f 	bl	8001870 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 800ebd2:	490c      	ldr	r1, [pc, #48]	; (800ec04 <MX_USB_DEVICE_Init+0x5c>)
 800ebd4:	4809      	ldr	r0, [pc, #36]	; (800ebfc <MX_USB_DEVICE_Init+0x54>)
 800ebd6:	f7fb fcaf 	bl	800a538 <USBD_Midi_RegisterInterface>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d001      	beq.n	800ebe4 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800ebe0:	f7f2 fe46 	bl	8001870 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ebe4:	4805      	ldr	r0, [pc, #20]	; (800ebfc <MX_USB_DEVICE_Init+0x54>)
 800ebe6:	f7fb fd15 	bl	800a614 <USBD_Start>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d001      	beq.n	800ebf4 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800ebf0:	f7f2 fe3e 	bl	8001870 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ebf4:	bf00      	nop
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	20000120 	.word	0x20000120
 800ebfc:	20003018 	.word	0x20003018
 800ec00:	20000074 	.word	0x20000074
 800ec04:	20000170 	.word	0x20000170

0800ec08 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	4603      	mov	r3, r0
 800ec10:	71fb      	strb	r3, [r7, #7]
 800ec12:	460b      	mov	r3, r1
 800ec14:	71bb      	strb	r3, [r7, #6]
 800ec16:	4613      	mov	r3, r2
 800ec18:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 800ec1a:	230b      	movs	r3, #11
 800ec1c:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 800ec1e:	79fb      	ldrb	r3, [r7, #7]
 800ec20:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800ec24:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 800ec26:	7bfb      	ldrb	r3, [r7, #15]
 800ec28:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 800ec2a:	7bbb      	ldrb	r3, [r7, #14]
 800ec2c:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 800ec2e:	79bb      	ldrb	r3, [r7, #6]
 800ec30:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 800ec32:	797b      	ldrb	r3, [r7, #5]
 800ec34:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 800ec36:	f107 0208 	add.w	r2, r7, #8
 800ec3a:	2304      	movs	r3, #4
 800ec3c:	2181      	movs	r1, #129	; 0x81
 800ec3e:	4810      	ldr	r0, [pc, #64]	; (800ec80 <MX_USB_Send_Midi+0x78>)
 800ec40:	f000 fbb5 	bl	800f3ae <USBD_LL_Transmit>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b03      	cmp	r3, #3
 800ec48:	d00a      	beq.n	800ec60 <MX_USB_Send_Midi+0x58>
 800ec4a:	2b03      	cmp	r3, #3
 800ec4c:	dc10      	bgt.n	800ec70 <MX_USB_Send_Midi+0x68>
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d002      	beq.n	800ec58 <MX_USB_Send_Midi+0x50>
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d008      	beq.n	800ec68 <MX_USB_Send_Midi+0x60>
 800ec56:	e00b      	b.n	800ec70 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 800ec58:	480a      	ldr	r0, [pc, #40]	; (800ec84 <MX_USB_Send_Midi+0x7c>)
 800ec5a:	f001 fe49 	bl	80108f0 <puts>
        break;
 800ec5e:	e00b      	b.n	800ec78 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 800ec60:	4809      	ldr	r0, [pc, #36]	; (800ec88 <MX_USB_Send_Midi+0x80>)
 800ec62:	f001 fe45 	bl	80108f0 <puts>
        break;
 800ec66:	e007      	b.n	800ec78 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 800ec68:	4808      	ldr	r0, [pc, #32]	; (800ec8c <MX_USB_Send_Midi+0x84>)
 800ec6a:	f001 fe41 	bl	80108f0 <puts>
        break;
 800ec6e:	e003      	b.n	800ec78 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 800ec70:	4807      	ldr	r0, [pc, #28]	; (800ec90 <MX_USB_Send_Midi+0x88>)
 800ec72:	f001 fe3d 	bl	80108f0 <puts>
    }
}
 800ec76:	bf00      	nop
 800ec78:	bf00      	nop
 800ec7a:	3710      	adds	r7, #16
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	20003018 	.word	0x20003018
 800ec84:	08013d50 	.word	0x08013d50
 800ec88:	08013d54 	.word	0x08013d54
 800ec8c:	08013d64 	.word	0x08013d64
 800ec90:	08013d74 	.word	0x08013d74

0800ec94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	6039      	str	r1, [r7, #0]
 800ec9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	2212      	movs	r2, #18
 800eca4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eca6:	4b03      	ldr	r3, [pc, #12]	; (800ecb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr
 800ecb4:	2000013c 	.word	0x2000013c

0800ecb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	6039      	str	r1, [r7, #0]
 800ecc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	2204      	movs	r2, #4
 800ecc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ecca:	4b03      	ldr	r3, [pc, #12]	; (800ecd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr
 800ecd8:	20000150 	.word	0x20000150

0800ecdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	4603      	mov	r3, r0
 800ece4:	6039      	str	r1, [r7, #0]
 800ece6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ece8:	79fb      	ldrb	r3, [r7, #7]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d105      	bne.n	800ecfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ecee:	683a      	ldr	r2, [r7, #0]
 800ecf0:	4907      	ldr	r1, [pc, #28]	; (800ed10 <USBD_FS_ProductStrDescriptor+0x34>)
 800ecf2:	4808      	ldr	r0, [pc, #32]	; (800ed14 <USBD_FS_ProductStrDescriptor+0x38>)
 800ecf4:	f7fc fcbf 	bl	800b676 <USBD_GetString>
 800ecf8:	e004      	b.n	800ed04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ecfa:	683a      	ldr	r2, [r7, #0]
 800ecfc:	4904      	ldr	r1, [pc, #16]	; (800ed10 <USBD_FS_ProductStrDescriptor+0x34>)
 800ecfe:	4805      	ldr	r0, [pc, #20]	; (800ed14 <USBD_FS_ProductStrDescriptor+0x38>)
 800ed00:	f7fc fcb9 	bl	800b676 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed04:	4b02      	ldr	r3, [pc, #8]	; (800ed10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3708      	adds	r7, #8
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	200032e8 	.word	0x200032e8
 800ed14:	08013d90 	.word	0x08013d90

0800ed18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	4603      	mov	r3, r0
 800ed20:	6039      	str	r1, [r7, #0]
 800ed22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ed24:	683a      	ldr	r2, [r7, #0]
 800ed26:	4904      	ldr	r1, [pc, #16]	; (800ed38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ed28:	4804      	ldr	r0, [pc, #16]	; (800ed3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ed2a:	f7fc fca4 	bl	800b676 <USBD_GetString>
  return USBD_StrDesc;
 800ed2e:	4b02      	ldr	r3, [pc, #8]	; (800ed38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3708      	adds	r7, #8
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	200032e8 	.word	0x200032e8
 800ed3c:	08013da4 	.word	0x08013da4

0800ed40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	4603      	mov	r3, r0
 800ed48:	6039      	str	r1, [r7, #0]
 800ed4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	221a      	movs	r2, #26
 800ed50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ed52:	f000 f843 	bl	800eddc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ed56:	4b02      	ldr	r3, [pc, #8]	; (800ed60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	20000154 	.word	0x20000154

0800ed64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	6039      	str	r1, [r7, #0]
 800ed6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ed70:	79fb      	ldrb	r3, [r7, #7]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d105      	bne.n	800ed82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ed76:	683a      	ldr	r2, [r7, #0]
 800ed78:	4907      	ldr	r1, [pc, #28]	; (800ed98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ed7a:	4808      	ldr	r0, [pc, #32]	; (800ed9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ed7c:	f7fc fc7b 	bl	800b676 <USBD_GetString>
 800ed80:	e004      	b.n	800ed8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	4904      	ldr	r1, [pc, #16]	; (800ed98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ed86:	4805      	ldr	r0, [pc, #20]	; (800ed9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ed88:	f7fc fc75 	bl	800b676 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed8c:	4b02      	ldr	r3, [pc, #8]	; (800ed98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3708      	adds	r7, #8
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	200032e8 	.word	0x200032e8
 800ed9c:	08013db8 	.word	0x08013db8

0800eda0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	4603      	mov	r3, r0
 800eda8:	6039      	str	r1, [r7, #0]
 800edaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800edac:	79fb      	ldrb	r3, [r7, #7]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d105      	bne.n	800edbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800edb2:	683a      	ldr	r2, [r7, #0]
 800edb4:	4907      	ldr	r1, [pc, #28]	; (800edd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800edb6:	4808      	ldr	r0, [pc, #32]	; (800edd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800edb8:	f7fc fc5d 	bl	800b676 <USBD_GetString>
 800edbc:	e004      	b.n	800edc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800edbe:	683a      	ldr	r2, [r7, #0]
 800edc0:	4904      	ldr	r1, [pc, #16]	; (800edd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800edc2:	4805      	ldr	r0, [pc, #20]	; (800edd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800edc4:	f7fc fc57 	bl	800b676 <USBD_GetString>
  }
  return USBD_StrDesc;
 800edc8:	4b02      	ldr	r3, [pc, #8]	; (800edd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3708      	adds	r7, #8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	200032e8 	.word	0x200032e8
 800edd8:	08013dc8 	.word	0x08013dc8

0800eddc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ede2:	4b0f      	ldr	r3, [pc, #60]	; (800ee20 <Get_SerialNum+0x44>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ede8:	4b0e      	ldr	r3, [pc, #56]	; (800ee24 <Get_SerialNum+0x48>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800edee:	4b0e      	ldr	r3, [pc, #56]	; (800ee28 <Get_SerialNum+0x4c>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4413      	add	r3, r2
 800edfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d009      	beq.n	800ee16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ee02:	2208      	movs	r2, #8
 800ee04:	4909      	ldr	r1, [pc, #36]	; (800ee2c <Get_SerialNum+0x50>)
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f000 f814 	bl	800ee34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ee0c:	2204      	movs	r2, #4
 800ee0e:	4908      	ldr	r1, [pc, #32]	; (800ee30 <Get_SerialNum+0x54>)
 800ee10:	68b8      	ldr	r0, [r7, #8]
 800ee12:	f000 f80f 	bl	800ee34 <IntToUnicode>
  }
}
 800ee16:	bf00      	nop
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	1fff7a10 	.word	0x1fff7a10
 800ee24:	1fff7a14 	.word	0x1fff7a14
 800ee28:	1fff7a18 	.word	0x1fff7a18
 800ee2c:	20000156 	.word	0x20000156
 800ee30:	20000166 	.word	0x20000166

0800ee34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b087      	sub	sp, #28
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ee42:	2300      	movs	r3, #0
 800ee44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ee46:	2300      	movs	r3, #0
 800ee48:	75fb      	strb	r3, [r7, #23]
 800ee4a:	e027      	b.n	800ee9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	0f1b      	lsrs	r3, r3, #28
 800ee50:	2b09      	cmp	r3, #9
 800ee52:	d80b      	bhi.n	800ee6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	0f1b      	lsrs	r3, r3, #28
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	7dfb      	ldrb	r3, [r7, #23]
 800ee5c:	005b      	lsls	r3, r3, #1
 800ee5e:	4619      	mov	r1, r3
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	440b      	add	r3, r1
 800ee64:	3230      	adds	r2, #48	; 0x30
 800ee66:	b2d2      	uxtb	r2, r2
 800ee68:	701a      	strb	r2, [r3, #0]
 800ee6a:	e00a      	b.n	800ee82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	0f1b      	lsrs	r3, r3, #28
 800ee70:	b2da      	uxtb	r2, r3
 800ee72:	7dfb      	ldrb	r3, [r7, #23]
 800ee74:	005b      	lsls	r3, r3, #1
 800ee76:	4619      	mov	r1, r3
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	440b      	add	r3, r1
 800ee7c:	3237      	adds	r2, #55	; 0x37
 800ee7e:	b2d2      	uxtb	r2, r2
 800ee80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	011b      	lsls	r3, r3, #4
 800ee86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ee88:	7dfb      	ldrb	r3, [r7, #23]
 800ee8a:	005b      	lsls	r3, r3, #1
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	68ba      	ldr	r2, [r7, #8]
 800ee90:	4413      	add	r3, r2
 800ee92:	2200      	movs	r2, #0
 800ee94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ee96:	7dfb      	ldrb	r3, [r7, #23]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	75fb      	strb	r3, [r7, #23]
 800ee9c:	7dfa      	ldrb	r2, [r7, #23]
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d3d3      	bcc.n	800ee4c <IntToUnicode+0x18>
  }
}
 800eea4:	bf00      	nop
 800eea6:	bf00      	nop
 800eea8:	371c      	adds	r7, #28
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr

0800eeb2 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 800eeb2:	b480      	push	{r7}
 800eeb4:	b083      	sub	sp, #12
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
 800eeba:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 800eebc:	2300      	movs	r3, #0
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	370c      	adds	r7, #12
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
	...

0800eecc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b08a      	sub	sp, #40	; 0x28
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eed4:	f107 0314 	add.w	r3, r7, #20
 800eed8:	2200      	movs	r2, #0
 800eeda:	601a      	str	r2, [r3, #0]
 800eedc:	605a      	str	r2, [r3, #4]
 800eede:	609a      	str	r2, [r3, #8]
 800eee0:	60da      	str	r2, [r3, #12]
 800eee2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eeec:	d13a      	bne.n	800ef64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eeee:	2300      	movs	r3, #0
 800eef0:	613b      	str	r3, [r7, #16]
 800eef2:	4b1e      	ldr	r3, [pc, #120]	; (800ef6c <HAL_PCD_MspInit+0xa0>)
 800eef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eef6:	4a1d      	ldr	r2, [pc, #116]	; (800ef6c <HAL_PCD_MspInit+0xa0>)
 800eef8:	f043 0301 	orr.w	r3, r3, #1
 800eefc:	6313      	str	r3, [r2, #48]	; 0x30
 800eefe:	4b1b      	ldr	r3, [pc, #108]	; (800ef6c <HAL_PCD_MspInit+0xa0>)
 800ef00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	613b      	str	r3, [r7, #16]
 800ef08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800ef0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ef0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef10:	2302      	movs	r3, #2
 800ef12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef14:	2300      	movs	r3, #0
 800ef16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ef1c:	230a      	movs	r3, #10
 800ef1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef20:	f107 0314 	add.w	r3, r7, #20
 800ef24:	4619      	mov	r1, r3
 800ef26:	4812      	ldr	r0, [pc, #72]	; (800ef70 <HAL_PCD_MspInit+0xa4>)
 800ef28:	f7f4 ff08 	bl	8003d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ef2c:	4b0f      	ldr	r3, [pc, #60]	; (800ef6c <HAL_PCD_MspInit+0xa0>)
 800ef2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef30:	4a0e      	ldr	r2, [pc, #56]	; (800ef6c <HAL_PCD_MspInit+0xa0>)
 800ef32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef36:	6353      	str	r3, [r2, #52]	; 0x34
 800ef38:	2300      	movs	r3, #0
 800ef3a:	60fb      	str	r3, [r7, #12]
 800ef3c:	4b0b      	ldr	r3, [pc, #44]	; (800ef6c <HAL_PCD_MspInit+0xa0>)
 800ef3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef40:	4a0a      	ldr	r2, [pc, #40]	; (800ef6c <HAL_PCD_MspInit+0xa0>)
 800ef42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ef46:	6453      	str	r3, [r2, #68]	; 0x44
 800ef48:	4b08      	ldr	r3, [pc, #32]	; (800ef6c <HAL_PCD_MspInit+0xa0>)
 800ef4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef50:	60fb      	str	r3, [r7, #12]
 800ef52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ef54:	2200      	movs	r2, #0
 800ef56:	2100      	movs	r1, #0
 800ef58:	2043      	movs	r0, #67	; 0x43
 800ef5a:	f7f4 feb8 	bl	8003cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ef5e:	2043      	movs	r0, #67	; 0x43
 800ef60:	f7f4 fed1 	bl	8003d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ef64:	bf00      	nop
 800ef66:	3728      	adds	r7, #40	; 0x28
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	40023800 	.word	0x40023800
 800ef70:	40020000 	.word	0x40020000

0800ef74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ef88:	4619      	mov	r1, r3
 800ef8a:	4610      	mov	r0, r2
 800ef8c:	f7fb fb8d 	bl	800a6aa <USBD_LL_SetupStage>
}
 800ef90:	bf00      	nop
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	460b      	mov	r3, r1
 800efa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800efaa:	78fa      	ldrb	r2, [r7, #3]
 800efac:	6879      	ldr	r1, [r7, #4]
 800efae:	4613      	mov	r3, r2
 800efb0:	00db      	lsls	r3, r3, #3
 800efb2:	1a9b      	subs	r3, r3, r2
 800efb4:	009b      	lsls	r3, r3, #2
 800efb6:	440b      	add	r3, r1
 800efb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	78fb      	ldrb	r3, [r7, #3]
 800efc0:	4619      	mov	r1, r3
 800efc2:	f7fb fbc7 	bl	800a754 <USBD_LL_DataOutStage>
}
 800efc6:	bf00      	nop
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b082      	sub	sp, #8
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
 800efd6:	460b      	mov	r3, r1
 800efd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800efe0:	78fa      	ldrb	r2, [r7, #3]
 800efe2:	6879      	ldr	r1, [r7, #4]
 800efe4:	4613      	mov	r3, r2
 800efe6:	00db      	lsls	r3, r3, #3
 800efe8:	1a9b      	subs	r3, r3, r2
 800efea:	009b      	lsls	r3, r3, #2
 800efec:	440b      	add	r3, r1
 800efee:	3348      	adds	r3, #72	; 0x48
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	78fb      	ldrb	r3, [r7, #3]
 800eff4:	4619      	mov	r1, r3
 800eff6:	f7fb fc10 	bl	800a81a <USBD_LL_DataInStage>
}
 800effa:	bf00      	nop
 800effc:	3708      	adds	r7, #8
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b082      	sub	sp, #8
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f010:	4618      	mov	r0, r3
 800f012:	f7fb fd24 	bl	800aa5e <USBD_LL_SOF>
}
 800f016:	bf00      	nop
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b084      	sub	sp, #16
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f026:	2301      	movs	r3, #1
 800f028:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	2b02      	cmp	r3, #2
 800f030:	d001      	beq.n	800f036 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f032:	f7f2 fc1d 	bl	8001870 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f03c:	7bfa      	ldrb	r2, [r7, #15]
 800f03e:	4611      	mov	r1, r2
 800f040:	4618      	mov	r0, r3
 800f042:	f7fb fcce 	bl	800a9e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fb fc7a 	bl	800a946 <USBD_LL_Reset>
}
 800f052:	bf00      	nop
 800f054:	3710      	adds	r7, #16
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
	...

0800f05c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7fb fcc9 	bl	800aa02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	6812      	ldr	r2, [r2, #0]
 800f07e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f082:	f043 0301 	orr.w	r3, r3, #1
 800f086:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6a1b      	ldr	r3, [r3, #32]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d005      	beq.n	800f09c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f090:	4b04      	ldr	r3, [pc, #16]	; (800f0a4 <HAL_PCD_SuspendCallback+0x48>)
 800f092:	691b      	ldr	r3, [r3, #16]
 800f094:	4a03      	ldr	r2, [pc, #12]	; (800f0a4 <HAL_PCD_SuspendCallback+0x48>)
 800f096:	f043 0306 	orr.w	r3, r3, #6
 800f09a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f09c:	bf00      	nop
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	e000ed00 	.word	0xe000ed00

0800f0a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fb fcb9 	bl	800aa2e <USBD_LL_Resume>
}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f0d6:	78fa      	ldrb	r2, [r7, #3]
 800f0d8:	4611      	mov	r1, r2
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fb fd07 	bl	800aaee <USBD_LL_IsoOUTIncomplete>
}
 800f0e0:	bf00      	nop
 800f0e2:	3708      	adds	r7, #8
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f0fa:	78fa      	ldrb	r2, [r7, #3]
 800f0fc:	4611      	mov	r1, r2
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7fb fccf 	bl	800aaa2 <USBD_LL_IsoINIncomplete>
}
 800f104:	bf00      	nop
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7fb fd0d 	bl	800ab3a <USBD_LL_DevConnected>
}
 800f120:	bf00      	nop
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f136:	4618      	mov	r0, r3
 800f138:	f7fb fd0a 	bl	800ab50 <USBD_LL_DevDisconnected>
}
 800f13c:	bf00      	nop
 800f13e:	3708      	adds	r7, #8
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d13c      	bne.n	800f1ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f154:	4a20      	ldr	r2, [pc, #128]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4a1e      	ldr	r2, [pc, #120]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f160:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f164:	4b1c      	ldr	r3, [pc, #112]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f166:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f16a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f16c:	4b1a      	ldr	r3, [pc, #104]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f16e:	2204      	movs	r2, #4
 800f170:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f172:	4b19      	ldr	r3, [pc, #100]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f174:	2202      	movs	r2, #2
 800f176:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f178:	4b17      	ldr	r3, [pc, #92]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f17a:	2200      	movs	r2, #0
 800f17c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f17e:	4b16      	ldr	r3, [pc, #88]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f180:	2202      	movs	r2, #2
 800f182:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f184:	4b14      	ldr	r3, [pc, #80]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f186:	2200      	movs	r2, #0
 800f188:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f18a:	4b13      	ldr	r3, [pc, #76]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f18c:	2200      	movs	r2, #0
 800f18e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f190:	4b11      	ldr	r3, [pc, #68]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f192:	2200      	movs	r2, #0
 800f194:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f196:	4b10      	ldr	r3, [pc, #64]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f198:	2200      	movs	r2, #0
 800f19a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f19c:	4b0e      	ldr	r3, [pc, #56]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f19e:	2200      	movs	r2, #0
 800f1a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f1a2:	480d      	ldr	r0, [pc, #52]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f1a4:	f7f5 fd75 	bl	8004c92 <HAL_PCD_Init>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d001      	beq.n	800f1b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f1ae:	f7f2 fb5f 	bl	8001870 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f1b2:	2180      	movs	r1, #128	; 0x80
 800f1b4:	4808      	ldr	r0, [pc, #32]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f1b6:	f7f6 fed2 	bl	8005f5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f1ba:	2240      	movs	r2, #64	; 0x40
 800f1bc:	2100      	movs	r1, #0
 800f1be:	4806      	ldr	r0, [pc, #24]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f1c0:	f7f6 fe86 	bl	8005ed0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f1c4:	2280      	movs	r2, #128	; 0x80
 800f1c6:	2101      	movs	r1, #1
 800f1c8:	4803      	ldr	r0, [pc, #12]	; (800f1d8 <USBD_LL_Init+0x94>)
 800f1ca:	f7f6 fe81 	bl	8005ed0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	200034e8 	.word	0x200034e8

0800f1dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7f5 fe6a 	bl	8004ecc <HAL_PCD_Start>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1fc:	7bfb      	ldrb	r3, [r7, #15]
 800f1fe:	4618      	mov	r0, r3
 800f200:	f000 f938 	bl	800f474 <USBD_Get_USB_Status>
 800f204:	4603      	mov	r3, r0
 800f206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f208:	7bbb      	ldrb	r3, [r7, #14]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b084      	sub	sp, #16
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
 800f21a:	4608      	mov	r0, r1
 800f21c:	4611      	mov	r1, r2
 800f21e:	461a      	mov	r2, r3
 800f220:	4603      	mov	r3, r0
 800f222:	70fb      	strb	r3, [r7, #3]
 800f224:	460b      	mov	r3, r1
 800f226:	70bb      	strb	r3, [r7, #2]
 800f228:	4613      	mov	r3, r2
 800f22a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f22c:	2300      	movs	r3, #0
 800f22e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f230:	2300      	movs	r3, #0
 800f232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f23a:	78bb      	ldrb	r3, [r7, #2]
 800f23c:	883a      	ldrh	r2, [r7, #0]
 800f23e:	78f9      	ldrb	r1, [r7, #3]
 800f240:	f7f6 fa4e 	bl	80056e0 <HAL_PCD_EP_Open>
 800f244:	4603      	mov	r3, r0
 800f246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f248:	7bfb      	ldrb	r3, [r7, #15]
 800f24a:	4618      	mov	r0, r3
 800f24c:	f000 f912 	bl	800f474 <USBD_Get_USB_Status>
 800f250:	4603      	mov	r3, r0
 800f252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f254:	7bbb      	ldrb	r3, [r7, #14]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b084      	sub	sp, #16
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]
 800f266:	460b      	mov	r3, r1
 800f268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f26a:	2300      	movs	r3, #0
 800f26c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f26e:	2300      	movs	r3, #0
 800f270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f278:	78fa      	ldrb	r2, [r7, #3]
 800f27a:	4611      	mov	r1, r2
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7f6 fa97 	bl	80057b0 <HAL_PCD_EP_Close>
 800f282:	4603      	mov	r3, r0
 800f284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f286:	7bfb      	ldrb	r3, [r7, #15]
 800f288:	4618      	mov	r0, r3
 800f28a:	f000 f8f3 	bl	800f474 <USBD_Get_USB_Status>
 800f28e:	4603      	mov	r3, r0
 800f290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f292:	7bbb      	ldrb	r3, [r7, #14]
}
 800f294:	4618      	mov	r0, r3
 800f296:	3710      	adds	r7, #16
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f2b6:	78fa      	ldrb	r2, [r7, #3]
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7f6 fb6f 	bl	800599e <HAL_PCD_EP_SetStall>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2c4:	7bfb      	ldrb	r3, [r7, #15]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f000 f8d4 	bl	800f474 <USBD_Get_USB_Status>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b084      	sub	sp, #16
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f2f4:	78fa      	ldrb	r2, [r7, #3]
 800f2f6:	4611      	mov	r1, r2
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7f6 fbb4 	bl	8005a66 <HAL_PCD_EP_ClrStall>
 800f2fe:	4603      	mov	r3, r0
 800f300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f302:	7bfb      	ldrb	r3, [r7, #15]
 800f304:	4618      	mov	r0, r3
 800f306:	f000 f8b5 	bl	800f474 <USBD_Get_USB_Status>
 800f30a:	4603      	mov	r3, r0
 800f30c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f30e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f310:	4618      	mov	r0, r3
 800f312:	3710      	adds	r7, #16
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	460b      	mov	r3, r1
 800f322:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f32a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f32c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f330:	2b00      	cmp	r3, #0
 800f332:	da0b      	bge.n	800f34c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f334:	78fb      	ldrb	r3, [r7, #3]
 800f336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f33a:	68f9      	ldr	r1, [r7, #12]
 800f33c:	4613      	mov	r3, r2
 800f33e:	00db      	lsls	r3, r3, #3
 800f340:	1a9b      	subs	r3, r3, r2
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	440b      	add	r3, r1
 800f346:	333e      	adds	r3, #62	; 0x3e
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	e00b      	b.n	800f364 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f34c:	78fb      	ldrb	r3, [r7, #3]
 800f34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f352:	68f9      	ldr	r1, [r7, #12]
 800f354:	4613      	mov	r3, r2
 800f356:	00db      	lsls	r3, r3, #3
 800f358:	1a9b      	subs	r3, r3, r2
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	440b      	add	r3, r1
 800f35e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f362:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f364:	4618      	mov	r0, r3
 800f366:	3714      	adds	r7, #20
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr

0800f370 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	460b      	mov	r3, r1
 800f37a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f37c:	2300      	movs	r3, #0
 800f37e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f380:	2300      	movs	r3, #0
 800f382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f38a:	78fa      	ldrb	r2, [r7, #3]
 800f38c:	4611      	mov	r1, r2
 800f38e:	4618      	mov	r0, r3
 800f390:	f7f6 f981 	bl	8005696 <HAL_PCD_SetAddress>
 800f394:	4603      	mov	r3, r0
 800f396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f398:	7bfb      	ldrb	r3, [r7, #15]
 800f39a:	4618      	mov	r0, r3
 800f39c:	f000 f86a 	bl	800f474 <USBD_Get_USB_Status>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3710      	adds	r7, #16
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}

0800f3ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b086      	sub	sp, #24
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	60f8      	str	r0, [r7, #12]
 800f3b6:	607a      	str	r2, [r7, #4]
 800f3b8:	603b      	str	r3, [r7, #0]
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f3cc:	7af9      	ldrb	r1, [r7, #11]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	f7f6 fa9a 	bl	800590a <HAL_PCD_EP_Transmit>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3da:	7dfb      	ldrb	r3, [r7, #23]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f000 f849 	bl	800f474 <USBD_Get_USB_Status>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f3e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3718      	adds	r7, #24
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b086      	sub	sp, #24
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	607a      	str	r2, [r7, #4]
 800f3fa:	603b      	str	r3, [r7, #0]
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f400:	2300      	movs	r3, #0
 800f402:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f404:	2300      	movs	r3, #0
 800f406:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f40e:	7af9      	ldrb	r1, [r7, #11]
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	f7f6 fa16 	bl	8005844 <HAL_PCD_EP_Receive>
 800f418:	4603      	mov	r3, r0
 800f41a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f41c:	7dfb      	ldrb	r3, [r7, #23]
 800f41e:	4618      	mov	r0, r3
 800f420:	f000 f828 	bl	800f474 <USBD_Get_USB_Status>
 800f424:	4603      	mov	r3, r0
 800f426:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f428:	7dbb      	ldrb	r3, [r7, #22]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3718      	adds	r7, #24
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f432:	b580      	push	{r7, lr}
 800f434:	b082      	sub	sp, #8
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
 800f43a:	460b      	mov	r3, r1
 800f43c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f444:	78fa      	ldrb	r2, [r7, #3]
 800f446:	4611      	mov	r1, r2
 800f448:	4618      	mov	r0, r3
 800f44a:	f7f6 fa46 	bl	80058da <HAL_PCD_EP_GetRxCount>
 800f44e:	4603      	mov	r3, r0
}
 800f450:	4618      	mov	r0, r3
 800f452:	3708      	adds	r7, #8
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f458:	b480      	push	{r7}
 800f45a:	b083      	sub	sp, #12
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f460:	4b03      	ldr	r3, [pc, #12]	; (800f470 <USBD_static_malloc+0x18>)
}
 800f462:	4618      	mov	r0, r3
 800f464:	370c      	adds	r7, #12
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr
 800f46e:	bf00      	nop
 800f470:	200009c8 	.word	0x200009c8

0800f474 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f474:	b480      	push	{r7}
 800f476:	b085      	sub	sp, #20
 800f478:	af00      	add	r7, sp, #0
 800f47a:	4603      	mov	r3, r0
 800f47c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f47e:	2300      	movs	r3, #0
 800f480:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f482:	79fb      	ldrb	r3, [r7, #7]
 800f484:	2b03      	cmp	r3, #3
 800f486:	d817      	bhi.n	800f4b8 <USBD_Get_USB_Status+0x44>
 800f488:	a201      	add	r2, pc, #4	; (adr r2, 800f490 <USBD_Get_USB_Status+0x1c>)
 800f48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f48e:	bf00      	nop
 800f490:	0800f4a1 	.word	0x0800f4a1
 800f494:	0800f4a7 	.word	0x0800f4a7
 800f498:	0800f4ad 	.word	0x0800f4ad
 800f49c:	0800f4b3 	.word	0x0800f4b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f4a4:	e00b      	b.n	800f4be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f4a6:	2303      	movs	r3, #3
 800f4a8:	73fb      	strb	r3, [r7, #15]
    break;
 800f4aa:	e008      	b.n	800f4be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f4b0:	e005      	b.n	800f4be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f4b2:	2303      	movs	r3, #3
 800f4b4:	73fb      	strb	r3, [r7, #15]
    break;
 800f4b6:	e002      	b.n	800f4be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f4b8:	2303      	movs	r3, #3
 800f4ba:	73fb      	strb	r3, [r7, #15]
    break;
 800f4bc:	bf00      	nop
  }
  return usb_status;
 800f4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3714      	adds	r7, #20
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d002      	beq.n	800f4e2 <case_insensitive_strcmp+0x16>
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d101      	bne.n	800f4e6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e056      	b.n	800f594 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d10d      	bne.n	800f50a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e050      	b.n	800f594 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d101      	bne.n	800f4fe <case_insensitive_strcmp+0x32>
        {
            return 0;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	e04a      	b.n	800f594 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	3301      	adds	r3, #1
 800f502:	607b      	str	r3, [r7, #4]
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	3301      	adds	r3, #1
 800f508:	603b      	str	r3, [r7, #0]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	73fb      	strb	r3, [r7, #15]
 800f510:	7bfb      	ldrb	r3, [r7, #15]
 800f512:	3301      	adds	r3, #1
 800f514:	4a22      	ldr	r2, [pc, #136]	; (800f5a0 <case_insensitive_strcmp+0xd4>)
 800f516:	4413      	add	r3, r2
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	f003 0303 	and.w	r3, r3, #3
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d103      	bne.n	800f52a <case_insensitive_strcmp+0x5e>
 800f522:	7bfb      	ldrb	r3, [r7, #15]
 800f524:	f103 0220 	add.w	r2, r3, #32
 800f528:	e000      	b.n	800f52c <case_insensitive_strcmp+0x60>
 800f52a:	7bfa      	ldrb	r2, [r7, #15]
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	73bb      	strb	r3, [r7, #14]
 800f532:	7bbb      	ldrb	r3, [r7, #14]
 800f534:	3301      	adds	r3, #1
 800f536:	491a      	ldr	r1, [pc, #104]	; (800f5a0 <case_insensitive_strcmp+0xd4>)
 800f538:	440b      	add	r3, r1
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	f003 0303 	and.w	r3, r3, #3
 800f540:	2b01      	cmp	r3, #1
 800f542:	d102      	bne.n	800f54a <case_insensitive_strcmp+0x7e>
 800f544:	7bbb      	ldrb	r3, [r7, #14]
 800f546:	3320      	adds	r3, #32
 800f548:	e000      	b.n	800f54c <case_insensitive_strcmp+0x80>
 800f54a:	7bbb      	ldrb	r3, [r7, #14]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d0d0      	beq.n	800f4f2 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	737b      	strb	r3, [r7, #13]
 800f556:	7b7b      	ldrb	r3, [r7, #13]
 800f558:	3301      	adds	r3, #1
 800f55a:	4a11      	ldr	r2, [pc, #68]	; (800f5a0 <case_insensitive_strcmp+0xd4>)
 800f55c:	4413      	add	r3, r2
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	f003 0303 	and.w	r3, r3, #3
 800f564:	2b01      	cmp	r3, #1
 800f566:	d103      	bne.n	800f570 <case_insensitive_strcmp+0xa4>
 800f568:	7b7b      	ldrb	r3, [r7, #13]
 800f56a:	f103 0220 	add.w	r2, r3, #32
 800f56e:	e000      	b.n	800f572 <case_insensitive_strcmp+0xa6>
 800f570:	7b7a      	ldrb	r2, [r7, #13]
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	733b      	strb	r3, [r7, #12]
 800f578:	7b3b      	ldrb	r3, [r7, #12]
 800f57a:	3301      	adds	r3, #1
 800f57c:	4908      	ldr	r1, [pc, #32]	; (800f5a0 <case_insensitive_strcmp+0xd4>)
 800f57e:	440b      	add	r3, r1
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	f003 0303 	and.w	r3, r3, #3
 800f586:	2b01      	cmp	r3, #1
 800f588:	d102      	bne.n	800f590 <case_insensitive_strcmp+0xc4>
 800f58a:	7b3b      	ldrb	r3, [r7, #12]
 800f58c:	3320      	adds	r3, #32
 800f58e:	e000      	b.n	800f592 <case_insensitive_strcmp+0xc6>
 800f590:	7b3b      	ldrb	r3, [r7, #12]
 800f592:	1ad3      	subs	r3, r2, r3
}
 800f594:	4618      	mov	r0, r3
 800f596:	3714      	adds	r7, #20
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr
 800f5a0:	08015534 	.word	0x08015534

0800f5a4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2028      	movs	r0, #40	; 0x28
 800f5b2:	4798      	blx	r3
 800f5b4:	60f8      	str	r0, [r7, #12]
    if (node)
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d004      	beq.n	800f5c6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800f5bc:	2228      	movs	r2, #40	; 0x28
 800f5be:	2100      	movs	r1, #0
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	f001 f85d 	bl	8010680 <memset>
    }

    return node;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3710      	adds	r7, #16
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800f5dc:	e037      	b.n	800f64e <cJSON_Delete+0x7e>
    {
        next = item->next;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	68db      	ldr	r3, [r3, #12]
 800f5e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d108      	bne.n	800f602 <cJSON_Delete+0x32>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d004      	beq.n	800f602 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7ff ffe7 	bl	800f5d0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d109      	bne.n	800f622 <cJSON_Delete+0x52>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	691b      	ldr	r3, [r3, #16]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d005      	beq.n	800f622 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800f616:	4b12      	ldr	r3, [pc, #72]	; (800f660 <cJSON_Delete+0x90>)
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	6912      	ldr	r2, [r2, #16]
 800f61e:	4610      	mov	r0, r2
 800f620:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d109      	bne.n	800f642 <cJSON_Delete+0x72>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6a1b      	ldr	r3, [r3, #32]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d005      	beq.n	800f642 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800f636:	4b0a      	ldr	r3, [pc, #40]	; (800f660 <cJSON_Delete+0x90>)
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	687a      	ldr	r2, [r7, #4]
 800f63c:	6a12      	ldr	r2, [r2, #32]
 800f63e:	4610      	mov	r0, r2
 800f640:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800f642:	4b07      	ldr	r3, [pc, #28]	; (800f660 <cJSON_Delete+0x90>)
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	4798      	blx	r3
        item = next;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1c4      	bne.n	800f5de <cJSON_Delete+0xe>
    }
}
 800f654:	bf00      	nop
 800f656:	bf00      	nop
 800f658:	3710      	adds	r7, #16
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	20000174 	.word	0x20000174

0800f664 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800f664:	b480      	push	{r7}
 800f666:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800f668:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr
 800f674:	0000      	movs	r0, r0
	...

0800f678 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b098      	sub	sp, #96	; 0x60
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
    double number = 0;
 800f682:	f04f 0200 	mov.w	r2, #0
 800f686:	f04f 0300 	mov.w	r3, #0
 800f68a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800f68e:	2300      	movs	r3, #0
 800f690:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800f692:	f7ff ffe7 	bl	800f664 <get_decimal_point>
 800f696:	4603      	mov	r3, r0
 800f698:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800f69c:	2300      	movs	r3, #0
 800f69e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d003      	beq.n	800f6ae <parse_number+0x36>
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d101      	bne.n	800f6b2 <parse_number+0x3a>
    {
        return false;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	e0c6      	b.n	800f840 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6b6:	e063      	b.n	800f780 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	6899      	ldr	r1, [r3, #8]
 800f6c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6c2:	440b      	add	r3, r1
 800f6c4:	4413      	add	r3, r2
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	2b45      	cmp	r3, #69	; 0x45
 800f6ca:	dc3d      	bgt.n	800f748 <parse_number+0xd0>
 800f6cc:	2b2b      	cmp	r3, #43	; 0x2b
 800f6ce:	db66      	blt.n	800f79e <parse_number+0x126>
 800f6d0:	3b2b      	subs	r3, #43	; 0x2b
 800f6d2:	2b1a      	cmp	r3, #26
 800f6d4:	d863      	bhi.n	800f79e <parse_number+0x126>
 800f6d6:	a201      	add	r2, pc, #4	; (adr r2, 800f6dc <parse_number+0x64>)
 800f6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6dc:	0800f74d 	.word	0x0800f74d
 800f6e0:	0800f79f 	.word	0x0800f79f
 800f6e4:	0800f74d 	.word	0x0800f74d
 800f6e8:	0800f76b 	.word	0x0800f76b
 800f6ec:	0800f79f 	.word	0x0800f79f
 800f6f0:	0800f74d 	.word	0x0800f74d
 800f6f4:	0800f74d 	.word	0x0800f74d
 800f6f8:	0800f74d 	.word	0x0800f74d
 800f6fc:	0800f74d 	.word	0x0800f74d
 800f700:	0800f74d 	.word	0x0800f74d
 800f704:	0800f74d 	.word	0x0800f74d
 800f708:	0800f74d 	.word	0x0800f74d
 800f70c:	0800f74d 	.word	0x0800f74d
 800f710:	0800f74d 	.word	0x0800f74d
 800f714:	0800f74d 	.word	0x0800f74d
 800f718:	0800f79f 	.word	0x0800f79f
 800f71c:	0800f79f 	.word	0x0800f79f
 800f720:	0800f79f 	.word	0x0800f79f
 800f724:	0800f79f 	.word	0x0800f79f
 800f728:	0800f79f 	.word	0x0800f79f
 800f72c:	0800f79f 	.word	0x0800f79f
 800f730:	0800f79f 	.word	0x0800f79f
 800f734:	0800f79f 	.word	0x0800f79f
 800f738:	0800f79f 	.word	0x0800f79f
 800f73c:	0800f79f 	.word	0x0800f79f
 800f740:	0800f79f 	.word	0x0800f79f
 800f744:	0800f74d 	.word	0x0800f74d
 800f748:	2b65      	cmp	r3, #101	; 0x65
 800f74a:	d128      	bne.n	800f79e <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	6899      	ldr	r1, [r3, #8]
 800f754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f756:	440b      	add	r3, r1
 800f758:	4413      	add	r3, r2
 800f75a:	7819      	ldrb	r1, [r3, #0]
 800f75c:	f107 0208 	add.w	r2, r7, #8
 800f760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f762:	4413      	add	r3, r2
 800f764:	460a      	mov	r2, r1
 800f766:	701a      	strb	r2, [r3, #0]
                break;
 800f768:	e007      	b.n	800f77a <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800f76a:	f107 0208 	add.w	r2, r7, #8
 800f76e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f770:	4413      	add	r3, r2
 800f772:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f776:	701a      	strb	r2, [r3, #0]
                break;
 800f778:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800f77a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f77c:	3301      	adds	r3, #1
 800f77e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f782:	2b3e      	cmp	r3, #62	; 0x3e
 800f784:	d80d      	bhi.n	800f7a2 <parse_number+0x12a>
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d00a      	beq.n	800f7a2 <parse_number+0x12a>
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	689a      	ldr	r2, [r3, #8]
 800f790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f792:	441a      	add	r2, r3
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d38d      	bcc.n	800f6b8 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800f79c:	e001      	b.n	800f7a2 <parse_number+0x12a>
                goto loop_end;
 800f79e:	bf00      	nop
 800f7a0:	e000      	b.n	800f7a4 <parse_number+0x12c>
loop_end:
 800f7a2:	bf00      	nop
    number_c_string[i] = '\0';
 800f7a4:	f107 0208 	add.w	r2, r7, #8
 800f7a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7aa:	4413      	add	r3, r2
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800f7b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f7b4:	f107 0308 	add.w	r3, r7, #8
 800f7b8:	4611      	mov	r1, r2
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f002 f8f2 	bl	80119a4 <strtod>
 800f7c0:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800f7c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7c6:	f107 0308 	add.w	r3, r7, #8
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d101      	bne.n	800f7d2 <parse_number+0x15a>
    {
        return false; /* parse_error */
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	e036      	b.n	800f840 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800f7d2:	6879      	ldr	r1, [r7, #4]
 800f7d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f7d8:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800f7dc:	a31b      	add	r3, pc, #108	; (adr r3, 800f84c <parse_number+0x1d4>)
 800f7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f7e6:	f7f1 f9a5 	bl	8000b34 <__aeabi_dcmpge>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d004      	beq.n	800f7fa <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f7f6:	615a      	str	r2, [r3, #20]
 800f7f8:	e015      	b.n	800f826 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800f7fa:	f04f 0200 	mov.w	r2, #0
 800f7fe:	4b12      	ldr	r3, [pc, #72]	; (800f848 <parse_number+0x1d0>)
 800f800:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f804:	f7f1 f98c 	bl	8000b20 <__aeabi_dcmple>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d004      	beq.n	800f818 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f814:	615a      	str	r2, [r3, #20]
 800f816:	e006      	b.n	800f826 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 800f818:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f81c:	f7f1 f99e 	bl	8000b5c <__aeabi_d2iz>
 800f820:	4602      	mov	r2, r0
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2208      	movs	r2, #8
 800f82a:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	689b      	ldr	r3, [r3, #8]
 800f830:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f832:	f107 0208 	add.w	r2, r7, #8
 800f836:	1a8a      	subs	r2, r1, r2
 800f838:	441a      	add	r2, r3
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	609a      	str	r2, [r3, #8]
    return true;
 800f83e:	2301      	movs	r3, #1
}
 800f840:	4618      	mov	r0, r3
 800f842:	3760      	adds	r7, #96	; 0x60
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	c1e00000 	.word	0xc1e00000
 800f84c:	ffc00000 	.word	0xffc00000
 800f850:	41dfffff 	.word	0x41dfffff

0800f854 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800f854:	b480      	push	{r7}
 800f856:	b085      	sub	sp, #20
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800f85c:	2300      	movs	r3, #0
 800f85e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800f860:	2300      	movs	r3, #0
 800f862:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800f864:	2300      	movs	r3, #0
 800f866:	60bb      	str	r3, [r7, #8]
 800f868:	e04c      	b.n	800f904 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	4413      	add	r3, r2
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	2b2f      	cmp	r3, #47	; 0x2f
 800f874:	d90f      	bls.n	800f896 <parse_hex4+0x42>
 800f876:	687a      	ldr	r2, [r7, #4]
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	4413      	add	r3, r2
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	2b39      	cmp	r3, #57	; 0x39
 800f880:	d809      	bhi.n	800f896 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	4413      	add	r3, r2
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	461a      	mov	r2, r3
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	4413      	add	r3, r2
 800f890:	3b30      	subs	r3, #48	; 0x30
 800f892:	60fb      	str	r3, [r7, #12]
 800f894:	e02d      	b.n	800f8f2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800f896:	687a      	ldr	r2, [r7, #4]
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	4413      	add	r3, r2
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	2b40      	cmp	r3, #64	; 0x40
 800f8a0:	d90f      	bls.n	800f8c2 <parse_hex4+0x6e>
 800f8a2:	687a      	ldr	r2, [r7, #4]
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	2b46      	cmp	r3, #70	; 0x46
 800f8ac:	d809      	bhi.n	800f8c2 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	3b37      	subs	r3, #55	; 0x37
 800f8be:	60fb      	str	r3, [r7, #12]
 800f8c0:	e017      	b.n	800f8f2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	4413      	add	r3, r2
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	2b60      	cmp	r3, #96	; 0x60
 800f8cc:	d90f      	bls.n	800f8ee <parse_hex4+0x9a>
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	2b66      	cmp	r3, #102	; 0x66
 800f8d8:	d809      	bhi.n	800f8ee <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800f8da:	687a      	ldr	r2, [r7, #4]
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	4413      	add	r3, r2
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	3b57      	subs	r3, #87	; 0x57
 800f8ea:	60fb      	str	r3, [r7, #12]
 800f8ec:	e001      	b.n	800f8f2 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	e00c      	b.n	800f90c <parse_hex4+0xb8>
        }

        if (i < 3)
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	2b02      	cmp	r3, #2
 800f8f6:	d802      	bhi.n	800f8fe <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	011b      	lsls	r3, r3, #4
 800f8fc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	3301      	adds	r3, #1
 800f902:	60bb      	str	r3, [r7, #8]
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	2b03      	cmp	r3, #3
 800f908:	d9af      	bls.n	800f86a <parse_hex4+0x16>
        }
    }

    return h;
 800f90a:	68fb      	ldr	r3, [r7, #12]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3714      	adds	r7, #20
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr

0800f918 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b08a      	sub	sp, #40	; 0x28
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	60f8      	str	r0, [r7, #12]
 800f920:	60b9      	str	r1, [r7, #8]
 800f922:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800f924:	2300      	movs	r3, #0
 800f926:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800f928:	2300      	movs	r3, #0
 800f92a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800f930:	2300      	movs	r3, #0
 800f932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800f936:	2300      	movs	r3, #0
 800f938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800f93c:	2300      	movs	r3, #0
 800f93e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800f942:	2300      	movs	r3, #0
 800f944:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800f948:	68ba      	ldr	r2, [r7, #8]
 800f94a:	69bb      	ldr	r3, [r7, #24]
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	2b05      	cmp	r3, #5
 800f950:	f340 80b7 	ble.w	800fac2 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800f954:	69bb      	ldr	r3, [r7, #24]
 800f956:	3302      	adds	r3, #2
 800f958:	4618      	mov	r0, r3
 800f95a:	f7ff ff7b 	bl	800f854 <parse_hex4>
 800f95e:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f966:	d304      	bcc.n	800f972 <utf16_literal_to_utf8+0x5a>
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800f96e:	f0c0 80aa 	bcc.w	800fac6 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800f978:	d337      	bcc.n	800f9ea <utf16_literal_to_utf8+0xd2>
 800f97a:	69fb      	ldr	r3, [r7, #28]
 800f97c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f980:	d233      	bcs.n	800f9ea <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800f982:	69bb      	ldr	r3, [r7, #24]
 800f984:	3306      	adds	r3, #6
 800f986:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800f988:	2300      	movs	r3, #0
 800f98a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800f98c:	230c      	movs	r3, #12
 800f98e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800f992:	68ba      	ldr	r2, [r7, #8]
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	1ad3      	subs	r3, r2, r3
 800f998:	2b05      	cmp	r3, #5
 800f99a:	f340 8096 	ble.w	800faca <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	2b5c      	cmp	r3, #92	; 0x5c
 800f9a4:	f040 8093 	bne.w	800face <utf16_literal_to_utf8+0x1b6>
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	2b75      	cmp	r3, #117	; 0x75
 800f9b0:	f040 808d 	bne.w	800face <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	3302      	adds	r3, #2
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7ff ff4b 	bl	800f854 <parse_hex4>
 800f9be:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f9c6:	f0c0 8084 	bcc.w	800fad2 <utf16_literal_to_utf8+0x1ba>
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800f9d0:	d27f      	bcs.n	800fad2 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	029a      	lsls	r2, r3, #10
 800f9d6:	4b43      	ldr	r3, [pc, #268]	; (800fae4 <utf16_literal_to_utf8+0x1cc>)
 800f9d8:	4013      	ands	r3, r2
 800f9da:	693a      	ldr	r2, [r7, #16]
 800f9dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f9e6:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800f9e8:	e004      	b.n	800f9f4 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800f9ea:	2306      	movs	r3, #6
 800f9ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800f9f0:	69fb      	ldr	r3, [r7, #28]
 800f9f2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f6:	2b7f      	cmp	r3, #127	; 0x7f
 800f9f8:	d803      	bhi.n	800fa02 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fa00:	e01f      	b.n	800fa42 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800fa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa08:	d206      	bcs.n	800fa18 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800fa0a:	2302      	movs	r3, #2
 800fa0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800fa10:	23c0      	movs	r3, #192	; 0xc0
 800fa12:	f887 3020 	strb.w	r3, [r7, #32]
 800fa16:	e014      	b.n	800fa42 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800fa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa1e:	d206      	bcs.n	800fa2e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800fa20:	2303      	movs	r3, #3
 800fa22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800fa26:	23e0      	movs	r3, #224	; 0xe0
 800fa28:	f887 3020 	strb.w	r3, [r7, #32]
 800fa2c:	e009      	b.n	800fa42 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800fa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa30:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800fa34:	d24f      	bcs.n	800fad6 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800fa36:	2304      	movs	r3, #4
 800fa38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800fa3c:	23f0      	movs	r3, #240	; 0xf0
 800fa3e:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800fa42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa46:	3b01      	subs	r3, #1
 800fa48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800fa4c:	e015      	b.n	800fa7a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800fa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa56:	b2da      	uxtb	r2, r3
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6819      	ldr	r1, [r3, #0]
 800fa5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fa60:	440b      	add	r3, r1
 800fa62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fa66:	b2d2      	uxtb	r2, r2
 800fa68:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6c:	099b      	lsrs	r3, r3, #6
 800fa6e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800fa70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fa74:	3b01      	subs	r3, #1
 800fa76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800fa7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d1e5      	bne.n	800fa4e <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800fa82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa86:	2b01      	cmp	r3, #1
 800fa88:	d909      	bls.n	800fa9e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8c:	b2d9      	uxtb	r1, r3
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f897 2020 	ldrb.w	r2, [r7, #32]
 800fa96:	430a      	orrs	r2, r1
 800fa98:	b2d2      	uxtb	r2, r2
 800fa9a:	701a      	strb	r2, [r3, #0]
 800fa9c:	e007      	b.n	800faae <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800fa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa0:	b2da      	uxtb	r2, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800faaa:	b2d2      	uxtb	r2, r2
 800faac:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fab6:	441a      	add	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800fabc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fac0:	e00b      	b.n	800fada <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800fac2:	bf00      	nop
 800fac4:	e008      	b.n	800fad8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800fac6:	bf00      	nop
 800fac8:	e006      	b.n	800fad8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800faca:	bf00      	nop
 800facc:	e004      	b.n	800fad8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800face:	bf00      	nop
 800fad0:	e002      	b.n	800fad8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800fad2:	bf00      	nop
 800fad4:	e000      	b.n	800fad8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800fad6:	bf00      	nop

fail:
    return 0;
 800fad8:	2300      	movs	r3, #0
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3728      	adds	r7, #40	; 0x28
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	bf00      	nop
 800fae4:	000ffc00 	.word	0x000ffc00

0800fae8 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b08a      	sub	sp, #40	; 0x28
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	681a      	ldr	r2, [r3, #0]
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	689b      	ldr	r3, [r3, #8]
 800fafa:	3301      	adds	r3, #1
 800fafc:	4413      	add	r3, r2
 800fafe:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	689b      	ldr	r3, [r3, #8]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	4413      	add	r3, r2
 800fb0c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800fb12:	2300      	movs	r3, #0
 800fb14:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	4413      	add	r3, r2
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	2b22      	cmp	r3, #34	; 0x22
 800fb24:	f040 8102 	bne.w	800fd2c <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800fb30:	e017      	b.n	800fb62 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800fb32:	6a3b      	ldr	r3, [r7, #32]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b5c      	cmp	r3, #92	; 0x5c
 800fb38:	d110      	bne.n	800fb5c <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800fb3a:	6a3b      	ldr	r3, [r7, #32]
 800fb3c:	1c5a      	adds	r2, r3, #1
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	1ad3      	subs	r3, r2, r3
 800fb44:	461a      	mov	r2, r3
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	f080 80f0 	bcs.w	800fd30 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	3301      	adds	r3, #1
 800fb54:	61bb      	str	r3, [r7, #24]
                input_end++;
 800fb56:	6a3b      	ldr	r3, [r7, #32]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800fb5c:	6a3b      	ldr	r3, [r7, #32]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	6a3a      	ldr	r2, [r7, #32]
 800fb68:	1ad3      	subs	r3, r2, r3
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d203      	bcs.n	800fb7c <parse_string+0x94>
 800fb74:	6a3b      	ldr	r3, [r7, #32]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	2b22      	cmp	r3, #34	; 0x22
 800fb7a:	d1da      	bne.n	800fb32 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	6a3a      	ldr	r2, [r7, #32]
 800fb82:	1ad3      	subs	r3, r2, r3
 800fb84:	461a      	mov	r2, r3
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	f080 80d2 	bcs.w	800fd34 <parse_string+0x24c>
 800fb90:	6a3b      	ldr	r3, [r7, #32]
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	2b22      	cmp	r3, #34	; 0x22
 800fb96:	f040 80cd 	bne.w	800fd34 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	689b      	ldr	r3, [r3, #8]
 800fba2:	4413      	add	r3, r2
 800fba4:	6a3a      	ldr	r2, [r7, #32]
 800fba6:	1ad3      	subs	r3, r2, r3
 800fba8:	461a      	mov	r2, r3
 800fbaa:	69bb      	ldr	r3, [r7, #24]
 800fbac:	1ad3      	subs	r3, r2, r3
 800fbae:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	691b      	ldr	r3, [r3, #16]
 800fbb4:	693a      	ldr	r2, [r7, #16]
 800fbb6:	3201      	adds	r2, #1
 800fbb8:	4610      	mov	r0, r2
 800fbba:	4798      	blx	r3
 800fbbc:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 80b9 	beq.w	800fd38 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800fbca:	e093      	b.n	800fcf4 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800fbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	2b5c      	cmp	r3, #92	; 0x5c
 800fbd2:	d008      	beq.n	800fbe6 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800fbd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbd6:	1c53      	adds	r3, r2, #1
 800fbd8:	627b      	str	r3, [r7, #36]	; 0x24
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	1c59      	adds	r1, r3, #1
 800fbde:	60f9      	str	r1, [r7, #12]
 800fbe0:	7812      	ldrb	r2, [r2, #0]
 800fbe2:	701a      	strb	r2, [r3, #0]
 800fbe4:	e086      	b.n	800fcf4 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800fbe6:	2302      	movs	r3, #2
 800fbe8:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800fbea:	6a3a      	ldr	r2, [r7, #32]
 800fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbee:	1ad3      	subs	r3, r2, r3
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f340 80a3 	ble.w	800fd3c <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800fbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	2b75      	cmp	r3, #117	; 0x75
 800fbfe:	f300 809f 	bgt.w	800fd40 <parse_string+0x258>
 800fc02:	2b5c      	cmp	r3, #92	; 0x5c
 800fc04:	da04      	bge.n	800fc10 <parse_string+0x128>
 800fc06:	2b22      	cmp	r3, #34	; 0x22
 800fc08:	d05c      	beq.n	800fcc4 <parse_string+0x1dc>
 800fc0a:	2b2f      	cmp	r3, #47	; 0x2f
 800fc0c:	d05a      	beq.n	800fcc4 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800fc0e:	e097      	b.n	800fd40 <parse_string+0x258>
 800fc10:	3b5c      	subs	r3, #92	; 0x5c
 800fc12:	2b19      	cmp	r3, #25
 800fc14:	f200 8094 	bhi.w	800fd40 <parse_string+0x258>
 800fc18:	a201      	add	r2, pc, #4	; (adr r2, 800fc20 <parse_string+0x138>)
 800fc1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc1e:	bf00      	nop
 800fc20:	0800fcc5 	.word	0x0800fcc5
 800fc24:	0800fd41 	.word	0x0800fd41
 800fc28:	0800fd41 	.word	0x0800fd41
 800fc2c:	0800fd41 	.word	0x0800fd41
 800fc30:	0800fd41 	.word	0x0800fd41
 800fc34:	0800fd41 	.word	0x0800fd41
 800fc38:	0800fc89 	.word	0x0800fc89
 800fc3c:	0800fd41 	.word	0x0800fd41
 800fc40:	0800fd41 	.word	0x0800fd41
 800fc44:	0800fd41 	.word	0x0800fd41
 800fc48:	0800fc95 	.word	0x0800fc95
 800fc4c:	0800fd41 	.word	0x0800fd41
 800fc50:	0800fd41 	.word	0x0800fd41
 800fc54:	0800fd41 	.word	0x0800fd41
 800fc58:	0800fd41 	.word	0x0800fd41
 800fc5c:	0800fd41 	.word	0x0800fd41
 800fc60:	0800fd41 	.word	0x0800fd41
 800fc64:	0800fd41 	.word	0x0800fd41
 800fc68:	0800fca1 	.word	0x0800fca1
 800fc6c:	0800fd41 	.word	0x0800fd41
 800fc70:	0800fd41 	.word	0x0800fd41
 800fc74:	0800fd41 	.word	0x0800fd41
 800fc78:	0800fcad 	.word	0x0800fcad
 800fc7c:	0800fd41 	.word	0x0800fd41
 800fc80:	0800fcb9 	.word	0x0800fcb9
 800fc84:	0800fcd3 	.word	0x0800fcd3
                    *output_pointer++ = '\b';
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	1c5a      	adds	r2, r3, #1
 800fc8c:	60fa      	str	r2, [r7, #12]
 800fc8e:	2208      	movs	r2, #8
 800fc90:	701a      	strb	r2, [r3, #0]
                    break;
 800fc92:	e02b      	b.n	800fcec <parse_string+0x204>
                    *output_pointer++ = '\f';
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	1c5a      	adds	r2, r3, #1
 800fc98:	60fa      	str	r2, [r7, #12]
 800fc9a:	220c      	movs	r2, #12
 800fc9c:	701a      	strb	r2, [r3, #0]
                    break;
 800fc9e:	e025      	b.n	800fcec <parse_string+0x204>
                    *output_pointer++ = '\n';
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	1c5a      	adds	r2, r3, #1
 800fca4:	60fa      	str	r2, [r7, #12]
 800fca6:	220a      	movs	r2, #10
 800fca8:	701a      	strb	r2, [r3, #0]
                    break;
 800fcaa:	e01f      	b.n	800fcec <parse_string+0x204>
                    *output_pointer++ = '\r';
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	1c5a      	adds	r2, r3, #1
 800fcb0:	60fa      	str	r2, [r7, #12]
 800fcb2:	220d      	movs	r2, #13
 800fcb4:	701a      	strb	r2, [r3, #0]
                    break;
 800fcb6:	e019      	b.n	800fcec <parse_string+0x204>
                    *output_pointer++ = '\t';
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	1c5a      	adds	r2, r3, #1
 800fcbc:	60fa      	str	r2, [r7, #12]
 800fcbe:	2209      	movs	r2, #9
 800fcc0:	701a      	strb	r2, [r3, #0]
                    break;
 800fcc2:	e013      	b.n	800fcec <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	1c5a      	adds	r2, r3, #1
 800fcc8:	60fa      	str	r2, [r7, #12]
 800fcca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fccc:	7852      	ldrb	r2, [r2, #1]
 800fcce:	701a      	strb	r2, [r3, #0]
                    break;
 800fcd0:	e00c      	b.n	800fcec <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800fcd2:	f107 030c 	add.w	r3, r7, #12
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	6a39      	ldr	r1, [r7, #32]
 800fcda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcdc:	f7ff fe1c 	bl	800f918 <utf16_literal_to_utf8>
 800fce0:	4603      	mov	r3, r0
 800fce2:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800fce4:	7dfb      	ldrb	r3, [r7, #23]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d02c      	beq.n	800fd44 <parse_string+0x25c>
                    break;
 800fcea:	bf00      	nop
            }
            input_pointer += sequence_length;
 800fcec:	7dfb      	ldrb	r3, [r7, #23]
 800fcee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcf0:	4413      	add	r3, r2
 800fcf2:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800fcf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcf6:	6a3b      	ldr	r3, [r7, #32]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	f4ff af67 	bcc.w	800fbcc <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2200      	movs	r2, #0
 800fd02:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2210      	movs	r2, #16
 800fd08:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	69fa      	ldr	r2, [r7, #28]
 800fd0e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	6a3a      	ldr	r2, [r7, #32]
 800fd16:	1ad3      	subs	r3, r2, r3
 800fd18:	461a      	mov	r2, r3
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	1c5a      	adds	r2, r3, #1
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	609a      	str	r2, [r3, #8]

    return true;
 800fd28:	2301      	movs	r3, #1
 800fd2a:	e01e      	b.n	800fd6a <parse_string+0x282>
        goto fail;
 800fd2c:	bf00      	nop
 800fd2e:	e00a      	b.n	800fd46 <parse_string+0x25e>
                    goto fail;
 800fd30:	bf00      	nop
 800fd32:	e008      	b.n	800fd46 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 800fd34:	bf00      	nop
 800fd36:	e006      	b.n	800fd46 <parse_string+0x25e>
            goto fail; /* allocation failure */
 800fd38:	bf00      	nop
 800fd3a:	e004      	b.n	800fd46 <parse_string+0x25e>
                goto fail;
 800fd3c:	bf00      	nop
 800fd3e:	e002      	b.n	800fd46 <parse_string+0x25e>
                    goto fail;
 800fd40:	bf00      	nop
 800fd42:	e000      	b.n	800fd46 <parse_string+0x25e>
                        goto fail;
 800fd44:	bf00      	nop

fail:
    if (output != NULL)
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d003      	beq.n	800fd54 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	695b      	ldr	r3, [r3, #20]
 800fd50:	69f8      	ldr	r0, [r7, #28]
 800fd52:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800fd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d006      	beq.n	800fd68 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd60:	1ad3      	subs	r3, r2, r3
 800fd62:	461a      	mov	r2, r3
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	609a      	str	r2, [r3, #8]
    }

    return false;
 800fd68:	2300      	movs	r3, #0
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3728      	adds	r7, #40	; 0x28
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop

0800fd74 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d003      	beq.n	800fd8a <buffer_skip_whitespace+0x16>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d101      	bne.n	800fd8e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	e02c      	b.n	800fde8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d005      	beq.n	800fda0 <buffer_skip_whitespace+0x2c>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	689a      	ldr	r2, [r3, #8]
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d306      	bcc.n	800fdae <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	e021      	b.n	800fde8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	689b      	ldr	r3, [r3, #8]
 800fda8:	1c5a      	adds	r2, r3, #1
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d00d      	beq.n	800fdd0 <buffer_skip_whitespace+0x5c>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	689a      	ldr	r2, [r3, #8]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d207      	bcs.n	800fdd0 <buffer_skip_whitespace+0x5c>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	689b      	ldr	r3, [r3, #8]
 800fdc8:	4413      	add	r3, r2
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	2b20      	cmp	r3, #32
 800fdce:	d9e9      	bls.n	800fda4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	689a      	ldr	r2, [r3, #8]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d104      	bne.n	800fde6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	689b      	ldr	r3, [r3, #8]
 800fde0:	1e5a      	subs	r2, r3, #1
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800fde6:	687b      	ldr	r3, [r7, #4]
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	370c      	adds	r7, #12
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d007      	beq.n	800fe12 <skip_utf8_bom+0x1e>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d003      	beq.n	800fe12 <skip_utf8_bom+0x1e>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	689b      	ldr	r3, [r3, #8]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <skip_utf8_bom+0x22>
    {
        return NULL;
 800fe12:	2300      	movs	r3, #0
 800fe14:	e01c      	b.n	800fe50 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d018      	beq.n	800fe4e <skip_utf8_bom+0x5a>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	689b      	ldr	r3, [r3, #8]
 800fe20:	1d1a      	adds	r2, r3, #4
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d211      	bcs.n	800fe4e <skip_utf8_bom+0x5a>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	689b      	ldr	r3, [r3, #8]
 800fe32:	4413      	add	r3, r2
 800fe34:	2203      	movs	r2, #3
 800fe36:	4908      	ldr	r1, [pc, #32]	; (800fe58 <skip_utf8_bom+0x64>)
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f000 ff7a 	bl	8010d32 <strncmp>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d104      	bne.n	800fe4e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	1cda      	adds	r2, r3, #3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800fe4e:	687b      	ldr	r3, [r7, #4]
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	08013e0c 	.word	0x08013e0c

0800fe5c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b086      	sub	sp, #24
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d101      	bne.n	800fe72 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	e00c      	b.n	800fe8c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800fe72:	68f8      	ldr	r0, [r7, #12]
 800fe74:	f7f0 f9be 	bl	80001f4 <strlen>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	68ba      	ldr	r2, [r7, #8]
 800fe82:	6979      	ldr	r1, [r7, #20]
 800fe84:	68f8      	ldr	r0, [r7, #12]
 800fe86:	f000 f805 	bl	800fe94 <cJSON_ParseWithLengthOpts>
 800fe8a:	4603      	mov	r3, r0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3718      	adds	r7, #24
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b08e      	sub	sp, #56	; 0x38
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	607a      	str	r2, [r7, #4]
 800fea0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800fea2:	f107 0318 	add.w	r3, r7, #24
 800fea6:	2200      	movs	r2, #0
 800fea8:	601a      	str	r2, [r3, #0]
 800feaa:	605a      	str	r2, [r3, #4]
 800feac:	609a      	str	r2, [r3, #8]
 800feae:	60da      	str	r2, [r3, #12]
 800feb0:	611a      	str	r2, [r3, #16]
 800feb2:	615a      	str	r2, [r3, #20]
 800feb4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800feb6:	2300      	movs	r3, #0
 800feb8:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800feba:	4b41      	ldr	r3, [pc, #260]	; (800ffc0 <cJSON_ParseWithLengthOpts+0x12c>)
 800febc:	2200      	movs	r2, #0
 800febe:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800fec0:	4b3f      	ldr	r3, [pc, #252]	; (800ffc0 <cJSON_ParseWithLengthOpts+0x12c>)
 800fec2:	2200      	movs	r2, #0
 800fec4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d042      	beq.n	800ff52 <cJSON_ParseWithLengthOpts+0xbe>
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d03f      	beq.n	800ff52 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800feda:	2300      	movs	r3, #0
 800fedc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800fede:	4a39      	ldr	r2, [pc, #228]	; (800ffc4 <cJSON_ParseWithLengthOpts+0x130>)
 800fee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fee4:	ca07      	ldmia	r2, {r0, r1, r2}
 800fee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800feea:	4836      	ldr	r0, [pc, #216]	; (800ffc4 <cJSON_ParseWithLengthOpts+0x130>)
 800feec:	f7ff fb5a 	bl	800f5a4 <cJSON_New_Item>
 800fef0:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800fef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d02e      	beq.n	800ff56 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800fef8:	f107 0318 	add.w	r3, r7, #24
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7ff ff79 	bl	800fdf4 <skip_utf8_bom>
 800ff02:	4603      	mov	r3, r0
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7ff ff35 	bl	800fd74 <buffer_skip_whitespace>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff10:	f000 f868 	bl	800ffe4 <parse_value>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d01f      	beq.n	800ff5a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d00e      	beq.n	800ff3e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800ff20:	f107 0318 	add.w	r3, r7, #24
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7ff ff25 	bl	800fd74 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800ff2a:	6a3a      	ldr	r2, [r7, #32]
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d215      	bcs.n	800ff5e <cJSON_ParseWithLengthOpts+0xca>
 800ff32:	69ba      	ldr	r2, [r7, #24]
 800ff34:	6a3b      	ldr	r3, [r7, #32]
 800ff36:	4413      	add	r3, r2
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d10f      	bne.n	800ff5e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d004      	beq.n	800ff4e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800ff44:	69ba      	ldr	r2, [r7, #24]
 800ff46:	6a3b      	ldr	r3, [r7, #32]
 800ff48:	441a      	add	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800ff4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff50:	e031      	b.n	800ffb6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800ff52:	bf00      	nop
 800ff54:	e004      	b.n	800ff60 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800ff56:	bf00      	nop
 800ff58:	e002      	b.n	800ff60 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800ff5a:	bf00      	nop
 800ff5c:	e000      	b.n	800ff60 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800ff5e:	bf00      	nop

fail:
    if (item != NULL)
 800ff60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d002      	beq.n	800ff6c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800ff66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff68:	f7ff fb32 	bl	800f5d0 <cJSON_Delete>
    }

    if (value != NULL)
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d020      	beq.n	800ffb4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800ff76:	2300      	movs	r3, #0
 800ff78:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800ff7a:	6a3a      	ldr	r2, [r7, #32]
 800ff7c:	69fb      	ldr	r3, [r7, #28]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d202      	bcs.n	800ff88 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800ff82:	6a3b      	ldr	r3, [r7, #32]
 800ff84:	617b      	str	r3, [r7, #20]
 800ff86:	e005      	b.n	800ff94 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d002      	beq.n	800ff94 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800ff8e:	69fb      	ldr	r3, [r7, #28]
 800ff90:	3b01      	subs	r3, #1
 800ff92:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d004      	beq.n	800ffa4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800ff9a:	693a      	ldr	r2, [r7, #16]
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	441a      	add	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800ffa4:	4b06      	ldr	r3, [pc, #24]	; (800ffc0 <cJSON_ParseWithLengthOpts+0x12c>)
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	f107 0310 	add.w	r3, r7, #16
 800ffac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ffb0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800ffb4:	2300      	movs	r3, #0
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3738      	adds	r7, #56	; 0x38
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	2000259c 	.word	0x2000259c
 800ffc4:	20000174 	.word	0x20000174

0800ffc8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	2100      	movs	r1, #0
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f7ff ff41 	bl	800fe5c <cJSON_ParseWithOpts>
 800ffda:	4603      	mov	r3, r0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d003      	beq.n	800fffc <parse_value+0x18>
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d101      	bne.n	8010000 <parse_value+0x1c>
    {
        return false; /* no input */
 800fffc:	2300      	movs	r3, #0
 800fffe:	e0d2      	b.n	80101a6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d01d      	beq.n	8010042 <parse_value+0x5e>
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	689b      	ldr	r3, [r3, #8]
 801000a:	1d1a      	adds	r2, r3, #4
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	429a      	cmp	r2, r3
 8010012:	d816      	bhi.n	8010042 <parse_value+0x5e>
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	4413      	add	r3, r2
 801001e:	2204      	movs	r2, #4
 8010020:	4963      	ldr	r1, [pc, #396]	; (80101b0 <parse_value+0x1cc>)
 8010022:	4618      	mov	r0, r3
 8010024:	f000 fe85 	bl	8010d32 <strncmp>
 8010028:	4603      	mov	r3, r0
 801002a:	2b00      	cmp	r3, #0
 801002c:	d109      	bne.n	8010042 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2204      	movs	r2, #4
 8010032:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	689b      	ldr	r3, [r3, #8]
 8010038:	1d1a      	adds	r2, r3, #4
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	609a      	str	r2, [r3, #8]
        return true;
 801003e:	2301      	movs	r3, #1
 8010040:	e0b1      	b.n	80101a6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d01d      	beq.n	8010084 <parse_value+0xa0>
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	689b      	ldr	r3, [r3, #8]
 801004c:	1d5a      	adds	r2, r3, #5
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	429a      	cmp	r2, r3
 8010054:	d816      	bhi.n	8010084 <parse_value+0xa0>
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	689b      	ldr	r3, [r3, #8]
 801005e:	4413      	add	r3, r2
 8010060:	2205      	movs	r2, #5
 8010062:	4954      	ldr	r1, [pc, #336]	; (80101b4 <parse_value+0x1d0>)
 8010064:	4618      	mov	r0, r3
 8010066:	f000 fe64 	bl	8010d32 <strncmp>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d109      	bne.n	8010084 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2201      	movs	r2, #1
 8010074:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	689b      	ldr	r3, [r3, #8]
 801007a:	1d5a      	adds	r2, r3, #5
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	609a      	str	r2, [r3, #8]
        return true;
 8010080:	2301      	movs	r3, #1
 8010082:	e090      	b.n	80101a6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d020      	beq.n	80100cc <parse_value+0xe8>
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	1d1a      	adds	r2, r3, #4
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	429a      	cmp	r2, r3
 8010096:	d819      	bhi.n	80100cc <parse_value+0xe8>
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	689b      	ldr	r3, [r3, #8]
 80100a0:	4413      	add	r3, r2
 80100a2:	2204      	movs	r2, #4
 80100a4:	4944      	ldr	r1, [pc, #272]	; (80101b8 <parse_value+0x1d4>)
 80100a6:	4618      	mov	r0, r3
 80100a8:	f000 fe43 	bl	8010d32 <strncmp>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d10c      	bne.n	80100cc <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2202      	movs	r2, #2
 80100b6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2201      	movs	r2, #1
 80100bc:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	689b      	ldr	r3, [r3, #8]
 80100c2:	1d1a      	adds	r2, r3, #4
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	609a      	str	r2, [r3, #8]
        return true;
 80100c8:	2301      	movs	r3, #1
 80100ca:	e06c      	b.n	80101a6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d013      	beq.n	80100fa <parse_value+0x116>
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	689a      	ldr	r2, [r3, #8]
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d20d      	bcs.n	80100fa <parse_value+0x116>
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	689b      	ldr	r3, [r3, #8]
 80100e6:	4413      	add	r3, r2
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	2b22      	cmp	r3, #34	; 0x22
 80100ec:	d105      	bne.n	80100fa <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80100ee:	6839      	ldr	r1, [r7, #0]
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f7ff fcf9 	bl	800fae8 <parse_string>
 80100f6:	4603      	mov	r3, r0
 80100f8:	e055      	b.n	80101a6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d023      	beq.n	8010148 <parse_value+0x164>
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	689a      	ldr	r2, [r3, #8]
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	429a      	cmp	r2, r3
 801010a:	d21d      	bcs.n	8010148 <parse_value+0x164>
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	689b      	ldr	r3, [r3, #8]
 8010114:	4413      	add	r3, r2
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	2b2d      	cmp	r3, #45	; 0x2d
 801011a:	d00f      	beq.n	801013c <parse_value+0x158>
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	4413      	add	r3, r2
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	2b2f      	cmp	r3, #47	; 0x2f
 801012a:	d90d      	bls.n	8010148 <parse_value+0x164>
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	689b      	ldr	r3, [r3, #8]
 8010134:	4413      	add	r3, r2
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	2b39      	cmp	r3, #57	; 0x39
 801013a:	d805      	bhi.n	8010148 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 801013c:	6839      	ldr	r1, [r7, #0]
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f7ff fa9a 	bl	800f678 <parse_number>
 8010144:	4603      	mov	r3, r0
 8010146:	e02e      	b.n	80101a6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d013      	beq.n	8010176 <parse_value+0x192>
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	689a      	ldr	r2, [r3, #8]
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	429a      	cmp	r2, r3
 8010158:	d20d      	bcs.n	8010176 <parse_value+0x192>
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	681a      	ldr	r2, [r3, #0]
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	689b      	ldr	r3, [r3, #8]
 8010162:	4413      	add	r3, r2
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	2b5b      	cmp	r3, #91	; 0x5b
 8010168:	d105      	bne.n	8010176 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 801016a:	6839      	ldr	r1, [r7, #0]
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 f825 	bl	80101bc <parse_array>
 8010172:	4603      	mov	r3, r0
 8010174:	e017      	b.n	80101a6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d013      	beq.n	80101a4 <parse_value+0x1c0>
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	689a      	ldr	r2, [r3, #8]
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	429a      	cmp	r2, r3
 8010186:	d20d      	bcs.n	80101a4 <parse_value+0x1c0>
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	681a      	ldr	r2, [r3, #0]
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	689b      	ldr	r3, [r3, #8]
 8010190:	4413      	add	r3, r2
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	2b7b      	cmp	r3, #123	; 0x7b
 8010196:	d105      	bne.n	80101a4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8010198:	6839      	ldr	r1, [r7, #0]
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f000 f8d2 	bl	8010344 <parse_object>
 80101a0:	4603      	mov	r3, r0
 80101a2:	e000      	b.n	80101a6 <parse_value+0x1c2>
    }

    return false;
 80101a4:	2300      	movs	r3, #0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	08013de4 	.word	0x08013de4
 80101b4:	08013e10 	.word	0x08013e10
 80101b8:	08013e18 	.word	0x08013e18

080101bc <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b086      	sub	sp, #24
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80101c6:	2300      	movs	r3, #0
 80101c8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80101ca:	2300      	movs	r3, #0
 80101cc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80101d6:	d301      	bcc.n	80101dc <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80101d8:	2300      	movs	r3, #0
 80101da:	e0af      	b.n	801033c <parse_array+0x180>
    }
    input_buffer->depth++;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	1c5a      	adds	r2, r3, #1
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	681a      	ldr	r2, [r3, #0]
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	689b      	ldr	r3, [r3, #8]
 80101ee:	4413      	add	r3, r2
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	2b5b      	cmp	r3, #91	; 0x5b
 80101f4:	f040 8094 	bne.w	8010320 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	689b      	ldr	r3, [r3, #8]
 80101fc:	1c5a      	adds	r2, r3, #1
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8010202:	6838      	ldr	r0, [r7, #0]
 8010204:	f7ff fdb6 	bl	800fd74 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00d      	beq.n	801022a <parse_array+0x6e>
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	689a      	ldr	r2, [r3, #8]
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	429a      	cmp	r2, r3
 8010218:	d207      	bcs.n	801022a <parse_array+0x6e>
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	681a      	ldr	r2, [r3, #0]
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	689b      	ldr	r3, [r3, #8]
 8010222:	4413      	add	r3, r2
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	2b5d      	cmp	r3, #93	; 0x5d
 8010228:	d061      	beq.n	80102ee <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d005      	beq.n	801023c <parse_array+0x80>
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	689a      	ldr	r2, [r3, #8]
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	429a      	cmp	r2, r3
 801023a:	d305      	bcc.n	8010248 <parse_array+0x8c>
    {
        input_buffer->offset--;
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	1e5a      	subs	r2, r3, #1
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	609a      	str	r2, [r3, #8]
        goto fail;
 8010246:	e072      	b.n	801032e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	1e5a      	subs	r2, r3, #1
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	3310      	adds	r3, #16
 8010256:	4618      	mov	r0, r3
 8010258:	f7ff f9a4 	bl	800f5a4 <cJSON_New_Item>
 801025c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d05f      	beq.n	8010324 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d104      	bne.n	8010274 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	617b      	str	r3, [r7, #20]
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	613b      	str	r3, [r7, #16]
 8010272:	e007      	b.n	8010284 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	68fa      	ldr	r2, [r7, #12]
 8010278:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	693a      	ldr	r2, [r7, #16]
 801027e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	689b      	ldr	r3, [r3, #8]
 8010288:	1c5a      	adds	r2, r3, #1
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 801028e:	6838      	ldr	r0, [r7, #0]
 8010290:	f7ff fd70 	bl	800fd74 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8010294:	6839      	ldr	r1, [r7, #0]
 8010296:	6938      	ldr	r0, [r7, #16]
 8010298:	f7ff fea4 	bl	800ffe4 <parse_value>
 801029c:	4603      	mov	r3, r0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d042      	beq.n	8010328 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80102a2:	6838      	ldr	r0, [r7, #0]
 80102a4:	f7ff fd66 	bl	800fd74 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00d      	beq.n	80102ca <parse_array+0x10e>
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	689a      	ldr	r2, [r3, #8]
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d207      	bcs.n	80102ca <parse_array+0x10e>
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	681a      	ldr	r2, [r3, #0]
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	689b      	ldr	r3, [r3, #8]
 80102c2:	4413      	add	r3, r2
 80102c4:	781b      	ldrb	r3, [r3, #0]
 80102c6:	2b2c      	cmp	r3, #44	; 0x2c
 80102c8:	d0c3      	beq.n	8010252 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d02d      	beq.n	801032c <parse_array+0x170>
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	689a      	ldr	r2, [r3, #8]
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d227      	bcs.n	801032c <parse_array+0x170>
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	681a      	ldr	r2, [r3, #0]
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	4413      	add	r3, r2
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	2b5d      	cmp	r3, #93	; 0x5d
 80102ea:	d11f      	bne.n	801032c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80102ec:	e000      	b.n	80102f0 <parse_array+0x134>
        goto success;
 80102ee:	bf00      	nop
    input_buffer->depth--;
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	1e5a      	subs	r2, r3, #1
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d002      	beq.n	8010306 <parse_array+0x14a>
        head->prev = current_item;
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	693a      	ldr	r2, [r7, #16]
 8010304:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2220      	movs	r2, #32
 801030a:	60da      	str	r2, [r3, #12]
    item->child = head;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	697a      	ldr	r2, [r7, #20]
 8010310:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	689b      	ldr	r3, [r3, #8]
 8010316:	1c5a      	adds	r2, r3, #1
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	609a      	str	r2, [r3, #8]

    return true;
 801031c:	2301      	movs	r3, #1
 801031e:	e00d      	b.n	801033c <parse_array+0x180>
        goto fail;
 8010320:	bf00      	nop
 8010322:	e004      	b.n	801032e <parse_array+0x172>
            goto fail; /* allocation failure */
 8010324:	bf00      	nop
 8010326:	e002      	b.n	801032e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8010328:	bf00      	nop
 801032a:	e000      	b.n	801032e <parse_array+0x172>
        goto fail; /* expected end of array */
 801032c:	bf00      	nop

fail:
    if (head != NULL)
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d002      	beq.n	801033a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8010334:	6978      	ldr	r0, [r7, #20]
 8010336:	f7ff f94b 	bl	800f5d0 <cJSON_Delete>
    }

    return false;
 801033a:	2300      	movs	r3, #0
}
 801033c:	4618      	mov	r0, r3
 801033e:	3718      	adds	r7, #24
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b086      	sub	sp, #24
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 801034e:	2300      	movs	r3, #0
 8010350:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8010352:	2300      	movs	r3, #0
 8010354:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801035e:	d301      	bcc.n	8010364 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8010360:	2300      	movs	r3, #0
 8010362:	e0ea      	b.n	801053a <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	68db      	ldr	r3, [r3, #12]
 8010368:	1c5a      	adds	r2, r3, #1
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	f000 80d0 	beq.w	8010516 <parse_object+0x1d2>
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	689a      	ldr	r2, [r3, #8]
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	429a      	cmp	r2, r3
 8010380:	f080 80c9 	bcs.w	8010516 <parse_object+0x1d2>
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	689b      	ldr	r3, [r3, #8]
 801038c:	4413      	add	r3, r2
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	2b7b      	cmp	r3, #123	; 0x7b
 8010392:	f040 80c0 	bne.w	8010516 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	689b      	ldr	r3, [r3, #8]
 801039a:	1c5a      	adds	r2, r3, #1
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80103a0:	6838      	ldr	r0, [r7, #0]
 80103a2:	f7ff fce7 	bl	800fd74 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d00e      	beq.n	80103ca <parse_object+0x86>
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	689a      	ldr	r2, [r3, #8]
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	685b      	ldr	r3, [r3, #4]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d208      	bcs.n	80103ca <parse_object+0x86>
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	689b      	ldr	r3, [r3, #8]
 80103c0:	4413      	add	r3, r2
 80103c2:	781b      	ldrb	r3, [r3, #0]
 80103c4:	2b7d      	cmp	r3, #125	; 0x7d
 80103c6:	f000 808d 	beq.w	80104e4 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d005      	beq.n	80103dc <parse_object+0x98>
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	689a      	ldr	r2, [r3, #8]
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	429a      	cmp	r2, r3
 80103da:	d305      	bcc.n	80103e8 <parse_object+0xa4>
    {
        input_buffer->offset--;
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	689b      	ldr	r3, [r3, #8]
 80103e0:	1e5a      	subs	r2, r3, #1
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	609a      	str	r2, [r3, #8]
        goto fail;
 80103e6:	e0a1      	b.n	801052c <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	689b      	ldr	r3, [r3, #8]
 80103ec:	1e5a      	subs	r2, r3, #1
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	3310      	adds	r3, #16
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7ff f8d4 	bl	800f5a4 <cJSON_New_Item>
 80103fc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	f000 808a 	beq.w	801051a <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d104      	bne.n	8010416 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	617b      	str	r3, [r7, #20]
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	613b      	str	r3, [r7, #16]
 8010414:	e007      	b.n	8010426 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	693a      	ldr	r2, [r7, #16]
 8010420:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	689b      	ldr	r3, [r3, #8]
 801042a:	1c5a      	adds	r2, r3, #1
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8010430:	6838      	ldr	r0, [r7, #0]
 8010432:	f7ff fc9f 	bl	800fd74 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	6938      	ldr	r0, [r7, #16]
 801043a:	f7ff fb55 	bl	800fae8 <parse_string>
 801043e:	4603      	mov	r3, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	d06c      	beq.n	801051e <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8010444:	6838      	ldr	r0, [r7, #0]
 8010446:	f7ff fc95 	bl	800fd74 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	691a      	ldr	r2, [r3, #16]
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	2200      	movs	r2, #0
 8010456:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d061      	beq.n	8010522 <parse_object+0x1de>
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	689a      	ldr	r2, [r3, #8]
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	429a      	cmp	r2, r3
 8010468:	d25b      	bcs.n	8010522 <parse_object+0x1de>
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	689b      	ldr	r3, [r3, #8]
 8010472:	4413      	add	r3, r2
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	2b3a      	cmp	r3, #58	; 0x3a
 8010478:	d153      	bne.n	8010522 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	689b      	ldr	r3, [r3, #8]
 801047e:	1c5a      	adds	r2, r3, #1
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8010484:	6838      	ldr	r0, [r7, #0]
 8010486:	f7ff fc75 	bl	800fd74 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 801048a:	6839      	ldr	r1, [r7, #0]
 801048c:	6938      	ldr	r0, [r7, #16]
 801048e:	f7ff fda9 	bl	800ffe4 <parse_value>
 8010492:	4603      	mov	r3, r0
 8010494:	2b00      	cmp	r3, #0
 8010496:	d046      	beq.n	8010526 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8010498:	6838      	ldr	r0, [r7, #0]
 801049a:	f7ff fc6b 	bl	800fd74 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00d      	beq.n	80104c0 <parse_object+0x17c>
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	689a      	ldr	r2, [r3, #8]
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d207      	bcs.n	80104c0 <parse_object+0x17c>
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	689b      	ldr	r3, [r3, #8]
 80104b8:	4413      	add	r3, r2
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	2b2c      	cmp	r3, #44	; 0x2c
 80104be:	d098      	beq.n	80103f2 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d031      	beq.n	801052a <parse_object+0x1e6>
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	689a      	ldr	r2, [r3, #8]
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d22b      	bcs.n	801052a <parse_object+0x1e6>
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	4413      	add	r3, r2
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	2b7d      	cmp	r3, #125	; 0x7d
 80104e0:	d123      	bne.n	801052a <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 80104e2:	e000      	b.n	80104e6 <parse_object+0x1a2>
        goto success; /* empty object */
 80104e4:	bf00      	nop
    input_buffer->depth--;
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	68db      	ldr	r3, [r3, #12]
 80104ea:	1e5a      	subs	r2, r3, #1
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d002      	beq.n	80104fc <parse_object+0x1b8>
        head->prev = current_item;
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	693a      	ldr	r2, [r7, #16]
 80104fa:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2240      	movs	r2, #64	; 0x40
 8010500:	60da      	str	r2, [r3, #12]
    item->child = head;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	697a      	ldr	r2, [r7, #20]
 8010506:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	689b      	ldr	r3, [r3, #8]
 801050c:	1c5a      	adds	r2, r3, #1
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	609a      	str	r2, [r3, #8]
    return true;
 8010512:	2301      	movs	r3, #1
 8010514:	e011      	b.n	801053a <parse_object+0x1f6>
        goto fail; /* not an object */
 8010516:	bf00      	nop
 8010518:	e008      	b.n	801052c <parse_object+0x1e8>
            goto fail; /* allocation failure */
 801051a:	bf00      	nop
 801051c:	e006      	b.n	801052c <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 801051e:	bf00      	nop
 8010520:	e004      	b.n	801052c <parse_object+0x1e8>
            goto fail; /* invalid object */
 8010522:	bf00      	nop
 8010524:	e002      	b.n	801052c <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8010526:	bf00      	nop
 8010528:	e000      	b.n	801052c <parse_object+0x1e8>
        goto fail; /* expected end of object */
 801052a:	bf00      	nop

fail:
    if (head != NULL)
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d002      	beq.n	8010538 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8010532:	6978      	ldr	r0, [r7, #20]
 8010534:	f7ff f84c 	bl	800f5d0 <cJSON_Delete>
    }

    return false;
 8010538:	2300      	movs	r3, #0
}
 801053a:	4618      	mov	r0, r3
 801053c:	3718      	adds	r7, #24
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b086      	sub	sp, #24
 8010546:	af00      	add	r7, sp, #0
 8010548:	60f8      	str	r0, [r7, #12]
 801054a:	60b9      	str	r1, [r7, #8]
 801054c:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 801054e:	2300      	movs	r3, #0
 8010550:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d002      	beq.n	801055e <get_object_item+0x1c>
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d101      	bne.n	8010562 <get_object_item+0x20>
    {
        return NULL;
 801055e:	2300      	movs	r3, #0
 8010560:	e033      	b.n	80105ca <get_object_item+0x88>
    }

    current_element = object->child;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	689b      	ldr	r3, [r3, #8]
 8010566:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d017      	beq.n	801059e <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 801056e:	e002      	b.n	8010576 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d01c      	beq.n	80105b6 <get_object_item+0x74>
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	6a1b      	ldr	r3, [r3, #32]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d018      	beq.n	80105b6 <get_object_item+0x74>
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	6a1b      	ldr	r3, [r3, #32]
 8010588:	4619      	mov	r1, r3
 801058a:	68b8      	ldr	r0, [r7, #8]
 801058c:	f7ef fe28 	bl	80001e0 <strcmp>
 8010590:	4603      	mov	r3, r0
 8010592:	2b00      	cmp	r3, #0
 8010594:	d1ec      	bne.n	8010570 <get_object_item+0x2e>
 8010596:	e00e      	b.n	80105b6 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d008      	beq.n	80105b6 <get_object_item+0x74>
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	6a1b      	ldr	r3, [r3, #32]
 80105a8:	4619      	mov	r1, r3
 80105aa:	68b8      	ldr	r0, [r7, #8]
 80105ac:	f7fe ff8e 	bl	800f4cc <case_insensitive_strcmp>
 80105b0:	4603      	mov	r3, r0
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d1f0      	bne.n	8010598 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d003      	beq.n	80105c4 <get_object_item+0x82>
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	6a1b      	ldr	r3, [r3, #32]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d101      	bne.n	80105c8 <get_object_item+0x86>
        return NULL;
 80105c4:	2300      	movs	r3, #0
 80105c6:	e000      	b.n	80105ca <get_object_item+0x88>
    }

    return current_element;
 80105c8:	697b      	ldr	r3, [r7, #20]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3718      	adds	r7, #24
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b082      	sub	sp, #8
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
 80105da:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 80105dc:	2201      	movs	r2, #1
 80105de:	6839      	ldr	r1, [r7, #0]
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f7ff ffae 	bl	8010542 <get_object_item>
 80105e6:	4603      	mov	r3, r0
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3708      	adds	r7, #8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <__errno>:
 80105f0:	4b01      	ldr	r3, [pc, #4]	; (80105f8 <__errno+0x8>)
 80105f2:	6818      	ldr	r0, [r3, #0]
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	20000180 	.word	0x20000180

080105fc <__libc_init_array>:
 80105fc:	b570      	push	{r4, r5, r6, lr}
 80105fe:	4d0d      	ldr	r5, [pc, #52]	; (8010634 <__libc_init_array+0x38>)
 8010600:	4c0d      	ldr	r4, [pc, #52]	; (8010638 <__libc_init_array+0x3c>)
 8010602:	1b64      	subs	r4, r4, r5
 8010604:	10a4      	asrs	r4, r4, #2
 8010606:	2600      	movs	r6, #0
 8010608:	42a6      	cmp	r6, r4
 801060a:	d109      	bne.n	8010620 <__libc_init_array+0x24>
 801060c:	4d0b      	ldr	r5, [pc, #44]	; (801063c <__libc_init_array+0x40>)
 801060e:	4c0c      	ldr	r4, [pc, #48]	; (8010640 <__libc_init_array+0x44>)
 8010610:	f003 fa98 	bl	8013b44 <_init>
 8010614:	1b64      	subs	r4, r4, r5
 8010616:	10a4      	asrs	r4, r4, #2
 8010618:	2600      	movs	r6, #0
 801061a:	42a6      	cmp	r6, r4
 801061c:	d105      	bne.n	801062a <__libc_init_array+0x2e>
 801061e:	bd70      	pop	{r4, r5, r6, pc}
 8010620:	f855 3b04 	ldr.w	r3, [r5], #4
 8010624:	4798      	blx	r3
 8010626:	3601      	adds	r6, #1
 8010628:	e7ee      	b.n	8010608 <__libc_init_array+0xc>
 801062a:	f855 3b04 	ldr.w	r3, [r5], #4
 801062e:	4798      	blx	r3
 8010630:	3601      	adds	r6, #1
 8010632:	e7f2      	b.n	801061a <__libc_init_array+0x1e>
 8010634:	08015974 	.word	0x08015974
 8010638:	08015974 	.word	0x08015974
 801063c:	08015974 	.word	0x08015974
 8010640:	08015978 	.word	0x08015978

08010644 <malloc>:
 8010644:	4b02      	ldr	r3, [pc, #8]	; (8010650 <malloc+0xc>)
 8010646:	4601      	mov	r1, r0
 8010648:	6818      	ldr	r0, [r3, #0]
 801064a:	f000 b871 	b.w	8010730 <_malloc_r>
 801064e:	bf00      	nop
 8010650:	20000180 	.word	0x20000180

08010654 <free>:
 8010654:	4b02      	ldr	r3, [pc, #8]	; (8010660 <free+0xc>)
 8010656:	4601      	mov	r1, r0
 8010658:	6818      	ldr	r0, [r3, #0]
 801065a:	f000 b819 	b.w	8010690 <_free_r>
 801065e:	bf00      	nop
 8010660:	20000180 	.word	0x20000180

08010664 <memcpy>:
 8010664:	440a      	add	r2, r1
 8010666:	4291      	cmp	r1, r2
 8010668:	f100 33ff 	add.w	r3, r0, #4294967295
 801066c:	d100      	bne.n	8010670 <memcpy+0xc>
 801066e:	4770      	bx	lr
 8010670:	b510      	push	{r4, lr}
 8010672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010676:	f803 4f01 	strb.w	r4, [r3, #1]!
 801067a:	4291      	cmp	r1, r2
 801067c:	d1f9      	bne.n	8010672 <memcpy+0xe>
 801067e:	bd10      	pop	{r4, pc}

08010680 <memset>:
 8010680:	4402      	add	r2, r0
 8010682:	4603      	mov	r3, r0
 8010684:	4293      	cmp	r3, r2
 8010686:	d100      	bne.n	801068a <memset+0xa>
 8010688:	4770      	bx	lr
 801068a:	f803 1b01 	strb.w	r1, [r3], #1
 801068e:	e7f9      	b.n	8010684 <memset+0x4>

08010690 <_free_r>:
 8010690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010692:	2900      	cmp	r1, #0
 8010694:	d048      	beq.n	8010728 <_free_r+0x98>
 8010696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801069a:	9001      	str	r0, [sp, #4]
 801069c:	2b00      	cmp	r3, #0
 801069e:	f1a1 0404 	sub.w	r4, r1, #4
 80106a2:	bfb8      	it	lt
 80106a4:	18e4      	addlt	r4, r4, r3
 80106a6:	f002 f81d 	bl	80126e4 <__malloc_lock>
 80106aa:	4a20      	ldr	r2, [pc, #128]	; (801072c <_free_r+0x9c>)
 80106ac:	9801      	ldr	r0, [sp, #4]
 80106ae:	6813      	ldr	r3, [r2, #0]
 80106b0:	4615      	mov	r5, r2
 80106b2:	b933      	cbnz	r3, 80106c2 <_free_r+0x32>
 80106b4:	6063      	str	r3, [r4, #4]
 80106b6:	6014      	str	r4, [r2, #0]
 80106b8:	b003      	add	sp, #12
 80106ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106be:	f002 b817 	b.w	80126f0 <__malloc_unlock>
 80106c2:	42a3      	cmp	r3, r4
 80106c4:	d90b      	bls.n	80106de <_free_r+0x4e>
 80106c6:	6821      	ldr	r1, [r4, #0]
 80106c8:	1862      	adds	r2, r4, r1
 80106ca:	4293      	cmp	r3, r2
 80106cc:	bf04      	itt	eq
 80106ce:	681a      	ldreq	r2, [r3, #0]
 80106d0:	685b      	ldreq	r3, [r3, #4]
 80106d2:	6063      	str	r3, [r4, #4]
 80106d4:	bf04      	itt	eq
 80106d6:	1852      	addeq	r2, r2, r1
 80106d8:	6022      	streq	r2, [r4, #0]
 80106da:	602c      	str	r4, [r5, #0]
 80106dc:	e7ec      	b.n	80106b8 <_free_r+0x28>
 80106de:	461a      	mov	r2, r3
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	b10b      	cbz	r3, 80106e8 <_free_r+0x58>
 80106e4:	42a3      	cmp	r3, r4
 80106e6:	d9fa      	bls.n	80106de <_free_r+0x4e>
 80106e8:	6811      	ldr	r1, [r2, #0]
 80106ea:	1855      	adds	r5, r2, r1
 80106ec:	42a5      	cmp	r5, r4
 80106ee:	d10b      	bne.n	8010708 <_free_r+0x78>
 80106f0:	6824      	ldr	r4, [r4, #0]
 80106f2:	4421      	add	r1, r4
 80106f4:	1854      	adds	r4, r2, r1
 80106f6:	42a3      	cmp	r3, r4
 80106f8:	6011      	str	r1, [r2, #0]
 80106fa:	d1dd      	bne.n	80106b8 <_free_r+0x28>
 80106fc:	681c      	ldr	r4, [r3, #0]
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	6053      	str	r3, [r2, #4]
 8010702:	4421      	add	r1, r4
 8010704:	6011      	str	r1, [r2, #0]
 8010706:	e7d7      	b.n	80106b8 <_free_r+0x28>
 8010708:	d902      	bls.n	8010710 <_free_r+0x80>
 801070a:	230c      	movs	r3, #12
 801070c:	6003      	str	r3, [r0, #0]
 801070e:	e7d3      	b.n	80106b8 <_free_r+0x28>
 8010710:	6825      	ldr	r5, [r4, #0]
 8010712:	1961      	adds	r1, r4, r5
 8010714:	428b      	cmp	r3, r1
 8010716:	bf04      	itt	eq
 8010718:	6819      	ldreq	r1, [r3, #0]
 801071a:	685b      	ldreq	r3, [r3, #4]
 801071c:	6063      	str	r3, [r4, #4]
 801071e:	bf04      	itt	eq
 8010720:	1949      	addeq	r1, r1, r5
 8010722:	6021      	streq	r1, [r4, #0]
 8010724:	6054      	str	r4, [r2, #4]
 8010726:	e7c7      	b.n	80106b8 <_free_r+0x28>
 8010728:	b003      	add	sp, #12
 801072a:	bd30      	pop	{r4, r5, pc}
 801072c:	200025a4 	.word	0x200025a4

08010730 <_malloc_r>:
 8010730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010732:	1ccd      	adds	r5, r1, #3
 8010734:	f025 0503 	bic.w	r5, r5, #3
 8010738:	3508      	adds	r5, #8
 801073a:	2d0c      	cmp	r5, #12
 801073c:	bf38      	it	cc
 801073e:	250c      	movcc	r5, #12
 8010740:	2d00      	cmp	r5, #0
 8010742:	4606      	mov	r6, r0
 8010744:	db01      	blt.n	801074a <_malloc_r+0x1a>
 8010746:	42a9      	cmp	r1, r5
 8010748:	d903      	bls.n	8010752 <_malloc_r+0x22>
 801074a:	230c      	movs	r3, #12
 801074c:	6033      	str	r3, [r6, #0]
 801074e:	2000      	movs	r0, #0
 8010750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010752:	f001 ffc7 	bl	80126e4 <__malloc_lock>
 8010756:	4921      	ldr	r1, [pc, #132]	; (80107dc <_malloc_r+0xac>)
 8010758:	680a      	ldr	r2, [r1, #0]
 801075a:	4614      	mov	r4, r2
 801075c:	b99c      	cbnz	r4, 8010786 <_malloc_r+0x56>
 801075e:	4f20      	ldr	r7, [pc, #128]	; (80107e0 <_malloc_r+0xb0>)
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	b923      	cbnz	r3, 801076e <_malloc_r+0x3e>
 8010764:	4621      	mov	r1, r4
 8010766:	4630      	mov	r0, r6
 8010768:	f000 fa5c 	bl	8010c24 <_sbrk_r>
 801076c:	6038      	str	r0, [r7, #0]
 801076e:	4629      	mov	r1, r5
 8010770:	4630      	mov	r0, r6
 8010772:	f000 fa57 	bl	8010c24 <_sbrk_r>
 8010776:	1c43      	adds	r3, r0, #1
 8010778:	d123      	bne.n	80107c2 <_malloc_r+0x92>
 801077a:	230c      	movs	r3, #12
 801077c:	6033      	str	r3, [r6, #0]
 801077e:	4630      	mov	r0, r6
 8010780:	f001 ffb6 	bl	80126f0 <__malloc_unlock>
 8010784:	e7e3      	b.n	801074e <_malloc_r+0x1e>
 8010786:	6823      	ldr	r3, [r4, #0]
 8010788:	1b5b      	subs	r3, r3, r5
 801078a:	d417      	bmi.n	80107bc <_malloc_r+0x8c>
 801078c:	2b0b      	cmp	r3, #11
 801078e:	d903      	bls.n	8010798 <_malloc_r+0x68>
 8010790:	6023      	str	r3, [r4, #0]
 8010792:	441c      	add	r4, r3
 8010794:	6025      	str	r5, [r4, #0]
 8010796:	e004      	b.n	80107a2 <_malloc_r+0x72>
 8010798:	6863      	ldr	r3, [r4, #4]
 801079a:	42a2      	cmp	r2, r4
 801079c:	bf0c      	ite	eq
 801079e:	600b      	streq	r3, [r1, #0]
 80107a0:	6053      	strne	r3, [r2, #4]
 80107a2:	4630      	mov	r0, r6
 80107a4:	f001 ffa4 	bl	80126f0 <__malloc_unlock>
 80107a8:	f104 000b 	add.w	r0, r4, #11
 80107ac:	1d23      	adds	r3, r4, #4
 80107ae:	f020 0007 	bic.w	r0, r0, #7
 80107b2:	1ac2      	subs	r2, r0, r3
 80107b4:	d0cc      	beq.n	8010750 <_malloc_r+0x20>
 80107b6:	1a1b      	subs	r3, r3, r0
 80107b8:	50a3      	str	r3, [r4, r2]
 80107ba:	e7c9      	b.n	8010750 <_malloc_r+0x20>
 80107bc:	4622      	mov	r2, r4
 80107be:	6864      	ldr	r4, [r4, #4]
 80107c0:	e7cc      	b.n	801075c <_malloc_r+0x2c>
 80107c2:	1cc4      	adds	r4, r0, #3
 80107c4:	f024 0403 	bic.w	r4, r4, #3
 80107c8:	42a0      	cmp	r0, r4
 80107ca:	d0e3      	beq.n	8010794 <_malloc_r+0x64>
 80107cc:	1a21      	subs	r1, r4, r0
 80107ce:	4630      	mov	r0, r6
 80107d0:	f000 fa28 	bl	8010c24 <_sbrk_r>
 80107d4:	3001      	adds	r0, #1
 80107d6:	d1dd      	bne.n	8010794 <_malloc_r+0x64>
 80107d8:	e7cf      	b.n	801077a <_malloc_r+0x4a>
 80107da:	bf00      	nop
 80107dc:	200025a4 	.word	0x200025a4
 80107e0:	200025a8 	.word	0x200025a8

080107e4 <iprintf>:
 80107e4:	b40f      	push	{r0, r1, r2, r3}
 80107e6:	4b0a      	ldr	r3, [pc, #40]	; (8010810 <iprintf+0x2c>)
 80107e8:	b513      	push	{r0, r1, r4, lr}
 80107ea:	681c      	ldr	r4, [r3, #0]
 80107ec:	b124      	cbz	r4, 80107f8 <iprintf+0x14>
 80107ee:	69a3      	ldr	r3, [r4, #24]
 80107f0:	b913      	cbnz	r3, 80107f8 <iprintf+0x14>
 80107f2:	4620      	mov	r0, r4
 80107f4:	f001 fade 	bl	8011db4 <__sinit>
 80107f8:	ab05      	add	r3, sp, #20
 80107fa:	9a04      	ldr	r2, [sp, #16]
 80107fc:	68a1      	ldr	r1, [r4, #8]
 80107fe:	9301      	str	r3, [sp, #4]
 8010800:	4620      	mov	r0, r4
 8010802:	f002 fdf1 	bl	80133e8 <_vfiprintf_r>
 8010806:	b002      	add	sp, #8
 8010808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801080c:	b004      	add	sp, #16
 801080e:	4770      	bx	lr
 8010810:	20000180 	.word	0x20000180

08010814 <_puts_r>:
 8010814:	b570      	push	{r4, r5, r6, lr}
 8010816:	460e      	mov	r6, r1
 8010818:	4605      	mov	r5, r0
 801081a:	b118      	cbz	r0, 8010824 <_puts_r+0x10>
 801081c:	6983      	ldr	r3, [r0, #24]
 801081e:	b90b      	cbnz	r3, 8010824 <_puts_r+0x10>
 8010820:	f001 fac8 	bl	8011db4 <__sinit>
 8010824:	69ab      	ldr	r3, [r5, #24]
 8010826:	68ac      	ldr	r4, [r5, #8]
 8010828:	b913      	cbnz	r3, 8010830 <_puts_r+0x1c>
 801082a:	4628      	mov	r0, r5
 801082c:	f001 fac2 	bl	8011db4 <__sinit>
 8010830:	4b2c      	ldr	r3, [pc, #176]	; (80108e4 <_puts_r+0xd0>)
 8010832:	429c      	cmp	r4, r3
 8010834:	d120      	bne.n	8010878 <_puts_r+0x64>
 8010836:	686c      	ldr	r4, [r5, #4]
 8010838:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801083a:	07db      	lsls	r3, r3, #31
 801083c:	d405      	bmi.n	801084a <_puts_r+0x36>
 801083e:	89a3      	ldrh	r3, [r4, #12]
 8010840:	0598      	lsls	r0, r3, #22
 8010842:	d402      	bmi.n	801084a <_puts_r+0x36>
 8010844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010846:	f001 fec2 	bl	80125ce <__retarget_lock_acquire_recursive>
 801084a:	89a3      	ldrh	r3, [r4, #12]
 801084c:	0719      	lsls	r1, r3, #28
 801084e:	d51d      	bpl.n	801088c <_puts_r+0x78>
 8010850:	6923      	ldr	r3, [r4, #16]
 8010852:	b1db      	cbz	r3, 801088c <_puts_r+0x78>
 8010854:	3e01      	subs	r6, #1
 8010856:	68a3      	ldr	r3, [r4, #8]
 8010858:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801085c:	3b01      	subs	r3, #1
 801085e:	60a3      	str	r3, [r4, #8]
 8010860:	bb39      	cbnz	r1, 80108b2 <_puts_r+0x9e>
 8010862:	2b00      	cmp	r3, #0
 8010864:	da38      	bge.n	80108d8 <_puts_r+0xc4>
 8010866:	4622      	mov	r2, r4
 8010868:	210a      	movs	r1, #10
 801086a:	4628      	mov	r0, r5
 801086c:	f001 f8a6 	bl	80119bc <__swbuf_r>
 8010870:	3001      	adds	r0, #1
 8010872:	d011      	beq.n	8010898 <_puts_r+0x84>
 8010874:	250a      	movs	r5, #10
 8010876:	e011      	b.n	801089c <_puts_r+0x88>
 8010878:	4b1b      	ldr	r3, [pc, #108]	; (80108e8 <_puts_r+0xd4>)
 801087a:	429c      	cmp	r4, r3
 801087c:	d101      	bne.n	8010882 <_puts_r+0x6e>
 801087e:	68ac      	ldr	r4, [r5, #8]
 8010880:	e7da      	b.n	8010838 <_puts_r+0x24>
 8010882:	4b1a      	ldr	r3, [pc, #104]	; (80108ec <_puts_r+0xd8>)
 8010884:	429c      	cmp	r4, r3
 8010886:	bf08      	it	eq
 8010888:	68ec      	ldreq	r4, [r5, #12]
 801088a:	e7d5      	b.n	8010838 <_puts_r+0x24>
 801088c:	4621      	mov	r1, r4
 801088e:	4628      	mov	r0, r5
 8010890:	f001 f8f8 	bl	8011a84 <__swsetup_r>
 8010894:	2800      	cmp	r0, #0
 8010896:	d0dd      	beq.n	8010854 <_puts_r+0x40>
 8010898:	f04f 35ff 	mov.w	r5, #4294967295
 801089c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801089e:	07da      	lsls	r2, r3, #31
 80108a0:	d405      	bmi.n	80108ae <_puts_r+0x9a>
 80108a2:	89a3      	ldrh	r3, [r4, #12]
 80108a4:	059b      	lsls	r3, r3, #22
 80108a6:	d402      	bmi.n	80108ae <_puts_r+0x9a>
 80108a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108aa:	f001 fe91 	bl	80125d0 <__retarget_lock_release_recursive>
 80108ae:	4628      	mov	r0, r5
 80108b0:	bd70      	pop	{r4, r5, r6, pc}
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	da04      	bge.n	80108c0 <_puts_r+0xac>
 80108b6:	69a2      	ldr	r2, [r4, #24]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	dc06      	bgt.n	80108ca <_puts_r+0xb6>
 80108bc:	290a      	cmp	r1, #10
 80108be:	d004      	beq.n	80108ca <_puts_r+0xb6>
 80108c0:	6823      	ldr	r3, [r4, #0]
 80108c2:	1c5a      	adds	r2, r3, #1
 80108c4:	6022      	str	r2, [r4, #0]
 80108c6:	7019      	strb	r1, [r3, #0]
 80108c8:	e7c5      	b.n	8010856 <_puts_r+0x42>
 80108ca:	4622      	mov	r2, r4
 80108cc:	4628      	mov	r0, r5
 80108ce:	f001 f875 	bl	80119bc <__swbuf_r>
 80108d2:	3001      	adds	r0, #1
 80108d4:	d1bf      	bne.n	8010856 <_puts_r+0x42>
 80108d6:	e7df      	b.n	8010898 <_puts_r+0x84>
 80108d8:	6823      	ldr	r3, [r4, #0]
 80108da:	250a      	movs	r5, #10
 80108dc:	1c5a      	adds	r2, r3, #1
 80108de:	6022      	str	r2, [r4, #0]
 80108e0:	701d      	strb	r5, [r3, #0]
 80108e2:	e7db      	b.n	801089c <_puts_r+0x88>
 80108e4:	080156b8 	.word	0x080156b8
 80108e8:	080156d8 	.word	0x080156d8
 80108ec:	08015698 	.word	0x08015698

080108f0 <puts>:
 80108f0:	4b02      	ldr	r3, [pc, #8]	; (80108fc <puts+0xc>)
 80108f2:	4601      	mov	r1, r0
 80108f4:	6818      	ldr	r0, [r3, #0]
 80108f6:	f7ff bf8d 	b.w	8010814 <_puts_r>
 80108fa:	bf00      	nop
 80108fc:	20000180 	.word	0x20000180

08010900 <swapfunc>:
 8010900:	2b02      	cmp	r3, #2
 8010902:	b510      	push	{r4, lr}
 8010904:	d00a      	beq.n	801091c <swapfunc+0x1c>
 8010906:	0892      	lsrs	r2, r2, #2
 8010908:	3a01      	subs	r2, #1
 801090a:	6803      	ldr	r3, [r0, #0]
 801090c:	680c      	ldr	r4, [r1, #0]
 801090e:	f840 4b04 	str.w	r4, [r0], #4
 8010912:	2a00      	cmp	r2, #0
 8010914:	f841 3b04 	str.w	r3, [r1], #4
 8010918:	dcf6      	bgt.n	8010908 <swapfunc+0x8>
 801091a:	bd10      	pop	{r4, pc}
 801091c:	4402      	add	r2, r0
 801091e:	780c      	ldrb	r4, [r1, #0]
 8010920:	7803      	ldrb	r3, [r0, #0]
 8010922:	f800 4b01 	strb.w	r4, [r0], #1
 8010926:	f801 3b01 	strb.w	r3, [r1], #1
 801092a:	1a13      	subs	r3, r2, r0
 801092c:	2b00      	cmp	r3, #0
 801092e:	dcf6      	bgt.n	801091e <swapfunc+0x1e>
 8010930:	e7f3      	b.n	801091a <swapfunc+0x1a>

08010932 <med3.isra.0>:
 8010932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010934:	460f      	mov	r7, r1
 8010936:	4614      	mov	r4, r2
 8010938:	4606      	mov	r6, r0
 801093a:	461d      	mov	r5, r3
 801093c:	4798      	blx	r3
 801093e:	2800      	cmp	r0, #0
 8010940:	4621      	mov	r1, r4
 8010942:	4638      	mov	r0, r7
 8010944:	da0c      	bge.n	8010960 <med3.isra.0+0x2e>
 8010946:	47a8      	blx	r5
 8010948:	2800      	cmp	r0, #0
 801094a:	da02      	bge.n	8010952 <med3.isra.0+0x20>
 801094c:	463c      	mov	r4, r7
 801094e:	4620      	mov	r0, r4
 8010950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010952:	4621      	mov	r1, r4
 8010954:	4630      	mov	r0, r6
 8010956:	47a8      	blx	r5
 8010958:	2800      	cmp	r0, #0
 801095a:	dbf8      	blt.n	801094e <med3.isra.0+0x1c>
 801095c:	4634      	mov	r4, r6
 801095e:	e7f6      	b.n	801094e <med3.isra.0+0x1c>
 8010960:	47a8      	blx	r5
 8010962:	2800      	cmp	r0, #0
 8010964:	dcf2      	bgt.n	801094c <med3.isra.0+0x1a>
 8010966:	4621      	mov	r1, r4
 8010968:	4630      	mov	r0, r6
 801096a:	47a8      	blx	r5
 801096c:	2800      	cmp	r0, #0
 801096e:	daee      	bge.n	801094e <med3.isra.0+0x1c>
 8010970:	e7f4      	b.n	801095c <med3.isra.0+0x2a>

08010972 <qsort>:
 8010972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010976:	469a      	mov	sl, r3
 8010978:	ea40 0302 	orr.w	r3, r0, r2
 801097c:	079b      	lsls	r3, r3, #30
 801097e:	b097      	sub	sp, #92	; 0x5c
 8010980:	4606      	mov	r6, r0
 8010982:	4614      	mov	r4, r2
 8010984:	d11a      	bne.n	80109bc <qsort+0x4a>
 8010986:	f1b2 0804 	subs.w	r8, r2, #4
 801098a:	bf18      	it	ne
 801098c:	f04f 0801 	movne.w	r8, #1
 8010990:	2300      	movs	r3, #0
 8010992:	9302      	str	r3, [sp, #8]
 8010994:	1933      	adds	r3, r6, r4
 8010996:	fb04 f701 	mul.w	r7, r4, r1
 801099a:	9301      	str	r3, [sp, #4]
 801099c:	2906      	cmp	r1, #6
 801099e:	eb06 0307 	add.w	r3, r6, r7
 80109a2:	9303      	str	r3, [sp, #12]
 80109a4:	d82a      	bhi.n	80109fc <qsort+0x8a>
 80109a6:	9b01      	ldr	r3, [sp, #4]
 80109a8:	9a03      	ldr	r2, [sp, #12]
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d310      	bcc.n	80109d0 <qsort+0x5e>
 80109ae:	9b02      	ldr	r3, [sp, #8]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f040 811f 	bne.w	8010bf4 <qsort+0x282>
 80109b6:	b017      	add	sp, #92	; 0x5c
 80109b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109bc:	f04f 0802 	mov.w	r8, #2
 80109c0:	e7e6      	b.n	8010990 <qsort+0x1e>
 80109c2:	4643      	mov	r3, r8
 80109c4:	4622      	mov	r2, r4
 80109c6:	4639      	mov	r1, r7
 80109c8:	4628      	mov	r0, r5
 80109ca:	f7ff ff99 	bl	8010900 <swapfunc>
 80109ce:	e00e      	b.n	80109ee <qsort+0x7c>
 80109d0:	9d01      	ldr	r5, [sp, #4]
 80109d2:	e00d      	b.n	80109f0 <qsort+0x7e>
 80109d4:	1b2f      	subs	r7, r5, r4
 80109d6:	4629      	mov	r1, r5
 80109d8:	4638      	mov	r0, r7
 80109da:	47d0      	blx	sl
 80109dc:	2800      	cmp	r0, #0
 80109de:	dd09      	ble.n	80109f4 <qsort+0x82>
 80109e0:	f1b8 0f00 	cmp.w	r8, #0
 80109e4:	d1ed      	bne.n	80109c2 <qsort+0x50>
 80109e6:	682b      	ldr	r3, [r5, #0]
 80109e8:	683a      	ldr	r2, [r7, #0]
 80109ea:	602a      	str	r2, [r5, #0]
 80109ec:	603b      	str	r3, [r7, #0]
 80109ee:	463d      	mov	r5, r7
 80109f0:	42ae      	cmp	r6, r5
 80109f2:	d3ef      	bcc.n	80109d4 <qsort+0x62>
 80109f4:	9b01      	ldr	r3, [sp, #4]
 80109f6:	4423      	add	r3, r4
 80109f8:	9301      	str	r3, [sp, #4]
 80109fa:	e7d4      	b.n	80109a6 <qsort+0x34>
 80109fc:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8010a00:	1b3f      	subs	r7, r7, r4
 8010a02:	2907      	cmp	r1, #7
 8010a04:	fb04 6909 	mla	r9, r4, r9, r6
 8010a08:	4437      	add	r7, r6
 8010a0a:	d022      	beq.n	8010a52 <qsort+0xe0>
 8010a0c:	2928      	cmp	r1, #40	; 0x28
 8010a0e:	d945      	bls.n	8010a9c <qsort+0x12a>
 8010a10:	08c9      	lsrs	r1, r1, #3
 8010a12:	fb04 f501 	mul.w	r5, r4, r1
 8010a16:	4653      	mov	r3, sl
 8010a18:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8010a1c:	1971      	adds	r1, r6, r5
 8010a1e:	4630      	mov	r0, r6
 8010a20:	f7ff ff87 	bl	8010932 <med3.isra.0>
 8010a24:	4649      	mov	r1, r9
 8010a26:	eb09 0205 	add.w	r2, r9, r5
 8010a2a:	4653      	mov	r3, sl
 8010a2c:	4683      	mov	fp, r0
 8010a2e:	1b48      	subs	r0, r1, r5
 8010a30:	f7ff ff7f 	bl	8010932 <med3.isra.0>
 8010a34:	463a      	mov	r2, r7
 8010a36:	4681      	mov	r9, r0
 8010a38:	4653      	mov	r3, sl
 8010a3a:	1b79      	subs	r1, r7, r5
 8010a3c:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8010a40:	f7ff ff77 	bl	8010932 <med3.isra.0>
 8010a44:	4602      	mov	r2, r0
 8010a46:	4649      	mov	r1, r9
 8010a48:	4653      	mov	r3, sl
 8010a4a:	4658      	mov	r0, fp
 8010a4c:	f7ff ff71 	bl	8010932 <med3.isra.0>
 8010a50:	4681      	mov	r9, r0
 8010a52:	f1b8 0f00 	cmp.w	r8, #0
 8010a56:	d124      	bne.n	8010aa2 <qsort+0x130>
 8010a58:	6833      	ldr	r3, [r6, #0]
 8010a5a:	f8d9 2000 	ldr.w	r2, [r9]
 8010a5e:	6032      	str	r2, [r6, #0]
 8010a60:	f8c9 3000 	str.w	r3, [r9]
 8010a64:	eb06 0b04 	add.w	fp, r6, r4
 8010a68:	46b9      	mov	r9, r7
 8010a6a:	465d      	mov	r5, fp
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	45bb      	cmp	fp, r7
 8010a70:	d835      	bhi.n	8010ade <qsort+0x16c>
 8010a72:	4631      	mov	r1, r6
 8010a74:	4658      	mov	r0, fp
 8010a76:	9304      	str	r3, [sp, #16]
 8010a78:	47d0      	blx	sl
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	9b04      	ldr	r3, [sp, #16]
 8010a7e:	dc3e      	bgt.n	8010afe <qsort+0x18c>
 8010a80:	d10a      	bne.n	8010a98 <qsort+0x126>
 8010a82:	f1b8 0f00 	cmp.w	r8, #0
 8010a86:	d113      	bne.n	8010ab0 <qsort+0x13e>
 8010a88:	682b      	ldr	r3, [r5, #0]
 8010a8a:	f8db 2000 	ldr.w	r2, [fp]
 8010a8e:	602a      	str	r2, [r5, #0]
 8010a90:	f8cb 3000 	str.w	r3, [fp]
 8010a94:	4425      	add	r5, r4
 8010a96:	2301      	movs	r3, #1
 8010a98:	44a3      	add	fp, r4
 8010a9a:	e7e8      	b.n	8010a6e <qsort+0xfc>
 8010a9c:	463a      	mov	r2, r7
 8010a9e:	46b3      	mov	fp, r6
 8010aa0:	e7d1      	b.n	8010a46 <qsort+0xd4>
 8010aa2:	4643      	mov	r3, r8
 8010aa4:	4622      	mov	r2, r4
 8010aa6:	4649      	mov	r1, r9
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	f7ff ff29 	bl	8010900 <swapfunc>
 8010aae:	e7d9      	b.n	8010a64 <qsort+0xf2>
 8010ab0:	4643      	mov	r3, r8
 8010ab2:	4622      	mov	r2, r4
 8010ab4:	4659      	mov	r1, fp
 8010ab6:	4628      	mov	r0, r5
 8010ab8:	f7ff ff22 	bl	8010900 <swapfunc>
 8010abc:	e7ea      	b.n	8010a94 <qsort+0x122>
 8010abe:	d10b      	bne.n	8010ad8 <qsort+0x166>
 8010ac0:	f1b8 0f00 	cmp.w	r8, #0
 8010ac4:	d114      	bne.n	8010af0 <qsort+0x17e>
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	f8d9 2000 	ldr.w	r2, [r9]
 8010acc:	603a      	str	r2, [r7, #0]
 8010ace:	f8c9 3000 	str.w	r3, [r9]
 8010ad2:	eba9 0904 	sub.w	r9, r9, r4
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	9f04      	ldr	r7, [sp, #16]
 8010ada:	45bb      	cmp	fp, r7
 8010adc:	d90f      	bls.n	8010afe <qsort+0x18c>
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d143      	bne.n	8010b6a <qsort+0x1f8>
 8010ae2:	9b01      	ldr	r3, [sp, #4]
 8010ae4:	9a03      	ldr	r2, [sp, #12]
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	f4bf af61 	bcs.w	80109ae <qsort+0x3c>
 8010aec:	9d01      	ldr	r5, [sp, #4]
 8010aee:	e036      	b.n	8010b5e <qsort+0x1ec>
 8010af0:	4643      	mov	r3, r8
 8010af2:	4622      	mov	r2, r4
 8010af4:	4649      	mov	r1, r9
 8010af6:	4638      	mov	r0, r7
 8010af8:	f7ff ff02 	bl	8010900 <swapfunc>
 8010afc:	e7e9      	b.n	8010ad2 <qsort+0x160>
 8010afe:	4631      	mov	r1, r6
 8010b00:	4638      	mov	r0, r7
 8010b02:	9305      	str	r3, [sp, #20]
 8010b04:	47d0      	blx	sl
 8010b06:	1b3b      	subs	r3, r7, r4
 8010b08:	2800      	cmp	r0, #0
 8010b0a:	9304      	str	r3, [sp, #16]
 8010b0c:	9b05      	ldr	r3, [sp, #20]
 8010b0e:	dad6      	bge.n	8010abe <qsort+0x14c>
 8010b10:	f1b8 0f00 	cmp.w	r8, #0
 8010b14:	d006      	beq.n	8010b24 <qsort+0x1b2>
 8010b16:	4643      	mov	r3, r8
 8010b18:	4622      	mov	r2, r4
 8010b1a:	4639      	mov	r1, r7
 8010b1c:	4658      	mov	r0, fp
 8010b1e:	f7ff feef 	bl	8010900 <swapfunc>
 8010b22:	e005      	b.n	8010b30 <qsort+0x1be>
 8010b24:	f8db 3000 	ldr.w	r3, [fp]
 8010b28:	683a      	ldr	r2, [r7, #0]
 8010b2a:	f8cb 2000 	str.w	r2, [fp]
 8010b2e:	603b      	str	r3, [r7, #0]
 8010b30:	9f04      	ldr	r7, [sp, #16]
 8010b32:	e7b0      	b.n	8010a96 <qsort+0x124>
 8010b34:	4643      	mov	r3, r8
 8010b36:	4622      	mov	r2, r4
 8010b38:	4639      	mov	r1, r7
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	f7ff fee0 	bl	8010900 <swapfunc>
 8010b40:	e00c      	b.n	8010b5c <qsort+0x1ea>
 8010b42:	1b2f      	subs	r7, r5, r4
 8010b44:	4629      	mov	r1, r5
 8010b46:	4638      	mov	r0, r7
 8010b48:	47d0      	blx	sl
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	dd09      	ble.n	8010b62 <qsort+0x1f0>
 8010b4e:	f1b8 0f00 	cmp.w	r8, #0
 8010b52:	d1ef      	bne.n	8010b34 <qsort+0x1c2>
 8010b54:	682b      	ldr	r3, [r5, #0]
 8010b56:	683a      	ldr	r2, [r7, #0]
 8010b58:	602a      	str	r2, [r5, #0]
 8010b5a:	603b      	str	r3, [r7, #0]
 8010b5c:	463d      	mov	r5, r7
 8010b5e:	42ae      	cmp	r6, r5
 8010b60:	d3ef      	bcc.n	8010b42 <qsort+0x1d0>
 8010b62:	9b01      	ldr	r3, [sp, #4]
 8010b64:	4423      	add	r3, r4
 8010b66:	9301      	str	r3, [sp, #4]
 8010b68:	e7bb      	b.n	8010ae2 <qsort+0x170>
 8010b6a:	ebab 0305 	sub.w	r3, fp, r5
 8010b6e:	1baa      	subs	r2, r5, r6
 8010b70:	429a      	cmp	r2, r3
 8010b72:	bfa8      	it	ge
 8010b74:	461a      	movge	r2, r3
 8010b76:	9301      	str	r3, [sp, #4]
 8010b78:	b12a      	cbz	r2, 8010b86 <qsort+0x214>
 8010b7a:	4643      	mov	r3, r8
 8010b7c:	ebab 0102 	sub.w	r1, fp, r2
 8010b80:	4630      	mov	r0, r6
 8010b82:	f7ff febd 	bl	8010900 <swapfunc>
 8010b86:	9b03      	ldr	r3, [sp, #12]
 8010b88:	eba3 0209 	sub.w	r2, r3, r9
 8010b8c:	eba9 0707 	sub.w	r7, r9, r7
 8010b90:	1b12      	subs	r2, r2, r4
 8010b92:	42ba      	cmp	r2, r7
 8010b94:	bf28      	it	cs
 8010b96:	463a      	movcs	r2, r7
 8010b98:	b12a      	cbz	r2, 8010ba6 <qsort+0x234>
 8010b9a:	9903      	ldr	r1, [sp, #12]
 8010b9c:	4643      	mov	r3, r8
 8010b9e:	1a89      	subs	r1, r1, r2
 8010ba0:	4658      	mov	r0, fp
 8010ba2:	f7ff fead 	bl	8010900 <swapfunc>
 8010ba6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010baa:	9b03      	ldr	r3, [sp, #12]
 8010bac:	454f      	cmp	r7, r9
 8010bae:	eba3 0007 	sub.w	r0, r3, r7
 8010bb2:	d904      	bls.n	8010bbe <qsort+0x24c>
 8010bb4:	4633      	mov	r3, r6
 8010bb6:	46b9      	mov	r9, r7
 8010bb8:	9f01      	ldr	r7, [sp, #4]
 8010bba:	4606      	mov	r6, r0
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	42a7      	cmp	r7, r4
 8010bc0:	d921      	bls.n	8010c06 <qsort+0x294>
 8010bc2:	fbb7 f1f4 	udiv	r1, r7, r4
 8010bc6:	9b02      	ldr	r3, [sp, #8]
 8010bc8:	2b07      	cmp	r3, #7
 8010bca:	d80d      	bhi.n	8010be8 <qsort+0x276>
 8010bcc:	fbb9 f7f4 	udiv	r7, r9, r4
 8010bd0:	aa16      	add	r2, sp, #88	; 0x58
 8010bd2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010bd6:	f843 6c40 	str.w	r6, [r3, #-64]
 8010bda:	f843 7c3c 	str.w	r7, [r3, #-60]
 8010bde:	9b02      	ldr	r3, [sp, #8]
 8010be0:	3301      	adds	r3, #1
 8010be2:	9302      	str	r3, [sp, #8]
 8010be4:	4606      	mov	r6, r0
 8010be6:	e6d5      	b.n	8010994 <qsort+0x22>
 8010be8:	4653      	mov	r3, sl
 8010bea:	4622      	mov	r2, r4
 8010bec:	f7ff fec1 	bl	8010972 <qsort>
 8010bf0:	45a1      	cmp	r9, r4
 8010bf2:	d80b      	bhi.n	8010c0c <qsort+0x29a>
 8010bf4:	9b02      	ldr	r3, [sp, #8]
 8010bf6:	aa16      	add	r2, sp, #88	; 0x58
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	9302      	str	r3, [sp, #8]
 8010bfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c00:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8010c04:	e7ee      	b.n	8010be4 <qsort+0x272>
 8010c06:	45a1      	cmp	r9, r4
 8010c08:	f67f aed1 	bls.w	80109ae <qsort+0x3c>
 8010c0c:	fbb9 f1f4 	udiv	r1, r9, r4
 8010c10:	4630      	mov	r0, r6
 8010c12:	e7e7      	b.n	8010be4 <qsort+0x272>

08010c14 <realloc>:
 8010c14:	4b02      	ldr	r3, [pc, #8]	; (8010c20 <realloc+0xc>)
 8010c16:	460a      	mov	r2, r1
 8010c18:	4601      	mov	r1, r0
 8010c1a:	6818      	ldr	r0, [r3, #0]
 8010c1c:	f002 ba38 	b.w	8013090 <_realloc_r>
 8010c20:	20000180 	.word	0x20000180

08010c24 <_sbrk_r>:
 8010c24:	b538      	push	{r3, r4, r5, lr}
 8010c26:	4d06      	ldr	r5, [pc, #24]	; (8010c40 <_sbrk_r+0x1c>)
 8010c28:	2300      	movs	r3, #0
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	4608      	mov	r0, r1
 8010c2e:	602b      	str	r3, [r5, #0]
 8010c30:	f7f2 f9f8 	bl	8003024 <_sbrk>
 8010c34:	1c43      	adds	r3, r0, #1
 8010c36:	d102      	bne.n	8010c3e <_sbrk_r+0x1a>
 8010c38:	682b      	ldr	r3, [r5, #0]
 8010c3a:	b103      	cbz	r3, 8010c3e <_sbrk_r+0x1a>
 8010c3c:	6023      	str	r3, [r4, #0]
 8010c3e:	bd38      	pop	{r3, r4, r5, pc}
 8010c40:	200038fc 	.word	0x200038fc

08010c44 <sniprintf>:
 8010c44:	b40c      	push	{r2, r3}
 8010c46:	b530      	push	{r4, r5, lr}
 8010c48:	4b17      	ldr	r3, [pc, #92]	; (8010ca8 <sniprintf+0x64>)
 8010c4a:	1e0c      	subs	r4, r1, #0
 8010c4c:	681d      	ldr	r5, [r3, #0]
 8010c4e:	b09d      	sub	sp, #116	; 0x74
 8010c50:	da08      	bge.n	8010c64 <sniprintf+0x20>
 8010c52:	238b      	movs	r3, #139	; 0x8b
 8010c54:	602b      	str	r3, [r5, #0]
 8010c56:	f04f 30ff 	mov.w	r0, #4294967295
 8010c5a:	b01d      	add	sp, #116	; 0x74
 8010c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c60:	b002      	add	sp, #8
 8010c62:	4770      	bx	lr
 8010c64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010c68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010c6c:	bf14      	ite	ne
 8010c6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010c72:	4623      	moveq	r3, r4
 8010c74:	9304      	str	r3, [sp, #16]
 8010c76:	9307      	str	r3, [sp, #28]
 8010c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c7c:	9002      	str	r0, [sp, #8]
 8010c7e:	9006      	str	r0, [sp, #24]
 8010c80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010c84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010c86:	ab21      	add	r3, sp, #132	; 0x84
 8010c88:	a902      	add	r1, sp, #8
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	9301      	str	r3, [sp, #4]
 8010c8e:	f002 fa81 	bl	8013194 <_svfiprintf_r>
 8010c92:	1c43      	adds	r3, r0, #1
 8010c94:	bfbc      	itt	lt
 8010c96:	238b      	movlt	r3, #139	; 0x8b
 8010c98:	602b      	strlt	r3, [r5, #0]
 8010c9a:	2c00      	cmp	r4, #0
 8010c9c:	d0dd      	beq.n	8010c5a <sniprintf+0x16>
 8010c9e:	9b02      	ldr	r3, [sp, #8]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	701a      	strb	r2, [r3, #0]
 8010ca4:	e7d9      	b.n	8010c5a <sniprintf+0x16>
 8010ca6:	bf00      	nop
 8010ca8:	20000180 	.word	0x20000180

08010cac <__sread>:
 8010cac:	b510      	push	{r4, lr}
 8010cae:	460c      	mov	r4, r1
 8010cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cb4:	f002 fe5c 	bl	8013970 <_read_r>
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	bfab      	itete	ge
 8010cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8010cc0:	181b      	addge	r3, r3, r0
 8010cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010cc6:	bfac      	ite	ge
 8010cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8010cca:	81a3      	strhlt	r3, [r4, #12]
 8010ccc:	bd10      	pop	{r4, pc}

08010cce <__swrite>:
 8010cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cd2:	461f      	mov	r7, r3
 8010cd4:	898b      	ldrh	r3, [r1, #12]
 8010cd6:	05db      	lsls	r3, r3, #23
 8010cd8:	4605      	mov	r5, r0
 8010cda:	460c      	mov	r4, r1
 8010cdc:	4616      	mov	r6, r2
 8010cde:	d505      	bpl.n	8010cec <__swrite+0x1e>
 8010ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ce4:	2302      	movs	r3, #2
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	f001 fc74 	bl	80125d4 <_lseek_r>
 8010cec:	89a3      	ldrh	r3, [r4, #12]
 8010cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010cf6:	81a3      	strh	r3, [r4, #12]
 8010cf8:	4632      	mov	r2, r6
 8010cfa:	463b      	mov	r3, r7
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d02:	f000 bead 	b.w	8011a60 <_write_r>

08010d06 <__sseek>:
 8010d06:	b510      	push	{r4, lr}
 8010d08:	460c      	mov	r4, r1
 8010d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d0e:	f001 fc61 	bl	80125d4 <_lseek_r>
 8010d12:	1c43      	adds	r3, r0, #1
 8010d14:	89a3      	ldrh	r3, [r4, #12]
 8010d16:	bf15      	itete	ne
 8010d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8010d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010d22:	81a3      	strheq	r3, [r4, #12]
 8010d24:	bf18      	it	ne
 8010d26:	81a3      	strhne	r3, [r4, #12]
 8010d28:	bd10      	pop	{r4, pc}

08010d2a <__sclose>:
 8010d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d2e:	f000 bf17 	b.w	8011b60 <_close_r>

08010d32 <strncmp>:
 8010d32:	b510      	push	{r4, lr}
 8010d34:	b16a      	cbz	r2, 8010d52 <strncmp+0x20>
 8010d36:	3901      	subs	r1, #1
 8010d38:	1884      	adds	r4, r0, r2
 8010d3a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010d3e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d103      	bne.n	8010d4e <strncmp+0x1c>
 8010d46:	42a0      	cmp	r0, r4
 8010d48:	d001      	beq.n	8010d4e <strncmp+0x1c>
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d1f5      	bne.n	8010d3a <strncmp+0x8>
 8010d4e:	1a98      	subs	r0, r3, r2
 8010d50:	bd10      	pop	{r4, pc}
 8010d52:	4610      	mov	r0, r2
 8010d54:	e7fc      	b.n	8010d50 <strncmp+0x1e>

08010d56 <sulp>:
 8010d56:	b570      	push	{r4, r5, r6, lr}
 8010d58:	4604      	mov	r4, r0
 8010d5a:	460d      	mov	r5, r1
 8010d5c:	ec45 4b10 	vmov	d0, r4, r5
 8010d60:	4616      	mov	r6, r2
 8010d62:	f002 f837 	bl	8012dd4 <__ulp>
 8010d66:	ec51 0b10 	vmov	r0, r1, d0
 8010d6a:	b17e      	cbz	r6, 8010d8c <sulp+0x36>
 8010d6c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010d70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	dd09      	ble.n	8010d8c <sulp+0x36>
 8010d78:	051b      	lsls	r3, r3, #20
 8010d7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010d7e:	2400      	movs	r4, #0
 8010d80:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010d84:	4622      	mov	r2, r4
 8010d86:	462b      	mov	r3, r5
 8010d88:	f7ef fc4e 	bl	8000628 <__aeabi_dmul>
 8010d8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010d90 <_strtod_l>:
 8010d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d94:	b0a3      	sub	sp, #140	; 0x8c
 8010d96:	461f      	mov	r7, r3
 8010d98:	2300      	movs	r3, #0
 8010d9a:	931e      	str	r3, [sp, #120]	; 0x78
 8010d9c:	4ba4      	ldr	r3, [pc, #656]	; (8011030 <_strtod_l+0x2a0>)
 8010d9e:	9219      	str	r2, [sp, #100]	; 0x64
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	9307      	str	r3, [sp, #28]
 8010da4:	4604      	mov	r4, r0
 8010da6:	4618      	mov	r0, r3
 8010da8:	4688      	mov	r8, r1
 8010daa:	f7ef fa23 	bl	80001f4 <strlen>
 8010dae:	f04f 0a00 	mov.w	sl, #0
 8010db2:	4605      	mov	r5, r0
 8010db4:	f04f 0b00 	mov.w	fp, #0
 8010db8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010dbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010dbe:	781a      	ldrb	r2, [r3, #0]
 8010dc0:	2a2b      	cmp	r2, #43	; 0x2b
 8010dc2:	d04c      	beq.n	8010e5e <_strtod_l+0xce>
 8010dc4:	d839      	bhi.n	8010e3a <_strtod_l+0xaa>
 8010dc6:	2a0d      	cmp	r2, #13
 8010dc8:	d832      	bhi.n	8010e30 <_strtod_l+0xa0>
 8010dca:	2a08      	cmp	r2, #8
 8010dcc:	d832      	bhi.n	8010e34 <_strtod_l+0xa4>
 8010dce:	2a00      	cmp	r2, #0
 8010dd0:	d03c      	beq.n	8010e4c <_strtod_l+0xbc>
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	930e      	str	r3, [sp, #56]	; 0x38
 8010dd6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010dd8:	7833      	ldrb	r3, [r6, #0]
 8010dda:	2b30      	cmp	r3, #48	; 0x30
 8010ddc:	f040 80b4 	bne.w	8010f48 <_strtod_l+0x1b8>
 8010de0:	7873      	ldrb	r3, [r6, #1]
 8010de2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010de6:	2b58      	cmp	r3, #88	; 0x58
 8010de8:	d16c      	bne.n	8010ec4 <_strtod_l+0x134>
 8010dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dec:	9301      	str	r3, [sp, #4]
 8010dee:	ab1e      	add	r3, sp, #120	; 0x78
 8010df0:	9702      	str	r7, [sp, #8]
 8010df2:	9300      	str	r3, [sp, #0]
 8010df4:	4a8f      	ldr	r2, [pc, #572]	; (8011034 <_strtod_l+0x2a4>)
 8010df6:	ab1f      	add	r3, sp, #124	; 0x7c
 8010df8:	a91d      	add	r1, sp, #116	; 0x74
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	f001 f8de 	bl	8011fbc <__gethex>
 8010e00:	f010 0707 	ands.w	r7, r0, #7
 8010e04:	4605      	mov	r5, r0
 8010e06:	d005      	beq.n	8010e14 <_strtod_l+0x84>
 8010e08:	2f06      	cmp	r7, #6
 8010e0a:	d12a      	bne.n	8010e62 <_strtod_l+0xd2>
 8010e0c:	3601      	adds	r6, #1
 8010e0e:	2300      	movs	r3, #0
 8010e10:	961d      	str	r6, [sp, #116]	; 0x74
 8010e12:	930e      	str	r3, [sp, #56]	; 0x38
 8010e14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	f040 8596 	bne.w	8011948 <_strtod_l+0xbb8>
 8010e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e1e:	b1db      	cbz	r3, 8010e58 <_strtod_l+0xc8>
 8010e20:	4652      	mov	r2, sl
 8010e22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010e26:	ec43 2b10 	vmov	d0, r2, r3
 8010e2a:	b023      	add	sp, #140	; 0x8c
 8010e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e30:	2a20      	cmp	r2, #32
 8010e32:	d1ce      	bne.n	8010dd2 <_strtod_l+0x42>
 8010e34:	3301      	adds	r3, #1
 8010e36:	931d      	str	r3, [sp, #116]	; 0x74
 8010e38:	e7c0      	b.n	8010dbc <_strtod_l+0x2c>
 8010e3a:	2a2d      	cmp	r2, #45	; 0x2d
 8010e3c:	d1c9      	bne.n	8010dd2 <_strtod_l+0x42>
 8010e3e:	2201      	movs	r2, #1
 8010e40:	920e      	str	r2, [sp, #56]	; 0x38
 8010e42:	1c5a      	adds	r2, r3, #1
 8010e44:	921d      	str	r2, [sp, #116]	; 0x74
 8010e46:	785b      	ldrb	r3, [r3, #1]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d1c4      	bne.n	8010dd6 <_strtod_l+0x46>
 8010e4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010e4e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f040 8576 	bne.w	8011944 <_strtod_l+0xbb4>
 8010e58:	4652      	mov	r2, sl
 8010e5a:	465b      	mov	r3, fp
 8010e5c:	e7e3      	b.n	8010e26 <_strtod_l+0x96>
 8010e5e:	2200      	movs	r2, #0
 8010e60:	e7ee      	b.n	8010e40 <_strtod_l+0xb0>
 8010e62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010e64:	b13a      	cbz	r2, 8010e76 <_strtod_l+0xe6>
 8010e66:	2135      	movs	r1, #53	; 0x35
 8010e68:	a820      	add	r0, sp, #128	; 0x80
 8010e6a:	f002 f8be 	bl	8012fea <__copybits>
 8010e6e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010e70:	4620      	mov	r0, r4
 8010e72:	f001 fc83 	bl	801277c <_Bfree>
 8010e76:	3f01      	subs	r7, #1
 8010e78:	2f05      	cmp	r7, #5
 8010e7a:	d807      	bhi.n	8010e8c <_strtod_l+0xfc>
 8010e7c:	e8df f007 	tbb	[pc, r7]
 8010e80:	1d180b0e 	.word	0x1d180b0e
 8010e84:	030e      	.short	0x030e
 8010e86:	f04f 0b00 	mov.w	fp, #0
 8010e8a:	46da      	mov	sl, fp
 8010e8c:	0728      	lsls	r0, r5, #28
 8010e8e:	d5c1      	bpl.n	8010e14 <_strtod_l+0x84>
 8010e90:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010e94:	e7be      	b.n	8010e14 <_strtod_l+0x84>
 8010e96:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010e9a:	e7f7      	b.n	8010e8c <_strtod_l+0xfc>
 8010e9c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010ea0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010ea2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010ea6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010eaa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010eae:	e7ed      	b.n	8010e8c <_strtod_l+0xfc>
 8010eb0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011038 <_strtod_l+0x2a8>
 8010eb4:	f04f 0a00 	mov.w	sl, #0
 8010eb8:	e7e8      	b.n	8010e8c <_strtod_l+0xfc>
 8010eba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010ebe:	f04f 3aff 	mov.w	sl, #4294967295
 8010ec2:	e7e3      	b.n	8010e8c <_strtod_l+0xfc>
 8010ec4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ec6:	1c5a      	adds	r2, r3, #1
 8010ec8:	921d      	str	r2, [sp, #116]	; 0x74
 8010eca:	785b      	ldrb	r3, [r3, #1]
 8010ecc:	2b30      	cmp	r3, #48	; 0x30
 8010ece:	d0f9      	beq.n	8010ec4 <_strtod_l+0x134>
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d09f      	beq.n	8010e14 <_strtod_l+0x84>
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	f04f 0900 	mov.w	r9, #0
 8010eda:	9304      	str	r3, [sp, #16]
 8010edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ede:	930a      	str	r3, [sp, #40]	; 0x28
 8010ee0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010ee4:	464f      	mov	r7, r9
 8010ee6:	220a      	movs	r2, #10
 8010ee8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010eea:	7806      	ldrb	r6, [r0, #0]
 8010eec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010ef0:	b2d9      	uxtb	r1, r3
 8010ef2:	2909      	cmp	r1, #9
 8010ef4:	d92a      	bls.n	8010f4c <_strtod_l+0x1bc>
 8010ef6:	9907      	ldr	r1, [sp, #28]
 8010ef8:	462a      	mov	r2, r5
 8010efa:	f7ff ff1a 	bl	8010d32 <strncmp>
 8010efe:	b398      	cbz	r0, 8010f68 <_strtod_l+0x1d8>
 8010f00:	2000      	movs	r0, #0
 8010f02:	4633      	mov	r3, r6
 8010f04:	463d      	mov	r5, r7
 8010f06:	9007      	str	r0, [sp, #28]
 8010f08:	4602      	mov	r2, r0
 8010f0a:	2b65      	cmp	r3, #101	; 0x65
 8010f0c:	d001      	beq.n	8010f12 <_strtod_l+0x182>
 8010f0e:	2b45      	cmp	r3, #69	; 0x45
 8010f10:	d118      	bne.n	8010f44 <_strtod_l+0x1b4>
 8010f12:	b91d      	cbnz	r5, 8010f1c <_strtod_l+0x18c>
 8010f14:	9b04      	ldr	r3, [sp, #16]
 8010f16:	4303      	orrs	r3, r0
 8010f18:	d098      	beq.n	8010e4c <_strtod_l+0xbc>
 8010f1a:	2500      	movs	r5, #0
 8010f1c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010f20:	f108 0301 	add.w	r3, r8, #1
 8010f24:	931d      	str	r3, [sp, #116]	; 0x74
 8010f26:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010f2a:	2b2b      	cmp	r3, #43	; 0x2b
 8010f2c:	d075      	beq.n	801101a <_strtod_l+0x28a>
 8010f2e:	2b2d      	cmp	r3, #45	; 0x2d
 8010f30:	d07b      	beq.n	801102a <_strtod_l+0x29a>
 8010f32:	f04f 0c00 	mov.w	ip, #0
 8010f36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010f3a:	2909      	cmp	r1, #9
 8010f3c:	f240 8082 	bls.w	8011044 <_strtod_l+0x2b4>
 8010f40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010f44:	2600      	movs	r6, #0
 8010f46:	e09d      	b.n	8011084 <_strtod_l+0x2f4>
 8010f48:	2300      	movs	r3, #0
 8010f4a:	e7c4      	b.n	8010ed6 <_strtod_l+0x146>
 8010f4c:	2f08      	cmp	r7, #8
 8010f4e:	bfd8      	it	le
 8010f50:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010f52:	f100 0001 	add.w	r0, r0, #1
 8010f56:	bfda      	itte	le
 8010f58:	fb02 3301 	mlale	r3, r2, r1, r3
 8010f5c:	9309      	strle	r3, [sp, #36]	; 0x24
 8010f5e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010f62:	3701      	adds	r7, #1
 8010f64:	901d      	str	r0, [sp, #116]	; 0x74
 8010f66:	e7bf      	b.n	8010ee8 <_strtod_l+0x158>
 8010f68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f6a:	195a      	adds	r2, r3, r5
 8010f6c:	921d      	str	r2, [sp, #116]	; 0x74
 8010f6e:	5d5b      	ldrb	r3, [r3, r5]
 8010f70:	2f00      	cmp	r7, #0
 8010f72:	d037      	beq.n	8010fe4 <_strtod_l+0x254>
 8010f74:	9007      	str	r0, [sp, #28]
 8010f76:	463d      	mov	r5, r7
 8010f78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010f7c:	2a09      	cmp	r2, #9
 8010f7e:	d912      	bls.n	8010fa6 <_strtod_l+0x216>
 8010f80:	2201      	movs	r2, #1
 8010f82:	e7c2      	b.n	8010f0a <_strtod_l+0x17a>
 8010f84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f86:	1c5a      	adds	r2, r3, #1
 8010f88:	921d      	str	r2, [sp, #116]	; 0x74
 8010f8a:	785b      	ldrb	r3, [r3, #1]
 8010f8c:	3001      	adds	r0, #1
 8010f8e:	2b30      	cmp	r3, #48	; 0x30
 8010f90:	d0f8      	beq.n	8010f84 <_strtod_l+0x1f4>
 8010f92:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010f96:	2a08      	cmp	r2, #8
 8010f98:	f200 84db 	bhi.w	8011952 <_strtod_l+0xbc2>
 8010f9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010f9e:	9007      	str	r0, [sp, #28]
 8010fa0:	2000      	movs	r0, #0
 8010fa2:	920a      	str	r2, [sp, #40]	; 0x28
 8010fa4:	4605      	mov	r5, r0
 8010fa6:	3b30      	subs	r3, #48	; 0x30
 8010fa8:	f100 0201 	add.w	r2, r0, #1
 8010fac:	d014      	beq.n	8010fd8 <_strtod_l+0x248>
 8010fae:	9907      	ldr	r1, [sp, #28]
 8010fb0:	4411      	add	r1, r2
 8010fb2:	9107      	str	r1, [sp, #28]
 8010fb4:	462a      	mov	r2, r5
 8010fb6:	eb00 0e05 	add.w	lr, r0, r5
 8010fba:	210a      	movs	r1, #10
 8010fbc:	4572      	cmp	r2, lr
 8010fbe:	d113      	bne.n	8010fe8 <_strtod_l+0x258>
 8010fc0:	182a      	adds	r2, r5, r0
 8010fc2:	2a08      	cmp	r2, #8
 8010fc4:	f105 0501 	add.w	r5, r5, #1
 8010fc8:	4405      	add	r5, r0
 8010fca:	dc1c      	bgt.n	8011006 <_strtod_l+0x276>
 8010fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010fce:	220a      	movs	r2, #10
 8010fd0:	fb02 3301 	mla	r3, r2, r1, r3
 8010fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010fda:	1c59      	adds	r1, r3, #1
 8010fdc:	911d      	str	r1, [sp, #116]	; 0x74
 8010fde:	785b      	ldrb	r3, [r3, #1]
 8010fe0:	4610      	mov	r0, r2
 8010fe2:	e7c9      	b.n	8010f78 <_strtod_l+0x1e8>
 8010fe4:	4638      	mov	r0, r7
 8010fe6:	e7d2      	b.n	8010f8e <_strtod_l+0x1fe>
 8010fe8:	2a08      	cmp	r2, #8
 8010fea:	dc04      	bgt.n	8010ff6 <_strtod_l+0x266>
 8010fec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010fee:	434e      	muls	r6, r1
 8010ff0:	9609      	str	r6, [sp, #36]	; 0x24
 8010ff2:	3201      	adds	r2, #1
 8010ff4:	e7e2      	b.n	8010fbc <_strtod_l+0x22c>
 8010ff6:	f102 0c01 	add.w	ip, r2, #1
 8010ffa:	f1bc 0f10 	cmp.w	ip, #16
 8010ffe:	bfd8      	it	le
 8011000:	fb01 f909 	mulle.w	r9, r1, r9
 8011004:	e7f5      	b.n	8010ff2 <_strtod_l+0x262>
 8011006:	2d10      	cmp	r5, #16
 8011008:	bfdc      	itt	le
 801100a:	220a      	movle	r2, #10
 801100c:	fb02 3909 	mlale	r9, r2, r9, r3
 8011010:	e7e1      	b.n	8010fd6 <_strtod_l+0x246>
 8011012:	2300      	movs	r3, #0
 8011014:	9307      	str	r3, [sp, #28]
 8011016:	2201      	movs	r2, #1
 8011018:	e77c      	b.n	8010f14 <_strtod_l+0x184>
 801101a:	f04f 0c00 	mov.w	ip, #0
 801101e:	f108 0302 	add.w	r3, r8, #2
 8011022:	931d      	str	r3, [sp, #116]	; 0x74
 8011024:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011028:	e785      	b.n	8010f36 <_strtod_l+0x1a6>
 801102a:	f04f 0c01 	mov.w	ip, #1
 801102e:	e7f6      	b.n	801101e <_strtod_l+0x28e>
 8011030:	08015774 	.word	0x08015774
 8011034:	08015648 	.word	0x08015648
 8011038:	7ff00000 	.word	0x7ff00000
 801103c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801103e:	1c59      	adds	r1, r3, #1
 8011040:	911d      	str	r1, [sp, #116]	; 0x74
 8011042:	785b      	ldrb	r3, [r3, #1]
 8011044:	2b30      	cmp	r3, #48	; 0x30
 8011046:	d0f9      	beq.n	801103c <_strtod_l+0x2ac>
 8011048:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801104c:	2908      	cmp	r1, #8
 801104e:	f63f af79 	bhi.w	8010f44 <_strtod_l+0x1b4>
 8011052:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011056:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011058:	9308      	str	r3, [sp, #32]
 801105a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801105c:	1c59      	adds	r1, r3, #1
 801105e:	911d      	str	r1, [sp, #116]	; 0x74
 8011060:	785b      	ldrb	r3, [r3, #1]
 8011062:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8011066:	2e09      	cmp	r6, #9
 8011068:	d937      	bls.n	80110da <_strtod_l+0x34a>
 801106a:	9e08      	ldr	r6, [sp, #32]
 801106c:	1b89      	subs	r1, r1, r6
 801106e:	2908      	cmp	r1, #8
 8011070:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011074:	dc02      	bgt.n	801107c <_strtod_l+0x2ec>
 8011076:	4576      	cmp	r6, lr
 8011078:	bfa8      	it	ge
 801107a:	4676      	movge	r6, lr
 801107c:	f1bc 0f00 	cmp.w	ip, #0
 8011080:	d000      	beq.n	8011084 <_strtod_l+0x2f4>
 8011082:	4276      	negs	r6, r6
 8011084:	2d00      	cmp	r5, #0
 8011086:	d14f      	bne.n	8011128 <_strtod_l+0x398>
 8011088:	9904      	ldr	r1, [sp, #16]
 801108a:	4301      	orrs	r1, r0
 801108c:	f47f aec2 	bne.w	8010e14 <_strtod_l+0x84>
 8011090:	2a00      	cmp	r2, #0
 8011092:	f47f aedb 	bne.w	8010e4c <_strtod_l+0xbc>
 8011096:	2b69      	cmp	r3, #105	; 0x69
 8011098:	d027      	beq.n	80110ea <_strtod_l+0x35a>
 801109a:	dc24      	bgt.n	80110e6 <_strtod_l+0x356>
 801109c:	2b49      	cmp	r3, #73	; 0x49
 801109e:	d024      	beq.n	80110ea <_strtod_l+0x35a>
 80110a0:	2b4e      	cmp	r3, #78	; 0x4e
 80110a2:	f47f aed3 	bne.w	8010e4c <_strtod_l+0xbc>
 80110a6:	499e      	ldr	r1, [pc, #632]	; (8011320 <_strtod_l+0x590>)
 80110a8:	a81d      	add	r0, sp, #116	; 0x74
 80110aa:	f001 f9df 	bl	801246c <__match>
 80110ae:	2800      	cmp	r0, #0
 80110b0:	f43f aecc 	beq.w	8010e4c <_strtod_l+0xbc>
 80110b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	2b28      	cmp	r3, #40	; 0x28
 80110ba:	d12d      	bne.n	8011118 <_strtod_l+0x388>
 80110bc:	4999      	ldr	r1, [pc, #612]	; (8011324 <_strtod_l+0x594>)
 80110be:	aa20      	add	r2, sp, #128	; 0x80
 80110c0:	a81d      	add	r0, sp, #116	; 0x74
 80110c2:	f001 f9e7 	bl	8012494 <__hexnan>
 80110c6:	2805      	cmp	r0, #5
 80110c8:	d126      	bne.n	8011118 <_strtod_l+0x388>
 80110ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110cc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80110d0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80110d4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80110d8:	e69c      	b.n	8010e14 <_strtod_l+0x84>
 80110da:	210a      	movs	r1, #10
 80110dc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80110e0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80110e4:	e7b9      	b.n	801105a <_strtod_l+0x2ca>
 80110e6:	2b6e      	cmp	r3, #110	; 0x6e
 80110e8:	e7db      	b.n	80110a2 <_strtod_l+0x312>
 80110ea:	498f      	ldr	r1, [pc, #572]	; (8011328 <_strtod_l+0x598>)
 80110ec:	a81d      	add	r0, sp, #116	; 0x74
 80110ee:	f001 f9bd 	bl	801246c <__match>
 80110f2:	2800      	cmp	r0, #0
 80110f4:	f43f aeaa 	beq.w	8010e4c <_strtod_l+0xbc>
 80110f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110fa:	498c      	ldr	r1, [pc, #560]	; (801132c <_strtod_l+0x59c>)
 80110fc:	3b01      	subs	r3, #1
 80110fe:	a81d      	add	r0, sp, #116	; 0x74
 8011100:	931d      	str	r3, [sp, #116]	; 0x74
 8011102:	f001 f9b3 	bl	801246c <__match>
 8011106:	b910      	cbnz	r0, 801110e <_strtod_l+0x37e>
 8011108:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801110a:	3301      	adds	r3, #1
 801110c:	931d      	str	r3, [sp, #116]	; 0x74
 801110e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801133c <_strtod_l+0x5ac>
 8011112:	f04f 0a00 	mov.w	sl, #0
 8011116:	e67d      	b.n	8010e14 <_strtod_l+0x84>
 8011118:	4885      	ldr	r0, [pc, #532]	; (8011330 <_strtod_l+0x5a0>)
 801111a:	f002 fc3d 	bl	8013998 <nan>
 801111e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011122:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011126:	e675      	b.n	8010e14 <_strtod_l+0x84>
 8011128:	9b07      	ldr	r3, [sp, #28]
 801112a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801112c:	1af3      	subs	r3, r6, r3
 801112e:	2f00      	cmp	r7, #0
 8011130:	bf08      	it	eq
 8011132:	462f      	moveq	r7, r5
 8011134:	2d10      	cmp	r5, #16
 8011136:	9308      	str	r3, [sp, #32]
 8011138:	46a8      	mov	r8, r5
 801113a:	bfa8      	it	ge
 801113c:	f04f 0810 	movge.w	r8, #16
 8011140:	f7ef f9f8 	bl	8000534 <__aeabi_ui2d>
 8011144:	2d09      	cmp	r5, #9
 8011146:	4682      	mov	sl, r0
 8011148:	468b      	mov	fp, r1
 801114a:	dd13      	ble.n	8011174 <_strtod_l+0x3e4>
 801114c:	4b79      	ldr	r3, [pc, #484]	; (8011334 <_strtod_l+0x5a4>)
 801114e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011152:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011156:	f7ef fa67 	bl	8000628 <__aeabi_dmul>
 801115a:	4682      	mov	sl, r0
 801115c:	4648      	mov	r0, r9
 801115e:	468b      	mov	fp, r1
 8011160:	f7ef f9e8 	bl	8000534 <__aeabi_ui2d>
 8011164:	4602      	mov	r2, r0
 8011166:	460b      	mov	r3, r1
 8011168:	4650      	mov	r0, sl
 801116a:	4659      	mov	r1, fp
 801116c:	f7ef f8a6 	bl	80002bc <__adddf3>
 8011170:	4682      	mov	sl, r0
 8011172:	468b      	mov	fp, r1
 8011174:	2d0f      	cmp	r5, #15
 8011176:	dc38      	bgt.n	80111ea <_strtod_l+0x45a>
 8011178:	9b08      	ldr	r3, [sp, #32]
 801117a:	2b00      	cmp	r3, #0
 801117c:	f43f ae4a 	beq.w	8010e14 <_strtod_l+0x84>
 8011180:	dd24      	ble.n	80111cc <_strtod_l+0x43c>
 8011182:	2b16      	cmp	r3, #22
 8011184:	dc0b      	bgt.n	801119e <_strtod_l+0x40e>
 8011186:	4d6b      	ldr	r5, [pc, #428]	; (8011334 <_strtod_l+0x5a4>)
 8011188:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801118c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011190:	4652      	mov	r2, sl
 8011192:	465b      	mov	r3, fp
 8011194:	f7ef fa48 	bl	8000628 <__aeabi_dmul>
 8011198:	4682      	mov	sl, r0
 801119a:	468b      	mov	fp, r1
 801119c:	e63a      	b.n	8010e14 <_strtod_l+0x84>
 801119e:	9a08      	ldr	r2, [sp, #32]
 80111a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80111a4:	4293      	cmp	r3, r2
 80111a6:	db20      	blt.n	80111ea <_strtod_l+0x45a>
 80111a8:	4c62      	ldr	r4, [pc, #392]	; (8011334 <_strtod_l+0x5a4>)
 80111aa:	f1c5 050f 	rsb	r5, r5, #15
 80111ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80111b2:	4652      	mov	r2, sl
 80111b4:	465b      	mov	r3, fp
 80111b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111ba:	f7ef fa35 	bl	8000628 <__aeabi_dmul>
 80111be:	9b08      	ldr	r3, [sp, #32]
 80111c0:	1b5d      	subs	r5, r3, r5
 80111c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80111c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80111ca:	e7e3      	b.n	8011194 <_strtod_l+0x404>
 80111cc:	9b08      	ldr	r3, [sp, #32]
 80111ce:	3316      	adds	r3, #22
 80111d0:	db0b      	blt.n	80111ea <_strtod_l+0x45a>
 80111d2:	9b07      	ldr	r3, [sp, #28]
 80111d4:	4a57      	ldr	r2, [pc, #348]	; (8011334 <_strtod_l+0x5a4>)
 80111d6:	1b9e      	subs	r6, r3, r6
 80111d8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80111dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80111e0:	4650      	mov	r0, sl
 80111e2:	4659      	mov	r1, fp
 80111e4:	f7ef fb4a 	bl	800087c <__aeabi_ddiv>
 80111e8:	e7d6      	b.n	8011198 <_strtod_l+0x408>
 80111ea:	9b08      	ldr	r3, [sp, #32]
 80111ec:	eba5 0808 	sub.w	r8, r5, r8
 80111f0:	4498      	add	r8, r3
 80111f2:	f1b8 0f00 	cmp.w	r8, #0
 80111f6:	dd71      	ble.n	80112dc <_strtod_l+0x54c>
 80111f8:	f018 030f 	ands.w	r3, r8, #15
 80111fc:	d00a      	beq.n	8011214 <_strtod_l+0x484>
 80111fe:	494d      	ldr	r1, [pc, #308]	; (8011334 <_strtod_l+0x5a4>)
 8011200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011204:	4652      	mov	r2, sl
 8011206:	465b      	mov	r3, fp
 8011208:	e9d1 0100 	ldrd	r0, r1, [r1]
 801120c:	f7ef fa0c 	bl	8000628 <__aeabi_dmul>
 8011210:	4682      	mov	sl, r0
 8011212:	468b      	mov	fp, r1
 8011214:	f038 080f 	bics.w	r8, r8, #15
 8011218:	d04d      	beq.n	80112b6 <_strtod_l+0x526>
 801121a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801121e:	dd22      	ble.n	8011266 <_strtod_l+0x4d6>
 8011220:	2500      	movs	r5, #0
 8011222:	462e      	mov	r6, r5
 8011224:	9509      	str	r5, [sp, #36]	; 0x24
 8011226:	9507      	str	r5, [sp, #28]
 8011228:	2322      	movs	r3, #34	; 0x22
 801122a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801133c <_strtod_l+0x5ac>
 801122e:	6023      	str	r3, [r4, #0]
 8011230:	f04f 0a00 	mov.w	sl, #0
 8011234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011236:	2b00      	cmp	r3, #0
 8011238:	f43f adec 	beq.w	8010e14 <_strtod_l+0x84>
 801123c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801123e:	4620      	mov	r0, r4
 8011240:	f001 fa9c 	bl	801277c <_Bfree>
 8011244:	9907      	ldr	r1, [sp, #28]
 8011246:	4620      	mov	r0, r4
 8011248:	f001 fa98 	bl	801277c <_Bfree>
 801124c:	4631      	mov	r1, r6
 801124e:	4620      	mov	r0, r4
 8011250:	f001 fa94 	bl	801277c <_Bfree>
 8011254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011256:	4620      	mov	r0, r4
 8011258:	f001 fa90 	bl	801277c <_Bfree>
 801125c:	4629      	mov	r1, r5
 801125e:	4620      	mov	r0, r4
 8011260:	f001 fa8c 	bl	801277c <_Bfree>
 8011264:	e5d6      	b.n	8010e14 <_strtod_l+0x84>
 8011266:	2300      	movs	r3, #0
 8011268:	ea4f 1828 	mov.w	r8, r8, asr #4
 801126c:	4650      	mov	r0, sl
 801126e:	4659      	mov	r1, fp
 8011270:	4699      	mov	r9, r3
 8011272:	f1b8 0f01 	cmp.w	r8, #1
 8011276:	dc21      	bgt.n	80112bc <_strtod_l+0x52c>
 8011278:	b10b      	cbz	r3, 801127e <_strtod_l+0x4ee>
 801127a:	4682      	mov	sl, r0
 801127c:	468b      	mov	fp, r1
 801127e:	4b2e      	ldr	r3, [pc, #184]	; (8011338 <_strtod_l+0x5a8>)
 8011280:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011284:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011288:	4652      	mov	r2, sl
 801128a:	465b      	mov	r3, fp
 801128c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011290:	f7ef f9ca 	bl	8000628 <__aeabi_dmul>
 8011294:	4b29      	ldr	r3, [pc, #164]	; (801133c <_strtod_l+0x5ac>)
 8011296:	460a      	mov	r2, r1
 8011298:	400b      	ands	r3, r1
 801129a:	4929      	ldr	r1, [pc, #164]	; (8011340 <_strtod_l+0x5b0>)
 801129c:	428b      	cmp	r3, r1
 801129e:	4682      	mov	sl, r0
 80112a0:	d8be      	bhi.n	8011220 <_strtod_l+0x490>
 80112a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80112a6:	428b      	cmp	r3, r1
 80112a8:	bf86      	itte	hi
 80112aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011344 <_strtod_l+0x5b4>
 80112ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80112b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80112b6:	2300      	movs	r3, #0
 80112b8:	9304      	str	r3, [sp, #16]
 80112ba:	e081      	b.n	80113c0 <_strtod_l+0x630>
 80112bc:	f018 0f01 	tst.w	r8, #1
 80112c0:	d007      	beq.n	80112d2 <_strtod_l+0x542>
 80112c2:	4b1d      	ldr	r3, [pc, #116]	; (8011338 <_strtod_l+0x5a8>)
 80112c4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80112c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112cc:	f7ef f9ac 	bl	8000628 <__aeabi_dmul>
 80112d0:	2301      	movs	r3, #1
 80112d2:	f109 0901 	add.w	r9, r9, #1
 80112d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80112da:	e7ca      	b.n	8011272 <_strtod_l+0x4e2>
 80112dc:	d0eb      	beq.n	80112b6 <_strtod_l+0x526>
 80112de:	f1c8 0800 	rsb	r8, r8, #0
 80112e2:	f018 020f 	ands.w	r2, r8, #15
 80112e6:	d00a      	beq.n	80112fe <_strtod_l+0x56e>
 80112e8:	4b12      	ldr	r3, [pc, #72]	; (8011334 <_strtod_l+0x5a4>)
 80112ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80112ee:	4650      	mov	r0, sl
 80112f0:	4659      	mov	r1, fp
 80112f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f6:	f7ef fac1 	bl	800087c <__aeabi_ddiv>
 80112fa:	4682      	mov	sl, r0
 80112fc:	468b      	mov	fp, r1
 80112fe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011302:	d0d8      	beq.n	80112b6 <_strtod_l+0x526>
 8011304:	f1b8 0f1f 	cmp.w	r8, #31
 8011308:	dd1e      	ble.n	8011348 <_strtod_l+0x5b8>
 801130a:	2500      	movs	r5, #0
 801130c:	462e      	mov	r6, r5
 801130e:	9509      	str	r5, [sp, #36]	; 0x24
 8011310:	9507      	str	r5, [sp, #28]
 8011312:	2322      	movs	r3, #34	; 0x22
 8011314:	f04f 0a00 	mov.w	sl, #0
 8011318:	f04f 0b00 	mov.w	fp, #0
 801131c:	6023      	str	r3, [r4, #0]
 801131e:	e789      	b.n	8011234 <_strtod_l+0x4a4>
 8011320:	08015645 	.word	0x08015645
 8011324:	0801565c 	.word	0x0801565c
 8011328:	0801563c 	.word	0x0801563c
 801132c:	0801563f 	.word	0x0801563f
 8011330:	0801596a 	.word	0x0801596a
 8011334:	08015828 	.word	0x08015828
 8011338:	08015800 	.word	0x08015800
 801133c:	7ff00000 	.word	0x7ff00000
 8011340:	7ca00000 	.word	0x7ca00000
 8011344:	7fefffff 	.word	0x7fefffff
 8011348:	f018 0310 	ands.w	r3, r8, #16
 801134c:	bf18      	it	ne
 801134e:	236a      	movne	r3, #106	; 0x6a
 8011350:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011708 <_strtod_l+0x978>
 8011354:	9304      	str	r3, [sp, #16]
 8011356:	4650      	mov	r0, sl
 8011358:	4659      	mov	r1, fp
 801135a:	2300      	movs	r3, #0
 801135c:	f018 0f01 	tst.w	r8, #1
 8011360:	d004      	beq.n	801136c <_strtod_l+0x5dc>
 8011362:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011366:	f7ef f95f 	bl	8000628 <__aeabi_dmul>
 801136a:	2301      	movs	r3, #1
 801136c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011370:	f109 0908 	add.w	r9, r9, #8
 8011374:	d1f2      	bne.n	801135c <_strtod_l+0x5cc>
 8011376:	b10b      	cbz	r3, 801137c <_strtod_l+0x5ec>
 8011378:	4682      	mov	sl, r0
 801137a:	468b      	mov	fp, r1
 801137c:	9b04      	ldr	r3, [sp, #16]
 801137e:	b1bb      	cbz	r3, 80113b0 <_strtod_l+0x620>
 8011380:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011384:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011388:	2b00      	cmp	r3, #0
 801138a:	4659      	mov	r1, fp
 801138c:	dd10      	ble.n	80113b0 <_strtod_l+0x620>
 801138e:	2b1f      	cmp	r3, #31
 8011390:	f340 8128 	ble.w	80115e4 <_strtod_l+0x854>
 8011394:	2b34      	cmp	r3, #52	; 0x34
 8011396:	bfde      	ittt	le
 8011398:	3b20      	suble	r3, #32
 801139a:	f04f 32ff 	movle.w	r2, #4294967295
 801139e:	fa02 f303 	lslle.w	r3, r2, r3
 80113a2:	f04f 0a00 	mov.w	sl, #0
 80113a6:	bfcc      	ite	gt
 80113a8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80113ac:	ea03 0b01 	andle.w	fp, r3, r1
 80113b0:	2200      	movs	r2, #0
 80113b2:	2300      	movs	r3, #0
 80113b4:	4650      	mov	r0, sl
 80113b6:	4659      	mov	r1, fp
 80113b8:	f7ef fb9e 	bl	8000af8 <__aeabi_dcmpeq>
 80113bc:	2800      	cmp	r0, #0
 80113be:	d1a4      	bne.n	801130a <_strtod_l+0x57a>
 80113c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113c2:	9300      	str	r3, [sp, #0]
 80113c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80113c6:	462b      	mov	r3, r5
 80113c8:	463a      	mov	r2, r7
 80113ca:	4620      	mov	r0, r4
 80113cc:	f001 fa42 	bl	8012854 <__s2b>
 80113d0:	9009      	str	r0, [sp, #36]	; 0x24
 80113d2:	2800      	cmp	r0, #0
 80113d4:	f43f af24 	beq.w	8011220 <_strtod_l+0x490>
 80113d8:	9b07      	ldr	r3, [sp, #28]
 80113da:	1b9e      	subs	r6, r3, r6
 80113dc:	9b08      	ldr	r3, [sp, #32]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	bfb4      	ite	lt
 80113e2:	4633      	movlt	r3, r6
 80113e4:	2300      	movge	r3, #0
 80113e6:	9310      	str	r3, [sp, #64]	; 0x40
 80113e8:	9b08      	ldr	r3, [sp, #32]
 80113ea:	2500      	movs	r5, #0
 80113ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80113f0:	9318      	str	r3, [sp, #96]	; 0x60
 80113f2:	462e      	mov	r6, r5
 80113f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113f6:	4620      	mov	r0, r4
 80113f8:	6859      	ldr	r1, [r3, #4]
 80113fa:	f001 f97f 	bl	80126fc <_Balloc>
 80113fe:	9007      	str	r0, [sp, #28]
 8011400:	2800      	cmp	r0, #0
 8011402:	f43f af11 	beq.w	8011228 <_strtod_l+0x498>
 8011406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011408:	691a      	ldr	r2, [r3, #16]
 801140a:	3202      	adds	r2, #2
 801140c:	f103 010c 	add.w	r1, r3, #12
 8011410:	0092      	lsls	r2, r2, #2
 8011412:	300c      	adds	r0, #12
 8011414:	f7ff f926 	bl	8010664 <memcpy>
 8011418:	ec4b ab10 	vmov	d0, sl, fp
 801141c:	aa20      	add	r2, sp, #128	; 0x80
 801141e:	a91f      	add	r1, sp, #124	; 0x7c
 8011420:	4620      	mov	r0, r4
 8011422:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011426:	f001 fd51 	bl	8012ecc <__d2b>
 801142a:	901e      	str	r0, [sp, #120]	; 0x78
 801142c:	2800      	cmp	r0, #0
 801142e:	f43f aefb 	beq.w	8011228 <_strtod_l+0x498>
 8011432:	2101      	movs	r1, #1
 8011434:	4620      	mov	r0, r4
 8011436:	f001 faa7 	bl	8012988 <__i2b>
 801143a:	4606      	mov	r6, r0
 801143c:	2800      	cmp	r0, #0
 801143e:	f43f aef3 	beq.w	8011228 <_strtod_l+0x498>
 8011442:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011444:	9904      	ldr	r1, [sp, #16]
 8011446:	2b00      	cmp	r3, #0
 8011448:	bfab      	itete	ge
 801144a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801144c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801144e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011450:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8011454:	bfac      	ite	ge
 8011456:	eb03 0902 	addge.w	r9, r3, r2
 801145a:	1ad7      	sublt	r7, r2, r3
 801145c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801145e:	eba3 0801 	sub.w	r8, r3, r1
 8011462:	4490      	add	r8, r2
 8011464:	4ba3      	ldr	r3, [pc, #652]	; (80116f4 <_strtod_l+0x964>)
 8011466:	f108 38ff 	add.w	r8, r8, #4294967295
 801146a:	4598      	cmp	r8, r3
 801146c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011470:	f280 80cc 	bge.w	801160c <_strtod_l+0x87c>
 8011474:	eba3 0308 	sub.w	r3, r3, r8
 8011478:	2b1f      	cmp	r3, #31
 801147a:	eba2 0203 	sub.w	r2, r2, r3
 801147e:	f04f 0101 	mov.w	r1, #1
 8011482:	f300 80b6 	bgt.w	80115f2 <_strtod_l+0x862>
 8011486:	fa01 f303 	lsl.w	r3, r1, r3
 801148a:	9311      	str	r3, [sp, #68]	; 0x44
 801148c:	2300      	movs	r3, #0
 801148e:	930c      	str	r3, [sp, #48]	; 0x30
 8011490:	eb09 0802 	add.w	r8, r9, r2
 8011494:	9b04      	ldr	r3, [sp, #16]
 8011496:	45c1      	cmp	r9, r8
 8011498:	4417      	add	r7, r2
 801149a:	441f      	add	r7, r3
 801149c:	464b      	mov	r3, r9
 801149e:	bfa8      	it	ge
 80114a0:	4643      	movge	r3, r8
 80114a2:	42bb      	cmp	r3, r7
 80114a4:	bfa8      	it	ge
 80114a6:	463b      	movge	r3, r7
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	bfc2      	ittt	gt
 80114ac:	eba8 0803 	subgt.w	r8, r8, r3
 80114b0:	1aff      	subgt	r7, r7, r3
 80114b2:	eba9 0903 	subgt.w	r9, r9, r3
 80114b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	dd17      	ble.n	80114ec <_strtod_l+0x75c>
 80114bc:	4631      	mov	r1, r6
 80114be:	461a      	mov	r2, r3
 80114c0:	4620      	mov	r0, r4
 80114c2:	f001 fb1d 	bl	8012b00 <__pow5mult>
 80114c6:	4606      	mov	r6, r0
 80114c8:	2800      	cmp	r0, #0
 80114ca:	f43f aead 	beq.w	8011228 <_strtod_l+0x498>
 80114ce:	4601      	mov	r1, r0
 80114d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80114d2:	4620      	mov	r0, r4
 80114d4:	f001 fa6e 	bl	80129b4 <__multiply>
 80114d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80114da:	2800      	cmp	r0, #0
 80114dc:	f43f aea4 	beq.w	8011228 <_strtod_l+0x498>
 80114e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80114e2:	4620      	mov	r0, r4
 80114e4:	f001 f94a 	bl	801277c <_Bfree>
 80114e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80114ea:	931e      	str	r3, [sp, #120]	; 0x78
 80114ec:	f1b8 0f00 	cmp.w	r8, #0
 80114f0:	f300 8091 	bgt.w	8011616 <_strtod_l+0x886>
 80114f4:	9b08      	ldr	r3, [sp, #32]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	dd08      	ble.n	801150c <_strtod_l+0x77c>
 80114fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80114fc:	9907      	ldr	r1, [sp, #28]
 80114fe:	4620      	mov	r0, r4
 8011500:	f001 fafe 	bl	8012b00 <__pow5mult>
 8011504:	9007      	str	r0, [sp, #28]
 8011506:	2800      	cmp	r0, #0
 8011508:	f43f ae8e 	beq.w	8011228 <_strtod_l+0x498>
 801150c:	2f00      	cmp	r7, #0
 801150e:	dd08      	ble.n	8011522 <_strtod_l+0x792>
 8011510:	9907      	ldr	r1, [sp, #28]
 8011512:	463a      	mov	r2, r7
 8011514:	4620      	mov	r0, r4
 8011516:	f001 fb4d 	bl	8012bb4 <__lshift>
 801151a:	9007      	str	r0, [sp, #28]
 801151c:	2800      	cmp	r0, #0
 801151e:	f43f ae83 	beq.w	8011228 <_strtod_l+0x498>
 8011522:	f1b9 0f00 	cmp.w	r9, #0
 8011526:	dd08      	ble.n	801153a <_strtod_l+0x7aa>
 8011528:	4631      	mov	r1, r6
 801152a:	464a      	mov	r2, r9
 801152c:	4620      	mov	r0, r4
 801152e:	f001 fb41 	bl	8012bb4 <__lshift>
 8011532:	4606      	mov	r6, r0
 8011534:	2800      	cmp	r0, #0
 8011536:	f43f ae77 	beq.w	8011228 <_strtod_l+0x498>
 801153a:	9a07      	ldr	r2, [sp, #28]
 801153c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801153e:	4620      	mov	r0, r4
 8011540:	f001 fbc0 	bl	8012cc4 <__mdiff>
 8011544:	4605      	mov	r5, r0
 8011546:	2800      	cmp	r0, #0
 8011548:	f43f ae6e 	beq.w	8011228 <_strtod_l+0x498>
 801154c:	68c3      	ldr	r3, [r0, #12]
 801154e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011550:	2300      	movs	r3, #0
 8011552:	60c3      	str	r3, [r0, #12]
 8011554:	4631      	mov	r1, r6
 8011556:	f001 fb99 	bl	8012c8c <__mcmp>
 801155a:	2800      	cmp	r0, #0
 801155c:	da65      	bge.n	801162a <_strtod_l+0x89a>
 801155e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011560:	ea53 030a 	orrs.w	r3, r3, sl
 8011564:	f040 8087 	bne.w	8011676 <_strtod_l+0x8e6>
 8011568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801156c:	2b00      	cmp	r3, #0
 801156e:	f040 8082 	bne.w	8011676 <_strtod_l+0x8e6>
 8011572:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011576:	0d1b      	lsrs	r3, r3, #20
 8011578:	051b      	lsls	r3, r3, #20
 801157a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801157e:	d97a      	bls.n	8011676 <_strtod_l+0x8e6>
 8011580:	696b      	ldr	r3, [r5, #20]
 8011582:	b913      	cbnz	r3, 801158a <_strtod_l+0x7fa>
 8011584:	692b      	ldr	r3, [r5, #16]
 8011586:	2b01      	cmp	r3, #1
 8011588:	dd75      	ble.n	8011676 <_strtod_l+0x8e6>
 801158a:	4629      	mov	r1, r5
 801158c:	2201      	movs	r2, #1
 801158e:	4620      	mov	r0, r4
 8011590:	f001 fb10 	bl	8012bb4 <__lshift>
 8011594:	4631      	mov	r1, r6
 8011596:	4605      	mov	r5, r0
 8011598:	f001 fb78 	bl	8012c8c <__mcmp>
 801159c:	2800      	cmp	r0, #0
 801159e:	dd6a      	ble.n	8011676 <_strtod_l+0x8e6>
 80115a0:	9904      	ldr	r1, [sp, #16]
 80115a2:	4a55      	ldr	r2, [pc, #340]	; (80116f8 <_strtod_l+0x968>)
 80115a4:	465b      	mov	r3, fp
 80115a6:	2900      	cmp	r1, #0
 80115a8:	f000 8085 	beq.w	80116b6 <_strtod_l+0x926>
 80115ac:	ea02 010b 	and.w	r1, r2, fp
 80115b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80115b4:	dc7f      	bgt.n	80116b6 <_strtod_l+0x926>
 80115b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80115ba:	f77f aeaa 	ble.w	8011312 <_strtod_l+0x582>
 80115be:	4a4f      	ldr	r2, [pc, #316]	; (80116fc <_strtod_l+0x96c>)
 80115c0:	2300      	movs	r3, #0
 80115c2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80115c6:	4650      	mov	r0, sl
 80115c8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80115cc:	4659      	mov	r1, fp
 80115ce:	f7ef f82b 	bl	8000628 <__aeabi_dmul>
 80115d2:	460b      	mov	r3, r1
 80115d4:	4303      	orrs	r3, r0
 80115d6:	bf08      	it	eq
 80115d8:	2322      	moveq	r3, #34	; 0x22
 80115da:	4682      	mov	sl, r0
 80115dc:	468b      	mov	fp, r1
 80115de:	bf08      	it	eq
 80115e0:	6023      	streq	r3, [r4, #0]
 80115e2:	e62b      	b.n	801123c <_strtod_l+0x4ac>
 80115e4:	f04f 32ff 	mov.w	r2, #4294967295
 80115e8:	fa02 f303 	lsl.w	r3, r2, r3
 80115ec:	ea03 0a0a 	and.w	sl, r3, sl
 80115f0:	e6de      	b.n	80113b0 <_strtod_l+0x620>
 80115f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80115f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80115fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80115fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011602:	fa01 f308 	lsl.w	r3, r1, r8
 8011606:	930c      	str	r3, [sp, #48]	; 0x30
 8011608:	9111      	str	r1, [sp, #68]	; 0x44
 801160a:	e741      	b.n	8011490 <_strtod_l+0x700>
 801160c:	2300      	movs	r3, #0
 801160e:	930c      	str	r3, [sp, #48]	; 0x30
 8011610:	2301      	movs	r3, #1
 8011612:	9311      	str	r3, [sp, #68]	; 0x44
 8011614:	e73c      	b.n	8011490 <_strtod_l+0x700>
 8011616:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011618:	4642      	mov	r2, r8
 801161a:	4620      	mov	r0, r4
 801161c:	f001 faca 	bl	8012bb4 <__lshift>
 8011620:	901e      	str	r0, [sp, #120]	; 0x78
 8011622:	2800      	cmp	r0, #0
 8011624:	f47f af66 	bne.w	80114f4 <_strtod_l+0x764>
 8011628:	e5fe      	b.n	8011228 <_strtod_l+0x498>
 801162a:	465f      	mov	r7, fp
 801162c:	d16e      	bne.n	801170c <_strtod_l+0x97c>
 801162e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011634:	b342      	cbz	r2, 8011688 <_strtod_l+0x8f8>
 8011636:	4a32      	ldr	r2, [pc, #200]	; (8011700 <_strtod_l+0x970>)
 8011638:	4293      	cmp	r3, r2
 801163a:	d128      	bne.n	801168e <_strtod_l+0x8fe>
 801163c:	9b04      	ldr	r3, [sp, #16]
 801163e:	4650      	mov	r0, sl
 8011640:	b1eb      	cbz	r3, 801167e <_strtod_l+0x8ee>
 8011642:	4a2d      	ldr	r2, [pc, #180]	; (80116f8 <_strtod_l+0x968>)
 8011644:	403a      	ands	r2, r7
 8011646:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801164a:	f04f 31ff 	mov.w	r1, #4294967295
 801164e:	d819      	bhi.n	8011684 <_strtod_l+0x8f4>
 8011650:	0d12      	lsrs	r2, r2, #20
 8011652:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011656:	fa01 f303 	lsl.w	r3, r1, r3
 801165a:	4298      	cmp	r0, r3
 801165c:	d117      	bne.n	801168e <_strtod_l+0x8fe>
 801165e:	4b29      	ldr	r3, [pc, #164]	; (8011704 <_strtod_l+0x974>)
 8011660:	429f      	cmp	r7, r3
 8011662:	d102      	bne.n	801166a <_strtod_l+0x8da>
 8011664:	3001      	adds	r0, #1
 8011666:	f43f addf 	beq.w	8011228 <_strtod_l+0x498>
 801166a:	4b23      	ldr	r3, [pc, #140]	; (80116f8 <_strtod_l+0x968>)
 801166c:	403b      	ands	r3, r7
 801166e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011672:	f04f 0a00 	mov.w	sl, #0
 8011676:	9b04      	ldr	r3, [sp, #16]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1a0      	bne.n	80115be <_strtod_l+0x82e>
 801167c:	e5de      	b.n	801123c <_strtod_l+0x4ac>
 801167e:	f04f 33ff 	mov.w	r3, #4294967295
 8011682:	e7ea      	b.n	801165a <_strtod_l+0x8ca>
 8011684:	460b      	mov	r3, r1
 8011686:	e7e8      	b.n	801165a <_strtod_l+0x8ca>
 8011688:	ea53 030a 	orrs.w	r3, r3, sl
 801168c:	d088      	beq.n	80115a0 <_strtod_l+0x810>
 801168e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011690:	b1db      	cbz	r3, 80116ca <_strtod_l+0x93a>
 8011692:	423b      	tst	r3, r7
 8011694:	d0ef      	beq.n	8011676 <_strtod_l+0x8e6>
 8011696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011698:	9a04      	ldr	r2, [sp, #16]
 801169a:	4650      	mov	r0, sl
 801169c:	4659      	mov	r1, fp
 801169e:	b1c3      	cbz	r3, 80116d2 <_strtod_l+0x942>
 80116a0:	f7ff fb59 	bl	8010d56 <sulp>
 80116a4:	4602      	mov	r2, r0
 80116a6:	460b      	mov	r3, r1
 80116a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80116ac:	f7ee fe06 	bl	80002bc <__adddf3>
 80116b0:	4682      	mov	sl, r0
 80116b2:	468b      	mov	fp, r1
 80116b4:	e7df      	b.n	8011676 <_strtod_l+0x8e6>
 80116b6:	4013      	ands	r3, r2
 80116b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80116bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80116c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80116c4:	f04f 3aff 	mov.w	sl, #4294967295
 80116c8:	e7d5      	b.n	8011676 <_strtod_l+0x8e6>
 80116ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116cc:	ea13 0f0a 	tst.w	r3, sl
 80116d0:	e7e0      	b.n	8011694 <_strtod_l+0x904>
 80116d2:	f7ff fb40 	bl	8010d56 <sulp>
 80116d6:	4602      	mov	r2, r0
 80116d8:	460b      	mov	r3, r1
 80116da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80116de:	f7ee fdeb 	bl	80002b8 <__aeabi_dsub>
 80116e2:	2200      	movs	r2, #0
 80116e4:	2300      	movs	r3, #0
 80116e6:	4682      	mov	sl, r0
 80116e8:	468b      	mov	fp, r1
 80116ea:	f7ef fa05 	bl	8000af8 <__aeabi_dcmpeq>
 80116ee:	2800      	cmp	r0, #0
 80116f0:	d0c1      	beq.n	8011676 <_strtod_l+0x8e6>
 80116f2:	e60e      	b.n	8011312 <_strtod_l+0x582>
 80116f4:	fffffc02 	.word	0xfffffc02
 80116f8:	7ff00000 	.word	0x7ff00000
 80116fc:	39500000 	.word	0x39500000
 8011700:	000fffff 	.word	0x000fffff
 8011704:	7fefffff 	.word	0x7fefffff
 8011708:	08015670 	.word	0x08015670
 801170c:	4631      	mov	r1, r6
 801170e:	4628      	mov	r0, r5
 8011710:	f001 fc38 	bl	8012f84 <__ratio>
 8011714:	ec59 8b10 	vmov	r8, r9, d0
 8011718:	ee10 0a10 	vmov	r0, s0
 801171c:	2200      	movs	r2, #0
 801171e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011722:	4649      	mov	r1, r9
 8011724:	f7ef f9fc 	bl	8000b20 <__aeabi_dcmple>
 8011728:	2800      	cmp	r0, #0
 801172a:	d07c      	beq.n	8011826 <_strtod_l+0xa96>
 801172c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801172e:	2b00      	cmp	r3, #0
 8011730:	d04c      	beq.n	80117cc <_strtod_l+0xa3c>
 8011732:	4b95      	ldr	r3, [pc, #596]	; (8011988 <_strtod_l+0xbf8>)
 8011734:	2200      	movs	r2, #0
 8011736:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801173a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011988 <_strtod_l+0xbf8>
 801173e:	f04f 0800 	mov.w	r8, #0
 8011742:	4b92      	ldr	r3, [pc, #584]	; (801198c <_strtod_l+0xbfc>)
 8011744:	403b      	ands	r3, r7
 8011746:	9311      	str	r3, [sp, #68]	; 0x44
 8011748:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801174a:	4b91      	ldr	r3, [pc, #580]	; (8011990 <_strtod_l+0xc00>)
 801174c:	429a      	cmp	r2, r3
 801174e:	f040 80b2 	bne.w	80118b6 <_strtod_l+0xb26>
 8011752:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801175a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801175e:	ec4b ab10 	vmov	d0, sl, fp
 8011762:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8011766:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801176a:	f001 fb33 	bl	8012dd4 <__ulp>
 801176e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011772:	ec53 2b10 	vmov	r2, r3, d0
 8011776:	f7ee ff57 	bl	8000628 <__aeabi_dmul>
 801177a:	4652      	mov	r2, sl
 801177c:	465b      	mov	r3, fp
 801177e:	f7ee fd9d 	bl	80002bc <__adddf3>
 8011782:	460b      	mov	r3, r1
 8011784:	4981      	ldr	r1, [pc, #516]	; (801198c <_strtod_l+0xbfc>)
 8011786:	4a83      	ldr	r2, [pc, #524]	; (8011994 <_strtod_l+0xc04>)
 8011788:	4019      	ands	r1, r3
 801178a:	4291      	cmp	r1, r2
 801178c:	4682      	mov	sl, r0
 801178e:	d95e      	bls.n	801184e <_strtod_l+0xabe>
 8011790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011792:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011796:	4293      	cmp	r3, r2
 8011798:	d103      	bne.n	80117a2 <_strtod_l+0xa12>
 801179a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801179c:	3301      	adds	r3, #1
 801179e:	f43f ad43 	beq.w	8011228 <_strtod_l+0x498>
 80117a2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80119a0 <_strtod_l+0xc10>
 80117a6:	f04f 3aff 	mov.w	sl, #4294967295
 80117aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80117ac:	4620      	mov	r0, r4
 80117ae:	f000 ffe5 	bl	801277c <_Bfree>
 80117b2:	9907      	ldr	r1, [sp, #28]
 80117b4:	4620      	mov	r0, r4
 80117b6:	f000 ffe1 	bl	801277c <_Bfree>
 80117ba:	4631      	mov	r1, r6
 80117bc:	4620      	mov	r0, r4
 80117be:	f000 ffdd 	bl	801277c <_Bfree>
 80117c2:	4629      	mov	r1, r5
 80117c4:	4620      	mov	r0, r4
 80117c6:	f000 ffd9 	bl	801277c <_Bfree>
 80117ca:	e613      	b.n	80113f4 <_strtod_l+0x664>
 80117cc:	f1ba 0f00 	cmp.w	sl, #0
 80117d0:	d11b      	bne.n	801180a <_strtod_l+0xa7a>
 80117d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80117d6:	b9f3      	cbnz	r3, 8011816 <_strtod_l+0xa86>
 80117d8:	4b6b      	ldr	r3, [pc, #428]	; (8011988 <_strtod_l+0xbf8>)
 80117da:	2200      	movs	r2, #0
 80117dc:	4640      	mov	r0, r8
 80117de:	4649      	mov	r1, r9
 80117e0:	f7ef f994 	bl	8000b0c <__aeabi_dcmplt>
 80117e4:	b9d0      	cbnz	r0, 801181c <_strtod_l+0xa8c>
 80117e6:	4640      	mov	r0, r8
 80117e8:	4649      	mov	r1, r9
 80117ea:	4b6b      	ldr	r3, [pc, #428]	; (8011998 <_strtod_l+0xc08>)
 80117ec:	2200      	movs	r2, #0
 80117ee:	f7ee ff1b 	bl	8000628 <__aeabi_dmul>
 80117f2:	4680      	mov	r8, r0
 80117f4:	4689      	mov	r9, r1
 80117f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80117fa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80117fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8011800:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8011804:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011808:	e79b      	b.n	8011742 <_strtod_l+0x9b2>
 801180a:	f1ba 0f01 	cmp.w	sl, #1
 801180e:	d102      	bne.n	8011816 <_strtod_l+0xa86>
 8011810:	2f00      	cmp	r7, #0
 8011812:	f43f ad7e 	beq.w	8011312 <_strtod_l+0x582>
 8011816:	4b61      	ldr	r3, [pc, #388]	; (801199c <_strtod_l+0xc0c>)
 8011818:	2200      	movs	r2, #0
 801181a:	e78c      	b.n	8011736 <_strtod_l+0x9a6>
 801181c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011998 <_strtod_l+0xc08>
 8011820:	f04f 0800 	mov.w	r8, #0
 8011824:	e7e7      	b.n	80117f6 <_strtod_l+0xa66>
 8011826:	4b5c      	ldr	r3, [pc, #368]	; (8011998 <_strtod_l+0xc08>)
 8011828:	4640      	mov	r0, r8
 801182a:	4649      	mov	r1, r9
 801182c:	2200      	movs	r2, #0
 801182e:	f7ee fefb 	bl	8000628 <__aeabi_dmul>
 8011832:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011834:	4680      	mov	r8, r0
 8011836:	4689      	mov	r9, r1
 8011838:	b933      	cbnz	r3, 8011848 <_strtod_l+0xab8>
 801183a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801183e:	9012      	str	r0, [sp, #72]	; 0x48
 8011840:	9313      	str	r3, [sp, #76]	; 0x4c
 8011842:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011846:	e7dd      	b.n	8011804 <_strtod_l+0xa74>
 8011848:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801184c:	e7f9      	b.n	8011842 <_strtod_l+0xab2>
 801184e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011852:	9b04      	ldr	r3, [sp, #16]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d1a8      	bne.n	80117aa <_strtod_l+0xa1a>
 8011858:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801185c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801185e:	0d1b      	lsrs	r3, r3, #20
 8011860:	051b      	lsls	r3, r3, #20
 8011862:	429a      	cmp	r2, r3
 8011864:	d1a1      	bne.n	80117aa <_strtod_l+0xa1a>
 8011866:	4640      	mov	r0, r8
 8011868:	4649      	mov	r1, r9
 801186a:	f7ef fa27 	bl	8000cbc <__aeabi_d2lz>
 801186e:	f7ee fead 	bl	80005cc <__aeabi_l2d>
 8011872:	4602      	mov	r2, r0
 8011874:	460b      	mov	r3, r1
 8011876:	4640      	mov	r0, r8
 8011878:	4649      	mov	r1, r9
 801187a:	f7ee fd1d 	bl	80002b8 <__aeabi_dsub>
 801187e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011880:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011884:	ea43 030a 	orr.w	r3, r3, sl
 8011888:	4313      	orrs	r3, r2
 801188a:	4680      	mov	r8, r0
 801188c:	4689      	mov	r9, r1
 801188e:	d053      	beq.n	8011938 <_strtod_l+0xba8>
 8011890:	a335      	add	r3, pc, #212	; (adr r3, 8011968 <_strtod_l+0xbd8>)
 8011892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011896:	f7ef f939 	bl	8000b0c <__aeabi_dcmplt>
 801189a:	2800      	cmp	r0, #0
 801189c:	f47f acce 	bne.w	801123c <_strtod_l+0x4ac>
 80118a0:	a333      	add	r3, pc, #204	; (adr r3, 8011970 <_strtod_l+0xbe0>)
 80118a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a6:	4640      	mov	r0, r8
 80118a8:	4649      	mov	r1, r9
 80118aa:	f7ef f94d 	bl	8000b48 <__aeabi_dcmpgt>
 80118ae:	2800      	cmp	r0, #0
 80118b0:	f43f af7b 	beq.w	80117aa <_strtod_l+0xa1a>
 80118b4:	e4c2      	b.n	801123c <_strtod_l+0x4ac>
 80118b6:	9b04      	ldr	r3, [sp, #16]
 80118b8:	b333      	cbz	r3, 8011908 <_strtod_l+0xb78>
 80118ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80118bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80118c0:	d822      	bhi.n	8011908 <_strtod_l+0xb78>
 80118c2:	a32d      	add	r3, pc, #180	; (adr r3, 8011978 <_strtod_l+0xbe8>)
 80118c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c8:	4640      	mov	r0, r8
 80118ca:	4649      	mov	r1, r9
 80118cc:	f7ef f928 	bl	8000b20 <__aeabi_dcmple>
 80118d0:	b1a0      	cbz	r0, 80118fc <_strtod_l+0xb6c>
 80118d2:	4649      	mov	r1, r9
 80118d4:	4640      	mov	r0, r8
 80118d6:	f7ef f969 	bl	8000bac <__aeabi_d2uiz>
 80118da:	2801      	cmp	r0, #1
 80118dc:	bf38      	it	cc
 80118de:	2001      	movcc	r0, #1
 80118e0:	f7ee fe28 	bl	8000534 <__aeabi_ui2d>
 80118e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118e6:	4680      	mov	r8, r0
 80118e8:	4689      	mov	r9, r1
 80118ea:	bb13      	cbnz	r3, 8011932 <_strtod_l+0xba2>
 80118ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80118f0:	9014      	str	r0, [sp, #80]	; 0x50
 80118f2:	9315      	str	r3, [sp, #84]	; 0x54
 80118f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80118f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80118fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011900:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011904:	1a9b      	subs	r3, r3, r2
 8011906:	930d      	str	r3, [sp, #52]	; 0x34
 8011908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801190c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011910:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011914:	f001 fa5e 	bl	8012dd4 <__ulp>
 8011918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801191c:	ec53 2b10 	vmov	r2, r3, d0
 8011920:	f7ee fe82 	bl	8000628 <__aeabi_dmul>
 8011924:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011928:	f7ee fcc8 	bl	80002bc <__adddf3>
 801192c:	4682      	mov	sl, r0
 801192e:	468b      	mov	fp, r1
 8011930:	e78f      	b.n	8011852 <_strtod_l+0xac2>
 8011932:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011936:	e7dd      	b.n	80118f4 <_strtod_l+0xb64>
 8011938:	a311      	add	r3, pc, #68	; (adr r3, 8011980 <_strtod_l+0xbf0>)
 801193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193e:	f7ef f8e5 	bl	8000b0c <__aeabi_dcmplt>
 8011942:	e7b4      	b.n	80118ae <_strtod_l+0xb1e>
 8011944:	2300      	movs	r3, #0
 8011946:	930e      	str	r3, [sp, #56]	; 0x38
 8011948:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801194a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801194c:	6013      	str	r3, [r2, #0]
 801194e:	f7ff ba65 	b.w	8010e1c <_strtod_l+0x8c>
 8011952:	2b65      	cmp	r3, #101	; 0x65
 8011954:	f43f ab5d 	beq.w	8011012 <_strtod_l+0x282>
 8011958:	2b45      	cmp	r3, #69	; 0x45
 801195a:	f43f ab5a 	beq.w	8011012 <_strtod_l+0x282>
 801195e:	2201      	movs	r2, #1
 8011960:	f7ff bb92 	b.w	8011088 <_strtod_l+0x2f8>
 8011964:	f3af 8000 	nop.w
 8011968:	94a03595 	.word	0x94a03595
 801196c:	3fdfffff 	.word	0x3fdfffff
 8011970:	35afe535 	.word	0x35afe535
 8011974:	3fe00000 	.word	0x3fe00000
 8011978:	ffc00000 	.word	0xffc00000
 801197c:	41dfffff 	.word	0x41dfffff
 8011980:	94a03595 	.word	0x94a03595
 8011984:	3fcfffff 	.word	0x3fcfffff
 8011988:	3ff00000 	.word	0x3ff00000
 801198c:	7ff00000 	.word	0x7ff00000
 8011990:	7fe00000 	.word	0x7fe00000
 8011994:	7c9fffff 	.word	0x7c9fffff
 8011998:	3fe00000 	.word	0x3fe00000
 801199c:	bff00000 	.word	0xbff00000
 80119a0:	7fefffff 	.word	0x7fefffff

080119a4 <strtod>:
 80119a4:	460a      	mov	r2, r1
 80119a6:	4601      	mov	r1, r0
 80119a8:	4802      	ldr	r0, [pc, #8]	; (80119b4 <strtod+0x10>)
 80119aa:	4b03      	ldr	r3, [pc, #12]	; (80119b8 <strtod+0x14>)
 80119ac:	6800      	ldr	r0, [r0, #0]
 80119ae:	f7ff b9ef 	b.w	8010d90 <_strtod_l>
 80119b2:	bf00      	nop
 80119b4:	20000180 	.word	0x20000180
 80119b8:	200001e8 	.word	0x200001e8

080119bc <__swbuf_r>:
 80119bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119be:	460e      	mov	r6, r1
 80119c0:	4614      	mov	r4, r2
 80119c2:	4605      	mov	r5, r0
 80119c4:	b118      	cbz	r0, 80119ce <__swbuf_r+0x12>
 80119c6:	6983      	ldr	r3, [r0, #24]
 80119c8:	b90b      	cbnz	r3, 80119ce <__swbuf_r+0x12>
 80119ca:	f000 f9f3 	bl	8011db4 <__sinit>
 80119ce:	4b21      	ldr	r3, [pc, #132]	; (8011a54 <__swbuf_r+0x98>)
 80119d0:	429c      	cmp	r4, r3
 80119d2:	d12b      	bne.n	8011a2c <__swbuf_r+0x70>
 80119d4:	686c      	ldr	r4, [r5, #4]
 80119d6:	69a3      	ldr	r3, [r4, #24]
 80119d8:	60a3      	str	r3, [r4, #8]
 80119da:	89a3      	ldrh	r3, [r4, #12]
 80119dc:	071a      	lsls	r2, r3, #28
 80119de:	d52f      	bpl.n	8011a40 <__swbuf_r+0x84>
 80119e0:	6923      	ldr	r3, [r4, #16]
 80119e2:	b36b      	cbz	r3, 8011a40 <__swbuf_r+0x84>
 80119e4:	6923      	ldr	r3, [r4, #16]
 80119e6:	6820      	ldr	r0, [r4, #0]
 80119e8:	1ac0      	subs	r0, r0, r3
 80119ea:	6963      	ldr	r3, [r4, #20]
 80119ec:	b2f6      	uxtb	r6, r6
 80119ee:	4283      	cmp	r3, r0
 80119f0:	4637      	mov	r7, r6
 80119f2:	dc04      	bgt.n	80119fe <__swbuf_r+0x42>
 80119f4:	4621      	mov	r1, r4
 80119f6:	4628      	mov	r0, r5
 80119f8:	f000 f948 	bl	8011c8c <_fflush_r>
 80119fc:	bb30      	cbnz	r0, 8011a4c <__swbuf_r+0x90>
 80119fe:	68a3      	ldr	r3, [r4, #8]
 8011a00:	3b01      	subs	r3, #1
 8011a02:	60a3      	str	r3, [r4, #8]
 8011a04:	6823      	ldr	r3, [r4, #0]
 8011a06:	1c5a      	adds	r2, r3, #1
 8011a08:	6022      	str	r2, [r4, #0]
 8011a0a:	701e      	strb	r6, [r3, #0]
 8011a0c:	6963      	ldr	r3, [r4, #20]
 8011a0e:	3001      	adds	r0, #1
 8011a10:	4283      	cmp	r3, r0
 8011a12:	d004      	beq.n	8011a1e <__swbuf_r+0x62>
 8011a14:	89a3      	ldrh	r3, [r4, #12]
 8011a16:	07db      	lsls	r3, r3, #31
 8011a18:	d506      	bpl.n	8011a28 <__swbuf_r+0x6c>
 8011a1a:	2e0a      	cmp	r6, #10
 8011a1c:	d104      	bne.n	8011a28 <__swbuf_r+0x6c>
 8011a1e:	4621      	mov	r1, r4
 8011a20:	4628      	mov	r0, r5
 8011a22:	f000 f933 	bl	8011c8c <_fflush_r>
 8011a26:	b988      	cbnz	r0, 8011a4c <__swbuf_r+0x90>
 8011a28:	4638      	mov	r0, r7
 8011a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a2c:	4b0a      	ldr	r3, [pc, #40]	; (8011a58 <__swbuf_r+0x9c>)
 8011a2e:	429c      	cmp	r4, r3
 8011a30:	d101      	bne.n	8011a36 <__swbuf_r+0x7a>
 8011a32:	68ac      	ldr	r4, [r5, #8]
 8011a34:	e7cf      	b.n	80119d6 <__swbuf_r+0x1a>
 8011a36:	4b09      	ldr	r3, [pc, #36]	; (8011a5c <__swbuf_r+0xa0>)
 8011a38:	429c      	cmp	r4, r3
 8011a3a:	bf08      	it	eq
 8011a3c:	68ec      	ldreq	r4, [r5, #12]
 8011a3e:	e7ca      	b.n	80119d6 <__swbuf_r+0x1a>
 8011a40:	4621      	mov	r1, r4
 8011a42:	4628      	mov	r0, r5
 8011a44:	f000 f81e 	bl	8011a84 <__swsetup_r>
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d0cb      	beq.n	80119e4 <__swbuf_r+0x28>
 8011a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8011a50:	e7ea      	b.n	8011a28 <__swbuf_r+0x6c>
 8011a52:	bf00      	nop
 8011a54:	080156b8 	.word	0x080156b8
 8011a58:	080156d8 	.word	0x080156d8
 8011a5c:	08015698 	.word	0x08015698

08011a60 <_write_r>:
 8011a60:	b538      	push	{r3, r4, r5, lr}
 8011a62:	4d07      	ldr	r5, [pc, #28]	; (8011a80 <_write_r+0x20>)
 8011a64:	4604      	mov	r4, r0
 8011a66:	4608      	mov	r0, r1
 8011a68:	4611      	mov	r1, r2
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	602a      	str	r2, [r5, #0]
 8011a6e:	461a      	mov	r2, r3
 8011a70:	f7f1 fa87 	bl	8002f82 <_write>
 8011a74:	1c43      	adds	r3, r0, #1
 8011a76:	d102      	bne.n	8011a7e <_write_r+0x1e>
 8011a78:	682b      	ldr	r3, [r5, #0]
 8011a7a:	b103      	cbz	r3, 8011a7e <_write_r+0x1e>
 8011a7c:	6023      	str	r3, [r4, #0]
 8011a7e:	bd38      	pop	{r3, r4, r5, pc}
 8011a80:	200038fc 	.word	0x200038fc

08011a84 <__swsetup_r>:
 8011a84:	4b32      	ldr	r3, [pc, #200]	; (8011b50 <__swsetup_r+0xcc>)
 8011a86:	b570      	push	{r4, r5, r6, lr}
 8011a88:	681d      	ldr	r5, [r3, #0]
 8011a8a:	4606      	mov	r6, r0
 8011a8c:	460c      	mov	r4, r1
 8011a8e:	b125      	cbz	r5, 8011a9a <__swsetup_r+0x16>
 8011a90:	69ab      	ldr	r3, [r5, #24]
 8011a92:	b913      	cbnz	r3, 8011a9a <__swsetup_r+0x16>
 8011a94:	4628      	mov	r0, r5
 8011a96:	f000 f98d 	bl	8011db4 <__sinit>
 8011a9a:	4b2e      	ldr	r3, [pc, #184]	; (8011b54 <__swsetup_r+0xd0>)
 8011a9c:	429c      	cmp	r4, r3
 8011a9e:	d10f      	bne.n	8011ac0 <__swsetup_r+0x3c>
 8011aa0:	686c      	ldr	r4, [r5, #4]
 8011aa2:	89a3      	ldrh	r3, [r4, #12]
 8011aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011aa8:	0719      	lsls	r1, r3, #28
 8011aaa:	d42c      	bmi.n	8011b06 <__swsetup_r+0x82>
 8011aac:	06dd      	lsls	r5, r3, #27
 8011aae:	d411      	bmi.n	8011ad4 <__swsetup_r+0x50>
 8011ab0:	2309      	movs	r3, #9
 8011ab2:	6033      	str	r3, [r6, #0]
 8011ab4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011ab8:	81a3      	strh	r3, [r4, #12]
 8011aba:	f04f 30ff 	mov.w	r0, #4294967295
 8011abe:	e03e      	b.n	8011b3e <__swsetup_r+0xba>
 8011ac0:	4b25      	ldr	r3, [pc, #148]	; (8011b58 <__swsetup_r+0xd4>)
 8011ac2:	429c      	cmp	r4, r3
 8011ac4:	d101      	bne.n	8011aca <__swsetup_r+0x46>
 8011ac6:	68ac      	ldr	r4, [r5, #8]
 8011ac8:	e7eb      	b.n	8011aa2 <__swsetup_r+0x1e>
 8011aca:	4b24      	ldr	r3, [pc, #144]	; (8011b5c <__swsetup_r+0xd8>)
 8011acc:	429c      	cmp	r4, r3
 8011ace:	bf08      	it	eq
 8011ad0:	68ec      	ldreq	r4, [r5, #12]
 8011ad2:	e7e6      	b.n	8011aa2 <__swsetup_r+0x1e>
 8011ad4:	0758      	lsls	r0, r3, #29
 8011ad6:	d512      	bpl.n	8011afe <__swsetup_r+0x7a>
 8011ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ada:	b141      	cbz	r1, 8011aee <__swsetup_r+0x6a>
 8011adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ae0:	4299      	cmp	r1, r3
 8011ae2:	d002      	beq.n	8011aea <__swsetup_r+0x66>
 8011ae4:	4630      	mov	r0, r6
 8011ae6:	f7fe fdd3 	bl	8010690 <_free_r>
 8011aea:	2300      	movs	r3, #0
 8011aec:	6363      	str	r3, [r4, #52]	; 0x34
 8011aee:	89a3      	ldrh	r3, [r4, #12]
 8011af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011af4:	81a3      	strh	r3, [r4, #12]
 8011af6:	2300      	movs	r3, #0
 8011af8:	6063      	str	r3, [r4, #4]
 8011afa:	6923      	ldr	r3, [r4, #16]
 8011afc:	6023      	str	r3, [r4, #0]
 8011afe:	89a3      	ldrh	r3, [r4, #12]
 8011b00:	f043 0308 	orr.w	r3, r3, #8
 8011b04:	81a3      	strh	r3, [r4, #12]
 8011b06:	6923      	ldr	r3, [r4, #16]
 8011b08:	b94b      	cbnz	r3, 8011b1e <__swsetup_r+0x9a>
 8011b0a:	89a3      	ldrh	r3, [r4, #12]
 8011b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b14:	d003      	beq.n	8011b1e <__swsetup_r+0x9a>
 8011b16:	4621      	mov	r1, r4
 8011b18:	4630      	mov	r0, r6
 8011b1a:	f000 fd91 	bl	8012640 <__smakebuf_r>
 8011b1e:	89a0      	ldrh	r0, [r4, #12]
 8011b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b24:	f010 0301 	ands.w	r3, r0, #1
 8011b28:	d00a      	beq.n	8011b40 <__swsetup_r+0xbc>
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	60a3      	str	r3, [r4, #8]
 8011b2e:	6963      	ldr	r3, [r4, #20]
 8011b30:	425b      	negs	r3, r3
 8011b32:	61a3      	str	r3, [r4, #24]
 8011b34:	6923      	ldr	r3, [r4, #16]
 8011b36:	b943      	cbnz	r3, 8011b4a <__swsetup_r+0xc6>
 8011b38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b3c:	d1ba      	bne.n	8011ab4 <__swsetup_r+0x30>
 8011b3e:	bd70      	pop	{r4, r5, r6, pc}
 8011b40:	0781      	lsls	r1, r0, #30
 8011b42:	bf58      	it	pl
 8011b44:	6963      	ldrpl	r3, [r4, #20]
 8011b46:	60a3      	str	r3, [r4, #8]
 8011b48:	e7f4      	b.n	8011b34 <__swsetup_r+0xb0>
 8011b4a:	2000      	movs	r0, #0
 8011b4c:	e7f7      	b.n	8011b3e <__swsetup_r+0xba>
 8011b4e:	bf00      	nop
 8011b50:	20000180 	.word	0x20000180
 8011b54:	080156b8 	.word	0x080156b8
 8011b58:	080156d8 	.word	0x080156d8
 8011b5c:	08015698 	.word	0x08015698

08011b60 <_close_r>:
 8011b60:	b538      	push	{r3, r4, r5, lr}
 8011b62:	4d06      	ldr	r5, [pc, #24]	; (8011b7c <_close_r+0x1c>)
 8011b64:	2300      	movs	r3, #0
 8011b66:	4604      	mov	r4, r0
 8011b68:	4608      	mov	r0, r1
 8011b6a:	602b      	str	r3, [r5, #0]
 8011b6c:	f7f1 fa25 	bl	8002fba <_close>
 8011b70:	1c43      	adds	r3, r0, #1
 8011b72:	d102      	bne.n	8011b7a <_close_r+0x1a>
 8011b74:	682b      	ldr	r3, [r5, #0]
 8011b76:	b103      	cbz	r3, 8011b7a <_close_r+0x1a>
 8011b78:	6023      	str	r3, [r4, #0]
 8011b7a:	bd38      	pop	{r3, r4, r5, pc}
 8011b7c:	200038fc 	.word	0x200038fc

08011b80 <__sflush_r>:
 8011b80:	898a      	ldrh	r2, [r1, #12]
 8011b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b86:	4605      	mov	r5, r0
 8011b88:	0710      	lsls	r0, r2, #28
 8011b8a:	460c      	mov	r4, r1
 8011b8c:	d458      	bmi.n	8011c40 <__sflush_r+0xc0>
 8011b8e:	684b      	ldr	r3, [r1, #4]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	dc05      	bgt.n	8011ba0 <__sflush_r+0x20>
 8011b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	dc02      	bgt.n	8011ba0 <__sflush_r+0x20>
 8011b9a:	2000      	movs	r0, #0
 8011b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ba2:	2e00      	cmp	r6, #0
 8011ba4:	d0f9      	beq.n	8011b9a <__sflush_r+0x1a>
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bac:	682f      	ldr	r7, [r5, #0]
 8011bae:	602b      	str	r3, [r5, #0]
 8011bb0:	d032      	beq.n	8011c18 <__sflush_r+0x98>
 8011bb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011bb4:	89a3      	ldrh	r3, [r4, #12]
 8011bb6:	075a      	lsls	r2, r3, #29
 8011bb8:	d505      	bpl.n	8011bc6 <__sflush_r+0x46>
 8011bba:	6863      	ldr	r3, [r4, #4]
 8011bbc:	1ac0      	subs	r0, r0, r3
 8011bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bc0:	b10b      	cbz	r3, 8011bc6 <__sflush_r+0x46>
 8011bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011bc4:	1ac0      	subs	r0, r0, r3
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	4602      	mov	r2, r0
 8011bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bcc:	6a21      	ldr	r1, [r4, #32]
 8011bce:	4628      	mov	r0, r5
 8011bd0:	47b0      	blx	r6
 8011bd2:	1c43      	adds	r3, r0, #1
 8011bd4:	89a3      	ldrh	r3, [r4, #12]
 8011bd6:	d106      	bne.n	8011be6 <__sflush_r+0x66>
 8011bd8:	6829      	ldr	r1, [r5, #0]
 8011bda:	291d      	cmp	r1, #29
 8011bdc:	d82c      	bhi.n	8011c38 <__sflush_r+0xb8>
 8011bde:	4a2a      	ldr	r2, [pc, #168]	; (8011c88 <__sflush_r+0x108>)
 8011be0:	40ca      	lsrs	r2, r1
 8011be2:	07d6      	lsls	r6, r2, #31
 8011be4:	d528      	bpl.n	8011c38 <__sflush_r+0xb8>
 8011be6:	2200      	movs	r2, #0
 8011be8:	6062      	str	r2, [r4, #4]
 8011bea:	04d9      	lsls	r1, r3, #19
 8011bec:	6922      	ldr	r2, [r4, #16]
 8011bee:	6022      	str	r2, [r4, #0]
 8011bf0:	d504      	bpl.n	8011bfc <__sflush_r+0x7c>
 8011bf2:	1c42      	adds	r2, r0, #1
 8011bf4:	d101      	bne.n	8011bfa <__sflush_r+0x7a>
 8011bf6:	682b      	ldr	r3, [r5, #0]
 8011bf8:	b903      	cbnz	r3, 8011bfc <__sflush_r+0x7c>
 8011bfa:	6560      	str	r0, [r4, #84]	; 0x54
 8011bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bfe:	602f      	str	r7, [r5, #0]
 8011c00:	2900      	cmp	r1, #0
 8011c02:	d0ca      	beq.n	8011b9a <__sflush_r+0x1a>
 8011c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c08:	4299      	cmp	r1, r3
 8011c0a:	d002      	beq.n	8011c12 <__sflush_r+0x92>
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	f7fe fd3f 	bl	8010690 <_free_r>
 8011c12:	2000      	movs	r0, #0
 8011c14:	6360      	str	r0, [r4, #52]	; 0x34
 8011c16:	e7c1      	b.n	8011b9c <__sflush_r+0x1c>
 8011c18:	6a21      	ldr	r1, [r4, #32]
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	4628      	mov	r0, r5
 8011c1e:	47b0      	blx	r6
 8011c20:	1c41      	adds	r1, r0, #1
 8011c22:	d1c7      	bne.n	8011bb4 <__sflush_r+0x34>
 8011c24:	682b      	ldr	r3, [r5, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d0c4      	beq.n	8011bb4 <__sflush_r+0x34>
 8011c2a:	2b1d      	cmp	r3, #29
 8011c2c:	d001      	beq.n	8011c32 <__sflush_r+0xb2>
 8011c2e:	2b16      	cmp	r3, #22
 8011c30:	d101      	bne.n	8011c36 <__sflush_r+0xb6>
 8011c32:	602f      	str	r7, [r5, #0]
 8011c34:	e7b1      	b.n	8011b9a <__sflush_r+0x1a>
 8011c36:	89a3      	ldrh	r3, [r4, #12]
 8011c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c3c:	81a3      	strh	r3, [r4, #12]
 8011c3e:	e7ad      	b.n	8011b9c <__sflush_r+0x1c>
 8011c40:	690f      	ldr	r7, [r1, #16]
 8011c42:	2f00      	cmp	r7, #0
 8011c44:	d0a9      	beq.n	8011b9a <__sflush_r+0x1a>
 8011c46:	0793      	lsls	r3, r2, #30
 8011c48:	680e      	ldr	r6, [r1, #0]
 8011c4a:	bf08      	it	eq
 8011c4c:	694b      	ldreq	r3, [r1, #20]
 8011c4e:	600f      	str	r7, [r1, #0]
 8011c50:	bf18      	it	ne
 8011c52:	2300      	movne	r3, #0
 8011c54:	eba6 0807 	sub.w	r8, r6, r7
 8011c58:	608b      	str	r3, [r1, #8]
 8011c5a:	f1b8 0f00 	cmp.w	r8, #0
 8011c5e:	dd9c      	ble.n	8011b9a <__sflush_r+0x1a>
 8011c60:	6a21      	ldr	r1, [r4, #32]
 8011c62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c64:	4643      	mov	r3, r8
 8011c66:	463a      	mov	r2, r7
 8011c68:	4628      	mov	r0, r5
 8011c6a:	47b0      	blx	r6
 8011c6c:	2800      	cmp	r0, #0
 8011c6e:	dc06      	bgt.n	8011c7e <__sflush_r+0xfe>
 8011c70:	89a3      	ldrh	r3, [r4, #12]
 8011c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c76:	81a3      	strh	r3, [r4, #12]
 8011c78:	f04f 30ff 	mov.w	r0, #4294967295
 8011c7c:	e78e      	b.n	8011b9c <__sflush_r+0x1c>
 8011c7e:	4407      	add	r7, r0
 8011c80:	eba8 0800 	sub.w	r8, r8, r0
 8011c84:	e7e9      	b.n	8011c5a <__sflush_r+0xda>
 8011c86:	bf00      	nop
 8011c88:	20400001 	.word	0x20400001

08011c8c <_fflush_r>:
 8011c8c:	b538      	push	{r3, r4, r5, lr}
 8011c8e:	690b      	ldr	r3, [r1, #16]
 8011c90:	4605      	mov	r5, r0
 8011c92:	460c      	mov	r4, r1
 8011c94:	b913      	cbnz	r3, 8011c9c <_fflush_r+0x10>
 8011c96:	2500      	movs	r5, #0
 8011c98:	4628      	mov	r0, r5
 8011c9a:	bd38      	pop	{r3, r4, r5, pc}
 8011c9c:	b118      	cbz	r0, 8011ca6 <_fflush_r+0x1a>
 8011c9e:	6983      	ldr	r3, [r0, #24]
 8011ca0:	b90b      	cbnz	r3, 8011ca6 <_fflush_r+0x1a>
 8011ca2:	f000 f887 	bl	8011db4 <__sinit>
 8011ca6:	4b14      	ldr	r3, [pc, #80]	; (8011cf8 <_fflush_r+0x6c>)
 8011ca8:	429c      	cmp	r4, r3
 8011caa:	d11b      	bne.n	8011ce4 <_fflush_r+0x58>
 8011cac:	686c      	ldr	r4, [r5, #4]
 8011cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d0ef      	beq.n	8011c96 <_fflush_r+0xa>
 8011cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011cb8:	07d0      	lsls	r0, r2, #31
 8011cba:	d404      	bmi.n	8011cc6 <_fflush_r+0x3a>
 8011cbc:	0599      	lsls	r1, r3, #22
 8011cbe:	d402      	bmi.n	8011cc6 <_fflush_r+0x3a>
 8011cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cc2:	f000 fc84 	bl	80125ce <__retarget_lock_acquire_recursive>
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	4621      	mov	r1, r4
 8011cca:	f7ff ff59 	bl	8011b80 <__sflush_r>
 8011cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cd0:	07da      	lsls	r2, r3, #31
 8011cd2:	4605      	mov	r5, r0
 8011cd4:	d4e0      	bmi.n	8011c98 <_fflush_r+0xc>
 8011cd6:	89a3      	ldrh	r3, [r4, #12]
 8011cd8:	059b      	lsls	r3, r3, #22
 8011cda:	d4dd      	bmi.n	8011c98 <_fflush_r+0xc>
 8011cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cde:	f000 fc77 	bl	80125d0 <__retarget_lock_release_recursive>
 8011ce2:	e7d9      	b.n	8011c98 <_fflush_r+0xc>
 8011ce4:	4b05      	ldr	r3, [pc, #20]	; (8011cfc <_fflush_r+0x70>)
 8011ce6:	429c      	cmp	r4, r3
 8011ce8:	d101      	bne.n	8011cee <_fflush_r+0x62>
 8011cea:	68ac      	ldr	r4, [r5, #8]
 8011cec:	e7df      	b.n	8011cae <_fflush_r+0x22>
 8011cee:	4b04      	ldr	r3, [pc, #16]	; (8011d00 <_fflush_r+0x74>)
 8011cf0:	429c      	cmp	r4, r3
 8011cf2:	bf08      	it	eq
 8011cf4:	68ec      	ldreq	r4, [r5, #12]
 8011cf6:	e7da      	b.n	8011cae <_fflush_r+0x22>
 8011cf8:	080156b8 	.word	0x080156b8
 8011cfc:	080156d8 	.word	0x080156d8
 8011d00:	08015698 	.word	0x08015698

08011d04 <std>:
 8011d04:	2300      	movs	r3, #0
 8011d06:	b510      	push	{r4, lr}
 8011d08:	4604      	mov	r4, r0
 8011d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8011d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d12:	6083      	str	r3, [r0, #8]
 8011d14:	8181      	strh	r1, [r0, #12]
 8011d16:	6643      	str	r3, [r0, #100]	; 0x64
 8011d18:	81c2      	strh	r2, [r0, #14]
 8011d1a:	6183      	str	r3, [r0, #24]
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	2208      	movs	r2, #8
 8011d20:	305c      	adds	r0, #92	; 0x5c
 8011d22:	f7fe fcad 	bl	8010680 <memset>
 8011d26:	4b05      	ldr	r3, [pc, #20]	; (8011d3c <std+0x38>)
 8011d28:	6263      	str	r3, [r4, #36]	; 0x24
 8011d2a:	4b05      	ldr	r3, [pc, #20]	; (8011d40 <std+0x3c>)
 8011d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d2e:	4b05      	ldr	r3, [pc, #20]	; (8011d44 <std+0x40>)
 8011d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d32:	4b05      	ldr	r3, [pc, #20]	; (8011d48 <std+0x44>)
 8011d34:	6224      	str	r4, [r4, #32]
 8011d36:	6323      	str	r3, [r4, #48]	; 0x30
 8011d38:	bd10      	pop	{r4, pc}
 8011d3a:	bf00      	nop
 8011d3c:	08010cad 	.word	0x08010cad
 8011d40:	08010ccf 	.word	0x08010ccf
 8011d44:	08010d07 	.word	0x08010d07
 8011d48:	08010d2b 	.word	0x08010d2b

08011d4c <_cleanup_r>:
 8011d4c:	4901      	ldr	r1, [pc, #4]	; (8011d54 <_cleanup_r+0x8>)
 8011d4e:	f000 b8af 	b.w	8011eb0 <_fwalk_reent>
 8011d52:	bf00      	nop
 8011d54:	08011c8d 	.word	0x08011c8d

08011d58 <__sfmoreglue>:
 8011d58:	b570      	push	{r4, r5, r6, lr}
 8011d5a:	1e4a      	subs	r2, r1, #1
 8011d5c:	2568      	movs	r5, #104	; 0x68
 8011d5e:	4355      	muls	r5, r2
 8011d60:	460e      	mov	r6, r1
 8011d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d66:	f7fe fce3 	bl	8010730 <_malloc_r>
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	b140      	cbz	r0, 8011d80 <__sfmoreglue+0x28>
 8011d6e:	2100      	movs	r1, #0
 8011d70:	e9c0 1600 	strd	r1, r6, [r0]
 8011d74:	300c      	adds	r0, #12
 8011d76:	60a0      	str	r0, [r4, #8]
 8011d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011d7c:	f7fe fc80 	bl	8010680 <memset>
 8011d80:	4620      	mov	r0, r4
 8011d82:	bd70      	pop	{r4, r5, r6, pc}

08011d84 <__sfp_lock_acquire>:
 8011d84:	4801      	ldr	r0, [pc, #4]	; (8011d8c <__sfp_lock_acquire+0x8>)
 8011d86:	f000 bc22 	b.w	80125ce <__retarget_lock_acquire_recursive>
 8011d8a:	bf00      	nop
 8011d8c:	200038f8 	.word	0x200038f8

08011d90 <__sfp_lock_release>:
 8011d90:	4801      	ldr	r0, [pc, #4]	; (8011d98 <__sfp_lock_release+0x8>)
 8011d92:	f000 bc1d 	b.w	80125d0 <__retarget_lock_release_recursive>
 8011d96:	bf00      	nop
 8011d98:	200038f8 	.word	0x200038f8

08011d9c <__sinit_lock_acquire>:
 8011d9c:	4801      	ldr	r0, [pc, #4]	; (8011da4 <__sinit_lock_acquire+0x8>)
 8011d9e:	f000 bc16 	b.w	80125ce <__retarget_lock_acquire_recursive>
 8011da2:	bf00      	nop
 8011da4:	200038f3 	.word	0x200038f3

08011da8 <__sinit_lock_release>:
 8011da8:	4801      	ldr	r0, [pc, #4]	; (8011db0 <__sinit_lock_release+0x8>)
 8011daa:	f000 bc11 	b.w	80125d0 <__retarget_lock_release_recursive>
 8011dae:	bf00      	nop
 8011db0:	200038f3 	.word	0x200038f3

08011db4 <__sinit>:
 8011db4:	b510      	push	{r4, lr}
 8011db6:	4604      	mov	r4, r0
 8011db8:	f7ff fff0 	bl	8011d9c <__sinit_lock_acquire>
 8011dbc:	69a3      	ldr	r3, [r4, #24]
 8011dbe:	b11b      	cbz	r3, 8011dc8 <__sinit+0x14>
 8011dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dc4:	f7ff bff0 	b.w	8011da8 <__sinit_lock_release>
 8011dc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011dcc:	6523      	str	r3, [r4, #80]	; 0x50
 8011dce:	4b13      	ldr	r3, [pc, #76]	; (8011e1c <__sinit+0x68>)
 8011dd0:	4a13      	ldr	r2, [pc, #76]	; (8011e20 <__sinit+0x6c>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8011dd6:	42a3      	cmp	r3, r4
 8011dd8:	bf04      	itt	eq
 8011dda:	2301      	moveq	r3, #1
 8011ddc:	61a3      	streq	r3, [r4, #24]
 8011dde:	4620      	mov	r0, r4
 8011de0:	f000 f820 	bl	8011e24 <__sfp>
 8011de4:	6060      	str	r0, [r4, #4]
 8011de6:	4620      	mov	r0, r4
 8011de8:	f000 f81c 	bl	8011e24 <__sfp>
 8011dec:	60a0      	str	r0, [r4, #8]
 8011dee:	4620      	mov	r0, r4
 8011df0:	f000 f818 	bl	8011e24 <__sfp>
 8011df4:	2200      	movs	r2, #0
 8011df6:	60e0      	str	r0, [r4, #12]
 8011df8:	2104      	movs	r1, #4
 8011dfa:	6860      	ldr	r0, [r4, #4]
 8011dfc:	f7ff ff82 	bl	8011d04 <std>
 8011e00:	68a0      	ldr	r0, [r4, #8]
 8011e02:	2201      	movs	r2, #1
 8011e04:	2109      	movs	r1, #9
 8011e06:	f7ff ff7d 	bl	8011d04 <std>
 8011e0a:	68e0      	ldr	r0, [r4, #12]
 8011e0c:	2202      	movs	r2, #2
 8011e0e:	2112      	movs	r1, #18
 8011e10:	f7ff ff78 	bl	8011d04 <std>
 8011e14:	2301      	movs	r3, #1
 8011e16:	61a3      	str	r3, [r4, #24]
 8011e18:	e7d2      	b.n	8011dc0 <__sinit+0xc>
 8011e1a:	bf00      	nop
 8011e1c:	08015638 	.word	0x08015638
 8011e20:	08011d4d 	.word	0x08011d4d

08011e24 <__sfp>:
 8011e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e26:	4607      	mov	r7, r0
 8011e28:	f7ff ffac 	bl	8011d84 <__sfp_lock_acquire>
 8011e2c:	4b1e      	ldr	r3, [pc, #120]	; (8011ea8 <__sfp+0x84>)
 8011e2e:	681e      	ldr	r6, [r3, #0]
 8011e30:	69b3      	ldr	r3, [r6, #24]
 8011e32:	b913      	cbnz	r3, 8011e3a <__sfp+0x16>
 8011e34:	4630      	mov	r0, r6
 8011e36:	f7ff ffbd 	bl	8011db4 <__sinit>
 8011e3a:	3648      	adds	r6, #72	; 0x48
 8011e3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e40:	3b01      	subs	r3, #1
 8011e42:	d503      	bpl.n	8011e4c <__sfp+0x28>
 8011e44:	6833      	ldr	r3, [r6, #0]
 8011e46:	b30b      	cbz	r3, 8011e8c <__sfp+0x68>
 8011e48:	6836      	ldr	r6, [r6, #0]
 8011e4a:	e7f7      	b.n	8011e3c <__sfp+0x18>
 8011e4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e50:	b9d5      	cbnz	r5, 8011e88 <__sfp+0x64>
 8011e52:	4b16      	ldr	r3, [pc, #88]	; (8011eac <__sfp+0x88>)
 8011e54:	60e3      	str	r3, [r4, #12]
 8011e56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e5a:	6665      	str	r5, [r4, #100]	; 0x64
 8011e5c:	f000 fbb6 	bl	80125cc <__retarget_lock_init_recursive>
 8011e60:	f7ff ff96 	bl	8011d90 <__sfp_lock_release>
 8011e64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e6c:	6025      	str	r5, [r4, #0]
 8011e6e:	61a5      	str	r5, [r4, #24]
 8011e70:	2208      	movs	r2, #8
 8011e72:	4629      	mov	r1, r5
 8011e74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011e78:	f7fe fc02 	bl	8010680 <memset>
 8011e7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011e80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011e84:	4620      	mov	r0, r4
 8011e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e88:	3468      	adds	r4, #104	; 0x68
 8011e8a:	e7d9      	b.n	8011e40 <__sfp+0x1c>
 8011e8c:	2104      	movs	r1, #4
 8011e8e:	4638      	mov	r0, r7
 8011e90:	f7ff ff62 	bl	8011d58 <__sfmoreglue>
 8011e94:	4604      	mov	r4, r0
 8011e96:	6030      	str	r0, [r6, #0]
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	d1d5      	bne.n	8011e48 <__sfp+0x24>
 8011e9c:	f7ff ff78 	bl	8011d90 <__sfp_lock_release>
 8011ea0:	230c      	movs	r3, #12
 8011ea2:	603b      	str	r3, [r7, #0]
 8011ea4:	e7ee      	b.n	8011e84 <__sfp+0x60>
 8011ea6:	bf00      	nop
 8011ea8:	08015638 	.word	0x08015638
 8011eac:	ffff0001 	.word	0xffff0001

08011eb0 <_fwalk_reent>:
 8011eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011eb4:	4606      	mov	r6, r0
 8011eb6:	4688      	mov	r8, r1
 8011eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ebc:	2700      	movs	r7, #0
 8011ebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ec2:	f1b9 0901 	subs.w	r9, r9, #1
 8011ec6:	d505      	bpl.n	8011ed4 <_fwalk_reent+0x24>
 8011ec8:	6824      	ldr	r4, [r4, #0]
 8011eca:	2c00      	cmp	r4, #0
 8011ecc:	d1f7      	bne.n	8011ebe <_fwalk_reent+0xe>
 8011ece:	4638      	mov	r0, r7
 8011ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ed4:	89ab      	ldrh	r3, [r5, #12]
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d907      	bls.n	8011eea <_fwalk_reent+0x3a>
 8011eda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ede:	3301      	adds	r3, #1
 8011ee0:	d003      	beq.n	8011eea <_fwalk_reent+0x3a>
 8011ee2:	4629      	mov	r1, r5
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	47c0      	blx	r8
 8011ee8:	4307      	orrs	r7, r0
 8011eea:	3568      	adds	r5, #104	; 0x68
 8011eec:	e7e9      	b.n	8011ec2 <_fwalk_reent+0x12>

08011eee <rshift>:
 8011eee:	6903      	ldr	r3, [r0, #16]
 8011ef0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ef8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011efc:	f100 0414 	add.w	r4, r0, #20
 8011f00:	dd45      	ble.n	8011f8e <rshift+0xa0>
 8011f02:	f011 011f 	ands.w	r1, r1, #31
 8011f06:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011f0a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011f0e:	d10c      	bne.n	8011f2a <rshift+0x3c>
 8011f10:	f100 0710 	add.w	r7, r0, #16
 8011f14:	4629      	mov	r1, r5
 8011f16:	42b1      	cmp	r1, r6
 8011f18:	d334      	bcc.n	8011f84 <rshift+0x96>
 8011f1a:	1a9b      	subs	r3, r3, r2
 8011f1c:	009b      	lsls	r3, r3, #2
 8011f1e:	1eea      	subs	r2, r5, #3
 8011f20:	4296      	cmp	r6, r2
 8011f22:	bf38      	it	cc
 8011f24:	2300      	movcc	r3, #0
 8011f26:	4423      	add	r3, r4
 8011f28:	e015      	b.n	8011f56 <rshift+0x68>
 8011f2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011f2e:	f1c1 0820 	rsb	r8, r1, #32
 8011f32:	40cf      	lsrs	r7, r1
 8011f34:	f105 0e04 	add.w	lr, r5, #4
 8011f38:	46a1      	mov	r9, r4
 8011f3a:	4576      	cmp	r6, lr
 8011f3c:	46f4      	mov	ip, lr
 8011f3e:	d815      	bhi.n	8011f6c <rshift+0x7e>
 8011f40:	1a9b      	subs	r3, r3, r2
 8011f42:	009a      	lsls	r2, r3, #2
 8011f44:	3a04      	subs	r2, #4
 8011f46:	3501      	adds	r5, #1
 8011f48:	42ae      	cmp	r6, r5
 8011f4a:	bf38      	it	cc
 8011f4c:	2200      	movcc	r2, #0
 8011f4e:	18a3      	adds	r3, r4, r2
 8011f50:	50a7      	str	r7, [r4, r2]
 8011f52:	b107      	cbz	r7, 8011f56 <rshift+0x68>
 8011f54:	3304      	adds	r3, #4
 8011f56:	1b1a      	subs	r2, r3, r4
 8011f58:	42a3      	cmp	r3, r4
 8011f5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011f5e:	bf08      	it	eq
 8011f60:	2300      	moveq	r3, #0
 8011f62:	6102      	str	r2, [r0, #16]
 8011f64:	bf08      	it	eq
 8011f66:	6143      	streq	r3, [r0, #20]
 8011f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f6c:	f8dc c000 	ldr.w	ip, [ip]
 8011f70:	fa0c fc08 	lsl.w	ip, ip, r8
 8011f74:	ea4c 0707 	orr.w	r7, ip, r7
 8011f78:	f849 7b04 	str.w	r7, [r9], #4
 8011f7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011f80:	40cf      	lsrs	r7, r1
 8011f82:	e7da      	b.n	8011f3a <rshift+0x4c>
 8011f84:	f851 cb04 	ldr.w	ip, [r1], #4
 8011f88:	f847 cf04 	str.w	ip, [r7, #4]!
 8011f8c:	e7c3      	b.n	8011f16 <rshift+0x28>
 8011f8e:	4623      	mov	r3, r4
 8011f90:	e7e1      	b.n	8011f56 <rshift+0x68>

08011f92 <__hexdig_fun>:
 8011f92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011f96:	2b09      	cmp	r3, #9
 8011f98:	d802      	bhi.n	8011fa0 <__hexdig_fun+0xe>
 8011f9a:	3820      	subs	r0, #32
 8011f9c:	b2c0      	uxtb	r0, r0
 8011f9e:	4770      	bx	lr
 8011fa0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011fa4:	2b05      	cmp	r3, #5
 8011fa6:	d801      	bhi.n	8011fac <__hexdig_fun+0x1a>
 8011fa8:	3847      	subs	r0, #71	; 0x47
 8011faa:	e7f7      	b.n	8011f9c <__hexdig_fun+0xa>
 8011fac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011fb0:	2b05      	cmp	r3, #5
 8011fb2:	d801      	bhi.n	8011fb8 <__hexdig_fun+0x26>
 8011fb4:	3827      	subs	r0, #39	; 0x27
 8011fb6:	e7f1      	b.n	8011f9c <__hexdig_fun+0xa>
 8011fb8:	2000      	movs	r0, #0
 8011fba:	4770      	bx	lr

08011fbc <__gethex>:
 8011fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc0:	ed2d 8b02 	vpush	{d8}
 8011fc4:	b089      	sub	sp, #36	; 0x24
 8011fc6:	ee08 0a10 	vmov	s16, r0
 8011fca:	9304      	str	r3, [sp, #16]
 8011fcc:	4bbc      	ldr	r3, [pc, #752]	; (80122c0 <__gethex+0x304>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	9301      	str	r3, [sp, #4]
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	468b      	mov	fp, r1
 8011fd6:	4690      	mov	r8, r2
 8011fd8:	f7ee f90c 	bl	80001f4 <strlen>
 8011fdc:	9b01      	ldr	r3, [sp, #4]
 8011fde:	f8db 2000 	ldr.w	r2, [fp]
 8011fe2:	4403      	add	r3, r0
 8011fe4:	4682      	mov	sl, r0
 8011fe6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011fea:	9305      	str	r3, [sp, #20]
 8011fec:	1c93      	adds	r3, r2, #2
 8011fee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011ff2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011ff6:	32fe      	adds	r2, #254	; 0xfe
 8011ff8:	18d1      	adds	r1, r2, r3
 8011ffa:	461f      	mov	r7, r3
 8011ffc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012000:	9100      	str	r1, [sp, #0]
 8012002:	2830      	cmp	r0, #48	; 0x30
 8012004:	d0f8      	beq.n	8011ff8 <__gethex+0x3c>
 8012006:	f7ff ffc4 	bl	8011f92 <__hexdig_fun>
 801200a:	4604      	mov	r4, r0
 801200c:	2800      	cmp	r0, #0
 801200e:	d13a      	bne.n	8012086 <__gethex+0xca>
 8012010:	9901      	ldr	r1, [sp, #4]
 8012012:	4652      	mov	r2, sl
 8012014:	4638      	mov	r0, r7
 8012016:	f7fe fe8c 	bl	8010d32 <strncmp>
 801201a:	4605      	mov	r5, r0
 801201c:	2800      	cmp	r0, #0
 801201e:	d168      	bne.n	80120f2 <__gethex+0x136>
 8012020:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012024:	eb07 060a 	add.w	r6, r7, sl
 8012028:	f7ff ffb3 	bl	8011f92 <__hexdig_fun>
 801202c:	2800      	cmp	r0, #0
 801202e:	d062      	beq.n	80120f6 <__gethex+0x13a>
 8012030:	4633      	mov	r3, r6
 8012032:	7818      	ldrb	r0, [r3, #0]
 8012034:	2830      	cmp	r0, #48	; 0x30
 8012036:	461f      	mov	r7, r3
 8012038:	f103 0301 	add.w	r3, r3, #1
 801203c:	d0f9      	beq.n	8012032 <__gethex+0x76>
 801203e:	f7ff ffa8 	bl	8011f92 <__hexdig_fun>
 8012042:	2301      	movs	r3, #1
 8012044:	fab0 f480 	clz	r4, r0
 8012048:	0964      	lsrs	r4, r4, #5
 801204a:	4635      	mov	r5, r6
 801204c:	9300      	str	r3, [sp, #0]
 801204e:	463a      	mov	r2, r7
 8012050:	4616      	mov	r6, r2
 8012052:	3201      	adds	r2, #1
 8012054:	7830      	ldrb	r0, [r6, #0]
 8012056:	f7ff ff9c 	bl	8011f92 <__hexdig_fun>
 801205a:	2800      	cmp	r0, #0
 801205c:	d1f8      	bne.n	8012050 <__gethex+0x94>
 801205e:	9901      	ldr	r1, [sp, #4]
 8012060:	4652      	mov	r2, sl
 8012062:	4630      	mov	r0, r6
 8012064:	f7fe fe65 	bl	8010d32 <strncmp>
 8012068:	b980      	cbnz	r0, 801208c <__gethex+0xd0>
 801206a:	b94d      	cbnz	r5, 8012080 <__gethex+0xc4>
 801206c:	eb06 050a 	add.w	r5, r6, sl
 8012070:	462a      	mov	r2, r5
 8012072:	4616      	mov	r6, r2
 8012074:	3201      	adds	r2, #1
 8012076:	7830      	ldrb	r0, [r6, #0]
 8012078:	f7ff ff8b 	bl	8011f92 <__hexdig_fun>
 801207c:	2800      	cmp	r0, #0
 801207e:	d1f8      	bne.n	8012072 <__gethex+0xb6>
 8012080:	1bad      	subs	r5, r5, r6
 8012082:	00ad      	lsls	r5, r5, #2
 8012084:	e004      	b.n	8012090 <__gethex+0xd4>
 8012086:	2400      	movs	r4, #0
 8012088:	4625      	mov	r5, r4
 801208a:	e7e0      	b.n	801204e <__gethex+0x92>
 801208c:	2d00      	cmp	r5, #0
 801208e:	d1f7      	bne.n	8012080 <__gethex+0xc4>
 8012090:	7833      	ldrb	r3, [r6, #0]
 8012092:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012096:	2b50      	cmp	r3, #80	; 0x50
 8012098:	d13b      	bne.n	8012112 <__gethex+0x156>
 801209a:	7873      	ldrb	r3, [r6, #1]
 801209c:	2b2b      	cmp	r3, #43	; 0x2b
 801209e:	d02c      	beq.n	80120fa <__gethex+0x13e>
 80120a0:	2b2d      	cmp	r3, #45	; 0x2d
 80120a2:	d02e      	beq.n	8012102 <__gethex+0x146>
 80120a4:	1c71      	adds	r1, r6, #1
 80120a6:	f04f 0900 	mov.w	r9, #0
 80120aa:	7808      	ldrb	r0, [r1, #0]
 80120ac:	f7ff ff71 	bl	8011f92 <__hexdig_fun>
 80120b0:	1e43      	subs	r3, r0, #1
 80120b2:	b2db      	uxtb	r3, r3
 80120b4:	2b18      	cmp	r3, #24
 80120b6:	d82c      	bhi.n	8012112 <__gethex+0x156>
 80120b8:	f1a0 0210 	sub.w	r2, r0, #16
 80120bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80120c0:	f7ff ff67 	bl	8011f92 <__hexdig_fun>
 80120c4:	1e43      	subs	r3, r0, #1
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	2b18      	cmp	r3, #24
 80120ca:	d91d      	bls.n	8012108 <__gethex+0x14c>
 80120cc:	f1b9 0f00 	cmp.w	r9, #0
 80120d0:	d000      	beq.n	80120d4 <__gethex+0x118>
 80120d2:	4252      	negs	r2, r2
 80120d4:	4415      	add	r5, r2
 80120d6:	f8cb 1000 	str.w	r1, [fp]
 80120da:	b1e4      	cbz	r4, 8012116 <__gethex+0x15a>
 80120dc:	9b00      	ldr	r3, [sp, #0]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	bf14      	ite	ne
 80120e2:	2700      	movne	r7, #0
 80120e4:	2706      	moveq	r7, #6
 80120e6:	4638      	mov	r0, r7
 80120e8:	b009      	add	sp, #36	; 0x24
 80120ea:	ecbd 8b02 	vpop	{d8}
 80120ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120f2:	463e      	mov	r6, r7
 80120f4:	4625      	mov	r5, r4
 80120f6:	2401      	movs	r4, #1
 80120f8:	e7ca      	b.n	8012090 <__gethex+0xd4>
 80120fa:	f04f 0900 	mov.w	r9, #0
 80120fe:	1cb1      	adds	r1, r6, #2
 8012100:	e7d3      	b.n	80120aa <__gethex+0xee>
 8012102:	f04f 0901 	mov.w	r9, #1
 8012106:	e7fa      	b.n	80120fe <__gethex+0x142>
 8012108:	230a      	movs	r3, #10
 801210a:	fb03 0202 	mla	r2, r3, r2, r0
 801210e:	3a10      	subs	r2, #16
 8012110:	e7d4      	b.n	80120bc <__gethex+0x100>
 8012112:	4631      	mov	r1, r6
 8012114:	e7df      	b.n	80120d6 <__gethex+0x11a>
 8012116:	1bf3      	subs	r3, r6, r7
 8012118:	3b01      	subs	r3, #1
 801211a:	4621      	mov	r1, r4
 801211c:	2b07      	cmp	r3, #7
 801211e:	dc0b      	bgt.n	8012138 <__gethex+0x17c>
 8012120:	ee18 0a10 	vmov	r0, s16
 8012124:	f000 faea 	bl	80126fc <_Balloc>
 8012128:	4604      	mov	r4, r0
 801212a:	b940      	cbnz	r0, 801213e <__gethex+0x182>
 801212c:	4b65      	ldr	r3, [pc, #404]	; (80122c4 <__gethex+0x308>)
 801212e:	4602      	mov	r2, r0
 8012130:	21de      	movs	r1, #222	; 0xde
 8012132:	4865      	ldr	r0, [pc, #404]	; (80122c8 <__gethex+0x30c>)
 8012134:	f001 fc46 	bl	80139c4 <__assert_func>
 8012138:	3101      	adds	r1, #1
 801213a:	105b      	asrs	r3, r3, #1
 801213c:	e7ee      	b.n	801211c <__gethex+0x160>
 801213e:	f100 0914 	add.w	r9, r0, #20
 8012142:	f04f 0b00 	mov.w	fp, #0
 8012146:	f1ca 0301 	rsb	r3, sl, #1
 801214a:	f8cd 9008 	str.w	r9, [sp, #8]
 801214e:	f8cd b000 	str.w	fp, [sp]
 8012152:	9306      	str	r3, [sp, #24]
 8012154:	42b7      	cmp	r7, r6
 8012156:	d340      	bcc.n	80121da <__gethex+0x21e>
 8012158:	9802      	ldr	r0, [sp, #8]
 801215a:	9b00      	ldr	r3, [sp, #0]
 801215c:	f840 3b04 	str.w	r3, [r0], #4
 8012160:	eba0 0009 	sub.w	r0, r0, r9
 8012164:	1080      	asrs	r0, r0, #2
 8012166:	0146      	lsls	r6, r0, #5
 8012168:	6120      	str	r0, [r4, #16]
 801216a:	4618      	mov	r0, r3
 801216c:	f000 fbbc 	bl	80128e8 <__hi0bits>
 8012170:	1a30      	subs	r0, r6, r0
 8012172:	f8d8 6000 	ldr.w	r6, [r8]
 8012176:	42b0      	cmp	r0, r6
 8012178:	dd63      	ble.n	8012242 <__gethex+0x286>
 801217a:	1b87      	subs	r7, r0, r6
 801217c:	4639      	mov	r1, r7
 801217e:	4620      	mov	r0, r4
 8012180:	f000 ff56 	bl	8013030 <__any_on>
 8012184:	4682      	mov	sl, r0
 8012186:	b1a8      	cbz	r0, 80121b4 <__gethex+0x1f8>
 8012188:	1e7b      	subs	r3, r7, #1
 801218a:	1159      	asrs	r1, r3, #5
 801218c:	f003 021f 	and.w	r2, r3, #31
 8012190:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012194:	f04f 0a01 	mov.w	sl, #1
 8012198:	fa0a f202 	lsl.w	r2, sl, r2
 801219c:	420a      	tst	r2, r1
 801219e:	d009      	beq.n	80121b4 <__gethex+0x1f8>
 80121a0:	4553      	cmp	r3, sl
 80121a2:	dd05      	ble.n	80121b0 <__gethex+0x1f4>
 80121a4:	1eb9      	subs	r1, r7, #2
 80121a6:	4620      	mov	r0, r4
 80121a8:	f000 ff42 	bl	8013030 <__any_on>
 80121ac:	2800      	cmp	r0, #0
 80121ae:	d145      	bne.n	801223c <__gethex+0x280>
 80121b0:	f04f 0a02 	mov.w	sl, #2
 80121b4:	4639      	mov	r1, r7
 80121b6:	4620      	mov	r0, r4
 80121b8:	f7ff fe99 	bl	8011eee <rshift>
 80121bc:	443d      	add	r5, r7
 80121be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80121c2:	42ab      	cmp	r3, r5
 80121c4:	da4c      	bge.n	8012260 <__gethex+0x2a4>
 80121c6:	ee18 0a10 	vmov	r0, s16
 80121ca:	4621      	mov	r1, r4
 80121cc:	f000 fad6 	bl	801277c <_Bfree>
 80121d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80121d2:	2300      	movs	r3, #0
 80121d4:	6013      	str	r3, [r2, #0]
 80121d6:	27a3      	movs	r7, #163	; 0xa3
 80121d8:	e785      	b.n	80120e6 <__gethex+0x12a>
 80121da:	1e73      	subs	r3, r6, #1
 80121dc:	9a05      	ldr	r2, [sp, #20]
 80121de:	9303      	str	r3, [sp, #12]
 80121e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80121e4:	4293      	cmp	r3, r2
 80121e6:	d019      	beq.n	801221c <__gethex+0x260>
 80121e8:	f1bb 0f20 	cmp.w	fp, #32
 80121ec:	d107      	bne.n	80121fe <__gethex+0x242>
 80121ee:	9b02      	ldr	r3, [sp, #8]
 80121f0:	9a00      	ldr	r2, [sp, #0]
 80121f2:	f843 2b04 	str.w	r2, [r3], #4
 80121f6:	9302      	str	r3, [sp, #8]
 80121f8:	2300      	movs	r3, #0
 80121fa:	9300      	str	r3, [sp, #0]
 80121fc:	469b      	mov	fp, r3
 80121fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012202:	f7ff fec6 	bl	8011f92 <__hexdig_fun>
 8012206:	9b00      	ldr	r3, [sp, #0]
 8012208:	f000 000f 	and.w	r0, r0, #15
 801220c:	fa00 f00b 	lsl.w	r0, r0, fp
 8012210:	4303      	orrs	r3, r0
 8012212:	9300      	str	r3, [sp, #0]
 8012214:	f10b 0b04 	add.w	fp, fp, #4
 8012218:	9b03      	ldr	r3, [sp, #12]
 801221a:	e00d      	b.n	8012238 <__gethex+0x27c>
 801221c:	9b03      	ldr	r3, [sp, #12]
 801221e:	9a06      	ldr	r2, [sp, #24]
 8012220:	4413      	add	r3, r2
 8012222:	42bb      	cmp	r3, r7
 8012224:	d3e0      	bcc.n	80121e8 <__gethex+0x22c>
 8012226:	4618      	mov	r0, r3
 8012228:	9901      	ldr	r1, [sp, #4]
 801222a:	9307      	str	r3, [sp, #28]
 801222c:	4652      	mov	r2, sl
 801222e:	f7fe fd80 	bl	8010d32 <strncmp>
 8012232:	9b07      	ldr	r3, [sp, #28]
 8012234:	2800      	cmp	r0, #0
 8012236:	d1d7      	bne.n	80121e8 <__gethex+0x22c>
 8012238:	461e      	mov	r6, r3
 801223a:	e78b      	b.n	8012154 <__gethex+0x198>
 801223c:	f04f 0a03 	mov.w	sl, #3
 8012240:	e7b8      	b.n	80121b4 <__gethex+0x1f8>
 8012242:	da0a      	bge.n	801225a <__gethex+0x29e>
 8012244:	1a37      	subs	r7, r6, r0
 8012246:	4621      	mov	r1, r4
 8012248:	ee18 0a10 	vmov	r0, s16
 801224c:	463a      	mov	r2, r7
 801224e:	f000 fcb1 	bl	8012bb4 <__lshift>
 8012252:	1bed      	subs	r5, r5, r7
 8012254:	4604      	mov	r4, r0
 8012256:	f100 0914 	add.w	r9, r0, #20
 801225a:	f04f 0a00 	mov.w	sl, #0
 801225e:	e7ae      	b.n	80121be <__gethex+0x202>
 8012260:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012264:	42a8      	cmp	r0, r5
 8012266:	dd72      	ble.n	801234e <__gethex+0x392>
 8012268:	1b45      	subs	r5, r0, r5
 801226a:	42ae      	cmp	r6, r5
 801226c:	dc36      	bgt.n	80122dc <__gethex+0x320>
 801226e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012272:	2b02      	cmp	r3, #2
 8012274:	d02a      	beq.n	80122cc <__gethex+0x310>
 8012276:	2b03      	cmp	r3, #3
 8012278:	d02c      	beq.n	80122d4 <__gethex+0x318>
 801227a:	2b01      	cmp	r3, #1
 801227c:	d115      	bne.n	80122aa <__gethex+0x2ee>
 801227e:	42ae      	cmp	r6, r5
 8012280:	d113      	bne.n	80122aa <__gethex+0x2ee>
 8012282:	2e01      	cmp	r6, #1
 8012284:	d10b      	bne.n	801229e <__gethex+0x2e2>
 8012286:	9a04      	ldr	r2, [sp, #16]
 8012288:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801228c:	6013      	str	r3, [r2, #0]
 801228e:	2301      	movs	r3, #1
 8012290:	6123      	str	r3, [r4, #16]
 8012292:	f8c9 3000 	str.w	r3, [r9]
 8012296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012298:	2762      	movs	r7, #98	; 0x62
 801229a:	601c      	str	r4, [r3, #0]
 801229c:	e723      	b.n	80120e6 <__gethex+0x12a>
 801229e:	1e71      	subs	r1, r6, #1
 80122a0:	4620      	mov	r0, r4
 80122a2:	f000 fec5 	bl	8013030 <__any_on>
 80122a6:	2800      	cmp	r0, #0
 80122a8:	d1ed      	bne.n	8012286 <__gethex+0x2ca>
 80122aa:	ee18 0a10 	vmov	r0, s16
 80122ae:	4621      	mov	r1, r4
 80122b0:	f000 fa64 	bl	801277c <_Bfree>
 80122b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80122b6:	2300      	movs	r3, #0
 80122b8:	6013      	str	r3, [r2, #0]
 80122ba:	2750      	movs	r7, #80	; 0x50
 80122bc:	e713      	b.n	80120e6 <__gethex+0x12a>
 80122be:	bf00      	nop
 80122c0:	08015774 	.word	0x08015774
 80122c4:	080156f8 	.word	0x080156f8
 80122c8:	08015709 	.word	0x08015709
 80122cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d1eb      	bne.n	80122aa <__gethex+0x2ee>
 80122d2:	e7d8      	b.n	8012286 <__gethex+0x2ca>
 80122d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d1d5      	bne.n	8012286 <__gethex+0x2ca>
 80122da:	e7e6      	b.n	80122aa <__gethex+0x2ee>
 80122dc:	1e6f      	subs	r7, r5, #1
 80122de:	f1ba 0f00 	cmp.w	sl, #0
 80122e2:	d131      	bne.n	8012348 <__gethex+0x38c>
 80122e4:	b127      	cbz	r7, 80122f0 <__gethex+0x334>
 80122e6:	4639      	mov	r1, r7
 80122e8:	4620      	mov	r0, r4
 80122ea:	f000 fea1 	bl	8013030 <__any_on>
 80122ee:	4682      	mov	sl, r0
 80122f0:	117b      	asrs	r3, r7, #5
 80122f2:	2101      	movs	r1, #1
 80122f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80122f8:	f007 071f 	and.w	r7, r7, #31
 80122fc:	fa01 f707 	lsl.w	r7, r1, r7
 8012300:	421f      	tst	r7, r3
 8012302:	4629      	mov	r1, r5
 8012304:	4620      	mov	r0, r4
 8012306:	bf18      	it	ne
 8012308:	f04a 0a02 	orrne.w	sl, sl, #2
 801230c:	1b76      	subs	r6, r6, r5
 801230e:	f7ff fdee 	bl	8011eee <rshift>
 8012312:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012316:	2702      	movs	r7, #2
 8012318:	f1ba 0f00 	cmp.w	sl, #0
 801231c:	d048      	beq.n	80123b0 <__gethex+0x3f4>
 801231e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012322:	2b02      	cmp	r3, #2
 8012324:	d015      	beq.n	8012352 <__gethex+0x396>
 8012326:	2b03      	cmp	r3, #3
 8012328:	d017      	beq.n	801235a <__gethex+0x39e>
 801232a:	2b01      	cmp	r3, #1
 801232c:	d109      	bne.n	8012342 <__gethex+0x386>
 801232e:	f01a 0f02 	tst.w	sl, #2
 8012332:	d006      	beq.n	8012342 <__gethex+0x386>
 8012334:	f8d9 0000 	ldr.w	r0, [r9]
 8012338:	ea4a 0a00 	orr.w	sl, sl, r0
 801233c:	f01a 0f01 	tst.w	sl, #1
 8012340:	d10e      	bne.n	8012360 <__gethex+0x3a4>
 8012342:	f047 0710 	orr.w	r7, r7, #16
 8012346:	e033      	b.n	80123b0 <__gethex+0x3f4>
 8012348:	f04f 0a01 	mov.w	sl, #1
 801234c:	e7d0      	b.n	80122f0 <__gethex+0x334>
 801234e:	2701      	movs	r7, #1
 8012350:	e7e2      	b.n	8012318 <__gethex+0x35c>
 8012352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012354:	f1c3 0301 	rsb	r3, r3, #1
 8012358:	9315      	str	r3, [sp, #84]	; 0x54
 801235a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801235c:	2b00      	cmp	r3, #0
 801235e:	d0f0      	beq.n	8012342 <__gethex+0x386>
 8012360:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012364:	f104 0314 	add.w	r3, r4, #20
 8012368:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801236c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012370:	f04f 0c00 	mov.w	ip, #0
 8012374:	4618      	mov	r0, r3
 8012376:	f853 2b04 	ldr.w	r2, [r3], #4
 801237a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801237e:	d01c      	beq.n	80123ba <__gethex+0x3fe>
 8012380:	3201      	adds	r2, #1
 8012382:	6002      	str	r2, [r0, #0]
 8012384:	2f02      	cmp	r7, #2
 8012386:	f104 0314 	add.w	r3, r4, #20
 801238a:	d13f      	bne.n	801240c <__gethex+0x450>
 801238c:	f8d8 2000 	ldr.w	r2, [r8]
 8012390:	3a01      	subs	r2, #1
 8012392:	42b2      	cmp	r2, r6
 8012394:	d10a      	bne.n	80123ac <__gethex+0x3f0>
 8012396:	1171      	asrs	r1, r6, #5
 8012398:	2201      	movs	r2, #1
 801239a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801239e:	f006 061f 	and.w	r6, r6, #31
 80123a2:	fa02 f606 	lsl.w	r6, r2, r6
 80123a6:	421e      	tst	r6, r3
 80123a8:	bf18      	it	ne
 80123aa:	4617      	movne	r7, r2
 80123ac:	f047 0720 	orr.w	r7, r7, #32
 80123b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80123b2:	601c      	str	r4, [r3, #0]
 80123b4:	9b04      	ldr	r3, [sp, #16]
 80123b6:	601d      	str	r5, [r3, #0]
 80123b8:	e695      	b.n	80120e6 <__gethex+0x12a>
 80123ba:	4299      	cmp	r1, r3
 80123bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80123c0:	d8d8      	bhi.n	8012374 <__gethex+0x3b8>
 80123c2:	68a3      	ldr	r3, [r4, #8]
 80123c4:	459b      	cmp	fp, r3
 80123c6:	db19      	blt.n	80123fc <__gethex+0x440>
 80123c8:	6861      	ldr	r1, [r4, #4]
 80123ca:	ee18 0a10 	vmov	r0, s16
 80123ce:	3101      	adds	r1, #1
 80123d0:	f000 f994 	bl	80126fc <_Balloc>
 80123d4:	4681      	mov	r9, r0
 80123d6:	b918      	cbnz	r0, 80123e0 <__gethex+0x424>
 80123d8:	4b1a      	ldr	r3, [pc, #104]	; (8012444 <__gethex+0x488>)
 80123da:	4602      	mov	r2, r0
 80123dc:	2184      	movs	r1, #132	; 0x84
 80123de:	e6a8      	b.n	8012132 <__gethex+0x176>
 80123e0:	6922      	ldr	r2, [r4, #16]
 80123e2:	3202      	adds	r2, #2
 80123e4:	f104 010c 	add.w	r1, r4, #12
 80123e8:	0092      	lsls	r2, r2, #2
 80123ea:	300c      	adds	r0, #12
 80123ec:	f7fe f93a 	bl	8010664 <memcpy>
 80123f0:	4621      	mov	r1, r4
 80123f2:	ee18 0a10 	vmov	r0, s16
 80123f6:	f000 f9c1 	bl	801277c <_Bfree>
 80123fa:	464c      	mov	r4, r9
 80123fc:	6923      	ldr	r3, [r4, #16]
 80123fe:	1c5a      	adds	r2, r3, #1
 8012400:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012404:	6122      	str	r2, [r4, #16]
 8012406:	2201      	movs	r2, #1
 8012408:	615a      	str	r2, [r3, #20]
 801240a:	e7bb      	b.n	8012384 <__gethex+0x3c8>
 801240c:	6922      	ldr	r2, [r4, #16]
 801240e:	455a      	cmp	r2, fp
 8012410:	dd0b      	ble.n	801242a <__gethex+0x46e>
 8012412:	2101      	movs	r1, #1
 8012414:	4620      	mov	r0, r4
 8012416:	f7ff fd6a 	bl	8011eee <rshift>
 801241a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801241e:	3501      	adds	r5, #1
 8012420:	42ab      	cmp	r3, r5
 8012422:	f6ff aed0 	blt.w	80121c6 <__gethex+0x20a>
 8012426:	2701      	movs	r7, #1
 8012428:	e7c0      	b.n	80123ac <__gethex+0x3f0>
 801242a:	f016 061f 	ands.w	r6, r6, #31
 801242e:	d0fa      	beq.n	8012426 <__gethex+0x46a>
 8012430:	449a      	add	sl, r3
 8012432:	f1c6 0620 	rsb	r6, r6, #32
 8012436:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801243a:	f000 fa55 	bl	80128e8 <__hi0bits>
 801243e:	42b0      	cmp	r0, r6
 8012440:	dbe7      	blt.n	8012412 <__gethex+0x456>
 8012442:	e7f0      	b.n	8012426 <__gethex+0x46a>
 8012444:	080156f8 	.word	0x080156f8

08012448 <L_shift>:
 8012448:	f1c2 0208 	rsb	r2, r2, #8
 801244c:	0092      	lsls	r2, r2, #2
 801244e:	b570      	push	{r4, r5, r6, lr}
 8012450:	f1c2 0620 	rsb	r6, r2, #32
 8012454:	6843      	ldr	r3, [r0, #4]
 8012456:	6804      	ldr	r4, [r0, #0]
 8012458:	fa03 f506 	lsl.w	r5, r3, r6
 801245c:	432c      	orrs	r4, r5
 801245e:	40d3      	lsrs	r3, r2
 8012460:	6004      	str	r4, [r0, #0]
 8012462:	f840 3f04 	str.w	r3, [r0, #4]!
 8012466:	4288      	cmp	r0, r1
 8012468:	d3f4      	bcc.n	8012454 <L_shift+0xc>
 801246a:	bd70      	pop	{r4, r5, r6, pc}

0801246c <__match>:
 801246c:	b530      	push	{r4, r5, lr}
 801246e:	6803      	ldr	r3, [r0, #0]
 8012470:	3301      	adds	r3, #1
 8012472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012476:	b914      	cbnz	r4, 801247e <__match+0x12>
 8012478:	6003      	str	r3, [r0, #0]
 801247a:	2001      	movs	r0, #1
 801247c:	bd30      	pop	{r4, r5, pc}
 801247e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012482:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012486:	2d19      	cmp	r5, #25
 8012488:	bf98      	it	ls
 801248a:	3220      	addls	r2, #32
 801248c:	42a2      	cmp	r2, r4
 801248e:	d0f0      	beq.n	8012472 <__match+0x6>
 8012490:	2000      	movs	r0, #0
 8012492:	e7f3      	b.n	801247c <__match+0x10>

08012494 <__hexnan>:
 8012494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012498:	680b      	ldr	r3, [r1, #0]
 801249a:	6801      	ldr	r1, [r0, #0]
 801249c:	115e      	asrs	r6, r3, #5
 801249e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80124a2:	f013 031f 	ands.w	r3, r3, #31
 80124a6:	b087      	sub	sp, #28
 80124a8:	bf18      	it	ne
 80124aa:	3604      	addne	r6, #4
 80124ac:	2500      	movs	r5, #0
 80124ae:	1f37      	subs	r7, r6, #4
 80124b0:	4682      	mov	sl, r0
 80124b2:	4690      	mov	r8, r2
 80124b4:	9301      	str	r3, [sp, #4]
 80124b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80124ba:	46b9      	mov	r9, r7
 80124bc:	463c      	mov	r4, r7
 80124be:	9502      	str	r5, [sp, #8]
 80124c0:	46ab      	mov	fp, r5
 80124c2:	784a      	ldrb	r2, [r1, #1]
 80124c4:	1c4b      	adds	r3, r1, #1
 80124c6:	9303      	str	r3, [sp, #12]
 80124c8:	b342      	cbz	r2, 801251c <__hexnan+0x88>
 80124ca:	4610      	mov	r0, r2
 80124cc:	9105      	str	r1, [sp, #20]
 80124ce:	9204      	str	r2, [sp, #16]
 80124d0:	f7ff fd5f 	bl	8011f92 <__hexdig_fun>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d14f      	bne.n	8012578 <__hexnan+0xe4>
 80124d8:	9a04      	ldr	r2, [sp, #16]
 80124da:	9905      	ldr	r1, [sp, #20]
 80124dc:	2a20      	cmp	r2, #32
 80124de:	d818      	bhi.n	8012512 <__hexnan+0x7e>
 80124e0:	9b02      	ldr	r3, [sp, #8]
 80124e2:	459b      	cmp	fp, r3
 80124e4:	dd13      	ble.n	801250e <__hexnan+0x7a>
 80124e6:	454c      	cmp	r4, r9
 80124e8:	d206      	bcs.n	80124f8 <__hexnan+0x64>
 80124ea:	2d07      	cmp	r5, #7
 80124ec:	dc04      	bgt.n	80124f8 <__hexnan+0x64>
 80124ee:	462a      	mov	r2, r5
 80124f0:	4649      	mov	r1, r9
 80124f2:	4620      	mov	r0, r4
 80124f4:	f7ff ffa8 	bl	8012448 <L_shift>
 80124f8:	4544      	cmp	r4, r8
 80124fa:	d950      	bls.n	801259e <__hexnan+0x10a>
 80124fc:	2300      	movs	r3, #0
 80124fe:	f1a4 0904 	sub.w	r9, r4, #4
 8012502:	f844 3c04 	str.w	r3, [r4, #-4]
 8012506:	f8cd b008 	str.w	fp, [sp, #8]
 801250a:	464c      	mov	r4, r9
 801250c:	461d      	mov	r5, r3
 801250e:	9903      	ldr	r1, [sp, #12]
 8012510:	e7d7      	b.n	80124c2 <__hexnan+0x2e>
 8012512:	2a29      	cmp	r2, #41	; 0x29
 8012514:	d156      	bne.n	80125c4 <__hexnan+0x130>
 8012516:	3102      	adds	r1, #2
 8012518:	f8ca 1000 	str.w	r1, [sl]
 801251c:	f1bb 0f00 	cmp.w	fp, #0
 8012520:	d050      	beq.n	80125c4 <__hexnan+0x130>
 8012522:	454c      	cmp	r4, r9
 8012524:	d206      	bcs.n	8012534 <__hexnan+0xa0>
 8012526:	2d07      	cmp	r5, #7
 8012528:	dc04      	bgt.n	8012534 <__hexnan+0xa0>
 801252a:	462a      	mov	r2, r5
 801252c:	4649      	mov	r1, r9
 801252e:	4620      	mov	r0, r4
 8012530:	f7ff ff8a 	bl	8012448 <L_shift>
 8012534:	4544      	cmp	r4, r8
 8012536:	d934      	bls.n	80125a2 <__hexnan+0x10e>
 8012538:	f1a8 0204 	sub.w	r2, r8, #4
 801253c:	4623      	mov	r3, r4
 801253e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012542:	f842 1f04 	str.w	r1, [r2, #4]!
 8012546:	429f      	cmp	r7, r3
 8012548:	d2f9      	bcs.n	801253e <__hexnan+0xaa>
 801254a:	1b3b      	subs	r3, r7, r4
 801254c:	f023 0303 	bic.w	r3, r3, #3
 8012550:	3304      	adds	r3, #4
 8012552:	3401      	adds	r4, #1
 8012554:	3e03      	subs	r6, #3
 8012556:	42b4      	cmp	r4, r6
 8012558:	bf88      	it	hi
 801255a:	2304      	movhi	r3, #4
 801255c:	4443      	add	r3, r8
 801255e:	2200      	movs	r2, #0
 8012560:	f843 2b04 	str.w	r2, [r3], #4
 8012564:	429f      	cmp	r7, r3
 8012566:	d2fb      	bcs.n	8012560 <__hexnan+0xcc>
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	b91b      	cbnz	r3, 8012574 <__hexnan+0xe0>
 801256c:	4547      	cmp	r7, r8
 801256e:	d127      	bne.n	80125c0 <__hexnan+0x12c>
 8012570:	2301      	movs	r3, #1
 8012572:	603b      	str	r3, [r7, #0]
 8012574:	2005      	movs	r0, #5
 8012576:	e026      	b.n	80125c6 <__hexnan+0x132>
 8012578:	3501      	adds	r5, #1
 801257a:	2d08      	cmp	r5, #8
 801257c:	f10b 0b01 	add.w	fp, fp, #1
 8012580:	dd06      	ble.n	8012590 <__hexnan+0xfc>
 8012582:	4544      	cmp	r4, r8
 8012584:	d9c3      	bls.n	801250e <__hexnan+0x7a>
 8012586:	2300      	movs	r3, #0
 8012588:	f844 3c04 	str.w	r3, [r4, #-4]
 801258c:	2501      	movs	r5, #1
 801258e:	3c04      	subs	r4, #4
 8012590:	6822      	ldr	r2, [r4, #0]
 8012592:	f000 000f 	and.w	r0, r0, #15
 8012596:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801259a:	6022      	str	r2, [r4, #0]
 801259c:	e7b7      	b.n	801250e <__hexnan+0x7a>
 801259e:	2508      	movs	r5, #8
 80125a0:	e7b5      	b.n	801250e <__hexnan+0x7a>
 80125a2:	9b01      	ldr	r3, [sp, #4]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d0df      	beq.n	8012568 <__hexnan+0xd4>
 80125a8:	f04f 32ff 	mov.w	r2, #4294967295
 80125ac:	f1c3 0320 	rsb	r3, r3, #32
 80125b0:	fa22 f303 	lsr.w	r3, r2, r3
 80125b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80125b8:	401a      	ands	r2, r3
 80125ba:	f846 2c04 	str.w	r2, [r6, #-4]
 80125be:	e7d3      	b.n	8012568 <__hexnan+0xd4>
 80125c0:	3f04      	subs	r7, #4
 80125c2:	e7d1      	b.n	8012568 <__hexnan+0xd4>
 80125c4:	2004      	movs	r0, #4
 80125c6:	b007      	add	sp, #28
 80125c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080125cc <__retarget_lock_init_recursive>:
 80125cc:	4770      	bx	lr

080125ce <__retarget_lock_acquire_recursive>:
 80125ce:	4770      	bx	lr

080125d0 <__retarget_lock_release_recursive>:
 80125d0:	4770      	bx	lr
	...

080125d4 <_lseek_r>:
 80125d4:	b538      	push	{r3, r4, r5, lr}
 80125d6:	4d07      	ldr	r5, [pc, #28]	; (80125f4 <_lseek_r+0x20>)
 80125d8:	4604      	mov	r4, r0
 80125da:	4608      	mov	r0, r1
 80125dc:	4611      	mov	r1, r2
 80125de:	2200      	movs	r2, #0
 80125e0:	602a      	str	r2, [r5, #0]
 80125e2:	461a      	mov	r2, r3
 80125e4:	f7f0 fd10 	bl	8003008 <_lseek>
 80125e8:	1c43      	adds	r3, r0, #1
 80125ea:	d102      	bne.n	80125f2 <_lseek_r+0x1e>
 80125ec:	682b      	ldr	r3, [r5, #0]
 80125ee:	b103      	cbz	r3, 80125f2 <_lseek_r+0x1e>
 80125f0:	6023      	str	r3, [r4, #0]
 80125f2:	bd38      	pop	{r3, r4, r5, pc}
 80125f4:	200038fc 	.word	0x200038fc

080125f8 <__swhatbuf_r>:
 80125f8:	b570      	push	{r4, r5, r6, lr}
 80125fa:	460e      	mov	r6, r1
 80125fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012600:	2900      	cmp	r1, #0
 8012602:	b096      	sub	sp, #88	; 0x58
 8012604:	4614      	mov	r4, r2
 8012606:	461d      	mov	r5, r3
 8012608:	da07      	bge.n	801261a <__swhatbuf_r+0x22>
 801260a:	2300      	movs	r3, #0
 801260c:	602b      	str	r3, [r5, #0]
 801260e:	89b3      	ldrh	r3, [r6, #12]
 8012610:	061a      	lsls	r2, r3, #24
 8012612:	d410      	bmi.n	8012636 <__swhatbuf_r+0x3e>
 8012614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012618:	e00e      	b.n	8012638 <__swhatbuf_r+0x40>
 801261a:	466a      	mov	r2, sp
 801261c:	f001 fa02 	bl	8013a24 <_fstat_r>
 8012620:	2800      	cmp	r0, #0
 8012622:	dbf2      	blt.n	801260a <__swhatbuf_r+0x12>
 8012624:	9a01      	ldr	r2, [sp, #4]
 8012626:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801262a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801262e:	425a      	negs	r2, r3
 8012630:	415a      	adcs	r2, r3
 8012632:	602a      	str	r2, [r5, #0]
 8012634:	e7ee      	b.n	8012614 <__swhatbuf_r+0x1c>
 8012636:	2340      	movs	r3, #64	; 0x40
 8012638:	2000      	movs	r0, #0
 801263a:	6023      	str	r3, [r4, #0]
 801263c:	b016      	add	sp, #88	; 0x58
 801263e:	bd70      	pop	{r4, r5, r6, pc}

08012640 <__smakebuf_r>:
 8012640:	898b      	ldrh	r3, [r1, #12]
 8012642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012644:	079d      	lsls	r5, r3, #30
 8012646:	4606      	mov	r6, r0
 8012648:	460c      	mov	r4, r1
 801264a:	d507      	bpl.n	801265c <__smakebuf_r+0x1c>
 801264c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012650:	6023      	str	r3, [r4, #0]
 8012652:	6123      	str	r3, [r4, #16]
 8012654:	2301      	movs	r3, #1
 8012656:	6163      	str	r3, [r4, #20]
 8012658:	b002      	add	sp, #8
 801265a:	bd70      	pop	{r4, r5, r6, pc}
 801265c:	ab01      	add	r3, sp, #4
 801265e:	466a      	mov	r2, sp
 8012660:	f7ff ffca 	bl	80125f8 <__swhatbuf_r>
 8012664:	9900      	ldr	r1, [sp, #0]
 8012666:	4605      	mov	r5, r0
 8012668:	4630      	mov	r0, r6
 801266a:	f7fe f861 	bl	8010730 <_malloc_r>
 801266e:	b948      	cbnz	r0, 8012684 <__smakebuf_r+0x44>
 8012670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012674:	059a      	lsls	r2, r3, #22
 8012676:	d4ef      	bmi.n	8012658 <__smakebuf_r+0x18>
 8012678:	f023 0303 	bic.w	r3, r3, #3
 801267c:	f043 0302 	orr.w	r3, r3, #2
 8012680:	81a3      	strh	r3, [r4, #12]
 8012682:	e7e3      	b.n	801264c <__smakebuf_r+0xc>
 8012684:	4b0d      	ldr	r3, [pc, #52]	; (80126bc <__smakebuf_r+0x7c>)
 8012686:	62b3      	str	r3, [r6, #40]	; 0x28
 8012688:	89a3      	ldrh	r3, [r4, #12]
 801268a:	6020      	str	r0, [r4, #0]
 801268c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012690:	81a3      	strh	r3, [r4, #12]
 8012692:	9b00      	ldr	r3, [sp, #0]
 8012694:	6163      	str	r3, [r4, #20]
 8012696:	9b01      	ldr	r3, [sp, #4]
 8012698:	6120      	str	r0, [r4, #16]
 801269a:	b15b      	cbz	r3, 80126b4 <__smakebuf_r+0x74>
 801269c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126a0:	4630      	mov	r0, r6
 80126a2:	f001 f9d1 	bl	8013a48 <_isatty_r>
 80126a6:	b128      	cbz	r0, 80126b4 <__smakebuf_r+0x74>
 80126a8:	89a3      	ldrh	r3, [r4, #12]
 80126aa:	f023 0303 	bic.w	r3, r3, #3
 80126ae:	f043 0301 	orr.w	r3, r3, #1
 80126b2:	81a3      	strh	r3, [r4, #12]
 80126b4:	89a0      	ldrh	r0, [r4, #12]
 80126b6:	4305      	orrs	r5, r0
 80126b8:	81a5      	strh	r5, [r4, #12]
 80126ba:	e7cd      	b.n	8012658 <__smakebuf_r+0x18>
 80126bc:	08011d4d 	.word	0x08011d4d

080126c0 <__ascii_mbtowc>:
 80126c0:	b082      	sub	sp, #8
 80126c2:	b901      	cbnz	r1, 80126c6 <__ascii_mbtowc+0x6>
 80126c4:	a901      	add	r1, sp, #4
 80126c6:	b142      	cbz	r2, 80126da <__ascii_mbtowc+0x1a>
 80126c8:	b14b      	cbz	r3, 80126de <__ascii_mbtowc+0x1e>
 80126ca:	7813      	ldrb	r3, [r2, #0]
 80126cc:	600b      	str	r3, [r1, #0]
 80126ce:	7812      	ldrb	r2, [r2, #0]
 80126d0:	1e10      	subs	r0, r2, #0
 80126d2:	bf18      	it	ne
 80126d4:	2001      	movne	r0, #1
 80126d6:	b002      	add	sp, #8
 80126d8:	4770      	bx	lr
 80126da:	4610      	mov	r0, r2
 80126dc:	e7fb      	b.n	80126d6 <__ascii_mbtowc+0x16>
 80126de:	f06f 0001 	mvn.w	r0, #1
 80126e2:	e7f8      	b.n	80126d6 <__ascii_mbtowc+0x16>

080126e4 <__malloc_lock>:
 80126e4:	4801      	ldr	r0, [pc, #4]	; (80126ec <__malloc_lock+0x8>)
 80126e6:	f7ff bf72 	b.w	80125ce <__retarget_lock_acquire_recursive>
 80126ea:	bf00      	nop
 80126ec:	200038f4 	.word	0x200038f4

080126f0 <__malloc_unlock>:
 80126f0:	4801      	ldr	r0, [pc, #4]	; (80126f8 <__malloc_unlock+0x8>)
 80126f2:	f7ff bf6d 	b.w	80125d0 <__retarget_lock_release_recursive>
 80126f6:	bf00      	nop
 80126f8:	200038f4 	.word	0x200038f4

080126fc <_Balloc>:
 80126fc:	b570      	push	{r4, r5, r6, lr}
 80126fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012700:	4604      	mov	r4, r0
 8012702:	460d      	mov	r5, r1
 8012704:	b976      	cbnz	r6, 8012724 <_Balloc+0x28>
 8012706:	2010      	movs	r0, #16
 8012708:	f7fd ff9c 	bl	8010644 <malloc>
 801270c:	4602      	mov	r2, r0
 801270e:	6260      	str	r0, [r4, #36]	; 0x24
 8012710:	b920      	cbnz	r0, 801271c <_Balloc+0x20>
 8012712:	4b18      	ldr	r3, [pc, #96]	; (8012774 <_Balloc+0x78>)
 8012714:	4818      	ldr	r0, [pc, #96]	; (8012778 <_Balloc+0x7c>)
 8012716:	2166      	movs	r1, #102	; 0x66
 8012718:	f001 f954 	bl	80139c4 <__assert_func>
 801271c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012720:	6006      	str	r6, [r0, #0]
 8012722:	60c6      	str	r6, [r0, #12]
 8012724:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012726:	68f3      	ldr	r3, [r6, #12]
 8012728:	b183      	cbz	r3, 801274c <_Balloc+0x50>
 801272a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801272c:	68db      	ldr	r3, [r3, #12]
 801272e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012732:	b9b8      	cbnz	r0, 8012764 <_Balloc+0x68>
 8012734:	2101      	movs	r1, #1
 8012736:	fa01 f605 	lsl.w	r6, r1, r5
 801273a:	1d72      	adds	r2, r6, #5
 801273c:	0092      	lsls	r2, r2, #2
 801273e:	4620      	mov	r0, r4
 8012740:	f000 fc97 	bl	8013072 <_calloc_r>
 8012744:	b160      	cbz	r0, 8012760 <_Balloc+0x64>
 8012746:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801274a:	e00e      	b.n	801276a <_Balloc+0x6e>
 801274c:	2221      	movs	r2, #33	; 0x21
 801274e:	2104      	movs	r1, #4
 8012750:	4620      	mov	r0, r4
 8012752:	f000 fc8e 	bl	8013072 <_calloc_r>
 8012756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012758:	60f0      	str	r0, [r6, #12]
 801275a:	68db      	ldr	r3, [r3, #12]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d1e4      	bne.n	801272a <_Balloc+0x2e>
 8012760:	2000      	movs	r0, #0
 8012762:	bd70      	pop	{r4, r5, r6, pc}
 8012764:	6802      	ldr	r2, [r0, #0]
 8012766:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801276a:	2300      	movs	r3, #0
 801276c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012770:	e7f7      	b.n	8012762 <_Balloc+0x66>
 8012772:	bf00      	nop
 8012774:	08015788 	.word	0x08015788
 8012778:	0801579f 	.word	0x0801579f

0801277c <_Bfree>:
 801277c:	b570      	push	{r4, r5, r6, lr}
 801277e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012780:	4605      	mov	r5, r0
 8012782:	460c      	mov	r4, r1
 8012784:	b976      	cbnz	r6, 80127a4 <_Bfree+0x28>
 8012786:	2010      	movs	r0, #16
 8012788:	f7fd ff5c 	bl	8010644 <malloc>
 801278c:	4602      	mov	r2, r0
 801278e:	6268      	str	r0, [r5, #36]	; 0x24
 8012790:	b920      	cbnz	r0, 801279c <_Bfree+0x20>
 8012792:	4b09      	ldr	r3, [pc, #36]	; (80127b8 <_Bfree+0x3c>)
 8012794:	4809      	ldr	r0, [pc, #36]	; (80127bc <_Bfree+0x40>)
 8012796:	218a      	movs	r1, #138	; 0x8a
 8012798:	f001 f914 	bl	80139c4 <__assert_func>
 801279c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127a0:	6006      	str	r6, [r0, #0]
 80127a2:	60c6      	str	r6, [r0, #12]
 80127a4:	b13c      	cbz	r4, 80127b6 <_Bfree+0x3a>
 80127a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80127a8:	6862      	ldr	r2, [r4, #4]
 80127aa:	68db      	ldr	r3, [r3, #12]
 80127ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127b0:	6021      	str	r1, [r4, #0]
 80127b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80127b6:	bd70      	pop	{r4, r5, r6, pc}
 80127b8:	08015788 	.word	0x08015788
 80127bc:	0801579f 	.word	0x0801579f

080127c0 <__multadd>:
 80127c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c4:	690e      	ldr	r6, [r1, #16]
 80127c6:	4607      	mov	r7, r0
 80127c8:	4698      	mov	r8, r3
 80127ca:	460c      	mov	r4, r1
 80127cc:	f101 0014 	add.w	r0, r1, #20
 80127d0:	2300      	movs	r3, #0
 80127d2:	6805      	ldr	r5, [r0, #0]
 80127d4:	b2a9      	uxth	r1, r5
 80127d6:	fb02 8101 	mla	r1, r2, r1, r8
 80127da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80127de:	0c2d      	lsrs	r5, r5, #16
 80127e0:	fb02 c505 	mla	r5, r2, r5, ip
 80127e4:	b289      	uxth	r1, r1
 80127e6:	3301      	adds	r3, #1
 80127e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80127ec:	429e      	cmp	r6, r3
 80127ee:	f840 1b04 	str.w	r1, [r0], #4
 80127f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80127f6:	dcec      	bgt.n	80127d2 <__multadd+0x12>
 80127f8:	f1b8 0f00 	cmp.w	r8, #0
 80127fc:	d022      	beq.n	8012844 <__multadd+0x84>
 80127fe:	68a3      	ldr	r3, [r4, #8]
 8012800:	42b3      	cmp	r3, r6
 8012802:	dc19      	bgt.n	8012838 <__multadd+0x78>
 8012804:	6861      	ldr	r1, [r4, #4]
 8012806:	4638      	mov	r0, r7
 8012808:	3101      	adds	r1, #1
 801280a:	f7ff ff77 	bl	80126fc <_Balloc>
 801280e:	4605      	mov	r5, r0
 8012810:	b928      	cbnz	r0, 801281e <__multadd+0x5e>
 8012812:	4602      	mov	r2, r0
 8012814:	4b0d      	ldr	r3, [pc, #52]	; (801284c <__multadd+0x8c>)
 8012816:	480e      	ldr	r0, [pc, #56]	; (8012850 <__multadd+0x90>)
 8012818:	21b5      	movs	r1, #181	; 0xb5
 801281a:	f001 f8d3 	bl	80139c4 <__assert_func>
 801281e:	6922      	ldr	r2, [r4, #16]
 8012820:	3202      	adds	r2, #2
 8012822:	f104 010c 	add.w	r1, r4, #12
 8012826:	0092      	lsls	r2, r2, #2
 8012828:	300c      	adds	r0, #12
 801282a:	f7fd ff1b 	bl	8010664 <memcpy>
 801282e:	4621      	mov	r1, r4
 8012830:	4638      	mov	r0, r7
 8012832:	f7ff ffa3 	bl	801277c <_Bfree>
 8012836:	462c      	mov	r4, r5
 8012838:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801283c:	3601      	adds	r6, #1
 801283e:	f8c3 8014 	str.w	r8, [r3, #20]
 8012842:	6126      	str	r6, [r4, #16]
 8012844:	4620      	mov	r0, r4
 8012846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801284a:	bf00      	nop
 801284c:	080156f8 	.word	0x080156f8
 8012850:	0801579f 	.word	0x0801579f

08012854 <__s2b>:
 8012854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012858:	460c      	mov	r4, r1
 801285a:	4615      	mov	r5, r2
 801285c:	461f      	mov	r7, r3
 801285e:	2209      	movs	r2, #9
 8012860:	3308      	adds	r3, #8
 8012862:	4606      	mov	r6, r0
 8012864:	fb93 f3f2 	sdiv	r3, r3, r2
 8012868:	2100      	movs	r1, #0
 801286a:	2201      	movs	r2, #1
 801286c:	429a      	cmp	r2, r3
 801286e:	db09      	blt.n	8012884 <__s2b+0x30>
 8012870:	4630      	mov	r0, r6
 8012872:	f7ff ff43 	bl	80126fc <_Balloc>
 8012876:	b940      	cbnz	r0, 801288a <__s2b+0x36>
 8012878:	4602      	mov	r2, r0
 801287a:	4b19      	ldr	r3, [pc, #100]	; (80128e0 <__s2b+0x8c>)
 801287c:	4819      	ldr	r0, [pc, #100]	; (80128e4 <__s2b+0x90>)
 801287e:	21ce      	movs	r1, #206	; 0xce
 8012880:	f001 f8a0 	bl	80139c4 <__assert_func>
 8012884:	0052      	lsls	r2, r2, #1
 8012886:	3101      	adds	r1, #1
 8012888:	e7f0      	b.n	801286c <__s2b+0x18>
 801288a:	9b08      	ldr	r3, [sp, #32]
 801288c:	6143      	str	r3, [r0, #20]
 801288e:	2d09      	cmp	r5, #9
 8012890:	f04f 0301 	mov.w	r3, #1
 8012894:	6103      	str	r3, [r0, #16]
 8012896:	dd16      	ble.n	80128c6 <__s2b+0x72>
 8012898:	f104 0909 	add.w	r9, r4, #9
 801289c:	46c8      	mov	r8, r9
 801289e:	442c      	add	r4, r5
 80128a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80128a4:	4601      	mov	r1, r0
 80128a6:	3b30      	subs	r3, #48	; 0x30
 80128a8:	220a      	movs	r2, #10
 80128aa:	4630      	mov	r0, r6
 80128ac:	f7ff ff88 	bl	80127c0 <__multadd>
 80128b0:	45a0      	cmp	r8, r4
 80128b2:	d1f5      	bne.n	80128a0 <__s2b+0x4c>
 80128b4:	f1a5 0408 	sub.w	r4, r5, #8
 80128b8:	444c      	add	r4, r9
 80128ba:	1b2d      	subs	r5, r5, r4
 80128bc:	1963      	adds	r3, r4, r5
 80128be:	42bb      	cmp	r3, r7
 80128c0:	db04      	blt.n	80128cc <__s2b+0x78>
 80128c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128c6:	340a      	adds	r4, #10
 80128c8:	2509      	movs	r5, #9
 80128ca:	e7f6      	b.n	80128ba <__s2b+0x66>
 80128cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80128d0:	4601      	mov	r1, r0
 80128d2:	3b30      	subs	r3, #48	; 0x30
 80128d4:	220a      	movs	r2, #10
 80128d6:	4630      	mov	r0, r6
 80128d8:	f7ff ff72 	bl	80127c0 <__multadd>
 80128dc:	e7ee      	b.n	80128bc <__s2b+0x68>
 80128de:	bf00      	nop
 80128e0:	080156f8 	.word	0x080156f8
 80128e4:	0801579f 	.word	0x0801579f

080128e8 <__hi0bits>:
 80128e8:	0c03      	lsrs	r3, r0, #16
 80128ea:	041b      	lsls	r3, r3, #16
 80128ec:	b9d3      	cbnz	r3, 8012924 <__hi0bits+0x3c>
 80128ee:	0400      	lsls	r0, r0, #16
 80128f0:	2310      	movs	r3, #16
 80128f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80128f6:	bf04      	itt	eq
 80128f8:	0200      	lsleq	r0, r0, #8
 80128fa:	3308      	addeq	r3, #8
 80128fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012900:	bf04      	itt	eq
 8012902:	0100      	lsleq	r0, r0, #4
 8012904:	3304      	addeq	r3, #4
 8012906:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801290a:	bf04      	itt	eq
 801290c:	0080      	lsleq	r0, r0, #2
 801290e:	3302      	addeq	r3, #2
 8012910:	2800      	cmp	r0, #0
 8012912:	db05      	blt.n	8012920 <__hi0bits+0x38>
 8012914:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012918:	f103 0301 	add.w	r3, r3, #1
 801291c:	bf08      	it	eq
 801291e:	2320      	moveq	r3, #32
 8012920:	4618      	mov	r0, r3
 8012922:	4770      	bx	lr
 8012924:	2300      	movs	r3, #0
 8012926:	e7e4      	b.n	80128f2 <__hi0bits+0xa>

08012928 <__lo0bits>:
 8012928:	6803      	ldr	r3, [r0, #0]
 801292a:	f013 0207 	ands.w	r2, r3, #7
 801292e:	4601      	mov	r1, r0
 8012930:	d00b      	beq.n	801294a <__lo0bits+0x22>
 8012932:	07da      	lsls	r2, r3, #31
 8012934:	d424      	bmi.n	8012980 <__lo0bits+0x58>
 8012936:	0798      	lsls	r0, r3, #30
 8012938:	bf49      	itett	mi
 801293a:	085b      	lsrmi	r3, r3, #1
 801293c:	089b      	lsrpl	r3, r3, #2
 801293e:	2001      	movmi	r0, #1
 8012940:	600b      	strmi	r3, [r1, #0]
 8012942:	bf5c      	itt	pl
 8012944:	600b      	strpl	r3, [r1, #0]
 8012946:	2002      	movpl	r0, #2
 8012948:	4770      	bx	lr
 801294a:	b298      	uxth	r0, r3
 801294c:	b9b0      	cbnz	r0, 801297c <__lo0bits+0x54>
 801294e:	0c1b      	lsrs	r3, r3, #16
 8012950:	2010      	movs	r0, #16
 8012952:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012956:	bf04      	itt	eq
 8012958:	0a1b      	lsreq	r3, r3, #8
 801295a:	3008      	addeq	r0, #8
 801295c:	071a      	lsls	r2, r3, #28
 801295e:	bf04      	itt	eq
 8012960:	091b      	lsreq	r3, r3, #4
 8012962:	3004      	addeq	r0, #4
 8012964:	079a      	lsls	r2, r3, #30
 8012966:	bf04      	itt	eq
 8012968:	089b      	lsreq	r3, r3, #2
 801296a:	3002      	addeq	r0, #2
 801296c:	07da      	lsls	r2, r3, #31
 801296e:	d403      	bmi.n	8012978 <__lo0bits+0x50>
 8012970:	085b      	lsrs	r3, r3, #1
 8012972:	f100 0001 	add.w	r0, r0, #1
 8012976:	d005      	beq.n	8012984 <__lo0bits+0x5c>
 8012978:	600b      	str	r3, [r1, #0]
 801297a:	4770      	bx	lr
 801297c:	4610      	mov	r0, r2
 801297e:	e7e8      	b.n	8012952 <__lo0bits+0x2a>
 8012980:	2000      	movs	r0, #0
 8012982:	4770      	bx	lr
 8012984:	2020      	movs	r0, #32
 8012986:	4770      	bx	lr

08012988 <__i2b>:
 8012988:	b510      	push	{r4, lr}
 801298a:	460c      	mov	r4, r1
 801298c:	2101      	movs	r1, #1
 801298e:	f7ff feb5 	bl	80126fc <_Balloc>
 8012992:	4602      	mov	r2, r0
 8012994:	b928      	cbnz	r0, 80129a2 <__i2b+0x1a>
 8012996:	4b05      	ldr	r3, [pc, #20]	; (80129ac <__i2b+0x24>)
 8012998:	4805      	ldr	r0, [pc, #20]	; (80129b0 <__i2b+0x28>)
 801299a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801299e:	f001 f811 	bl	80139c4 <__assert_func>
 80129a2:	2301      	movs	r3, #1
 80129a4:	6144      	str	r4, [r0, #20]
 80129a6:	6103      	str	r3, [r0, #16]
 80129a8:	bd10      	pop	{r4, pc}
 80129aa:	bf00      	nop
 80129ac:	080156f8 	.word	0x080156f8
 80129b0:	0801579f 	.word	0x0801579f

080129b4 <__multiply>:
 80129b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129b8:	4614      	mov	r4, r2
 80129ba:	690a      	ldr	r2, [r1, #16]
 80129bc:	6923      	ldr	r3, [r4, #16]
 80129be:	429a      	cmp	r2, r3
 80129c0:	bfb8      	it	lt
 80129c2:	460b      	movlt	r3, r1
 80129c4:	460d      	mov	r5, r1
 80129c6:	bfbc      	itt	lt
 80129c8:	4625      	movlt	r5, r4
 80129ca:	461c      	movlt	r4, r3
 80129cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80129d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80129d4:	68ab      	ldr	r3, [r5, #8]
 80129d6:	6869      	ldr	r1, [r5, #4]
 80129d8:	eb0a 0709 	add.w	r7, sl, r9
 80129dc:	42bb      	cmp	r3, r7
 80129de:	b085      	sub	sp, #20
 80129e0:	bfb8      	it	lt
 80129e2:	3101      	addlt	r1, #1
 80129e4:	f7ff fe8a 	bl	80126fc <_Balloc>
 80129e8:	b930      	cbnz	r0, 80129f8 <__multiply+0x44>
 80129ea:	4602      	mov	r2, r0
 80129ec:	4b42      	ldr	r3, [pc, #264]	; (8012af8 <__multiply+0x144>)
 80129ee:	4843      	ldr	r0, [pc, #268]	; (8012afc <__multiply+0x148>)
 80129f0:	f240 115d 	movw	r1, #349	; 0x15d
 80129f4:	f000 ffe6 	bl	80139c4 <__assert_func>
 80129f8:	f100 0614 	add.w	r6, r0, #20
 80129fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012a00:	4633      	mov	r3, r6
 8012a02:	2200      	movs	r2, #0
 8012a04:	4543      	cmp	r3, r8
 8012a06:	d31e      	bcc.n	8012a46 <__multiply+0x92>
 8012a08:	f105 0c14 	add.w	ip, r5, #20
 8012a0c:	f104 0314 	add.w	r3, r4, #20
 8012a10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012a14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012a18:	9202      	str	r2, [sp, #8]
 8012a1a:	ebac 0205 	sub.w	r2, ip, r5
 8012a1e:	3a15      	subs	r2, #21
 8012a20:	f022 0203 	bic.w	r2, r2, #3
 8012a24:	3204      	adds	r2, #4
 8012a26:	f105 0115 	add.w	r1, r5, #21
 8012a2a:	458c      	cmp	ip, r1
 8012a2c:	bf38      	it	cc
 8012a2e:	2204      	movcc	r2, #4
 8012a30:	9201      	str	r2, [sp, #4]
 8012a32:	9a02      	ldr	r2, [sp, #8]
 8012a34:	9303      	str	r3, [sp, #12]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d808      	bhi.n	8012a4c <__multiply+0x98>
 8012a3a:	2f00      	cmp	r7, #0
 8012a3c:	dc55      	bgt.n	8012aea <__multiply+0x136>
 8012a3e:	6107      	str	r7, [r0, #16]
 8012a40:	b005      	add	sp, #20
 8012a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a46:	f843 2b04 	str.w	r2, [r3], #4
 8012a4a:	e7db      	b.n	8012a04 <__multiply+0x50>
 8012a4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8012a50:	f1ba 0f00 	cmp.w	sl, #0
 8012a54:	d020      	beq.n	8012a98 <__multiply+0xe4>
 8012a56:	f105 0e14 	add.w	lr, r5, #20
 8012a5a:	46b1      	mov	r9, r6
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012a62:	f8d9 b000 	ldr.w	fp, [r9]
 8012a66:	b2a1      	uxth	r1, r4
 8012a68:	fa1f fb8b 	uxth.w	fp, fp
 8012a6c:	fb0a b101 	mla	r1, sl, r1, fp
 8012a70:	4411      	add	r1, r2
 8012a72:	f8d9 2000 	ldr.w	r2, [r9]
 8012a76:	0c24      	lsrs	r4, r4, #16
 8012a78:	0c12      	lsrs	r2, r2, #16
 8012a7a:	fb0a 2404 	mla	r4, sl, r4, r2
 8012a7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012a82:	b289      	uxth	r1, r1
 8012a84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012a88:	45f4      	cmp	ip, lr
 8012a8a:	f849 1b04 	str.w	r1, [r9], #4
 8012a8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012a92:	d8e4      	bhi.n	8012a5e <__multiply+0xaa>
 8012a94:	9901      	ldr	r1, [sp, #4]
 8012a96:	5072      	str	r2, [r6, r1]
 8012a98:	9a03      	ldr	r2, [sp, #12]
 8012a9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012a9e:	3304      	adds	r3, #4
 8012aa0:	f1b9 0f00 	cmp.w	r9, #0
 8012aa4:	d01f      	beq.n	8012ae6 <__multiply+0x132>
 8012aa6:	6834      	ldr	r4, [r6, #0]
 8012aa8:	f105 0114 	add.w	r1, r5, #20
 8012aac:	46b6      	mov	lr, r6
 8012aae:	f04f 0a00 	mov.w	sl, #0
 8012ab2:	880a      	ldrh	r2, [r1, #0]
 8012ab4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012ab8:	fb09 b202 	mla	r2, r9, r2, fp
 8012abc:	4492      	add	sl, r2
 8012abe:	b2a4      	uxth	r4, r4
 8012ac0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012ac4:	f84e 4b04 	str.w	r4, [lr], #4
 8012ac8:	f851 4b04 	ldr.w	r4, [r1], #4
 8012acc:	f8be 2000 	ldrh.w	r2, [lr]
 8012ad0:	0c24      	lsrs	r4, r4, #16
 8012ad2:	fb09 2404 	mla	r4, r9, r4, r2
 8012ad6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012ada:	458c      	cmp	ip, r1
 8012adc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012ae0:	d8e7      	bhi.n	8012ab2 <__multiply+0xfe>
 8012ae2:	9a01      	ldr	r2, [sp, #4]
 8012ae4:	50b4      	str	r4, [r6, r2]
 8012ae6:	3604      	adds	r6, #4
 8012ae8:	e7a3      	b.n	8012a32 <__multiply+0x7e>
 8012aea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d1a5      	bne.n	8012a3e <__multiply+0x8a>
 8012af2:	3f01      	subs	r7, #1
 8012af4:	e7a1      	b.n	8012a3a <__multiply+0x86>
 8012af6:	bf00      	nop
 8012af8:	080156f8 	.word	0x080156f8
 8012afc:	0801579f 	.word	0x0801579f

08012b00 <__pow5mult>:
 8012b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b04:	4615      	mov	r5, r2
 8012b06:	f012 0203 	ands.w	r2, r2, #3
 8012b0a:	4606      	mov	r6, r0
 8012b0c:	460f      	mov	r7, r1
 8012b0e:	d007      	beq.n	8012b20 <__pow5mult+0x20>
 8012b10:	4c25      	ldr	r4, [pc, #148]	; (8012ba8 <__pow5mult+0xa8>)
 8012b12:	3a01      	subs	r2, #1
 8012b14:	2300      	movs	r3, #0
 8012b16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b1a:	f7ff fe51 	bl	80127c0 <__multadd>
 8012b1e:	4607      	mov	r7, r0
 8012b20:	10ad      	asrs	r5, r5, #2
 8012b22:	d03d      	beq.n	8012ba0 <__pow5mult+0xa0>
 8012b24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012b26:	b97c      	cbnz	r4, 8012b48 <__pow5mult+0x48>
 8012b28:	2010      	movs	r0, #16
 8012b2a:	f7fd fd8b 	bl	8010644 <malloc>
 8012b2e:	4602      	mov	r2, r0
 8012b30:	6270      	str	r0, [r6, #36]	; 0x24
 8012b32:	b928      	cbnz	r0, 8012b40 <__pow5mult+0x40>
 8012b34:	4b1d      	ldr	r3, [pc, #116]	; (8012bac <__pow5mult+0xac>)
 8012b36:	481e      	ldr	r0, [pc, #120]	; (8012bb0 <__pow5mult+0xb0>)
 8012b38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012b3c:	f000 ff42 	bl	80139c4 <__assert_func>
 8012b40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b44:	6004      	str	r4, [r0, #0]
 8012b46:	60c4      	str	r4, [r0, #12]
 8012b48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012b4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b50:	b94c      	cbnz	r4, 8012b66 <__pow5mult+0x66>
 8012b52:	f240 2171 	movw	r1, #625	; 0x271
 8012b56:	4630      	mov	r0, r6
 8012b58:	f7ff ff16 	bl	8012988 <__i2b>
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b62:	4604      	mov	r4, r0
 8012b64:	6003      	str	r3, [r0, #0]
 8012b66:	f04f 0900 	mov.w	r9, #0
 8012b6a:	07eb      	lsls	r3, r5, #31
 8012b6c:	d50a      	bpl.n	8012b84 <__pow5mult+0x84>
 8012b6e:	4639      	mov	r1, r7
 8012b70:	4622      	mov	r2, r4
 8012b72:	4630      	mov	r0, r6
 8012b74:	f7ff ff1e 	bl	80129b4 <__multiply>
 8012b78:	4639      	mov	r1, r7
 8012b7a:	4680      	mov	r8, r0
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f7ff fdfd 	bl	801277c <_Bfree>
 8012b82:	4647      	mov	r7, r8
 8012b84:	106d      	asrs	r5, r5, #1
 8012b86:	d00b      	beq.n	8012ba0 <__pow5mult+0xa0>
 8012b88:	6820      	ldr	r0, [r4, #0]
 8012b8a:	b938      	cbnz	r0, 8012b9c <__pow5mult+0x9c>
 8012b8c:	4622      	mov	r2, r4
 8012b8e:	4621      	mov	r1, r4
 8012b90:	4630      	mov	r0, r6
 8012b92:	f7ff ff0f 	bl	80129b4 <__multiply>
 8012b96:	6020      	str	r0, [r4, #0]
 8012b98:	f8c0 9000 	str.w	r9, [r0]
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	e7e4      	b.n	8012b6a <__pow5mult+0x6a>
 8012ba0:	4638      	mov	r0, r7
 8012ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ba6:	bf00      	nop
 8012ba8:	080158f0 	.word	0x080158f0
 8012bac:	08015788 	.word	0x08015788
 8012bb0:	0801579f 	.word	0x0801579f

08012bb4 <__lshift>:
 8012bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bb8:	460c      	mov	r4, r1
 8012bba:	6849      	ldr	r1, [r1, #4]
 8012bbc:	6923      	ldr	r3, [r4, #16]
 8012bbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012bc2:	68a3      	ldr	r3, [r4, #8]
 8012bc4:	4607      	mov	r7, r0
 8012bc6:	4691      	mov	r9, r2
 8012bc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012bcc:	f108 0601 	add.w	r6, r8, #1
 8012bd0:	42b3      	cmp	r3, r6
 8012bd2:	db0b      	blt.n	8012bec <__lshift+0x38>
 8012bd4:	4638      	mov	r0, r7
 8012bd6:	f7ff fd91 	bl	80126fc <_Balloc>
 8012bda:	4605      	mov	r5, r0
 8012bdc:	b948      	cbnz	r0, 8012bf2 <__lshift+0x3e>
 8012bde:	4602      	mov	r2, r0
 8012be0:	4b28      	ldr	r3, [pc, #160]	; (8012c84 <__lshift+0xd0>)
 8012be2:	4829      	ldr	r0, [pc, #164]	; (8012c88 <__lshift+0xd4>)
 8012be4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012be8:	f000 feec 	bl	80139c4 <__assert_func>
 8012bec:	3101      	adds	r1, #1
 8012bee:	005b      	lsls	r3, r3, #1
 8012bf0:	e7ee      	b.n	8012bd0 <__lshift+0x1c>
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	f100 0114 	add.w	r1, r0, #20
 8012bf8:	f100 0210 	add.w	r2, r0, #16
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	4553      	cmp	r3, sl
 8012c00:	db33      	blt.n	8012c6a <__lshift+0xb6>
 8012c02:	6920      	ldr	r0, [r4, #16]
 8012c04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c08:	f104 0314 	add.w	r3, r4, #20
 8012c0c:	f019 091f 	ands.w	r9, r9, #31
 8012c10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012c18:	d02b      	beq.n	8012c72 <__lshift+0xbe>
 8012c1a:	f1c9 0e20 	rsb	lr, r9, #32
 8012c1e:	468a      	mov	sl, r1
 8012c20:	2200      	movs	r2, #0
 8012c22:	6818      	ldr	r0, [r3, #0]
 8012c24:	fa00 f009 	lsl.w	r0, r0, r9
 8012c28:	4302      	orrs	r2, r0
 8012c2a:	f84a 2b04 	str.w	r2, [sl], #4
 8012c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c32:	459c      	cmp	ip, r3
 8012c34:	fa22 f20e 	lsr.w	r2, r2, lr
 8012c38:	d8f3      	bhi.n	8012c22 <__lshift+0x6e>
 8012c3a:	ebac 0304 	sub.w	r3, ip, r4
 8012c3e:	3b15      	subs	r3, #21
 8012c40:	f023 0303 	bic.w	r3, r3, #3
 8012c44:	3304      	adds	r3, #4
 8012c46:	f104 0015 	add.w	r0, r4, #21
 8012c4a:	4584      	cmp	ip, r0
 8012c4c:	bf38      	it	cc
 8012c4e:	2304      	movcc	r3, #4
 8012c50:	50ca      	str	r2, [r1, r3]
 8012c52:	b10a      	cbz	r2, 8012c58 <__lshift+0xa4>
 8012c54:	f108 0602 	add.w	r6, r8, #2
 8012c58:	3e01      	subs	r6, #1
 8012c5a:	4638      	mov	r0, r7
 8012c5c:	612e      	str	r6, [r5, #16]
 8012c5e:	4621      	mov	r1, r4
 8012c60:	f7ff fd8c 	bl	801277c <_Bfree>
 8012c64:	4628      	mov	r0, r5
 8012c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8012c6e:	3301      	adds	r3, #1
 8012c70:	e7c5      	b.n	8012bfe <__lshift+0x4a>
 8012c72:	3904      	subs	r1, #4
 8012c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c78:	f841 2f04 	str.w	r2, [r1, #4]!
 8012c7c:	459c      	cmp	ip, r3
 8012c7e:	d8f9      	bhi.n	8012c74 <__lshift+0xc0>
 8012c80:	e7ea      	b.n	8012c58 <__lshift+0xa4>
 8012c82:	bf00      	nop
 8012c84:	080156f8 	.word	0x080156f8
 8012c88:	0801579f 	.word	0x0801579f

08012c8c <__mcmp>:
 8012c8c:	b530      	push	{r4, r5, lr}
 8012c8e:	6902      	ldr	r2, [r0, #16]
 8012c90:	690c      	ldr	r4, [r1, #16]
 8012c92:	1b12      	subs	r2, r2, r4
 8012c94:	d10e      	bne.n	8012cb4 <__mcmp+0x28>
 8012c96:	f100 0314 	add.w	r3, r0, #20
 8012c9a:	3114      	adds	r1, #20
 8012c9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012ca0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012ca4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012ca8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012cac:	42a5      	cmp	r5, r4
 8012cae:	d003      	beq.n	8012cb8 <__mcmp+0x2c>
 8012cb0:	d305      	bcc.n	8012cbe <__mcmp+0x32>
 8012cb2:	2201      	movs	r2, #1
 8012cb4:	4610      	mov	r0, r2
 8012cb6:	bd30      	pop	{r4, r5, pc}
 8012cb8:	4283      	cmp	r3, r0
 8012cba:	d3f3      	bcc.n	8012ca4 <__mcmp+0x18>
 8012cbc:	e7fa      	b.n	8012cb4 <__mcmp+0x28>
 8012cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8012cc2:	e7f7      	b.n	8012cb4 <__mcmp+0x28>

08012cc4 <__mdiff>:
 8012cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc8:	460c      	mov	r4, r1
 8012cca:	4606      	mov	r6, r0
 8012ccc:	4611      	mov	r1, r2
 8012cce:	4620      	mov	r0, r4
 8012cd0:	4617      	mov	r7, r2
 8012cd2:	f7ff ffdb 	bl	8012c8c <__mcmp>
 8012cd6:	1e05      	subs	r5, r0, #0
 8012cd8:	d110      	bne.n	8012cfc <__mdiff+0x38>
 8012cda:	4629      	mov	r1, r5
 8012cdc:	4630      	mov	r0, r6
 8012cde:	f7ff fd0d 	bl	80126fc <_Balloc>
 8012ce2:	b930      	cbnz	r0, 8012cf2 <__mdiff+0x2e>
 8012ce4:	4b39      	ldr	r3, [pc, #228]	; (8012dcc <__mdiff+0x108>)
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	f240 2132 	movw	r1, #562	; 0x232
 8012cec:	4838      	ldr	r0, [pc, #224]	; (8012dd0 <__mdiff+0x10c>)
 8012cee:	f000 fe69 	bl	80139c4 <__assert_func>
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cfc:	bfa4      	itt	ge
 8012cfe:	463b      	movge	r3, r7
 8012d00:	4627      	movge	r7, r4
 8012d02:	4630      	mov	r0, r6
 8012d04:	6879      	ldr	r1, [r7, #4]
 8012d06:	bfa6      	itte	ge
 8012d08:	461c      	movge	r4, r3
 8012d0a:	2500      	movge	r5, #0
 8012d0c:	2501      	movlt	r5, #1
 8012d0e:	f7ff fcf5 	bl	80126fc <_Balloc>
 8012d12:	b920      	cbnz	r0, 8012d1e <__mdiff+0x5a>
 8012d14:	4b2d      	ldr	r3, [pc, #180]	; (8012dcc <__mdiff+0x108>)
 8012d16:	4602      	mov	r2, r0
 8012d18:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012d1c:	e7e6      	b.n	8012cec <__mdiff+0x28>
 8012d1e:	693e      	ldr	r6, [r7, #16]
 8012d20:	60c5      	str	r5, [r0, #12]
 8012d22:	6925      	ldr	r5, [r4, #16]
 8012d24:	f107 0114 	add.w	r1, r7, #20
 8012d28:	f104 0914 	add.w	r9, r4, #20
 8012d2c:	f100 0e14 	add.w	lr, r0, #20
 8012d30:	f107 0210 	add.w	r2, r7, #16
 8012d34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012d38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012d3c:	46f2      	mov	sl, lr
 8012d3e:	2700      	movs	r7, #0
 8012d40:	f859 3b04 	ldr.w	r3, [r9], #4
 8012d44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012d48:	fa1f f883 	uxth.w	r8, r3
 8012d4c:	fa17 f78b 	uxtah	r7, r7, fp
 8012d50:	0c1b      	lsrs	r3, r3, #16
 8012d52:	eba7 0808 	sub.w	r8, r7, r8
 8012d56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012d5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012d5e:	fa1f f888 	uxth.w	r8, r8
 8012d62:	141f      	asrs	r7, r3, #16
 8012d64:	454d      	cmp	r5, r9
 8012d66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012d6a:	f84a 3b04 	str.w	r3, [sl], #4
 8012d6e:	d8e7      	bhi.n	8012d40 <__mdiff+0x7c>
 8012d70:	1b2b      	subs	r3, r5, r4
 8012d72:	3b15      	subs	r3, #21
 8012d74:	f023 0303 	bic.w	r3, r3, #3
 8012d78:	3304      	adds	r3, #4
 8012d7a:	3415      	adds	r4, #21
 8012d7c:	42a5      	cmp	r5, r4
 8012d7e:	bf38      	it	cc
 8012d80:	2304      	movcc	r3, #4
 8012d82:	4419      	add	r1, r3
 8012d84:	4473      	add	r3, lr
 8012d86:	469e      	mov	lr, r3
 8012d88:	460d      	mov	r5, r1
 8012d8a:	4565      	cmp	r5, ip
 8012d8c:	d30e      	bcc.n	8012dac <__mdiff+0xe8>
 8012d8e:	f10c 0203 	add.w	r2, ip, #3
 8012d92:	1a52      	subs	r2, r2, r1
 8012d94:	f022 0203 	bic.w	r2, r2, #3
 8012d98:	3903      	subs	r1, #3
 8012d9a:	458c      	cmp	ip, r1
 8012d9c:	bf38      	it	cc
 8012d9e:	2200      	movcc	r2, #0
 8012da0:	441a      	add	r2, r3
 8012da2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012da6:	b17b      	cbz	r3, 8012dc8 <__mdiff+0x104>
 8012da8:	6106      	str	r6, [r0, #16]
 8012daa:	e7a5      	b.n	8012cf8 <__mdiff+0x34>
 8012dac:	f855 8b04 	ldr.w	r8, [r5], #4
 8012db0:	fa17 f488 	uxtah	r4, r7, r8
 8012db4:	1422      	asrs	r2, r4, #16
 8012db6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012dba:	b2a4      	uxth	r4, r4
 8012dbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012dc0:	f84e 4b04 	str.w	r4, [lr], #4
 8012dc4:	1417      	asrs	r7, r2, #16
 8012dc6:	e7e0      	b.n	8012d8a <__mdiff+0xc6>
 8012dc8:	3e01      	subs	r6, #1
 8012dca:	e7ea      	b.n	8012da2 <__mdiff+0xde>
 8012dcc:	080156f8 	.word	0x080156f8
 8012dd0:	0801579f 	.word	0x0801579f

08012dd4 <__ulp>:
 8012dd4:	b082      	sub	sp, #8
 8012dd6:	ed8d 0b00 	vstr	d0, [sp]
 8012dda:	9b01      	ldr	r3, [sp, #4]
 8012ddc:	4912      	ldr	r1, [pc, #72]	; (8012e28 <__ulp+0x54>)
 8012dde:	4019      	ands	r1, r3
 8012de0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012de4:	2900      	cmp	r1, #0
 8012de6:	dd05      	ble.n	8012df4 <__ulp+0x20>
 8012de8:	2200      	movs	r2, #0
 8012dea:	460b      	mov	r3, r1
 8012dec:	ec43 2b10 	vmov	d0, r2, r3
 8012df0:	b002      	add	sp, #8
 8012df2:	4770      	bx	lr
 8012df4:	4249      	negs	r1, r1
 8012df6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012dfa:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012dfe:	f04f 0200 	mov.w	r2, #0
 8012e02:	f04f 0300 	mov.w	r3, #0
 8012e06:	da04      	bge.n	8012e12 <__ulp+0x3e>
 8012e08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012e0c:	fa41 f300 	asr.w	r3, r1, r0
 8012e10:	e7ec      	b.n	8012dec <__ulp+0x18>
 8012e12:	f1a0 0114 	sub.w	r1, r0, #20
 8012e16:	291e      	cmp	r1, #30
 8012e18:	bfda      	itte	le
 8012e1a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012e1e:	fa20 f101 	lsrle.w	r1, r0, r1
 8012e22:	2101      	movgt	r1, #1
 8012e24:	460a      	mov	r2, r1
 8012e26:	e7e1      	b.n	8012dec <__ulp+0x18>
 8012e28:	7ff00000 	.word	0x7ff00000

08012e2c <__b2d>:
 8012e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e2e:	6905      	ldr	r5, [r0, #16]
 8012e30:	f100 0714 	add.w	r7, r0, #20
 8012e34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012e38:	1f2e      	subs	r6, r5, #4
 8012e3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012e3e:	4620      	mov	r0, r4
 8012e40:	f7ff fd52 	bl	80128e8 <__hi0bits>
 8012e44:	f1c0 0320 	rsb	r3, r0, #32
 8012e48:	280a      	cmp	r0, #10
 8012e4a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012ec8 <__b2d+0x9c>
 8012e4e:	600b      	str	r3, [r1, #0]
 8012e50:	dc14      	bgt.n	8012e7c <__b2d+0x50>
 8012e52:	f1c0 0e0b 	rsb	lr, r0, #11
 8012e56:	fa24 f10e 	lsr.w	r1, r4, lr
 8012e5a:	42b7      	cmp	r7, r6
 8012e5c:	ea41 030c 	orr.w	r3, r1, ip
 8012e60:	bf34      	ite	cc
 8012e62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012e66:	2100      	movcs	r1, #0
 8012e68:	3015      	adds	r0, #21
 8012e6a:	fa04 f000 	lsl.w	r0, r4, r0
 8012e6e:	fa21 f10e 	lsr.w	r1, r1, lr
 8012e72:	ea40 0201 	orr.w	r2, r0, r1
 8012e76:	ec43 2b10 	vmov	d0, r2, r3
 8012e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e7c:	42b7      	cmp	r7, r6
 8012e7e:	bf3a      	itte	cc
 8012e80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012e84:	f1a5 0608 	subcc.w	r6, r5, #8
 8012e88:	2100      	movcs	r1, #0
 8012e8a:	380b      	subs	r0, #11
 8012e8c:	d017      	beq.n	8012ebe <__b2d+0x92>
 8012e8e:	f1c0 0c20 	rsb	ip, r0, #32
 8012e92:	fa04 f500 	lsl.w	r5, r4, r0
 8012e96:	42be      	cmp	r6, r7
 8012e98:	fa21 f40c 	lsr.w	r4, r1, ip
 8012e9c:	ea45 0504 	orr.w	r5, r5, r4
 8012ea0:	bf8c      	ite	hi
 8012ea2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012ea6:	2400      	movls	r4, #0
 8012ea8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012eac:	fa01 f000 	lsl.w	r0, r1, r0
 8012eb0:	fa24 f40c 	lsr.w	r4, r4, ip
 8012eb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012eb8:	ea40 0204 	orr.w	r2, r0, r4
 8012ebc:	e7db      	b.n	8012e76 <__b2d+0x4a>
 8012ebe:	ea44 030c 	orr.w	r3, r4, ip
 8012ec2:	460a      	mov	r2, r1
 8012ec4:	e7d7      	b.n	8012e76 <__b2d+0x4a>
 8012ec6:	bf00      	nop
 8012ec8:	3ff00000 	.word	0x3ff00000

08012ecc <__d2b>:
 8012ecc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ed0:	4689      	mov	r9, r1
 8012ed2:	2101      	movs	r1, #1
 8012ed4:	ec57 6b10 	vmov	r6, r7, d0
 8012ed8:	4690      	mov	r8, r2
 8012eda:	f7ff fc0f 	bl	80126fc <_Balloc>
 8012ede:	4604      	mov	r4, r0
 8012ee0:	b930      	cbnz	r0, 8012ef0 <__d2b+0x24>
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	4b25      	ldr	r3, [pc, #148]	; (8012f7c <__d2b+0xb0>)
 8012ee6:	4826      	ldr	r0, [pc, #152]	; (8012f80 <__d2b+0xb4>)
 8012ee8:	f240 310a 	movw	r1, #778	; 0x30a
 8012eec:	f000 fd6a 	bl	80139c4 <__assert_func>
 8012ef0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012ef4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012ef8:	bb35      	cbnz	r5, 8012f48 <__d2b+0x7c>
 8012efa:	2e00      	cmp	r6, #0
 8012efc:	9301      	str	r3, [sp, #4]
 8012efe:	d028      	beq.n	8012f52 <__d2b+0x86>
 8012f00:	4668      	mov	r0, sp
 8012f02:	9600      	str	r6, [sp, #0]
 8012f04:	f7ff fd10 	bl	8012928 <__lo0bits>
 8012f08:	9900      	ldr	r1, [sp, #0]
 8012f0a:	b300      	cbz	r0, 8012f4e <__d2b+0x82>
 8012f0c:	9a01      	ldr	r2, [sp, #4]
 8012f0e:	f1c0 0320 	rsb	r3, r0, #32
 8012f12:	fa02 f303 	lsl.w	r3, r2, r3
 8012f16:	430b      	orrs	r3, r1
 8012f18:	40c2      	lsrs	r2, r0
 8012f1a:	6163      	str	r3, [r4, #20]
 8012f1c:	9201      	str	r2, [sp, #4]
 8012f1e:	9b01      	ldr	r3, [sp, #4]
 8012f20:	61a3      	str	r3, [r4, #24]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	bf14      	ite	ne
 8012f26:	2202      	movne	r2, #2
 8012f28:	2201      	moveq	r2, #1
 8012f2a:	6122      	str	r2, [r4, #16]
 8012f2c:	b1d5      	cbz	r5, 8012f64 <__d2b+0x98>
 8012f2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012f32:	4405      	add	r5, r0
 8012f34:	f8c9 5000 	str.w	r5, [r9]
 8012f38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012f3c:	f8c8 0000 	str.w	r0, [r8]
 8012f40:	4620      	mov	r0, r4
 8012f42:	b003      	add	sp, #12
 8012f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f4c:	e7d5      	b.n	8012efa <__d2b+0x2e>
 8012f4e:	6161      	str	r1, [r4, #20]
 8012f50:	e7e5      	b.n	8012f1e <__d2b+0x52>
 8012f52:	a801      	add	r0, sp, #4
 8012f54:	f7ff fce8 	bl	8012928 <__lo0bits>
 8012f58:	9b01      	ldr	r3, [sp, #4]
 8012f5a:	6163      	str	r3, [r4, #20]
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	6122      	str	r2, [r4, #16]
 8012f60:	3020      	adds	r0, #32
 8012f62:	e7e3      	b.n	8012f2c <__d2b+0x60>
 8012f64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012f6c:	f8c9 0000 	str.w	r0, [r9]
 8012f70:	6918      	ldr	r0, [r3, #16]
 8012f72:	f7ff fcb9 	bl	80128e8 <__hi0bits>
 8012f76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f7a:	e7df      	b.n	8012f3c <__d2b+0x70>
 8012f7c:	080156f8 	.word	0x080156f8
 8012f80:	0801579f 	.word	0x0801579f

08012f84 <__ratio>:
 8012f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f88:	4688      	mov	r8, r1
 8012f8a:	4669      	mov	r1, sp
 8012f8c:	4681      	mov	r9, r0
 8012f8e:	f7ff ff4d 	bl	8012e2c <__b2d>
 8012f92:	a901      	add	r1, sp, #4
 8012f94:	4640      	mov	r0, r8
 8012f96:	ec55 4b10 	vmov	r4, r5, d0
 8012f9a:	f7ff ff47 	bl	8012e2c <__b2d>
 8012f9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012fa2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012fa6:	eba3 0c02 	sub.w	ip, r3, r2
 8012faa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012fae:	1a9b      	subs	r3, r3, r2
 8012fb0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012fb4:	ec51 0b10 	vmov	r0, r1, d0
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	bfd6      	itet	le
 8012fbc:	460a      	movle	r2, r1
 8012fbe:	462a      	movgt	r2, r5
 8012fc0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012fc4:	468b      	mov	fp, r1
 8012fc6:	462f      	mov	r7, r5
 8012fc8:	bfd4      	ite	le
 8012fca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012fce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012fd2:	4620      	mov	r0, r4
 8012fd4:	ee10 2a10 	vmov	r2, s0
 8012fd8:	465b      	mov	r3, fp
 8012fda:	4639      	mov	r1, r7
 8012fdc:	f7ed fc4e 	bl	800087c <__aeabi_ddiv>
 8012fe0:	ec41 0b10 	vmov	d0, r0, r1
 8012fe4:	b003      	add	sp, #12
 8012fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012fea <__copybits>:
 8012fea:	3901      	subs	r1, #1
 8012fec:	b570      	push	{r4, r5, r6, lr}
 8012fee:	1149      	asrs	r1, r1, #5
 8012ff0:	6914      	ldr	r4, [r2, #16]
 8012ff2:	3101      	adds	r1, #1
 8012ff4:	f102 0314 	add.w	r3, r2, #20
 8012ff8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012ffc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013000:	1f05      	subs	r5, r0, #4
 8013002:	42a3      	cmp	r3, r4
 8013004:	d30c      	bcc.n	8013020 <__copybits+0x36>
 8013006:	1aa3      	subs	r3, r4, r2
 8013008:	3b11      	subs	r3, #17
 801300a:	f023 0303 	bic.w	r3, r3, #3
 801300e:	3211      	adds	r2, #17
 8013010:	42a2      	cmp	r2, r4
 8013012:	bf88      	it	hi
 8013014:	2300      	movhi	r3, #0
 8013016:	4418      	add	r0, r3
 8013018:	2300      	movs	r3, #0
 801301a:	4288      	cmp	r0, r1
 801301c:	d305      	bcc.n	801302a <__copybits+0x40>
 801301e:	bd70      	pop	{r4, r5, r6, pc}
 8013020:	f853 6b04 	ldr.w	r6, [r3], #4
 8013024:	f845 6f04 	str.w	r6, [r5, #4]!
 8013028:	e7eb      	b.n	8013002 <__copybits+0x18>
 801302a:	f840 3b04 	str.w	r3, [r0], #4
 801302e:	e7f4      	b.n	801301a <__copybits+0x30>

08013030 <__any_on>:
 8013030:	f100 0214 	add.w	r2, r0, #20
 8013034:	6900      	ldr	r0, [r0, #16]
 8013036:	114b      	asrs	r3, r1, #5
 8013038:	4298      	cmp	r0, r3
 801303a:	b510      	push	{r4, lr}
 801303c:	db11      	blt.n	8013062 <__any_on+0x32>
 801303e:	dd0a      	ble.n	8013056 <__any_on+0x26>
 8013040:	f011 011f 	ands.w	r1, r1, #31
 8013044:	d007      	beq.n	8013056 <__any_on+0x26>
 8013046:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801304a:	fa24 f001 	lsr.w	r0, r4, r1
 801304e:	fa00 f101 	lsl.w	r1, r0, r1
 8013052:	428c      	cmp	r4, r1
 8013054:	d10b      	bne.n	801306e <__any_on+0x3e>
 8013056:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801305a:	4293      	cmp	r3, r2
 801305c:	d803      	bhi.n	8013066 <__any_on+0x36>
 801305e:	2000      	movs	r0, #0
 8013060:	bd10      	pop	{r4, pc}
 8013062:	4603      	mov	r3, r0
 8013064:	e7f7      	b.n	8013056 <__any_on+0x26>
 8013066:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801306a:	2900      	cmp	r1, #0
 801306c:	d0f5      	beq.n	801305a <__any_on+0x2a>
 801306e:	2001      	movs	r0, #1
 8013070:	e7f6      	b.n	8013060 <__any_on+0x30>

08013072 <_calloc_r>:
 8013072:	b513      	push	{r0, r1, r4, lr}
 8013074:	434a      	muls	r2, r1
 8013076:	4611      	mov	r1, r2
 8013078:	9201      	str	r2, [sp, #4]
 801307a:	f7fd fb59 	bl	8010730 <_malloc_r>
 801307e:	4604      	mov	r4, r0
 8013080:	b118      	cbz	r0, 801308a <_calloc_r+0x18>
 8013082:	9a01      	ldr	r2, [sp, #4]
 8013084:	2100      	movs	r1, #0
 8013086:	f7fd fafb 	bl	8010680 <memset>
 801308a:	4620      	mov	r0, r4
 801308c:	b002      	add	sp, #8
 801308e:	bd10      	pop	{r4, pc}

08013090 <_realloc_r>:
 8013090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013092:	4607      	mov	r7, r0
 8013094:	4614      	mov	r4, r2
 8013096:	460e      	mov	r6, r1
 8013098:	b921      	cbnz	r1, 80130a4 <_realloc_r+0x14>
 801309a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801309e:	4611      	mov	r1, r2
 80130a0:	f7fd bb46 	b.w	8010730 <_malloc_r>
 80130a4:	b922      	cbnz	r2, 80130b0 <_realloc_r+0x20>
 80130a6:	f7fd faf3 	bl	8010690 <_free_r>
 80130aa:	4625      	mov	r5, r4
 80130ac:	4628      	mov	r0, r5
 80130ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130b0:	f000 fcf4 	bl	8013a9c <_malloc_usable_size_r>
 80130b4:	42a0      	cmp	r0, r4
 80130b6:	d20f      	bcs.n	80130d8 <_realloc_r+0x48>
 80130b8:	4621      	mov	r1, r4
 80130ba:	4638      	mov	r0, r7
 80130bc:	f7fd fb38 	bl	8010730 <_malloc_r>
 80130c0:	4605      	mov	r5, r0
 80130c2:	2800      	cmp	r0, #0
 80130c4:	d0f2      	beq.n	80130ac <_realloc_r+0x1c>
 80130c6:	4631      	mov	r1, r6
 80130c8:	4622      	mov	r2, r4
 80130ca:	f7fd facb 	bl	8010664 <memcpy>
 80130ce:	4631      	mov	r1, r6
 80130d0:	4638      	mov	r0, r7
 80130d2:	f7fd fadd 	bl	8010690 <_free_r>
 80130d6:	e7e9      	b.n	80130ac <_realloc_r+0x1c>
 80130d8:	4635      	mov	r5, r6
 80130da:	e7e7      	b.n	80130ac <_realloc_r+0x1c>

080130dc <__ssputs_r>:
 80130dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130e0:	688e      	ldr	r6, [r1, #8]
 80130e2:	429e      	cmp	r6, r3
 80130e4:	4682      	mov	sl, r0
 80130e6:	460c      	mov	r4, r1
 80130e8:	4690      	mov	r8, r2
 80130ea:	461f      	mov	r7, r3
 80130ec:	d838      	bhi.n	8013160 <__ssputs_r+0x84>
 80130ee:	898a      	ldrh	r2, [r1, #12]
 80130f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80130f4:	d032      	beq.n	801315c <__ssputs_r+0x80>
 80130f6:	6825      	ldr	r5, [r4, #0]
 80130f8:	6909      	ldr	r1, [r1, #16]
 80130fa:	eba5 0901 	sub.w	r9, r5, r1
 80130fe:	6965      	ldr	r5, [r4, #20]
 8013100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013108:	3301      	adds	r3, #1
 801310a:	444b      	add	r3, r9
 801310c:	106d      	asrs	r5, r5, #1
 801310e:	429d      	cmp	r5, r3
 8013110:	bf38      	it	cc
 8013112:	461d      	movcc	r5, r3
 8013114:	0553      	lsls	r3, r2, #21
 8013116:	d531      	bpl.n	801317c <__ssputs_r+0xa0>
 8013118:	4629      	mov	r1, r5
 801311a:	f7fd fb09 	bl	8010730 <_malloc_r>
 801311e:	4606      	mov	r6, r0
 8013120:	b950      	cbnz	r0, 8013138 <__ssputs_r+0x5c>
 8013122:	230c      	movs	r3, #12
 8013124:	f8ca 3000 	str.w	r3, [sl]
 8013128:	89a3      	ldrh	r3, [r4, #12]
 801312a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801312e:	81a3      	strh	r3, [r4, #12]
 8013130:	f04f 30ff 	mov.w	r0, #4294967295
 8013134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013138:	6921      	ldr	r1, [r4, #16]
 801313a:	464a      	mov	r2, r9
 801313c:	f7fd fa92 	bl	8010664 <memcpy>
 8013140:	89a3      	ldrh	r3, [r4, #12]
 8013142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801314a:	81a3      	strh	r3, [r4, #12]
 801314c:	6126      	str	r6, [r4, #16]
 801314e:	6165      	str	r5, [r4, #20]
 8013150:	444e      	add	r6, r9
 8013152:	eba5 0509 	sub.w	r5, r5, r9
 8013156:	6026      	str	r6, [r4, #0]
 8013158:	60a5      	str	r5, [r4, #8]
 801315a:	463e      	mov	r6, r7
 801315c:	42be      	cmp	r6, r7
 801315e:	d900      	bls.n	8013162 <__ssputs_r+0x86>
 8013160:	463e      	mov	r6, r7
 8013162:	4632      	mov	r2, r6
 8013164:	6820      	ldr	r0, [r4, #0]
 8013166:	4641      	mov	r1, r8
 8013168:	f000 fc7e 	bl	8013a68 <memmove>
 801316c:	68a3      	ldr	r3, [r4, #8]
 801316e:	6822      	ldr	r2, [r4, #0]
 8013170:	1b9b      	subs	r3, r3, r6
 8013172:	4432      	add	r2, r6
 8013174:	60a3      	str	r3, [r4, #8]
 8013176:	6022      	str	r2, [r4, #0]
 8013178:	2000      	movs	r0, #0
 801317a:	e7db      	b.n	8013134 <__ssputs_r+0x58>
 801317c:	462a      	mov	r2, r5
 801317e:	f7ff ff87 	bl	8013090 <_realloc_r>
 8013182:	4606      	mov	r6, r0
 8013184:	2800      	cmp	r0, #0
 8013186:	d1e1      	bne.n	801314c <__ssputs_r+0x70>
 8013188:	6921      	ldr	r1, [r4, #16]
 801318a:	4650      	mov	r0, sl
 801318c:	f7fd fa80 	bl	8010690 <_free_r>
 8013190:	e7c7      	b.n	8013122 <__ssputs_r+0x46>
	...

08013194 <_svfiprintf_r>:
 8013194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013198:	4698      	mov	r8, r3
 801319a:	898b      	ldrh	r3, [r1, #12]
 801319c:	061b      	lsls	r3, r3, #24
 801319e:	b09d      	sub	sp, #116	; 0x74
 80131a0:	4607      	mov	r7, r0
 80131a2:	460d      	mov	r5, r1
 80131a4:	4614      	mov	r4, r2
 80131a6:	d50e      	bpl.n	80131c6 <_svfiprintf_r+0x32>
 80131a8:	690b      	ldr	r3, [r1, #16]
 80131aa:	b963      	cbnz	r3, 80131c6 <_svfiprintf_r+0x32>
 80131ac:	2140      	movs	r1, #64	; 0x40
 80131ae:	f7fd fabf 	bl	8010730 <_malloc_r>
 80131b2:	6028      	str	r0, [r5, #0]
 80131b4:	6128      	str	r0, [r5, #16]
 80131b6:	b920      	cbnz	r0, 80131c2 <_svfiprintf_r+0x2e>
 80131b8:	230c      	movs	r3, #12
 80131ba:	603b      	str	r3, [r7, #0]
 80131bc:	f04f 30ff 	mov.w	r0, #4294967295
 80131c0:	e0d1      	b.n	8013366 <_svfiprintf_r+0x1d2>
 80131c2:	2340      	movs	r3, #64	; 0x40
 80131c4:	616b      	str	r3, [r5, #20]
 80131c6:	2300      	movs	r3, #0
 80131c8:	9309      	str	r3, [sp, #36]	; 0x24
 80131ca:	2320      	movs	r3, #32
 80131cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80131d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80131d4:	2330      	movs	r3, #48	; 0x30
 80131d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013380 <_svfiprintf_r+0x1ec>
 80131da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80131de:	f04f 0901 	mov.w	r9, #1
 80131e2:	4623      	mov	r3, r4
 80131e4:	469a      	mov	sl, r3
 80131e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131ea:	b10a      	cbz	r2, 80131f0 <_svfiprintf_r+0x5c>
 80131ec:	2a25      	cmp	r2, #37	; 0x25
 80131ee:	d1f9      	bne.n	80131e4 <_svfiprintf_r+0x50>
 80131f0:	ebba 0b04 	subs.w	fp, sl, r4
 80131f4:	d00b      	beq.n	801320e <_svfiprintf_r+0x7a>
 80131f6:	465b      	mov	r3, fp
 80131f8:	4622      	mov	r2, r4
 80131fa:	4629      	mov	r1, r5
 80131fc:	4638      	mov	r0, r7
 80131fe:	f7ff ff6d 	bl	80130dc <__ssputs_r>
 8013202:	3001      	adds	r0, #1
 8013204:	f000 80aa 	beq.w	801335c <_svfiprintf_r+0x1c8>
 8013208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801320a:	445a      	add	r2, fp
 801320c:	9209      	str	r2, [sp, #36]	; 0x24
 801320e:	f89a 3000 	ldrb.w	r3, [sl]
 8013212:	2b00      	cmp	r3, #0
 8013214:	f000 80a2 	beq.w	801335c <_svfiprintf_r+0x1c8>
 8013218:	2300      	movs	r3, #0
 801321a:	f04f 32ff 	mov.w	r2, #4294967295
 801321e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013222:	f10a 0a01 	add.w	sl, sl, #1
 8013226:	9304      	str	r3, [sp, #16]
 8013228:	9307      	str	r3, [sp, #28]
 801322a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801322e:	931a      	str	r3, [sp, #104]	; 0x68
 8013230:	4654      	mov	r4, sl
 8013232:	2205      	movs	r2, #5
 8013234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013238:	4851      	ldr	r0, [pc, #324]	; (8013380 <_svfiprintf_r+0x1ec>)
 801323a:	f7ec ffe9 	bl	8000210 <memchr>
 801323e:	9a04      	ldr	r2, [sp, #16]
 8013240:	b9d8      	cbnz	r0, 801327a <_svfiprintf_r+0xe6>
 8013242:	06d0      	lsls	r0, r2, #27
 8013244:	bf44      	itt	mi
 8013246:	2320      	movmi	r3, #32
 8013248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801324c:	0711      	lsls	r1, r2, #28
 801324e:	bf44      	itt	mi
 8013250:	232b      	movmi	r3, #43	; 0x2b
 8013252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013256:	f89a 3000 	ldrb.w	r3, [sl]
 801325a:	2b2a      	cmp	r3, #42	; 0x2a
 801325c:	d015      	beq.n	801328a <_svfiprintf_r+0xf6>
 801325e:	9a07      	ldr	r2, [sp, #28]
 8013260:	4654      	mov	r4, sl
 8013262:	2000      	movs	r0, #0
 8013264:	f04f 0c0a 	mov.w	ip, #10
 8013268:	4621      	mov	r1, r4
 801326a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801326e:	3b30      	subs	r3, #48	; 0x30
 8013270:	2b09      	cmp	r3, #9
 8013272:	d94e      	bls.n	8013312 <_svfiprintf_r+0x17e>
 8013274:	b1b0      	cbz	r0, 80132a4 <_svfiprintf_r+0x110>
 8013276:	9207      	str	r2, [sp, #28]
 8013278:	e014      	b.n	80132a4 <_svfiprintf_r+0x110>
 801327a:	eba0 0308 	sub.w	r3, r0, r8
 801327e:	fa09 f303 	lsl.w	r3, r9, r3
 8013282:	4313      	orrs	r3, r2
 8013284:	9304      	str	r3, [sp, #16]
 8013286:	46a2      	mov	sl, r4
 8013288:	e7d2      	b.n	8013230 <_svfiprintf_r+0x9c>
 801328a:	9b03      	ldr	r3, [sp, #12]
 801328c:	1d19      	adds	r1, r3, #4
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	9103      	str	r1, [sp, #12]
 8013292:	2b00      	cmp	r3, #0
 8013294:	bfbb      	ittet	lt
 8013296:	425b      	neglt	r3, r3
 8013298:	f042 0202 	orrlt.w	r2, r2, #2
 801329c:	9307      	strge	r3, [sp, #28]
 801329e:	9307      	strlt	r3, [sp, #28]
 80132a0:	bfb8      	it	lt
 80132a2:	9204      	strlt	r2, [sp, #16]
 80132a4:	7823      	ldrb	r3, [r4, #0]
 80132a6:	2b2e      	cmp	r3, #46	; 0x2e
 80132a8:	d10c      	bne.n	80132c4 <_svfiprintf_r+0x130>
 80132aa:	7863      	ldrb	r3, [r4, #1]
 80132ac:	2b2a      	cmp	r3, #42	; 0x2a
 80132ae:	d135      	bne.n	801331c <_svfiprintf_r+0x188>
 80132b0:	9b03      	ldr	r3, [sp, #12]
 80132b2:	1d1a      	adds	r2, r3, #4
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	9203      	str	r2, [sp, #12]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	bfb8      	it	lt
 80132bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80132c0:	3402      	adds	r4, #2
 80132c2:	9305      	str	r3, [sp, #20]
 80132c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013390 <_svfiprintf_r+0x1fc>
 80132c8:	7821      	ldrb	r1, [r4, #0]
 80132ca:	2203      	movs	r2, #3
 80132cc:	4650      	mov	r0, sl
 80132ce:	f7ec ff9f 	bl	8000210 <memchr>
 80132d2:	b140      	cbz	r0, 80132e6 <_svfiprintf_r+0x152>
 80132d4:	2340      	movs	r3, #64	; 0x40
 80132d6:	eba0 000a 	sub.w	r0, r0, sl
 80132da:	fa03 f000 	lsl.w	r0, r3, r0
 80132de:	9b04      	ldr	r3, [sp, #16]
 80132e0:	4303      	orrs	r3, r0
 80132e2:	3401      	adds	r4, #1
 80132e4:	9304      	str	r3, [sp, #16]
 80132e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132ea:	4826      	ldr	r0, [pc, #152]	; (8013384 <_svfiprintf_r+0x1f0>)
 80132ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132f0:	2206      	movs	r2, #6
 80132f2:	f7ec ff8d 	bl	8000210 <memchr>
 80132f6:	2800      	cmp	r0, #0
 80132f8:	d038      	beq.n	801336c <_svfiprintf_r+0x1d8>
 80132fa:	4b23      	ldr	r3, [pc, #140]	; (8013388 <_svfiprintf_r+0x1f4>)
 80132fc:	bb1b      	cbnz	r3, 8013346 <_svfiprintf_r+0x1b2>
 80132fe:	9b03      	ldr	r3, [sp, #12]
 8013300:	3307      	adds	r3, #7
 8013302:	f023 0307 	bic.w	r3, r3, #7
 8013306:	3308      	adds	r3, #8
 8013308:	9303      	str	r3, [sp, #12]
 801330a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801330c:	4433      	add	r3, r6
 801330e:	9309      	str	r3, [sp, #36]	; 0x24
 8013310:	e767      	b.n	80131e2 <_svfiprintf_r+0x4e>
 8013312:	fb0c 3202 	mla	r2, ip, r2, r3
 8013316:	460c      	mov	r4, r1
 8013318:	2001      	movs	r0, #1
 801331a:	e7a5      	b.n	8013268 <_svfiprintf_r+0xd4>
 801331c:	2300      	movs	r3, #0
 801331e:	3401      	adds	r4, #1
 8013320:	9305      	str	r3, [sp, #20]
 8013322:	4619      	mov	r1, r3
 8013324:	f04f 0c0a 	mov.w	ip, #10
 8013328:	4620      	mov	r0, r4
 801332a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801332e:	3a30      	subs	r2, #48	; 0x30
 8013330:	2a09      	cmp	r2, #9
 8013332:	d903      	bls.n	801333c <_svfiprintf_r+0x1a8>
 8013334:	2b00      	cmp	r3, #0
 8013336:	d0c5      	beq.n	80132c4 <_svfiprintf_r+0x130>
 8013338:	9105      	str	r1, [sp, #20]
 801333a:	e7c3      	b.n	80132c4 <_svfiprintf_r+0x130>
 801333c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013340:	4604      	mov	r4, r0
 8013342:	2301      	movs	r3, #1
 8013344:	e7f0      	b.n	8013328 <_svfiprintf_r+0x194>
 8013346:	ab03      	add	r3, sp, #12
 8013348:	9300      	str	r3, [sp, #0]
 801334a:	462a      	mov	r2, r5
 801334c:	4b0f      	ldr	r3, [pc, #60]	; (801338c <_svfiprintf_r+0x1f8>)
 801334e:	a904      	add	r1, sp, #16
 8013350:	4638      	mov	r0, r7
 8013352:	f3af 8000 	nop.w
 8013356:	1c42      	adds	r2, r0, #1
 8013358:	4606      	mov	r6, r0
 801335a:	d1d6      	bne.n	801330a <_svfiprintf_r+0x176>
 801335c:	89ab      	ldrh	r3, [r5, #12]
 801335e:	065b      	lsls	r3, r3, #25
 8013360:	f53f af2c 	bmi.w	80131bc <_svfiprintf_r+0x28>
 8013364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013366:	b01d      	add	sp, #116	; 0x74
 8013368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801336c:	ab03      	add	r3, sp, #12
 801336e:	9300      	str	r3, [sp, #0]
 8013370:	462a      	mov	r2, r5
 8013372:	4b06      	ldr	r3, [pc, #24]	; (801338c <_svfiprintf_r+0x1f8>)
 8013374:	a904      	add	r1, sp, #16
 8013376:	4638      	mov	r0, r7
 8013378:	f000 f9d4 	bl	8013724 <_printf_i>
 801337c:	e7eb      	b.n	8013356 <_svfiprintf_r+0x1c2>
 801337e:	bf00      	nop
 8013380:	080158fc 	.word	0x080158fc
 8013384:	08015906 	.word	0x08015906
 8013388:	00000000 	.word	0x00000000
 801338c:	080130dd 	.word	0x080130dd
 8013390:	08015902 	.word	0x08015902

08013394 <__sfputc_r>:
 8013394:	6893      	ldr	r3, [r2, #8]
 8013396:	3b01      	subs	r3, #1
 8013398:	2b00      	cmp	r3, #0
 801339a:	b410      	push	{r4}
 801339c:	6093      	str	r3, [r2, #8]
 801339e:	da08      	bge.n	80133b2 <__sfputc_r+0x1e>
 80133a0:	6994      	ldr	r4, [r2, #24]
 80133a2:	42a3      	cmp	r3, r4
 80133a4:	db01      	blt.n	80133aa <__sfputc_r+0x16>
 80133a6:	290a      	cmp	r1, #10
 80133a8:	d103      	bne.n	80133b2 <__sfputc_r+0x1e>
 80133aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133ae:	f7fe bb05 	b.w	80119bc <__swbuf_r>
 80133b2:	6813      	ldr	r3, [r2, #0]
 80133b4:	1c58      	adds	r0, r3, #1
 80133b6:	6010      	str	r0, [r2, #0]
 80133b8:	7019      	strb	r1, [r3, #0]
 80133ba:	4608      	mov	r0, r1
 80133bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133c0:	4770      	bx	lr

080133c2 <__sfputs_r>:
 80133c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133c4:	4606      	mov	r6, r0
 80133c6:	460f      	mov	r7, r1
 80133c8:	4614      	mov	r4, r2
 80133ca:	18d5      	adds	r5, r2, r3
 80133cc:	42ac      	cmp	r4, r5
 80133ce:	d101      	bne.n	80133d4 <__sfputs_r+0x12>
 80133d0:	2000      	movs	r0, #0
 80133d2:	e007      	b.n	80133e4 <__sfputs_r+0x22>
 80133d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133d8:	463a      	mov	r2, r7
 80133da:	4630      	mov	r0, r6
 80133dc:	f7ff ffda 	bl	8013394 <__sfputc_r>
 80133e0:	1c43      	adds	r3, r0, #1
 80133e2:	d1f3      	bne.n	80133cc <__sfputs_r+0xa>
 80133e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080133e8 <_vfiprintf_r>:
 80133e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133ec:	460d      	mov	r5, r1
 80133ee:	b09d      	sub	sp, #116	; 0x74
 80133f0:	4614      	mov	r4, r2
 80133f2:	4698      	mov	r8, r3
 80133f4:	4606      	mov	r6, r0
 80133f6:	b118      	cbz	r0, 8013400 <_vfiprintf_r+0x18>
 80133f8:	6983      	ldr	r3, [r0, #24]
 80133fa:	b90b      	cbnz	r3, 8013400 <_vfiprintf_r+0x18>
 80133fc:	f7fe fcda 	bl	8011db4 <__sinit>
 8013400:	4b89      	ldr	r3, [pc, #548]	; (8013628 <_vfiprintf_r+0x240>)
 8013402:	429d      	cmp	r5, r3
 8013404:	d11b      	bne.n	801343e <_vfiprintf_r+0x56>
 8013406:	6875      	ldr	r5, [r6, #4]
 8013408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801340a:	07d9      	lsls	r1, r3, #31
 801340c:	d405      	bmi.n	801341a <_vfiprintf_r+0x32>
 801340e:	89ab      	ldrh	r3, [r5, #12]
 8013410:	059a      	lsls	r2, r3, #22
 8013412:	d402      	bmi.n	801341a <_vfiprintf_r+0x32>
 8013414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013416:	f7ff f8da 	bl	80125ce <__retarget_lock_acquire_recursive>
 801341a:	89ab      	ldrh	r3, [r5, #12]
 801341c:	071b      	lsls	r3, r3, #28
 801341e:	d501      	bpl.n	8013424 <_vfiprintf_r+0x3c>
 8013420:	692b      	ldr	r3, [r5, #16]
 8013422:	b9eb      	cbnz	r3, 8013460 <_vfiprintf_r+0x78>
 8013424:	4629      	mov	r1, r5
 8013426:	4630      	mov	r0, r6
 8013428:	f7fe fb2c 	bl	8011a84 <__swsetup_r>
 801342c:	b1c0      	cbz	r0, 8013460 <_vfiprintf_r+0x78>
 801342e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013430:	07dc      	lsls	r4, r3, #31
 8013432:	d50e      	bpl.n	8013452 <_vfiprintf_r+0x6a>
 8013434:	f04f 30ff 	mov.w	r0, #4294967295
 8013438:	b01d      	add	sp, #116	; 0x74
 801343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801343e:	4b7b      	ldr	r3, [pc, #492]	; (801362c <_vfiprintf_r+0x244>)
 8013440:	429d      	cmp	r5, r3
 8013442:	d101      	bne.n	8013448 <_vfiprintf_r+0x60>
 8013444:	68b5      	ldr	r5, [r6, #8]
 8013446:	e7df      	b.n	8013408 <_vfiprintf_r+0x20>
 8013448:	4b79      	ldr	r3, [pc, #484]	; (8013630 <_vfiprintf_r+0x248>)
 801344a:	429d      	cmp	r5, r3
 801344c:	bf08      	it	eq
 801344e:	68f5      	ldreq	r5, [r6, #12]
 8013450:	e7da      	b.n	8013408 <_vfiprintf_r+0x20>
 8013452:	89ab      	ldrh	r3, [r5, #12]
 8013454:	0598      	lsls	r0, r3, #22
 8013456:	d4ed      	bmi.n	8013434 <_vfiprintf_r+0x4c>
 8013458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801345a:	f7ff f8b9 	bl	80125d0 <__retarget_lock_release_recursive>
 801345e:	e7e9      	b.n	8013434 <_vfiprintf_r+0x4c>
 8013460:	2300      	movs	r3, #0
 8013462:	9309      	str	r3, [sp, #36]	; 0x24
 8013464:	2320      	movs	r3, #32
 8013466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801346a:	f8cd 800c 	str.w	r8, [sp, #12]
 801346e:	2330      	movs	r3, #48	; 0x30
 8013470:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013634 <_vfiprintf_r+0x24c>
 8013474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013478:	f04f 0901 	mov.w	r9, #1
 801347c:	4623      	mov	r3, r4
 801347e:	469a      	mov	sl, r3
 8013480:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013484:	b10a      	cbz	r2, 801348a <_vfiprintf_r+0xa2>
 8013486:	2a25      	cmp	r2, #37	; 0x25
 8013488:	d1f9      	bne.n	801347e <_vfiprintf_r+0x96>
 801348a:	ebba 0b04 	subs.w	fp, sl, r4
 801348e:	d00b      	beq.n	80134a8 <_vfiprintf_r+0xc0>
 8013490:	465b      	mov	r3, fp
 8013492:	4622      	mov	r2, r4
 8013494:	4629      	mov	r1, r5
 8013496:	4630      	mov	r0, r6
 8013498:	f7ff ff93 	bl	80133c2 <__sfputs_r>
 801349c:	3001      	adds	r0, #1
 801349e:	f000 80aa 	beq.w	80135f6 <_vfiprintf_r+0x20e>
 80134a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134a4:	445a      	add	r2, fp
 80134a6:	9209      	str	r2, [sp, #36]	; 0x24
 80134a8:	f89a 3000 	ldrb.w	r3, [sl]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f000 80a2 	beq.w	80135f6 <_vfiprintf_r+0x20e>
 80134b2:	2300      	movs	r3, #0
 80134b4:	f04f 32ff 	mov.w	r2, #4294967295
 80134b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134bc:	f10a 0a01 	add.w	sl, sl, #1
 80134c0:	9304      	str	r3, [sp, #16]
 80134c2:	9307      	str	r3, [sp, #28]
 80134c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80134c8:	931a      	str	r3, [sp, #104]	; 0x68
 80134ca:	4654      	mov	r4, sl
 80134cc:	2205      	movs	r2, #5
 80134ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134d2:	4858      	ldr	r0, [pc, #352]	; (8013634 <_vfiprintf_r+0x24c>)
 80134d4:	f7ec fe9c 	bl	8000210 <memchr>
 80134d8:	9a04      	ldr	r2, [sp, #16]
 80134da:	b9d8      	cbnz	r0, 8013514 <_vfiprintf_r+0x12c>
 80134dc:	06d1      	lsls	r1, r2, #27
 80134de:	bf44      	itt	mi
 80134e0:	2320      	movmi	r3, #32
 80134e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80134e6:	0713      	lsls	r3, r2, #28
 80134e8:	bf44      	itt	mi
 80134ea:	232b      	movmi	r3, #43	; 0x2b
 80134ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80134f0:	f89a 3000 	ldrb.w	r3, [sl]
 80134f4:	2b2a      	cmp	r3, #42	; 0x2a
 80134f6:	d015      	beq.n	8013524 <_vfiprintf_r+0x13c>
 80134f8:	9a07      	ldr	r2, [sp, #28]
 80134fa:	4654      	mov	r4, sl
 80134fc:	2000      	movs	r0, #0
 80134fe:	f04f 0c0a 	mov.w	ip, #10
 8013502:	4621      	mov	r1, r4
 8013504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013508:	3b30      	subs	r3, #48	; 0x30
 801350a:	2b09      	cmp	r3, #9
 801350c:	d94e      	bls.n	80135ac <_vfiprintf_r+0x1c4>
 801350e:	b1b0      	cbz	r0, 801353e <_vfiprintf_r+0x156>
 8013510:	9207      	str	r2, [sp, #28]
 8013512:	e014      	b.n	801353e <_vfiprintf_r+0x156>
 8013514:	eba0 0308 	sub.w	r3, r0, r8
 8013518:	fa09 f303 	lsl.w	r3, r9, r3
 801351c:	4313      	orrs	r3, r2
 801351e:	9304      	str	r3, [sp, #16]
 8013520:	46a2      	mov	sl, r4
 8013522:	e7d2      	b.n	80134ca <_vfiprintf_r+0xe2>
 8013524:	9b03      	ldr	r3, [sp, #12]
 8013526:	1d19      	adds	r1, r3, #4
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	9103      	str	r1, [sp, #12]
 801352c:	2b00      	cmp	r3, #0
 801352e:	bfbb      	ittet	lt
 8013530:	425b      	neglt	r3, r3
 8013532:	f042 0202 	orrlt.w	r2, r2, #2
 8013536:	9307      	strge	r3, [sp, #28]
 8013538:	9307      	strlt	r3, [sp, #28]
 801353a:	bfb8      	it	lt
 801353c:	9204      	strlt	r2, [sp, #16]
 801353e:	7823      	ldrb	r3, [r4, #0]
 8013540:	2b2e      	cmp	r3, #46	; 0x2e
 8013542:	d10c      	bne.n	801355e <_vfiprintf_r+0x176>
 8013544:	7863      	ldrb	r3, [r4, #1]
 8013546:	2b2a      	cmp	r3, #42	; 0x2a
 8013548:	d135      	bne.n	80135b6 <_vfiprintf_r+0x1ce>
 801354a:	9b03      	ldr	r3, [sp, #12]
 801354c:	1d1a      	adds	r2, r3, #4
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	9203      	str	r2, [sp, #12]
 8013552:	2b00      	cmp	r3, #0
 8013554:	bfb8      	it	lt
 8013556:	f04f 33ff 	movlt.w	r3, #4294967295
 801355a:	3402      	adds	r4, #2
 801355c:	9305      	str	r3, [sp, #20]
 801355e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013644 <_vfiprintf_r+0x25c>
 8013562:	7821      	ldrb	r1, [r4, #0]
 8013564:	2203      	movs	r2, #3
 8013566:	4650      	mov	r0, sl
 8013568:	f7ec fe52 	bl	8000210 <memchr>
 801356c:	b140      	cbz	r0, 8013580 <_vfiprintf_r+0x198>
 801356e:	2340      	movs	r3, #64	; 0x40
 8013570:	eba0 000a 	sub.w	r0, r0, sl
 8013574:	fa03 f000 	lsl.w	r0, r3, r0
 8013578:	9b04      	ldr	r3, [sp, #16]
 801357a:	4303      	orrs	r3, r0
 801357c:	3401      	adds	r4, #1
 801357e:	9304      	str	r3, [sp, #16]
 8013580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013584:	482c      	ldr	r0, [pc, #176]	; (8013638 <_vfiprintf_r+0x250>)
 8013586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801358a:	2206      	movs	r2, #6
 801358c:	f7ec fe40 	bl	8000210 <memchr>
 8013590:	2800      	cmp	r0, #0
 8013592:	d03f      	beq.n	8013614 <_vfiprintf_r+0x22c>
 8013594:	4b29      	ldr	r3, [pc, #164]	; (801363c <_vfiprintf_r+0x254>)
 8013596:	bb1b      	cbnz	r3, 80135e0 <_vfiprintf_r+0x1f8>
 8013598:	9b03      	ldr	r3, [sp, #12]
 801359a:	3307      	adds	r3, #7
 801359c:	f023 0307 	bic.w	r3, r3, #7
 80135a0:	3308      	adds	r3, #8
 80135a2:	9303      	str	r3, [sp, #12]
 80135a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135a6:	443b      	add	r3, r7
 80135a8:	9309      	str	r3, [sp, #36]	; 0x24
 80135aa:	e767      	b.n	801347c <_vfiprintf_r+0x94>
 80135ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80135b0:	460c      	mov	r4, r1
 80135b2:	2001      	movs	r0, #1
 80135b4:	e7a5      	b.n	8013502 <_vfiprintf_r+0x11a>
 80135b6:	2300      	movs	r3, #0
 80135b8:	3401      	adds	r4, #1
 80135ba:	9305      	str	r3, [sp, #20]
 80135bc:	4619      	mov	r1, r3
 80135be:	f04f 0c0a 	mov.w	ip, #10
 80135c2:	4620      	mov	r0, r4
 80135c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135c8:	3a30      	subs	r2, #48	; 0x30
 80135ca:	2a09      	cmp	r2, #9
 80135cc:	d903      	bls.n	80135d6 <_vfiprintf_r+0x1ee>
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d0c5      	beq.n	801355e <_vfiprintf_r+0x176>
 80135d2:	9105      	str	r1, [sp, #20]
 80135d4:	e7c3      	b.n	801355e <_vfiprintf_r+0x176>
 80135d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80135da:	4604      	mov	r4, r0
 80135dc:	2301      	movs	r3, #1
 80135de:	e7f0      	b.n	80135c2 <_vfiprintf_r+0x1da>
 80135e0:	ab03      	add	r3, sp, #12
 80135e2:	9300      	str	r3, [sp, #0]
 80135e4:	462a      	mov	r2, r5
 80135e6:	4b16      	ldr	r3, [pc, #88]	; (8013640 <_vfiprintf_r+0x258>)
 80135e8:	a904      	add	r1, sp, #16
 80135ea:	4630      	mov	r0, r6
 80135ec:	f3af 8000 	nop.w
 80135f0:	4607      	mov	r7, r0
 80135f2:	1c78      	adds	r0, r7, #1
 80135f4:	d1d6      	bne.n	80135a4 <_vfiprintf_r+0x1bc>
 80135f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135f8:	07d9      	lsls	r1, r3, #31
 80135fa:	d405      	bmi.n	8013608 <_vfiprintf_r+0x220>
 80135fc:	89ab      	ldrh	r3, [r5, #12]
 80135fe:	059a      	lsls	r2, r3, #22
 8013600:	d402      	bmi.n	8013608 <_vfiprintf_r+0x220>
 8013602:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013604:	f7fe ffe4 	bl	80125d0 <__retarget_lock_release_recursive>
 8013608:	89ab      	ldrh	r3, [r5, #12]
 801360a:	065b      	lsls	r3, r3, #25
 801360c:	f53f af12 	bmi.w	8013434 <_vfiprintf_r+0x4c>
 8013610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013612:	e711      	b.n	8013438 <_vfiprintf_r+0x50>
 8013614:	ab03      	add	r3, sp, #12
 8013616:	9300      	str	r3, [sp, #0]
 8013618:	462a      	mov	r2, r5
 801361a:	4b09      	ldr	r3, [pc, #36]	; (8013640 <_vfiprintf_r+0x258>)
 801361c:	a904      	add	r1, sp, #16
 801361e:	4630      	mov	r0, r6
 8013620:	f000 f880 	bl	8013724 <_printf_i>
 8013624:	e7e4      	b.n	80135f0 <_vfiprintf_r+0x208>
 8013626:	bf00      	nop
 8013628:	080156b8 	.word	0x080156b8
 801362c:	080156d8 	.word	0x080156d8
 8013630:	08015698 	.word	0x08015698
 8013634:	080158fc 	.word	0x080158fc
 8013638:	08015906 	.word	0x08015906
 801363c:	00000000 	.word	0x00000000
 8013640:	080133c3 	.word	0x080133c3
 8013644:	08015902 	.word	0x08015902

08013648 <_printf_common>:
 8013648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801364c:	4616      	mov	r6, r2
 801364e:	4699      	mov	r9, r3
 8013650:	688a      	ldr	r2, [r1, #8]
 8013652:	690b      	ldr	r3, [r1, #16]
 8013654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013658:	4293      	cmp	r3, r2
 801365a:	bfb8      	it	lt
 801365c:	4613      	movlt	r3, r2
 801365e:	6033      	str	r3, [r6, #0]
 8013660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013664:	4607      	mov	r7, r0
 8013666:	460c      	mov	r4, r1
 8013668:	b10a      	cbz	r2, 801366e <_printf_common+0x26>
 801366a:	3301      	adds	r3, #1
 801366c:	6033      	str	r3, [r6, #0]
 801366e:	6823      	ldr	r3, [r4, #0]
 8013670:	0699      	lsls	r1, r3, #26
 8013672:	bf42      	ittt	mi
 8013674:	6833      	ldrmi	r3, [r6, #0]
 8013676:	3302      	addmi	r3, #2
 8013678:	6033      	strmi	r3, [r6, #0]
 801367a:	6825      	ldr	r5, [r4, #0]
 801367c:	f015 0506 	ands.w	r5, r5, #6
 8013680:	d106      	bne.n	8013690 <_printf_common+0x48>
 8013682:	f104 0a19 	add.w	sl, r4, #25
 8013686:	68e3      	ldr	r3, [r4, #12]
 8013688:	6832      	ldr	r2, [r6, #0]
 801368a:	1a9b      	subs	r3, r3, r2
 801368c:	42ab      	cmp	r3, r5
 801368e:	dc26      	bgt.n	80136de <_printf_common+0x96>
 8013690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013694:	1e13      	subs	r3, r2, #0
 8013696:	6822      	ldr	r2, [r4, #0]
 8013698:	bf18      	it	ne
 801369a:	2301      	movne	r3, #1
 801369c:	0692      	lsls	r2, r2, #26
 801369e:	d42b      	bmi.n	80136f8 <_printf_common+0xb0>
 80136a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80136a4:	4649      	mov	r1, r9
 80136a6:	4638      	mov	r0, r7
 80136a8:	47c0      	blx	r8
 80136aa:	3001      	adds	r0, #1
 80136ac:	d01e      	beq.n	80136ec <_printf_common+0xa4>
 80136ae:	6823      	ldr	r3, [r4, #0]
 80136b0:	68e5      	ldr	r5, [r4, #12]
 80136b2:	6832      	ldr	r2, [r6, #0]
 80136b4:	f003 0306 	and.w	r3, r3, #6
 80136b8:	2b04      	cmp	r3, #4
 80136ba:	bf08      	it	eq
 80136bc:	1aad      	subeq	r5, r5, r2
 80136be:	68a3      	ldr	r3, [r4, #8]
 80136c0:	6922      	ldr	r2, [r4, #16]
 80136c2:	bf0c      	ite	eq
 80136c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80136c8:	2500      	movne	r5, #0
 80136ca:	4293      	cmp	r3, r2
 80136cc:	bfc4      	itt	gt
 80136ce:	1a9b      	subgt	r3, r3, r2
 80136d0:	18ed      	addgt	r5, r5, r3
 80136d2:	2600      	movs	r6, #0
 80136d4:	341a      	adds	r4, #26
 80136d6:	42b5      	cmp	r5, r6
 80136d8:	d11a      	bne.n	8013710 <_printf_common+0xc8>
 80136da:	2000      	movs	r0, #0
 80136dc:	e008      	b.n	80136f0 <_printf_common+0xa8>
 80136de:	2301      	movs	r3, #1
 80136e0:	4652      	mov	r2, sl
 80136e2:	4649      	mov	r1, r9
 80136e4:	4638      	mov	r0, r7
 80136e6:	47c0      	blx	r8
 80136e8:	3001      	adds	r0, #1
 80136ea:	d103      	bne.n	80136f4 <_printf_common+0xac>
 80136ec:	f04f 30ff 	mov.w	r0, #4294967295
 80136f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136f4:	3501      	adds	r5, #1
 80136f6:	e7c6      	b.n	8013686 <_printf_common+0x3e>
 80136f8:	18e1      	adds	r1, r4, r3
 80136fa:	1c5a      	adds	r2, r3, #1
 80136fc:	2030      	movs	r0, #48	; 0x30
 80136fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013702:	4422      	add	r2, r4
 8013704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801370c:	3302      	adds	r3, #2
 801370e:	e7c7      	b.n	80136a0 <_printf_common+0x58>
 8013710:	2301      	movs	r3, #1
 8013712:	4622      	mov	r2, r4
 8013714:	4649      	mov	r1, r9
 8013716:	4638      	mov	r0, r7
 8013718:	47c0      	blx	r8
 801371a:	3001      	adds	r0, #1
 801371c:	d0e6      	beq.n	80136ec <_printf_common+0xa4>
 801371e:	3601      	adds	r6, #1
 8013720:	e7d9      	b.n	80136d6 <_printf_common+0x8e>
	...

08013724 <_printf_i>:
 8013724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013728:	460c      	mov	r4, r1
 801372a:	4691      	mov	r9, r2
 801372c:	7e27      	ldrb	r7, [r4, #24]
 801372e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013730:	2f78      	cmp	r7, #120	; 0x78
 8013732:	4680      	mov	r8, r0
 8013734:	469a      	mov	sl, r3
 8013736:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801373a:	d807      	bhi.n	801374c <_printf_i+0x28>
 801373c:	2f62      	cmp	r7, #98	; 0x62
 801373e:	d80a      	bhi.n	8013756 <_printf_i+0x32>
 8013740:	2f00      	cmp	r7, #0
 8013742:	f000 80d8 	beq.w	80138f6 <_printf_i+0x1d2>
 8013746:	2f58      	cmp	r7, #88	; 0x58
 8013748:	f000 80a3 	beq.w	8013892 <_printf_i+0x16e>
 801374c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013754:	e03a      	b.n	80137cc <_printf_i+0xa8>
 8013756:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801375a:	2b15      	cmp	r3, #21
 801375c:	d8f6      	bhi.n	801374c <_printf_i+0x28>
 801375e:	a001      	add	r0, pc, #4	; (adr r0, 8013764 <_printf_i+0x40>)
 8013760:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013764:	080137bd 	.word	0x080137bd
 8013768:	080137d1 	.word	0x080137d1
 801376c:	0801374d 	.word	0x0801374d
 8013770:	0801374d 	.word	0x0801374d
 8013774:	0801374d 	.word	0x0801374d
 8013778:	0801374d 	.word	0x0801374d
 801377c:	080137d1 	.word	0x080137d1
 8013780:	0801374d 	.word	0x0801374d
 8013784:	0801374d 	.word	0x0801374d
 8013788:	0801374d 	.word	0x0801374d
 801378c:	0801374d 	.word	0x0801374d
 8013790:	080138dd 	.word	0x080138dd
 8013794:	08013801 	.word	0x08013801
 8013798:	080138bf 	.word	0x080138bf
 801379c:	0801374d 	.word	0x0801374d
 80137a0:	0801374d 	.word	0x0801374d
 80137a4:	080138ff 	.word	0x080138ff
 80137a8:	0801374d 	.word	0x0801374d
 80137ac:	08013801 	.word	0x08013801
 80137b0:	0801374d 	.word	0x0801374d
 80137b4:	0801374d 	.word	0x0801374d
 80137b8:	080138c7 	.word	0x080138c7
 80137bc:	680b      	ldr	r3, [r1, #0]
 80137be:	1d1a      	adds	r2, r3, #4
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	600a      	str	r2, [r1, #0]
 80137c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80137c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80137cc:	2301      	movs	r3, #1
 80137ce:	e0a3      	b.n	8013918 <_printf_i+0x1f4>
 80137d0:	6825      	ldr	r5, [r4, #0]
 80137d2:	6808      	ldr	r0, [r1, #0]
 80137d4:	062e      	lsls	r6, r5, #24
 80137d6:	f100 0304 	add.w	r3, r0, #4
 80137da:	d50a      	bpl.n	80137f2 <_printf_i+0xce>
 80137dc:	6805      	ldr	r5, [r0, #0]
 80137de:	600b      	str	r3, [r1, #0]
 80137e0:	2d00      	cmp	r5, #0
 80137e2:	da03      	bge.n	80137ec <_printf_i+0xc8>
 80137e4:	232d      	movs	r3, #45	; 0x2d
 80137e6:	426d      	negs	r5, r5
 80137e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137ec:	485e      	ldr	r0, [pc, #376]	; (8013968 <_printf_i+0x244>)
 80137ee:	230a      	movs	r3, #10
 80137f0:	e019      	b.n	8013826 <_printf_i+0x102>
 80137f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80137f6:	6805      	ldr	r5, [r0, #0]
 80137f8:	600b      	str	r3, [r1, #0]
 80137fa:	bf18      	it	ne
 80137fc:	b22d      	sxthne	r5, r5
 80137fe:	e7ef      	b.n	80137e0 <_printf_i+0xbc>
 8013800:	680b      	ldr	r3, [r1, #0]
 8013802:	6825      	ldr	r5, [r4, #0]
 8013804:	1d18      	adds	r0, r3, #4
 8013806:	6008      	str	r0, [r1, #0]
 8013808:	0628      	lsls	r0, r5, #24
 801380a:	d501      	bpl.n	8013810 <_printf_i+0xec>
 801380c:	681d      	ldr	r5, [r3, #0]
 801380e:	e002      	b.n	8013816 <_printf_i+0xf2>
 8013810:	0669      	lsls	r1, r5, #25
 8013812:	d5fb      	bpl.n	801380c <_printf_i+0xe8>
 8013814:	881d      	ldrh	r5, [r3, #0]
 8013816:	4854      	ldr	r0, [pc, #336]	; (8013968 <_printf_i+0x244>)
 8013818:	2f6f      	cmp	r7, #111	; 0x6f
 801381a:	bf0c      	ite	eq
 801381c:	2308      	moveq	r3, #8
 801381e:	230a      	movne	r3, #10
 8013820:	2100      	movs	r1, #0
 8013822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013826:	6866      	ldr	r6, [r4, #4]
 8013828:	60a6      	str	r6, [r4, #8]
 801382a:	2e00      	cmp	r6, #0
 801382c:	bfa2      	ittt	ge
 801382e:	6821      	ldrge	r1, [r4, #0]
 8013830:	f021 0104 	bicge.w	r1, r1, #4
 8013834:	6021      	strge	r1, [r4, #0]
 8013836:	b90d      	cbnz	r5, 801383c <_printf_i+0x118>
 8013838:	2e00      	cmp	r6, #0
 801383a:	d04d      	beq.n	80138d8 <_printf_i+0x1b4>
 801383c:	4616      	mov	r6, r2
 801383e:	fbb5 f1f3 	udiv	r1, r5, r3
 8013842:	fb03 5711 	mls	r7, r3, r1, r5
 8013846:	5dc7      	ldrb	r7, [r0, r7]
 8013848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801384c:	462f      	mov	r7, r5
 801384e:	42bb      	cmp	r3, r7
 8013850:	460d      	mov	r5, r1
 8013852:	d9f4      	bls.n	801383e <_printf_i+0x11a>
 8013854:	2b08      	cmp	r3, #8
 8013856:	d10b      	bne.n	8013870 <_printf_i+0x14c>
 8013858:	6823      	ldr	r3, [r4, #0]
 801385a:	07df      	lsls	r7, r3, #31
 801385c:	d508      	bpl.n	8013870 <_printf_i+0x14c>
 801385e:	6923      	ldr	r3, [r4, #16]
 8013860:	6861      	ldr	r1, [r4, #4]
 8013862:	4299      	cmp	r1, r3
 8013864:	bfde      	ittt	le
 8013866:	2330      	movle	r3, #48	; 0x30
 8013868:	f806 3c01 	strble.w	r3, [r6, #-1]
 801386c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013870:	1b92      	subs	r2, r2, r6
 8013872:	6122      	str	r2, [r4, #16]
 8013874:	f8cd a000 	str.w	sl, [sp]
 8013878:	464b      	mov	r3, r9
 801387a:	aa03      	add	r2, sp, #12
 801387c:	4621      	mov	r1, r4
 801387e:	4640      	mov	r0, r8
 8013880:	f7ff fee2 	bl	8013648 <_printf_common>
 8013884:	3001      	adds	r0, #1
 8013886:	d14c      	bne.n	8013922 <_printf_i+0x1fe>
 8013888:	f04f 30ff 	mov.w	r0, #4294967295
 801388c:	b004      	add	sp, #16
 801388e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013892:	4835      	ldr	r0, [pc, #212]	; (8013968 <_printf_i+0x244>)
 8013894:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013898:	6823      	ldr	r3, [r4, #0]
 801389a:	680e      	ldr	r6, [r1, #0]
 801389c:	061f      	lsls	r7, r3, #24
 801389e:	f856 5b04 	ldr.w	r5, [r6], #4
 80138a2:	600e      	str	r6, [r1, #0]
 80138a4:	d514      	bpl.n	80138d0 <_printf_i+0x1ac>
 80138a6:	07d9      	lsls	r1, r3, #31
 80138a8:	bf44      	itt	mi
 80138aa:	f043 0320 	orrmi.w	r3, r3, #32
 80138ae:	6023      	strmi	r3, [r4, #0]
 80138b0:	b91d      	cbnz	r5, 80138ba <_printf_i+0x196>
 80138b2:	6823      	ldr	r3, [r4, #0]
 80138b4:	f023 0320 	bic.w	r3, r3, #32
 80138b8:	6023      	str	r3, [r4, #0]
 80138ba:	2310      	movs	r3, #16
 80138bc:	e7b0      	b.n	8013820 <_printf_i+0xfc>
 80138be:	6823      	ldr	r3, [r4, #0]
 80138c0:	f043 0320 	orr.w	r3, r3, #32
 80138c4:	6023      	str	r3, [r4, #0]
 80138c6:	2378      	movs	r3, #120	; 0x78
 80138c8:	4828      	ldr	r0, [pc, #160]	; (801396c <_printf_i+0x248>)
 80138ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80138ce:	e7e3      	b.n	8013898 <_printf_i+0x174>
 80138d0:	065e      	lsls	r6, r3, #25
 80138d2:	bf48      	it	mi
 80138d4:	b2ad      	uxthmi	r5, r5
 80138d6:	e7e6      	b.n	80138a6 <_printf_i+0x182>
 80138d8:	4616      	mov	r6, r2
 80138da:	e7bb      	b.n	8013854 <_printf_i+0x130>
 80138dc:	680b      	ldr	r3, [r1, #0]
 80138de:	6826      	ldr	r6, [r4, #0]
 80138e0:	6960      	ldr	r0, [r4, #20]
 80138e2:	1d1d      	adds	r5, r3, #4
 80138e4:	600d      	str	r5, [r1, #0]
 80138e6:	0635      	lsls	r5, r6, #24
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	d501      	bpl.n	80138f0 <_printf_i+0x1cc>
 80138ec:	6018      	str	r0, [r3, #0]
 80138ee:	e002      	b.n	80138f6 <_printf_i+0x1d2>
 80138f0:	0671      	lsls	r1, r6, #25
 80138f2:	d5fb      	bpl.n	80138ec <_printf_i+0x1c8>
 80138f4:	8018      	strh	r0, [r3, #0]
 80138f6:	2300      	movs	r3, #0
 80138f8:	6123      	str	r3, [r4, #16]
 80138fa:	4616      	mov	r6, r2
 80138fc:	e7ba      	b.n	8013874 <_printf_i+0x150>
 80138fe:	680b      	ldr	r3, [r1, #0]
 8013900:	1d1a      	adds	r2, r3, #4
 8013902:	600a      	str	r2, [r1, #0]
 8013904:	681e      	ldr	r6, [r3, #0]
 8013906:	6862      	ldr	r2, [r4, #4]
 8013908:	2100      	movs	r1, #0
 801390a:	4630      	mov	r0, r6
 801390c:	f7ec fc80 	bl	8000210 <memchr>
 8013910:	b108      	cbz	r0, 8013916 <_printf_i+0x1f2>
 8013912:	1b80      	subs	r0, r0, r6
 8013914:	6060      	str	r0, [r4, #4]
 8013916:	6863      	ldr	r3, [r4, #4]
 8013918:	6123      	str	r3, [r4, #16]
 801391a:	2300      	movs	r3, #0
 801391c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013920:	e7a8      	b.n	8013874 <_printf_i+0x150>
 8013922:	6923      	ldr	r3, [r4, #16]
 8013924:	4632      	mov	r2, r6
 8013926:	4649      	mov	r1, r9
 8013928:	4640      	mov	r0, r8
 801392a:	47d0      	blx	sl
 801392c:	3001      	adds	r0, #1
 801392e:	d0ab      	beq.n	8013888 <_printf_i+0x164>
 8013930:	6823      	ldr	r3, [r4, #0]
 8013932:	079b      	lsls	r3, r3, #30
 8013934:	d413      	bmi.n	801395e <_printf_i+0x23a>
 8013936:	68e0      	ldr	r0, [r4, #12]
 8013938:	9b03      	ldr	r3, [sp, #12]
 801393a:	4298      	cmp	r0, r3
 801393c:	bfb8      	it	lt
 801393e:	4618      	movlt	r0, r3
 8013940:	e7a4      	b.n	801388c <_printf_i+0x168>
 8013942:	2301      	movs	r3, #1
 8013944:	4632      	mov	r2, r6
 8013946:	4649      	mov	r1, r9
 8013948:	4640      	mov	r0, r8
 801394a:	47d0      	blx	sl
 801394c:	3001      	adds	r0, #1
 801394e:	d09b      	beq.n	8013888 <_printf_i+0x164>
 8013950:	3501      	adds	r5, #1
 8013952:	68e3      	ldr	r3, [r4, #12]
 8013954:	9903      	ldr	r1, [sp, #12]
 8013956:	1a5b      	subs	r3, r3, r1
 8013958:	42ab      	cmp	r3, r5
 801395a:	dcf2      	bgt.n	8013942 <_printf_i+0x21e>
 801395c:	e7eb      	b.n	8013936 <_printf_i+0x212>
 801395e:	2500      	movs	r5, #0
 8013960:	f104 0619 	add.w	r6, r4, #25
 8013964:	e7f5      	b.n	8013952 <_printf_i+0x22e>
 8013966:	bf00      	nop
 8013968:	0801590d 	.word	0x0801590d
 801396c:	0801591e 	.word	0x0801591e

08013970 <_read_r>:
 8013970:	b538      	push	{r3, r4, r5, lr}
 8013972:	4d07      	ldr	r5, [pc, #28]	; (8013990 <_read_r+0x20>)
 8013974:	4604      	mov	r4, r0
 8013976:	4608      	mov	r0, r1
 8013978:	4611      	mov	r1, r2
 801397a:	2200      	movs	r2, #0
 801397c:	602a      	str	r2, [r5, #0]
 801397e:	461a      	mov	r2, r3
 8013980:	f7ef fae2 	bl	8002f48 <_read>
 8013984:	1c43      	adds	r3, r0, #1
 8013986:	d102      	bne.n	801398e <_read_r+0x1e>
 8013988:	682b      	ldr	r3, [r5, #0]
 801398a:	b103      	cbz	r3, 801398e <_read_r+0x1e>
 801398c:	6023      	str	r3, [r4, #0]
 801398e:	bd38      	pop	{r3, r4, r5, pc}
 8013990:	200038fc 	.word	0x200038fc
 8013994:	00000000 	.word	0x00000000

08013998 <nan>:
 8013998:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80139a0 <nan+0x8>
 801399c:	4770      	bx	lr
 801399e:	bf00      	nop
 80139a0:	00000000 	.word	0x00000000
 80139a4:	7ff80000 	.word	0x7ff80000

080139a8 <__ascii_wctomb>:
 80139a8:	b149      	cbz	r1, 80139be <__ascii_wctomb+0x16>
 80139aa:	2aff      	cmp	r2, #255	; 0xff
 80139ac:	bf85      	ittet	hi
 80139ae:	238a      	movhi	r3, #138	; 0x8a
 80139b0:	6003      	strhi	r3, [r0, #0]
 80139b2:	700a      	strbls	r2, [r1, #0]
 80139b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80139b8:	bf98      	it	ls
 80139ba:	2001      	movls	r0, #1
 80139bc:	4770      	bx	lr
 80139be:	4608      	mov	r0, r1
 80139c0:	4770      	bx	lr
	...

080139c4 <__assert_func>:
 80139c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80139c6:	4614      	mov	r4, r2
 80139c8:	461a      	mov	r2, r3
 80139ca:	4b09      	ldr	r3, [pc, #36]	; (80139f0 <__assert_func+0x2c>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	4605      	mov	r5, r0
 80139d0:	68d8      	ldr	r0, [r3, #12]
 80139d2:	b14c      	cbz	r4, 80139e8 <__assert_func+0x24>
 80139d4:	4b07      	ldr	r3, [pc, #28]	; (80139f4 <__assert_func+0x30>)
 80139d6:	9100      	str	r1, [sp, #0]
 80139d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139dc:	4906      	ldr	r1, [pc, #24]	; (80139f8 <__assert_func+0x34>)
 80139de:	462b      	mov	r3, r5
 80139e0:	f000 f80e 	bl	8013a00 <fiprintf>
 80139e4:	f000 f862 	bl	8013aac <abort>
 80139e8:	4b04      	ldr	r3, [pc, #16]	; (80139fc <__assert_func+0x38>)
 80139ea:	461c      	mov	r4, r3
 80139ec:	e7f3      	b.n	80139d6 <__assert_func+0x12>
 80139ee:	bf00      	nop
 80139f0:	20000180 	.word	0x20000180
 80139f4:	0801592f 	.word	0x0801592f
 80139f8:	0801593c 	.word	0x0801593c
 80139fc:	0801596a 	.word	0x0801596a

08013a00 <fiprintf>:
 8013a00:	b40e      	push	{r1, r2, r3}
 8013a02:	b503      	push	{r0, r1, lr}
 8013a04:	4601      	mov	r1, r0
 8013a06:	ab03      	add	r3, sp, #12
 8013a08:	4805      	ldr	r0, [pc, #20]	; (8013a20 <fiprintf+0x20>)
 8013a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a0e:	6800      	ldr	r0, [r0, #0]
 8013a10:	9301      	str	r3, [sp, #4]
 8013a12:	f7ff fce9 	bl	80133e8 <_vfiprintf_r>
 8013a16:	b002      	add	sp, #8
 8013a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a1c:	b003      	add	sp, #12
 8013a1e:	4770      	bx	lr
 8013a20:	20000180 	.word	0x20000180

08013a24 <_fstat_r>:
 8013a24:	b538      	push	{r3, r4, r5, lr}
 8013a26:	4d07      	ldr	r5, [pc, #28]	; (8013a44 <_fstat_r+0x20>)
 8013a28:	2300      	movs	r3, #0
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	4608      	mov	r0, r1
 8013a2e:	4611      	mov	r1, r2
 8013a30:	602b      	str	r3, [r5, #0]
 8013a32:	f7ef face 	bl	8002fd2 <_fstat>
 8013a36:	1c43      	adds	r3, r0, #1
 8013a38:	d102      	bne.n	8013a40 <_fstat_r+0x1c>
 8013a3a:	682b      	ldr	r3, [r5, #0]
 8013a3c:	b103      	cbz	r3, 8013a40 <_fstat_r+0x1c>
 8013a3e:	6023      	str	r3, [r4, #0]
 8013a40:	bd38      	pop	{r3, r4, r5, pc}
 8013a42:	bf00      	nop
 8013a44:	200038fc 	.word	0x200038fc

08013a48 <_isatty_r>:
 8013a48:	b538      	push	{r3, r4, r5, lr}
 8013a4a:	4d06      	ldr	r5, [pc, #24]	; (8013a64 <_isatty_r+0x1c>)
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	4604      	mov	r4, r0
 8013a50:	4608      	mov	r0, r1
 8013a52:	602b      	str	r3, [r5, #0]
 8013a54:	f7ef facd 	bl	8002ff2 <_isatty>
 8013a58:	1c43      	adds	r3, r0, #1
 8013a5a:	d102      	bne.n	8013a62 <_isatty_r+0x1a>
 8013a5c:	682b      	ldr	r3, [r5, #0]
 8013a5e:	b103      	cbz	r3, 8013a62 <_isatty_r+0x1a>
 8013a60:	6023      	str	r3, [r4, #0]
 8013a62:	bd38      	pop	{r3, r4, r5, pc}
 8013a64:	200038fc 	.word	0x200038fc

08013a68 <memmove>:
 8013a68:	4288      	cmp	r0, r1
 8013a6a:	b510      	push	{r4, lr}
 8013a6c:	eb01 0402 	add.w	r4, r1, r2
 8013a70:	d902      	bls.n	8013a78 <memmove+0x10>
 8013a72:	4284      	cmp	r4, r0
 8013a74:	4623      	mov	r3, r4
 8013a76:	d807      	bhi.n	8013a88 <memmove+0x20>
 8013a78:	1e43      	subs	r3, r0, #1
 8013a7a:	42a1      	cmp	r1, r4
 8013a7c:	d008      	beq.n	8013a90 <memmove+0x28>
 8013a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a86:	e7f8      	b.n	8013a7a <memmove+0x12>
 8013a88:	4402      	add	r2, r0
 8013a8a:	4601      	mov	r1, r0
 8013a8c:	428a      	cmp	r2, r1
 8013a8e:	d100      	bne.n	8013a92 <memmove+0x2a>
 8013a90:	bd10      	pop	{r4, pc}
 8013a92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a9a:	e7f7      	b.n	8013a8c <memmove+0x24>

08013a9c <_malloc_usable_size_r>:
 8013a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013aa0:	1f18      	subs	r0, r3, #4
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	bfbc      	itt	lt
 8013aa6:	580b      	ldrlt	r3, [r1, r0]
 8013aa8:	18c0      	addlt	r0, r0, r3
 8013aaa:	4770      	bx	lr

08013aac <abort>:
 8013aac:	b508      	push	{r3, lr}
 8013aae:	2006      	movs	r0, #6
 8013ab0:	f000 f82c 	bl	8013b0c <raise>
 8013ab4:	2001      	movs	r0, #1
 8013ab6:	f7ef fa3d 	bl	8002f34 <_exit>

08013aba <_raise_r>:
 8013aba:	291f      	cmp	r1, #31
 8013abc:	b538      	push	{r3, r4, r5, lr}
 8013abe:	4604      	mov	r4, r0
 8013ac0:	460d      	mov	r5, r1
 8013ac2:	d904      	bls.n	8013ace <_raise_r+0x14>
 8013ac4:	2316      	movs	r3, #22
 8013ac6:	6003      	str	r3, [r0, #0]
 8013ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8013acc:	bd38      	pop	{r3, r4, r5, pc}
 8013ace:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013ad0:	b112      	cbz	r2, 8013ad8 <_raise_r+0x1e>
 8013ad2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013ad6:	b94b      	cbnz	r3, 8013aec <_raise_r+0x32>
 8013ad8:	4620      	mov	r0, r4
 8013ada:	f000 f831 	bl	8013b40 <_getpid_r>
 8013ade:	462a      	mov	r2, r5
 8013ae0:	4601      	mov	r1, r0
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ae8:	f000 b818 	b.w	8013b1c <_kill_r>
 8013aec:	2b01      	cmp	r3, #1
 8013aee:	d00a      	beq.n	8013b06 <_raise_r+0x4c>
 8013af0:	1c59      	adds	r1, r3, #1
 8013af2:	d103      	bne.n	8013afc <_raise_r+0x42>
 8013af4:	2316      	movs	r3, #22
 8013af6:	6003      	str	r3, [r0, #0]
 8013af8:	2001      	movs	r0, #1
 8013afa:	e7e7      	b.n	8013acc <_raise_r+0x12>
 8013afc:	2400      	movs	r4, #0
 8013afe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013b02:	4628      	mov	r0, r5
 8013b04:	4798      	blx	r3
 8013b06:	2000      	movs	r0, #0
 8013b08:	e7e0      	b.n	8013acc <_raise_r+0x12>
	...

08013b0c <raise>:
 8013b0c:	4b02      	ldr	r3, [pc, #8]	; (8013b18 <raise+0xc>)
 8013b0e:	4601      	mov	r1, r0
 8013b10:	6818      	ldr	r0, [r3, #0]
 8013b12:	f7ff bfd2 	b.w	8013aba <_raise_r>
 8013b16:	bf00      	nop
 8013b18:	20000180 	.word	0x20000180

08013b1c <_kill_r>:
 8013b1c:	b538      	push	{r3, r4, r5, lr}
 8013b1e:	4d07      	ldr	r5, [pc, #28]	; (8013b3c <_kill_r+0x20>)
 8013b20:	2300      	movs	r3, #0
 8013b22:	4604      	mov	r4, r0
 8013b24:	4608      	mov	r0, r1
 8013b26:	4611      	mov	r1, r2
 8013b28:	602b      	str	r3, [r5, #0]
 8013b2a:	f7ef f9f3 	bl	8002f14 <_kill>
 8013b2e:	1c43      	adds	r3, r0, #1
 8013b30:	d102      	bne.n	8013b38 <_kill_r+0x1c>
 8013b32:	682b      	ldr	r3, [r5, #0]
 8013b34:	b103      	cbz	r3, 8013b38 <_kill_r+0x1c>
 8013b36:	6023      	str	r3, [r4, #0]
 8013b38:	bd38      	pop	{r3, r4, r5, pc}
 8013b3a:	bf00      	nop
 8013b3c:	200038fc 	.word	0x200038fc

08013b40 <_getpid_r>:
 8013b40:	f7ef b9e0 	b.w	8002f04 <_getpid>

08013b44 <_init>:
 8013b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b46:	bf00      	nop
 8013b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b4a:	bc08      	pop	{r3}
 8013b4c:	469e      	mov	lr, r3
 8013b4e:	4770      	bx	lr

08013b50 <_fini>:
 8013b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b52:	bf00      	nop
 8013b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b56:	bc08      	pop	{r3}
 8013b58:	469e      	mov	lr, r3
 8013b5a:	4770      	bx	lr
