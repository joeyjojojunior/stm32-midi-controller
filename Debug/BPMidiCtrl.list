
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015d8  08009da4  08009da4  00019da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b37c  0800b37c  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b37c  0800b37c  0001b37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b384  0800b384  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b384  0800b384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b388  0800b388  0001b388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800b38c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b9c  2000021c  0800b5a8  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002db8  0800b5a8  00022db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b526  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dff  00000000  00000000  0003b772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0003f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  000406d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c178  00000000  00000000  000416a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187cc  00000000  00000000  0005d818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0af5  00000000  00000000  00075fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00116ad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de4  00000000  00000000  00116b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d8c 	.word	0x08009d8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	08009d8c 	.word	0x08009d8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295
 80009c0:	f000 b96e 	b.w	8000ca0 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	9d08      	ldr	r5, [sp, #32]
 80009e2:	4604      	mov	r4, r0
 80009e4:	468c      	mov	ip, r1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8083 	bne.w	8000af2 <__udivmoddi4+0x116>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d947      	bls.n	8000a82 <__udivmoddi4+0xa6>
 80009f2:	fab2 f282 	clz	r2, r2
 80009f6:	b142      	cbz	r2, 8000a0a <__udivmoddi4+0x2e>
 80009f8:	f1c2 0020 	rsb	r0, r2, #32
 80009fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4097      	lsls	r7, r2
 8000a04:	ea40 0c01 	orr.w	ip, r0, r1
 8000a08:	4094      	lsls	r4, r2
 8000a0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a0e:	0c23      	lsrs	r3, r4, #16
 8000a10:	fbbc f6f8 	udiv	r6, ip, r8
 8000a14:	fa1f fe87 	uxth.w	lr, r7
 8000a18:	fb08 c116 	mls	r1, r8, r6, ip
 8000a1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a20:	fb06 f10e 	mul.w	r1, r6, lr
 8000a24:	4299      	cmp	r1, r3
 8000a26:	d909      	bls.n	8000a3c <__udivmoddi4+0x60>
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2e:	f080 8119 	bcs.w	8000c64 <__udivmoddi4+0x288>
 8000a32:	4299      	cmp	r1, r3
 8000a34:	f240 8116 	bls.w	8000c64 <__udivmoddi4+0x288>
 8000a38:	3e02      	subs	r6, #2
 8000a3a:	443b      	add	r3, r7
 8000a3c:	1a5b      	subs	r3, r3, r1
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a44:	fb08 3310 	mls	r3, r8, r0, r3
 8000a48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	45a6      	cmp	lr, r4
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x8c>
 8000a54:	193c      	adds	r4, r7, r4
 8000a56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a5a:	f080 8105 	bcs.w	8000c68 <__udivmoddi4+0x28c>
 8000a5e:	45a6      	cmp	lr, r4
 8000a60:	f240 8102 	bls.w	8000c68 <__udivmoddi4+0x28c>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6c:	eba4 040e 	sub.w	r4, r4, lr
 8000a70:	2600      	movs	r6, #0
 8000a72:	b11d      	cbz	r5, 8000a7c <__udivmoddi4+0xa0>
 8000a74:	40d4      	lsrs	r4, r2
 8000a76:	2300      	movs	r3, #0
 8000a78:	e9c5 4300 	strd	r4, r3, [r5]
 8000a7c:	4631      	mov	r1, r6
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	b902      	cbnz	r2, 8000a86 <__udivmoddi4+0xaa>
 8000a84:	deff      	udf	#255	; 0xff
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d150      	bne.n	8000b30 <__udivmoddi4+0x154>
 8000a8e:	1bcb      	subs	r3, r1, r7
 8000a90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a94:	fa1f f887 	uxth.w	r8, r7
 8000a98:	2601      	movs	r6, #1
 8000a9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a9e:	0c21      	lsrs	r1, r4, #16
 8000aa0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb08 f30c 	mul.w	r3, r8, ip
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0xe4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0xe2>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	f200 80e9 	bhi.w	8000c90 <__udivmoddi4+0x2b4>
 8000abe:	4684      	mov	ip, r0
 8000ac0:	1ac9      	subs	r1, r1, r3
 8000ac2:	b2a3      	uxth	r3, r4
 8000ac4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000acc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad0:	fb08 f800 	mul.w	r8, r8, r0
 8000ad4:	45a0      	cmp	r8, r4
 8000ad6:	d907      	bls.n	8000ae8 <__udivmoddi4+0x10c>
 8000ad8:	193c      	adds	r4, r7, r4
 8000ada:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ade:	d202      	bcs.n	8000ae6 <__udivmoddi4+0x10a>
 8000ae0:	45a0      	cmp	r8, r4
 8000ae2:	f200 80d9 	bhi.w	8000c98 <__udivmoddi4+0x2bc>
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	eba4 0408 	sub.w	r4, r4, r8
 8000aec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af0:	e7bf      	b.n	8000a72 <__udivmoddi4+0x96>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x12e>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	f000 80b1 	beq.w	8000c5e <__udivmoddi4+0x282>
 8000afc:	2600      	movs	r6, #0
 8000afe:	e9c5 0100 	strd	r0, r1, [r5]
 8000b02:	4630      	mov	r0, r6
 8000b04:	4631      	mov	r1, r6
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f683 	clz	r6, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d14a      	bne.n	8000ba8 <__udivmoddi4+0x1cc>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0x140>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80b8 	bhi.w	8000c8c <__udivmoddi4+0x2b0>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	468c      	mov	ip, r1
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d0a8      	beq.n	8000a7c <__udivmoddi4+0xa0>
 8000b2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b2e:	e7a5      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000b30:	f1c2 0320 	rsb	r3, r2, #32
 8000b34:	fa20 f603 	lsr.w	r6, r0, r3
 8000b38:	4097      	lsls	r7, r2
 8000b3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b42:	40d9      	lsrs	r1, r3
 8000b44:	4330      	orrs	r0, r6
 8000b46:	0c03      	lsrs	r3, r0, #16
 8000b48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b4c:	fa1f f887 	uxth.w	r8, r7
 8000b50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb06 f108 	mul.w	r1, r6, r8
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x19c>
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b6a:	f080 808d 	bcs.w	8000c88 <__udivmoddi4+0x2ac>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 808a 	bls.w	8000c88 <__udivmoddi4+0x2ac>
 8000b74:	3e02      	subs	r6, #2
 8000b76:	443b      	add	r3, r7
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b281      	uxth	r1, r0
 8000b7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b88:	fb00 f308 	mul.w	r3, r0, r8
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x1c4>
 8000b90:	1879      	adds	r1, r7, r1
 8000b92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b96:	d273      	bcs.n	8000c80 <__udivmoddi4+0x2a4>
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d971      	bls.n	8000c80 <__udivmoddi4+0x2a4>
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	4439      	add	r1, r7
 8000ba0:	1acb      	subs	r3, r1, r3
 8000ba2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ba6:	e778      	b.n	8000a9a <__udivmoddi4+0xbe>
 8000ba8:	f1c6 0c20 	rsb	ip, r6, #32
 8000bac:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bb4:	431c      	orrs	r4, r3
 8000bb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bba:	fa01 f306 	lsl.w	r3, r1, r6
 8000bbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bc6:	431f      	orrs	r7, r3
 8000bc8:	0c3b      	lsrs	r3, r7, #16
 8000bca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bce:	fa1f f884 	uxth.w	r8, r4
 8000bd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bda:	fb09 fa08 	mul.w	sl, r9, r8
 8000bde:	458a      	cmp	sl, r1
 8000be0:	fa02 f206 	lsl.w	r2, r2, r6
 8000be4:	fa00 f306 	lsl.w	r3, r0, r6
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x220>
 8000bea:	1861      	adds	r1, r4, r1
 8000bec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf0:	d248      	bcs.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf2:	458a      	cmp	sl, r1
 8000bf4:	d946      	bls.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bfa:	4421      	add	r1, r4
 8000bfc:	eba1 010a 	sub.w	r1, r1, sl
 8000c00:	b2bf      	uxth	r7, r7
 8000c02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c0e:	fb00 f808 	mul.w	r8, r0, r8
 8000c12:	45b8      	cmp	r8, r7
 8000c14:	d907      	bls.n	8000c26 <__udivmoddi4+0x24a>
 8000c16:	19e7      	adds	r7, r4, r7
 8000c18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1c:	d22e      	bcs.n	8000c7c <__udivmoddi4+0x2a0>
 8000c1e:	45b8      	cmp	r8, r7
 8000c20:	d92c      	bls.n	8000c7c <__udivmoddi4+0x2a0>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4427      	add	r7, r4
 8000c26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c2a:	eba7 0708 	sub.w	r7, r7, r8
 8000c2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c32:	454f      	cmp	r7, r9
 8000c34:	46c6      	mov	lr, r8
 8000c36:	4649      	mov	r1, r9
 8000c38:	d31a      	bcc.n	8000c70 <__udivmoddi4+0x294>
 8000c3a:	d017      	beq.n	8000c6c <__udivmoddi4+0x290>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x27a>
 8000c3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c42:	eb67 0701 	sbc.w	r7, r7, r1
 8000c46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c4a:	40f2      	lsrs	r2, r6
 8000c4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c50:	40f7      	lsrs	r7, r6
 8000c52:	e9c5 2700 	strd	r2, r7, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	462e      	mov	r6, r5
 8000c60:	4628      	mov	r0, r5
 8000c62:	e70b      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000c64:	4606      	mov	r6, r0
 8000c66:	e6e9      	b.n	8000a3c <__udivmoddi4+0x60>
 8000c68:	4618      	mov	r0, r3
 8000c6a:	e6fd      	b.n	8000a68 <__udivmoddi4+0x8c>
 8000c6c:	4543      	cmp	r3, r8
 8000c6e:	d2e5      	bcs.n	8000c3c <__udivmoddi4+0x260>
 8000c70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c74:	eb69 0104 	sbc.w	r1, r9, r4
 8000c78:	3801      	subs	r0, #1
 8000c7a:	e7df      	b.n	8000c3c <__udivmoddi4+0x260>
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	e7d2      	b.n	8000c26 <__udivmoddi4+0x24a>
 8000c80:	4660      	mov	r0, ip
 8000c82:	e78d      	b.n	8000ba0 <__udivmoddi4+0x1c4>
 8000c84:	4681      	mov	r9, r0
 8000c86:	e7b9      	b.n	8000bfc <__udivmoddi4+0x220>
 8000c88:	4666      	mov	r6, ip
 8000c8a:	e775      	b.n	8000b78 <__udivmoddi4+0x19c>
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	e74a      	b.n	8000b26 <__udivmoddi4+0x14a>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	4439      	add	r1, r7
 8000c96:	e713      	b.n	8000ac0 <__udivmoddi4+0xe4>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	e724      	b.n	8000ae8 <__udivmoddi4+0x10c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <ADC_DMA_average>:
void dmux_select(uint8_t row, uint8_t col);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_DMA_average(int channel) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum;
	int i;

	adc_sum = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
	if (channel < NUM_ADC_CHANNELS) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	dc14      	bgt.n	8000ce0 <ADC_DMA_average+0x3c>
		for (i = 0; i < NUM_ADC_SAMPLES; i++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	e00d      	b.n	8000cd8 <ADC_DMA_average+0x34>
			adc_sum += adcBuf[channel + i * NUM_ADC_CHANNELS];
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	009a      	lsls	r2, r3, #2
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <ADC_DMA_average+0x54>)
 8000cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < NUM_ADC_SAMPLES; i++)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b1f      	cmp	r3, #31
 8000cdc:	ddee      	ble.n	8000cbc <ADC_DMA_average+0x18>
 8000cde:	e001      	b.n	8000ce4 <ADC_DMA_average+0x40>
	} else
		return 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e002      	b.n	8000cea <ADC_DMA_average+0x46>

	return adc_sum / NUM_ADC_SAMPLES;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	b29b      	uxth	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000238 	.word	0x20000238

08000cfc <dmux_select>:

void dmux_select(uint8_t row, uint8_t col) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	460a      	mov	r2, r1
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	71bb      	strb	r3, [r7, #6]
	i2c_select(I2C_MUX_MASTER, row);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	20e2      	movs	r0, #226	; 0xe2
 8000d12:	f000 f809 	bl	8000d28 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, col);
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	20e0      	movs	r0, #224	; 0xe0
 8000d1c:	f000 f804 	bl	8000d28 <i2c_select>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <i2c_select>:

void i2c_select(uint8_t mux_addr, uint8_t i) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	4603      	mov	r3, r0
 8000d30:	460a      	mov	r2, r1
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	4613      	mov	r3, r2
 8000d36:	71bb      	strb	r3, [r7, #6]
	if (i > 7) return;
 8000d38:	79bb      	ldrb	r3, [r7, #6]
 8000d3a:	2b07      	cmp	r3, #7
 8000d3c:	d810      	bhi.n	8000d60 <i2c_select+0x38>
	unsigned char temp[1];
	temp[0] = 1 << i;
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	2201      	movs	r2, #1
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, mux_addr, temp, 1, 100);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	f107 020c 	add.w	r2, r7, #12
 8000d52:	2364      	movs	r3, #100	; 0x64
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2301      	movs	r3, #1
 8000d58:	4803      	ldr	r0, [pc, #12]	; (8000d68 <i2c_select+0x40>)
 8000d5a:	f002 fa19 	bl	8003190 <HAL_I2C_Master_Transmit>
 8000d5e:	e000      	b.n	8000d62 <i2c_select+0x3a>
	if (i > 7) return;
 8000d60:	bf00      	nop
}
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000232c 	.word	0x2000232c
 8000d6c:	00000000 	.word	0x00000000

08000d70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	b08b      	sub	sp, #44	; 0x2c
 8000d74:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d76:	f000 fcbf 	bl	80016f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d7a:	f000 f93b 	bl	8000ff4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d7e:	f000 faaf 	bl	80012e0 <MX_GPIO_Init>
	MX_RTC_Init();
 8000d82:	f000 fa67 	bl	8001254 <MX_RTC_Init>
	MX_DMA_Init();
 8000d86:	f000 fa8b 	bl	80012a0 <MX_DMA_Init>
	MX_ADC1_Init();
 8000d8a:	f000 f9b9 	bl	8001100 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000d8e:	f000 fa33 	bl	80011f8 <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 8000d92:	f007 ff0d 	bl	8008bb0 <MX_USB_DEVICE_Init>
	//MX_SDIO_SD_Init();

	/* USER CODE BEGIN 2 */
	// Init displays
	for (int i = 0; i < 4; i++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e01d      	b.n	8000dd8 <main+0x68>
		dmux_select(knobs[i].row, knobs[i].col);
 8000d9c:	498e      	ldr	r1, [pc, #568]	; (8000fd8 <main+0x268>)
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4613      	mov	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	4413      	add	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	7818      	ldrb	r0, [r3, #0]
 8000dac:	498a      	ldr	r1, [pc, #552]	; (8000fd8 <main+0x268>)
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	4613      	mov	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	4413      	add	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	440b      	add	r3, r1
 8000dba:	3301      	adds	r3, #1
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f7ff ff9c 	bl	8000cfc <dmux_select>
		ssd1306_Init(&hi2c1);
 8000dc4:	4885      	ldr	r0, [pc, #532]	; (8000fdc <main+0x26c>)
 8000dc6:	f007 fba1 	bl	800850c <ssd1306_Init>
		HAL_Delay(1000);
 8000dca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dce:	f000 fd05 	bl	80017dc <HAL_Delay>
	for (int i = 0; i < 4; i++) {
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	ddde      	ble.n	8000d9c <main+0x2c>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_ADC_Start(&hadc1);
 8000dde:	4880      	ldr	r0, [pc, #512]	; (8000fe0 <main+0x270>)
 8000de0:	f000 fd64 	bl	80018ac <HAL_ADC_Start>
	while (1) {
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	497f      	ldr	r1, [pc, #508]	; (8000fe4 <main+0x274>)
 8000de8:	487d      	ldr	r0, [pc, #500]	; (8000fe0 <main+0x270>)
 8000dea:	f000 fe13 	bl	8001a14 <HAL_ADC_Start_DMA>

		for (int i = 0; i < 4; i++) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	e0e5      	b.n	8000fc0 <main+0x250>
			uint8_t last_MIDI_val = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	71fb      	strb	r3, [r7, #7]
			uint8_t curr_MIDI_val = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	71bb      	strb	r3, [r7, #6]

			adcFiltered[i] = ADC_DMA_average(i);
 8000dfc:	68b8      	ldr	r0, [r7, #8]
 8000dfe:	f7ff ff51 	bl	8000ca4 <ADC_DMA_average>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4619      	mov	r1, r3
 8000e06:	4a78      	ldr	r2, [pc, #480]	; (8000fe8 <main+0x278>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			last_MIDI_val = knobs[i].value;
 8000e0e:	4972      	ldr	r1, [pc, #456]	; (8000fd8 <main+0x268>)
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	4613      	mov	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3322      	adds	r3, #34	; 0x22
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	71fb      	strb	r3, [r7, #7]
			curr_MIDI_val = MIN((EMA_A_M * slope * adcFiltered[i]) + ((1 - EMA_A_M) * knobs[i].value), 127);
 8000e22:	4b72      	ldr	r3, [pc, #456]	; (8000fec <main+0x27c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fcc0 	bl	80007ac <__aeabi_f2d>
 8000e2c:	4b70      	ldr	r3, [pc, #448]	; (8000ff0 <main+0x280>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fa2d 	bl	8000290 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4614      	mov	r4, r2
 8000e3c:	461d      	mov	r5, r3
 8000e3e:	4a6a      	ldr	r2, [pc, #424]	; (8000fe8 <main+0x278>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fc9e 	bl	8000788 <__aeabi_i2d>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4620      	mov	r0, r4
 8000e52:	4629      	mov	r1, r5
 8000e54:	f7ff fa1c 	bl	8000290 <__aeabi_dmul>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4614      	mov	r4, r2
 8000e5e:	461d      	mov	r5, r3
 8000e60:	4b62      	ldr	r3, [pc, #392]	; (8000fec <main+0x27c>)
 8000e62:	edd3 7a00 	vldr	s15, [r3]
 8000e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e6e:	495a      	ldr	r1, [pc, #360]	; (8000fd8 <main+0x268>)
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	4613      	mov	r3, r2
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	4413      	add	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	3322      	adds	r3, #34	; 0x22
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	ee07 3a90 	vmov	s15, r3
 8000e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8c:	ee17 0a90 	vmov	r0, s15
 8000e90:	f7ff fc8c 	bl	80007ac <__aeabi_f2d>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4620      	mov	r0, r4
 8000e9a:	4629      	mov	r1, r5
 8000e9c:	f7ff fb28 	bl	80004f0 <__adddf3>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	a349      	add	r3, pc, #292	; (adr r3, 8000fd0 <main+0x260>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	f7ff fd35 	bl	800091c <__aeabi_dcmplt>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d047      	beq.n	8000f48 <main+0x1d8>
 8000eb8:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <main+0x27c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc75 	bl	80007ac <__aeabi_f2d>
 8000ec2:	4b4b      	ldr	r3, [pc, #300]	; (8000ff0 <main+0x280>)
 8000ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec8:	f7ff f9e2 	bl	8000290 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4614      	mov	r4, r2
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	4a44      	ldr	r2, [pc, #272]	; (8000fe8 <main+0x278>)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fc53 	bl	8000788 <__aeabi_i2d>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	4629      	mov	r1, r5
 8000eea:	f7ff f9d1 	bl	8000290 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4614      	mov	r4, r2
 8000ef4:	461d      	mov	r5, r3
 8000ef6:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <main+0x27c>)
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f04:	4934      	ldr	r1, [pc, #208]	; (8000fd8 <main+0x268>)
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	3322      	adds	r3, #34	; 0x22
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f22:	ee17 0a90 	vmov	r0, s15
 8000f26:	f7ff fc41 	bl	80007ac <__aeabi_f2d>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4620      	mov	r0, r4
 8000f30:	4629      	mov	r1, r5
 8000f32:	f7ff fadd 	bl	80004f0 <__adddf3>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff fd15 	bl	800096c <__aeabi_d2uiz>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	e000      	b.n	8000f4a <main+0x1da>
 8000f48:	237f      	movs	r3, #127	; 0x7f
 8000f4a:	71bb      	strb	r3, [r7, #6]

			if (curr_MIDI_val != last_MIDI_val) {
 8000f4c:	79ba      	ldrb	r2, [r7, #6]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d032      	beq.n	8000fba <main+0x24a>
				knobs[i].value = curr_MIDI_val;
 8000f54:	4920      	ldr	r1, [pc, #128]	; (8000fd8 <main+0x268>)
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	3322      	adds	r3, #34	; 0x22
 8000f64:	79ba      	ldrb	r2, [r7, #6]
 8000f66:	701a      	strb	r2, [r3, #0]
				dmux_select(knobs[i].row, knobs[i].col);
 8000f68:	491b      	ldr	r1, [pc, #108]	; (8000fd8 <main+0x268>)
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	7818      	ldrb	r0, [r3, #0]
 8000f78:	4917      	ldr	r1, [pc, #92]	; (8000fd8 <main+0x268>)
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	3301      	adds	r3, #1
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f7ff feb6 	bl	8000cfc <dmux_select>
				ssd1306_WriteKnob(&hi2c1, knobs[i]);
 8000f90:	4911      	ldr	r1, [pc, #68]	; (8000fd8 <main+0x268>)
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	18ce      	adds	r6, r1, r3
 8000f9e:	466d      	mov	r5, sp
 8000fa0:	f106 040c 	add.w	r4, r6, #12
 8000fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fac:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fb0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000fb4:	4809      	ldr	r0, [pc, #36]	; (8000fdc <main+0x26c>)
 8000fb6:	f007 fc1f 	bl	80087f8 <ssd1306_WriteKnob>
		for (int i = 0; i < 4; i++) {
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	f77f af16 	ble.w	8000df4 <main+0x84>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 8000fc8:	e70c      	b.n	8000de4 <main+0x74>
 8000fca:	bf00      	nop
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	405fc000 	.word	0x405fc000
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	2000232c 	.word	0x2000232c
 8000fe0:	20002380 	.word	0x20002380
 8000fe4:	20000238 	.word	0x20000238
 8000fe8:	20000338 	.word	0x20000338
 8000fec:	20000098 	.word	0x20000098
 8000ff0:	20000090 	.word	0x20000090

08000ff4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09a      	sub	sp, #104	; 0x68
 8000ff8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ffa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ffe:	2230      	movs	r2, #48	; 0x30
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f008 fa8c 	bl	8009520 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <SystemClock_Config+0x104>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <SystemClock_Config+0x104>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <SystemClock_Config+0x104>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <SystemClock_Config+0x108>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a2b      	ldr	r2, [pc, #172]	; (80010fc <SystemClock_Config+0x108>)
 8001050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <SystemClock_Config+0x108>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001062:	230b      	movs	r3, #11
 8001064:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001070:	2310      	movs	r3, #16
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001078:	2302      	movs	r3, #2
 800107a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001080:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 15;
 8001082:	230f      	movs	r3, #15
 8001084:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 144;
 8001086:	2390      	movs	r3, #144	; 0x90
 8001088:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800108e:	2305      	movs	r3, #5
 8001090:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001092:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fe94 	bl	8004dc4 <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xb2>
		Error_Handler();
 80010a2:	f000 f976 	bl	8001392 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010a6:	230f      	movs	r3, #15
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 f8f7 	bl	80052b4 <HAL_RCC_ClockConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0xdc>
		Error_Handler();
 80010cc:	f000 f961 	bl	8001392 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010d0:	2302      	movs	r3, #2
 80010d2:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d8:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 faa4 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xfa>
		Error_Handler();
 80010ea:	f000 f952 	bl	8001392 <Error_Handler>
	}
}
 80010ee:	bf00      	nop
 80010f0:	3768      	adds	r7, #104	; 0x68
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <MX_ADC1_Init+0xec>)
 8001114:	4a36      	ldr	r2, [pc, #216]	; (80011f0 <MX_ADC1_Init+0xf0>)
 8001116:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001118:	4b34      	ldr	r3, [pc, #208]	; (80011ec <MX_ADC1_Init+0xec>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <MX_ADC1_Init+0xec>)
 8001120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001124:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_ADC1_Init+0xec>)
 8001128:	2201      	movs	r2, #1
 800112a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800112c:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <MX_ADC1_Init+0xec>)
 800112e:	2201      	movs	r2, #1
 8001130:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <MX_ADC1_Init+0xec>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113a:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <MX_ADC1_Init+0xec>)
 800113c:	2200      	movs	r2, #0
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <MX_ADC1_Init+0xec>)
 8001142:	4a2c      	ldr	r2, [pc, #176]	; (80011f4 <MX_ADC1_Init+0xf4>)
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <MX_ADC1_Init+0xec>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 4;
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_ADC1_Init+0xec>)
 800114e:	2204      	movs	r2, #4
 8001150:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MX_ADC1_Init+0xec>)
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_ADC1_Init+0xec>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001160:	4822      	ldr	r0, [pc, #136]	; (80011ec <MX_ADC1_Init+0xec>)
 8001162:	f000 fb5f 	bl	8001824 <HAL_ADC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC1_Init+0x70>
		Error_Handler();
 800116c:	f000 f911 	bl	8001392 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001178:	2301      	movs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	481a      	ldr	r0, [pc, #104]	; (80011ec <MX_ADC1_Init+0xec>)
 8001182:	f000 fd9b 	bl	8001cbc <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x90>
		Error_Handler();
 800118c:	f000 f901 	bl	8001392 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001190:	2301      	movs	r3, #1
 8001192:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <MX_ADC1_Init+0xec>)
 800119e:	f000 fd8d 	bl	8001cbc <HAL_ADC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0xac>
		Error_Handler();
 80011a8:	f000 f8f3 	bl	8001392 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 80011b0:	2303      	movs	r3, #3
 80011b2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011b4:	463b      	mov	r3, r7
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_ADC1_Init+0xec>)
 80011ba:	f000 fd7f 	bl	8001cbc <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0xc8>
		Error_Handler();
 80011c4:	f000 f8e5 	bl	8001392 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80011c8:	2303      	movs	r3, #3
 80011ca:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011d0:	463b      	mov	r3, r7
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_ADC1_Init+0xec>)
 80011d6:	f000 fd71 	bl	8001cbc <HAL_ADC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0xe4>
		Error_Handler();
 80011e0:	f000 f8d7 	bl	8001392 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20002380 	.word	0x20002380
 80011f0:	40012000 	.word	0x40012000
 80011f4:	0f000001 	.word	0x0f000001

080011f8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x50>)
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <MX_I2C1_Init+0x54>)
 8001200:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_I2C1_Init+0x50>)
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <MX_I2C1_Init+0x58>)
 8001206:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_I2C1_Init+0x50>)
 8001216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_I2C1_Init+0x50>)
 8001236:	f001 fe67 	bl	8002f08 <HAL_I2C_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001240:	f000 f8a7 	bl	8001392 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000232c 	.word	0x2000232c
 800124c:	40005400 	.word	0x40005400
 8001250:	00061a80 	.word	0x00061a80

08001254 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_RTC_Init+0x44>)
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <MX_RTC_Init+0x48>)
 800125c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_RTC_Init+0x44>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_RTC_Init+0x44>)
 8001266:	227f      	movs	r2, #127	; 0x7f
 8001268:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_RTC_Init+0x44>)
 800126c:	22ff      	movs	r2, #255	; 0xff
 800126e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_RTC_Init+0x44>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_RTC_Init+0x44>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_RTC_Init+0x44>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_RTC_Init+0x44>)
 8001284:	f004 fac2 	bl	800580c <HAL_RTC_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_RTC_Init+0x3e>
		Error_Handler();
 800128e:	f000 f880 	bl	8001392 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20002428 	.word	0x20002428
 800129c:	40002800 	.word	0x40002800

080012a0 <MX_DMA_Init>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_DMA_Init+0x3c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <MX_DMA_Init+0x3c>)
 80012b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_DMA_Init+0x3c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2038      	movs	r0, #56	; 0x38
 80012c8:	f001 f883 	bl	80023d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012cc:	2038      	movs	r0, #56	; 0x38
 80012ce:	f001 f89c 	bl	800240a <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <MX_GPIO_Init+0x84>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <MX_GPIO_Init+0x84>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_GPIO_Init+0x84>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_GPIO_Init+0x84>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a16      	ldr	r2, [pc, #88]	; (8001364 <MX_GPIO_Init+0x84>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_GPIO_Init+0x84>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_GPIO_Init+0x84>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <MX_GPIO_Init+0x84>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <MX_GPIO_Init+0x84>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_GPIO_Init+0x84>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <MX_GPIO_Init+0x84>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_GPIO_Init+0x84>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fc35 	bl	8001bf4 <HAL_ADC_Stop_DMA>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001396:	b672      	cpsid	i
}
 8001398:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800139a:	e7fe      	b.n	800139a <Error_Handler+0x8>

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_MspInit+0x4c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <HAL_MspInit+0x4c>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_MspInit+0x4c>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a2f      	ldr	r2, [pc, #188]	; (80014c8 <HAL_ADC_MspInit+0xdc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d157      	bne.n	80014be <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <HAL_ADC_MspInit+0xe0>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a2d      	ldr	r2, [pc, #180]	; (80014cc <HAL_ADC_MspInit+0xe0>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <HAL_ADC_MspInit+0xe0>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HAL_ADC_MspInit+0xe0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a26      	ldr	r2, [pc, #152]	; (80014cc <HAL_ADC_MspInit+0xe0>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_ADC_MspInit+0xe0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001446:	230f      	movs	r3, #15
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144a:	2303      	movs	r3, #3
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	481d      	ldr	r0, [pc, #116]	; (80014d0 <HAL_ADC_MspInit+0xe4>)
 800145a:	f001 fbd1 	bl	8002c00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <HAL_ADC_MspInit+0xec>)
 8001462:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 8001478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 8001480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001484:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 8001488:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 8001490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001494:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014a2:	480c      	ldr	r0, [pc, #48]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 80014a4:	f000 ffcc 	bl	8002440 <HAL_DMA_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80014ae:	f7ff ff70 	bl	8001392 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 80014b6:	639a      	str	r2, [r3, #56]	; 0x38
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_ADC_MspInit+0xe8>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40012000 	.word	0x40012000
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	200023c8 	.word	0x200023c8
 80014d8:	40026410 	.word	0x40026410

080014dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <HAL_I2C_MspInit+0x84>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12b      	bne.n	8001556 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_I2C_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a17      	ldr	r2, [pc, #92]	; (8001564 <HAL_I2C_MspInit+0x88>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_I2C_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800151a:	23c0      	movs	r3, #192	; 0xc0
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151e:	2312      	movs	r3, #18
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001522:	2301      	movs	r3, #1
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152a:	2304      	movs	r3, #4
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <HAL_I2C_MspInit+0x8c>)
 8001536:	f001 fb63 	bl	8002c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_I2C_MspInit+0x88>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_I2C_MspInit+0x88>)
 8001544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_I2C_MspInit+0x88>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	; 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40005400 	.word	0x40005400
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400

0800156c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a05      	ldr	r2, [pc, #20]	; (8001590 <HAL_RTC_MspInit+0x24>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d102      	bne.n	8001584 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_RTC_MspInit+0x28>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40002800 	.word	0x40002800
 8001594:	42470e3c 	.word	0x42470e3c

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800159c:	e7fe      	b.n	800159c <NMI_Handler+0x4>

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler+0x4>

080015aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e4:	f000 f8da 	bl	800179c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <DMA2_Stream0_IRQHandler+0x10>)
 80015f2:	f001 f89b 	bl	800272c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200023c8 	.word	0x200023c8

08001600 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <OTG_FS_IRQHandler+0x10>)
 8001606:	f002 fbaa 	bl	8003d5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200029a0 	.word	0x200029a0

08001614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <_sbrk+0x5c>)
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <_sbrk+0x60>)
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <_sbrk+0x64>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <_sbrk+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d207      	bcs.n	8001654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001644:	f007 ff42 	bl	80094cc <__errno>
 8001648:	4603      	mov	r3, r0
 800164a:	220c      	movs	r2, #12
 800164c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	e009      	b.n	8001668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <_sbrk+0x64>)
 8001664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20020000 	.word	0x20020000
 8001674:	00000400 	.word	0x00000400
 8001678:	20000340 	.word	0x20000340
 800167c:	20002db8 	.word	0x20002db8

08001680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <SystemInit+0x20>)
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <SystemInit+0x20>)
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a8:	480d      	ldr	r0, [pc, #52]	; (80016e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016aa:	490e      	ldr	r1, [pc, #56]	; (80016e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ac:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c0:	4c0b      	ldr	r4, [pc, #44]	; (80016f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ce:	f7ff ffd7 	bl	8001680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d2:	f007 ff01 	bl	80094d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d6:	f7ff fb4b 	bl	8000d70 <main>
  bx  lr    
 80016da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e4:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80016e8:	0800b38c 	.word	0x0800b38c
  ldr r2, =_sbss
 80016ec:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80016f0:	20002db8 	.word	0x20002db8

080016f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <HAL_Init+0x40>)
 8001702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <HAL_Init+0x40>)
 800170e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_Init+0x40>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 fe4b 	bl	80023bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001726:	2000      	movs	r0, #0
 8001728:	f000 f808 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172c:	f7ff fe36 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023c00 	.word	0x40023c00

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_InitTick+0x54>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_InitTick+0x58>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	fbb3 f3f1 	udiv	r3, r3, r1
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fe63 	bl	8002426 <HAL_SYSTICK_Config>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e00e      	b.n	8001788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d80a      	bhi.n	8001786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f000 fe2b 	bl	80023d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800177c:	4a06      	ldr	r2, [pc, #24]	; (8001798 <HAL_InitTick+0x5c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000009c 	.word	0x2000009c
 8001794:	200000a4 	.word	0x200000a4
 8001798:	200000a0 	.word	0x200000a0

0800179c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x20>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_IncTick+0x24>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_IncTick+0x24>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	200000a4 	.word	0x200000a4
 80017c0:	200024cc 	.word	0x200024cc

080017c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_GetTick+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200024cc 	.word	0x200024cc

080017dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e4:	f7ff ffee 	bl	80017c4 <HAL_GetTick>
 80017e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f4:	d005      	beq.n	8001802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_Delay+0x44>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001802:	bf00      	nop
 8001804:	f7ff ffde 	bl	80017c4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	429a      	cmp	r2, r3
 8001812:	d8f7      	bhi.n	8001804 <HAL_Delay+0x28>
  {
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200000a4 	.word	0x200000a4

08001824 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e033      	b.n	80018a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fdd2 	bl	80013ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b00      	cmp	r3, #0
 8001860:	d118      	bne.n	8001894 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800186a:	f023 0302 	bic.w	r3, r3, #2
 800186e:	f043 0202 	orr.w	r2, r3, #2
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fb52 	bl	8001f20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f023 0303 	bic.w	r3, r3, #3
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
 8001892:	e001      	b.n	8001898 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_Start+0x1a>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e097      	b.n	80019f6 <HAL_ADC_Start+0x14a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d018      	beq.n	800190e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018ec:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <HAL_ADC_Start+0x158>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <HAL_ADC_Start+0x15c>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0c9a      	lsrs	r2, r3, #18
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001900:	e002      	b.n	8001908 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3b01      	subs	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f9      	bne.n	8001902 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d15f      	bne.n	80019dc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001946:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800195a:	d106      	bne.n	800196a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f023 0206 	bic.w	r2, r3, #6
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	645a      	str	r2, [r3, #68]	; 0x44
 8001968:	e002      	b.n	8001970 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_ADC_Start+0x160>)
 800197a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001984:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10f      	bne.n	80019b2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d129      	bne.n	80019f4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	e020      	b.n	80019f4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <HAL_ADC_Start+0x164>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d11b      	bne.n	80019f4 <HAL_ADC_Start+0x148>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d114      	bne.n	80019f4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	e00b      	b.n	80019f4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f043 0210 	orr.w	r2, r3, #16
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	2000009c 	.word	0x2000009c
 8001a08:	431bde83 	.word	0x431bde83
 8001a0c:	40012300 	.word	0x40012300
 8001a10:	40012000 	.word	0x40012000

08001a14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_Start_DMA+0x1e>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e0ce      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x1bc>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d018      	beq.n	8001a7a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a58:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <HAL_ADC_Start_DMA+0x1c4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a5f      	ldr	r2, [pc, #380]	; (8001bdc <HAL_ADC_Start_DMA+0x1c8>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	0c9a      	lsrs	r2, r3, #18
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a6c:	e002      	b.n	8001a74 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f9      	bne.n	8001a6e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a88:	d107      	bne.n	8001a9a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a98:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	f040 8086 	bne.w	8001bb6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ad4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae8:	d106      	bne.n	8001af8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f023 0206 	bic.w	r2, r3, #6
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44
 8001af6:	e002      	b.n	8001afe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b06:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <HAL_ADC_Start_DMA+0x1cc>)
 8001b08:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	4a35      	ldr	r2, [pc, #212]	; (8001be4 <HAL_ADC_Start_DMA+0x1d0>)
 8001b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b16:	4a34      	ldr	r2, [pc, #208]	; (8001be8 <HAL_ADC_Start_DMA+0x1d4>)
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1e:	4a33      	ldr	r2, [pc, #204]	; (8001bec <HAL_ADC_Start_DMA+0x1d8>)
 8001b20:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b3a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b4a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	334c      	adds	r3, #76	; 0x4c
 8001b56:	4619      	mov	r1, r3
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f000 fd1e 	bl	800259c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10f      	bne.n	8001b8c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d129      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	e020      	b.n	8001bce <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HAL_ADC_Start_DMA+0x1dc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d11b      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1ba>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d114      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	e00b      	b.n	8001bce <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	2000009c 	.word	0x2000009c
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	40012300 	.word	0x40012300
 8001be4:	08002119 	.word	0x08002119
 8001be8:	080021d3 	.word	0x080021d3
 8001bec:	080021ef 	.word	0x080021ef
 8001bf0:	40012000 	.word	0x40012000

08001bf4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_Stop_DMA+0x1a>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e048      	b.n	8001ca0 <HAL_ADC_Stop_DMA+0xac>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d130      	bne.n	8001c96 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c42:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d10f      	bne.n	8001c72 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fcf8 	bl	800264c <HAL_DMA_Abort>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001c80:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	f043 0201 	orr.w	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1c>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e113      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x244>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	d925      	bls.n	8001d34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68d9      	ldr	r1, [r3, #12]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b1e      	subs	r3, #30
 8001cfe:	2207      	movs	r2, #7
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43da      	mvns	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68d9      	ldr	r1, [r3, #12]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4603      	mov	r3, r0
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4403      	add	r3, r0
 8001d26:	3b1e      	subs	r3, #30
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	e022      	b.n	8001d7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6919      	ldr	r1, [r3, #16]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	2207      	movs	r2, #7
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	400a      	ands	r2, r1
 8001d56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6919      	ldr	r1, [r3, #16]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4403      	add	r3, r0
 8001d70:	409a      	lsls	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d824      	bhi.n	8001dcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	3b05      	subs	r3, #5
 8001d94:	221f      	movs	r2, #31
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	400a      	ands	r2, r1
 8001da2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b05      	subs	r3, #5
 8001dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dca:	e04c      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	d824      	bhi.n	8001e1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	3b23      	subs	r3, #35	; 0x23
 8001de6:	221f      	movs	r2, #31
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43da      	mvns	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	400a      	ands	r2, r1
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3b23      	subs	r3, #35	; 0x23
 8001e10:	fa00 f203 	lsl.w	r2, r0, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e1c:	e023      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b41      	subs	r3, #65	; 0x41
 8001e30:	221f      	movs	r2, #31
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	3b41      	subs	r3, #65	; 0x41
 8001e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e66:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <HAL_ADC_ConfigChannel+0x250>)
 8001e68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <HAL_ADC_ConfigChannel+0x254>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d10f      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1d8>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b12      	cmp	r3, #18
 8001e7a:	d10b      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_ADC_ConfigChannel+0x254>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d12b      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x23a>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <HAL_ADC_ConfigChannel+0x258>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d003      	beq.n	8001eb0 <HAL_ADC_ConfigChannel+0x1f4>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b11      	cmp	r3, #17
 8001eae:	d122      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <HAL_ADC_ConfigChannel+0x258>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d111      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_ADC_ConfigChannel+0x25c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <HAL_ADC_ConfigChannel+0x260>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	0c9a      	lsrs	r2, r3, #18
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ee8:	e002      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f9      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40012300 	.word	0x40012300
 8001f10:	40012000 	.word	0x40012000
 8001f14:	10000012 	.word	0x10000012
 8001f18:	2000009c 	.word	0x2000009c
 8001f1c:	431bde83 	.word	0x431bde83

08001f20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f28:	4b79      	ldr	r3, [pc, #484]	; (8002110 <ADC_Init+0x1f0>)
 8001f2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	021a      	lsls	r2, r3, #8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6899      	ldr	r1, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	4a58      	ldr	r2, [pc, #352]	; (8002114 <ADC_Init+0x1f4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d022      	beq.n	8001ffe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6899      	ldr	r1, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6899      	ldr	r1, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	e00f      	b.n	800201e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800200c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800201c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0202 	bic.w	r2, r2, #2
 800202c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6899      	ldr	r1, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7e1b      	ldrb	r3, [r3, #24]
 8002038:	005a      	lsls	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800205a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800206a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6859      	ldr	r1, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	3b01      	subs	r3, #1
 8002078:	035a      	lsls	r2, r3, #13
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	e007      	b.n	8002094 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002092:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	051a      	lsls	r2, r3, #20
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020d6:	025a      	lsls	r2, r3, #9
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6899      	ldr	r1, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	029a      	lsls	r2, r3, #10
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	609a      	str	r2, [r3, #8]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40012300 	.word	0x40012300
 8002114:	0f000001 	.word	0x0f000001

08002118 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800212e:	2b00      	cmp	r3, #0
 8002130:	d13c      	bne.n	80021ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d12b      	bne.n	80021a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	d127      	bne.n	80021a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800216c:	2b00      	cmp	r3, #0
 800216e:	d119      	bne.n	80021a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0220 	bic.w	r2, r2, #32
 800217e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7ff f8e9 	bl	800137c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021aa:	e00e      	b.n	80021ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff fd75 	bl	8001ca8 <HAL_ADC_ErrorCallback>
}
 80021be:	e004      	b.n	80021ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f7ff f8c1 	bl	8001368 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f043 0204 	orr.w	r2, r3, #4
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f7ff fd4a 	bl	8001ca8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002238:	4013      	ands	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224e:	4a04      	ldr	r2, [pc, #16]	; (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	60d3      	str	r3, [r2, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <__NVIC_GetPriorityGrouping+0x18>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	f003 0307 	and.w	r3, r3, #7
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	2b00      	cmp	r3, #0
 8002290:	db0b      	blt.n	80022aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <__NVIC_EnableIRQ+0x38>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	2001      	movs	r0, #1
 80022a2:	fa00 f202 	lsl.w	r2, r0, r2
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000e100 	.word	0xe000e100

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db0a      	blt.n	80022e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	490c      	ldr	r1, [pc, #48]	; (8002308 <__NVIC_SetPriority+0x4c>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e4:	e00a      	b.n	80022fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <__NVIC_SetPriority+0x50>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3b04      	subs	r3, #4
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	761a      	strb	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0307 	rsb	r3, r3, #7
 800232a:	2b04      	cmp	r3, #4
 800232c:	bf28      	it	cs
 800232e:	2304      	movcs	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	2b06      	cmp	r3, #6
 8002338:	d902      	bls.n	8002340 <NVIC_EncodePriority+0x30>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b03      	subs	r3, #3
 800233e:	e000      	b.n	8002342 <NVIC_EncodePriority+0x32>
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	f04f 32ff 	mov.w	r2, #4294967295
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002358:	f04f 31ff 	mov.w	r1, #4294967295
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43d9      	mvns	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	4313      	orrs	r3, r2
         );
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002388:	d301      	bcc.n	800238e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238a:	2301      	movs	r3, #1
 800238c:	e00f      	b.n	80023ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <SysTick_Config+0x40>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002396:	210f      	movs	r1, #15
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	f7ff ff8e 	bl	80022bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SysTick_Config+0x40>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <SysTick_Config+0x40>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	e000e010 	.word	0xe000e010

080023bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ff29 	bl	800221c <__NVIC_SetPriorityGrouping>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e4:	f7ff ff3e 	bl	8002264 <__NVIC_GetPriorityGrouping>
 80023e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f7ff ff8e 	bl	8002310 <NVIC_EncodePriority>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff5d 	bl	80022bc <__NVIC_SetPriority>
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff31 	bl	8002280 <__NVIC_EnableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffa2 	bl	8002378 <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff f9ba 	bl	80017c4 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e099      	b.n	8002590 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247c:	e00f      	b.n	800249e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800247e:	f7ff f9a1 	bl	80017c4 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b05      	cmp	r3, #5
 800248a:	d908      	bls.n	800249e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e078      	b.n	8002590 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e8      	bne.n	800247e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	4b38      	ldr	r3, [pc, #224]	; (8002598 <HAL_DMA_Init+0x158>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d107      	bne.n	8002508 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	4313      	orrs	r3, r2
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f023 0307 	bic.w	r3, r3, #7
 800251e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	2b04      	cmp	r3, #4
 8002530:	d117      	bne.n	8002562 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00e      	beq.n	8002562 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fadf 	bl	8002b08 <DMA_CheckFifoParam>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800255e:	2301      	movs	r3, #1
 8002560:	e016      	b.n	8002590 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fa96 	bl	8002a9c <DMA_CalcBaseAndBitshift>
 8002570:	4603      	mov	r3, r0
 8002572:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	223f      	movs	r2, #63	; 0x3f
 800257a:	409a      	lsls	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	f010803f 	.word	0xf010803f

0800259c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_DMA_Start_IT+0x26>
 80025be:	2302      	movs	r3, #2
 80025c0:	e040      	b.n	8002644 <HAL_DMA_Start_IT+0xa8>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d12f      	bne.n	8002636 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2202      	movs	r2, #2
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa28 	bl	8002a40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	223f      	movs	r2, #63	; 0x3f
 80025f6:	409a      	lsls	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0216 	orr.w	r2, r2, #22
 800260a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0208 	orr.w	r2, r2, #8
 8002622:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e005      	b.n	8002642 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800265a:	f7ff f8b3 	bl	80017c4 <HAL_GetTick>
 800265e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d008      	beq.n	800267e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e052      	b.n	8002724 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0216 	bic.w	r2, r2, #22
 800268c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800269c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <HAL_DMA_Abort+0x62>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0208 	bic.w	r2, r2, #8
 80026bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ce:	e013      	b.n	80026f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026d0:	f7ff f878 	bl	80017c4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b05      	cmp	r3, #5
 80026dc:	d90c      	bls.n	80026f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2203      	movs	r2, #3
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e015      	b.n	8002724 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1e4      	bne.n	80026d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	223f      	movs	r2, #63	; 0x3f
 800270c:	409a      	lsls	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002738:	4b92      	ldr	r3, [pc, #584]	; (8002984 <HAL_DMA_IRQHandler+0x258>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a92      	ldr	r2, [pc, #584]	; (8002988 <HAL_DMA_IRQHandler+0x25c>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0a9b      	lsrs	r3, r3, #10
 8002744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	2208      	movs	r2, #8
 8002758:	409a      	lsls	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01a      	beq.n	8002798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0204 	bic.w	r2, r2, #4
 800277e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	2208      	movs	r2, #8
 8002786:	409a      	lsls	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	2201      	movs	r2, #1
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	2201      	movs	r2, #1
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f043 0202 	orr.w	r2, r3, #2
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d2:	2204      	movs	r2, #4
 80027d4:	409a      	lsls	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d012      	beq.n	8002804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00b      	beq.n	8002804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f0:	2204      	movs	r2, #4
 80027f2:	409a      	lsls	r2, r3
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	f043 0204 	orr.w	r2, r3, #4
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	2210      	movs	r2, #16
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d043      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d03c      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	2210      	movs	r2, #16
 8002828:	409a      	lsls	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d018      	beq.n	800286e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d108      	bne.n	800285c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d024      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
 800285a:	e01f      	b.n	800289c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
 800286c:	e016      	b.n	800289c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d107      	bne.n	800288c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0208 	bic.w	r2, r2, #8
 800288a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	2220      	movs	r2, #32
 80028a2:	409a      	lsls	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 808e 	beq.w	80029ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8086 	beq.w	80029ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	2220      	movs	r2, #32
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d136      	bne.n	8002944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0216 	bic.w	r2, r2, #22
 80028e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <HAL_DMA_IRQHandler+0x1da>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0208 	bic.w	r2, r2, #8
 8002914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	223f      	movs	r2, #63	; 0x3f
 800291c:	409a      	lsls	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002936:	2b00      	cmp	r3, #0
 8002938:	d07d      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
        }
        return;
 8002942:	e078      	b.n	8002a36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01c      	beq.n	800298c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d108      	bne.n	8002972 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	2b00      	cmp	r3, #0
 8002966:	d030      	beq.n	80029ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4798      	blx	r3
 8002970:	e02b      	b.n	80029ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d027      	beq.n	80029ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
 8002982:	e022      	b.n	80029ca <HAL_DMA_IRQHandler+0x29e>
 8002984:	2000009c 	.word	0x2000009c
 8002988:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10f      	bne.n	80029ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0210 	bic.w	r2, r2, #16
 80029a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d032      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d022      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2205      	movs	r2, #5
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3301      	adds	r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d307      	bcc.n	8002a12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f2      	bne.n	80029f6 <HAL_DMA_IRQHandler+0x2ca>
 8002a10:	e000      	b.n	8002a14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
 8002a34:	e000      	b.n	8002a38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a36:	bf00      	nop
    }
  }
}
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop

08002a40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b40      	cmp	r3, #64	; 0x40
 8002a6c:	d108      	bne.n	8002a80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a7e:	e007      	b.n	8002a90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	60da      	str	r2, [r3, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3b10      	subs	r3, #16
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <DMA_CalcBaseAndBitshift+0x64>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <DMA_CalcBaseAndBitshift+0x68>)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d909      	bls.n	8002ade <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ad2:	f023 0303 	bic.w	r3, r3, #3
 8002ad6:	1d1a      	adds	r2, r3, #4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	659a      	str	r2, [r3, #88]	; 0x58
 8002adc:	e007      	b.n	8002aee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	aaaaaaab 	.word	0xaaaaaaab
 8002b04:	08009e18 	.word	0x08009e18

08002b08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11f      	bne.n	8002b62 <DMA_CheckFifoParam+0x5a>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d856      	bhi.n	8002bd6 <DMA_CheckFifoParam+0xce>
 8002b28:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <DMA_CheckFifoParam+0x28>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b41 	.word	0x08002b41
 8002b34:	08002b53 	.word	0x08002b53
 8002b38:	08002b41 	.word	0x08002b41
 8002b3c:	08002bd7 	.word	0x08002bd7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d046      	beq.n	8002bda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b50:	e043      	b.n	8002bda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b5a:	d140      	bne.n	8002bde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b60:	e03d      	b.n	8002bde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6a:	d121      	bne.n	8002bb0 <DMA_CheckFifoParam+0xa8>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d837      	bhi.n	8002be2 <DMA_CheckFifoParam+0xda>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <DMA_CheckFifoParam+0x70>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002b8f 	.word	0x08002b8f
 8002b80:	08002b89 	.word	0x08002b89
 8002b84:	08002ba1 	.word	0x08002ba1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8c:	e030      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d025      	beq.n	8002be6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9e:	e022      	b.n	8002be6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba8:	d11f      	bne.n	8002bea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bae:	e01c      	b.n	8002bea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d903      	bls.n	8002bbe <DMA_CheckFifoParam+0xb6>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d003      	beq.n	8002bc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bbc:	e018      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc2:	e015      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	e00b      	b.n	8002bee <DMA_CheckFifoParam+0xe6>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e00a      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e008      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bde:	bf00      	nop
 8002be0:	e006      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
 8002be4:	e004      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002be6:	bf00      	nop
 8002be8:	e002      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
    }
  } 
  
  return status; 
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop

08002c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e159      	b.n	8002ed0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	f040 8148 	bne.w	8002eca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d005      	beq.n	8002c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d130      	bne.n	8002cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c88:	2201      	movs	r2, #1
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 0201 	and.w	r2, r3, #1
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d017      	beq.n	8002cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d123      	bne.n	8002d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	08da      	lsrs	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3208      	adds	r2, #8
 8002d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	220f      	movs	r2, #15
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	08da      	lsrs	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3208      	adds	r2, #8
 8002d3e:	69b9      	ldr	r1, [r7, #24]
 8002d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	2203      	movs	r2, #3
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0203 	and.w	r2, r3, #3
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a2 	beq.w	8002eca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	4b57      	ldr	r3, [pc, #348]	; (8002ee8 <HAL_GPIO_Init+0x2e8>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	4a56      	ldr	r2, [pc, #344]	; (8002ee8 <HAL_GPIO_Init+0x2e8>)
 8002d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d94:	6453      	str	r3, [r2, #68]	; 0x44
 8002d96:	4b54      	ldr	r3, [pc, #336]	; (8002ee8 <HAL_GPIO_Init+0x2e8>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002da2:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_GPIO_Init+0x2ec>)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	3302      	adds	r3, #2
 8002daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	220f      	movs	r2, #15
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a49      	ldr	r2, [pc, #292]	; (8002ef0 <HAL_GPIO_Init+0x2f0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d019      	beq.n	8002e02 <HAL_GPIO_Init+0x202>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a48      	ldr	r2, [pc, #288]	; (8002ef4 <HAL_GPIO_Init+0x2f4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0x1fe>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a47      	ldr	r2, [pc, #284]	; (8002ef8 <HAL_GPIO_Init+0x2f8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00d      	beq.n	8002dfa <HAL_GPIO_Init+0x1fa>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a46      	ldr	r2, [pc, #280]	; (8002efc <HAL_GPIO_Init+0x2fc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <HAL_GPIO_Init+0x1f6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a45      	ldr	r2, [pc, #276]	; (8002f00 <HAL_GPIO_Init+0x300>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_GPIO_Init+0x1f2>
 8002dee:	2304      	movs	r3, #4
 8002df0:	e008      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002df2:	2307      	movs	r3, #7
 8002df4:	e006      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002df6:	2303      	movs	r3, #3
 8002df8:	e004      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e002      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002e02:	2300      	movs	r3, #0
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	f002 0203 	and.w	r2, r2, #3
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	4093      	lsls	r3, r2
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e14:	4935      	ldr	r1, [pc, #212]	; (8002eec <HAL_GPIO_Init+0x2ec>)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	089b      	lsrs	r3, r3, #2
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e46:	4a2f      	ldr	r2, [pc, #188]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e70:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e76:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e9a:	4a1a      	ldr	r2, [pc, #104]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea0:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec4:	4a0f      	ldr	r2, [pc, #60]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	f67f aea2 	bls.w	8002c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40020800 	.word	0x40020800
 8002efc:	40020c00 	.word	0x40020c00
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40013c00 	.word	0x40013c00

08002f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e12b      	b.n	8003172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe fad4 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2224      	movs	r2, #36	; 0x24
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f002 fb4a 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 8002f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4a81      	ldr	r2, [pc, #516]	; (800317c <HAL_I2C_Init+0x274>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d807      	bhi.n	8002f8c <HAL_I2C_Init+0x84>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a80      	ldr	r2, [pc, #512]	; (8003180 <HAL_I2C_Init+0x278>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e006      	b.n	8002f9a <HAL_I2C_Init+0x92>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a7d      	ldr	r2, [pc, #500]	; (8003184 <HAL_I2C_Init+0x27c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	bf94      	ite	ls
 8002f94:	2301      	movls	r3, #1
 8002f96:	2300      	movhi	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0e7      	b.n	8003172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a78      	ldr	r2, [pc, #480]	; (8003188 <HAL_I2C_Init+0x280>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0c9b      	lsrs	r3, r3, #18
 8002fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a6a      	ldr	r2, [pc, #424]	; (800317c <HAL_I2C_Init+0x274>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d802      	bhi.n	8002fdc <HAL_I2C_Init+0xd4>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	e009      	b.n	8002ff0 <HAL_I2C_Init+0xe8>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	4a69      	ldr	r2, [pc, #420]	; (800318c <HAL_I2C_Init+0x284>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	3301      	adds	r3, #1
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	495c      	ldr	r1, [pc, #368]	; (800317c <HAL_I2C_Init+0x274>)
 800300c:	428b      	cmp	r3, r1
 800300e:	d819      	bhi.n	8003044 <HAL_I2C_Init+0x13c>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e59      	subs	r1, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fbb1 f3f3 	udiv	r3, r1, r3
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003024:	400b      	ands	r3, r1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_I2C_Init+0x138>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1e59      	subs	r1, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fbb1 f3f3 	udiv	r3, r1, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	e051      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 8003040:	2304      	movs	r3, #4
 8003042:	e04f      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d111      	bne.n	8003070 <HAL_I2C_Init+0x168>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1e58      	subs	r0, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	440b      	add	r3, r1
 800305a:	fbb0 f3f3 	udiv	r3, r0, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e012      	b.n	8003096 <HAL_I2C_Init+0x18e>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e58      	subs	r0, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	0099      	lsls	r1, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	fbb0 f3f3 	udiv	r3, r0, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Init+0x196>
 800309a:	2301      	movs	r3, #1
 800309c:	e022      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10e      	bne.n	80030c4 <HAL_I2C_Init+0x1bc>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1e58      	subs	r0, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	440b      	add	r3, r1
 80030b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c2:	e00f      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1e58      	subs	r0, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	0099      	lsls	r1, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	6809      	ldr	r1, [r1, #0]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6911      	ldr	r1, [r2, #16]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68d2      	ldr	r2, [r2, #12]
 800311e:	4311      	orrs	r1, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	430b      	orrs	r3, r1
 8003126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	000186a0 	.word	0x000186a0
 8003180:	001e847f 	.word	0x001e847f
 8003184:	003d08ff 	.word	0x003d08ff
 8003188:	431bde83 	.word	0x431bde83
 800318c:	10624dd3 	.word	0x10624dd3

08003190 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	461a      	mov	r2, r3
 800319c:	460b      	mov	r3, r1
 800319e:	817b      	strh	r3, [r7, #10]
 80031a0:	4613      	mov	r3, r2
 80031a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7fe fb0e 	bl	80017c4 <HAL_GetTick>
 80031a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	f040 80e0 	bne.w	8003378 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2319      	movs	r3, #25
 80031be:	2201      	movs	r2, #1
 80031c0:	4970      	ldr	r1, [pc, #448]	; (8003384 <HAL_I2C_Master_Transmit+0x1f4>)
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 faf4 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
 80031d0:	e0d3      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_I2C_Master_Transmit+0x50>
 80031dc:	2302      	movs	r3, #2
 80031de:	e0cc      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d007      	beq.n	8003206 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003214:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2221      	movs	r2, #33	; 0x21
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2210      	movs	r2, #16
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	893a      	ldrh	r2, [r7, #8]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a50      	ldr	r2, [pc, #320]	; (8003388 <HAL_I2C_Master_Transmit+0x1f8>)
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003248:	8979      	ldrh	r1, [r7, #10]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f996 	bl	8003580 <I2C_MasterRequestWrite>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e08d      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003274:	e066      	b.n	8003344 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	6a39      	ldr	r1, [r7, #32]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fb6e 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b04      	cmp	r3, #4
 800328c:	d107      	bne.n	800329e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e06b      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d11b      	bne.n	8003318 <HAL_I2C_Master_Transmit+0x188>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d017      	beq.n	8003318 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	6a39      	ldr	r1, [r7, #32]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 fb5e 	bl	80039de <I2C_WaitOnBTFFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00d      	beq.n	8003344 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	2b04      	cmp	r3, #4
 800332e:	d107      	bne.n	8003340 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e01a      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	d194      	bne.n	8003276 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e000      	b.n	800337a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003378:	2302      	movs	r3, #2
  }
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	00100002 	.word	0x00100002
 8003388:	ffff0000 	.word	0xffff0000

0800338c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	4608      	mov	r0, r1
 8003396:	4611      	mov	r1, r2
 8003398:	461a      	mov	r2, r3
 800339a:	4603      	mov	r3, r0
 800339c:	817b      	strh	r3, [r7, #10]
 800339e:	460b      	mov	r3, r1
 80033a0:	813b      	strh	r3, [r7, #8]
 80033a2:	4613      	mov	r3, r2
 80033a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033a6:	f7fe fa0d 	bl	80017c4 <HAL_GetTick>
 80033aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	f040 80d9 	bne.w	800356c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2319      	movs	r3, #25
 80033c0:	2201      	movs	r2, #1
 80033c2:	496d      	ldr	r1, [pc, #436]	; (8003578 <HAL_I2C_Mem_Write+0x1ec>)
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f9f3 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0cc      	b.n	800356e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_I2C_Mem_Write+0x56>
 80033de:	2302      	movs	r3, #2
 80033e0:	e0c5      	b.n	800356e <HAL_I2C_Mem_Write+0x1e2>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d007      	beq.n	8003408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2221      	movs	r2, #33	; 0x21
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2240      	movs	r2, #64	; 0x40
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a4d      	ldr	r2, [pc, #308]	; (800357c <HAL_I2C_Mem_Write+0x1f0>)
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800344a:	88f8      	ldrh	r0, [r7, #6]
 800344c:	893a      	ldrh	r2, [r7, #8]
 800344e:	8979      	ldrh	r1, [r7, #10]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	4603      	mov	r3, r0
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f912 	bl	8003684 <I2C_RequestMemoryWrite>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d052      	beq.n	800350c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e081      	b.n	800356e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fa74 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	2b04      	cmp	r3, #4
 8003480:	d107      	bne.n	8003492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e06b      	b.n	800356e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	781a      	ldrb	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d11b      	bne.n	800350c <HAL_I2C_Mem_Write+0x180>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d017      	beq.n	800350c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1aa      	bne.n	800346a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fa60 	bl	80039de <I2C_WaitOnBTFFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	2b04      	cmp	r3, #4
 800352a:	d107      	bne.n	800353c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e016      	b.n	800356e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	00100002 	.word	0x00100002
 800357c:	ffff0000 	.word	0xffff0000

08003580 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	460b      	mov	r3, r1
 800358e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d006      	beq.n	80035aa <I2C_MasterRequestWrite+0x2a>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d003      	beq.n	80035aa <I2C_MasterRequestWrite+0x2a>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035a8:	d108      	bne.n	80035bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e00b      	b.n	80035d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	2b12      	cmp	r3, #18
 80035c2:	d107      	bne.n	80035d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f8e5 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fa:	d103      	bne.n	8003604 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e035      	b.n	8003674 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003610:	d108      	bne.n	8003624 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003612:	897b      	ldrh	r3, [r7, #10]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003620:	611a      	str	r2, [r3, #16]
 8003622:	e01b      	b.n	800365c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003624:	897b      	ldrh	r3, [r7, #10]
 8003626:	11db      	asrs	r3, r3, #7
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0306 	and.w	r3, r3, #6
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f063 030f 	orn	r3, r3, #15
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	490e      	ldr	r1, [pc, #56]	; (800367c <I2C_MasterRequestWrite+0xfc>)
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f90b 	bl	800385e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e010      	b.n	8003674 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003652:	897b      	ldrh	r3, [r7, #10]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4907      	ldr	r1, [pc, #28]	; (8003680 <I2C_MasterRequestWrite+0x100>)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f8fb 	bl	800385e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	00010008 	.word	0x00010008
 8003680:	00010002 	.word	0x00010002

08003684 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	461a      	mov	r2, r3
 8003692:	4603      	mov	r3, r0
 8003694:	817b      	strh	r3, [r7, #10]
 8003696:	460b      	mov	r3, r1
 8003698:	813b      	strh	r3, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f878 	bl	80037b0 <I2C_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d4:	d103      	bne.n	80036de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e05f      	b.n	80037a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036e2:	897b      	ldrh	r3, [r7, #10]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	6a3a      	ldr	r2, [r7, #32]
 80036f6:	492d      	ldr	r1, [pc, #180]	; (80037ac <I2C_RequestMemoryWrite+0x128>)
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f8b0 	bl	800385e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e04c      	b.n	80037a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	6a39      	ldr	r1, [r7, #32]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f91a 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2b04      	cmp	r3, #4
 8003734:	d107      	bne.n	8003746 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003744:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e02b      	b.n	80037a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d105      	bne.n	800375c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003750:	893b      	ldrh	r3, [r7, #8]
 8003752:	b2da      	uxtb	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	611a      	str	r2, [r3, #16]
 800375a:	e021      	b.n	80037a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800375c:	893b      	ldrh	r3, [r7, #8]
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	b29b      	uxth	r3, r3
 8003762:	b2da      	uxtb	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800376a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376c:	6a39      	ldr	r1, [r7, #32]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f8f4 	bl	800395c <I2C_WaitOnTXEFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	2b04      	cmp	r3, #4
 8003780:	d107      	bne.n	8003792 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003790:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e005      	b.n	80037a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003796:	893b      	ldrh	r3, [r7, #8]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	00010002 	.word	0x00010002

080037b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c0:	e025      	b.n	800380e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d021      	beq.n	800380e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ca:	f7fd fffb 	bl	80017c4 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d302      	bcc.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d116      	bne.n	800380e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e023      	b.n	8003856 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	0c1b      	lsrs	r3, r3, #16
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10d      	bne.n	8003834 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	e00c      	b.n	800384e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	429a      	cmp	r2, r3
 8003852:	d0b6      	beq.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800386c:	e051      	b.n	8003912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387c:	d123      	bne.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003896:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e046      	b.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d021      	beq.n	8003912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fd ff79 	bl	80017c4 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d116      	bne.n	8003912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0220 	orr.w	r2, r3, #32
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e020      	b.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10c      	bne.n	8003936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e00b      	b.n	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	43da      	mvns	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d18d      	bne.n	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003968:	e02d      	b.n	80039c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f878 	bl	8003a60 <I2C_IsAcknowledgeFailed>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e02d      	b.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d021      	beq.n	80039c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7fd ff1f 	bl	80017c4 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d116      	bne.n	80039c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e007      	b.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d0:	2b80      	cmp	r3, #128	; 0x80
 80039d2:	d1ca      	bne.n	800396a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ea:	e02d      	b.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f837 	bl	8003a60 <I2C_IsAcknowledgeFailed>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e02d      	b.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d021      	beq.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a04:	f7fd fede 	bl	80017c4 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d302      	bcc.n	8003a1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d116      	bne.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e007      	b.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d1ca      	bne.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a76:	d11b      	bne.n	8003ab0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	f043 0204 	orr.w	r2, r3, #4
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac0:	b08f      	sub	sp, #60	; 0x3c
 8003ac2:	af0a      	add	r7, sp, #40	; 0x28
 8003ac4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e10f      	b.n	8003cf0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f005 f9ee 	bl	8008ecc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2203      	movs	r2, #3
 8003af4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f002 f875 	bl	8005bfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	687e      	ldr	r6, [r7, #4]
 8003b1c:	466d      	mov	r5, sp
 8003b1e:	f106 0410 	add.w	r4, r6, #16
 8003b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b32:	1d33      	adds	r3, r6, #4
 8003b34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f001 ff4d 	bl	80059d6 <USB_CoreInit>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0d0      	b.n	8003cf0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f002 f863 	bl	8005c20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e04a      	b.n	8003bf6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	333d      	adds	r3, #61	; 0x3d
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	333c      	adds	r3, #60	; 0x3c
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	b298      	uxth	r0, r3
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	3342      	adds	r3, #66	; 0x42
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	333f      	adds	r3, #63	; 0x3f
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3344      	adds	r3, #68	; 0x44
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3348      	adds	r3, #72	; 0x48
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	3350      	adds	r3, #80	; 0x50
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3af      	bcc.n	8003b60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c00:	2300      	movs	r3, #0
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	e044      	b.n	8003c90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c06:	7bfa      	ldrb	r2, [r7, #15]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c1c:	7bfa      	ldrb	r2, [r7, #15]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	7bfa      	ldrb	r2, [r7, #15]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3b5      	bcc.n	8003c06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	687e      	ldr	r6, [r7, #4]
 8003ca2:	466d      	mov	r5, sp
 8003ca4:	f106 0410 	add.w	r4, r6, #16
 8003ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cb8:	1d33      	adds	r3, r6, #4
 8003cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cbc:	6838      	ldr	r0, [r7, #0]
 8003cbe:	f001 ffd9 	bl	8005c74 <USB_DevInit>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e00d      	b.n	8003cf0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f003 f821 	bl	8006d30 <USB_DevDisconnect>

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cf8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_PCD_Start+0x1c>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e020      	b.n	8003d56 <HAL_PCD_Start+0x5e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d109      	bne.n	8003d38 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d005      	beq.n	8003d38 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 ff4d 	bl	8005bdc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f002 ffd1 	bl	8006cee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d5e:	b590      	push	{r4, r7, lr}
 8003d60:	b08d      	sub	sp, #52	; 0x34
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f003 f88f 	bl	8006e98 <USB_GetMode>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f040 839d 	bne.w	80044bc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f002 fff3 	bl	8006d72 <USB_ReadInterrupts>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8393 	beq.w	80044ba <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f002 ffea 	bl	8006d72 <USB_ReadInterrupts>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d107      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f002 0202 	and.w	r2, r2, #2
 8003db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f002 ffd8 	bl	8006d72 <USB_ReadInterrupts>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d161      	bne.n	8003e90 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0210 	bic.w	r2, r2, #16
 8003dda:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f003 020f 	and.w	r2, r3, #15
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	0c5b      	lsrs	r3, r3, #17
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d124      	bne.n	8003e52 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d035      	beq.n	8003e80 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	091b      	lsrs	r3, r3, #4
 8003e1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	6a38      	ldr	r0, [r7, #32]
 8003e28:	f002 fe3e 	bl	8006aa8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e38:	441a      	add	r2, r3
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e4a:	441a      	add	r2, r3
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	619a      	str	r2, [r3, #24]
 8003e50:	e016      	b.n	8003e80 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	0c5b      	lsrs	r3, r3, #17
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d110      	bne.n	8003e80 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e64:	2208      	movs	r2, #8
 8003e66:	4619      	mov	r1, r3
 8003e68:	6a38      	ldr	r0, [r7, #32]
 8003e6a:	f002 fe1d 	bl	8006aa8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e7a:	441a      	add	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0210 	orr.w	r2, r2, #16
 8003e8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f002 ff6c 	bl	8006d72 <USB_ReadInterrupts>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ea4:	d16e      	bne.n	8003f84 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f002 ff72 	bl	8006d98 <USB_ReadDevAllOutEpInterrupt>
 8003eb4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003eb6:	e062      	b.n	8003f7e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d057      	beq.n	8003f72 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 ff97 	bl	8006e00 <USB_ReadDevOutEPInterrupt>
 8003ed2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eea:	461a      	mov	r2, r3
 8003eec:	2301      	movs	r3, #1
 8003eee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fdb0 	bl	8004a58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2308      	movs	r3, #8
 8003f12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 feaa 	bl	8004c70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f32:	461a      	mov	r2, r3
 8003f34:	2310      	movs	r3, #16
 8003f36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2320      	movs	r3, #32
 8003f52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f70:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	3301      	adds	r3, #1
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d199      	bne.n	8003eb8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f002 fef2 	bl	8006d72 <USB_ReadInterrupts>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f98:	f040 80c0 	bne.w	800411c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f002 ff13 	bl	8006dcc <USB_ReadDevAllInEpInterrupt>
 8003fa6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003fac:	e0b2      	b.n	8004114 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80a7 	beq.w	8004108 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f002 ff39 	bl	8006e3c <USB_ReadDevInEPInterrupt>
 8003fca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d057      	beq.n	8004086 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	2201      	movs	r2, #1
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	69f9      	ldr	r1, [r7, #28]
 8003ff2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004006:	461a      	mov	r2, r3
 8004008:	2301      	movs	r3, #1
 800400a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d132      	bne.n	800407a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	3348      	adds	r3, #72	; 0x48
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4403      	add	r3, r0
 8004034:	3344      	adds	r3, #68	; 0x44
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4419      	add	r1, r3
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4403      	add	r3, r0
 8004048:	3348      	adds	r3, #72	; 0x48
 800404a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d113      	bne.n	800407a <HAL_PCD_IRQHandler+0x31c>
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	3350      	adds	r3, #80	; 0x50
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d108      	bne.n	800407a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004072:	461a      	mov	r2, r3
 8004074:	2101      	movs	r1, #1
 8004076:	f002 ff41 	bl	8006efc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	b2db      	uxtb	r3, r3
 800407e:	4619      	mov	r1, r3
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f004 ffa4 	bl	8008fce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409c:	461a      	mov	r2, r3
 800409e:	2308      	movs	r3, #8
 80040a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b8:	461a      	mov	r2, r3
 80040ba:	2310      	movs	r3, #16
 80040bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d4:	461a      	mov	r2, r3
 80040d6:	2340      	movs	r3, #64	; 0x40
 80040d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f0:	461a      	mov	r2, r3
 80040f2:	2302      	movs	r3, #2
 80040f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fc1b 	bl	800493e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	3301      	adds	r3, #1
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	f47f af49 	bne.w	8003fae <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f002 fe26 	bl	8006d72 <USB_ReadInterrupts>
 8004126:	4603      	mov	r3, r0
 8004128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800412c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004130:	d122      	bne.n	8004178 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800414c:	2b01      	cmp	r3, #1
 800414e:	d108      	bne.n	8004162 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004158:	2100      	movs	r1, #0
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fe26 	bl	8004dac <HAL_PCDEx_LPM_Callback>
 8004160:	e002      	b.n	8004168 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f004 ffa0 	bl	80090a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004176:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f002 fdf8 	bl	8006d72 <USB_ReadInterrupts>
 8004182:	4603      	mov	r3, r0
 8004184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418c:	d112      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d102      	bne.n	80041a4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f004 ff5c 	bl	800905c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80041b2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f002 fdda 	bl	8006d72 <USB_ReadInterrupts>
 80041be:	4603      	mov	r3, r0
 80041c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c8:	f040 80c7 	bne.w	800435a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2110      	movs	r1, #16
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fea8 	bl	8005f3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f0:	e056      	b.n	80042a0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fe:	461a      	mov	r2, r3
 8004200:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004204:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004220:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004224:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004240:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004244:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	461a      	mov	r2, r3
 8004254:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004258:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004274:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004278:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800428a:	0151      	lsls	r1, r2, #5
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	440a      	add	r2, r1
 8004290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004294:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004298:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	3301      	adds	r3, #1
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d3a3      	bcc.n	80041f2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80042bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d016      	beq.n	80042f4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d6:	f043 030b 	orr.w	r3, r3, #11
 80042da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ec:	f043 030b 	orr.w	r3, r3, #11
 80042f0:	6453      	str	r3, [r2, #68]	; 0x44
 80042f2:	e015      	b.n	8004320 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004306:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800430a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800431a:	f043 030b 	orr.w	r3, r3, #11
 800431e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800432e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004332:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004344:	461a      	mov	r2, r3
 8004346:	f002 fdd9 	bl	8006efc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f002 fd07 	bl	8006d72 <USB_ReadInterrupts>
 8004364:	4603      	mov	r3, r0
 8004366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800436a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436e:	d124      	bne.n	80043ba <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f002 fd9d 	bl	8006eb4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f001 fe3d 	bl	8005ffe <USB_GetDevSpeed>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681c      	ldr	r4, [r3, #0]
 8004390:	f001 f92c 	bl	80055ec <HAL_RCC_GetHCLKFreq>
 8004394:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	4620      	mov	r0, r4
 80043a0:	f001 fb7a 	bl	8005a98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f004 fe3a 	bl	800901e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80043b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f002 fcd7 	bl	8006d72 <USB_ReadInterrupts>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d10a      	bne.n	80043e4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f004 fe17 	bl	8009002 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f002 0208 	and.w	r2, r2, #8
 80043e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f002 fcc2 	bl	8006d72 <USB_ReadInterrupts>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f8:	d10f      	bne.n	800441a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	b2db      	uxtb	r3, r3
 8004402:	4619      	mov	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f004 fe6f 	bl	80090e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f002 fca7 	bl	8006d72 <USB_ReadInterrupts>
 8004424:	4603      	mov	r3, r0
 8004426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800442e:	d10f      	bne.n	8004450 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	b2db      	uxtb	r3, r3
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f004 fe42 	bl	80090c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800444e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f002 fc8c 	bl	8006d72 <USB_ReadInterrupts>
 800445a:	4603      	mov	r3, r0
 800445c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004464:	d10a      	bne.n	800447c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f004 fe50 	bl	800910c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800447a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f002 fc76 	bl	8006d72 <USB_ReadInterrupts>
 8004486:	4603      	mov	r3, r0
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b04      	cmp	r3, #4
 800448e:	d115      	bne.n	80044bc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f004 fe40 	bl	8009128 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6859      	ldr	r1, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	e000      	b.n	80044bc <HAL_PCD_IRQHandler+0x75e>
      return;
 80044ba:	bf00      	nop
    }
  }
}
 80044bc:	3734      	adds	r7, #52	; 0x34
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd90      	pop	{r4, r7, pc}

080044c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_PCD_SetAddress+0x1a>
 80044d8:	2302      	movs	r3, #2
 80044da:	e013      	b.n	8004504 <HAL_PCD_SetAddress+0x42>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	78fa      	ldrb	r2, [r7, #3]
 80044e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	4611      	mov	r1, r2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f002 fbd4 	bl	8006ca2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	4608      	mov	r0, r1
 8004516:	4611      	mov	r1, r2
 8004518:	461a      	mov	r2, r3
 800451a:	4603      	mov	r3, r0
 800451c:	70fb      	strb	r3, [r7, #3]
 800451e:	460b      	mov	r3, r1
 8004520:	803b      	strh	r3, [r7, #0]
 8004522:	4613      	mov	r3, r2
 8004524:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800452a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800452e:	2b00      	cmp	r3, #0
 8004530:	da0f      	bge.n	8004552 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	f003 020f 	and.w	r2, r3, #15
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	3338      	adds	r3, #56	; 0x38
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	3304      	adds	r3, #4
 8004548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	705a      	strb	r2, [r3, #1]
 8004550:	e00f      	b.n	8004572 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	f003 020f 	and.w	r2, r3, #15
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800457e:	883a      	ldrh	r2, [r7, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	78ba      	ldrb	r2, [r7, #2]
 8004588:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	785b      	ldrb	r3, [r3, #1]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d004      	beq.n	800459c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800459c:	78bb      	ldrb	r3, [r7, #2]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d102      	bne.n	80045a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_PCD_EP_Open+0xaa>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e00e      	b.n	80045d4 <HAL_PCD_EP_Open+0xc8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68f9      	ldr	r1, [r7, #12]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 fd3f 	bl	8006048 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80045d2:	7afb      	ldrb	r3, [r7, #11]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	da0f      	bge.n	8004610 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	f003 020f 	and.w	r2, r3, #15
 80045f6:	4613      	mov	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	3338      	adds	r3, #56	; 0x38
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	4413      	add	r3, r2
 8004604:	3304      	adds	r3, #4
 8004606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	705a      	strb	r2, [r3, #1]
 800460e:	e00f      	b.n	8004630 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	f003 020f 	and.w	r2, r3, #15
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	3304      	adds	r3, #4
 8004628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_PCD_EP_Close+0x6e>
 8004646:	2302      	movs	r3, #2
 8004648:	e00e      	b.n	8004668 <HAL_PCD_EP_Close+0x8c>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	4618      	mov	r0, r3
 800465a:	f001 fd7d 	bl	8006158 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	460b      	mov	r3, r1
 800467e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004680:	7afb      	ldrb	r3, [r7, #11]
 8004682:	f003 020f 	and.w	r2, r3, #15
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	3304      	adds	r3, #4
 8004698:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2200      	movs	r2, #0
 80046b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046b2:	7afb      	ldrb	r3, [r7, #11]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d102      	bne.n	80046cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046cc:	7afb      	ldrb	r3, [r7, #11]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	6979      	ldr	r1, [r7, #20]
 80046e4:	f002 f858 	bl	8006798 <USB_EP0StartXfer>
 80046e8:	e008      	b.n	80046fc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	6979      	ldr	r1, [r7, #20]
 80046f8:	f001 fe0a 	bl	8006310 <USB_EPStartXfer>
  }

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	460b      	mov	r3, r1
 8004710:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	f003 020f 	and.w	r2, r3, #15
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004728:	681b      	ldr	r3, [r3, #0]
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b086      	sub	sp, #24
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	460b      	mov	r3, r1
 8004744:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004746:	7afb      	ldrb	r3, [r7, #11]
 8004748:	f003 020f 	and.w	r2, r3, #15
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	3338      	adds	r3, #56	; 0x38
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	3304      	adds	r3, #4
 800475c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2200      	movs	r2, #0
 800476e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2201      	movs	r2, #1
 8004774:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004776:	7afb      	ldrb	r3, [r7, #11]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	b2da      	uxtb	r2, r3
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d102      	bne.n	8004790 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004790:	7afb      	ldrb	r3, [r7, #11]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	6979      	ldr	r1, [r7, #20]
 80047a8:	f001 fff6 	bl	8006798 <USB_EP0StartXfer>
 80047ac:	e008      	b.n	80047c0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	f001 fda8 	bl	8006310 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	f003 020f 	and.w	r2, r3, #15
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d901      	bls.n	80047e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e050      	b.n	800488a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	da0f      	bge.n	8004810 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	f003 020f 	and.w	r2, r3, #15
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	3338      	adds	r3, #56	; 0x38
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	4413      	add	r3, r2
 8004804:	3304      	adds	r3, #4
 8004806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	705a      	strb	r2, [r3, #1]
 800480e:	e00d      	b.n	800482c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	3304      	adds	r3, #4
 8004824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_PCD_EP_SetStall+0x82>
 8004848:	2302      	movs	r3, #2
 800484a:	e01e      	b.n	800488a <HAL_PCD_EP_SetStall+0xc0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68f9      	ldr	r1, [r7, #12]
 800485a:	4618      	mov	r0, r3
 800485c:	f002 f94d 	bl	8006afa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	b2d9      	uxtb	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800487a:	461a      	mov	r2, r3
 800487c:	f002 fb3e 	bl	8006efc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800489e:	78fb      	ldrb	r3, [r7, #3]
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d901      	bls.n	80048b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e042      	b.n	8004936 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	da0f      	bge.n	80048d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 020f 	and.w	r2, r3, #15
 80048be:	4613      	mov	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	3338      	adds	r3, #56	; 0x38
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4413      	add	r3, r2
 80048cc:	3304      	adds	r3, #4
 80048ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	705a      	strb	r2, [r3, #1]
 80048d6:	e00f      	b.n	80048f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	f003 020f 	and.w	r2, r3, #15
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	3304      	adds	r3, #4
 80048f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_PCD_EP_ClrStall+0x86>
 8004914:	2302      	movs	r3, #2
 8004916:	e00e      	b.n	8004936 <HAL_PCD_EP_ClrStall+0xa4>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68f9      	ldr	r1, [r7, #12]
 8004926:	4618      	mov	r0, r3
 8004928:	f002 f955 	bl	8006bd6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b08a      	sub	sp, #40	; 0x28
 8004942:	af02      	add	r7, sp, #8
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	3338      	adds	r3, #56	; 0x38
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	4413      	add	r3, r2
 8004962:	3304      	adds	r3, #4
 8004964:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	429a      	cmp	r2, r3
 8004970:	d901      	bls.n	8004976 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e06c      	b.n	8004a50 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	429a      	cmp	r2, r3
 800498a:	d902      	bls.n	8004992 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3303      	adds	r3, #3
 8004996:	089b      	lsrs	r3, r3, #2
 8004998:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800499a:	e02b      	b.n	80049f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d902      	bls.n	80049b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	3303      	adds	r3, #3
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	68d9      	ldr	r1, [r3, #12]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	4603      	mov	r3, r0
 80049d6:	6978      	ldr	r0, [r7, #20]
 80049d8:	f002 f831 	bl	8006a3e <USB_WritePacket>

    ep->xfer_buff  += len;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	441a      	add	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	699a      	ldr	r2, [r3, #24]
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	441a      	add	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d809      	bhi.n	8004a1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d203      	bcs.n	8004a1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1be      	bne.n	800499c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d811      	bhi.n	8004a4e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	2201      	movs	r2, #1
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	43db      	mvns	r3, r3
 8004a44:	6939      	ldr	r1, [r7, #16]
 8004a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	333c      	adds	r3, #60	; 0x3c
 8004a70:	3304      	adds	r3, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	f040 80a0 	bne.w	8004bd0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d015      	beq.n	8004ac6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a72      	ldr	r2, [pc, #456]	; (8004c68 <PCD_EP_OutXfrComplete_int+0x210>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	f240 80dd 	bls.w	8004c5e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 80d7 	beq.w	8004c5e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abc:	461a      	mov	r2, r3
 8004abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ac2:	6093      	str	r3, [r2, #8]
 8004ac4:	e0cb      	b.n	8004c5e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004adc:	461a      	mov	r2, r3
 8004ade:	2320      	movs	r3, #32
 8004ae0:	6093      	str	r3, [r2, #8]
 8004ae2:	e0bc      	b.n	8004c5e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 80b7 	bne.w	8004c5e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4a5d      	ldr	r2, [pc, #372]	; (8004c68 <PCD_EP_OutXfrComplete_int+0x210>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d90f      	bls.n	8004b18 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b14:	6093      	str	r3, [r2, #8]
 8004b16:	e0a2      	b.n	8004c5e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b2a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	0159      	lsls	r1, r3, #5
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	440b      	add	r3, r1
 8004b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004b3e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4403      	add	r3, r0
 8004b4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004b52:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b66:	6819      	ldr	r1, [r3, #0]
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4403      	add	r3, r0
 8004b76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4419      	add	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	4613      	mov	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4403      	add	r3, r0
 8004b8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b90:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d114      	bne.n	8004bc2 <PCD_EP_OutXfrComplete_int+0x16a>
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d108      	bne.n	8004bc2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	f002 f99d 	bl	8006efc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f004 f9e5 	bl	8008f98 <HAL_PCD_DataOutStageCallback>
 8004bce:	e046      	b.n	8004c5e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a26      	ldr	r2, [pc, #152]	; (8004c6c <PCD_EP_OutXfrComplete_int+0x214>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d124      	bne.n	8004c22 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf4:	6093      	str	r3, [r2, #8]
 8004bf6:	e032      	b.n	8004c5e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d008      	beq.n	8004c14 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	461a      	mov	r2, r3
 8004c10:	2320      	movs	r3, #32
 8004c12:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f004 f9bc 	bl	8008f98 <HAL_PCD_DataOutStageCallback>
 8004c20:	e01d      	b.n	8004c5e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d114      	bne.n	8004c52 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d108      	bne.n	8004c52 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f002 f955 	bl	8006efc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	4619      	mov	r1, r3
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f004 f99d 	bl	8008f98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	4f54300a 	.word	0x4f54300a
 8004c6c:	4f54310a 	.word	0x4f54310a

08004c70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	333c      	adds	r3, #60	; 0x3c
 8004c88:	3304      	adds	r3, #4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d90e      	bls.n	8004cc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f004 f955 	bl	8008f74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d90c      	bls.n	8004cec <PCD_EP_OutSetupPacket_int+0x7c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d108      	bne.n	8004cec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	f002 f908 	bl	8006efc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	4f54300a 	.word	0x4f54300a

08004cfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d107      	bne.n	8004d2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004d1a:	883b      	ldrh	r3, [r7, #0]
 8004d1c:	0419      	lsls	r1, r3, #16
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
 8004d28:	e028      	b.n	8004d7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	0c1b      	lsrs	r3, r3, #16
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	73fb      	strb	r3, [r7, #15]
 8004d3c:	e00d      	b.n	8004d5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	3340      	adds	r3, #64	; 0x40
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4413      	add	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	3301      	adds	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d3ec      	bcc.n	8004d3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d64:	883b      	ldrh	r3, [r7, #0]
 8004d66:	0418      	lsls	r0, r3, #16
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6819      	ldr	r1, [r3, #0]
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	4302      	orrs	r2, r0
 8004d74:	3340      	adds	r3, #64	; 0x40
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	887a      	ldrh	r2, [r7, #2]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e264      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d075      	beq.n	8004ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004de2:	4ba3      	ldr	r3, [pc, #652]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d00c      	beq.n	8004e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dee:	4ba0      	ldr	r3, [pc, #640]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d112      	bne.n	8004e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dfa:	4b9d      	ldr	r3, [pc, #628]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e06:	d10b      	bne.n	8004e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e08:	4b99      	ldr	r3, [pc, #612]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d05b      	beq.n	8004ecc <HAL_RCC_OscConfig+0x108>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d157      	bne.n	8004ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e23f      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e28:	d106      	bne.n	8004e38 <HAL_RCC_OscConfig+0x74>
 8004e2a:	4b91      	ldr	r3, [pc, #580]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a90      	ldr	r2, [pc, #576]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e01d      	b.n	8004e74 <HAL_RCC_OscConfig+0xb0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x98>
 8004e42:	4b8b      	ldr	r3, [pc, #556]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a8a      	ldr	r2, [pc, #552]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b88      	ldr	r3, [pc, #544]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a87      	ldr	r2, [pc, #540]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e00b      	b.n	8004e74 <HAL_RCC_OscConfig+0xb0>
 8004e5c:	4b84      	ldr	r3, [pc, #528]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a83      	ldr	r2, [pc, #524]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	4b81      	ldr	r3, [pc, #516]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a80      	ldr	r2, [pc, #512]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d013      	beq.n	8004ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fc fca2 	bl	80017c4 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e84:	f7fc fc9e 	bl	80017c4 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	; 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e204      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e96:	4b76      	ldr	r3, [pc, #472]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0xc0>
 8004ea2:	e014      	b.n	8004ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fc fc8e 	bl	80017c4 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eac:	f7fc fc8a 	bl	80017c4 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	; 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e1f0      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ebe:	4b6c      	ldr	r3, [pc, #432]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0xe8>
 8004eca:	e000      	b.n	8004ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d063      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eda:	4b65      	ldr	r3, [pc, #404]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00b      	beq.n	8004efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ee6:	4b62      	ldr	r3, [pc, #392]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d11c      	bne.n	8004f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ef2:	4b5f      	ldr	r3, [pc, #380]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d116      	bne.n	8004f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efe:	4b5c      	ldr	r3, [pc, #368]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_RCC_OscConfig+0x152>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d001      	beq.n	8004f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e1c4      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f16:	4b56      	ldr	r3, [pc, #344]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4952      	ldr	r1, [pc, #328]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2a:	e03a      	b.n	8004fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d020      	beq.n	8004f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f34:	4b4f      	ldr	r3, [pc, #316]	; (8005074 <HAL_RCC_OscConfig+0x2b0>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3a:	f7fc fc43 	bl	80017c4 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f42:	f7fc fc3f 	bl	80017c4 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e1a5      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f54:	4b46      	ldr	r3, [pc, #280]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f60:	4b43      	ldr	r3, [pc, #268]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4940      	ldr	r1, [pc, #256]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]
 8004f74:	e015      	b.n	8004fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f76:	4b3f      	ldr	r3, [pc, #252]	; (8005074 <HAL_RCC_OscConfig+0x2b0>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7fc fc22 	bl	80017c4 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f84:	f7fc fc1e 	bl	80017c4 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e184      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f96:	4b36      	ldr	r3, [pc, #216]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d030      	beq.n	8005010 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d016      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb6:	4b30      	ldr	r3, [pc, #192]	; (8005078 <HAL_RCC_OscConfig+0x2b4>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fc fc02 	bl	80017c4 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fc4:	f7fc fbfe 	bl	80017c4 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e164      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x200>
 8004fe2:	e015      	b.n	8005010 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe4:	4b24      	ldr	r3, [pc, #144]	; (8005078 <HAL_RCC_OscConfig+0x2b4>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fea:	f7fc fbeb 	bl	80017c4 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff2:	f7fc fbe7 	bl	80017c4 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e14d      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005004:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8005006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f0      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 80a0 	beq.w	800515e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501e:	2300      	movs	r3, #0
 8005020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005022:	4b13      	ldr	r3, [pc, #76]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10f      	bne.n	800504e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	4a0e      	ldr	r2, [pc, #56]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8005038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503c:	6413      	str	r3, [r2, #64]	; 0x40
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005046:	60bb      	str	r3, [r7, #8]
 8005048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800504a:	2301      	movs	r3, #1
 800504c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_RCC_OscConfig+0x2b8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d121      	bne.n	800509e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800505a:	4b08      	ldr	r3, [pc, #32]	; (800507c <HAL_RCC_OscConfig+0x2b8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a07      	ldr	r2, [pc, #28]	; (800507c <HAL_RCC_OscConfig+0x2b8>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005066:	f7fc fbad 	bl	80017c4 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506c:	e011      	b.n	8005092 <HAL_RCC_OscConfig+0x2ce>
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	42470000 	.word	0x42470000
 8005078:	42470e80 	.word	0x42470e80
 800507c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005080:	f7fc fba0 	bl	80017c4 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e106      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005092:	4b85      	ldr	r3, [pc, #532]	; (80052a8 <HAL_RCC_OscConfig+0x4e4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d106      	bne.n	80050b4 <HAL_RCC_OscConfig+0x2f0>
 80050a6:	4b81      	ldr	r3, [pc, #516]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	4a80      	ldr	r2, [pc, #512]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6713      	str	r3, [r2, #112]	; 0x70
 80050b2:	e01c      	b.n	80050ee <HAL_RCC_OscConfig+0x32a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b05      	cmp	r3, #5
 80050ba:	d10c      	bne.n	80050d6 <HAL_RCC_OscConfig+0x312>
 80050bc:	4b7b      	ldr	r3, [pc, #492]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	4a7a      	ldr	r2, [pc, #488]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050c2:	f043 0304 	orr.w	r3, r3, #4
 80050c6:	6713      	str	r3, [r2, #112]	; 0x70
 80050c8:	4b78      	ldr	r3, [pc, #480]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050cc:	4a77      	ldr	r2, [pc, #476]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6713      	str	r3, [r2, #112]	; 0x70
 80050d4:	e00b      	b.n	80050ee <HAL_RCC_OscConfig+0x32a>
 80050d6:	4b75      	ldr	r3, [pc, #468]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	4a74      	ldr	r2, [pc, #464]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
 80050e2:	4b72      	ldr	r3, [pc, #456]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	4a71      	ldr	r2, [pc, #452]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050e8:	f023 0304 	bic.w	r3, r3, #4
 80050ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d015      	beq.n	8005122 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f6:	f7fc fb65 	bl	80017c4 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fc:	e00a      	b.n	8005114 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fc fb61 	bl	80017c4 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e0c5      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005114:	4b65      	ldr	r3, [pc, #404]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ee      	beq.n	80050fe <HAL_RCC_OscConfig+0x33a>
 8005120:	e014      	b.n	800514c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005122:	f7fc fb4f 	bl	80017c4 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005128:	e00a      	b.n	8005140 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512a:	f7fc fb4b 	bl	80017c4 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f241 3288 	movw	r2, #5000	; 0x1388
 8005138:	4293      	cmp	r3, r2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e0af      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005140:	4b5a      	ldr	r3, [pc, #360]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1ee      	bne.n	800512a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005152:	4b56      	ldr	r3, [pc, #344]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	4a55      	ldr	r2, [pc, #340]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 8005158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 809b 	beq.w	800529e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005168:	4b50      	ldr	r3, [pc, #320]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 030c 	and.w	r3, r3, #12
 8005170:	2b08      	cmp	r3, #8
 8005172:	d05c      	beq.n	800522e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d141      	bne.n	8005200 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517c:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <HAL_RCC_OscConfig+0x4ec>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005182:	f7fc fb1f 	bl	80017c4 <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518a:	f7fc fb1b 	bl	80017c4 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e081      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519c:	4b43      	ldr	r3, [pc, #268]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f0      	bne.n	800518a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	019b      	lsls	r3, r3, #6
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	085b      	lsrs	r3, r3, #1
 80051c0:	3b01      	subs	r3, #1
 80051c2:	041b      	lsls	r3, r3, #16
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	061b      	lsls	r3, r3, #24
 80051cc:	4937      	ldr	r1, [pc, #220]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_RCC_OscConfig+0x4ec>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fc faf4 	bl	80017c4 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fc faf0 	bl	80017c4 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e056      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f2:	4b2e      	ldr	r3, [pc, #184]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x41c>
 80051fe:	e04e      	b.n	800529e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005200:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <HAL_RCC_OscConfig+0x4ec>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005206:	f7fc fadd 	bl	80017c4 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520e:	f7fc fad9 	bl	80017c4 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e03f      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005220:	4b22      	ldr	r3, [pc, #136]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <HAL_RCC_OscConfig+0x44a>
 800522c:	e037      	b.n	800529e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e032      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800523a:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d028      	beq.n	800529a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d121      	bne.n	800529a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d11a      	bne.n	800529a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800526a:	4013      	ands	r3, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005270:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005272:	4293      	cmp	r3, r2
 8005274:	d111      	bne.n	800529a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	3b01      	subs	r3, #1
 8005284:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005286:	429a      	cmp	r2, r3
 8005288:	d107      	bne.n	800529a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d001      	beq.n	800529e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40007000 	.word	0x40007000
 80052ac:	40023800 	.word	0x40023800
 80052b0:	42470060 	.word	0x42470060

080052b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0cc      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052c8:	4b68      	ldr	r3, [pc, #416]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d90c      	bls.n	80052f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d6:	4b65      	ldr	r3, [pc, #404]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052de:	4b63      	ldr	r3, [pc, #396]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d001      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0b8      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d020      	beq.n	800533e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005308:	4b59      	ldr	r3, [pc, #356]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	4a58      	ldr	r2, [pc, #352]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005320:	4b53      	ldr	r3, [pc, #332]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	4a52      	ldr	r2, [pc, #328]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800532a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800532c:	4b50      	ldr	r3, [pc, #320]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	494d      	ldr	r1, [pc, #308]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	4313      	orrs	r3, r2
 800533c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d044      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d107      	bne.n	8005362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005352:	4b47      	ldr	r3, [pc, #284]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d119      	bne.n	8005392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e07f      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d003      	beq.n	8005372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800536e:	2b03      	cmp	r3, #3
 8005370:	d107      	bne.n	8005382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005372:	4b3f      	ldr	r3, [pc, #252]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d109      	bne.n	8005392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e06f      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005382:	4b3b      	ldr	r3, [pc, #236]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e067      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005392:	4b37      	ldr	r3, [pc, #220]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f023 0203 	bic.w	r2, r3, #3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	4934      	ldr	r1, [pc, #208]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053a4:	f7fc fa0e 	bl	80017c4 <HAL_GetTick>
 80053a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053aa:	e00a      	b.n	80053c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ac:	f7fc fa0a 	bl	80017c4 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e04f      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c2:	4b2b      	ldr	r3, [pc, #172]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 020c 	and.w	r2, r3, #12
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d1eb      	bne.n	80053ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053d4:	4b25      	ldr	r3, [pc, #148]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d20c      	bcs.n	80053fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e2:	4b22      	ldr	r3, [pc, #136]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ea:	4b20      	ldr	r3, [pc, #128]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e032      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005408:	4b19      	ldr	r3, [pc, #100]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4916      	ldr	r1, [pc, #88]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005426:	4b12      	ldr	r3, [pc, #72]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	490e      	ldr	r1, [pc, #56]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005436:	4313      	orrs	r3, r2
 8005438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800543a:	f000 f821 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 800543e:	4602      	mov	r2, r0
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	490a      	ldr	r1, [pc, #40]	; (8005474 <HAL_RCC_ClockConfig+0x1c0>)
 800544c:	5ccb      	ldrb	r3, [r1, r3]
 800544e:	fa22 f303 	lsr.w	r3, r2, r3
 8005452:	4a09      	ldr	r2, [pc, #36]	; (8005478 <HAL_RCC_ClockConfig+0x1c4>)
 8005454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005456:	4b09      	ldr	r3, [pc, #36]	; (800547c <HAL_RCC_ClockConfig+0x1c8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f7fc f96e 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40023c00 	.word	0x40023c00
 8005470:	40023800 	.word	0x40023800
 8005474:	08009e00 	.word	0x08009e00
 8005478:	2000009c 	.word	0x2000009c
 800547c:	200000a0 	.word	0x200000a0

08005480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005480:	b5b0      	push	{r4, r5, r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005486:	2100      	movs	r1, #0
 8005488:	6079      	str	r1, [r7, #4]
 800548a:	2100      	movs	r1, #0
 800548c:	60f9      	str	r1, [r7, #12]
 800548e:	2100      	movs	r1, #0
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005492:	2100      	movs	r1, #0
 8005494:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005496:	4952      	ldr	r1, [pc, #328]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005498:	6889      	ldr	r1, [r1, #8]
 800549a:	f001 010c 	and.w	r1, r1, #12
 800549e:	2908      	cmp	r1, #8
 80054a0:	d00d      	beq.n	80054be <HAL_RCC_GetSysClockFreq+0x3e>
 80054a2:	2908      	cmp	r1, #8
 80054a4:	f200 8094 	bhi.w	80055d0 <HAL_RCC_GetSysClockFreq+0x150>
 80054a8:	2900      	cmp	r1, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_RCC_GetSysClockFreq+0x32>
 80054ac:	2904      	cmp	r1, #4
 80054ae:	d003      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0x38>
 80054b0:	e08e      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054b2:	4b4c      	ldr	r3, [pc, #304]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80054b4:	60bb      	str	r3, [r7, #8]
       break;
 80054b6:	e08e      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054b8:	4b4b      	ldr	r3, [pc, #300]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80054ba:	60bb      	str	r3, [r7, #8]
      break;
 80054bc:	e08b      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054be:	4948      	ldr	r1, [pc, #288]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80054c0:	6849      	ldr	r1, [r1, #4]
 80054c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80054c6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054c8:	4945      	ldr	r1, [pc, #276]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80054ca:	6849      	ldr	r1, [r1, #4]
 80054cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80054d0:	2900      	cmp	r1, #0
 80054d2:	d024      	beq.n	800551e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d4:	4942      	ldr	r1, [pc, #264]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80054d6:	6849      	ldr	r1, [r1, #4]
 80054d8:	0989      	lsrs	r1, r1, #6
 80054da:	4608      	mov	r0, r1
 80054dc:	f04f 0100 	mov.w	r1, #0
 80054e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80054e4:	f04f 0500 	mov.w	r5, #0
 80054e8:	ea00 0204 	and.w	r2, r0, r4
 80054ec:	ea01 0305 	and.w	r3, r1, r5
 80054f0:	493d      	ldr	r1, [pc, #244]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80054f2:	fb01 f003 	mul.w	r0, r1, r3
 80054f6:	2100      	movs	r1, #0
 80054f8:	fb01 f102 	mul.w	r1, r1, r2
 80054fc:	1844      	adds	r4, r0, r1
 80054fe:	493a      	ldr	r1, [pc, #232]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005500:	fba2 0101 	umull	r0, r1, r2, r1
 8005504:	1863      	adds	r3, r4, r1
 8005506:	4619      	mov	r1, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	461a      	mov	r2, r3
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	f7fb fa4c 	bl	80009ac <__aeabi_uldivmod>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4613      	mov	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	e04a      	b.n	80055b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551e:	4b30      	ldr	r3, [pc, #192]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	099b      	lsrs	r3, r3, #6
 8005524:	461a      	mov	r2, r3
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800552e:	f04f 0100 	mov.w	r1, #0
 8005532:	ea02 0400 	and.w	r4, r2, r0
 8005536:	ea03 0501 	and.w	r5, r3, r1
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	014b      	lsls	r3, r1, #5
 8005548:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800554c:	0142      	lsls	r2, r0, #5
 800554e:	4610      	mov	r0, r2
 8005550:	4619      	mov	r1, r3
 8005552:	1b00      	subs	r0, r0, r4
 8005554:	eb61 0105 	sbc.w	r1, r1, r5
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	018b      	lsls	r3, r1, #6
 8005562:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005566:	0182      	lsls	r2, r0, #6
 8005568:	1a12      	subs	r2, r2, r0
 800556a:	eb63 0301 	sbc.w	r3, r3, r1
 800556e:	f04f 0000 	mov.w	r0, #0
 8005572:	f04f 0100 	mov.w	r1, #0
 8005576:	00d9      	lsls	r1, r3, #3
 8005578:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800557c:	00d0      	lsls	r0, r2, #3
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	1912      	adds	r2, r2, r4
 8005584:	eb45 0303 	adc.w	r3, r5, r3
 8005588:	f04f 0000 	mov.w	r0, #0
 800558c:	f04f 0100 	mov.w	r1, #0
 8005590:	0299      	lsls	r1, r3, #10
 8005592:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005596:	0290      	lsls	r0, r2, #10
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4610      	mov	r0, r2
 800559e:	4619      	mov	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	f7fb fa00 	bl	80009ac <__aeabi_uldivmod>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4613      	mov	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055b4:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	0c1b      	lsrs	r3, r3, #16
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	3301      	adds	r3, #1
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	60bb      	str	r3, [r7, #8]
      break;
 80055ce:	e002      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80055d2:	60bb      	str	r3, [r7, #8]
      break;
 80055d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055d6:	68bb      	ldr	r3, [r7, #8]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bdb0      	pop	{r4, r5, r7, pc}
 80055e0:	40023800 	.word	0x40023800
 80055e4:	00f42400 	.word	0x00f42400
 80055e8:	017d7840 	.word	0x017d7840

080055ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f0:	4b03      	ldr	r3, [pc, #12]	; (8005600 <HAL_RCC_GetHCLKFreq+0x14>)
 80055f2:	681b      	ldr	r3, [r3, #0]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	2000009c 	.word	0x2000009c

08005604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005608:	f7ff fff0 	bl	80055ec <HAL_RCC_GetHCLKFreq>
 800560c:	4602      	mov	r2, r0
 800560e:	4b05      	ldr	r3, [pc, #20]	; (8005624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	0a9b      	lsrs	r3, r3, #10
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	4903      	ldr	r1, [pc, #12]	; (8005628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800561a:	5ccb      	ldrb	r3, [r1, r3]
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005620:	4618      	mov	r0, r3
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40023800 	.word	0x40023800
 8005628:	08009e10 	.word	0x08009e10

0800562c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005650:	2b00      	cmp	r3, #0
 8005652:	d038      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005654:	4b68      	ldr	r3, [pc, #416]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800565a:	f7fc f8b3 	bl	80017c4 <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005662:	f7fc f8af 	bl	80017c4 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e0bd      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005674:	4b61      	ldr	r3, [pc, #388]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f0      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	019b      	lsls	r3, r3, #6
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	071b      	lsls	r3, r3, #28
 8005692:	495a      	ldr	r1, [pc, #360]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800569a:	4b57      	ldr	r3, [pc, #348]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800569c:	2201      	movs	r2, #1
 800569e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056a0:	f7fc f890 	bl	80017c4 <HAL_GetTick>
 80056a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056a8:	f7fc f88c 	bl	80017c4 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e09a      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056ba:	4b50      	ldr	r3, [pc, #320]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8083 	beq.w	80057da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	4b48      	ldr	r3, [pc, #288]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	4a47      	ldr	r2, [pc, #284]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e2:	6413      	str	r3, [r2, #64]	; 0x40
 80056e4:	4b45      	ldr	r3, [pc, #276]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056f0:	4b43      	ldr	r3, [pc, #268]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a42      	ldr	r2, [pc, #264]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056fc:	f7fc f862 	bl	80017c4 <HAL_GetTick>
 8005700:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005702:	e008      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005704:	f7fc f85e 	bl	80017c4 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e06c      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005716:	4b3a      	ldr	r3, [pc, #232]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0f0      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005722:	4b36      	ldr	r3, [pc, #216]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d02f      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	429a      	cmp	r2, r3
 800573e:	d028      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005740:	4b2e      	ldr	r3, [pc, #184]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005748:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800574a:	4b2e      	ldr	r3, [pc, #184]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800574c:	2201      	movs	r2, #1
 800574e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005750:	4b2c      	ldr	r3, [pc, #176]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005756:	4a29      	ldr	r2, [pc, #164]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800575c:	4b27      	ldr	r3, [pc, #156]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b01      	cmp	r3, #1
 8005766:	d114      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005768:	f7fc f82c 	bl	80017c4 <HAL_GetTick>
 800576c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576e:	e00a      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005770:	f7fc f828 	bl	80017c4 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	; 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e034      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005786:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0ee      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579e:	d10d      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80057a0:	4b16      	ldr	r3, [pc, #88]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b4:	4911      	ldr	r1, [pc, #68]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	608b      	str	r3, [r1, #8]
 80057ba:	e005      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80057bc:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	4a0e      	ldr	r2, [pc, #56]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057c6:	6093      	str	r3, [r2, #8]
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d4:	4909      	ldr	r1, [pc, #36]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	7d1a      	ldrb	r2, [r3, #20]
 80057ea:	4b07      	ldr	r3, [pc, #28]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80057ec:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	42470068 	.word	0x42470068
 80057fc:	40023800 	.word	0x40023800
 8005800:	40007000 	.word	0x40007000
 8005804:	42470e40 	.word	0x42470e40
 8005808:	424711e0 	.word	0x424711e0

0800580c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e083      	b.n	8005926 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	7f5b      	ldrb	r3, [r3, #29]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d105      	bne.n	8005834 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fb fe9c 	bl	800156c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	22ca      	movs	r2, #202	; 0xca
 8005840:	625a      	str	r2, [r3, #36]	; 0x24
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2253      	movs	r2, #83	; 0x53
 8005848:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f897 	bl	800597e <RTC_EnterInitMode>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	22ff      	movs	r2, #255	; 0xff
 800585c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2204      	movs	r2, #4
 8005862:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e05e      	b.n	8005926 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6899      	ldr	r1, [r3, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68d2      	ldr	r2, [r2, #12]
 80058a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6919      	ldr	r1, [r3, #16]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	041a      	lsls	r2, r3, #16
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058c6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10e      	bne.n	80058f4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f829 	bl	800592e <HAL_RTC_WaitForSynchro>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	22ff      	movs	r2, #255	; 0xff
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2204      	movs	r2, #4
 80058ee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e018      	b.n	8005926 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005902:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	22ff      	movs	r2, #255	; 0xff
 800591c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005924:	2300      	movs	r3, #0
  }
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005948:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800594a:	f7fb ff3b 	bl	80017c4 <HAL_GetTick>
 800594e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005950:	e009      	b.n	8005966 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005952:	f7fb ff37 	bl	80017c4 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005960:	d901      	bls.n	8005966 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e007      	b.n	8005976 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0ee      	beq.n	8005952 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d119      	bne.n	80059cc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f04f 32ff 	mov.w	r2, #4294967295
 80059a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059a2:	f7fb ff0f 	bl	80017c4 <HAL_GetTick>
 80059a6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059a8:	e009      	b.n	80059be <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80059aa:	f7fb ff0b 	bl	80017c4 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059b8:	d901      	bls.n	80059be <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e007      	b.n	80059ce <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ee      	beq.n	80059aa <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059d6:	b084      	sub	sp, #16
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	f107 001c 	add.w	r0, r7, #28
 80059e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d122      	bne.n	8005a34 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d105      	bne.n	8005a28 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 fac5 	bl	8006fb8 <USB_CoreReset>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	73fb      	strb	r3, [r7, #15]
 8005a32:	e01a      	b.n	8005a6a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 fab9 	bl	8006fb8 <USB_CoreReset>
 8005a46:	4603      	mov	r3, r0
 8005a48:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38
 8005a5c:	e005      	b.n	8005a6a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d10b      	bne.n	8005a88 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f043 0206 	orr.w	r2, r3, #6
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f043 0220 	orr.w	r2, r3, #32
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a94:	b004      	add	sp, #16
 8005a96:	4770      	bx	lr

08005a98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d165      	bne.n	8005b78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4a41      	ldr	r2, [pc, #260]	; (8005bb4 <USB_SetTurnaroundTime+0x11c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d906      	bls.n	8005ac2 <USB_SetTurnaroundTime+0x2a>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4a40      	ldr	r2, [pc, #256]	; (8005bb8 <USB_SetTurnaroundTime+0x120>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d202      	bcs.n	8005ac2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005abc:	230f      	movs	r3, #15
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e062      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4a3c      	ldr	r2, [pc, #240]	; (8005bb8 <USB_SetTurnaroundTime+0x120>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d306      	bcc.n	8005ad8 <USB_SetTurnaroundTime+0x40>
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4a3b      	ldr	r2, [pc, #236]	; (8005bbc <USB_SetTurnaroundTime+0x124>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d202      	bcs.n	8005ad8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ad2:	230e      	movs	r3, #14
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e057      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4a38      	ldr	r2, [pc, #224]	; (8005bbc <USB_SetTurnaroundTime+0x124>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d306      	bcc.n	8005aee <USB_SetTurnaroundTime+0x56>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4a37      	ldr	r2, [pc, #220]	; (8005bc0 <USB_SetTurnaroundTime+0x128>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d202      	bcs.n	8005aee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ae8:	230d      	movs	r3, #13
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e04c      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4a33      	ldr	r2, [pc, #204]	; (8005bc0 <USB_SetTurnaroundTime+0x128>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d306      	bcc.n	8005b04 <USB_SetTurnaroundTime+0x6c>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4a32      	ldr	r2, [pc, #200]	; (8005bc4 <USB_SetTurnaroundTime+0x12c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d802      	bhi.n	8005b04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005afe:	230c      	movs	r3, #12
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e041      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <USB_SetTurnaroundTime+0x12c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d906      	bls.n	8005b1a <USB_SetTurnaroundTime+0x82>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4a2e      	ldr	r2, [pc, #184]	; (8005bc8 <USB_SetTurnaroundTime+0x130>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d802      	bhi.n	8005b1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b14:	230b      	movs	r3, #11
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e036      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <USB_SetTurnaroundTime+0x130>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d906      	bls.n	8005b30 <USB_SetTurnaroundTime+0x98>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	4a29      	ldr	r2, [pc, #164]	; (8005bcc <USB_SetTurnaroundTime+0x134>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d802      	bhi.n	8005b30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b2a:	230a      	movs	r3, #10
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	e02b      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4a26      	ldr	r2, [pc, #152]	; (8005bcc <USB_SetTurnaroundTime+0x134>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d906      	bls.n	8005b46 <USB_SetTurnaroundTime+0xae>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4a25      	ldr	r2, [pc, #148]	; (8005bd0 <USB_SetTurnaroundTime+0x138>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d202      	bcs.n	8005b46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b40:	2309      	movs	r3, #9
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e020      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <USB_SetTurnaroundTime+0x138>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d306      	bcc.n	8005b5c <USB_SetTurnaroundTime+0xc4>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <USB_SetTurnaroundTime+0x13c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d802      	bhi.n	8005b5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b56:	2308      	movs	r3, #8
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	e015      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4a1d      	ldr	r2, [pc, #116]	; (8005bd4 <USB_SetTurnaroundTime+0x13c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d906      	bls.n	8005b72 <USB_SetTurnaroundTime+0xda>
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4a1c      	ldr	r2, [pc, #112]	; (8005bd8 <USB_SetTurnaroundTime+0x140>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d202      	bcs.n	8005b72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b6c:	2307      	movs	r3, #7
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e00a      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b72:	2306      	movs	r3, #6
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	e007      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b7e:	2309      	movs	r3, #9
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	e001      	b.n	8005b88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b84:	2309      	movs	r3, #9
 8005b86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	029b      	lsls	r3, r3, #10
 8005b9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	00d8acbf 	.word	0x00d8acbf
 8005bb8:	00e4e1c0 	.word	0x00e4e1c0
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	01067380 	.word	0x01067380
 8005bc4:	011a499f 	.word	0x011a499f
 8005bc8:	01312cff 	.word	0x01312cff
 8005bcc:	014ca43f 	.word	0x014ca43f
 8005bd0:	016e3600 	.word	0x016e3600
 8005bd4:	01a6ab1f 	.word	0x01a6ab1f
 8005bd8:	01e84800 	.word	0x01e84800

08005bdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f023 0201 	bic.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d106      	bne.n	8005c4c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	e00b      	b.n	8005c64 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60da      	str	r2, [r3, #12]
 8005c5e:	e001      	b.n	8005c64 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e003      	b.n	8005c6c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c64:	2032      	movs	r0, #50	; 0x32
 8005c66:	f7fb fdb9 	bl	80017dc <HAL_Delay>

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c74:	b084      	sub	sp, #16
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b086      	sub	sp, #24
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e009      	b.n	8005ca8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	3340      	adds	r3, #64	; 0x40
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b0e      	cmp	r3, #14
 8005cac:	d9f2      	bls.n	8005c94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d11c      	bne.n	8005cee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc2:	f043 0302 	orr.w	r3, r3, #2
 8005cc6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38
 8005cec:	e00b      	b.n	8005d06 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d18:	4619      	mov	r1, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d20:	461a      	mov	r2, r3
 8005d22:	680b      	ldr	r3, [r1, #0]
 8005d24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d10c      	bne.n	8005d46 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d32:	2100      	movs	r1, #0
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f949 	bl	8005fcc <USB_SetDevSpeed>
 8005d3a:	e008      	b.n	8005d4e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f944 	bl	8005fcc <USB_SetDevSpeed>
 8005d44:	e003      	b.n	8005d4e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d46:	2103      	movs	r1, #3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f93f 	bl	8005fcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d4e:	2110      	movs	r1, #16
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f8f3 	bl	8005f3c <USB_FlushTxFifo>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f911 	bl	8005f88 <USB_FlushRxFifo>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	461a      	mov	r2, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	461a      	mov	r2, r3
 8005d84:	2300      	movs	r3, #0
 8005d86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2300      	movs	r3, #0
 8005d92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	e043      	b.n	8005e22 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db0:	d118      	bne.n	8005de4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	e013      	b.n	8005df6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e008      	b.n	8005df6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	461a      	mov	r2, r3
 8005df2:	2300      	movs	r3, #0
 8005df4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	461a      	mov	r2, r3
 8005e04:	2300      	movs	r3, #0
 8005e06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	461a      	mov	r2, r3
 8005e16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d3b7      	bcc.n	8005d9a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	e043      	b.n	8005eb8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e46:	d118      	bne.n	8005e7a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e013      	b.n	8005e8c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	461a      	mov	r2, r3
 8005e72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	e008      	b.n	8005e8c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	461a      	mov	r2, r3
 8005e88:	2300      	movs	r3, #0
 8005e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e98:	461a      	mov	r2, r3
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	613b      	str	r3, [r7, #16]
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d3b7      	bcc.n	8005e30 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ee0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d105      	bne.n	8005ef4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f043 0210 	orr.w	r2, r3, #16
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <USB_DevInit+0x2c4>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f043 0208 	orr.w	r2, r3, #8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d107      	bne.n	8005f28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f20:	f043 0304 	orr.w	r3, r3, #4
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f34:	b004      	add	sp, #16
 8005f36:	4770      	bx	lr
 8005f38:	803c3800 	.word	0x803c3800

08005f3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	019b      	lsls	r3, r3, #6
 8005f4e:	f043 0220 	orr.w	r2, r3, #32
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <USB_FlushTxFifo+0x48>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d901      	bls.n	8005f68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e006      	b.n	8005f76 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d0f0      	beq.n	8005f56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	00030d40 	.word	0x00030d40

08005f88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2210      	movs	r2, #16
 8005f98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <USB_FlushRxFifo+0x40>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d901      	bls.n	8005fac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e006      	b.n	8005fba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d0f0      	beq.n	8005f9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	00030d40 	.word	0x00030d40

08005fcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	68f9      	ldr	r1, [r7, #12]
 8005fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fec:	4313      	orrs	r3, r2
 8005fee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b087      	sub	sp, #28
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 0306 	and.w	r3, r3, #6
 8006016:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d102      	bne.n	8006024 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800601e:	2300      	movs	r3, #0
 8006020:	75fb      	strb	r3, [r7, #23]
 8006022:	e00a      	b.n	800603a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d002      	beq.n	8006030 <USB_GetDevSpeed+0x32>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b06      	cmp	r3, #6
 800602e:	d102      	bne.n	8006036 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006030:	2302      	movs	r3, #2
 8006032:	75fb      	strb	r3, [r7, #23]
 8006034:	e001      	b.n	800603a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006036:	230f      	movs	r3, #15
 8006038:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800603a:	7dfb      	ldrb	r3, [r7, #23]
}
 800603c:	4618      	mov	r0, r3
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d13a      	bne.n	80060da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	2101      	movs	r1, #1
 8006076:	fa01 f303 	lsl.w	r3, r1, r3
 800607a:	b29b      	uxth	r3, r3
 800607c:	68f9      	ldr	r1, [r7, #12]
 800607e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006082:	4313      	orrs	r3, r2
 8006084:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d155      	bne.n	8006148 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	78db      	ldrb	r3, [r3, #3]
 80060b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	059b      	lsls	r3, r3, #22
 80060be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060c0:	4313      	orrs	r3, r2
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	e036      	b.n	8006148 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	2101      	movs	r1, #1
 80060ec:	fa01 f303 	lsl.w	r3, r1, r3
 80060f0:	041b      	lsls	r3, r3, #16
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060f8:	4313      	orrs	r3, r2
 80060fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d11a      	bne.n	8006148 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	78db      	ldrb	r3, [r3, #3]
 800612c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800612e:	430b      	orrs	r3, r1
 8006130:	4313      	orrs	r3, r2
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006146:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
	...

08006158 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d161      	bne.n	8006238 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800618a:	d11f      	bne.n	80061cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	2101      	movs	r1, #1
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	43db      	mvns	r3, r3
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ec:	4013      	ands	r3, r2
 80061ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	2101      	movs	r1, #1
 8006202:	fa01 f303 	lsl.w	r3, r1, r3
 8006206:	b29b      	uxth	r3, r3
 8006208:	43db      	mvns	r3, r3
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006210:	4013      	ands	r3, r2
 8006212:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	0159      	lsls	r1, r3, #5
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	440b      	add	r3, r1
 800622a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622e:	4619      	mov	r1, r3
 8006230:	4b35      	ldr	r3, [pc, #212]	; (8006308 <USB_DeactivateEndpoint+0x1b0>)
 8006232:	4013      	ands	r3, r2
 8006234:	600b      	str	r3, [r1, #0]
 8006236:	e060      	b.n	80062fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800624a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800624e:	d11f      	bne.n	8006290 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	440a      	add	r2, r1
 8006266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800626a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800626e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800628e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	2101      	movs	r1, #1
 80062a2:	fa01 f303 	lsl.w	r3, r1, r3
 80062a6:	041b      	lsls	r3, r3, #16
 80062a8:	43db      	mvns	r3, r3
 80062aa:	68f9      	ldr	r1, [r7, #12]
 80062ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b0:	4013      	ands	r3, r2
 80062b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	43db      	mvns	r3, r3
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062d4:	4013      	ands	r3, r2
 80062d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	0159      	lsls	r1, r3, #5
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	440b      	add	r3, r1
 80062ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f2:	4619      	mov	r1, r3
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <USB_DeactivateEndpoint+0x1b4>)
 80062f6:	4013      	ands	r3, r2
 80062f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	ec337800 	.word	0xec337800
 800630c:	eff37800 	.word	0xeff37800

08006310 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08a      	sub	sp, #40	; 0x28
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	4613      	mov	r3, r2
 800631c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	2b01      	cmp	r3, #1
 800632e:	f040 815c 	bne.w	80065ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d132      	bne.n	80063a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006354:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006358:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800635c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	440a      	add	r2, r1
 8006374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800637c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006398:	0cdb      	lsrs	r3, r3, #19
 800639a:	04db      	lsls	r3, r3, #19
 800639c:	6113      	str	r3, [r2, #16]
 800639e:	e074      	b.n	800648a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ba:	0cdb      	lsrs	r3, r3, #19
 80063bc:	04db      	lsls	r3, r3, #19
 80063be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	0151      	lsls	r1, r2, #5
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	440a      	add	r2, r1
 80063d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6959      	ldr	r1, [r3, #20]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	440b      	add	r3, r1
 80063fc:	1e59      	subs	r1, r3, #1
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	fbb1 f3f3 	udiv	r3, r1, r3
 8006406:	04d9      	lsls	r1, r3, #19
 8006408:	4b9d      	ldr	r3, [pc, #628]	; (8006680 <USB_EPStartXfer+0x370>)
 800640a:	400b      	ands	r3, r1
 800640c:	69b9      	ldr	r1, [r7, #24]
 800640e:	0148      	lsls	r0, r1, #5
 8006410:	69f9      	ldr	r1, [r7, #28]
 8006412:	4401      	add	r1, r0
 8006414:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006418:	4313      	orrs	r3, r2
 800641a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006432:	69b9      	ldr	r1, [r7, #24]
 8006434:	0148      	lsls	r0, r1, #5
 8006436:	69f9      	ldr	r1, [r7, #28]
 8006438:	4401      	add	r1, r0
 800643a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800643e:	4313      	orrs	r3, r2
 8006440:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	78db      	ldrb	r3, [r3, #3]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d11f      	bne.n	800648a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	440a      	add	r2, r1
 8006460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006464:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006468:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006484:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006488:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d14b      	bne.n	8006528 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a4:	461a      	mov	r2, r3
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	78db      	ldrb	r3, [r3, #3]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d128      	bne.n	8006506 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d110      	bne.n	80064e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	e00f      	b.n	8006506 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006504:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	69fa      	ldr	r2, [r7, #28]
 800651a:	440a      	add	r2, r1
 800651c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006520:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	e12f      	b.n	8006788 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	440a      	add	r2, r1
 800653e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006542:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006546:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	78db      	ldrb	r3, [r3, #3]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d015      	beq.n	800657c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8117 	beq.w	8006788 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	2101      	movs	r1, #1
 800656c:	fa01 f303 	lsl.w	r3, r1, r3
 8006570:	69f9      	ldr	r1, [r7, #28]
 8006572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006576:	4313      	orrs	r3, r2
 8006578:	634b      	str	r3, [r1, #52]	; 0x34
 800657a:	e105      	b.n	8006788 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006588:	2b00      	cmp	r3, #0
 800658a:	d110      	bne.n	80065ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	e00f      	b.n	80065ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	68d9      	ldr	r1, [r3, #12]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	781a      	ldrb	r2, [r3, #0]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	b298      	uxth	r0, r3
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	4603      	mov	r3, r0
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fa2b 	bl	8006a3e <USB_WritePacket>
 80065e8:	e0ce      	b.n	8006788 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	0151      	lsls	r1, r2, #5
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	440a      	add	r2, r1
 8006600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006604:	0cdb      	lsrs	r3, r3, #19
 8006606:	04db      	lsls	r3, r3, #19
 8006608:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	0151      	lsls	r1, r2, #5
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	440a      	add	r2, r1
 8006620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006624:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006628:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800662c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d126      	bne.n	8006684 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664c:	69b9      	ldr	r1, [r7, #24]
 800664e:	0148      	lsls	r0, r1, #5
 8006650:	69f9      	ldr	r1, [r7, #28]
 8006652:	4401      	add	r1, r0
 8006654:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006658:	4313      	orrs	r3, r2
 800665a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	440a      	add	r2, r1
 8006672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800667a:	6113      	str	r3, [r2, #16]
 800667c:	e036      	b.n	80066ec <USB_EPStartXfer+0x3dc>
 800667e:	bf00      	nop
 8006680:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	4413      	add	r3, r2
 800668e:	1e5a      	subs	r2, r3, #1
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	fbb2 f3f3 	udiv	r3, r2, r3
 8006698:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	8afb      	ldrh	r3, [r7, #22]
 80066aa:	04d9      	lsls	r1, r3, #19
 80066ac:	4b39      	ldr	r3, [pc, #228]	; (8006794 <USB_EPStartXfer+0x484>)
 80066ae:	400b      	ands	r3, r1
 80066b0:	69b9      	ldr	r1, [r7, #24]
 80066b2:	0148      	lsls	r0, r1, #5
 80066b4:	69f9      	ldr	r1, [r7, #28]
 80066b6:	4401      	add	r1, r0
 80066b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066bc:	4313      	orrs	r3, r2
 80066be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	8af9      	ldrh	r1, [r7, #22]
 80066d4:	fb01 f303 	mul.w	r3, r1, r3
 80066d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066dc:	69b9      	ldr	r1, [r7, #24]
 80066de:	0148      	lsls	r0, r1, #5
 80066e0:	69f9      	ldr	r1, [r7, #28]
 80066e2:	4401      	add	r1, r0
 80066e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066e8:	4313      	orrs	r3, r2
 80066ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d10d      	bne.n	800670e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d009      	beq.n	800670e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	68d9      	ldr	r1, [r3, #12]
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670a:	460a      	mov	r2, r1
 800670c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	78db      	ldrb	r3, [r3, #3]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d128      	bne.n	8006768 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d110      	bne.n	8006748 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006740:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	e00f      	b.n	8006768 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	0151      	lsls	r1, r2, #5
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	440a      	add	r2, r1
 800675e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006766:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	440a      	add	r2, r1
 800677e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006786:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3720      	adds	r7, #32
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	1ff80000 	.word	0x1ff80000

08006798 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	4613      	mov	r3, r2
 80067a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	f040 80cd 	bne.w	8006954 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d132      	bne.n	8006828 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	0151      	lsls	r1, r2, #5
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	440a      	add	r2, r1
 80067fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	0151      	lsls	r1, r2, #5
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	440a      	add	r2, r1
 800681c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006820:	0cdb      	lsrs	r3, r3, #19
 8006822:	04db      	lsls	r3, r3, #19
 8006824:	6113      	str	r3, [r2, #16]
 8006826:	e04e      	b.n	80068c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	0151      	lsls	r1, r2, #5
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	440a      	add	r2, r1
 800683e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006842:	0cdb      	lsrs	r3, r3, #19
 8006844:	04db      	lsls	r3, r3, #19
 8006846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	0151      	lsls	r1, r2, #5
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	440a      	add	r2, r1
 800685e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006862:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006866:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800686a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	695a      	ldr	r2, [r3, #20]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	429a      	cmp	r2, r3
 8006876:	d903      	bls.n	8006880 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	0151      	lsls	r1, r2, #5
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	440a      	add	r2, r1
 8006896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800689e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ac:	691a      	ldr	r2, [r3, #16]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068b6:	6939      	ldr	r1, [r7, #16]
 80068b8:	0148      	lsls	r0, r1, #5
 80068ba:	6979      	ldr	r1, [r7, #20]
 80068bc:	4401      	add	r1, r0
 80068be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068c2:	4313      	orrs	r3, r2
 80068c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d11e      	bne.n	800690a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d009      	beq.n	80068e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e0:	461a      	mov	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006902:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	e092      	b.n	8006a30 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	440a      	add	r2, r1
 8006920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006924:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006928:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d07e      	beq.n	8006a30 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	2101      	movs	r1, #1
 8006944:	fa01 f303 	lsl.w	r3, r1, r3
 8006948:	6979      	ldr	r1, [r7, #20]
 800694a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800694e:	4313      	orrs	r3, r2
 8006950:	634b      	str	r3, [r1, #52]	; 0x34
 8006952:	e06d      	b.n	8006a30 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	0151      	lsls	r1, r2, #5
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	440a      	add	r2, r1
 800696a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800696e:	0cdb      	lsrs	r3, r3, #19
 8006970:	04db      	lsls	r3, r3, #19
 8006972:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	440a      	add	r2, r1
 800698a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800698e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006992:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006996:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	691a      	ldr	r2, [r3, #16]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069de:	6939      	ldr	r1, [r7, #16]
 80069e0:	0148      	lsls	r0, r1, #5
 80069e2:	6979      	ldr	r1, [r7, #20]
 80069e4:	4401      	add	r1, r0
 80069e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069ea:	4313      	orrs	r3, r2
 80069ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d10d      	bne.n	8006a10 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d009      	beq.n	8006a10 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	68d9      	ldr	r1, [r3, #12]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0c:	460a      	mov	r2, r1
 8006a0e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b089      	sub	sp, #36	; 0x24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	71fb      	strb	r3, [r7, #7]
 8006a50:	4613      	mov	r3, r2
 8006a52:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006a5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d11a      	bne.n	8006a9a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a64:	88bb      	ldrh	r3, [r7, #4]
 8006a66:	3303      	adds	r3, #3
 8006a68:	089b      	lsrs	r3, r3, #2
 8006a6a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	e00f      	b.n	8006a92 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	031a      	lsls	r2, r3, #12
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7e:	461a      	mov	r2, r3
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d3eb      	bcc.n	8006a72 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3724      	adds	r7, #36	; 0x24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b089      	sub	sp, #36	; 0x24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	3303      	adds	r3, #3
 8006ac2:	089b      	lsrs	r3, r3, #2
 8006ac4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	e00b      	b.n	8006ae4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	3304      	adds	r3, #4
 8006adc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	61bb      	str	r3, [r7, #24]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d3ef      	bcc.n	8006acc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006aec:	69fb      	ldr	r3, [r7, #28]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3724      	adds	r7, #36	; 0x24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b085      	sub	sp, #20
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d12c      	bne.n	8006b70 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	db12      	blt.n	8006b4e <USB_EPSetStall+0x54>
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00f      	beq.n	8006b4e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b4c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	e02b      	b.n	8006bc8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	db12      	blt.n	8006ba8 <USB_EPSetStall+0xae>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00f      	beq.n	8006ba8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ba6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d128      	bne.n	8006c44 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	0151      	lsls	r1, r2, #5
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	440a      	add	r2, r1
 8006c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	78db      	ldrb	r3, [r3, #3]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d003      	beq.n	8006c22 <USB_EPClearStall+0x4c>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	78db      	ldrb	r3, [r3, #3]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d138      	bne.n	8006c94 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	e027      	b.n	8006c94 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	78db      	ldrb	r3, [r3, #3]
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d003      	beq.n	8006c74 <USB_EPClearStall+0x9e>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	78db      	ldrb	r3, [r3, #3]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d10f      	bne.n	8006c94 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c92:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cc0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006cc4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d08:	f023 0303 	bic.w	r3, r3, #3
 8006d0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d1c:	f023 0302 	bic.w	r3, r3, #2
 8006d20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d4a:	f023 0303 	bic.w	r3, r3, #3
 8006d4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b085      	sub	sp, #20
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4013      	ands	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	4013      	ands	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	0c1b      	lsrs	r3, r3, #16
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4013      	ands	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	b29b      	uxth	r3, r3
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6c:	01db      	lsls	r3, r3, #7
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4013      	ands	r3, r2
 8006e88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ece:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ed2:	f023 0307 	bic.w	r3, r3, #7
 8006ed6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	460b      	mov	r3, r1
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	333c      	adds	r3, #60	; 0x3c
 8006f12:	3304      	adds	r3, #4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <USB_EP0_OutStart+0xb8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d90a      	bls.n	8006f36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f30:	d101      	bne.n	8006f36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e037      	b.n	8006fa6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f64:	f043 0318 	orr.w	r3, r3, #24
 8006f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d10f      	bne.n	8006fa4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006fa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	4f54300a 	.word	0x4f54300a

08006fb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4a13      	ldr	r2, [pc, #76]	; (800701c <USB_CoreReset+0x64>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d901      	bls.n	8006fd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e01b      	b.n	800700e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	daf2      	bge.n	8006fc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f043 0201 	orr.w	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4a09      	ldr	r2, [pc, #36]	; (800701c <USB_CoreReset+0x64>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d901      	bls.n	8007000 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e006      	b.n	800700e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b01      	cmp	r3, #1
 800700a:	d0f0      	beq.n	8006fee <USB_CoreReset+0x36>

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	00030d40 	.word	0x00030d40

08007020 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 800702c:	2044      	movs	r0, #68	; 0x44
 800702e:	f002 fa13 	bl	8009458 <USBD_static_malloc>
 8007032:	4602      	mov	r2, r0
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 8007044:	2303      	movs	r3, #3
 8007046:	e016      	b.n	8007076 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800704e:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 8007050:	2340      	movs	r3, #64	; 0x40
 8007052:	2202      	movs	r2, #2
 8007054:	2181      	movs	r1, #129	; 0x81
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f002 f8db 	bl	8009212 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 800705c:	2340      	movs	r3, #64	; 0x40
 800705e:	2202      	movs	r2, #2
 8007060:	2101      	movs	r1, #1
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f002 f8d5 	bl	8009212 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8007068:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 800706a:	2340      	movs	r3, #64	; 0x40
 800706c:	2101      	movs	r1, #1
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f002 f9be 	bl	80093f0 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007074:	2300      	movs	r3, #0
  }
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	460b      	mov	r3, r1
 8007088:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 800708a:	2181      	movs	r1, #129	; 0x81
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f002 f8e6 	bl	800925e <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 8007092:	2101      	movs	r1, #1
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f002 f8e2 	bl	800925e <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <USBD_Midi_Setup+0x26>
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	d10b      	bne.n	80070d6 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f937 	bl	8008334 <USBD_CtlError>
      return USBD_FAIL;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e006      	b.n	80070d8 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 f931 	bl	8008334 <USBD_CtlError>
      return USBD_FAIL;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e000      	b.n	80070d8 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2265      	movs	r2, #101	; 0x65
 80070ec:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 80070ee:	4b03      	ldr	r3, [pc, #12]	; (80070fc <USBD_Midi_GetCfgDesc+0x1c>)
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	200000e0 	.word	0x200000e0

08007100 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800711a:	b480      	push	{r7}
 800711c:	b083      	sub	sp, #12
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071a2:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f002 f942 	bl	8009432 <USBD_LL_GetRxDataSize>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 80071b8:	2300      	movs	r3, #0
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	e00c      	b.n	80071d8 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68f9      	ldr	r1, [r7, #12]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	440a      	add	r2, r1
 80071cc:	2104      	movs	r1, #4
 80071ce:	4610      	mov	r0, r2
 80071d0:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	3304      	adds	r3, #4
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d3ed      	bcc.n	80071be <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 80071e2:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 80071e4:	2340      	movs	r3, #64	; 0x40
 80071e6:	2101      	movs	r1, #1
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f002 f901 	bl	80093f0 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	220a      	movs	r2, #10
 8007204:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 8007206:	4b03      	ldr	r3, [pc, #12]	; (8007214 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	20000148 	.word	0x20000148

08007218 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007222:	2303      	movs	r3, #3
 8007224:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007238:	7bfb      	ldrb	r3, [r7, #15]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b086      	sub	sp, #24
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	4613      	mov	r3, r2
 8007252:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800725a:	2303      	movs	r3, #3
 800725c:	e01f      	b.n	800729e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	79fa      	ldrb	r2, [r7, #7]
 8007290:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f001 ff56 	bl	8009144 <USBD_LL_Init>
 8007298:	4603      	mov	r3, r0
 800729a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800729c:	7dfb      	ldrb	r3, [r7, #23]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e016      	b.n	80072ec <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00b      	beq.n	80072ea <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	f107 020e 	add.w	r2, r7, #14
 80072de:	4610      	mov	r0, r2
 80072e0:	4798      	blx	r3
 80072e2:	4602      	mov	r2, r0
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 ff6d 	bl	80091dc <USBD_LL_Start>
 8007302:	4603      	mov	r3, r0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800732e:	2303      	movs	r3, #3
 8007330:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007338:	2b00      	cmp	r3, #0
 800733a:	d009      	beq.n	8007350 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	4611      	mov	r1, r2
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736c:	2b00      	cmp	r3, #0
 800736e:	d007      	beq.n	8007380 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	78fa      	ldrb	r2, [r7, #3]
 800737a:	4611      	mov	r1, r2
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	4798      	blx	r3
  }

  return USBD_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f000 ff8f 	bl	80082c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80073b0:	461a      	mov	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073be:	f003 031f 	and.w	r3, r3, #31
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d01a      	beq.n	80073fc <USBD_LL_SetupStage+0x72>
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d822      	bhi.n	8007410 <USBD_LL_SetupStage+0x86>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <USBD_LL_SetupStage+0x4a>
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d00a      	beq.n	80073e8 <USBD_LL_SetupStage+0x5e>
 80073d2:	e01d      	b.n	8007410 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fa61 	bl	80078a4 <USBD_StdDevReq>
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]
      break;
 80073e6:	e020      	b.n	800742a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fac5 	bl	8007980 <USBD_StdItfReq>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]
      break;
 80073fa:	e016      	b.n	800742a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fb04 	bl	8007a12 <USBD_StdEPReq>
 800740a:	4603      	mov	r3, r0
 800740c:	73fb      	strb	r3, [r7, #15]
      break;
 800740e:	e00c      	b.n	800742a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007416:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800741a:	b2db      	uxtb	r3, r3
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 ff3c 	bl	800929c <USBD_LL_StallEP>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]
      break;
 8007428:	bf00      	nop
  }

  return ret;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	460b      	mov	r3, r1
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d138      	bne.n	80074ba <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800744e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007456:	2b03      	cmp	r3, #3
 8007458:	d14a      	bne.n	80074f0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	429a      	cmp	r2, r3
 8007464:	d913      	bls.n	800748e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	4293      	cmp	r3, r2
 800747e:	bf28      	it	cs
 8007480:	4613      	movcs	r3, r2
 8007482:	461a      	mov	r2, r3
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fff1 	bl	800846e <USBD_CtlContinueRx>
 800748c:	e030      	b.n	80074f0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b03      	cmp	r3, #3
 8007498:	d10b      	bne.n	80074b2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 ffec 	bl	8008490 <USBD_CtlSendStatus>
 80074b8:	e01a      	b.n	80074f0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d114      	bne.n	80074f0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00e      	beq.n	80074f0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	7afa      	ldrb	r2, [r7, #11]
 80074dc:	4611      	mov	r1, r2
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	4798      	blx	r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	e000      	b.n	80074f2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b086      	sub	sp, #24
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	460b      	mov	r3, r1
 8007504:	607a      	str	r2, [r7, #4]
 8007506:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d16b      	bne.n	80075e6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3314      	adds	r3, #20
 8007512:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800751a:	2b02      	cmp	r3, #2
 800751c:	d156      	bne.n	80075cc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	429a      	cmp	r2, r3
 8007528:	d914      	bls.n	8007554 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	1ad2      	subs	r2, r2, r3
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	461a      	mov	r2, r3
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 ff83 	bl	800844c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007546:	2300      	movs	r3, #0
 8007548:	2200      	movs	r2, #0
 800754a:	2100      	movs	r1, #0
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f001 ff4f 	bl	80093f0 <USBD_LL_PrepareReceive>
 8007552:	e03b      	b.n	80075cc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	429a      	cmp	r2, r3
 800755e:	d11c      	bne.n	800759a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007568:	429a      	cmp	r2, r3
 800756a:	d316      	bcc.n	800759a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007576:	429a      	cmp	r2, r3
 8007578:	d20f      	bcs.n	800759a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800757a:	2200      	movs	r2, #0
 800757c:	2100      	movs	r1, #0
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 ff64 	bl	800844c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800758c:	2300      	movs	r3, #0
 800758e:	2200      	movs	r2, #0
 8007590:	2100      	movs	r1, #0
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f001 ff2c 	bl	80093f0 <USBD_LL_PrepareReceive>
 8007598:	e018      	b.n	80075cc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d10b      	bne.n	80075be <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075be:	2180      	movs	r1, #128	; 0x80
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f001 fe6b 	bl	800929c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 ff75 	bl	80084b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d122      	bne.n	800761c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7ff fe98 	bl	800730c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075e4:	e01a      	b.n	800761c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d114      	bne.n	800761c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00e      	beq.n	800761c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	7afa      	ldrb	r2, [r7, #11]
 8007608:	4611      	mov	r1, r2
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	4798      	blx	r3
 800760e:	4603      	mov	r3, r0
 8007610:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
 800761a:	e000      	b.n	800761e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007656:	2303      	movs	r3, #3
 8007658:	e02f      	b.n	80076ba <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00f      	beq.n	8007684 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d009      	beq.n	8007684 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6852      	ldr	r2, [r2, #4]
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	4611      	mov	r1, r2
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007684:	2340      	movs	r3, #64	; 0x40
 8007686:	2200      	movs	r2, #0
 8007688:	2100      	movs	r1, #0
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fdc1 	bl	8009212 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2240      	movs	r2, #64	; 0x40
 800769c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076a0:	2340      	movs	r3, #64	; 0x40
 80076a2:	2200      	movs	r2, #0
 80076a4:	2180      	movs	r1, #128	; 0x80
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 fdb3 	bl	8009212 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2240      	movs	r2, #64	; 0x40
 80076b6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2204      	movs	r2, #4
 80076fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b04      	cmp	r3, #4
 8007720:	d106      	bne.n	8007730 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007728:	b2da      	uxtb	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007750:	2303      	movs	r3, #3
 8007752:	e012      	b.n	800777a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b03      	cmp	r3, #3
 800775e:	d10b      	bne.n	8007778 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e014      	b.n	80077c6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d10d      	bne.n	80077c4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ba:	6a1b      	ldr	r3, [r3, #32]
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	4611      	mov	r1, r2
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	460b      	mov	r3, r1
 80077d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e014      	b.n	8007812 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d10d      	bne.n	8007810 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d007      	beq.n	8007810 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	78fa      	ldrb	r2, [r7, #3]
 800780a:	4611      	mov	r1, r2
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007846:	2b00      	cmp	r3, #0
 8007848:	d009      	beq.n	800785e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6852      	ldr	r2, [r2, #4]
 8007856:	b2d2      	uxtb	r2, r2
 8007858:	4611      	mov	r1, r2
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
  }

  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	3301      	adds	r3, #1
 800787e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007886:	8a3b      	ldrh	r3, [r7, #16]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	b21a      	sxth	r2, r3
 800788c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007890:	4313      	orrs	r3, r2
 8007892:	b21b      	sxth	r3, r3
 8007894:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007896:	89fb      	ldrh	r3, [r7, #14]
}
 8007898:	4618      	mov	r0, r3
 800789a:	371c      	adds	r7, #28
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	d005      	beq.n	80078ca <USBD_StdDevReq+0x26>
 80078be:	2b40      	cmp	r3, #64	; 0x40
 80078c0:	d853      	bhi.n	800796a <USBD_StdDevReq+0xc6>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00b      	beq.n	80078de <USBD_StdDevReq+0x3a>
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	d14f      	bne.n	800796a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	4798      	blx	r3
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]
      break;
 80078dc:	e04a      	b.n	8007974 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	785b      	ldrb	r3, [r3, #1]
 80078e2:	2b09      	cmp	r3, #9
 80078e4:	d83b      	bhi.n	800795e <USBD_StdDevReq+0xba>
 80078e6:	a201      	add	r2, pc, #4	; (adr r2, 80078ec <USBD_StdDevReq+0x48>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	08007941 	.word	0x08007941
 80078f0:	08007955 	.word	0x08007955
 80078f4:	0800795f 	.word	0x0800795f
 80078f8:	0800794b 	.word	0x0800794b
 80078fc:	0800795f 	.word	0x0800795f
 8007900:	0800791f 	.word	0x0800791f
 8007904:	08007915 	.word	0x08007915
 8007908:	0800795f 	.word	0x0800795f
 800790c:	08007937 	.word	0x08007937
 8007910:	08007929 	.word	0x08007929
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f9de 	bl	8007cd8 <USBD_GetDescriptor>
          break;
 800791c:	e024      	b.n	8007968 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fb43 	bl	8007fac <USBD_SetAddress>
          break;
 8007926:	e01f      	b.n	8007968 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fb82 	bl	8008034 <USBD_SetConfig>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]
          break;
 8007934:	e018      	b.n	8007968 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fc21 	bl	8008180 <USBD_GetConfig>
          break;
 800793e:	e013      	b.n	8007968 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fc52 	bl	80081ec <USBD_GetStatus>
          break;
 8007948:	e00e      	b.n	8007968 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fc81 	bl	8008254 <USBD_SetFeature>
          break;
 8007952:	e009      	b.n	8007968 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fc90 	bl	800827c <USBD_ClrFeature>
          break;
 800795c:	e004      	b.n	8007968 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fce7 	bl	8008334 <USBD_CtlError>
          break;
 8007966:	bf00      	nop
      }
      break;
 8007968:	e004      	b.n	8007974 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fce1 	bl	8008334 <USBD_CtlError>
      break;
 8007972:	bf00      	nop
  }

  return ret;
 8007974:	7bfb      	ldrb	r3, [r7, #15]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop

08007980 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007996:	2b40      	cmp	r3, #64	; 0x40
 8007998:	d005      	beq.n	80079a6 <USBD_StdItfReq+0x26>
 800799a:	2b40      	cmp	r3, #64	; 0x40
 800799c:	d82f      	bhi.n	80079fe <USBD_StdItfReq+0x7e>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <USBD_StdItfReq+0x26>
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	d12b      	bne.n	80079fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d81d      	bhi.n	80079f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	889b      	ldrh	r3, [r3, #4]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d813      	bhi.n	80079e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	4798      	blx	r3
 80079cc:	4603      	mov	r3, r0
 80079ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	88db      	ldrh	r3, [r3, #6]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d110      	bne.n	80079fa <USBD_StdItfReq+0x7a>
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10d      	bne.n	80079fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fd56 	bl	8008490 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079e4:	e009      	b.n	80079fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fca3 	bl	8008334 <USBD_CtlError>
          break;
 80079ee:	e004      	b.n	80079fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fc9e 	bl	8008334 <USBD_CtlError>
          break;
 80079f8:	e000      	b.n	80079fc <USBD_StdItfReq+0x7c>
          break;
 80079fa:	bf00      	nop
      }
      break;
 80079fc:	e004      	b.n	8007a08 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fc97 	bl	8008334 <USBD_CtlError>
      break;
 8007a06:	bf00      	nop
  }

  return ret;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	889b      	ldrh	r3, [r3, #4]
 8007a24:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a2e:	2b40      	cmp	r3, #64	; 0x40
 8007a30:	d007      	beq.n	8007a42 <USBD_StdEPReq+0x30>
 8007a32:	2b40      	cmp	r3, #64	; 0x40
 8007a34:	f200 8145 	bhi.w	8007cc2 <USBD_StdEPReq+0x2b0>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00c      	beq.n	8007a56 <USBD_StdEPReq+0x44>
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	f040 8140 	bne.w	8007cc2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	4798      	blx	r3
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]
      break;
 8007a54:	e13a      	b.n	8007ccc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	785b      	ldrb	r3, [r3, #1]
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d007      	beq.n	8007a6e <USBD_StdEPReq+0x5c>
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	f300 8129 	bgt.w	8007cb6 <USBD_StdEPReq+0x2a4>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d07f      	beq.n	8007b68 <USBD_StdEPReq+0x156>
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d03c      	beq.n	8007ae6 <USBD_StdEPReq+0xd4>
 8007a6c:	e123      	b.n	8007cb6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d002      	beq.n	8007a80 <USBD_StdEPReq+0x6e>
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d016      	beq.n	8007aac <USBD_StdEPReq+0x9a>
 8007a7e:	e02c      	b.n	8007ada <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00d      	beq.n	8007aa2 <USBD_StdEPReq+0x90>
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	2b80      	cmp	r3, #128	; 0x80
 8007a8a:	d00a      	beq.n	8007aa2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fc03 	bl	800929c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a96:	2180      	movs	r1, #128	; 0x80
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 fbff 	bl	800929c <USBD_LL_StallEP>
 8007a9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007aa0:	e020      	b.n	8007ae4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fc45 	bl	8008334 <USBD_CtlError>
              break;
 8007aaa:	e01b      	b.n	8007ae4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	885b      	ldrh	r3, [r3, #2]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10e      	bne.n	8007ad2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <USBD_StdEPReq+0xc0>
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b80      	cmp	r3, #128	; 0x80
 8007abe:	d008      	beq.n	8007ad2 <USBD_StdEPReq+0xc0>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	88db      	ldrh	r3, [r3, #6]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 fbe5 	bl	800929c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fcdc 	bl	8008490 <USBD_CtlSendStatus>

              break;
 8007ad8:	e004      	b.n	8007ae4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fc29 	bl	8008334 <USBD_CtlError>
              break;
 8007ae2:	bf00      	nop
          }
          break;
 8007ae4:	e0ec      	b.n	8007cc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d002      	beq.n	8007af8 <USBD_StdEPReq+0xe6>
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d016      	beq.n	8007b24 <USBD_StdEPReq+0x112>
 8007af6:	e030      	b.n	8007b5a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00d      	beq.n	8007b1a <USBD_StdEPReq+0x108>
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b80      	cmp	r3, #128	; 0x80
 8007b02:	d00a      	beq.n	8007b1a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 fbc7 	bl	800929c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b0e:	2180      	movs	r1, #128	; 0x80
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 fbc3 	bl	800929c <USBD_LL_StallEP>
 8007b16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b18:	e025      	b.n	8007b66 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fc09 	bl	8008334 <USBD_CtlError>
              break;
 8007b22:	e020      	b.n	8007b66 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	885b      	ldrh	r3, [r3, #2]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d11b      	bne.n	8007b64 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d004      	beq.n	8007b40 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f001 fbcd 	bl	80092da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fca5 	bl	8008490 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
 8007b54:	4603      	mov	r3, r0
 8007b56:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007b58:	e004      	b.n	8007b64 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fbe9 	bl	8008334 <USBD_CtlError>
              break;
 8007b62:	e000      	b.n	8007b66 <USBD_StdEPReq+0x154>
              break;
 8007b64:	bf00      	nop
          }
          break;
 8007b66:	e0ab      	b.n	8007cc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d002      	beq.n	8007b7a <USBD_StdEPReq+0x168>
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d032      	beq.n	8007bde <USBD_StdEPReq+0x1cc>
 8007b78:	e097      	b.n	8007caa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <USBD_StdEPReq+0x17e>
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b80      	cmp	r3, #128	; 0x80
 8007b84:	d004      	beq.n	8007b90 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fbd3 	bl	8008334 <USBD_CtlError>
                break;
 8007b8e:	e091      	b.n	8007cb4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da0b      	bge.n	8007bb0 <USBD_StdEPReq+0x19e>
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	3310      	adds	r3, #16
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	4413      	add	r3, r2
 8007bac:	3304      	adds	r3, #4
 8007bae:	e00b      	b.n	8007bc8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fc1d 	bl	8008416 <USBD_CtlSendData>
              break;
 8007bdc:	e06a      	b.n	8007cb4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	da11      	bge.n	8007c0a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
 8007be8:	f003 020f 	and.w	r2, r3, #15
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3324      	adds	r3, #36	; 0x24
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d117      	bne.n	8007c30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fb96 	bl	8008334 <USBD_CtlError>
                  break;
 8007c08:	e054      	b.n	8007cb4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fb83 	bl	8008334 <USBD_CtlError>
                  break;
 8007c2e:	e041      	b.n	8007cb4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	da0b      	bge.n	8007c50 <USBD_StdEPReq+0x23e>
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	3310      	adds	r3, #16
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	e00b      	b.n	8007c68 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c56:	4613      	mov	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	4413      	add	r3, r2
 8007c66:	3304      	adds	r3, #4
 8007c68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <USBD_StdEPReq+0x264>
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b80      	cmp	r3, #128	; 0x80
 8007c74:	d103      	bne.n	8007c7e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	e00e      	b.n	8007c9c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fb48 	bl	8009318 <USBD_LL_IsStallEP>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2201      	movs	r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	e002      	b.n	8007c9c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fbb7 	bl	8008416 <USBD_CtlSendData>
              break;
 8007ca8:	e004      	b.n	8007cb4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fb41 	bl	8008334 <USBD_CtlError>
              break;
 8007cb2:	bf00      	nop
          }
          break;
 8007cb4:	e004      	b.n	8007cc0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fb3b 	bl	8008334 <USBD_CtlError>
          break;
 8007cbe:	bf00      	nop
      }
      break;
 8007cc0:	e004      	b.n	8007ccc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fb35 	bl	8008334 <USBD_CtlError>
      break;
 8007cca:	bf00      	nop
  }

  return ret;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	885b      	ldrh	r3, [r3, #2]
 8007cf2:	0a1b      	lsrs	r3, r3, #8
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	2b06      	cmp	r3, #6
 8007cfa:	f200 8128 	bhi.w	8007f4e <USBD_GetDescriptor+0x276>
 8007cfe:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <USBD_GetDescriptor+0x2c>)
 8007d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d04:	08007d21 	.word	0x08007d21
 8007d08:	08007d39 	.word	0x08007d39
 8007d0c:	08007d79 	.word	0x08007d79
 8007d10:	08007f4f 	.word	0x08007f4f
 8007d14:	08007f4f 	.word	0x08007f4f
 8007d18:	08007eef 	.word	0x08007eef
 8007d1c:	08007f1b 	.word	0x08007f1b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	7c12      	ldrb	r2, [r2, #16]
 8007d2c:	f107 0108 	add.w	r1, r7, #8
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
 8007d34:	60f8      	str	r0, [r7, #12]
      break;
 8007d36:	e112      	b.n	8007f5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	7c1b      	ldrb	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10d      	bne.n	8007d5c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d48:	f107 0208 	add.w	r2, r7, #8
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3301      	adds	r3, #1
 8007d56:	2202      	movs	r2, #2
 8007d58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d5a:	e100      	b.n	8007f5e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d64:	f107 0208 	add.w	r2, r7, #8
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4798      	blx	r3
 8007d6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	2202      	movs	r2, #2
 8007d74:	701a      	strb	r2, [r3, #0]
      break;
 8007d76:	e0f2      	b.n	8007f5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	885b      	ldrh	r3, [r3, #2]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b05      	cmp	r3, #5
 8007d80:	f200 80ac 	bhi.w	8007edc <USBD_GetDescriptor+0x204>
 8007d84:	a201      	add	r2, pc, #4	; (adr r2, 8007d8c <USBD_GetDescriptor+0xb4>)
 8007d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8a:	bf00      	nop
 8007d8c:	08007da5 	.word	0x08007da5
 8007d90:	08007dd9 	.word	0x08007dd9
 8007d94:	08007e0d 	.word	0x08007e0d
 8007d98:	08007e41 	.word	0x08007e41
 8007d9c:	08007e75 	.word	0x08007e75
 8007da0:	08007ea9 	.word	0x08007ea9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7c12      	ldrb	r2, [r2, #16]
 8007dbc:	f107 0108 	add.w	r1, r7, #8
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4798      	blx	r3
 8007dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dc6:	e091      	b.n	8007eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fab2 	bl	8008334 <USBD_CtlError>
            err++;
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8007dd6:	e089      	b.n	8007eec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	7c12      	ldrb	r2, [r2, #16]
 8007df0:	f107 0108 	add.w	r1, r7, #8
 8007df4:	4610      	mov	r0, r2
 8007df6:	4798      	blx	r3
 8007df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dfa:	e077      	b.n	8007eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa98 	bl	8008334 <USBD_CtlError>
            err++;
 8007e04:	7afb      	ldrb	r3, [r7, #11]
 8007e06:	3301      	adds	r3, #1
 8007e08:	72fb      	strb	r3, [r7, #11]
          break;
 8007e0a:	e06f      	b.n	8007eec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00b      	beq.n	8007e30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	7c12      	ldrb	r2, [r2, #16]
 8007e24:	f107 0108 	add.w	r1, r7, #8
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4798      	blx	r3
 8007e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e2e:	e05d      	b.n	8007eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fa7e 	bl	8008334 <USBD_CtlError>
            err++;
 8007e38:	7afb      	ldrb	r3, [r7, #11]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e3e:	e055      	b.n	8007eec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	7c12      	ldrb	r2, [r2, #16]
 8007e58:	f107 0108 	add.w	r1, r7, #8
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4798      	blx	r3
 8007e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e62:	e043      	b.n	8007eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa64 	bl	8008334 <USBD_CtlError>
            err++;
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	72fb      	strb	r3, [r7, #11]
          break;
 8007e72:	e03b      	b.n	8007eec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00b      	beq.n	8007e98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	7c12      	ldrb	r2, [r2, #16]
 8007e8c:	f107 0108 	add.w	r1, r7, #8
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e96:	e029      	b.n	8007eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fa4a 	bl	8008334 <USBD_CtlError>
            err++;
 8007ea0:	7afb      	ldrb	r3, [r7, #11]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ea6:	e021      	b.n	8007eec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	7c12      	ldrb	r2, [r2, #16]
 8007ec0:	f107 0108 	add.w	r1, r7, #8
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4798      	blx	r3
 8007ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eca:	e00f      	b.n	8007eec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fa30 	bl	8008334 <USBD_CtlError>
            err++;
 8007ed4:	7afb      	ldrb	r3, [r7, #11]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eda:	e007      	b.n	8007eec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa28 	bl	8008334 <USBD_CtlError>
          err++;
 8007ee4:	7afb      	ldrb	r3, [r7, #11]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007eea:	bf00      	nop
      }
      break;
 8007eec:	e037      	b.n	8007f5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	7c1b      	ldrb	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d109      	bne.n	8007f0a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efe:	f107 0208 	add.w	r2, r7, #8
 8007f02:	4610      	mov	r0, r2
 8007f04:	4798      	blx	r3
 8007f06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f08:	e029      	b.n	8007f5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fa11 	bl	8008334 <USBD_CtlError>
        err++;
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	3301      	adds	r3, #1
 8007f16:	72fb      	strb	r3, [r7, #11]
      break;
 8007f18:	e021      	b.n	8007f5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	7c1b      	ldrb	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10d      	bne.n	8007f3e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2a:	f107 0208 	add.w	r2, r7, #8
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4798      	blx	r3
 8007f32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3301      	adds	r3, #1
 8007f38:	2207      	movs	r2, #7
 8007f3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f3c:	e00f      	b.n	8007f5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f9f7 	bl	8008334 <USBD_CtlError>
        err++;
 8007f46:	7afb      	ldrb	r3, [r7, #11]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f4c:	e007      	b.n	8007f5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f9ef 	bl	8008334 <USBD_CtlError>
      err++;
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f5c:	bf00      	nop
  }

  if (err != 0U)
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d11e      	bne.n	8007fa2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	88db      	ldrh	r3, [r3, #6]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d016      	beq.n	8007f9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f6c:	893b      	ldrh	r3, [r7, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00e      	beq.n	8007f90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	88da      	ldrh	r2, [r3, #6]
 8007f76:	893b      	ldrh	r3, [r7, #8]
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	bf28      	it	cs
 8007f7c:	4613      	movcs	r3, r2
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f82:	893b      	ldrh	r3, [r7, #8]
 8007f84:	461a      	mov	r2, r3
 8007f86:	68f9      	ldr	r1, [r7, #12]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fa44 	bl	8008416 <USBD_CtlSendData>
 8007f8e:	e009      	b.n	8007fa4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f9ce 	bl	8008334 <USBD_CtlError>
 8007f98:	e004      	b.n	8007fa4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa78 	bl	8008490 <USBD_CtlSendStatus>
 8007fa0:	e000      	b.n	8007fa4 <USBD_GetDescriptor+0x2cc>
    return;
 8007fa2:	bf00      	nop
  }
}
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop

08007fac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	889b      	ldrh	r3, [r3, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d131      	bne.n	8008022 <USBD_SetAddress+0x76>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	88db      	ldrh	r3, [r3, #6]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d12d      	bne.n	8008022 <USBD_SetAddress+0x76>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	885b      	ldrh	r3, [r3, #2]
 8007fca:	2b7f      	cmp	r3, #127	; 0x7f
 8007fcc:	d829      	bhi.n	8008022 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d104      	bne.n	8007ff0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f9a3 	bl	8008334 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fee:	e01d      	b.n	800802c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	7bfa      	ldrb	r2, [r7, #15]
 8007ff4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 f9b7 	bl	8009370 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fa44 	bl	8008490 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d004      	beq.n	8008018 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008016:	e009      	b.n	800802c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008020:	e004      	b.n	800802c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f985 	bl	8008334 <USBD_CtlError>
  }
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	885b      	ldrh	r3, [r3, #2]
 8008046:	b2da      	uxtb	r2, r3
 8008048:	4b4c      	ldr	r3, [pc, #304]	; (800817c <USBD_SetConfig+0x148>)
 800804a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800804c:	4b4b      	ldr	r3, [pc, #300]	; (800817c <USBD_SetConfig+0x148>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d905      	bls.n	8008060 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f96c 	bl	8008334 <USBD_CtlError>
    return USBD_FAIL;
 800805c:	2303      	movs	r3, #3
 800805e:	e088      	b.n	8008172 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d002      	beq.n	8008072 <USBD_SetConfig+0x3e>
 800806c:	2b03      	cmp	r3, #3
 800806e:	d025      	beq.n	80080bc <USBD_SetConfig+0x88>
 8008070:	e071      	b.n	8008156 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008072:	4b42      	ldr	r3, [pc, #264]	; (800817c <USBD_SetConfig+0x148>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d01c      	beq.n	80080b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800807a:	4b40      	ldr	r3, [pc, #256]	; (800817c <USBD_SetConfig+0x148>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008084:	4b3d      	ldr	r3, [pc, #244]	; (800817c <USBD_SetConfig+0x148>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff f949 	bl	8007322 <USBD_SetClassConfig>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f949 	bl	8008334 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080a2:	e065      	b.n	8008170 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f9f3 	bl	8008490 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2203      	movs	r2, #3
 80080ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080b2:	e05d      	b.n	8008170 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f9eb 	bl	8008490 <USBD_CtlSendStatus>
      break;
 80080ba:	e059      	b.n	8008170 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080bc:	4b2f      	ldr	r3, [pc, #188]	; (800817c <USBD_SetConfig+0x148>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d112      	bne.n	80080ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080cc:	4b2b      	ldr	r3, [pc, #172]	; (800817c <USBD_SetConfig+0x148>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	461a      	mov	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080d6:	4b29      	ldr	r3, [pc, #164]	; (800817c <USBD_SetConfig+0x148>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff f93c 	bl	800735a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f9d4 	bl	8008490 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080e8:	e042      	b.n	8008170 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80080ea:	4b24      	ldr	r3, [pc, #144]	; (800817c <USBD_SetConfig+0x148>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d02a      	beq.n	800814e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff f92a 	bl	800735a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008106:	4b1d      	ldr	r3, [pc, #116]	; (800817c <USBD_SetConfig+0x148>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008110:	4b1a      	ldr	r3, [pc, #104]	; (800817c <USBD_SetConfig+0x148>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff f903 	bl	8007322 <USBD_SetClassConfig>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00f      	beq.n	8008146 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f903 	bl	8008334 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff f90f 	bl	800735a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008144:	e014      	b.n	8008170 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f9a2 	bl	8008490 <USBD_CtlSendStatus>
      break;
 800814c:	e010      	b.n	8008170 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f99e 	bl	8008490 <USBD_CtlSendStatus>
      break;
 8008154:	e00c      	b.n	8008170 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f8eb 	bl	8008334 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800815e:	4b07      	ldr	r3, [pc, #28]	; (800817c <USBD_SetConfig+0x148>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff f8f8 	bl	800735a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800816a:	2303      	movs	r3, #3
 800816c:	73fb      	strb	r3, [r7, #15]
      break;
 800816e:	bf00      	nop
  }

  return ret;
 8008170:	7bfb      	ldrb	r3, [r7, #15]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20000344 	.word	0x20000344

08008180 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	88db      	ldrh	r3, [r3, #6]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d004      	beq.n	800819c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f8cd 	bl	8008334 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800819a:	e023      	b.n	80081e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	dc02      	bgt.n	80081ae <USBD_GetConfig+0x2e>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	dc03      	bgt.n	80081b4 <USBD_GetConfig+0x34>
 80081ac:	e015      	b.n	80081da <USBD_GetConfig+0x5a>
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d00b      	beq.n	80081ca <USBD_GetConfig+0x4a>
 80081b2:	e012      	b.n	80081da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3308      	adds	r3, #8
 80081be:	2201      	movs	r2, #1
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f927 	bl	8008416 <USBD_CtlSendData>
        break;
 80081c8:	e00c      	b.n	80081e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3304      	adds	r3, #4
 80081ce:	2201      	movs	r2, #1
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f91f 	bl	8008416 <USBD_CtlSendData>
        break;
 80081d8:	e004      	b.n	80081e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f8a9 	bl	8008334 <USBD_CtlError>
        break;
 80081e2:	bf00      	nop
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	3b01      	subs	r3, #1
 8008200:	2b02      	cmp	r3, #2
 8008202:	d81e      	bhi.n	8008242 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	88db      	ldrh	r3, [r3, #6]
 8008208:	2b02      	cmp	r3, #2
 800820a:	d004      	beq.n	8008216 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f890 	bl	8008334 <USBD_CtlError>
        break;
 8008214:	e01a      	b.n	800824c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f043 0202 	orr.w	r2, r3, #2
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	330c      	adds	r3, #12
 8008236:	2202      	movs	r2, #2
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f8eb 	bl	8008416 <USBD_CtlSendData>
      break;
 8008240:	e004      	b.n	800824c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f875 	bl	8008334 <USBD_CtlError>
      break;
 800824a:	bf00      	nop
  }
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	885b      	ldrh	r3, [r3, #2]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d106      	bne.n	8008274 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f90e 	bl	8008490 <USBD_CtlSendStatus>
  }
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828c:	b2db      	uxtb	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	2b02      	cmp	r3, #2
 8008292:	d80b      	bhi.n	80082ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	885b      	ldrh	r3, [r3, #2]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d10c      	bne.n	80082b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f8f3 	bl	8008490 <USBD_CtlSendStatus>
      }
      break;
 80082aa:	e004      	b.n	80082b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f840 	bl	8008334 <USBD_CtlError>
      break;
 80082b4:	e000      	b.n	80082b8 <USBD_ClrFeature+0x3c>
      break;
 80082b6:	bf00      	nop
  }
}
 80082b8:	bf00      	nop
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	781a      	ldrb	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3301      	adds	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	781a      	ldrb	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3301      	adds	r3, #1
 80082e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f7ff fabc 	bl	8007868 <SWAPBYTE>
 80082f0:	4603      	mov	r3, r0
 80082f2:	461a      	mov	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f7ff faaf 	bl	8007868 <SWAPBYTE>
 800830a:	4603      	mov	r3, r0
 800830c:	461a      	mov	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	3301      	adds	r3, #1
 800831c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f7ff faa2 	bl	8007868 <SWAPBYTE>
 8008324:	4603      	mov	r3, r0
 8008326:	461a      	mov	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	80da      	strh	r2, [r3, #6]
}
 800832c:	bf00      	nop
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800833e:	2180      	movs	r1, #128	; 0x80
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 ffab 	bl	800929c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008346:	2100      	movs	r1, #0
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 ffa7 	bl	800929c <USBD_LL_StallEP>
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b086      	sub	sp, #24
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d036      	beq.n	80083da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008370:	6938      	ldr	r0, [r7, #16]
 8008372:	f000 f836 	bl	80083e2 <USBD_GetLen>
 8008376:	4603      	mov	r3, r0
 8008378:	3301      	adds	r3, #1
 800837a:	b29b      	uxth	r3, r3
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	b29a      	uxth	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008384:	7dfb      	ldrb	r3, [r7, #23]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	4413      	add	r3, r2
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	7812      	ldrb	r2, [r2, #0]
 800838e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	3301      	adds	r3, #1
 8008394:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	4413      	add	r3, r2
 800839c:	2203      	movs	r2, #3
 800839e:	701a      	strb	r2, [r3, #0]
  idx++;
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	3301      	adds	r3, #1
 80083a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083a6:	e013      	b.n	80083d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4413      	add	r3, r2
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	7812      	ldrb	r2, [r2, #0]
 80083b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	3301      	adds	r3, #1
 80083b8:	613b      	str	r3, [r7, #16]
    idx++;
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	3301      	adds	r3, #1
 80083be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	4413      	add	r3, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	3301      	adds	r3, #1
 80083ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e7      	bne.n	80083a8 <USBD_GetString+0x52>
 80083d8:	e000      	b.n	80083dc <USBD_GetString+0x86>
    return;
 80083da:	bf00      	nop
  }
}
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083f2:	e005      	b.n	8008400 <USBD_GetLen+0x1e>
  {
    len++;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	3301      	adds	r3, #1
 80083f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	3301      	adds	r3, #1
 80083fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1f5      	bne.n	80083f4 <USBD_GetLen+0x12>
  }

  return len;
 8008408:	7bfb      	ldrb	r3, [r7, #15]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2202      	movs	r2, #2
 8008426:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	2100      	movs	r1, #0
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 ffb6 	bl	80093ae <USBD_LL_Transmit>

  return USBD_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	2100      	movs	r1, #0
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 ffa5 	bl	80093ae <USBD_LL_Transmit>

  return USBD_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	60f8      	str	r0, [r7, #12]
 8008476:	60b9      	str	r1, [r7, #8]
 8008478:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	2100      	movs	r1, #0
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 ffb5 	bl	80093f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2204      	movs	r2, #4
 800849c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084a0:	2300      	movs	r3, #0
 80084a2:	2200      	movs	r2, #0
 80084a4:	2100      	movs	r1, #0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 ff81 	bl	80093ae <USBD_LL_Transmit>

  return USBD_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2205      	movs	r2, #5
 80084c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084c6:	2300      	movs	r3, #0
 80084c8:	2200      	movs	r2, #0
 80084ca:	2100      	movs	r1, #0
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 ff8f 	bl	80093f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af04      	add	r7, sp, #16
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80084e8:	230a      	movs	r3, #10
 80084ea:	9302      	str	r3, [sp, #8]
 80084ec:	2301      	movs	r3, #1
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	1cfb      	adds	r3, r7, #3
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	2301      	movs	r3, #1
 80084f6:	2200      	movs	r2, #0
 80084f8:	2178      	movs	r1, #120	; 0x78
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7fa ff46 	bl	800338c <HAL_I2C_Mem_Write>
 8008500:	4603      	mov	r3, r0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8008514:	2064      	movs	r0, #100	; 0x64
 8008516:	f7f9 f961 	bl	80017dc <HAL_Delay>
    int status = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800851e:	21ae      	movs	r1, #174	; 0xae
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff ffdb 	bl	80084dc <ssd1306_WriteCommand>
 8008526:	4603      	mov	r3, r0
 8008528:	461a      	mov	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4413      	add	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8008530:	2120      	movs	r1, #32
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff ffd2 	bl	80084dc <ssd1306_WriteCommand>
 8008538:	4603      	mov	r3, r0
 800853a:	461a      	mov	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4413      	add	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8008542:	2110      	movs	r1, #16
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff ffc9 	bl	80084dc <ssd1306_WriteCommand>
 800854a:	4603      	mov	r3, r0
 800854c:	461a      	mov	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4413      	add	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8008554:	21b0      	movs	r1, #176	; 0xb0
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff ffc0 	bl	80084dc <ssd1306_WriteCommand>
 800855c:	4603      	mov	r3, r0
 800855e:	461a      	mov	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8008566:	21c8      	movs	r1, #200	; 0xc8
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff ffb7 	bl	80084dc <ssd1306_WriteCommand>
 800856e:	4603      	mov	r3, r0
 8008570:	461a      	mov	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8008578:	2100      	movs	r1, #0
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7ff ffae 	bl	80084dc <ssd1306_WriteCommand>
 8008580:	4603      	mov	r3, r0
 8008582:	461a      	mov	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 800858a:	2110      	movs	r1, #16
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff ffa5 	bl	80084dc <ssd1306_WriteCommand>
 8008592:	4603      	mov	r3, r0
 8008594:	461a      	mov	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4413      	add	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 800859c:	2140      	movs	r1, #64	; 0x40
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff ff9c 	bl	80084dc <ssd1306_WriteCommand>
 80085a4:	4603      	mov	r3, r0
 80085a6:	461a      	mov	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4413      	add	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80085ae:	2181      	movs	r1, #129	; 0x81
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff ff93 	bl	80084dc <ssd1306_WriteCommand>
 80085b6:	4603      	mov	r3, r0
 80085b8:	461a      	mov	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);
 80085c0:	2140      	movs	r1, #64	; 0x40
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7ff ff8a 	bl	80084dc <ssd1306_WriteCommand>
 80085c8:	4603      	mov	r3, r0
 80085ca:	461a      	mov	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4413      	add	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80085d2:	21a1      	movs	r1, #161	; 0xa1
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff ff81 	bl	80084dc <ssd1306_WriteCommand>
 80085da:	4603      	mov	r3, r0
 80085dc:	461a      	mov	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	4413      	add	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80085e4:	21a6      	movs	r1, #166	; 0xa6
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff ff78 	bl	80084dc <ssd1306_WriteCommand>
 80085ec:	4603      	mov	r3, r0
 80085ee:	461a      	mov	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4413      	add	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80085f6:	21a8      	movs	r1, #168	; 0xa8
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff ff6f 	bl	80084dc <ssd1306_WriteCommand>
 80085fe:	4603      	mov	r3, r0
 8008600:	461a      	mov	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8008608:	213f      	movs	r1, #63	; 0x3f
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff ff66 	bl	80084dc <ssd1306_WriteCommand>
 8008610:	4603      	mov	r3, r0
 8008612:	461a      	mov	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4413      	add	r3, r2
 8008618:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800861a:	21a4      	movs	r1, #164	; 0xa4
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff ff5d 	bl	80084dc <ssd1306_WriteCommand>
 8008622:	4603      	mov	r3, r0
 8008624:	461a      	mov	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4413      	add	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 800862c:	21d3      	movs	r1, #211	; 0xd3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff ff54 	bl	80084dc <ssd1306_WriteCommand>
 8008634:	4603      	mov	r3, r0
 8008636:	461a      	mov	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800863e:	2100      	movs	r1, #0
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff ff4b 	bl	80084dc <ssd1306_WriteCommand>
 8008646:	4603      	mov	r3, r0
 8008648:	461a      	mov	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4413      	add	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8008650:	21d5      	movs	r1, #213	; 0xd5
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff ff42 	bl	80084dc <ssd1306_WriteCommand>
 8008658:	4603      	mov	r3, r0
 800865a:	461a      	mov	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8008662:	21f0      	movs	r1, #240	; 0xf0
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff ff39 	bl	80084dc <ssd1306_WriteCommand>
 800866a:	4603      	mov	r3, r0
 800866c:	461a      	mov	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	4413      	add	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8008674:	21d9      	movs	r1, #217	; 0xd9
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff ff30 	bl	80084dc <ssd1306_WriteCommand>
 800867c:	4603      	mov	r3, r0
 800867e:	461a      	mov	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4413      	add	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8008686:	2122      	movs	r1, #34	; 0x22
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff ff27 	bl	80084dc <ssd1306_WriteCommand>
 800868e:	4603      	mov	r3, r0
 8008690:	461a      	mov	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4413      	add	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8008698:	21da      	movs	r1, #218	; 0xda
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff ff1e 	bl	80084dc <ssd1306_WriteCommand>
 80086a0:	4603      	mov	r3, r0
 80086a2:	461a      	mov	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 80086aa:	2112      	movs	r1, #18
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff ff15 	bl	80084dc <ssd1306_WriteCommand>
 80086b2:	4603      	mov	r3, r0
 80086b4:	461a      	mov	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4413      	add	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80086bc:	21db      	movs	r1, #219	; 0xdb
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff ff0c 	bl	80084dc <ssd1306_WriteCommand>
 80086c4:	4603      	mov	r3, r0
 80086c6:	461a      	mov	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	4413      	add	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80086ce:	2120      	movs	r1, #32
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff ff03 	bl	80084dc <ssd1306_WriteCommand>
 80086d6:	4603      	mov	r3, r0
 80086d8:	461a      	mov	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4413      	add	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80086e0:	218d      	movs	r1, #141	; 0x8d
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff fefa 	bl	80084dc <ssd1306_WriteCommand>
 80086e8:	4603      	mov	r3, r0
 80086ea:	461a      	mov	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 80086f2:	2114      	movs	r1, #20
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff fef1 	bl	80084dc <ssd1306_WriteCommand>
 80086fa:	4603      	mov	r3, r0
 80086fc:	461a      	mov	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8008704:	21af      	movs	r1, #175	; 0xaf
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff fee8 	bl	80084dc <ssd1306_WriteCommand>
 800870c:	4603      	mov	r3, r0
 800870e:	461a      	mov	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4413      	add	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <ssd1306_Init+0x214>
        return 1;
 800871c:	2301      	movs	r3, #1
 800871e:	e00f      	b.n	8008740 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8008720:	2000      	movs	r0, #0
 8008722:	f000 f813 	bl	800874c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f834 	bl	8008794 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800872c:	4b06      	ldr	r3, [pc, #24]	; (8008748 <ssd1306_Init+0x23c>)
 800872e:	2200      	movs	r2, #0
 8008730:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8008732:	4b05      	ldr	r3, [pc, #20]	; (8008748 <ssd1306_Init+0x23c>)
 8008734:	2200      	movs	r2, #0
 8008736:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8008738:	4b03      	ldr	r3, [pc, #12]	; (8008748 <ssd1306_Init+0x23c>)
 800873a:	2201      	movs	r2, #1
 800873c:	715a      	strb	r2, [r3, #5]

    return 0;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20000748 	.word	0x20000748

0800874c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	4603      	mov	r3, r0
 8008754:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	e00d      	b.n	8008778 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <ssd1306_Fill+0x1a>
 8008762:	2100      	movs	r1, #0
 8008764:	e000      	b.n	8008768 <ssd1306_Fill+0x1c>
 8008766:	21ff      	movs	r1, #255	; 0xff
 8008768:	4a09      	ldr	r2, [pc, #36]	; (8008790 <ssd1306_Fill+0x44>)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	4413      	add	r3, r2
 800876e:	460a      	mov	r2, r1
 8008770:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	3301      	adds	r3, #1
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800877e:	d3ed      	bcc.n	800875c <ssd1306_Fill+0x10>
    }
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	20000348 	.word	0x20000348

08008794 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af04      	add	r7, sp, #16
 800879a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
 80087a0:	e020      	b.n	80087e4 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	3b50      	subs	r3, #80	; 0x50
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff fe96 	bl	80084dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 80087b0:	2100      	movs	r1, #0
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff fe92 	bl	80084dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80087b8:	2110      	movs	r1, #16
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fe8e 	bl	80084dc <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	01db      	lsls	r3, r3, #7
 80087c4:	4a0b      	ldr	r2, [pc, #44]	; (80087f4 <ssd1306_UpdateScreen+0x60>)
 80087c6:	4413      	add	r3, r2
 80087c8:	2264      	movs	r2, #100	; 0x64
 80087ca:	9202      	str	r2, [sp, #8]
 80087cc:	2280      	movs	r2, #128	; 0x80
 80087ce:	9201      	str	r2, [sp, #4]
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	2301      	movs	r3, #1
 80087d4:	2240      	movs	r2, #64	; 0x40
 80087d6:	2178      	movs	r1, #120	; 0x78
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7fa fdd7 	bl	800338c <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	3301      	adds	r3, #1
 80087e2:	73fb      	strb	r3, [r7, #15]
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	2b07      	cmp	r3, #7
 80087e8:	d9db      	bls.n	80087a2 <ssd1306_UpdateScreen+0xe>
    }
}
 80087ea:	bf00      	nop
 80087ec:	bf00      	nop
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20000348 	.word	0x20000348

080087f8 <ssd1306_WriteKnob>:

//
// Write a knob's values to the screen
//
void ssd1306_WriteKnob(I2C_HandleTypeDef *hi2c, Knob k) {
 80087f8:	b084      	sub	sp, #16
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b086      	sub	sp, #24
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t len_label = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	75bb      	strb	r3, [r7, #22]
	uint8_t x = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	75fb      	strb	r3, [r7, #23]

	char channel_string[4];
	char cc_string[4];
	char value_string[4];

	sprintf(channel_string, "%.2d", (int) k.channel);
 8008812:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008816:	461a      	mov	r2, r3
 8008818:	f107 0310 	add.w	r3, r7, #16
 800881c:	4950      	ldr	r1, [pc, #320]	; (8008960 <ssd1306_WriteKnob+0x168>)
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fe86 	bl	8009530 <siprintf>
	sprintf(cc_string, "%.3d", (int) k.cc);
 8008824:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008828:	461a      	mov	r2, r3
 800882a:	f107 030c 	add.w	r3, r7, #12
 800882e:	494d      	ldr	r1, [pc, #308]	; (8008964 <ssd1306_WriteKnob+0x16c>)
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fe7d 	bl	8009530 <siprintf>
	sprintf(value_string, "%.3d", (int) k.value);
 8008836:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800883a:	461a      	mov	r2, r3
 800883c:	f107 0308 	add.w	r3, r7, #8
 8008840:	4948      	ldr	r1, [pc, #288]	; (8008964 <ssd1306_WriteKnob+0x16c>)
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fe74 	bl	8009530 <siprintf>

	// Clear buffer
	ssd1306_Fill(Black);
 8008848:	2000      	movs	r0, #0
 800884a:	f7ff ff7f 	bl	800874c <ssd1306_Fill>

	// Draw top line
	ssd1306_SetCursor(0, 0);
 800884e:	2100      	movs	r1, #0
 8008850:	2000      	movs	r0, #0
 8008852:	f000 f995 	bl	8008b80 <ssd1306_SetCursor>
	ssd1306_WriteString(channel_string, Font_7x10, White);
 8008856:	4a44      	ldr	r2, [pc, #272]	; (8008968 <ssd1306_WriteKnob+0x170>)
 8008858:	f107 0010 	add.w	r0, r7, #16
 800885c:	2301      	movs	r3, #1
 800885e:	ca06      	ldmia	r2, {r1, r2}
 8008860:	f000 f968 	bl	8008b34 <ssd1306_WriteString>
	ssd1306_SetCursor(20, 0);
 8008864:	2100      	movs	r1, #0
 8008866:	2014      	movs	r0, #20
 8008868:	f000 f98a 	bl	8008b80 <ssd1306_SetCursor>
	ssd1306_WriteString(cc_string, Font_7x10, White);
 800886c:	4a3e      	ldr	r2, [pc, #248]	; (8008968 <ssd1306_WriteKnob+0x170>)
 800886e:	f107 000c 	add.w	r0, r7, #12
 8008872:	2301      	movs	r3, #1
 8008874:	ca06      	ldmia	r2, {r1, r2}
 8008876:	f000 f95d 	bl	8008b34 <ssd1306_WriteString>
	ssd1306_SetCursor(62, 0);
 800887a:	2100      	movs	r1, #0
 800887c:	203e      	movs	r0, #62	; 0x3e
 800887e:	f000 f97f 	bl	8008b80 <ssd1306_SetCursor>
	ssd1306_WriteString(">>>", Font_7x10, White);
 8008882:	4a39      	ldr	r2, [pc, #228]	; (8008968 <ssd1306_WriteKnob+0x170>)
 8008884:	2301      	movs	r3, #1
 8008886:	ca06      	ldmia	r2, {r1, r2}
 8008888:	4838      	ldr	r0, [pc, #224]	; (800896c <ssd1306_WriteKnob+0x174>)
 800888a:	f000 f953 	bl	8008b34 <ssd1306_WriteString>
	ssd1306_SetCursor(105, 0);
 800888e:	2100      	movs	r1, #0
 8008890:	2069      	movs	r0, #105	; 0x69
 8008892:	f000 f975 	bl	8008b80 <ssd1306_SetCursor>
	ssd1306_WriteString(value_string, Font_7x10, White);
 8008896:	4a34      	ldr	r2, [pc, #208]	; (8008968 <ssd1306_WriteKnob+0x170>)
 8008898:	f107 0008 	add.w	r0, r7, #8
 800889c:	2301      	movs	r3, #1
 800889e:	ca06      	ldmia	r2, {r1, r2}
 80088a0:	f000 f948 	bl	8008b34 <ssd1306_WriteString>

	// Draw first label
	len_label = strlen(k.label);
 80088a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088a8:	3302      	adds	r3, #2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7f7 fc98 	bl	80001e0 <strlen>
 80088b0:	4603      	mov	r3, r0
 80088b2:	75bb      	strb	r3, [r7, #22]
	x = ((14 - len_label) / 2) * 9;
 80088b4:	7dbb      	ldrb	r3, [r7, #22]
 80088b6:	f1c3 030e 	rsb	r3, r3, #14
 80088ba:	0fda      	lsrs	r2, r3, #31
 80088bc:	4413      	add	r3, r2
 80088be:	105b      	asrs	r3, r3, #1
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	00d2      	lsls	r2, r2, #3
 80088c6:	4413      	add	r3, r2
 80088c8:	75fb      	strb	r3, [r7, #23]
	if (len_label % 2 != 0) x += 5;
 80088ca:	7dbb      	ldrb	r3, [r7, #22]
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <ssd1306_WriteKnob+0xe4>
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	3305      	adds	r3, #5
 80088da:	75fb      	strb	r3, [r7, #23]
	ssd1306_SetCursor(x, 16);
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	2110      	movs	r1, #16
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 f94d 	bl	8008b80 <ssd1306_SetCursor>
	ssd1306_WriteString(k.label, Font_9x18, White);
 80088e6:	4a22      	ldr	r2, [pc, #136]	; (8008970 <ssd1306_WriteKnob+0x178>)
 80088e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088ec:	1c98      	adds	r0, r3, #2
 80088ee:	2301      	movs	r3, #1
 80088f0:	ca06      	ldmia	r2, {r1, r2}
 80088f2:	f000 f91f 	bl	8008b34 <ssd1306_WriteString>

	// Draw first label
	len_label = strlen(k.sub_label);
 80088f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088fa:	3311      	adds	r3, #17
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7f7 fc6f 	bl	80001e0 <strlen>
 8008902:	4603      	mov	r3, r0
 8008904:	75bb      	strb	r3, [r7, #22]
	x = ((14 - len_label) / 2) * 9;
 8008906:	7dbb      	ldrb	r3, [r7, #22]
 8008908:	f1c3 030e 	rsb	r3, r3, #14
 800890c:	0fda      	lsrs	r2, r3, #31
 800890e:	4413      	add	r3, r2
 8008910:	105b      	asrs	r3, r3, #1
 8008912:	b2db      	uxtb	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	00d2      	lsls	r2, r2, #3
 8008918:	4413      	add	r3, r2
 800891a:	75fb      	strb	r3, [r7, #23]
	if (len_label % 2 != 0) x += 5;
 800891c:	7dbb      	ldrb	r3, [r7, #22]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <ssd1306_WriteKnob+0x136>
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	3305      	adds	r3, #5
 800892c:	75fb      	strb	r3, [r7, #23]
	ssd1306_SetCursor(x, 40);
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	2128      	movs	r1, #40	; 0x28
 8008932:	4618      	mov	r0, r3
 8008934:	f000 f924 	bl	8008b80 <ssd1306_SetCursor>
	ssd1306_WriteString(k.sub_label, Font_9x18, White);
 8008938:	4a0d      	ldr	r2, [pc, #52]	; (8008970 <ssd1306_WriteKnob+0x178>)
 800893a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800893e:	f103 0011 	add.w	r0, r3, #17
 8008942:	2301      	movs	r3, #1
 8008944:	ca06      	ldmia	r2, {r1, r2}
 8008946:	f000 f8f5 	bl	8008b34 <ssd1306_WriteString>

	ssd1306_UpdateScreen(hi2c);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff ff22 	bl	8008794 <ssd1306_UpdateScreen>
}
 8008950:	bf00      	nop
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800895a:	b004      	add	sp, #16
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	08009da4 	.word	0x08009da4
 8008964:	08009dac 	.word	0x08009dac
 8008968:	20000154 	.word	0x20000154
 800896c:	08009db4 	.word	0x08009db4
 8008970:	2000015c 	.word	0x2000015c

08008974 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	71fb      	strb	r3, [r7, #7]
 800897e:	460b      	mov	r3, r1
 8008980:	71bb      	strb	r3, [r7, #6]
 8008982:	4613      	mov	r3, r2
 8008984:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8008986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800898a:	2b00      	cmp	r3, #0
 800898c:	db48      	blt.n	8008a20 <ssd1306_DrawPixel+0xac>
 800898e:	79bb      	ldrb	r3, [r7, #6]
 8008990:	2b3f      	cmp	r3, #63	; 0x3f
 8008992:	d845      	bhi.n	8008a20 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8008994:	4b25      	ldr	r3, [pc, #148]	; (8008a2c <ssd1306_DrawPixel+0xb8>)
 8008996:	791b      	ldrb	r3, [r3, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 800899c:	797b      	ldrb	r3, [r7, #5]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bf0c      	ite	eq
 80089a2:	2301      	moveq	r3, #1
 80089a4:	2300      	movne	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 80089aa:	797b      	ldrb	r3, [r7, #5]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d11a      	bne.n	80089e6 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80089b0:	79fa      	ldrb	r2, [r7, #7]
 80089b2:	79bb      	ldrb	r3, [r7, #6]
 80089b4:	08db      	lsrs	r3, r3, #3
 80089b6:	b2d8      	uxtb	r0, r3
 80089b8:	4603      	mov	r3, r0
 80089ba:	01db      	lsls	r3, r3, #7
 80089bc:	4413      	add	r3, r2
 80089be:	4a1c      	ldr	r2, [pc, #112]	; (8008a30 <ssd1306_DrawPixel+0xbc>)
 80089c0:	5cd3      	ldrb	r3, [r2, r3]
 80089c2:	b25a      	sxtb	r2, r3
 80089c4:	79bb      	ldrb	r3, [r7, #6]
 80089c6:	f003 0307 	and.w	r3, r3, #7
 80089ca:	2101      	movs	r1, #1
 80089cc:	fa01 f303 	lsl.w	r3, r1, r3
 80089d0:	b25b      	sxtb	r3, r3
 80089d2:	4313      	orrs	r3, r2
 80089d4:	b259      	sxtb	r1, r3
 80089d6:	79fa      	ldrb	r2, [r7, #7]
 80089d8:	4603      	mov	r3, r0
 80089da:	01db      	lsls	r3, r3, #7
 80089dc:	4413      	add	r3, r2
 80089de:	b2c9      	uxtb	r1, r1
 80089e0:	4a13      	ldr	r2, [pc, #76]	; (8008a30 <ssd1306_DrawPixel+0xbc>)
 80089e2:	54d1      	strb	r1, [r2, r3]
 80089e4:	e01d      	b.n	8008a22 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80089e6:	79fa      	ldrb	r2, [r7, #7]
 80089e8:	79bb      	ldrb	r3, [r7, #6]
 80089ea:	08db      	lsrs	r3, r3, #3
 80089ec:	b2d8      	uxtb	r0, r3
 80089ee:	4603      	mov	r3, r0
 80089f0:	01db      	lsls	r3, r3, #7
 80089f2:	4413      	add	r3, r2
 80089f4:	4a0e      	ldr	r2, [pc, #56]	; (8008a30 <ssd1306_DrawPixel+0xbc>)
 80089f6:	5cd3      	ldrb	r3, [r2, r3]
 80089f8:	b25a      	sxtb	r2, r3
 80089fa:	79bb      	ldrb	r3, [r7, #6]
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	2101      	movs	r1, #1
 8008a02:	fa01 f303 	lsl.w	r3, r1, r3
 8008a06:	b25b      	sxtb	r3, r3
 8008a08:	43db      	mvns	r3, r3
 8008a0a:	b25b      	sxtb	r3, r3
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	b259      	sxtb	r1, r3
 8008a10:	79fa      	ldrb	r2, [r7, #7]
 8008a12:	4603      	mov	r3, r0
 8008a14:	01db      	lsls	r3, r3, #7
 8008a16:	4413      	add	r3, r2
 8008a18:	b2c9      	uxtb	r1, r1
 8008a1a:	4a05      	ldr	r2, [pc, #20]	; (8008a30 <ssd1306_DrawPixel+0xbc>)
 8008a1c:	54d1      	strb	r1, [r2, r3]
 8008a1e:	e000      	b.n	8008a22 <ssd1306_DrawPixel+0xae>
        return;
 8008a20:	bf00      	nop
    }
}
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	20000748 	.word	0x20000748
 8008a30:	20000348 	.word	0x20000348

08008a34 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8008a34:	b590      	push	{r4, r7, lr}
 8008a36:	b089      	sub	sp, #36	; 0x24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	1d38      	adds	r0, r7, #4
 8008a3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8008a42:	461a      	mov	r2, r3
 8008a44:	4623      	mov	r3, r4
 8008a46:	73fb      	strb	r3, [r7, #15]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8008a4c:	4b38      	ldr	r3, [pc, #224]	; (8008b30 <ssd1306_WriteChar+0xfc>)
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	793b      	ldrb	r3, [r7, #4]
 8008a54:	4413      	add	r3, r2
 8008a56:	2b7f      	cmp	r3, #127	; 0x7f
 8008a58:	dc06      	bgt.n	8008a68 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8008a5a:	4b35      	ldr	r3, [pc, #212]	; (8008b30 <ssd1306_WriteChar+0xfc>)
 8008a5c:	885b      	ldrh	r3, [r3, #2]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	797b      	ldrb	r3, [r7, #5]
 8008a62:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8008a64:	2b3f      	cmp	r3, #63	; 0x3f
 8008a66:	dd01      	ble.n	8008a6c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e05d      	b.n	8008b28 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61fb      	str	r3, [r7, #28]
 8008a70:	e04c      	b.n	8008b0c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	3b20      	subs	r3, #32
 8008a78:	7979      	ldrb	r1, [r7, #5]
 8008a7a:	fb01 f303 	mul.w	r3, r1, r3
 8008a7e:	4619      	mov	r1, r3
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	440b      	add	r3, r1
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	4413      	add	r3, r2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61bb      	str	r3, [r7, #24]
 8008a90:	e034      	b.n	8008afc <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d012      	beq.n	8008ac8 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008aa2:	4b23      	ldr	r3, [pc, #140]	; (8008b30 <ssd1306_WriteChar+0xfc>)
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	4413      	add	r3, r2
 8008aae:	b2d8      	uxtb	r0, r3
 8008ab0:	4b1f      	ldr	r3, [pc, #124]	; (8008b30 <ssd1306_WriteChar+0xfc>)
 8008ab2:	885b      	ldrh	r3, [r3, #2]
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	4413      	add	r3, r2
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	7bba      	ldrb	r2, [r7, #14]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	f7ff ff57 	bl	8008974 <ssd1306_DrawPixel>
 8008ac6:	e016      	b.n	8008af6 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008ac8:	4b19      	ldr	r3, [pc, #100]	; (8008b30 <ssd1306_WriteChar+0xfc>)
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	4413      	add	r3, r2
 8008ad4:	b2d8      	uxtb	r0, r3
 8008ad6:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <ssd1306_WriteChar+0xfc>)
 8008ad8:	885b      	ldrh	r3, [r3, #2]
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	4413      	add	r3, r2
 8008ae2:	b2d9      	uxtb	r1, r3
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	bf0c      	ite	eq
 8008aea:	2301      	moveq	r3, #1
 8008aec:	2300      	movne	r3, #0
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	f7ff ff3f 	bl	8008974 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	3301      	adds	r3, #1
 8008afa:	61bb      	str	r3, [r7, #24]
 8008afc:	793b      	ldrb	r3, [r7, #4]
 8008afe:	461a      	mov	r2, r3
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d3c5      	bcc.n	8008a92 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	797b      	ldrb	r3, [r7, #5]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d3ad      	bcc.n	8008a72 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008b16:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <ssd1306_WriteChar+0xfc>)
 8008b18:	881a      	ldrh	r2, [r3, #0]
 8008b1a:	793b      	ldrb	r3, [r7, #4]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	4413      	add	r3, r2
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	4b03      	ldr	r3, [pc, #12]	; (8008b30 <ssd1306_WriteChar+0xfc>)
 8008b24:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3724      	adds	r7, #36	; 0x24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd90      	pop	{r4, r7, pc}
 8008b30:	20000748 	.word	0x20000748

08008b34 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	1d38      	adds	r0, r7, #4
 8008b3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8008b42:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8008b44:	e012      	b.n	8008b6c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	7818      	ldrb	r0, [r3, #0]
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	1d3a      	adds	r2, r7, #4
 8008b4e:	ca06      	ldmia	r2, {r1, r2}
 8008b50:	f7ff ff70 	bl	8008a34 <ssd1306_WriteChar>
 8008b54:	4603      	mov	r3, r0
 8008b56:	461a      	mov	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d002      	beq.n	8008b66 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	e008      	b.n	8008b78 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	60fb      	str	r3, [r7, #12]
    while (*str)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e8      	bne.n	8008b46 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	781b      	ldrb	r3, [r3, #0]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	460a      	mov	r2, r1
 8008b8a:	71fb      	strb	r3, [r7, #7]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008b90:	79fb      	ldrb	r3, [r7, #7]
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	4b05      	ldr	r3, [pc, #20]	; (8008bac <ssd1306_SetCursor+0x2c>)
 8008b96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8008b98:	79bb      	ldrb	r3, [r7, #6]
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	4b03      	ldr	r3, [pc, #12]	; (8008bac <ssd1306_SetCursor+0x2c>)
 8008b9e:	805a      	strh	r2, [r3, #2]
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	20000748 	.word	0x20000748

08008bb0 <MX_USB_DEVICE_Init>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	4912      	ldr	r1, [pc, #72]	; (8008c00 <MX_USB_DEVICE_Init+0x50>)
 8008bb8:	4812      	ldr	r0, [pc, #72]	; (8008c04 <MX_USB_DEVICE_Init+0x54>)
 8008bba:	f7fe fb44 	bl	8007246 <USBD_Init>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bc4:	f7f8 fbe5 	bl	8001392 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK)
 8008bc8:	490f      	ldr	r1, [pc, #60]	; (8008c08 <MX_USB_DEVICE_Init+0x58>)
 8008bca:	480e      	ldr	r0, [pc, #56]	; (8008c04 <MX_USB_DEVICE_Init+0x54>)
 8008bcc:	f7fe fb6b 	bl	80072a6 <USBD_RegisterClass>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bd6:	f7f8 fbdc 	bl	8001392 <Error_Handler>
  }
  if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK)
 8008bda:	490c      	ldr	r1, [pc, #48]	; (8008c0c <MX_USB_DEVICE_Init+0x5c>)
 8008bdc:	4809      	ldr	r0, [pc, #36]	; (8008c04 <MX_USB_DEVICE_Init+0x54>)
 8008bde:	f7fe fb1b 	bl	8007218 <USBD_Midi_RegisterInterface>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008be8:	f7f8 fbd3 	bl	8001392 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bec:	4805      	ldr	r0, [pc, #20]	; (8008c04 <MX_USB_DEVICE_Init+0x54>)
 8008bee:	f7fe fb81 	bl	80072f4 <USBD_Start>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008bf8:	f7f8 fbcb 	bl	8001392 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008bfc:	bf00      	nop
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20000164 	.word	0x20000164
 8008c04:	200024d0 	.word	0x200024d0
 8008c08:	200000a8 	.word	0x200000a8
 8008c0c:	200001b4 	.word	0x200001b4

08008c10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	6039      	str	r1, [r7, #0]
 8008c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2212      	movs	r2, #18
 8008c20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c22:	4b03      	ldr	r3, [pc, #12]	; (8008c30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	20000180 	.word	0x20000180

08008c34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	6039      	str	r1, [r7, #0]
 8008c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2204      	movs	r2, #4
 8008c44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c46:	4b03      	ldr	r3, [pc, #12]	; (8008c54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	20000194 	.word	0x20000194

08008c58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	6039      	str	r1, [r7, #0]
 8008c62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d105      	bne.n	8008c76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	4907      	ldr	r1, [pc, #28]	; (8008c8c <USBD_FS_ProductStrDescriptor+0x34>)
 8008c6e:	4808      	ldr	r0, [pc, #32]	; (8008c90 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c70:	f7ff fb71 	bl	8008356 <USBD_GetString>
 8008c74:	e004      	b.n	8008c80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	4904      	ldr	r1, [pc, #16]	; (8008c8c <USBD_FS_ProductStrDescriptor+0x34>)
 8008c7a:	4805      	ldr	r0, [pc, #20]	; (8008c90 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c7c:	f7ff fb6b 	bl	8008356 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c80:	4b02      	ldr	r3, [pc, #8]	; (8008c8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	200027a0 	.word	0x200027a0
 8008c90:	08009db8 	.word	0x08009db8

08008c94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	6039      	str	r1, [r7, #0]
 8008c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	4904      	ldr	r1, [pc, #16]	; (8008cb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ca4:	4804      	ldr	r0, [pc, #16]	; (8008cb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ca6:	f7ff fb56 	bl	8008356 <USBD_GetString>
  return USBD_StrDesc;
 8008caa:	4b02      	ldr	r3, [pc, #8]	; (8008cb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	200027a0 	.word	0x200027a0
 8008cb8:	08009dcc 	.word	0x08009dcc

08008cbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	6039      	str	r1, [r7, #0]
 8008cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	221a      	movs	r2, #26
 8008ccc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008cce:	f000 f843 	bl	8008d58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008cd2:	4b02      	ldr	r3, [pc, #8]	; (8008cdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20000198 	.word	0x20000198

08008ce0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	6039      	str	r1, [r7, #0]
 8008cea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d105      	bne.n	8008cfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	4907      	ldr	r1, [pc, #28]	; (8008d14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cf6:	4808      	ldr	r0, [pc, #32]	; (8008d18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cf8:	f7ff fb2d 	bl	8008356 <USBD_GetString>
 8008cfc:	e004      	b.n	8008d08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	4904      	ldr	r1, [pc, #16]	; (8008d14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d02:	4805      	ldr	r0, [pc, #20]	; (8008d18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d04:	f7ff fb27 	bl	8008356 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d08:	4b02      	ldr	r3, [pc, #8]	; (8008d14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	200027a0 	.word	0x200027a0
 8008d18:	08009de0 	.word	0x08009de0

08008d1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	6039      	str	r1, [r7, #0]
 8008d26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d105      	bne.n	8008d3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	4907      	ldr	r1, [pc, #28]	; (8008d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d32:	4808      	ldr	r0, [pc, #32]	; (8008d54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d34:	f7ff fb0f 	bl	8008356 <USBD_GetString>
 8008d38:	e004      	b.n	8008d44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	4904      	ldr	r1, [pc, #16]	; (8008d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d3e:	4805      	ldr	r0, [pc, #20]	; (8008d54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d40:	f7ff fb09 	bl	8008356 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	200027a0 	.word	0x200027a0
 8008d54:	08009df0 	.word	0x08009df0

08008d58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <Get_SerialNum+0x44>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d64:	4b0e      	ldr	r3, [pc, #56]	; (8008da0 <Get_SerialNum+0x48>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d6a:	4b0e      	ldr	r3, [pc, #56]	; (8008da4 <Get_SerialNum+0x4c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4413      	add	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d7e:	2208      	movs	r2, #8
 8008d80:	4909      	ldr	r1, [pc, #36]	; (8008da8 <Get_SerialNum+0x50>)
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 f814 	bl	8008db0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d88:	2204      	movs	r2, #4
 8008d8a:	4908      	ldr	r1, [pc, #32]	; (8008dac <Get_SerialNum+0x54>)
 8008d8c:	68b8      	ldr	r0, [r7, #8]
 8008d8e:	f000 f80f 	bl	8008db0 <IntToUnicode>
  }
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	1fff7a10 	.word	0x1fff7a10
 8008da0:	1fff7a14 	.word	0x1fff7a14
 8008da4:	1fff7a18 	.word	0x1fff7a18
 8008da8:	2000019a 	.word	0x2000019a
 8008dac:	200001aa 	.word	0x200001aa

08008db0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	75fb      	strb	r3, [r7, #23]
 8008dc6:	e027      	b.n	8008e18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	0f1b      	lsrs	r3, r3, #28
 8008dcc:	2b09      	cmp	r3, #9
 8008dce:	d80b      	bhi.n	8008de8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	0f1b      	lsrs	r3, r3, #28
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	4619      	mov	r1, r3
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	440b      	add	r3, r1
 8008de0:	3230      	adds	r2, #48	; 0x30
 8008de2:	b2d2      	uxtb	r2, r2
 8008de4:	701a      	strb	r2, [r3, #0]
 8008de6:	e00a      	b.n	8008dfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	0f1b      	lsrs	r3, r3, #28
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	005b      	lsls	r3, r3, #1
 8008df2:	4619      	mov	r1, r3
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	440b      	add	r3, r1
 8008df8:	3237      	adds	r2, #55	; 0x37
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	005b      	lsls	r3, r3, #1
 8008e08:	3301      	adds	r3, #1
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	2200      	movs	r2, #0
 8008e10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
 8008e14:	3301      	adds	r3, #1
 8008e16:	75fb      	strb	r3, [r7, #23]
 8008e18:	7dfa      	ldrb	r2, [r7, #23]
 8008e1a:	79fb      	ldrb	r3, [r7, #7]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d3d3      	bcc.n	8008dc8 <IntToUnicode+0x18>
  }
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 8008e2e:	b480      	push	{r7}
 8008e30:	b085      	sub	sp, #20
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]

	uint8_t chan = msg[1] & 0xf;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	f003 030f 	and.w	r3, r3, #15
 8008e42:	73fb      	strb	r3, [r7, #15]
	uint8_t msgtype = msg[1] & 0xf0;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3301      	adds	r3, #1
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	f023 030f 	bic.w	r3, r3, #15
 8008e4e:	73bb      	strb	r3, [r7, #14]
	uint8_t b1 =  msg[2];
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	789b      	ldrb	r3, [r3, #2]
 8008e54:	737b      	strb	r3, [r7, #13]
	uint8_t b2 =  msg[3];
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	78db      	ldrb	r3, [r3, #3]
 8008e5a:	733b      	strb	r3, [r7, #12]
	uint16_t b = ((b2 & 0x7f) << 7) | (b1 & 0x7f);
 8008e5c:	7b3b      	ldrb	r3, [r7, #12]
 8008e5e:	01db      	lsls	r3, r3, #7
 8008e60:	b21b      	sxth	r3, r3
 8008e62:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8008e66:	b21a      	sxth	r2, r3
 8008e68:	7b7b      	ldrb	r3, [r7, #13]
 8008e6a:	b21b      	sxth	r3, r3
 8008e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e70:	b21b      	sxth	r3, r3
 8008e72:	4313      	orrs	r3, r2
 8008e74:	b21b      	sxth	r3, r3
 8008e76:	817b      	strh	r3, [r7, #10]

	switch (msgtype) {
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	2be0      	cmp	r3, #224	; 0xe0
 8008e7c:	d012      	beq.n	8008ea4 <Midi_Receive+0x76>
 8008e7e:	2be0      	cmp	r3, #224	; 0xe0
 8008e80:	dc12      	bgt.n	8008ea8 <Midi_Receive+0x7a>
 8008e82:	2bd0      	cmp	r3, #208	; 0xd0
 8008e84:	d012      	beq.n	8008eac <Midi_Receive+0x7e>
 8008e86:	2bd0      	cmp	r3, #208	; 0xd0
 8008e88:	dc0e      	bgt.n	8008ea8 <Midi_Receive+0x7a>
 8008e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8008e8c:	d010      	beq.n	8008eb0 <Midi_Receive+0x82>
 8008e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8008e90:	dc0a      	bgt.n	8008ea8 <Midi_Receive+0x7a>
 8008e92:	2bb0      	cmp	r3, #176	; 0xb0
 8008e94:	d00e      	beq.n	8008eb4 <Midi_Receive+0x86>
 8008e96:	2bb0      	cmp	r3, #176	; 0xb0
 8008e98:	dc06      	bgt.n	8008ea8 <Midi_Receive+0x7a>
 8008e9a:	2b80      	cmp	r3, #128	; 0x80
 8008e9c:	d00c      	beq.n	8008eb8 <Midi_Receive+0x8a>
 8008e9e:	2b90      	cmp	r3, #144	; 0x90
 8008ea0:	d00c      	beq.n	8008ebc <Midi_Receive+0x8e>
		break;
	case 0xE0:
//		fluid_synth_pitch_bend(synth, chan, b);
		break;
	default:
		break;
 8008ea2:	e001      	b.n	8008ea8 <Midi_Receive+0x7a>
		break;
 8008ea4:	bf00      	nop
 8008ea6:	e00a      	b.n	8008ebe <Midi_Receive+0x90>
		break;
 8008ea8:	bf00      	nop
 8008eaa:	e008      	b.n	8008ebe <Midi_Receive+0x90>
		break;
 8008eac:	bf00      	nop
 8008eae:	e006      	b.n	8008ebe <Midi_Receive+0x90>
		break;
 8008eb0:	bf00      	nop
 8008eb2:	e004      	b.n	8008ebe <Midi_Receive+0x90>
		break;
 8008eb4:	bf00      	nop
 8008eb6:	e002      	b.n	8008ebe <Midi_Receive+0x90>
		break;
 8008eb8:	bf00      	nop
 8008eba:	e000      	b.n	8008ebe <Midi_Receive+0x90>
		break;
 8008ebc:	bf00      	nop
	}

	return 0;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	; 0x28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ed4:	f107 0314 	add.w	r3, r7, #20
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	605a      	str	r2, [r3, #4]
 8008ede:	609a      	str	r2, [r3, #8]
 8008ee0:	60da      	str	r2, [r3, #12]
 8008ee2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eec:	d13a      	bne.n	8008f64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eee:	2300      	movs	r3, #0
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	4b1e      	ldr	r3, [pc, #120]	; (8008f6c <HAL_PCD_MspInit+0xa0>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef6:	4a1d      	ldr	r2, [pc, #116]	; (8008f6c <HAL_PCD_MspInit+0xa0>)
 8008ef8:	f043 0301 	orr.w	r3, r3, #1
 8008efc:	6313      	str	r3, [r2, #48]	; 0x30
 8008efe:	4b1b      	ldr	r3, [pc, #108]	; (8008f6c <HAL_PCD_MspInit+0xa0>)
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	613b      	str	r3, [r7, #16]
 8008f08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8008f0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f10:	2302      	movs	r3, #2
 8008f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f1c:	230a      	movs	r3, #10
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f20:	f107 0314 	add.w	r3, r7, #20
 8008f24:	4619      	mov	r1, r3
 8008f26:	4812      	ldr	r0, [pc, #72]	; (8008f70 <HAL_PCD_MspInit+0xa4>)
 8008f28:	f7f9 fe6a 	bl	8002c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f2c:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <HAL_PCD_MspInit+0xa0>)
 8008f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f30:	4a0e      	ldr	r2, [pc, #56]	; (8008f6c <HAL_PCD_MspInit+0xa0>)
 8008f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f36:	6353      	str	r3, [r2, #52]	; 0x34
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	4b0b      	ldr	r3, [pc, #44]	; (8008f6c <HAL_PCD_MspInit+0xa0>)
 8008f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f40:	4a0a      	ldr	r2, [pc, #40]	; (8008f6c <HAL_PCD_MspInit+0xa0>)
 8008f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f46:	6453      	str	r3, [r2, #68]	; 0x44
 8008f48:	4b08      	ldr	r3, [pc, #32]	; (8008f6c <HAL_PCD_MspInit+0xa0>)
 8008f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f50:	60fb      	str	r3, [r7, #12]
 8008f52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f54:	2200      	movs	r2, #0
 8008f56:	2100      	movs	r1, #0
 8008f58:	2043      	movs	r0, #67	; 0x43
 8008f5a:	f7f9 fa3a 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f5e:	2043      	movs	r0, #67	; 0x43
 8008f60:	f7f9 fa53 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f64:	bf00      	nop
 8008f66:	3728      	adds	r7, #40	; 0x28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	40023800 	.word	0x40023800
 8008f70:	40020000 	.word	0x40020000

08008f74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	f7fe f9fd 	bl	800738a <USBD_LL_SetupStage>
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	6879      	ldr	r1, [r7, #4]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	1a9b      	subs	r3, r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	78fb      	ldrb	r3, [r7, #3]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	f7fe fa37 	bl	8007434 <USBD_LL_DataOutStage>
}
 8008fc6:	bf00      	nop
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008fe0:	78fa      	ldrb	r2, [r7, #3]
 8008fe2:	6879      	ldr	r1, [r7, #4]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	1a9b      	subs	r3, r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	440b      	add	r3, r1
 8008fee:	3348      	adds	r3, #72	; 0x48
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	78fb      	ldrb	r3, [r7, #3]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	f7fe fa80 	bl	80074fa <USBD_LL_DataInStage>
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe fb94 	bl	800773e <USBD_LL_SOF>
}
 8009016:	bf00      	nop
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009026:	2301      	movs	r3, #1
 8009028:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	2b02      	cmp	r3, #2
 8009030:	d001      	beq.n	8009036 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009032:	f7f8 f9ae 	bl	8001392 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800903c:	7bfa      	ldrb	r2, [r7, #15]
 800903e:	4611      	mov	r1, r2
 8009040:	4618      	mov	r0, r3
 8009042:	f7fe fb3e 	bl	80076c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800904c:	4618      	mov	r0, r3
 800904e:	f7fe faea 	bl	8007626 <USBD_LL_Reset>
}
 8009052:	bf00      	nop
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
	...

0800905c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fb39 	bl	80076e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	6812      	ldr	r2, [r2, #0]
 800907e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009082:	f043 0301 	orr.w	r3, r3, #1
 8009086:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009090:	4b04      	ldr	r3, [pc, #16]	; (80090a4 <HAL_PCD_SuspendCallback+0x48>)
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	4a03      	ldr	r2, [pc, #12]	; (80090a4 <HAL_PCD_SuspendCallback+0x48>)
 8009096:	f043 0306 	orr.w	r3, r3, #6
 800909a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800909c:	bf00      	nop
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	e000ed00 	.word	0xe000ed00

080090a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe fb29 	bl	800770e <USBD_LL_Resume>
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090d6:	78fa      	ldrb	r2, [r7, #3]
 80090d8:	4611      	mov	r1, r2
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe fb77 	bl	80077ce <USBD_LL_IsoOUTIncomplete>
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090fa:	78fa      	ldrb	r2, [r7, #3]
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fb3f 	bl	8007782 <USBD_LL_IsoINIncomplete>
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fb7d 	bl	800781a <USBD_LL_DevConnected>
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe fb7a 	bl	8007830 <USBD_LL_DevDisconnected>
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d13c      	bne.n	80091ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009154:	4a20      	ldr	r2, [pc, #128]	; (80091d8 <USBD_LL_Init+0x94>)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a1e      	ldr	r2, [pc, #120]	; (80091d8 <USBD_LL_Init+0x94>)
 8009160:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009164:	4b1c      	ldr	r3, [pc, #112]	; (80091d8 <USBD_LL_Init+0x94>)
 8009166:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800916a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800916c:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <USBD_LL_Init+0x94>)
 800916e:	2204      	movs	r2, #4
 8009170:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009172:	4b19      	ldr	r3, [pc, #100]	; (80091d8 <USBD_LL_Init+0x94>)
 8009174:	2202      	movs	r2, #2
 8009176:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009178:	4b17      	ldr	r3, [pc, #92]	; (80091d8 <USBD_LL_Init+0x94>)
 800917a:	2200      	movs	r2, #0
 800917c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800917e:	4b16      	ldr	r3, [pc, #88]	; (80091d8 <USBD_LL_Init+0x94>)
 8009180:	2202      	movs	r2, #2
 8009182:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009184:	4b14      	ldr	r3, [pc, #80]	; (80091d8 <USBD_LL_Init+0x94>)
 8009186:	2200      	movs	r2, #0
 8009188:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800918a:	4b13      	ldr	r3, [pc, #76]	; (80091d8 <USBD_LL_Init+0x94>)
 800918c:	2200      	movs	r2, #0
 800918e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009190:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <USBD_LL_Init+0x94>)
 8009192:	2200      	movs	r2, #0
 8009194:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009196:	4b10      	ldr	r3, [pc, #64]	; (80091d8 <USBD_LL_Init+0x94>)
 8009198:	2200      	movs	r2, #0
 800919a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800919c:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <USBD_LL_Init+0x94>)
 800919e:	2200      	movs	r2, #0
 80091a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091a2:	480d      	ldr	r0, [pc, #52]	; (80091d8 <USBD_LL_Init+0x94>)
 80091a4:	f7fa fc8b 	bl	8003abe <HAL_PCD_Init>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80091ae:	f7f8 f8f0 	bl	8001392 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091b2:	2180      	movs	r1, #128	; 0x80
 80091b4:	4808      	ldr	r0, [pc, #32]	; (80091d8 <USBD_LL_Init+0x94>)
 80091b6:	f7fb fde8 	bl	8004d8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091ba:	2240      	movs	r2, #64	; 0x40
 80091bc:	2100      	movs	r1, #0
 80091be:	4806      	ldr	r0, [pc, #24]	; (80091d8 <USBD_LL_Init+0x94>)
 80091c0:	f7fb fd9c 	bl	8004cfc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091c4:	2280      	movs	r2, #128	; 0x80
 80091c6:	2101      	movs	r1, #1
 80091c8:	4803      	ldr	r0, [pc, #12]	; (80091d8 <USBD_LL_Init+0x94>)
 80091ca:	f7fb fd97 	bl	8004cfc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	200029a0 	.word	0x200029a0

080091dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fa fd80 	bl	8003cf8 <HAL_PCD_Start>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 f938 	bl	8009474 <USBD_Get_USB_Status>
 8009204:	4603      	mov	r3, r0
 8009206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009208:	7bbb      	ldrb	r3, [r7, #14]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	4608      	mov	r0, r1
 800921c:	4611      	mov	r1, r2
 800921e:	461a      	mov	r2, r3
 8009220:	4603      	mov	r3, r0
 8009222:	70fb      	strb	r3, [r7, #3]
 8009224:	460b      	mov	r3, r1
 8009226:	70bb      	strb	r3, [r7, #2]
 8009228:	4613      	mov	r3, r2
 800922a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800923a:	78bb      	ldrb	r3, [r7, #2]
 800923c:	883a      	ldrh	r2, [r7, #0]
 800923e:	78f9      	ldrb	r1, [r7, #3]
 8009240:	f7fb f964 	bl	800450c <HAL_PCD_EP_Open>
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	4618      	mov	r0, r3
 800924c:	f000 f912 	bl	8009474 <USBD_Get_USB_Status>
 8009250:	4603      	mov	r3, r0
 8009252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009254:	7bbb      	ldrb	r3, [r7, #14]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7fb f9ad 	bl	80045dc <HAL_PCD_EP_Close>
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	4618      	mov	r0, r3
 800928a:	f000 f8f3 	bl	8009474 <USBD_Get_USB_Status>
 800928e:	4603      	mov	r3, r0
 8009290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009292:	7bbb      	ldrb	r3, [r7, #14]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fb fa85 	bl	80047ca <HAL_PCD_EP_SetStall>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 f8d4 	bl	8009474 <USBD_Get_USB_Status>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	460b      	mov	r3, r1
 80092e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092f4:	78fa      	ldrb	r2, [r7, #3]
 80092f6:	4611      	mov	r1, r2
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fb faca 	bl	8004892 <HAL_PCD_EP_ClrStall>
 80092fe:	4603      	mov	r3, r0
 8009300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f8b5 	bl	8009474 <USBD_Get_USB_Status>
 800930a:	4603      	mov	r3, r0
 800930c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800930e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800932a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800932c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009330:	2b00      	cmp	r3, #0
 8009332:	da0b      	bge.n	800934c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800933a:	68f9      	ldr	r1, [r7, #12]
 800933c:	4613      	mov	r3, r2
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	1a9b      	subs	r3, r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	440b      	add	r3, r1
 8009346:	333e      	adds	r3, #62	; 0x3e
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	e00b      	b.n	8009364 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	4613      	mov	r3, r2
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	1a9b      	subs	r3, r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009362:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009364:	4618      	mov	r0, r3
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800938a:	78fa      	ldrb	r2, [r7, #3]
 800938c:	4611      	mov	r1, r2
 800938e:	4618      	mov	r0, r3
 8009390:	f7fb f897 	bl	80044c2 <HAL_PCD_SetAddress>
 8009394:	4603      	mov	r3, r0
 8009396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 f86a 	bl	8009474 <USBD_Get_USB_Status>
 80093a0:	4603      	mov	r3, r0
 80093a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b086      	sub	sp, #24
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
 80093ba:	460b      	mov	r3, r1
 80093bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093cc:	7af9      	ldrb	r1, [r7, #11]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	f7fb f9b0 	bl	8004736 <HAL_PCD_EP_Transmit>
 80093d6:	4603      	mov	r3, r0
 80093d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 f849 	bl	8009474 <USBD_Get_USB_Status>
 80093e2:	4603      	mov	r3, r0
 80093e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	607a      	str	r2, [r7, #4]
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	460b      	mov	r3, r1
 80093fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800940e:	7af9      	ldrb	r1, [r7, #11]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	f7fb f92c 	bl	8004670 <HAL_PCD_EP_Receive>
 8009418:	4603      	mov	r3, r0
 800941a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 f828 	bl	8009474 <USBD_Get_USB_Status>
 8009424:	4603      	mov	r3, r0
 8009426:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009428:	7dbb      	ldrb	r3, [r7, #22]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	460b      	mov	r3, r1
 800943c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009444:	78fa      	ldrb	r2, [r7, #3]
 8009446:	4611      	mov	r1, r2
 8009448:	4618      	mov	r0, r3
 800944a:	f7fb f95c 	bl	8004706 <HAL_PCD_EP_GetRxCount>
 800944e:	4603      	mov	r3, r0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009460:	4b03      	ldr	r3, [pc, #12]	; (8009470 <USBD_static_malloc+0x18>)
}
 8009462:	4618      	mov	r0, r3
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	20000750 	.word	0x20000750

08009474 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	2b03      	cmp	r3, #3
 8009486:	d817      	bhi.n	80094b8 <USBD_Get_USB_Status+0x44>
 8009488:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <USBD_Get_USB_Status+0x1c>)
 800948a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948e:	bf00      	nop
 8009490:	080094a1 	.word	0x080094a1
 8009494:	080094a7 	.word	0x080094a7
 8009498:	080094ad 	.word	0x080094ad
 800949c:	080094b3 	.word	0x080094b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	73fb      	strb	r3, [r7, #15]
    break;
 80094a4:	e00b      	b.n	80094be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094a6:	2303      	movs	r3, #3
 80094a8:	73fb      	strb	r3, [r7, #15]
    break;
 80094aa:	e008      	b.n	80094be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094ac:	2301      	movs	r3, #1
 80094ae:	73fb      	strb	r3, [r7, #15]
    break;
 80094b0:	e005      	b.n	80094be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094b2:	2303      	movs	r3, #3
 80094b4:	73fb      	strb	r3, [r7, #15]
    break;
 80094b6:	e002      	b.n	80094be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094b8:	2303      	movs	r3, #3
 80094ba:	73fb      	strb	r3, [r7, #15]
    break;
 80094bc:	bf00      	nop
  }
  return usb_status;
 80094be:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <__errno>:
 80094cc:	4b01      	ldr	r3, [pc, #4]	; (80094d4 <__errno+0x8>)
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	200001b8 	.word	0x200001b8

080094d8 <__libc_init_array>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	4d0d      	ldr	r5, [pc, #52]	; (8009510 <__libc_init_array+0x38>)
 80094dc:	4c0d      	ldr	r4, [pc, #52]	; (8009514 <__libc_init_array+0x3c>)
 80094de:	1b64      	subs	r4, r4, r5
 80094e0:	10a4      	asrs	r4, r4, #2
 80094e2:	2600      	movs	r6, #0
 80094e4:	42a6      	cmp	r6, r4
 80094e6:	d109      	bne.n	80094fc <__libc_init_array+0x24>
 80094e8:	4d0b      	ldr	r5, [pc, #44]	; (8009518 <__libc_init_array+0x40>)
 80094ea:	4c0c      	ldr	r4, [pc, #48]	; (800951c <__libc_init_array+0x44>)
 80094ec:	f000 fc4e 	bl	8009d8c <_init>
 80094f0:	1b64      	subs	r4, r4, r5
 80094f2:	10a4      	asrs	r4, r4, #2
 80094f4:	2600      	movs	r6, #0
 80094f6:	42a6      	cmp	r6, r4
 80094f8:	d105      	bne.n	8009506 <__libc_init_array+0x2e>
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009500:	4798      	blx	r3
 8009502:	3601      	adds	r6, #1
 8009504:	e7ee      	b.n	80094e4 <__libc_init_array+0xc>
 8009506:	f855 3b04 	ldr.w	r3, [r5], #4
 800950a:	4798      	blx	r3
 800950c:	3601      	adds	r6, #1
 800950e:	e7f2      	b.n	80094f6 <__libc_init_array+0x1e>
 8009510:	0800b384 	.word	0x0800b384
 8009514:	0800b384 	.word	0x0800b384
 8009518:	0800b384 	.word	0x0800b384
 800951c:	0800b388 	.word	0x0800b388

08009520 <memset>:
 8009520:	4402      	add	r2, r0
 8009522:	4603      	mov	r3, r0
 8009524:	4293      	cmp	r3, r2
 8009526:	d100      	bne.n	800952a <memset+0xa>
 8009528:	4770      	bx	lr
 800952a:	f803 1b01 	strb.w	r1, [r3], #1
 800952e:	e7f9      	b.n	8009524 <memset+0x4>

08009530 <siprintf>:
 8009530:	b40e      	push	{r1, r2, r3}
 8009532:	b500      	push	{lr}
 8009534:	b09c      	sub	sp, #112	; 0x70
 8009536:	ab1d      	add	r3, sp, #116	; 0x74
 8009538:	9002      	str	r0, [sp, #8]
 800953a:	9006      	str	r0, [sp, #24]
 800953c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009540:	4809      	ldr	r0, [pc, #36]	; (8009568 <siprintf+0x38>)
 8009542:	9107      	str	r1, [sp, #28]
 8009544:	9104      	str	r1, [sp, #16]
 8009546:	4909      	ldr	r1, [pc, #36]	; (800956c <siprintf+0x3c>)
 8009548:	f853 2b04 	ldr.w	r2, [r3], #4
 800954c:	9105      	str	r1, [sp, #20]
 800954e:	6800      	ldr	r0, [r0, #0]
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	a902      	add	r1, sp, #8
 8009554:	f000 f914 	bl	8009780 <_svfiprintf_r>
 8009558:	9b02      	ldr	r3, [sp, #8]
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
 800955e:	b01c      	add	sp, #112	; 0x70
 8009560:	f85d eb04 	ldr.w	lr, [sp], #4
 8009564:	b003      	add	sp, #12
 8009566:	4770      	bx	lr
 8009568:	200001b8 	.word	0x200001b8
 800956c:	ffff0208 	.word	0xffff0208

08009570 <__retarget_lock_acquire_recursive>:
 8009570:	4770      	bx	lr

08009572 <__retarget_lock_release_recursive>:
 8009572:	4770      	bx	lr

08009574 <_free_r>:
 8009574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009576:	2900      	cmp	r1, #0
 8009578:	d048      	beq.n	800960c <_free_r+0x98>
 800957a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800957e:	9001      	str	r0, [sp, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	f1a1 0404 	sub.w	r4, r1, #4
 8009586:	bfb8      	it	lt
 8009588:	18e4      	addlt	r4, r4, r3
 800958a:	f000 fbc5 	bl	8009d18 <__malloc_lock>
 800958e:	4a20      	ldr	r2, [pc, #128]	; (8009610 <_free_r+0x9c>)
 8009590:	9801      	ldr	r0, [sp, #4]
 8009592:	6813      	ldr	r3, [r2, #0]
 8009594:	4615      	mov	r5, r2
 8009596:	b933      	cbnz	r3, 80095a6 <_free_r+0x32>
 8009598:	6063      	str	r3, [r4, #4]
 800959a:	6014      	str	r4, [r2, #0]
 800959c:	b003      	add	sp, #12
 800959e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095a2:	f000 bbbf 	b.w	8009d24 <__malloc_unlock>
 80095a6:	42a3      	cmp	r3, r4
 80095a8:	d90b      	bls.n	80095c2 <_free_r+0x4e>
 80095aa:	6821      	ldr	r1, [r4, #0]
 80095ac:	1862      	adds	r2, r4, r1
 80095ae:	4293      	cmp	r3, r2
 80095b0:	bf04      	itt	eq
 80095b2:	681a      	ldreq	r2, [r3, #0]
 80095b4:	685b      	ldreq	r3, [r3, #4]
 80095b6:	6063      	str	r3, [r4, #4]
 80095b8:	bf04      	itt	eq
 80095ba:	1852      	addeq	r2, r2, r1
 80095bc:	6022      	streq	r2, [r4, #0]
 80095be:	602c      	str	r4, [r5, #0]
 80095c0:	e7ec      	b.n	800959c <_free_r+0x28>
 80095c2:	461a      	mov	r2, r3
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	b10b      	cbz	r3, 80095cc <_free_r+0x58>
 80095c8:	42a3      	cmp	r3, r4
 80095ca:	d9fa      	bls.n	80095c2 <_free_r+0x4e>
 80095cc:	6811      	ldr	r1, [r2, #0]
 80095ce:	1855      	adds	r5, r2, r1
 80095d0:	42a5      	cmp	r5, r4
 80095d2:	d10b      	bne.n	80095ec <_free_r+0x78>
 80095d4:	6824      	ldr	r4, [r4, #0]
 80095d6:	4421      	add	r1, r4
 80095d8:	1854      	adds	r4, r2, r1
 80095da:	42a3      	cmp	r3, r4
 80095dc:	6011      	str	r1, [r2, #0]
 80095de:	d1dd      	bne.n	800959c <_free_r+0x28>
 80095e0:	681c      	ldr	r4, [r3, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	6053      	str	r3, [r2, #4]
 80095e6:	4421      	add	r1, r4
 80095e8:	6011      	str	r1, [r2, #0]
 80095ea:	e7d7      	b.n	800959c <_free_r+0x28>
 80095ec:	d902      	bls.n	80095f4 <_free_r+0x80>
 80095ee:	230c      	movs	r3, #12
 80095f0:	6003      	str	r3, [r0, #0]
 80095f2:	e7d3      	b.n	800959c <_free_r+0x28>
 80095f4:	6825      	ldr	r5, [r4, #0]
 80095f6:	1961      	adds	r1, r4, r5
 80095f8:	428b      	cmp	r3, r1
 80095fa:	bf04      	itt	eq
 80095fc:	6819      	ldreq	r1, [r3, #0]
 80095fe:	685b      	ldreq	r3, [r3, #4]
 8009600:	6063      	str	r3, [r4, #4]
 8009602:	bf04      	itt	eq
 8009604:	1949      	addeq	r1, r1, r5
 8009606:	6021      	streq	r1, [r4, #0]
 8009608:	6054      	str	r4, [r2, #4]
 800960a:	e7c7      	b.n	800959c <_free_r+0x28>
 800960c:	b003      	add	sp, #12
 800960e:	bd30      	pop	{r4, r5, pc}
 8009610:	20002324 	.word	0x20002324

08009614 <_malloc_r>:
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	1ccd      	adds	r5, r1, #3
 8009618:	f025 0503 	bic.w	r5, r5, #3
 800961c:	3508      	adds	r5, #8
 800961e:	2d0c      	cmp	r5, #12
 8009620:	bf38      	it	cc
 8009622:	250c      	movcc	r5, #12
 8009624:	2d00      	cmp	r5, #0
 8009626:	4606      	mov	r6, r0
 8009628:	db01      	blt.n	800962e <_malloc_r+0x1a>
 800962a:	42a9      	cmp	r1, r5
 800962c:	d903      	bls.n	8009636 <_malloc_r+0x22>
 800962e:	230c      	movs	r3, #12
 8009630:	6033      	str	r3, [r6, #0]
 8009632:	2000      	movs	r0, #0
 8009634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009636:	f000 fb6f 	bl	8009d18 <__malloc_lock>
 800963a:	4921      	ldr	r1, [pc, #132]	; (80096c0 <_malloc_r+0xac>)
 800963c:	680a      	ldr	r2, [r1, #0]
 800963e:	4614      	mov	r4, r2
 8009640:	b99c      	cbnz	r4, 800966a <_malloc_r+0x56>
 8009642:	4f20      	ldr	r7, [pc, #128]	; (80096c4 <_malloc_r+0xb0>)
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	b923      	cbnz	r3, 8009652 <_malloc_r+0x3e>
 8009648:	4621      	mov	r1, r4
 800964a:	4630      	mov	r0, r6
 800964c:	f000 fb2c 	bl	8009ca8 <_sbrk_r>
 8009650:	6038      	str	r0, [r7, #0]
 8009652:	4629      	mov	r1, r5
 8009654:	4630      	mov	r0, r6
 8009656:	f000 fb27 	bl	8009ca8 <_sbrk_r>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	d123      	bne.n	80096a6 <_malloc_r+0x92>
 800965e:	230c      	movs	r3, #12
 8009660:	6033      	str	r3, [r6, #0]
 8009662:	4630      	mov	r0, r6
 8009664:	f000 fb5e 	bl	8009d24 <__malloc_unlock>
 8009668:	e7e3      	b.n	8009632 <_malloc_r+0x1e>
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	1b5b      	subs	r3, r3, r5
 800966e:	d417      	bmi.n	80096a0 <_malloc_r+0x8c>
 8009670:	2b0b      	cmp	r3, #11
 8009672:	d903      	bls.n	800967c <_malloc_r+0x68>
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	441c      	add	r4, r3
 8009678:	6025      	str	r5, [r4, #0]
 800967a:	e004      	b.n	8009686 <_malloc_r+0x72>
 800967c:	6863      	ldr	r3, [r4, #4]
 800967e:	42a2      	cmp	r2, r4
 8009680:	bf0c      	ite	eq
 8009682:	600b      	streq	r3, [r1, #0]
 8009684:	6053      	strne	r3, [r2, #4]
 8009686:	4630      	mov	r0, r6
 8009688:	f000 fb4c 	bl	8009d24 <__malloc_unlock>
 800968c:	f104 000b 	add.w	r0, r4, #11
 8009690:	1d23      	adds	r3, r4, #4
 8009692:	f020 0007 	bic.w	r0, r0, #7
 8009696:	1ac2      	subs	r2, r0, r3
 8009698:	d0cc      	beq.n	8009634 <_malloc_r+0x20>
 800969a:	1a1b      	subs	r3, r3, r0
 800969c:	50a3      	str	r3, [r4, r2]
 800969e:	e7c9      	b.n	8009634 <_malloc_r+0x20>
 80096a0:	4622      	mov	r2, r4
 80096a2:	6864      	ldr	r4, [r4, #4]
 80096a4:	e7cc      	b.n	8009640 <_malloc_r+0x2c>
 80096a6:	1cc4      	adds	r4, r0, #3
 80096a8:	f024 0403 	bic.w	r4, r4, #3
 80096ac:	42a0      	cmp	r0, r4
 80096ae:	d0e3      	beq.n	8009678 <_malloc_r+0x64>
 80096b0:	1a21      	subs	r1, r4, r0
 80096b2:	4630      	mov	r0, r6
 80096b4:	f000 faf8 	bl	8009ca8 <_sbrk_r>
 80096b8:	3001      	adds	r0, #1
 80096ba:	d1dd      	bne.n	8009678 <_malloc_r+0x64>
 80096bc:	e7cf      	b.n	800965e <_malloc_r+0x4a>
 80096be:	bf00      	nop
 80096c0:	20002324 	.word	0x20002324
 80096c4:	20002328 	.word	0x20002328

080096c8 <__ssputs_r>:
 80096c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096cc:	688e      	ldr	r6, [r1, #8]
 80096ce:	429e      	cmp	r6, r3
 80096d0:	4682      	mov	sl, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	4690      	mov	r8, r2
 80096d6:	461f      	mov	r7, r3
 80096d8:	d838      	bhi.n	800974c <__ssputs_r+0x84>
 80096da:	898a      	ldrh	r2, [r1, #12]
 80096dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096e0:	d032      	beq.n	8009748 <__ssputs_r+0x80>
 80096e2:	6825      	ldr	r5, [r4, #0]
 80096e4:	6909      	ldr	r1, [r1, #16]
 80096e6:	eba5 0901 	sub.w	r9, r5, r1
 80096ea:	6965      	ldr	r5, [r4, #20]
 80096ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096f4:	3301      	adds	r3, #1
 80096f6:	444b      	add	r3, r9
 80096f8:	106d      	asrs	r5, r5, #1
 80096fa:	429d      	cmp	r5, r3
 80096fc:	bf38      	it	cc
 80096fe:	461d      	movcc	r5, r3
 8009700:	0553      	lsls	r3, r2, #21
 8009702:	d531      	bpl.n	8009768 <__ssputs_r+0xa0>
 8009704:	4629      	mov	r1, r5
 8009706:	f7ff ff85 	bl	8009614 <_malloc_r>
 800970a:	4606      	mov	r6, r0
 800970c:	b950      	cbnz	r0, 8009724 <__ssputs_r+0x5c>
 800970e:	230c      	movs	r3, #12
 8009710:	f8ca 3000 	str.w	r3, [sl]
 8009714:	89a3      	ldrh	r3, [r4, #12]
 8009716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800971a:	81a3      	strh	r3, [r4, #12]
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009724:	6921      	ldr	r1, [r4, #16]
 8009726:	464a      	mov	r2, r9
 8009728:	f000 face 	bl	8009cc8 <memcpy>
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009736:	81a3      	strh	r3, [r4, #12]
 8009738:	6126      	str	r6, [r4, #16]
 800973a:	6165      	str	r5, [r4, #20]
 800973c:	444e      	add	r6, r9
 800973e:	eba5 0509 	sub.w	r5, r5, r9
 8009742:	6026      	str	r6, [r4, #0]
 8009744:	60a5      	str	r5, [r4, #8]
 8009746:	463e      	mov	r6, r7
 8009748:	42be      	cmp	r6, r7
 800974a:	d900      	bls.n	800974e <__ssputs_r+0x86>
 800974c:	463e      	mov	r6, r7
 800974e:	4632      	mov	r2, r6
 8009750:	6820      	ldr	r0, [r4, #0]
 8009752:	4641      	mov	r1, r8
 8009754:	f000 fac6 	bl	8009ce4 <memmove>
 8009758:	68a3      	ldr	r3, [r4, #8]
 800975a:	6822      	ldr	r2, [r4, #0]
 800975c:	1b9b      	subs	r3, r3, r6
 800975e:	4432      	add	r2, r6
 8009760:	60a3      	str	r3, [r4, #8]
 8009762:	6022      	str	r2, [r4, #0]
 8009764:	2000      	movs	r0, #0
 8009766:	e7db      	b.n	8009720 <__ssputs_r+0x58>
 8009768:	462a      	mov	r2, r5
 800976a:	f000 fae1 	bl	8009d30 <_realloc_r>
 800976e:	4606      	mov	r6, r0
 8009770:	2800      	cmp	r0, #0
 8009772:	d1e1      	bne.n	8009738 <__ssputs_r+0x70>
 8009774:	6921      	ldr	r1, [r4, #16]
 8009776:	4650      	mov	r0, sl
 8009778:	f7ff fefc 	bl	8009574 <_free_r>
 800977c:	e7c7      	b.n	800970e <__ssputs_r+0x46>
	...

08009780 <_svfiprintf_r>:
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	4698      	mov	r8, r3
 8009786:	898b      	ldrh	r3, [r1, #12]
 8009788:	061b      	lsls	r3, r3, #24
 800978a:	b09d      	sub	sp, #116	; 0x74
 800978c:	4607      	mov	r7, r0
 800978e:	460d      	mov	r5, r1
 8009790:	4614      	mov	r4, r2
 8009792:	d50e      	bpl.n	80097b2 <_svfiprintf_r+0x32>
 8009794:	690b      	ldr	r3, [r1, #16]
 8009796:	b963      	cbnz	r3, 80097b2 <_svfiprintf_r+0x32>
 8009798:	2140      	movs	r1, #64	; 0x40
 800979a:	f7ff ff3b 	bl	8009614 <_malloc_r>
 800979e:	6028      	str	r0, [r5, #0]
 80097a0:	6128      	str	r0, [r5, #16]
 80097a2:	b920      	cbnz	r0, 80097ae <_svfiprintf_r+0x2e>
 80097a4:	230c      	movs	r3, #12
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	e0d1      	b.n	8009952 <_svfiprintf_r+0x1d2>
 80097ae:	2340      	movs	r3, #64	; 0x40
 80097b0:	616b      	str	r3, [r5, #20]
 80097b2:	2300      	movs	r3, #0
 80097b4:	9309      	str	r3, [sp, #36]	; 0x24
 80097b6:	2320      	movs	r3, #32
 80097b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80097c0:	2330      	movs	r3, #48	; 0x30
 80097c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800996c <_svfiprintf_r+0x1ec>
 80097c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097ca:	f04f 0901 	mov.w	r9, #1
 80097ce:	4623      	mov	r3, r4
 80097d0:	469a      	mov	sl, r3
 80097d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097d6:	b10a      	cbz	r2, 80097dc <_svfiprintf_r+0x5c>
 80097d8:	2a25      	cmp	r2, #37	; 0x25
 80097da:	d1f9      	bne.n	80097d0 <_svfiprintf_r+0x50>
 80097dc:	ebba 0b04 	subs.w	fp, sl, r4
 80097e0:	d00b      	beq.n	80097fa <_svfiprintf_r+0x7a>
 80097e2:	465b      	mov	r3, fp
 80097e4:	4622      	mov	r2, r4
 80097e6:	4629      	mov	r1, r5
 80097e8:	4638      	mov	r0, r7
 80097ea:	f7ff ff6d 	bl	80096c8 <__ssputs_r>
 80097ee:	3001      	adds	r0, #1
 80097f0:	f000 80aa 	beq.w	8009948 <_svfiprintf_r+0x1c8>
 80097f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f6:	445a      	add	r2, fp
 80097f8:	9209      	str	r2, [sp, #36]	; 0x24
 80097fa:	f89a 3000 	ldrb.w	r3, [sl]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 80a2 	beq.w	8009948 <_svfiprintf_r+0x1c8>
 8009804:	2300      	movs	r3, #0
 8009806:	f04f 32ff 	mov.w	r2, #4294967295
 800980a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800980e:	f10a 0a01 	add.w	sl, sl, #1
 8009812:	9304      	str	r3, [sp, #16]
 8009814:	9307      	str	r3, [sp, #28]
 8009816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800981a:	931a      	str	r3, [sp, #104]	; 0x68
 800981c:	4654      	mov	r4, sl
 800981e:	2205      	movs	r2, #5
 8009820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009824:	4851      	ldr	r0, [pc, #324]	; (800996c <_svfiprintf_r+0x1ec>)
 8009826:	f7f6 fce3 	bl	80001f0 <memchr>
 800982a:	9a04      	ldr	r2, [sp, #16]
 800982c:	b9d8      	cbnz	r0, 8009866 <_svfiprintf_r+0xe6>
 800982e:	06d0      	lsls	r0, r2, #27
 8009830:	bf44      	itt	mi
 8009832:	2320      	movmi	r3, #32
 8009834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009838:	0711      	lsls	r1, r2, #28
 800983a:	bf44      	itt	mi
 800983c:	232b      	movmi	r3, #43	; 0x2b
 800983e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009842:	f89a 3000 	ldrb.w	r3, [sl]
 8009846:	2b2a      	cmp	r3, #42	; 0x2a
 8009848:	d015      	beq.n	8009876 <_svfiprintf_r+0xf6>
 800984a:	9a07      	ldr	r2, [sp, #28]
 800984c:	4654      	mov	r4, sl
 800984e:	2000      	movs	r0, #0
 8009850:	f04f 0c0a 	mov.w	ip, #10
 8009854:	4621      	mov	r1, r4
 8009856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800985a:	3b30      	subs	r3, #48	; 0x30
 800985c:	2b09      	cmp	r3, #9
 800985e:	d94e      	bls.n	80098fe <_svfiprintf_r+0x17e>
 8009860:	b1b0      	cbz	r0, 8009890 <_svfiprintf_r+0x110>
 8009862:	9207      	str	r2, [sp, #28]
 8009864:	e014      	b.n	8009890 <_svfiprintf_r+0x110>
 8009866:	eba0 0308 	sub.w	r3, r0, r8
 800986a:	fa09 f303 	lsl.w	r3, r9, r3
 800986e:	4313      	orrs	r3, r2
 8009870:	9304      	str	r3, [sp, #16]
 8009872:	46a2      	mov	sl, r4
 8009874:	e7d2      	b.n	800981c <_svfiprintf_r+0x9c>
 8009876:	9b03      	ldr	r3, [sp, #12]
 8009878:	1d19      	adds	r1, r3, #4
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	9103      	str	r1, [sp, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	bfbb      	ittet	lt
 8009882:	425b      	neglt	r3, r3
 8009884:	f042 0202 	orrlt.w	r2, r2, #2
 8009888:	9307      	strge	r3, [sp, #28]
 800988a:	9307      	strlt	r3, [sp, #28]
 800988c:	bfb8      	it	lt
 800988e:	9204      	strlt	r2, [sp, #16]
 8009890:	7823      	ldrb	r3, [r4, #0]
 8009892:	2b2e      	cmp	r3, #46	; 0x2e
 8009894:	d10c      	bne.n	80098b0 <_svfiprintf_r+0x130>
 8009896:	7863      	ldrb	r3, [r4, #1]
 8009898:	2b2a      	cmp	r3, #42	; 0x2a
 800989a:	d135      	bne.n	8009908 <_svfiprintf_r+0x188>
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	1d1a      	adds	r2, r3, #4
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	9203      	str	r2, [sp, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	bfb8      	it	lt
 80098a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80098ac:	3402      	adds	r4, #2
 80098ae:	9305      	str	r3, [sp, #20]
 80098b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800997c <_svfiprintf_r+0x1fc>
 80098b4:	7821      	ldrb	r1, [r4, #0]
 80098b6:	2203      	movs	r2, #3
 80098b8:	4650      	mov	r0, sl
 80098ba:	f7f6 fc99 	bl	80001f0 <memchr>
 80098be:	b140      	cbz	r0, 80098d2 <_svfiprintf_r+0x152>
 80098c0:	2340      	movs	r3, #64	; 0x40
 80098c2:	eba0 000a 	sub.w	r0, r0, sl
 80098c6:	fa03 f000 	lsl.w	r0, r3, r0
 80098ca:	9b04      	ldr	r3, [sp, #16]
 80098cc:	4303      	orrs	r3, r0
 80098ce:	3401      	adds	r4, #1
 80098d0:	9304      	str	r3, [sp, #16]
 80098d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d6:	4826      	ldr	r0, [pc, #152]	; (8009970 <_svfiprintf_r+0x1f0>)
 80098d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098dc:	2206      	movs	r2, #6
 80098de:	f7f6 fc87 	bl	80001f0 <memchr>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d038      	beq.n	8009958 <_svfiprintf_r+0x1d8>
 80098e6:	4b23      	ldr	r3, [pc, #140]	; (8009974 <_svfiprintf_r+0x1f4>)
 80098e8:	bb1b      	cbnz	r3, 8009932 <_svfiprintf_r+0x1b2>
 80098ea:	9b03      	ldr	r3, [sp, #12]
 80098ec:	3307      	adds	r3, #7
 80098ee:	f023 0307 	bic.w	r3, r3, #7
 80098f2:	3308      	adds	r3, #8
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f8:	4433      	add	r3, r6
 80098fa:	9309      	str	r3, [sp, #36]	; 0x24
 80098fc:	e767      	b.n	80097ce <_svfiprintf_r+0x4e>
 80098fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009902:	460c      	mov	r4, r1
 8009904:	2001      	movs	r0, #1
 8009906:	e7a5      	b.n	8009854 <_svfiprintf_r+0xd4>
 8009908:	2300      	movs	r3, #0
 800990a:	3401      	adds	r4, #1
 800990c:	9305      	str	r3, [sp, #20]
 800990e:	4619      	mov	r1, r3
 8009910:	f04f 0c0a 	mov.w	ip, #10
 8009914:	4620      	mov	r0, r4
 8009916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800991a:	3a30      	subs	r2, #48	; 0x30
 800991c:	2a09      	cmp	r2, #9
 800991e:	d903      	bls.n	8009928 <_svfiprintf_r+0x1a8>
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0c5      	beq.n	80098b0 <_svfiprintf_r+0x130>
 8009924:	9105      	str	r1, [sp, #20]
 8009926:	e7c3      	b.n	80098b0 <_svfiprintf_r+0x130>
 8009928:	fb0c 2101 	mla	r1, ip, r1, r2
 800992c:	4604      	mov	r4, r0
 800992e:	2301      	movs	r3, #1
 8009930:	e7f0      	b.n	8009914 <_svfiprintf_r+0x194>
 8009932:	ab03      	add	r3, sp, #12
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	462a      	mov	r2, r5
 8009938:	4b0f      	ldr	r3, [pc, #60]	; (8009978 <_svfiprintf_r+0x1f8>)
 800993a:	a904      	add	r1, sp, #16
 800993c:	4638      	mov	r0, r7
 800993e:	f3af 8000 	nop.w
 8009942:	1c42      	adds	r2, r0, #1
 8009944:	4606      	mov	r6, r0
 8009946:	d1d6      	bne.n	80098f6 <_svfiprintf_r+0x176>
 8009948:	89ab      	ldrh	r3, [r5, #12]
 800994a:	065b      	lsls	r3, r3, #25
 800994c:	f53f af2c 	bmi.w	80097a8 <_svfiprintf_r+0x28>
 8009950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009952:	b01d      	add	sp, #116	; 0x74
 8009954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009958:	ab03      	add	r3, sp, #12
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	462a      	mov	r2, r5
 800995e:	4b06      	ldr	r3, [pc, #24]	; (8009978 <_svfiprintf_r+0x1f8>)
 8009960:	a904      	add	r1, sp, #16
 8009962:	4638      	mov	r0, r7
 8009964:	f000 f87a 	bl	8009a5c <_printf_i>
 8009968:	e7eb      	b.n	8009942 <_svfiprintf_r+0x1c2>
 800996a:	bf00      	nop
 800996c:	0800b348 	.word	0x0800b348
 8009970:	0800b352 	.word	0x0800b352
 8009974:	00000000 	.word	0x00000000
 8009978:	080096c9 	.word	0x080096c9
 800997c:	0800b34e 	.word	0x0800b34e

08009980 <_printf_common>:
 8009980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009984:	4616      	mov	r6, r2
 8009986:	4699      	mov	r9, r3
 8009988:	688a      	ldr	r2, [r1, #8]
 800998a:	690b      	ldr	r3, [r1, #16]
 800998c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009990:	4293      	cmp	r3, r2
 8009992:	bfb8      	it	lt
 8009994:	4613      	movlt	r3, r2
 8009996:	6033      	str	r3, [r6, #0]
 8009998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800999c:	4607      	mov	r7, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	b10a      	cbz	r2, 80099a6 <_printf_common+0x26>
 80099a2:	3301      	adds	r3, #1
 80099a4:	6033      	str	r3, [r6, #0]
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	0699      	lsls	r1, r3, #26
 80099aa:	bf42      	ittt	mi
 80099ac:	6833      	ldrmi	r3, [r6, #0]
 80099ae:	3302      	addmi	r3, #2
 80099b0:	6033      	strmi	r3, [r6, #0]
 80099b2:	6825      	ldr	r5, [r4, #0]
 80099b4:	f015 0506 	ands.w	r5, r5, #6
 80099b8:	d106      	bne.n	80099c8 <_printf_common+0x48>
 80099ba:	f104 0a19 	add.w	sl, r4, #25
 80099be:	68e3      	ldr	r3, [r4, #12]
 80099c0:	6832      	ldr	r2, [r6, #0]
 80099c2:	1a9b      	subs	r3, r3, r2
 80099c4:	42ab      	cmp	r3, r5
 80099c6:	dc26      	bgt.n	8009a16 <_printf_common+0x96>
 80099c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099cc:	1e13      	subs	r3, r2, #0
 80099ce:	6822      	ldr	r2, [r4, #0]
 80099d0:	bf18      	it	ne
 80099d2:	2301      	movne	r3, #1
 80099d4:	0692      	lsls	r2, r2, #26
 80099d6:	d42b      	bmi.n	8009a30 <_printf_common+0xb0>
 80099d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099dc:	4649      	mov	r1, r9
 80099de:	4638      	mov	r0, r7
 80099e0:	47c0      	blx	r8
 80099e2:	3001      	adds	r0, #1
 80099e4:	d01e      	beq.n	8009a24 <_printf_common+0xa4>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	68e5      	ldr	r5, [r4, #12]
 80099ea:	6832      	ldr	r2, [r6, #0]
 80099ec:	f003 0306 	and.w	r3, r3, #6
 80099f0:	2b04      	cmp	r3, #4
 80099f2:	bf08      	it	eq
 80099f4:	1aad      	subeq	r5, r5, r2
 80099f6:	68a3      	ldr	r3, [r4, #8]
 80099f8:	6922      	ldr	r2, [r4, #16]
 80099fa:	bf0c      	ite	eq
 80099fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a00:	2500      	movne	r5, #0
 8009a02:	4293      	cmp	r3, r2
 8009a04:	bfc4      	itt	gt
 8009a06:	1a9b      	subgt	r3, r3, r2
 8009a08:	18ed      	addgt	r5, r5, r3
 8009a0a:	2600      	movs	r6, #0
 8009a0c:	341a      	adds	r4, #26
 8009a0e:	42b5      	cmp	r5, r6
 8009a10:	d11a      	bne.n	8009a48 <_printf_common+0xc8>
 8009a12:	2000      	movs	r0, #0
 8009a14:	e008      	b.n	8009a28 <_printf_common+0xa8>
 8009a16:	2301      	movs	r3, #1
 8009a18:	4652      	mov	r2, sl
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	47c0      	blx	r8
 8009a20:	3001      	adds	r0, #1
 8009a22:	d103      	bne.n	8009a2c <_printf_common+0xac>
 8009a24:	f04f 30ff 	mov.w	r0, #4294967295
 8009a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2c:	3501      	adds	r5, #1
 8009a2e:	e7c6      	b.n	80099be <_printf_common+0x3e>
 8009a30:	18e1      	adds	r1, r4, r3
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	2030      	movs	r0, #48	; 0x30
 8009a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a3a:	4422      	add	r2, r4
 8009a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a44:	3302      	adds	r3, #2
 8009a46:	e7c7      	b.n	80099d8 <_printf_common+0x58>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	4638      	mov	r0, r7
 8009a50:	47c0      	blx	r8
 8009a52:	3001      	adds	r0, #1
 8009a54:	d0e6      	beq.n	8009a24 <_printf_common+0xa4>
 8009a56:	3601      	adds	r6, #1
 8009a58:	e7d9      	b.n	8009a0e <_printf_common+0x8e>
	...

08009a5c <_printf_i>:
 8009a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a60:	460c      	mov	r4, r1
 8009a62:	4691      	mov	r9, r2
 8009a64:	7e27      	ldrb	r7, [r4, #24]
 8009a66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a68:	2f78      	cmp	r7, #120	; 0x78
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	469a      	mov	sl, r3
 8009a6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a72:	d807      	bhi.n	8009a84 <_printf_i+0x28>
 8009a74:	2f62      	cmp	r7, #98	; 0x62
 8009a76:	d80a      	bhi.n	8009a8e <_printf_i+0x32>
 8009a78:	2f00      	cmp	r7, #0
 8009a7a:	f000 80d8 	beq.w	8009c2e <_printf_i+0x1d2>
 8009a7e:	2f58      	cmp	r7, #88	; 0x58
 8009a80:	f000 80a3 	beq.w	8009bca <_printf_i+0x16e>
 8009a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a8c:	e03a      	b.n	8009b04 <_printf_i+0xa8>
 8009a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a92:	2b15      	cmp	r3, #21
 8009a94:	d8f6      	bhi.n	8009a84 <_printf_i+0x28>
 8009a96:	a001      	add	r0, pc, #4	; (adr r0, 8009a9c <_printf_i+0x40>)
 8009a98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a9c:	08009af5 	.word	0x08009af5
 8009aa0:	08009b09 	.word	0x08009b09
 8009aa4:	08009a85 	.word	0x08009a85
 8009aa8:	08009a85 	.word	0x08009a85
 8009aac:	08009a85 	.word	0x08009a85
 8009ab0:	08009a85 	.word	0x08009a85
 8009ab4:	08009b09 	.word	0x08009b09
 8009ab8:	08009a85 	.word	0x08009a85
 8009abc:	08009a85 	.word	0x08009a85
 8009ac0:	08009a85 	.word	0x08009a85
 8009ac4:	08009a85 	.word	0x08009a85
 8009ac8:	08009c15 	.word	0x08009c15
 8009acc:	08009b39 	.word	0x08009b39
 8009ad0:	08009bf7 	.word	0x08009bf7
 8009ad4:	08009a85 	.word	0x08009a85
 8009ad8:	08009a85 	.word	0x08009a85
 8009adc:	08009c37 	.word	0x08009c37
 8009ae0:	08009a85 	.word	0x08009a85
 8009ae4:	08009b39 	.word	0x08009b39
 8009ae8:	08009a85 	.word	0x08009a85
 8009aec:	08009a85 	.word	0x08009a85
 8009af0:	08009bff 	.word	0x08009bff
 8009af4:	680b      	ldr	r3, [r1, #0]
 8009af6:	1d1a      	adds	r2, r3, #4
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	600a      	str	r2, [r1, #0]
 8009afc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b04:	2301      	movs	r3, #1
 8009b06:	e0a3      	b.n	8009c50 <_printf_i+0x1f4>
 8009b08:	6825      	ldr	r5, [r4, #0]
 8009b0a:	6808      	ldr	r0, [r1, #0]
 8009b0c:	062e      	lsls	r6, r5, #24
 8009b0e:	f100 0304 	add.w	r3, r0, #4
 8009b12:	d50a      	bpl.n	8009b2a <_printf_i+0xce>
 8009b14:	6805      	ldr	r5, [r0, #0]
 8009b16:	600b      	str	r3, [r1, #0]
 8009b18:	2d00      	cmp	r5, #0
 8009b1a:	da03      	bge.n	8009b24 <_printf_i+0xc8>
 8009b1c:	232d      	movs	r3, #45	; 0x2d
 8009b1e:	426d      	negs	r5, r5
 8009b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b24:	485e      	ldr	r0, [pc, #376]	; (8009ca0 <_printf_i+0x244>)
 8009b26:	230a      	movs	r3, #10
 8009b28:	e019      	b.n	8009b5e <_printf_i+0x102>
 8009b2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009b2e:	6805      	ldr	r5, [r0, #0]
 8009b30:	600b      	str	r3, [r1, #0]
 8009b32:	bf18      	it	ne
 8009b34:	b22d      	sxthne	r5, r5
 8009b36:	e7ef      	b.n	8009b18 <_printf_i+0xbc>
 8009b38:	680b      	ldr	r3, [r1, #0]
 8009b3a:	6825      	ldr	r5, [r4, #0]
 8009b3c:	1d18      	adds	r0, r3, #4
 8009b3e:	6008      	str	r0, [r1, #0]
 8009b40:	0628      	lsls	r0, r5, #24
 8009b42:	d501      	bpl.n	8009b48 <_printf_i+0xec>
 8009b44:	681d      	ldr	r5, [r3, #0]
 8009b46:	e002      	b.n	8009b4e <_printf_i+0xf2>
 8009b48:	0669      	lsls	r1, r5, #25
 8009b4a:	d5fb      	bpl.n	8009b44 <_printf_i+0xe8>
 8009b4c:	881d      	ldrh	r5, [r3, #0]
 8009b4e:	4854      	ldr	r0, [pc, #336]	; (8009ca0 <_printf_i+0x244>)
 8009b50:	2f6f      	cmp	r7, #111	; 0x6f
 8009b52:	bf0c      	ite	eq
 8009b54:	2308      	moveq	r3, #8
 8009b56:	230a      	movne	r3, #10
 8009b58:	2100      	movs	r1, #0
 8009b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b5e:	6866      	ldr	r6, [r4, #4]
 8009b60:	60a6      	str	r6, [r4, #8]
 8009b62:	2e00      	cmp	r6, #0
 8009b64:	bfa2      	ittt	ge
 8009b66:	6821      	ldrge	r1, [r4, #0]
 8009b68:	f021 0104 	bicge.w	r1, r1, #4
 8009b6c:	6021      	strge	r1, [r4, #0]
 8009b6e:	b90d      	cbnz	r5, 8009b74 <_printf_i+0x118>
 8009b70:	2e00      	cmp	r6, #0
 8009b72:	d04d      	beq.n	8009c10 <_printf_i+0x1b4>
 8009b74:	4616      	mov	r6, r2
 8009b76:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b7a:	fb03 5711 	mls	r7, r3, r1, r5
 8009b7e:	5dc7      	ldrb	r7, [r0, r7]
 8009b80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b84:	462f      	mov	r7, r5
 8009b86:	42bb      	cmp	r3, r7
 8009b88:	460d      	mov	r5, r1
 8009b8a:	d9f4      	bls.n	8009b76 <_printf_i+0x11a>
 8009b8c:	2b08      	cmp	r3, #8
 8009b8e:	d10b      	bne.n	8009ba8 <_printf_i+0x14c>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	07df      	lsls	r7, r3, #31
 8009b94:	d508      	bpl.n	8009ba8 <_printf_i+0x14c>
 8009b96:	6923      	ldr	r3, [r4, #16]
 8009b98:	6861      	ldr	r1, [r4, #4]
 8009b9a:	4299      	cmp	r1, r3
 8009b9c:	bfde      	ittt	le
 8009b9e:	2330      	movle	r3, #48	; 0x30
 8009ba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ba4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ba8:	1b92      	subs	r2, r2, r6
 8009baa:	6122      	str	r2, [r4, #16]
 8009bac:	f8cd a000 	str.w	sl, [sp]
 8009bb0:	464b      	mov	r3, r9
 8009bb2:	aa03      	add	r2, sp, #12
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	f7ff fee2 	bl	8009980 <_printf_common>
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d14c      	bne.n	8009c5a <_printf_i+0x1fe>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	b004      	add	sp, #16
 8009bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bca:	4835      	ldr	r0, [pc, #212]	; (8009ca0 <_printf_i+0x244>)
 8009bcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	680e      	ldr	r6, [r1, #0]
 8009bd4:	061f      	lsls	r7, r3, #24
 8009bd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8009bda:	600e      	str	r6, [r1, #0]
 8009bdc:	d514      	bpl.n	8009c08 <_printf_i+0x1ac>
 8009bde:	07d9      	lsls	r1, r3, #31
 8009be0:	bf44      	itt	mi
 8009be2:	f043 0320 	orrmi.w	r3, r3, #32
 8009be6:	6023      	strmi	r3, [r4, #0]
 8009be8:	b91d      	cbnz	r5, 8009bf2 <_printf_i+0x196>
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	f023 0320 	bic.w	r3, r3, #32
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	2310      	movs	r3, #16
 8009bf4:	e7b0      	b.n	8009b58 <_printf_i+0xfc>
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	f043 0320 	orr.w	r3, r3, #32
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	2378      	movs	r3, #120	; 0x78
 8009c00:	4828      	ldr	r0, [pc, #160]	; (8009ca4 <_printf_i+0x248>)
 8009c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c06:	e7e3      	b.n	8009bd0 <_printf_i+0x174>
 8009c08:	065e      	lsls	r6, r3, #25
 8009c0a:	bf48      	it	mi
 8009c0c:	b2ad      	uxthmi	r5, r5
 8009c0e:	e7e6      	b.n	8009bde <_printf_i+0x182>
 8009c10:	4616      	mov	r6, r2
 8009c12:	e7bb      	b.n	8009b8c <_printf_i+0x130>
 8009c14:	680b      	ldr	r3, [r1, #0]
 8009c16:	6826      	ldr	r6, [r4, #0]
 8009c18:	6960      	ldr	r0, [r4, #20]
 8009c1a:	1d1d      	adds	r5, r3, #4
 8009c1c:	600d      	str	r5, [r1, #0]
 8009c1e:	0635      	lsls	r5, r6, #24
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	d501      	bpl.n	8009c28 <_printf_i+0x1cc>
 8009c24:	6018      	str	r0, [r3, #0]
 8009c26:	e002      	b.n	8009c2e <_printf_i+0x1d2>
 8009c28:	0671      	lsls	r1, r6, #25
 8009c2a:	d5fb      	bpl.n	8009c24 <_printf_i+0x1c8>
 8009c2c:	8018      	strh	r0, [r3, #0]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	6123      	str	r3, [r4, #16]
 8009c32:	4616      	mov	r6, r2
 8009c34:	e7ba      	b.n	8009bac <_printf_i+0x150>
 8009c36:	680b      	ldr	r3, [r1, #0]
 8009c38:	1d1a      	adds	r2, r3, #4
 8009c3a:	600a      	str	r2, [r1, #0]
 8009c3c:	681e      	ldr	r6, [r3, #0]
 8009c3e:	6862      	ldr	r2, [r4, #4]
 8009c40:	2100      	movs	r1, #0
 8009c42:	4630      	mov	r0, r6
 8009c44:	f7f6 fad4 	bl	80001f0 <memchr>
 8009c48:	b108      	cbz	r0, 8009c4e <_printf_i+0x1f2>
 8009c4a:	1b80      	subs	r0, r0, r6
 8009c4c:	6060      	str	r0, [r4, #4]
 8009c4e:	6863      	ldr	r3, [r4, #4]
 8009c50:	6123      	str	r3, [r4, #16]
 8009c52:	2300      	movs	r3, #0
 8009c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c58:	e7a8      	b.n	8009bac <_printf_i+0x150>
 8009c5a:	6923      	ldr	r3, [r4, #16]
 8009c5c:	4632      	mov	r2, r6
 8009c5e:	4649      	mov	r1, r9
 8009c60:	4640      	mov	r0, r8
 8009c62:	47d0      	blx	sl
 8009c64:	3001      	adds	r0, #1
 8009c66:	d0ab      	beq.n	8009bc0 <_printf_i+0x164>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	079b      	lsls	r3, r3, #30
 8009c6c:	d413      	bmi.n	8009c96 <_printf_i+0x23a>
 8009c6e:	68e0      	ldr	r0, [r4, #12]
 8009c70:	9b03      	ldr	r3, [sp, #12]
 8009c72:	4298      	cmp	r0, r3
 8009c74:	bfb8      	it	lt
 8009c76:	4618      	movlt	r0, r3
 8009c78:	e7a4      	b.n	8009bc4 <_printf_i+0x168>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	4632      	mov	r2, r6
 8009c7e:	4649      	mov	r1, r9
 8009c80:	4640      	mov	r0, r8
 8009c82:	47d0      	blx	sl
 8009c84:	3001      	adds	r0, #1
 8009c86:	d09b      	beq.n	8009bc0 <_printf_i+0x164>
 8009c88:	3501      	adds	r5, #1
 8009c8a:	68e3      	ldr	r3, [r4, #12]
 8009c8c:	9903      	ldr	r1, [sp, #12]
 8009c8e:	1a5b      	subs	r3, r3, r1
 8009c90:	42ab      	cmp	r3, r5
 8009c92:	dcf2      	bgt.n	8009c7a <_printf_i+0x21e>
 8009c94:	e7eb      	b.n	8009c6e <_printf_i+0x212>
 8009c96:	2500      	movs	r5, #0
 8009c98:	f104 0619 	add.w	r6, r4, #25
 8009c9c:	e7f5      	b.n	8009c8a <_printf_i+0x22e>
 8009c9e:	bf00      	nop
 8009ca0:	0800b359 	.word	0x0800b359
 8009ca4:	0800b36a 	.word	0x0800b36a

08009ca8 <_sbrk_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d06      	ldr	r5, [pc, #24]	; (8009cc4 <_sbrk_r+0x1c>)
 8009cac:	2300      	movs	r3, #0
 8009cae:	4604      	mov	r4, r0
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	602b      	str	r3, [r5, #0]
 8009cb4:	f7f7 fcae 	bl	8001614 <_sbrk>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	d102      	bne.n	8009cc2 <_sbrk_r+0x1a>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	b103      	cbz	r3, 8009cc2 <_sbrk_r+0x1a>
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}
 8009cc4:	20002db4 	.word	0x20002db4

08009cc8 <memcpy>:
 8009cc8:	440a      	add	r2, r1
 8009cca:	4291      	cmp	r1, r2
 8009ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cd0:	d100      	bne.n	8009cd4 <memcpy+0xc>
 8009cd2:	4770      	bx	lr
 8009cd4:	b510      	push	{r4, lr}
 8009cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cde:	4291      	cmp	r1, r2
 8009ce0:	d1f9      	bne.n	8009cd6 <memcpy+0xe>
 8009ce2:	bd10      	pop	{r4, pc}

08009ce4 <memmove>:
 8009ce4:	4288      	cmp	r0, r1
 8009ce6:	b510      	push	{r4, lr}
 8009ce8:	eb01 0402 	add.w	r4, r1, r2
 8009cec:	d902      	bls.n	8009cf4 <memmove+0x10>
 8009cee:	4284      	cmp	r4, r0
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	d807      	bhi.n	8009d04 <memmove+0x20>
 8009cf4:	1e43      	subs	r3, r0, #1
 8009cf6:	42a1      	cmp	r1, r4
 8009cf8:	d008      	beq.n	8009d0c <memmove+0x28>
 8009cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d02:	e7f8      	b.n	8009cf6 <memmove+0x12>
 8009d04:	4402      	add	r2, r0
 8009d06:	4601      	mov	r1, r0
 8009d08:	428a      	cmp	r2, r1
 8009d0a:	d100      	bne.n	8009d0e <memmove+0x2a>
 8009d0c:	bd10      	pop	{r4, pc}
 8009d0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d16:	e7f7      	b.n	8009d08 <memmove+0x24>

08009d18 <__malloc_lock>:
 8009d18:	4801      	ldr	r0, [pc, #4]	; (8009d20 <__malloc_lock+0x8>)
 8009d1a:	f7ff bc29 	b.w	8009570 <__retarget_lock_acquire_recursive>
 8009d1e:	bf00      	nop
 8009d20:	20002dac 	.word	0x20002dac

08009d24 <__malloc_unlock>:
 8009d24:	4801      	ldr	r0, [pc, #4]	; (8009d2c <__malloc_unlock+0x8>)
 8009d26:	f7ff bc24 	b.w	8009572 <__retarget_lock_release_recursive>
 8009d2a:	bf00      	nop
 8009d2c:	20002dac 	.word	0x20002dac

08009d30 <_realloc_r>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	4607      	mov	r7, r0
 8009d34:	4614      	mov	r4, r2
 8009d36:	460e      	mov	r6, r1
 8009d38:	b921      	cbnz	r1, 8009d44 <_realloc_r+0x14>
 8009d3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d3e:	4611      	mov	r1, r2
 8009d40:	f7ff bc68 	b.w	8009614 <_malloc_r>
 8009d44:	b922      	cbnz	r2, 8009d50 <_realloc_r+0x20>
 8009d46:	f7ff fc15 	bl	8009574 <_free_r>
 8009d4a:	4625      	mov	r5, r4
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d50:	f000 f814 	bl	8009d7c <_malloc_usable_size_r>
 8009d54:	42a0      	cmp	r0, r4
 8009d56:	d20f      	bcs.n	8009d78 <_realloc_r+0x48>
 8009d58:	4621      	mov	r1, r4
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	f7ff fc5a 	bl	8009614 <_malloc_r>
 8009d60:	4605      	mov	r5, r0
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d0f2      	beq.n	8009d4c <_realloc_r+0x1c>
 8009d66:	4631      	mov	r1, r6
 8009d68:	4622      	mov	r2, r4
 8009d6a:	f7ff ffad 	bl	8009cc8 <memcpy>
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4638      	mov	r0, r7
 8009d72:	f7ff fbff 	bl	8009574 <_free_r>
 8009d76:	e7e9      	b.n	8009d4c <_realloc_r+0x1c>
 8009d78:	4635      	mov	r5, r6
 8009d7a:	e7e7      	b.n	8009d4c <_realloc_r+0x1c>

08009d7c <_malloc_usable_size_r>:
 8009d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d80:	1f18      	subs	r0, r3, #4
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	bfbc      	itt	lt
 8009d86:	580b      	ldrlt	r3, [r1, r0]
 8009d88:	18c0      	addlt	r0, r0, r3
 8009d8a:	4770      	bx	lr

08009d8c <_init>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	bf00      	nop
 8009d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d92:	bc08      	pop	{r3}
 8009d94:	469e      	mov	lr, r3
 8009d96:	4770      	bx	lr

08009d98 <_fini>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	bf00      	nop
 8009d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9e:	bc08      	pop	{r3}
 8009da0:	469e      	mov	lr, r3
 8009da2:	4770      	bx	lr
