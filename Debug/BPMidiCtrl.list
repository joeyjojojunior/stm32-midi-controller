
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dfc  08013988  08013988  00023988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015784  08015784  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08015784  08015784  00025784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801578c  0801578c  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801578c  0801578c  0002578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015790  08015790  00025790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08015794  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031a4  20000334  08015ac8  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200034d8  08015ac8  000334d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e303  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062e7  00000000  00000000  0005e667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  00064950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00020f17  00000000  00000000  00066658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000285f0  00000000  00000000  0008756f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a6dc1  00000000  00000000  000afb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00156920  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001b10  00000000  00000000  00156978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008c50  00000000  00000000  00158488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000334 	.word	0x20000334
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801396c 	.word	0x0801396c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000338 	.word	0x20000338
 80001dc:	0801396c 	.word	0x0801396c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9a4 	b.w	8000fec <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468c      	mov	ip, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8083 	bne.w	8000e3e <__udivmoddi4+0x116>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d947      	bls.n	8000dce <__udivmoddi4+0xa6>
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b142      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	f1c2 0020 	rsb	r0, r2, #32
 8000d48:	fa24 f000 	lsr.w	r0, r4, r0
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	4097      	lsls	r7, r2
 8000d50:	ea40 0c01 	orr.w	ip, r0, r1
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d60:	fa1f fe87 	uxth.w	lr, r7
 8000d64:	fb08 c116 	mls	r1, r8, r6, ip
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 8119 	bcs.w	8000fb0 <__udivmoddi4+0x288>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8116 	bls.w	8000fb0 <__udivmoddi4+0x288>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	f080 8105 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f240 8102 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	b902      	cbnz	r2, 8000dd2 <__udivmoddi4+0xaa>
 8000dd0:	deff      	udf	#255	; 0xff
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d150      	bne.n	8000e7c <__udivmoddi4+0x154>
 8000dda:	1bcb      	subs	r3, r1, r7
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	fa1f f887 	uxth.w	r8, r7
 8000de4:	2601      	movs	r6, #1
 8000de6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dea:	0c21      	lsrs	r1, r4, #16
 8000dec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb08 f30c 	mul.w	r3, r8, ip
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0xe2>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	f200 80e9 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1ac9      	subs	r1, r1, r3
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x10a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80d9 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e7bf      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x12e>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80b1 	beq.w	8000faa <__udivmoddi4+0x282>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x1cc>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0x140>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80b8 	bhi.w	8000fd8 <__udivmoddi4+0x2b0>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	468c      	mov	ip, r1
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0a8      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e7a:	e7a5      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f603 	lsr.w	r6, r0, r3
 8000e84:	4097      	lsls	r7, r2
 8000e86:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	4330      	orrs	r0, r6
 8000e92:	0c03      	lsrs	r3, r0, #16
 8000e94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea4:	fb06 f108 	mul.w	r1, r6, r8
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	fa04 f402 	lsl.w	r4, r4, r2
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x19c>
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb6:	f080 808d 	bcs.w	8000fd4 <__udivmoddi4+0x2ac>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 808a 	bls.w	8000fd4 <__udivmoddi4+0x2ac>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	443b      	add	r3, r7
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b281      	uxth	r1, r0
 8000ec8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ecc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed4:	fb00 f308 	mul.w	r3, r0, r8
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d907      	bls.n	8000eec <__udivmoddi4+0x1c4>
 8000edc:	1879      	adds	r1, r7, r1
 8000ede:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee2:	d273      	bcs.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d971      	bls.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4439      	add	r1, r7
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ef2:	e778      	b.n	8000de6 <__udivmoddi4+0xbe>
 8000ef4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef8:	fa03 f406 	lsl.w	r4, r3, r6
 8000efc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f00:	431c      	orrs	r4, r3
 8000f02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f12:	431f      	orrs	r7, r3
 8000f14:	0c3b      	lsrs	r3, r7, #16
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fa1f f884 	uxth.w	r8, r4
 8000f1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f26:	fb09 fa08 	mul.w	sl, r9, r8
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f30:	fa00 f306 	lsl.w	r3, r0, r6
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x220>
 8000f36:	1861      	adds	r1, r4, r1
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f3c:	d248      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f3e:	458a      	cmp	sl, r1
 8000f40:	d946      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f42:	f1a9 0902 	sub.w	r9, r9, #2
 8000f46:	4421      	add	r1, r4
 8000f48:	eba1 010a 	sub.w	r1, r1, sl
 8000f4c:	b2bf      	uxth	r7, r7
 8000f4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f5a:	fb00 f808 	mul.w	r8, r0, r8
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x24a>
 8000f62:	19e7      	adds	r7, r4, r7
 8000f64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f68:	d22e      	bcs.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d92c      	bls.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	4427      	add	r7, r4
 8000f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f76:	eba7 0708 	sub.w	r7, r7, r8
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	454f      	cmp	r7, r9
 8000f80:	46c6      	mov	lr, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	d31a      	bcc.n	8000fbc <__udivmoddi4+0x294>
 8000f86:	d017      	beq.n	8000fb8 <__udivmoddi4+0x290>
 8000f88:	b15d      	cbz	r5, 8000fa2 <__udivmoddi4+0x27a>
 8000f8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f96:	40f2      	lsrs	r2, r6
 8000f98:	ea4c 0202 	orr.w	r2, ip, r2
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e70b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6fd      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fb8:	4543      	cmp	r3, r8
 8000fba:	d2e5      	bcs.n	8000f88 <__udivmoddi4+0x260>
 8000fbc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7df      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e7d2      	b.n	8000f72 <__udivmoddi4+0x24a>
 8000fcc:	4660      	mov	r0, ip
 8000fce:	e78d      	b.n	8000eec <__udivmoddi4+0x1c4>
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	e7b9      	b.n	8000f48 <__udivmoddi4+0x220>
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	e775      	b.n	8000ec4 <__udivmoddi4+0x19c>
 8000fd8:	4630      	mov	r0, r6
 8000fda:	e74a      	b.n	8000e72 <__udivmoddi4+0x14a>
 8000fdc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe0:	4439      	add	r1, r7
 8000fe2:	e713      	b.n	8000e0c <__udivmoddi4+0xe4>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	443c      	add	r4, r7
 8000fe8:	e724      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <Knob_Map>:
void Knob_Free(Knob *k) {
    free(k->sub_labels);
}

// Maps values from (0, max_values-1) to (0, m)
uint8_t Knob_Map(Knob *k, uint8_t value, uint8_t m) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	78ba      	ldrb	r2, [r7, #2]
 8001004:	fb02 f203 	mul.w	r2, r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7f1b      	ldrb	r3, [r3, #28]
 800100c:	3b01      	subs	r3, #1
 800100e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ffc2 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80010be:	f001 ffb9 	bl	8003034 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80010c2:	f000 f8ab 	bl	800121c <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80010c6:	f000 f9f3 	bl	80014b0 <MX_GPIO_Init>
    MX_ADC1_Init();
 80010ca:	f000 f929 	bl	8001320 <MX_ADC1_Init>
    MX_I2C1_Init();
 80010ce:	f000 f97b 	bl	80013c8 <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 80010d2:	f00d fc7f 	bl	800e9d4 <MX_USB_DEVICE_Init>
    MX_SDIO_SD_Init();
 80010d6:	f000 f9cb 	bl	8001470 <MX_SDIO_SD_Init>
    MX_RTC_Init();
 80010da:	f000 f9a3 	bl	8001424 <MX_RTC_Init>
    MX_FATFS_Init();
 80010de:	f008 fe9d 	bl	8009e1c <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    SystemCoreClockUpdate();
 80010e2:	f001 fefd 	bl	8002ee0 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 40);
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <main+0x14c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a47      	ldr	r2, [pc, #284]	; (8001208 <main+0x150>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	095b      	lsrs	r3, r3, #5
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffbe 	bl	8001074 <SysTick_Config>

    SD_LoadPreset("knobs1.json");
 80010f8:	4844      	ldr	r0, [pc, #272]	; (800120c <main+0x154>)
 80010fa:	f000 fe6b 	bl	8001dd4 <SD_LoadPreset>

    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	e010      	b.n	8001126 <main+0x6e>
        ssd1306_Init(&knobs[i]);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	015b      	lsls	r3, r3, #5
 8001108:	4a41      	ldr	r2, [pc, #260]	; (8001210 <main+0x158>)
 800110a:	4413      	add	r3, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fef3 	bl	8001ef8 <ssd1306_Init>
        ssd1306_WriteKnob(&knobs[i]);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	015b      	lsls	r3, r3, #5
 8001116:	4a3e      	ldr	r2, [pc, #248]	; (8001210 <main+0x158>)
 8001118:	4413      	add	r3, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f001 f864 	bl	80021e8 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	3301      	adds	r3, #1
 8001124:	71fb      	strb	r3, [r7, #7]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d9eb      	bls.n	8001104 <main+0x4c>
    }

    while (1) {
        ADC_Read_Knobs();
 800112c:	f000 fa82 	bl	8001634 <ADC_Read_Knobs>

        if (isMenuActive) {
 8001130:	4b38      	ldr	r3, [pc, #224]	; (8001214 <main+0x15c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00a      	beq.n	800114e <main+0x96>
            SD_FetchPresetNames();
 8001138:	f000 fd16 	bl	8001b68 <SD_FetchPresetNames>
            ssd1306_WritePresets();
 800113c:	f001 f9a8 	bl	8002490 <ssd1306_WritePresets>

            while (isMenuActive) {}
 8001140:	bf00      	nop
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <main+0x15c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1fb      	bne.n	8001142 <main+0x8a>

            ssd1306_WriteAllKnobs();
 800114a:	f001 f833 	bl	80021b4 <ssd1306_WriteAllKnobs>
        }

        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 800114e:	2300      	movs	r3, #0
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	e053      	b.n	80011fc <main+0x144>
            uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	015b      	lsls	r3, r3, #5
 8001158:	4a2d      	ldr	r2, [pc, #180]	; (8001210 <main+0x158>)
 800115a:	441a      	add	r2, r3
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	492e      	ldr	r1, [pc, #184]	; (8001218 <main+0x160>)
 8001160:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4619      	mov	r1, r3
 8001168:	4610      	mov	r0, r2
 800116a:	f000 fb0b 	bl	8001784 <MIDI_Scale_And_Filter>
 800116e:	4603      	mov	r3, r0
 8001170:	717b      	strb	r3, [r7, #5]

            if (curr_MIDI_val != knobs[i].value) {
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	4a26      	ldr	r2, [pc, #152]	; (8001210 <main+0x158>)
 8001176:	015b      	lsls	r3, r3, #5
 8001178:	4413      	add	r3, r2
 800117a:	331b      	adds	r3, #27
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	797a      	ldrb	r2, [r7, #5]
 8001180:	429a      	cmp	r2, r3
 8001182:	d038      	beq.n	80011f6 <main+0x13e>
                knobs[i].value = curr_MIDI_val;
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	4a22      	ldr	r2, [pc, #136]	; (8001210 <main+0x158>)
 8001188:	015b      	lsls	r3, r3, #5
 800118a:	4413      	add	r3, r2
 800118c:	331b      	adds	r3, #27
 800118e:	797a      	ldrb	r2, [r7, #5]
 8001190:	701a      	strb	r2, [r3, #0]
                ssd1306_WriteKnob(&knobs[i]);
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <main+0x158>)
 8001198:	4413      	add	r3, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f824 	bl	80021e8 <ssd1306_WriteKnob>
                if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <main+0x158>)
 80011a4:	015b      	lsls	r3, r3, #5
 80011a6:	4413      	add	r3, r2
 80011a8:	331b      	adds	r3, #27
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	4918      	ldr	r1, [pc, #96]	; (8001210 <main+0x158>)
 80011b0:	015b      	lsls	r3, r3, #5
 80011b2:	440b      	add	r3, r1
 80011b4:	331a      	adds	r3, #26
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d106      	bne.n	80011ca <main+0x112>
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <main+0x158>)
 80011c0:	015b      	lsls	r3, r3, #5
 80011c2:	4413      	add	r3, r2
 80011c4:	331e      	adds	r3, #30
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
                if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 80011ca:	79bb      	ldrb	r3, [r7, #6]
 80011cc:	4a10      	ldr	r2, [pc, #64]	; (8001210 <main+0x158>)
 80011ce:	015b      	lsls	r3, r3, #5
 80011d0:	4413      	add	r3, r2
 80011d2:	331e      	adds	r3, #30
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10d      	bne.n	80011f6 <main+0x13e>
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	015b      	lsls	r3, r3, #5
 80011de:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <main+0x158>)
 80011e0:	441a      	add	r2, r3
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	490a      	ldr	r1, [pc, #40]	; (8001210 <main+0x158>)
 80011e6:	015b      	lsls	r3, r3, #5
 80011e8:	440b      	add	r3, r1
 80011ea:	331b      	adds	r3, #27
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4610      	mov	r0, r2
 80011f2:	f000 faac 	bl	800174e <MIDI_Send>
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	3301      	adds	r3, #1
 80011fa:	71bb      	strb	r3, [r7, #6]
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d9a8      	bls.n	8001154 <main+0x9c>
        ADC_Read_Knobs();
 8001202:	e793      	b.n	800112c <main+0x74>
 8001204:	20000048 	.word	0x20000048
 8001208:	cccccccd 	.word	0xcccccccd
 800120c:	08013988 	.word	0x08013988
 8001210:	20002620 	.word	0x20002620
 8001214:	2000261c 	.word	0x2000261c
 8001218:	20000350 	.word	0x20000350

0800121c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b09a      	sub	sp, #104	; 0x68
 8001220:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001222:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001226:	2230      	movs	r2, #48	; 0x30
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f00f f93c 	bl	80104a8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <SystemClock_Config+0xfc>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a2f      	ldr	r2, [pc, #188]	; (8001318 <SystemClock_Config+0xfc>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <SystemClock_Config+0xfc>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <SystemClock_Config+0x100>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a29      	ldr	r2, [pc, #164]	; (800131c <SystemClock_Config+0x100>)
 8001278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b27      	ldr	r3, [pc, #156]	; (800131c <SystemClock_Config+0x100>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800128a:	2309      	movs	r3, #9
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800128e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001292:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001298:	2302      	movs	r3, #2
 800129a:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012a0:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLM = 25;
 80012a2:	2319      	movs	r3, #25
 80012a4:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLN = 192;
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ae:	2304      	movs	r3, #4
 80012b0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b6:	4618      	mov	r0, r3
 80012b8:	f004 fd84 	bl	8005dc4 <HAL_RCC_OscConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0xaa>
            {
        Error_Handler();
 80012c2:	f000 fa3f 	bl	8001744 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012c6:	230f      	movs	r3, #15
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ca:	2302      	movs	r3, #2
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	2103      	movs	r1, #3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 ffe6 	bl	80062b4 <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0xd6>
            {
        Error_Handler();
 80012ee:	f000 fa29 	bl	8001744 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012f2:	2302      	movs	r3, #2
 80012f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4618      	mov	r0, r3
 8001302:	f005 f993 	bl	800662c <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0xf4>
            {
        Error_Handler();
 800130c:	f000 fa1a 	bl	8001744 <Error_Handler>
    }
}
 8001310:	bf00      	nop
 8001312:	3768      	adds	r7, #104	; 0x68
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 8001326:	463b      	mov	r3, r7
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_ADC1_Init+0x9c>)
 8001334:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <MX_ADC1_Init+0xa0>)
 8001336:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_ADC1_Init+0x9c>)
 800133a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800133e:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_ADC1_Init+0x9c>)
 8001342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001346:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <MX_ADC1_Init+0x9c>)
 800134a:	2201      	movs	r2, #1
 800134c:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_ADC1_Init+0x9c>)
 8001350:	2201      	movs	r2, #1
 8001352:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_ADC1_Init+0x9c>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_ADC1_Init+0x9c>)
 800135e:	2200      	movs	r2, #0
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_ADC1_Init+0x9c>)
 8001364:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <MX_ADC1_Init+0xa4>)
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_ADC1_Init+0x9c>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_ADC1_Init+0x9c>)
 8001370:	2201      	movs	r2, #1
 8001372:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_ADC1_Init+0x9c>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_ADC1_Init+0x9c>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001382:	480e      	ldr	r0, [pc, #56]	; (80013bc <MX_ADC1_Init+0x9c>)
 8001384:	f001 feec 	bl	8003160 <HAL_ADC_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_ADC1_Init+0x72>
            {
        Error_Handler();
 800138e:	f000 f9d9 	bl	8001744 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8001396:	2301      	movs	r3, #1
 8001398:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_ADC1_Init+0x9c>)
 80013a4:	f002 f8a0 	bl	80034e8 <HAL_ADC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0x92>
            {
        Error_Handler();
 80013ae:	f000 f9c9 	bl	8001744 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200025d4 	.word	0x200025d4
 80013c0:	40012000 	.word	0x40012000
 80013c4:	0f000001 	.word	0x0f000001

080013c8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_I2C1_Init+0x50>)
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <MX_I2C1_Init+0x54>)
 80013d0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 800000;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_I2C1_Init+0x50>)
 80013d4:	4a12      	ldr	r2, [pc, #72]	; (8001420 <MX_I2C1_Init+0x58>)
 80013d6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_I2C1_Init+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_I2C1_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_I2C1_Init+0x50>)
 80013e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ea:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_I2C1_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_I2C1_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_I2C1_Init+0x50>)
 8001406:	f002 fd7f 	bl	8003f08 <HAL_I2C_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_I2C1_Init+0x4c>
            {
        Error_Handler();
 8001410:	f000 f998 	bl	8001744 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20002580 	.word	0x20002580
 800141c:	40005400 	.word	0x40005400
 8001420:	000c3500 	.word	0x000c3500

08001424 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_RTC_Init+0x44>)
 800142a:	4a10      	ldr	r2, [pc, #64]	; (800146c <MX_RTC_Init+0x48>)
 800142c:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_RTC_Init+0x44>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_RTC_Init+0x44>)
 8001436:	227f      	movs	r2, #127	; 0x7f
 8001438:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_RTC_Init+0x44>)
 800143c:	22ff      	movs	r2, #255	; 0xff
 800143e:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_RTC_Init+0x44>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MX_RTC_Init+0x44>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_RTC_Init+0x44>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_RTC_Init+0x44>)
 8001454:	f005 f9da 	bl	800680c <HAL_RTC_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_RTC_Init+0x3e>
            {
        Error_Handler();
 800145e:	f000 f971 	bl	8001744 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200026a0 	.word	0x200026a0
 800146c:	40002800 	.word	0x40002800

08001470 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_SDIO_SD_Init+0x38>)
 8001476:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <MX_SDIO_SD_Init+0x3c>)
 8001478:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_SDIO_SD_Init+0x38>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_SDIO_SD_Init+0x38>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_SDIO_SD_Init+0x38>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_SDIO_SD_Init+0x38>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <MX_SDIO_SD_Init+0x38>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 12;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <MX_SDIO_SD_Init+0x38>)
 800149a:	220c      	movs	r2, #12
 800149c:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	200026fc 	.word	0x200026fc
 80014ac:	40012c00 	.word	0x40012c00

080014b0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <MX_GPIO_Init+0x108>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a3a      	ldr	r2, [pc, #232]	; (80015b8 <MX_GPIO_Init+0x108>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <MX_GPIO_Init+0x108>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <MX_GPIO_Init+0x108>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a33      	ldr	r2, [pc, #204]	; (80015b8 <MX_GPIO_Init+0x108>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <MX_GPIO_Init+0x108>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <MX_GPIO_Init+0x108>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a2c      	ldr	r2, [pc, #176]	; (80015b8 <MX_GPIO_Init+0x108>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <MX_GPIO_Init+0x108>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <MX_GPIO_Init+0x108>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <MX_GPIO_Init+0x108>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <MX_GPIO_Init+0x108>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001536:	2200      	movs	r2, #0
 8001538:	f247 710f 	movw	r1, #30479	; 0x770f
 800153c:	481f      	ldr	r0, [pc, #124]	; (80015bc <MX_GPIO_Init+0x10c>)
 800153e:	f002 fcaf 	bl	8003ea0 <HAL_GPIO_WritePin>
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : Detect_SDIO_Pin */
    GPIO_InitStruct.Pin = Detect_SDIO_Pin;
 8001542:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800154c:	2302      	movs	r3, #2
 800154e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Detect_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	481a      	ldr	r0, [pc, #104]	; (80015c0 <MX_GPIO_Init+0x110>)
 8001558:	f002 fb06 	bl	8003b68 <HAL_GPIO_Init>

    /*Configure GPIO pin : Button_6_Pin */
    GPIO_InitStruct.Pin = Button_6_Pin;
 800155c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001566:	2301      	movs	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Button_6_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4813      	ldr	r0, [pc, #76]	; (80015c0 <MX_GPIO_Init+0x110>)
 8001572:	f002 faf9 	bl	8003b68 <HAL_GPIO_Init>

    /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
     Button_5_Pin */
    GPIO_InitStruct.Pin = Button_1_Pin | Button_2_Pin | Button_3_Pin | Button_4_Pin
 8001576:	f248 43b0 	movw	r3, #33968	; 0x84b0
 800157a:	617b      	str	r3, [r7, #20]
            | Button_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	480e      	ldr	r0, [pc, #56]	; (80015c4 <MX_GPIO_Init+0x114>)
 800158c:	f002 faec 	bl	8003b68 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
     LED_5_Pin LED_6_Pin AMUX_S1_Pin AMUX_S0_Pin
     AMUX_S2_Pin AMUX_S3_Pin */
    GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001590:	f247 730f 	movw	r3, #30479	; 0x770f
 8001594:	617b      	str	r3, [r7, #20]
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_GPIO_Init+0x10c>)
 80015aa:	f002 fadd 	bl	8003b68 <HAL_GPIO_Init>

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020400 	.word	0x40020400
 80015c0:	40020800 	.word	0x40020800
 80015c4:	40020000 	.word	0x40020000

080015c8 <ADC_Mux_Select>:

/* USER CODE BEGIN 4 */
void ADC_Mux_Select(uint8_t c) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
    if (c > NUM_ADC_CHANNELS) return;
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d824      	bhi.n	8001622 <ADC_Mux_Select+0x5a>

    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	e01d      	b.n	800161a <ADC_Mux_Select+0x52>
        if (c & (1 << i)) {
 80015de:	79fa      	ldrb	r2, [r7, #7]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	fa42 f303 	asr.w	r3, r2, r3
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <ADC_Mux_Select+0x3a>
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_SET);
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <ADC_Mux_Select+0x64>)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4619      	mov	r1, r3
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <ADC_Mux_Select+0x68>)
 80015fc:	f002 fc50 	bl	8003ea0 <HAL_GPIO_WritePin>
 8001600:	e008      	b.n	8001614 <ADC_Mux_Select+0x4c>
        } else {
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_RESET);
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <ADC_Mux_Select+0x64>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	4808      	ldr	r0, [pc, #32]	; (8001630 <ADC_Mux_Select+0x68>)
 8001610:	f002 fc46 	bl	8003ea0 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b03      	cmp	r3, #3
 800161e:	ddde      	ble.n	80015de <ADC_Mux_Select+0x16>
 8001620:	e000      	b.n	8001624 <ADC_Mux_Select+0x5c>
    if (c > NUM_ADC_CHANNELS) return;
 8001622:	bf00      	nop
        }
    }
}
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	08014ed8 	.word	0x08014ed8
 8001630:	40020400 	.word	0x40020400

08001634 <ADC_Read_Knobs>:

void ADC_Read_Knobs() {
 8001634:	b580      	push	{r7, lr}
 8001636:	b096      	sub	sp, #88	; 0x58
 8001638:	af00      	add	r7, sp, #0
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001640:	e070      	b.n	8001724 <ADC_Read_Knobs+0xf0>
        uint16_t adcBuf[NUM_ADC_SAMPLES];

        ADC_Mux_Select(channel);
 8001642:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ffbe 	bl	80015c8 <ADC_Mux_Select>

        // Select channel
        ADC_ChannelConfTypeDef sConfig = { 0 };
 800164c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
        sConfig.Channel = adcChannels[channel];
 800165a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800165e:	4a36      	ldr	r2, [pc, #216]	; (8001738 <ADC_Read_Knobs+0x104>)
 8001660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001664:	643b      	str	r3, [r7, #64]	; 0x40
        sConfig.Rank = 1;
 8001666:	2301      	movs	r3, #1
 8001668:	647b      	str	r3, [r7, #68]	; 0x44
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800166a:	2300      	movs	r3, #0
 800166c:	64bb      	str	r3, [r7, #72]	; 0x48
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800166e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001672:	4619      	mov	r1, r3
 8001674:	4831      	ldr	r0, [pc, #196]	; (800173c <ADC_Read_Knobs+0x108>)
 8001676:	f001 ff37 	bl	80034e8 <HAL_ADC_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <ADC_Read_Knobs+0x50>
            Error_Handler();
 8001680:	f000 f860 	bl	8001744 <Error_Handler>
        }

        // Sample the channel NUM_ADC_SAMPLES times to the buffer
        HAL_ADC_Start(&hadc1);
 8001684:	482d      	ldr	r0, [pc, #180]	; (800173c <ADC_Read_Knobs+0x108>)
 8001686:	f001 fdaf 	bl	80031e8 <HAL_ADC_Start>
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8001690:	e016      	b.n	80016c0 <ADC_Read_Knobs+0x8c>
            HAL_ADC_PollForConversion(&hadc1, 1000);
 8001692:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001696:	4829      	ldr	r0, [pc, #164]	; (800173c <ADC_Read_Knobs+0x108>)
 8001698:	f001 fe8d 	bl	80033b6 <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 800169c:	4827      	ldr	r0, [pc, #156]	; (800173c <ADC_Read_Knobs+0x108>)
 800169e:	f001 ff15 	bl	80034cc <HAL_ADC_GetValue>
 80016a2:	4602      	mov	r2, r0
 80016a4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016a8:	b292      	uxth	r2, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80016b0:	440b      	add	r3, r1
 80016b2:	f823 2c58 	strh.w	r2, [r3, #-88]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80016b6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016ba:	3301      	adds	r3, #1
 80016bc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80016c0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016c4:	2b1f      	cmp	r3, #31
 80016c6:	d9e4      	bls.n	8001692 <ADC_Read_Knobs+0x5e>
        }
        HAL_ADC_Stop(&hadc1);
 80016c8:	481c      	ldr	r0, [pc, #112]	; (800173c <ADC_Read_Knobs+0x108>)
 80016ca:	f001 fe41 	bl	8003350 <HAL_ADC_Stop>

        // Calculate average of all samples for the channel
        uint16_t adc_sum = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80016da:	e011      	b.n	8001700 <ADC_Read_Knobs+0xcc>
            adc_sum += adcBuf[i];
 80016dc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80016e6:	4413      	add	r3, r2
 80016e8:	f833 2c58 	ldrh.w	r2, [r3, #-88]
 80016ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80016f0:	4413      	add	r3, r2
 80016f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80016f6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80016fa:	3301      	adds	r3, #1
 80016fc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8001700:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001704:	2b1f      	cmp	r3, #31
 8001706:	d9e9      	bls.n	80016dc <ADC_Read_Knobs+0xa8>
        }

        adcAveraged[channel] = adc_sum / NUM_ADC_SAMPLES;
 8001708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800170c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001710:	0952      	lsrs	r2, r2, #5
 8001712:	b291      	uxth	r1, r2
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <ADC_Read_Knobs+0x10c>)
 8001716:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 800171a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800171e:	3301      	adds	r3, #1
 8001720:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001728:	2b03      	cmp	r3, #3
 800172a:	d98a      	bls.n	8001642 <ADC_Read_Knobs+0xe>
    }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3758      	adds	r7, #88	; 0x58
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000010 	.word	0x20000010
 800173c:	200025d4 	.word	0x200025d4
 8001740:	20000350 	.word	0x20000350

08001744 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    __disable_irq();
    while (1) {
 800174c:	e7fe      	b.n	800174c <Error_Handler+0x8>

0800174e <MIDI_Send>:

#include "midi.h"
#include "usb_device.h"

// Sends a CC message for knob k with the specified value
void MIDI_Send(Knob *k, uint8_t value) {
 800174e:	b5b0      	push	{r4, r5, r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, Knob_Map(k, value, k->max_range));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7e1c      	ldrb	r4, [r3, #24]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7e5d      	ldrb	r5, [r3, #25]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7f5a      	ldrb	r2, [r3, #29]
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fc40 	bl	8000ff0 <Knob_Map>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4629      	mov	r1, r5
 8001776:	4620      	mov	r0, r4
 8001778:	f00d f95c 	bl	800ea34 <MX_USB_Send_Midi>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bdb0      	pop	{r4, r5, r7, pc}

08001784 <MIDI_Scale_And_Filter>:

// Scales an ADC value from (0, 255) to (0, k->max_values) an applies EMA filter
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 8001784:	b5b0      	push	{r4, r5, r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * k->max_values / UPPER_BOUND_ADC;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7f1b      	ldrb	r3, [r3, #28]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fedd 	bl	8000554 <__aeabi_i2d>
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b45      	ldr	r3, [pc, #276]	; (80018b4 <MIDI_Scale_And_Filter+0x130>)
 80017a0:	f7ff f86c 	bl	800087c <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff fa1e 	bl	8000bec <__aeabi_d2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f7fe fedf 	bl	8000578 <__aeabi_f2d>
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b3e      	ldr	r3, [pc, #248]	; (80018b8 <MIDI_Scale_And_Filter+0x134>)
 80017c0:	f7fe ff32 	bl	8000628 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	461d      	mov	r5, r3
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fec0 	bl	8000554 <__aeabi_i2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4620      	mov	r0, r4
 80017da:	4629      	mov	r1, r5
 80017dc:	f7fe ff24 	bl	8000628 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4614      	mov	r4, r2
 80017e6:	461d      	mov	r5, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7edb      	ldrb	r3, [r3, #27]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe feb1 	bl	8000554 <__aeabi_i2d>
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <MIDI_Scale_And_Filter+0x134>)
 80017f8:	f7fe ff16 	bl	8000628 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4620      	mov	r0, r4
 8001802:	4629      	mov	r1, r5
 8001804:	f7fe fd5a 	bl	80002bc <__adddf3>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4614      	mov	r4, r2
 800180e:	461d      	mov	r5, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7f5b      	ldrb	r3, [r3, #29]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe9d 	bl	8000554 <__aeabi_i2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4620      	mov	r0, r4
 8001820:	4629      	mov	r1, r5
 8001822:	f7ff f973 	bl	8000b0c <__aeabi_dcmplt>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d032      	beq.n	8001892 <MIDI_Scale_And_Filter+0x10e>
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f7fe fea3 	bl	8000578 <__aeabi_f2d>
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MIDI_Scale_And_Filter+0x134>)
 8001838:	f7fe fef6 	bl	8000628 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4614      	mov	r4, r2
 8001842:	461d      	mov	r5, r3
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe84 	bl	8000554 <__aeabi_i2d>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4620      	mov	r0, r4
 8001852:	4629      	mov	r1, r5
 8001854:	f7fe fee8 	bl	8000628 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4614      	mov	r4, r2
 800185e:	461d      	mov	r5, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7edb      	ldrb	r3, [r3, #27]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe75 	bl	8000554 <__aeabi_i2d>
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MIDI_Scale_And_Filter+0x134>)
 8001870:	f7fe feda 	bl	8000628 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4620      	mov	r0, r4
 800187a:	4629      	mov	r1, r5
 800187c:	f7fe fd1e 	bl	80002bc <__adddf3>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff f990 	bl	8000bac <__aeabi_d2uiz>
 800188c:	4603      	mov	r3, r0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	e00c      	b.n	80018ac <MIDI_Scale_And_Filter+0x128>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7f5b      	ldrb	r3, [r3, #29]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe5c 	bl	8000554 <__aeabi_i2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f982 	bl	8000bac <__aeabi_d2uiz>
 80018a8:	4603      	mov	r3, r0
 80018aa:	b2db      	uxtb	r3, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bdb0      	pop	{r4, r5, r7, pc}
 80018b4:	406f4000 	.word	0x406f4000
 80018b8:	3fe00000 	.word	0x3fe00000

080018bc <Preset_GetName>:
#include "preset.h"

void Preset_GetName(char *file_buffer, char *name_buffer) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
    cJSON *preset_json = cJSON_Parse(file_buffer);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f00e fa92 	bl	800fdf0 <cJSON_Parse>
 80018cc:	60f8      	str	r0, [r7, #12]
    if (preset_json == NULL) return;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d012      	beq.n	80018fa <Preset_GetName+0x3e>
    printf("test");
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <Preset_GetName+0x48>)
 80018d6:	f00e fe99 	bl	801060c <iprintf>
    const cJSON *name = cJSON_GetObjectItemCaseSensitive(preset_json, "name");
 80018da:	490b      	ldr	r1, [pc, #44]	; (8001908 <Preset_GetName+0x4c>)
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f00e fd8c 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 80018e2:	60b8      	str	r0, [r7, #8]
    snprintf(name_buffer, MAX_LABEL_CHARS+1, "%s", name->valuestring);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	4a08      	ldr	r2, [pc, #32]	; (800190c <Preset_GetName+0x50>)
 80018ea:	210f      	movs	r1, #15
 80018ec:	6838      	ldr	r0, [r7, #0]
 80018ee:	f00f f8bd 	bl	8010a6c <sniprintf>

    cJSON_Delete(preset_json);
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f00d fd82 	bl	800f3fc <cJSON_Delete>
 80018f8:	e000      	b.n	80018fc <Preset_GetName+0x40>
    if (preset_json == NULL) return;
 80018fa:	bf00      	nop
}
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	08013994 	.word	0x08013994
 8001908:	0801399c 	.word	0x0801399c
 800190c:	080139a4 	.word	0x080139a4

08001910 <Preset_Load>:

void Preset_Load(char *buffer) {
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b093      	sub	sp, #76	; 0x4c
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    cJSON *preset_json = cJSON_Parse(buffer);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f00e fa69 	bl	800fdf0 <cJSON_Parse>
 800191e:	6378      	str	r0, [r7, #52]	; 0x34
    if (preset_json == NULL) return;
 8001920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8100 	beq.w	8001b28 <Preset_Load+0x218>

    const cJSON *knobs_json = cJSON_GetObjectItemCaseSensitive(preset_json, "knobs");
 8001928:	4982      	ldr	r1, [pc, #520]	; (8001b34 <Preset_Load+0x224>)
 800192a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800192c:	f00e fd65 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 8001930:	6338      	str	r0, [r7, #48]	; 0x30
    const cJSON *knob_json = NULL;
 8001932:	2300      	movs	r3, #0
 8001934:	647b      	str	r3, [r7, #68]	; 0x44

    uint8_t i = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 800193c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <Preset_Load+0x38>
 8001942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	e000      	b.n	800194a <Preset_Load+0x3a>
 8001948:	2300      	movs	r3, #0
 800194a:	647b      	str	r3, [r7, #68]	; 0x44
 800194c:	e0e4      	b.n	8001b18 <Preset_Load+0x208>
    {
        if (i >= NUM_KNOBS) return;
 800194e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001952:	2b03      	cmp	r3, #3
 8001954:	f200 80ea 	bhi.w	8001b2c <Preset_Load+0x21c>

        const cJSON *row = cJSON_GetObjectItemCaseSensitive(knob_json, "row");
 8001958:	4977      	ldr	r1, [pc, #476]	; (8001b38 <Preset_Load+0x228>)
 800195a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800195c:	f00e fd4d 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 8001960:	62f8      	str	r0, [r7, #44]	; 0x2c
        const cJSON *col = cJSON_GetObjectItemCaseSensitive(knob_json, "col");
 8001962:	4976      	ldr	r1, [pc, #472]	; (8001b3c <Preset_Load+0x22c>)
 8001964:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001966:	f00e fd48 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 800196a:	62b8      	str	r0, [r7, #40]	; 0x28
        const cJSON *label = cJSON_GetObjectItemCaseSensitive(knob_json, "label");
 800196c:	4974      	ldr	r1, [pc, #464]	; (8001b40 <Preset_Load+0x230>)
 800196e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001970:	f00e fd43 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 8001974:	6278      	str	r0, [r7, #36]	; 0x24
        const cJSON *channel = cJSON_GetObjectItemCaseSensitive(knob_json, "channel");
 8001976:	4973      	ldr	r1, [pc, #460]	; (8001b44 <Preset_Load+0x234>)
 8001978:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800197a:	f00e fd3e 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 800197e:	6238      	str	r0, [r7, #32]
        const cJSON *cc = cJSON_GetObjectItemCaseSensitive(knob_json, "cc");
 8001980:	4971      	ldr	r1, [pc, #452]	; (8001b48 <Preset_Load+0x238>)
 8001982:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001984:	f00e fd39 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 8001988:	61f8      	str	r0, [r7, #28]
        const cJSON *init_value = cJSON_GetObjectItemCaseSensitive(knob_json, "init_value");
 800198a:	4970      	ldr	r1, [pc, #448]	; (8001b4c <Preset_Load+0x23c>)
 800198c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800198e:	f00e fd34 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 8001992:	61b8      	str	r0, [r7, #24]
        const cJSON *max_values = cJSON_GetObjectItemCaseSensitive(knob_json, "max_values");
 8001994:	496e      	ldr	r1, [pc, #440]	; (8001b50 <Preset_Load+0x240>)
 8001996:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001998:	f00e fd2f 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 800199c:	6178      	str	r0, [r7, #20]
        const cJSON *max_range = cJSON_GetObjectItemCaseSensitive(knob_json, "max_range");
 800199e:	496d      	ldr	r1, [pc, #436]	; (8001b54 <Preset_Load+0x244>)
 80019a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019a2:	f00e fd2a 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 80019a6:	6138      	str	r0, [r7, #16]
        const cJSON *isLocked = cJSON_GetObjectItemCaseSensitive(knob_json, "isLocked");
 80019a8:	496b      	ldr	r1, [pc, #428]	; (8001b58 <Preset_Load+0x248>)
 80019aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019ac:	f00e fd25 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 80019b0:	60f8      	str	r0, [r7, #12]

        knobs[i].row = row->valueint;
 80019b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80019ba:	b2d1      	uxtb	r1, r2
 80019bc:	4a67      	ldr	r2, [pc, #412]	; (8001b5c <Preset_Load+0x24c>)
 80019be:	015b      	lsls	r3, r3, #5
 80019c0:	4413      	add	r3, r2
 80019c2:	460a      	mov	r2, r1
 80019c4:	701a      	strb	r2, [r3, #0]
        knobs[i].col = col->valueint;
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80019ce:	b2d1      	uxtb	r1, r2
 80019d0:	4a62      	ldr	r2, [pc, #392]	; (8001b5c <Preset_Load+0x24c>)
 80019d2:	015b      	lsls	r3, r3, #5
 80019d4:	4413      	add	r3, r2
 80019d6:	3301      	adds	r3, #1
 80019d8:	460a      	mov	r2, r1
 80019da:	701a      	strb	r2, [r3, #0]
        snprintf(knobs[i].label, sizeof(knobs[i].label) / sizeof(knobs[i].label[0]), "%s", label->valuestring);
 80019dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80019e0:	015b      	lsls	r3, r3, #5
 80019e2:	4a5e      	ldr	r2, [pc, #376]	; (8001b5c <Preset_Load+0x24c>)
 80019e4:	4413      	add	r3, r2
 80019e6:	1c98      	adds	r0, r3, #2
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	4a5c      	ldr	r2, [pc, #368]	; (8001b60 <Preset_Load+0x250>)
 80019ee:	210f      	movs	r1, #15
 80019f0:	f00f f83c 	bl	8010a6c <sniprintf>
        knobs[i].channel = channel->valueint;
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80019fc:	b2d1      	uxtb	r1, r2
 80019fe:	4a57      	ldr	r2, [pc, #348]	; (8001b5c <Preset_Load+0x24c>)
 8001a00:	015b      	lsls	r3, r3, #5
 8001a02:	4413      	add	r3, r2
 8001a04:	3318      	adds	r3, #24
 8001a06:	460a      	mov	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
        knobs[i].cc = cc->valueint;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a12:	b2d1      	uxtb	r1, r2
 8001a14:	4a51      	ldr	r2, [pc, #324]	; (8001b5c <Preset_Load+0x24c>)
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	4413      	add	r3, r2
 8001a1a:	3319      	adds	r3, #25
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	701a      	strb	r2, [r3, #0]
        knobs[i].init_value = init_value->valueint;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a28:	b2d1      	uxtb	r1, r2
 8001a2a:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <Preset_Load+0x24c>)
 8001a2c:	015b      	lsls	r3, r3, #5
 8001a2e:	4413      	add	r3, r2
 8001a30:	331a      	adds	r3, #26
 8001a32:	460a      	mov	r2, r1
 8001a34:	701a      	strb	r2, [r3, #0]
        knobs[i].max_values = max_values->valueint;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a3e:	b2d1      	uxtb	r1, r2
 8001a40:	4a46      	ldr	r2, [pc, #280]	; (8001b5c <Preset_Load+0x24c>)
 8001a42:	015b      	lsls	r3, r3, #5
 8001a44:	4413      	add	r3, r2
 8001a46:	331c      	adds	r3, #28
 8001a48:	460a      	mov	r2, r1
 8001a4a:	701a      	strb	r2, [r3, #0]
        knobs[i].max_range = max_range->valueint;
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a54:	b2d1      	uxtb	r1, r2
 8001a56:	4a41      	ldr	r2, [pc, #260]	; (8001b5c <Preset_Load+0x24c>)
 8001a58:	015b      	lsls	r3, r3, #5
 8001a5a:	4413      	add	r3, r2
 8001a5c:	331d      	adds	r3, #29
 8001a5e:	460a      	mov	r2, r1
 8001a60:	701a      	strb	r2, [r3, #0]
        knobs[i].isLocked = isLocked->valueint;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a6a:	b2d1      	uxtb	r1, r2
 8001a6c:	4a3b      	ldr	r2, [pc, #236]	; (8001b5c <Preset_Load+0x24c>)
 8001a6e:	015b      	lsls	r3, r3, #5
 8001a70:	4413      	add	r3, r2
 8001a72:	331e      	adds	r3, #30
 8001a74:	460a      	mov	r2, r1
 8001a76:	701a      	strb	r2, [r3, #0]

        const cJSON *sub_labels = cJSON_GetObjectItemCaseSensitive(knob_json, "sub_labels");
 8001a78:	493a      	ldr	r1, [pc, #232]	; (8001b64 <Preset_Load+0x254>)
 8001a7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a7c:	f00e fcbd 	bl	80103fa <cJSON_GetObjectItemCaseSensitive>
 8001a80:	60b8      	str	r0, [r7, #8]
        const cJSON *sub_label = NULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 8001a86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a8a:	4a34      	ldr	r2, [pc, #208]	; (8001b5c <Preset_Load+0x24c>)
 8001a8c:	015b      	lsls	r3, r3, #5
 8001a8e:	4413      	add	r3, r2
 8001a90:	331c      	adds	r3, #28
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4613      	mov	r3, r2
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00e fce3 	bl	801046c <malloc>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4a2c      	ldr	r2, [pc, #176]	; (8001b5c <Preset_Load+0x24c>)
 8001aac:	0163      	lsls	r3, r4, #5
 8001aae:	4413      	add	r3, r2
 8001ab0:	3314      	adds	r3, #20
 8001ab2:	6019      	str	r1, [r3, #0]

        uint8_t label_index = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <Preset_Load+0x1b6>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	e000      	b.n	8001ac8 <Preset_Load+0x1b8>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aca:	e01a      	b.n	8001b02 <Preset_Load+0x1f2>
        {
            snprintf(knobs[i].sub_labels[label_index], sizeof(knobs[i].sub_labels[0]) / sizeof(knobs[i].sub_labels[0][0]), "%s", sub_label->valuestring);
 8001acc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ad0:	4a22      	ldr	r2, [pc, #136]	; (8001b5c <Preset_Load+0x24c>)
 8001ad2:	015b      	lsls	r3, r3, #5
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3314      	adds	r3, #20
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001ade:	4613      	mov	r3, r2
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	18c8      	adds	r0, r1, r3
 8001ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <Preset_Load+0x250>)
 8001aec:	210f      	movs	r1, #15
 8001aee:	f00e ffbd 	bl	8010a6c <sniprintf>
            label_index++;
 8001af2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001af6:	3301      	adds	r3, #1
 8001af8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e1      	bne.n	8001acc <Preset_Load+0x1bc>
        }
        i++;
 8001b08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 8001b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	647b      	str	r3, [r7, #68]	; 0x44
 8001b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f af17 	bne.w	800194e <Preset_Load+0x3e>
    }

    cJSON_Delete(preset_json);
 8001b20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b22:	f00d fc6b 	bl	800f3fc <cJSON_Delete>
 8001b26:	e002      	b.n	8001b2e <Preset_Load+0x21e>
    if (preset_json == NULL) return;
 8001b28:	bf00      	nop
 8001b2a:	e000      	b.n	8001b2e <Preset_Load+0x21e>
        if (i >= NUM_KNOBS) return;
 8001b2c:	bf00      	nop
}
 8001b2e:	374c      	adds	r7, #76	; 0x4c
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	080139a8 	.word	0x080139a8
 8001b38:	080139b0 	.word	0x080139b0
 8001b3c:	080139b4 	.word	0x080139b4
 8001b40:	080139b8 	.word	0x080139b8
 8001b44:	080139c0 	.word	0x080139c0
 8001b48:	080139c8 	.word	0x080139c8
 8001b4c:	080139cc 	.word	0x080139cc
 8001b50:	080139d8 	.word	0x080139d8
 8001b54:	080139e4 	.word	0x080139e4
 8001b58:	080139f0 	.word	0x080139f0
 8001b5c:	20002620 	.word	0x20002620
 8001b60:	080139a4 	.word	0x080139a4
 8001b64:	080139fc 	.word	0x080139fc

08001b68 <SD_FetchPresetNames>:
 */
#include "stm32f4xx_hal.h"
#include "sd.h"
#include "ssd1306.h"

void SD_FetchPresetNames() {
 8001b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6a:	b0df      	sub	sp, #380	; 0x17c
 8001b6c:	af00      	add	r7, sp, #0
    DIR root;
    FILINFO root_info;
    retSD = f_mount(&SDFatFS, "", 1);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4990      	ldr	r1, [pc, #576]	; (8001db4 <SD_FetchPresetNames+0x24c>)
 8001b72:	4891      	ldr	r0, [pc, #580]	; (8001db8 <SD_FetchPresetNames+0x250>)
 8001b74:	f00c f904 	bl	800dd80 <f_mount>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b8f      	ldr	r3, [pc, #572]	; (8001dbc <SD_FetchPresetNames+0x254>)
 8001b7e:	701a      	strb	r2, [r3, #0]

    // Count the number of preset files on the card
    uint8_t presetCount = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
    retSD = f_findfirst(&root, &root_info, "", "*.json");
 8001b86:	f107 0114 	add.w	r1, r7, #20
 8001b8a:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001b8e:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <SD_FetchPresetNames+0x258>)
 8001b90:	4a88      	ldr	r2, [pc, #544]	; (8001db4 <SD_FetchPresetNames+0x24c>)
 8001b92:	f00c fdde 	bl	800e752 <f_findfirst>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <SD_FetchPresetNames+0x254>)
 8001b9c:	701a      	strb	r2, [r3, #0]
    while (retSD == FR_OK && root_info.fname[0]) {
 8001b9e:	e010      	b.n	8001bc2 <SD_FetchPresetNames+0x5a>
        presetCount++;
 8001ba0:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
        retSD = f_findnext(&root, &root_info);
 8001baa:	f107 0214 	add.w	r2, r7, #20
 8001bae:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00c fda4 	bl	800e702 <f_findnext>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b7f      	ldr	r3, [pc, #508]	; (8001dbc <SD_FetchPresetNames+0x254>)
 8001bc0:	701a      	strb	r2, [r3, #0]
    while (retSD == FR_OK && root_info.fname[0]) {
 8001bc2:	4b7e      	ldr	r3, [pc, #504]	; (8001dbc <SD_FetchPresetNames+0x254>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d104      	bne.n	8001bd4 <SD_FetchPresetNames+0x6c>
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	7d9b      	ldrb	r3, [r3, #22]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e5      	bne.n	8001ba0 <SD_FetchPresetNames+0x38>
    }
    f_closedir(&root);
 8001bd4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f00c fd2f 	bl	800e63c <f_closedir>

    // Save the filename of each file so we can sort the list
    char filenames[presetCount][_MAX_LFN+1];
 8001bde:	f897 4176 	ldrb.w	r4, [r7, #374]	; 0x176
 8001be2:	466b      	mov	r3, sp
 8001be4:	461d      	mov	r5, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	3b01      	subs	r3, #1
 8001bea:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001bee:	b2e0      	uxtb	r0, r4
 8001bf0:	f04f 0100 	mov.w	r1, #0
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	02cb      	lsls	r3, r1, #11
 8001bfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001c02:	02c2      	lsls	r2, r0, #11
 8001c04:	b2e0      	uxtb	r0, r4
 8001c06:	f04f 0100 	mov.w	r1, #0
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	02cb      	lsls	r3, r1, #11
 8001c14:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001c18:	02c2      	lsls	r2, r0, #11
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	3307      	adds	r3, #7
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	ebad 0d03 	sub.w	sp, sp, r3
 8001c28:	466b      	mov	r3, sp
 8001c2a:	3300      	adds	r3, #0
 8001c2c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    uint8_t i = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    retSD = f_findfirst(&root, &root_info, "", "*.json");
 8001c36:	f107 0114 	add.w	r1, r7, #20
 8001c3a:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001c3e:	4b60      	ldr	r3, [pc, #384]	; (8001dc0 <SD_FetchPresetNames+0x258>)
 8001c40:	4a5c      	ldr	r2, [pc, #368]	; (8001db4 <SD_FetchPresetNames+0x24c>)
 8001c42:	f00c fd86 	bl	800e752 <f_findfirst>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b5c      	ldr	r3, [pc, #368]	; (8001dbc <SD_FetchPresetNames+0x254>)
 8001c4c:	701a      	strb	r2, [r3, #0]
    while (retSD == FR_OK && root_info.fname[0]) {
 8001c4e:	e01e      	b.n	8001c8e <SD_FetchPresetNames+0x126>
        snprintf(filenames[i], _MAX_LFN+1, "%s", root_info.fname);
 8001c50:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001c5a:	18d0      	adds	r0, r2, r3
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	3316      	adds	r3, #22
 8001c62:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <SD_FetchPresetNames+0x25c>)
 8001c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c68:	f00e ff00 	bl	8010a6c <sniprintf>
        retSD = f_findnext(&root, &root_info);
 8001c6c:	f107 0214 	add.w	r2, r7, #20
 8001c70:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00c fd43 	bl	800e702 <f_findnext>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <SD_FetchPresetNames+0x254>)
 8001c82:	701a      	strb	r2, [r3, #0]
        i++;
 8001c84:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    while (retSD == FR_OK && root_info.fname[0]) {
 8001c8e:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <SD_FetchPresetNames+0x254>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d104      	bne.n	8001ca0 <SD_FetchPresetNames+0x138>
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	7d9b      	ldrb	r3, [r3, #22]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1d7      	bne.n	8001c50 <SD_FetchPresetNames+0xe8>
    }

    // Sort the filenames
    qsort(filenames, presetCount, sizeof(filenames[0]), qsort_cmp);
 8001ca0:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8001ca4:	f897 1176 	ldrb.w	r1, [r7, #374]	; 0x176
 8001ca8:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <SD_FetchPresetNames+0x260>)
 8001caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cae:	f00e fd74 	bl	801079a <qsort>

    // Open each file, parse the name, and save it to the presets array
    for (i = 0; i < presetCount; i++) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001cb8:	e067      	b.n	8001d8a <SD_FetchPresetNames+0x222>
 8001cba:	466b      	mov	r3, sp
 8001cbc:	461e      	mov	r6, r3
        retSD = f_open(&SDFile, filenames[i], FA_READ);
 8001cbe:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001cc8:	4413      	add	r3, r2
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4619      	mov	r1, r3
 8001cce:	483f      	ldr	r0, [pc, #252]	; (8001dcc <SD_FetchPresetNames+0x264>)
 8001cd0:	f00c f89c 	bl	800de0c <f_open>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <SD_FetchPresetNames+0x254>)
 8001cda:	701a      	strb	r2, [r3, #0]

        char presetBuffer[f_size(&SDFile) + 1];
 8001cdc:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <SD_FetchPresetNames+0x264>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	1c5c      	adds	r4, r3, #1
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001cea:	4620      	mov	r0, r4
 8001cec:	f04f 0100 	mov.w	r1, #0
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	00cb      	lsls	r3, r1, #3
 8001cfa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cfe:	00c2      	lsls	r2, r0, #3
 8001d00:	4620      	mov	r0, r4
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	00cb      	lsls	r3, r1, #3
 8001d10:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d14:	00c2      	lsls	r2, r0, #3
 8001d16:	1de3      	adds	r3, r4, #7
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	ebad 0d03 	sub.w	sp, sp, r3
 8001d20:	466b      	mov	r3, sp
 8001d22:	3300      	adds	r3, #0
 8001d24:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        char nameBuffer[MAX_LABEL_CHARS + 1];
        unsigned int bytesRead;
        retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001d28:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8001d2c:	1e62      	subs	r2, r4, #1
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4826      	ldr	r0, [pc, #152]	; (8001dcc <SD_FetchPresetNames+0x264>)
 8001d32:	f00c fa29 	bl	800e188 <f_read>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <SD_FetchPresetNames+0x254>)
 8001d3c:	701a      	strb	r2, [r3, #0]
        presetBuffer[bytesRead] = '\0';
 8001d3e:	463b      	mov	r3, r7
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001d46:	2100      	movs	r1, #0
 8001d48:	54d1      	strb	r1, [r2, r3]

        Preset_GetName(presetBuffer, nameBuffer);
 8001d4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d4e:	1d3a      	adds	r2, r7, #4
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fdb2 	bl	80018bc <Preset_GetName>

        snprintf(presets[i], MAX_LABEL_CHARS + 1, "%s", nameBuffer);
 8001d58:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <SD_FetchPresetNames+0x268>)
 8001d64:	1898      	adds	r0, r3, r2
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <SD_FetchPresetNames+0x25c>)
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f00e fe7e 	bl	8010a6c <sniprintf>
        retSD = f_close(&SDFile);
 8001d70:	4816      	ldr	r0, [pc, #88]	; (8001dcc <SD_FetchPresetNames+0x264>)
 8001d72:	f00c fbc6 	bl	800e502 <f_close>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <SD_FetchPresetNames+0x254>)
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	46b5      	mov	sp, r6
    for (i = 0; i < presetCount; i++) {
 8001d80:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001d84:	3301      	adds	r3, #1
 8001d86:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001d8a:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8001d8e:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d391      	bcc.n	8001cba <SD_FetchPresetNames+0x152>
    }

    retSD = f_mount(NULL, "", 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	4906      	ldr	r1, [pc, #24]	; (8001db4 <SD_FetchPresetNames+0x24c>)
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f00b fff0 	bl	800dd80 <f_mount>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SD_FetchPresetNames+0x254>)
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	46ad      	mov	sp, r5
}
 8001daa:	bf00      	nop
 8001dac:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db4:	08013a08 	.word	0x08013a08
 8001db8:	200029bc 	.word	0x200029bc
 8001dbc:	20002784 	.word	0x20002784
 8001dc0:	08013a0c 	.word	0x08013a0c
 8001dc4:	08013a14 	.word	0x08013a14
 8001dc8:	08001ead 	.word	0x08001ead
 8001dcc:	2000278c 	.word	0x2000278c
 8001dd0:	200026c0 	.word	0x200026c0

08001dd4 <SD_LoadPreset>:

void SD_LoadPreset(char *filename) {
 8001dd4:	b5b0      	push	{r4, r5, r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	466b      	mov	r3, sp
 8001dde:	461d      	mov	r5, r3
    retSD = f_mount(&SDFatFS, "", 1);
 8001de0:	2201      	movs	r2, #1
 8001de2:	492e      	ldr	r1, [pc, #184]	; (8001e9c <SD_LoadPreset+0xc8>)
 8001de4:	482e      	ldr	r0, [pc, #184]	; (8001ea0 <SD_LoadPreset+0xcc>)
 8001de6:	f00b ffcb 	bl	800dd80 <f_mount>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <SD_LoadPreset+0xd0>)
 8001df0:	701a      	strb	r2, [r3, #0]
    retSD = f_open(&SDFile, filename, FA_READ);
 8001df2:	2201      	movs	r2, #1
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	482c      	ldr	r0, [pc, #176]	; (8001ea8 <SD_LoadPreset+0xd4>)
 8001df8:	f00c f808 	bl	800de0c <f_open>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <SD_LoadPreset+0xd0>)
 8001e02:	701a      	strb	r2, [r3, #0]

    char presetBuffer[f_size(&SDFile) + 1];
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <SD_LoadPreset+0xd4>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	1c5c      	adds	r4, r3, #1
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	4620      	mov	r0, r4
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	00cb      	lsls	r3, r1, #3
 8001e20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e24:	00c2      	lsls	r2, r0, #3
 8001e26:	4620      	mov	r0, r4
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	00cb      	lsls	r3, r1, #3
 8001e36:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e3a:	00c2      	lsls	r2, r0, #3
 8001e3c:	1de3      	adds	r3, r4, #7
 8001e3e:	08db      	lsrs	r3, r3, #3
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	ebad 0d03 	sub.w	sp, sp, r3
 8001e46:	466b      	mov	r3, sp
 8001e48:	3300      	adds	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
    unsigned int bytesRead;
    retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001e4c:	6939      	ldr	r1, [r7, #16]
 8001e4e:	1e62      	subs	r2, r4, #1
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <SD_LoadPreset+0xd4>)
 8001e56:	f00c f997 	bl	800e188 <f_read>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <SD_LoadPreset+0xd0>)
 8001e60:	701a      	strb	r2, [r3, #0]
    presetBuffer[bytesRead] = '\0';
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	2100      	movs	r1, #0
 8001e68:	54d1      	strb	r1, [r2, r3]

    Preset_Load(presetBuffer);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fd4f 	bl	8001910 <Preset_Load>

    retSD = f_close(&SDFile);
 8001e72:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <SD_LoadPreset+0xd4>)
 8001e74:	f00c fb45 	bl	800e502 <f_close>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <SD_LoadPreset+0xd0>)
 8001e7e:	701a      	strb	r2, [r3, #0]
    retSD = f_mount(NULL, "", 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	4906      	ldr	r1, [pc, #24]	; (8001e9c <SD_LoadPreset+0xc8>)
 8001e84:	2000      	movs	r0, #0
 8001e86:	f00b ff7b 	bl	800dd80 <f_mount>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SD_LoadPreset+0xd0>)
 8001e90:	701a      	strb	r2, [r3, #0]
 8001e92:	46ad      	mov	sp, r5

}
 8001e94:	bf00      	nop
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9c:	08013a08 	.word	0x08013a08
 8001ea0:	200029bc 	.word	0x200029bc
 8001ea4:	20002784 	.word	0x20002784
 8001ea8:	2000278c 	.word	0x2000278c

08001eac <qsort_cmp>:
void SD_Disable() {
    __HAL_SD_DISABLE(hsd);
    hsd.State = HAL_SD_STATE_RESET;
}

int qsort_cmp(const void *lhs, const void *rhs) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
    return strcmp(lhs, rhs);
 8001eb6:	6839      	ldr	r1, [r7, #0]
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7fe f991 	bl	80001e0 <strcmp>
 8001ebe:	4603      	mov	r3, r0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(uint8_t command) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af04      	add	r7, sp, #16
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	9302      	str	r3, [sp, #8]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2301      	movs	r3, #1
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2178      	movs	r1, #120	; 0x78
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <ssd1306_WriteCommand+0x2c>)
 8001ee6:	f002 fa51 	bl	800438c <HAL_I2C_Mem_Write>
 8001eea:	4603      	mov	r3, r0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20002580 	.word	0x20002580

08001ef8 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(Knob *k) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    int status = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(k);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fc59 	bl	80027bc <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(0xAE);   // Display off
 8001f0a:	20ae      	movs	r0, #174	; 0xae
 8001f0c:	f7ff ffdc 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // Set Memory Addressing Mode
 8001f1a:	2020      	movs	r0, #32
 8001f1c:	f7ff ffd4 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f2a:	2010      	movs	r0, #16
 8001f2c:	f7ff ffcc 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001f3a:	20b0      	movs	r0, #176	; 0xb0
 8001f3c:	f7ff ffc4 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xC8);   // Set COM Output Scan Direction
 8001f4a:	20c8      	movs	r0, #200	; 0xc8
 8001f4c:	f7ff ffbc 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // Set low column address
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7ff ffb4 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // Set high column address
 8001f6a:	2010      	movs	r0, #16
 8001f6c:	f7ff ffac 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);   // Set start line address
 8001f7a:	2040      	movs	r0, #64	; 0x40
 8001f7c:	f7ff ffa4 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x81);   // set contrast control register
 8001f8a:	2081      	movs	r0, #129	; 0x81
 8001f8c:	f7ff ff9c 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);
 8001f9a:	2040      	movs	r0, #64	; 0x40
 8001f9c:	f7ff ff94 	bl	8001ec8 <ssd1306_WriteCommand>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA1);   // Set segment re-map 0 to 127
 8001faa:	20a1      	movs	r0, #161	; 0xa1
 8001fac:	f7ff ff8c 	bl	8001ec8 <ssd1306_WriteCommand>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA6);   // Set normal display
 8001fba:	20a6      	movs	r0, #166	; 0xa6
 8001fbc:	f7ff ff84 	bl	8001ec8 <ssd1306_WriteCommand>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA8);   // Set multiplex ratio(1 to 64)
 8001fca:	20a8      	movs	r0, #168	; 0xa8
 8001fcc:	f7ff ff7c 	bl	8001ec8 <ssd1306_WriteCommand>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(SSD1306_HEIGHT - 1);
 8001fda:	203f      	movs	r0, #63	; 0x3f
 8001fdc:	f7ff ff74 	bl	8001ec8 <ssd1306_WriteCommand>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fea:	20a4      	movs	r0, #164	; 0xa4
 8001fec:	f7ff ff6c 	bl	8001ec8 <ssd1306_WriteCommand>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD3);   // Set display offset
 8001ffa:	20d3      	movs	r0, #211	; 0xd3
 8001ffc:	f7ff ff64 	bl	8001ec8 <ssd1306_WriteCommand>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // No offset
 800200a:	2000      	movs	r0, #0
 800200c:	f7ff ff5c 	bl	8001ec8 <ssd1306_WriteCommand>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD5);   // Set display clock divide ratio/oscillator frequency
 800201a:	20d5      	movs	r0, #213	; 0xd5
 800201c:	f7ff ff54 	bl	8001ec8 <ssd1306_WriteCommand>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xF0);   // Set divide ratio
 800202a:	20f0      	movs	r0, #240	; 0xf0
 800202c:	f7ff ff4c 	bl	8001ec8 <ssd1306_WriteCommand>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD9);   // Set pre-charge period
 800203a:	20d9      	movs	r0, #217	; 0xd9
 800203c:	f7ff ff44 	bl	8001ec8 <ssd1306_WriteCommand>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x22);
 800204a:	2022      	movs	r0, #34	; 0x22
 800204c:	f7ff ff3c 	bl	8001ec8 <ssd1306_WriteCommand>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xDA);   // Set com pins hardware configuration
 800205a:	20da      	movs	r0, #218	; 0xda
 800205c:	f7ff ff34 	bl	8001ec8 <ssd1306_WriteCommand>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(0x12);   // Do not use COM left/right remap
 800206a:	2012      	movs	r0, #18
 800206c:	f7ff ff2c 	bl	8001ec8 <ssd1306_WriteCommand>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(0xDB);   // Set vcomh
 800207a:	20db      	movs	r0, #219	; 0xdb
 800207c:	f7ff ff24 	bl	8001ec8 <ssd1306_WriteCommand>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // 0x20,0.77xVcc
 800208a:	2020      	movs	r0, #32
 800208c:	f7ff ff1c 	bl	8001ec8 <ssd1306_WriteCommand>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x8D);   // Set DC-DC enable
 800209a:	208d      	movs	r0, #141	; 0x8d
 800209c:	f7ff ff14 	bl	8001ec8 <ssd1306_WriteCommand>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x14);   //
 80020aa:	2014      	movs	r0, #20
 80020ac:	f7ff ff0c 	bl	8001ec8 <ssd1306_WriteCommand>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xAF);   // Turn on SSD1306 panel
 80020ba:	20af      	movs	r0, #175	; 0xaf
 80020bc:	f7ff ff04 	bl	8001ec8 <ssd1306_WriteCommand>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <ssd1306_Init+0x1dc>
        return 1;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e012      	b.n	80020fa <ssd1306_Init+0x202>
    }

    ssd1306_Fill(Black);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f000 f819 	bl	800210c <ssd1306_Fill>
    ssd1306_AdjustBrightness(0x63);
 80020da:	2063      	movs	r0, #99	; 0x63
 80020dc:	f000 fb44 	bl	8002768 <ssd1306_AdjustBrightness>
    ssd1306_UpdateScreen(&hi2c1);
 80020e0:	4808      	ldr	r0, [pc, #32]	; (8002104 <ssd1306_Init+0x20c>)
 80020e2:	f000 f837 	bl	8002154 <ssd1306_UpdateScreen>

    SSD1306.CurrentX = 0;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <ssd1306_Init+0x210>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <ssd1306_Init+0x210>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <ssd1306_Init+0x210>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	715a      	strb	r2, [r3, #5]

    return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20002580 	.word	0x20002580
 8002108:	20000758 	.word	0x20000758

0800210c <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e00d      	b.n	8002138 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <ssd1306_Fill+0x1a>
 8002122:	2100      	movs	r1, #0
 8002124:	e000      	b.n	8002128 <ssd1306_Fill+0x1c>
 8002126:	21ff      	movs	r1, #255	; 0xff
 8002128:	4a09      	ldr	r2, [pc, #36]	; (8002150 <ssd1306_Fill+0x44>)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	460a      	mov	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3301      	adds	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213e:	d3ed      	bcc.n	800211c <ssd1306_Fill+0x10>
    }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000358 	.word	0x20000358

08002154 <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen() {
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af04      	add	r7, sp, #16
    for (uint8_t i = 0; i < 8; i++) {
 800215a:	2300      	movs	r3, #0
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	e01d      	b.n	800219c <ssd1306_UpdateScreen+0x48>
        ssd1306_WriteCommand(0xB0 + i);
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	3b50      	subs	r3, #80	; 0x50
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff feae 	bl	8001ec8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800216c:	2000      	movs	r0, #0
 800216e:	f7ff feab 	bl	8001ec8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002172:	2010      	movs	r0, #16
 8002174:	f7ff fea8 	bl	8001ec8 <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	01db      	lsls	r3, r3, #7
 800217c:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <ssd1306_UpdateScreen+0x58>)
 800217e:	4413      	add	r3, r2
 8002180:	2264      	movs	r2, #100	; 0x64
 8002182:	9202      	str	r2, [sp, #8]
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	9201      	str	r2, [sp, #4]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2301      	movs	r3, #1
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	2178      	movs	r1, #120	; 0x78
 8002190:	4807      	ldr	r0, [pc, #28]	; (80021b0 <ssd1306_UpdateScreen+0x5c>)
 8002192:	f002 f8fb 	bl	800438c <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	3301      	adds	r3, #1
 800219a:	71fb      	strb	r3, [r7, #7]
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	2b07      	cmp	r3, #7
 80021a0:	d9de      	bls.n	8002160 <ssd1306_UpdateScreen+0xc>
    }
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000358 	.word	0x20000358
 80021b0:	20002580 	.word	0x20002580

080021b4 <ssd1306_WriteAllKnobs>:

void ssd1306_WriteAllKnobs() {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	71fb      	strb	r3, [r7, #7]
 80021be:	e009      	b.n	80021d4 <ssd1306_WriteAllKnobs+0x20>
        ssd1306_WriteKnob(&knobs[i]);
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	015b      	lsls	r3, r3, #5
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <ssd1306_WriteAllKnobs+0x30>)
 80021c6:	4413      	add	r3, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f80d 	bl	80021e8 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	3301      	adds	r3, #1
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d9f2      	bls.n	80021c0 <ssd1306_WriteAllKnobs+0xc>
    }
}
 80021da:	bf00      	nop
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20002620 	.word	0x20002620

080021e8 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(Knob *k) {
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b08d      	sub	sp, #52	; 0x34
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
    ssd1306_Select(k);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fae3 	bl	80027bc <ssd1306_Select>
    ssd1306_Fill(Black);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff ff88 	bl	800210c <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 80021fc:	4b9d      	ldr	r3, [pc, #628]	; (8002474 <ssd1306_WriteKnob+0x28c>)
 80021fe:	f107 0410 	add.w	r4, r7, #16
 8002202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7e1b      	ldrb	r3, [r3, #24]
 800220c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002210:	4a99      	ldr	r2, [pc, #612]	; (8002478 <ssd1306_WriteKnob+0x290>)
 8002212:	2103      	movs	r1, #3
 8002214:	f00e fc2a 	bl	8010a6c <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7e5b      	ldrb	r3, [r3, #25]
 800221c:	f107 0020 	add.w	r0, r7, #32
 8002220:	4a96      	ldr	r2, [pc, #600]	; (800247c <ssd1306_WriteKnob+0x294>)
 8002222:	2104      	movs	r1, #4
 8002224:	f00e fc22 	bl	8010a6c <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	4618      	mov	r0, r3
 800222e:	f7fd ffe1 	bl	80001f4 <strlen>
 8002232:	4604      	mov	r4, r0
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 faf7 	bl	8002828 <update_init_indicator>
 800223a:	4603      	mov	r3, r0
 800223c:	f107 0010 	add.w	r0, r7, #16
 8002240:	4a8f      	ldr	r2, [pc, #572]	; (8002480 <ssd1306_WriteKnob+0x298>)
 8002242:	4621      	mov	r1, r4
 8002244:	f00e fc12 	bl	8010a6c <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) Knob_Map(k, k->value, k->max_range));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7ed9      	ldrb	r1, [r3, #27]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7f5b      	ldrb	r3, [r3, #29]
 8002250:	461a      	mov	r2, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fecc 	bl	8000ff0 <Knob_Map>
 8002258:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 800225a:	f107 000c 	add.w	r0, r7, #12
 800225e:	4a87      	ldr	r2, [pc, #540]	; (800247c <ssd1306_WriteKnob+0x294>)
 8002260:	2104      	movs	r1, #4
 8002262:	f00e fc03 	bl	8010a6c <sniprintf>

    ssd1306_SetCursor(0, 0);
 8002266:	2100      	movs	r1, #0
 8002268:	2000      	movs	r0, #0
 800226a:	f000 fa65 	bl	8002738 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 800226e:	4a85      	ldr	r2, [pc, #532]	; (8002484 <ssd1306_WriteKnob+0x29c>)
 8002270:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002274:	2301      	movs	r3, #1
 8002276:	ca06      	ldmia	r2, {r1, r2}
 8002278:	f000 fa38 	bl	80026ec <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 800227c:	4b81      	ldr	r3, [pc, #516]	; (8002484 <ssd1306_WriteKnob+0x29c>)
 800227e:	785b      	ldrb	r3, [r3, #1]
 8002280:	3301      	adds	r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4619      	mov	r1, r3
 8002286:	2000      	movs	r0, #0
 8002288:	f000 fa56 	bl	8002738 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 800228c:	4a7d      	ldr	r2, [pc, #500]	; (8002484 <ssd1306_WriteKnob+0x29c>)
 800228e:	f107 0020 	add.w	r0, r7, #32
 8002292:	2301      	movs	r3, #1
 8002294:	ca06      	ldmia	r2, {r1, r2}
 8002296:	f000 fa29 	bl	80026ec <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 800229a:	f107 0310 	add.w	r3, r7, #16
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fd ffa8 	bl	80001f4 <strlen>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4a77      	ldr	r2, [pc, #476]	; (8002484 <ssd1306_WriteKnob+0x29c>)
 80022a8:	7812      	ldrb	r2, [r2, #0]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	b2d8      	uxtb	r0, r3
 80022b6:	4b73      	ldr	r3, [pc, #460]	; (8002484 <ssd1306_WriteKnob+0x29c>)
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	3301      	adds	r3, #1
 80022bc:	0fda      	lsrs	r2, r3, #31
 80022be:	4413      	add	r3, r2
 80022c0:	105b      	asrs	r3, r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	f000 fa37 	bl	8002738 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 80022ca:	4a6e      	ldr	r2, [pc, #440]	; (8002484 <ssd1306_WriteKnob+0x29c>)
 80022cc:	f107 0010 	add.w	r0, r7, #16
 80022d0:	2301      	movs	r3, #1
 80022d2:	ca06      	ldmia	r2, {r1, r2}
 80022d4:	f000 fa0a 	bl	80026ec <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 80022d8:	4b6a      	ldr	r3, [pc, #424]	; (8002484 <ssd1306_WriteKnob+0x29c>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f1c3 0320 	rsb	r3, r3, #32
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b2d8      	uxtb	r0, r3
 80022ea:	4b66      	ldr	r3, [pc, #408]	; (8002484 <ssd1306_WriteKnob+0x29c>)
 80022ec:	785b      	ldrb	r3, [r3, #1]
 80022ee:	3301      	adds	r3, #1
 80022f0:	0fda      	lsrs	r2, r3, #31
 80022f2:	4413      	add	r3, r2
 80022f4:	105b      	asrs	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4619      	mov	r1, r3
 80022fa:	f000 fa1d 	bl	8002738 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 80022fe:	4a61      	ldr	r2, [pc, #388]	; (8002484 <ssd1306_WriteKnob+0x29c>)
 8002300:	f107 000c 	add.w	r0, r7, #12
 8002304:	2301      	movs	r3, #1
 8002306:	ca06      	ldmia	r2, {r1, r2}
 8002308:	f000 f9f0 	bl	80026ec <ssd1306_WriteString>

    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 800230c:	2300      	movs	r3, #0
 800230e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002312:	e013      	b.n	800233c <ssd1306_WriteKnob+0x154>
        ssd1306_DrawPixel(i, SSD1306.CurrentY + NumFont_5x7.FontHeight + 4, White);
 8002314:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <ssd1306_WriteKnob+0x2a0>)
 8002316:	885b      	ldrh	r3, [r3, #2]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <ssd1306_WriteKnob+0x29c>)
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	4413      	add	r3, r2
 8002320:	b2db      	uxtb	r3, r3
 8002322:	3304      	adds	r3, #4
 8002324:	b2d9      	uxtb	r1, r3
 8002326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800232a:	2201      	movs	r2, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f8fd 	bl	800252c <ssd1306_DrawPixel>
    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8002332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002336:	3301      	adds	r3, #1
 8002338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800233c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002340:	2b00      	cmp	r3, #0
 8002342:	dae7      	bge.n	8002314 <ssd1306_WriteKnob+0x12c>
    }

    uint8_t len_label = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t x = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t y = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    uint8_t y_remaining = SSD1306_HEIGHT - 2 * NumFont_5x7.FontHeight;
 8002356:	4b4b      	ldr	r3, [pc, #300]	; (8002484 <ssd1306_WriteKnob+0x29c>)
 8002358:	785b      	ldrb	r3, [r3, #1]
 800235a:	f1c3 0320 	rsb	r3, r3, #32
 800235e:	b2db      	uxtb	r3, r3
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    // Draw main label
    len_label = strlen(k->label);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3302      	adds	r3, #2
 800236a:	4618      	mov	r0, r3
 800236c:	f7fd ff42 	bl	80001f4 <strlen>
 8002370:	4603      	mov	r3, r0
 8002372:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8002376:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800237a:	4a44      	ldr	r2, [pc, #272]	; (800248c <ssd1306_WriteKnob+0x2a4>)
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002386:	0fda      	lsrs	r2, r3, #31
 8002388:	4413      	add	r3, r2
 800238a:	105b      	asrs	r3, r3, #1
 800238c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = (float) y_remaining / 3 + (Font_10x18.FontHeight / 4);
 8002390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002394:	ee07 3a90 	vmov	s15, r3
 8002398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80023a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <ssd1306_WriteKnob+0x2a4>)
 80023a6:	785b      	ldrb	r3, [r3, #1]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	ee07 3a90 	vmov	s15, r3
 80023b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023bc:	edc7 7a00 	vstr	s15, [r7]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 80023c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80023ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f9b1 	bl	8002738 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	1c98      	adds	r0, r3, #2
 80023da:	4a2c      	ldr	r2, [pc, #176]	; (800248c <ssd1306_WriteKnob+0x2a4>)
 80023dc:	2301      	movs	r3, #1
 80023de:	ca06      	ldmia	r2, {r1, r2}
 80023e0:	f000 f984 	bl	80026ec <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7f1b      	ldrb	r3, [r3, #28]
 80023e8:	b25b      	sxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db02      	blt.n	80023f4 <ssd1306_WriteKnob+0x20c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7edb      	ldrb	r3, [r3, #27]
 80023f2:	e000      	b.n	80023f6 <ssd1306_WriteKnob+0x20e>
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    len_label = strlen(k->sub_labels[sl_index]);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6959      	ldr	r1, [r3, #20]
 80023fe:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	440b      	add	r3, r1
 800240a:	4618      	mov	r0, r3
 800240c:	f7fd fef2 	bl	80001f4 <strlen>
 8002410:	4603      	mov	r3, r0
 8002412:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8002416:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <ssd1306_WriteKnob+0x2a4>)
 800241c:	7812      	ldrb	r2, [r2, #0]
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002426:	0fda      	lsrs	r2, r3, #31
 8002428:	4413      	add	r3, r2
 800242a:	105b      	asrs	r3, r3, #1
 800242c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = SSD1306_HEIGHT - Font_10x18.FontHeight - 1;
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <ssd1306_WriteKnob+0x2a4>)
 8002432:	785b      	ldrb	r3, [r3, #1]
 8002434:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002438:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 800243c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002440:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f976 	bl	8002738 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6959      	ldr	r1, [r3, #20]
 8002450:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002454:	4613      	mov	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	18c8      	adds	r0, r1, r3
 800245c:	4a0b      	ldr	r2, [pc, #44]	; (800248c <ssd1306_WriteKnob+0x2a4>)
 800245e:	2301      	movs	r3, #1
 8002460:	ca06      	ldmia	r2, {r1, r2}
 8002462:	f000 f943 	bl	80026ec <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8002466:	f7ff fe75 	bl	8002154 <ssd1306_UpdateScreen>
}
 800246a:	bf00      	nop
 800246c:	3734      	adds	r7, #52	; 0x34
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}
 8002472:	bf00      	nop
 8002474:	08013a2c 	.word	0x08013a2c
 8002478:	08013a18 	.word	0x08013a18
 800247c:	08013a20 	.word	0x08013a20
 8002480:	08013a28 	.word	0x08013a28
 8002484:	20000000 	.word	0x20000000
 8002488:	20000758 	.word	0x20000758
 800248c:	20000008 	.word	0x20000008

08002490 <ssd1306_WritePresets>:

void ssd1306_WritePresets() {
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8002496:	2300      	movs	r3, #0
 8002498:	71fb      	strb	r3, [r7, #7]
 800249a:	e038      	b.n	800250e <ssd1306_WritePresets+0x7e>
        ssd1306_Select(&knobs[i]);
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	015b      	lsls	r3, r3, #5
 80024a0:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <ssd1306_WritePresets+0x90>)
 80024a2:	4413      	add	r3, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f989 	bl	80027bc <ssd1306_Select>
        ssd1306_Fill(Black);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7ff fe2e 	bl	800210c <ssd1306_Fill>
        uint8_t x = (SSD1306_WIDTH - strlen(presets[i]) * Font_10x18.FontWidth) / 2;
 80024b0:	79fa      	ldrb	r2, [r7, #7]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <ssd1306_WritePresets+0x94>)
 80024ba:	4413      	add	r3, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fd fe99 	bl	80001f4 <strlen>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a18      	ldr	r2, [pc, #96]	; (8002528 <ssd1306_WritePresets+0x98>)
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	71bb      	strb	r3, [r7, #6]
        uint8_t y = SSD1306_HEIGHT / 2 - Font_10x18.FontHeight / 2;
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <ssd1306_WritePresets+0x98>)
 80024d6:	785b      	ldrb	r3, [r3, #1]
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f1c3 0320 	rsb	r3, r3, #32
 80024e0:	717b      	strb	r3, [r7, #5]
        ssd1306_SetCursor(x, y);
 80024e2:	797a      	ldrb	r2, [r7, #5]
 80024e4:	79bb      	ldrb	r3, [r7, #6]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 f925 	bl	8002738 <ssd1306_SetCursor>
        ssd1306_WriteString(presets[i], Font_10x18, White);
 80024ee:	79fa      	ldrb	r2, [r7, #7]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <ssd1306_WritePresets+0x94>)
 80024f8:	1898      	adds	r0, r3, r2
 80024fa:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <ssd1306_WritePresets+0x98>)
 80024fc:	2301      	movs	r3, #1
 80024fe:	ca06      	ldmia	r2, {r1, r2}
 8002500:	f000 f8f4 	bl	80026ec <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8002504:	f7ff fe26 	bl	8002154 <ssd1306_UpdateScreen>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	3301      	adds	r3, #1
 800250c:	71fb      	strb	r3, [r7, #7]
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d9c3      	bls.n	800249c <ssd1306_WritePresets+0xc>
    }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20002620 	.word	0x20002620
 8002524:	200026c0 	.word	0x200026c0
 8002528:	20000008 	.word	0x20000008

0800252c <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
 8002536:	460b      	mov	r3, r1
 8002538:	71bb      	strb	r3, [r7, #6]
 800253a:	4613      	mov	r3, r2
 800253c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db48      	blt.n	80025d8 <ssd1306_DrawPixel+0xac>
 8002546:	79bb      	ldrb	r3, [r7, #6]
 8002548:	2b3f      	cmp	r3, #63	; 0x3f
 800254a:	d845      	bhi.n	80025d8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <ssd1306_DrawPixel+0xb8>)
 800254e:	791b      	ldrb	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8002554:	797b      	ldrb	r3, [r7, #5]
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 8002562:	797b      	ldrb	r3, [r7, #5]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d11a      	bne.n	800259e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002568:	79fa      	ldrb	r2, [r7, #7]
 800256a:	79bb      	ldrb	r3, [r7, #6]
 800256c:	08db      	lsrs	r3, r3, #3
 800256e:	b2d8      	uxtb	r0, r3
 8002570:	4603      	mov	r3, r0
 8002572:	01db      	lsls	r3, r3, #7
 8002574:	4413      	add	r3, r2
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <ssd1306_DrawPixel+0xbc>)
 8002578:	5cd3      	ldrb	r3, [r2, r3]
 800257a:	b25a      	sxtb	r2, r3
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	b25b      	sxtb	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	b259      	sxtb	r1, r3
 800258e:	79fa      	ldrb	r2, [r7, #7]
 8002590:	4603      	mov	r3, r0
 8002592:	01db      	lsls	r3, r3, #7
 8002594:	4413      	add	r3, r2
 8002596:	b2c9      	uxtb	r1, r1
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <ssd1306_DrawPixel+0xbc>)
 800259a:	54d1      	strb	r1, [r2, r3]
 800259c:	e01d      	b.n	80025da <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800259e:	79fa      	ldrb	r2, [r7, #7]
 80025a0:	79bb      	ldrb	r3, [r7, #6]
 80025a2:	08db      	lsrs	r3, r3, #3
 80025a4:	b2d8      	uxtb	r0, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	01db      	lsls	r3, r3, #7
 80025aa:	4413      	add	r3, r2
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <ssd1306_DrawPixel+0xbc>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	b25a      	sxtb	r2, r3
 80025b2:	79bb      	ldrb	r3, [r7, #6]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	4013      	ands	r3, r2
 80025c6:	b259      	sxtb	r1, r3
 80025c8:	79fa      	ldrb	r2, [r7, #7]
 80025ca:	4603      	mov	r3, r0
 80025cc:	01db      	lsls	r3, r3, #7
 80025ce:	4413      	add	r3, r2
 80025d0:	b2c9      	uxtb	r1, r1
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <ssd1306_DrawPixel+0xbc>)
 80025d4:	54d1      	strb	r1, [r2, r3]
 80025d6:	e000      	b.n	80025da <ssd1306_DrawPixel+0xae>
        return;
 80025d8:	bf00      	nop
    }
}
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	20000758 	.word	0x20000758
 80025e8:	20000358 	.word	0x20000358

080025ec <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4604      	mov	r4, r0
 80025f4:	1d38      	adds	r0, r7, #4
 80025f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80025fa:	461a      	mov	r2, r3
 80025fc:	4623      	mov	r3, r4
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	4613      	mov	r3, r2
 8002602:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002604:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <ssd1306_WriteChar+0xfc>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	793b      	ldrb	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	2b7f      	cmp	r3, #127	; 0x7f
 8002610:	dc06      	bgt.n	8002620 <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 8002612:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <ssd1306_WriteChar+0xfc>)
 8002614:	885b      	ldrh	r3, [r3, #2]
 8002616:	461a      	mov	r2, r3
 8002618:	797b      	ldrb	r3, [r7, #5]
 800261a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800261c:	2b3f      	cmp	r3, #63	; 0x3f
 800261e:	dd01      	ble.n	8002624 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 8002620:	2300      	movs	r3, #0
 8002622:	e05d      	b.n	80026e0 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	e04c      	b.n	80026c4 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	3b20      	subs	r3, #32
 8002630:	7979      	ldrb	r1, [r7, #5]
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4619      	mov	r1, r3
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	440b      	add	r3, r1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	e034      	b.n	80026b4 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d012      	beq.n	8002680 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <ssd1306_WriteChar+0xfc>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4413      	add	r3, r2
 8002666:	b2d8      	uxtb	r0, r3
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <ssd1306_WriteChar+0xfc>)
 800266a:	885b      	ldrh	r3, [r3, #2]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4413      	add	r3, r2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	7bba      	ldrb	r2, [r7, #14]
 8002678:	4619      	mov	r1, r3
 800267a:	f7ff ff57 	bl	800252c <ssd1306_DrawPixel>
 800267e:	e016      	b.n	80026ae <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <ssd1306_WriteChar+0xfc>)
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4413      	add	r3, r2
 800268c:	b2d8      	uxtb	r0, r3
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <ssd1306_WriteChar+0xfc>)
 8002690:	885b      	ldrh	r3, [r3, #2]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4413      	add	r3, r2
 800269a:	b2d9      	uxtb	r1, r3
 800269c:	7bbb      	ldrb	r3, [r7, #14]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	f7ff ff3f 	bl	800252c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	793b      	ldrb	r3, [r7, #4]
 80026b6:	461a      	mov	r2, r3
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d3c5      	bcc.n	800264a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	797b      	ldrb	r3, [r7, #5]
 80026c6:	461a      	mov	r2, r3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d3ad      	bcc.n	800262a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <ssd1306_WriteChar+0xfc>)
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	793b      	ldrb	r3, [r7, #4]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <ssd1306_WriteChar+0xfc>)
 80026dc:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3724      	adds	r7, #36	; 0x24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd90      	pop	{r4, r7, pc}
 80026e8:	20000758 	.word	0x20000758

080026ec <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	1d38      	adds	r0, r7, #4
 80026f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80026fa:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80026fc:	e012      	b.n	8002724 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	7818      	ldrb	r0, [r3, #0]
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	1d3a      	adds	r2, r7, #4
 8002706:	ca06      	ldmia	r2, {r1, r2}
 8002708:	f7ff ff70 	bl	80025ec <ssd1306_WriteChar>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d002      	beq.n	800271e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	e008      	b.n	8002730 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e8      	bne.n	80026fe <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	781b      	ldrb	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	460a      	mov	r2, r1
 8002742:	71fb      	strb	r3, [r7, #7]
 8002744:	4613      	mov	r3, r2
 8002746:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <ssd1306_SetCursor+0x2c>)
 800274e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002750:	79bb      	ldrb	r3, [r7, #6]
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <ssd1306_SetCursor+0x2c>)
 8002756:	805a      	strh	r2, [r3, #2]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	20000758 	.word	0x20000758

08002768 <ssd1306_AdjustBrightness>:

// Adjust brightness
void ssd1306_AdjustBrightness(uint8_t brightness) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af04      	add	r7, sp, #16
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
    uint8_t contrast_cmd = 0x81;
 8002772:	2381      	movs	r3, #129	; 0x81
 8002774:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast_level = brightness;
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_cmd, 1, 10);
 800277a:	230a      	movs	r3, #10
 800277c:	9302      	str	r3, [sp, #8]
 800277e:	2301      	movs	r3, #1
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	f107 030f 	add.w	r3, r7, #15
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2301      	movs	r3, #1
 800278a:	2200      	movs	r2, #0
 800278c:	2178      	movs	r1, #120	; 0x78
 800278e:	480a      	ldr	r0, [pc, #40]	; (80027b8 <ssd1306_AdjustBrightness+0x50>)
 8002790:	f001 fdfc 	bl	800438c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_level, 1, 10);
 8002794:	230a      	movs	r3, #10
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	2301      	movs	r3, #1
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f107 030e 	add.w	r3, r7, #14
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2301      	movs	r3, #1
 80027a4:	2200      	movs	r2, #0
 80027a6:	2178      	movs	r1, #120	; 0x78
 80027a8:	4803      	ldr	r0, [pc, #12]	; (80027b8 <ssd1306_AdjustBrightness+0x50>)
 80027aa:	f001 fdef 	bl	800438c <HAL_I2C_Mem_Write>
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20002580 	.word	0x20002580

080027bc <ssd1306_Select>:

// Select a display
void ssd1306_Select(Knob *k) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    i2c_Select(I2C_MUX_MASTER_ADDR, k->row);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	20e2      	movs	r0, #226	; 0xe2
 80027cc:	f000 f80a 	bl	80027e4 <i2c_Select>
    i2c_Select(I2C_MUX_SLAVE_ADDR, k->col);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	785b      	ldrb	r3, [r3, #1]
 80027d4:	4619      	mov	r1, r3
 80027d6:	20e0      	movs	r0, #224	; 0xe0
 80027d8:	f000 f804 	bl	80027e4 <i2c_Select>
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(uint8_t mux_addr, uint8_t i) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	4603      	mov	r3, r0
 80027ec:	460a      	mov	r2, r1
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71bb      	strb	r3, [r7, #6]
    if (i > 7) return;
 80027f4:	79bb      	ldrb	r3, [r7, #6]
 80027f6:	2b07      	cmp	r3, #7
 80027f8:	d810      	bhi.n	800281c <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 80027fa:	79bb      	ldrb	r3, [r7, #6]
 80027fc:	2201      	movs	r2, #1
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, mux_addr, temp, 1, 100);
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	b299      	uxth	r1, r3
 800280a:	f107 020c 	add.w	r2, r7, #12
 800280e:	2364      	movs	r3, #100	; 0x64
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	4803      	ldr	r0, [pc, #12]	; (8002824 <i2c_Select+0x40>)
 8002816:	f001 fcbb 	bl	8004190 <HAL_I2C_Master_Transmit>
 800281a:	e000      	b.n	800281e <i2c_Select+0x3a>
    if (i > 7) return;
 800281c:	bf00      	nop
}
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20002580 	.word	0x20002580

08002828 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    int8_t init_diff = Knob_Map(k, k->init_value, MIDI_MAX) - Knob_Map(k, k->value, MIDI_MAX);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7e9b      	ldrb	r3, [r3, #26]
 8002834:	227f      	movs	r2, #127	; 0x7f
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7fe fbd9 	bl	8000ff0 <Knob_Map>
 800283e:	4603      	mov	r3, r0
 8002840:	461c      	mov	r4, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7edb      	ldrb	r3, [r3, #27]
 8002846:	227f      	movs	r2, #127	; 0x7f
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fbd0 	bl	8000ff0 <Knob_Map>
 8002850:	4603      	mov	r3, r0
 8002852:	1ae3      	subs	r3, r4, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	bfb8      	it	lt
 8002860:	425b      	neglt	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800286c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002958 <update_init_indicator+0x130>
 8002870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002874:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800295c <update_init_indicator+0x134>
 8002878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800287c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002880:	edc7 7a00 	vstr	s15, [r7]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 8002888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <update_init_indicator+0x6c>
 8002890:	4b33      	ldr	r3, [pc, #204]	; (8002960 <update_init_indicator+0x138>)
 8002892:	e05c      	b.n	800294e <update_init_indicator+0x126>

    if (init_pct < 15) {
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	2b0e      	cmp	r3, #14
 8002898:	d807      	bhi.n	80028aa <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	dd01      	ble.n	80028a6 <update_init_indicator+0x7e>
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <update_init_indicator+0x13c>)
 80028a4:	e053      	b.n	800294e <update_init_indicator+0x126>
        else return "        <      ";
 80028a6:	4b30      	ldr	r3, [pc, #192]	; (8002968 <update_init_indicator+0x140>)
 80028a8:	e051      	b.n	800294e <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 80028aa:	7bbb      	ldrb	r3, [r7, #14]
 80028ac:	2b0e      	cmp	r3, #14
 80028ae:	d90a      	bls.n	80028c6 <update_init_indicator+0x9e>
 80028b0:	7bbb      	ldrb	r3, [r7, #14]
 80028b2:	2b1d      	cmp	r3, #29
 80028b4:	d807      	bhi.n	80028c6 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	dd01      	ble.n	80028c2 <update_init_indicator+0x9a>
 80028be:	4b2b      	ldr	r3, [pc, #172]	; (800296c <update_init_indicator+0x144>)
 80028c0:	e045      	b.n	800294e <update_init_indicator+0x126>
        else return "        <<     ";
 80028c2:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <update_init_indicator+0x148>)
 80028c4:	e043      	b.n	800294e <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 80028c6:	7bbb      	ldrb	r3, [r7, #14]
 80028c8:	2b1d      	cmp	r3, #29
 80028ca:	d90a      	bls.n	80028e2 <update_init_indicator+0xba>
 80028cc:	7bbb      	ldrb	r3, [r7, #14]
 80028ce:	2b2c      	cmp	r3, #44	; 0x2c
 80028d0:	d807      	bhi.n	80028e2 <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 80028d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	dd01      	ble.n	80028de <update_init_indicator+0xb6>
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <update_init_indicator+0x14c>)
 80028dc:	e037      	b.n	800294e <update_init_indicator+0x126>
        else return "        <<<    ";
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <update_init_indicator+0x150>)
 80028e0:	e035      	b.n	800294e <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 80028e2:	7bbb      	ldrb	r3, [r7, #14]
 80028e4:	2b2c      	cmp	r3, #44	; 0x2c
 80028e6:	d90a      	bls.n	80028fe <update_init_indicator+0xd6>
 80028e8:	7bbb      	ldrb	r3, [r7, #14]
 80028ea:	2b3c      	cmp	r3, #60	; 0x3c
 80028ec:	d807      	bhi.n	80028fe <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	dd01      	ble.n	80028fa <update_init_indicator+0xd2>
 80028f6:	4b21      	ldr	r3, [pc, #132]	; (800297c <update_init_indicator+0x154>)
 80028f8:	e029      	b.n	800294e <update_init_indicator+0x126>
        else return "        <<<<   ";
 80028fa:	4b21      	ldr	r3, [pc, #132]	; (8002980 <update_init_indicator+0x158>)
 80028fc:	e027      	b.n	800294e <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 80028fe:	7bbb      	ldrb	r3, [r7, #14]
 8002900:	2b3c      	cmp	r3, #60	; 0x3c
 8002902:	d90a      	bls.n	800291a <update_init_indicator+0xf2>
 8002904:	7bbb      	ldrb	r3, [r7, #14]
 8002906:	2b4c      	cmp	r3, #76	; 0x4c
 8002908:	d807      	bhi.n	800291a <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 800290a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290e:	2b00      	cmp	r3, #0
 8002910:	dd01      	ble.n	8002916 <update_init_indicator+0xee>
 8002912:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <update_init_indicator+0x15c>)
 8002914:	e01b      	b.n	800294e <update_init_indicator+0x126>
        else return "        <<<<<  ";
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <update_init_indicator+0x160>)
 8002918:	e019      	b.n	800294e <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 800291a:	7bbb      	ldrb	r3, [r7, #14]
 800291c:	2b4c      	cmp	r3, #76	; 0x4c
 800291e:	d90a      	bls.n	8002936 <update_init_indicator+0x10e>
 8002920:	7bbb      	ldrb	r3, [r7, #14]
 8002922:	2b5c      	cmp	r3, #92	; 0x5c
 8002924:	d807      	bhi.n	8002936 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 8002926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	dd01      	ble.n	8002932 <update_init_indicator+0x10a>
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <update_init_indicator+0x164>)
 8002930:	e00d      	b.n	800294e <update_init_indicator+0x126>
        else return "        <<<<<< ";
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <update_init_indicator+0x168>)
 8002934:	e00b      	b.n	800294e <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002936:	7bbb      	ldrb	r3, [r7, #14]
 8002938:	2b5c      	cmp	r3, #92	; 0x5c
 800293a:	d907      	bls.n	800294c <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 800293c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002940:	2b00      	cmp	r3, #0
 8002942:	dd01      	ble.n	8002948 <update_init_indicator+0x120>
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <update_init_indicator+0x16c>)
 8002946:	e002      	b.n	800294e <update_init_indicator+0x126>
        else return "        <<<<<<<";
 8002948:	4b13      	ldr	r3, [pc, #76]	; (8002998 <update_init_indicator+0x170>)
 800294a:	e000      	b.n	800294e <update_init_indicator+0x126>
    } else {
        return " ";
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <update_init_indicator+0x174>)
    }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bd90      	pop	{r4, r7, pc}
 8002956:	bf00      	nop
 8002958:	42fe0000 	.word	0x42fe0000
 800295c:	42c80000 	.word	0x42c80000
 8002960:	08013a2c 	.word	0x08013a2c
 8002964:	08013a4c 	.word	0x08013a4c
 8002968:	08013a5c 	.word	0x08013a5c
 800296c:	08013a6c 	.word	0x08013a6c
 8002970:	08013a7c 	.word	0x08013a7c
 8002974:	08013a8c 	.word	0x08013a8c
 8002978:	08013a9c 	.word	0x08013a9c
 800297c:	08013aac 	.word	0x08013aac
 8002980:	08013abc 	.word	0x08013abc
 8002984:	08013acc 	.word	0x08013acc
 8002988:	08013adc 	.word	0x08013adc
 800298c:	08013aec 	.word	0x08013aec
 8002990:	08013afc 	.word	0x08013afc
 8002994:	08013b0c 	.word	0x08013b0c
 8002998:	08013b1c 	.word	0x08013b1c
 800299c:	08013b2c 	.word	0x08013b2c

080029a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_MspInit+0x4c>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <HAL_MspInit+0x4c>)
 80029b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <HAL_MspInit+0x4c>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_MspInit+0x4c>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a08      	ldr	r2, [pc, #32]	; (80029ec <HAL_MspInit+0x4c>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_MspInit+0x4c>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800

080029f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <HAL_ADC_MspInit+0x7c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d127      	bne.n	8002a62 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_ADC_MspInit+0x80>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <HAL_ADC_MspInit+0x80>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_ADC_MspInit+0x80>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_ADC_MspInit+0x80>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <HAL_ADC_MspInit+0x80>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <HAL_ADC_MspInit+0x80>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a4a:	230f      	movs	r3, #15
 8002a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4805      	ldr	r0, [pc, #20]	; (8002a74 <HAL_ADC_MspInit+0x84>)
 8002a5e:	f001 f883 	bl	8003b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a62:	bf00      	nop
 8002a64:	3728      	adds	r7, #40	; 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40012000 	.word	0x40012000
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40020000 	.word	0x40020000

08002a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a19      	ldr	r2, [pc, #100]	; (8002afc <HAL_I2C_MspInit+0x84>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d12b      	bne.n	8002af2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_I2C_MspInit+0x88>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <HAL_I2C_MspInit+0x88>)
 8002aa4:	f043 0302 	orr.w	r3, r3, #2
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_I2C_MspInit+0x88>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ab6:	23c0      	movs	r3, #192	; 0xc0
 8002ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aba:	2312      	movs	r3, #18
 8002abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	480c      	ldr	r0, [pc, #48]	; (8002b04 <HAL_I2C_MspInit+0x8c>)
 8002ad2:	f001 f849 	bl	8003b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_I2C_MspInit+0x88>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <HAL_I2C_MspInit+0x88>)
 8002ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_I2C_MspInit+0x88>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002af2:	bf00      	nop
 8002af4:	3728      	adds	r7, #40	; 0x28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40005400 	.word	0x40005400
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40020400 	.word	0x40020400

08002b08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <HAL_RTC_MspInit+0x24>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d102      	bne.n	8002b20 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RTC_MspInit+0x28>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	40002800 	.word	0x40002800
 8002b30:	42470e3c 	.word	0x42470e3c

08002b34 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <HAL_SD_MspInit+0xc4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d14b      	bne.n	8002bee <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_SD_MspInit+0xc8>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	4a27      	ldr	r2, [pc, #156]	; (8002bfc <HAL_SD_MspInit+0xc8>)
 8002b60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b64:	6453      	str	r3, [r2, #68]	; 0x44
 8002b66:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_SD_MspInit+0xc8>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <HAL_SD_MspInit+0xc8>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a20      	ldr	r2, [pc, #128]	; (8002bfc <HAL_SD_MspInit+0xc8>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <HAL_SD_MspInit+0xc8>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_SD_MspInit+0xc8>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <HAL_SD_MspInit+0xc8>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_SD_MspInit+0xc8>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8002baa:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	480e      	ldr	r0, [pc, #56]	; (8002c00 <HAL_SD_MspInit+0xcc>)
 8002bc8:	f000 ffce 	bl	8003b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 8002bcc:	f248 0330 	movw	r3, #32816	; 0x8030
 8002bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002bde:	230c      	movs	r3, #12
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	4619      	mov	r1, r3
 8002be8:	4806      	ldr	r0, [pc, #24]	; (8002c04 <HAL_SD_MspInit+0xd0>)
 8002bea:	f000 ffbd 	bl	8003b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002bee:	bf00      	nop
 8002bf0:	3728      	adds	r7, #40	; 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40020400 	.word	0x40020400

08002c08 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8002c0c:	e7fe      	b.n	8002c0c <NMI_Handler+0x4>

08002c0e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8002c12:	e7fe      	b.n	8002c12 <HardFault_Handler+0x4>

08002c14 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8002c18:	e7fe      	b.n	8002c18 <MemManage_Handler+0x4>

08002c1a <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8002c1e:	e7fe      	b.n	8002c1e <BusFault_Handler+0x4>

08002c20 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8002c24:	e7fe      	b.n	8002c24 <UsageFault_Handler+0x4>

08002c26 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	e046      	b.n	8002cea <SysTick_Handler+0x9a>
        GPIO_TypeDef *t = (i == BUTTON_MENU) ? GPIO_PORT_BUTTON_6 : GPIO_PORT_BUTTONS_1TO5;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d101      	bne.n	8002c66 <SysTick_Handler+0x16>
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <SysTick_Handler+0xac>)
 8002c64:	e000      	b.n	8002c68 <SysTick_Handler+0x18>
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <SysTick_Handler+0xb0>)
 8002c68:	60bb      	str	r3, [r7, #8]
        uint8_t reading = HAL_GPIO_ReadPin(t, btnPins[i]);
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <SysTick_Handler+0xb4>)
 8002c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c72:	4619      	mov	r1, r3
 8002c74:	68b8      	ldr	r0, [r7, #8]
 8002c76:	f001 f8fb 	bl	8003e70 <HAL_GPIO_ReadPin>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]

        if (reading == btnStatesLast[i] && reading != btnStates[i]) {
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <SysTick_Handler+0xb8>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
 8002c84:	79fa      	ldrb	r2, [r7, #7]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d128      	bne.n	8002cdc <SysTick_Handler+0x8c>
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <SysTick_Handler+0xbc>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	79fa      	ldrb	r2, [r7, #7]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d022      	beq.n	8002cdc <SysTick_Handler+0x8c>
            btnStates[i] = reading;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	491c      	ldr	r1, [pc, #112]	; (8002d0c <SysTick_Handler+0xbc>)
 8002c9a:	79fa      	ldrb	r2, [r7, #7]
 8002c9c:	54ca      	strb	r2, [r1, r3]

            if (btnStates[i] == GPIO_PIN_RESET) {
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <SysTick_Handler+0xbc>)
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d119      	bne.n	8002cdc <SysTick_Handler+0x8c>
                if (i == BUTTON_MENU) {
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d10e      	bne.n	8002ccc <SysTick_Handler+0x7c>
                    isMenuActive = !isMenuActive;
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <SysTick_Handler+0xc0>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf14      	ite	ne
 8002cb6:	2301      	movne	r3, #1
 8002cb8:	2300      	moveq	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f083 0301 	eor.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <SysTick_Handler+0xc0>)
 8002cca:	701a      	strb	r2, [r3, #0]
                }
                HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[i]);
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <SysTick_Handler+0xc4>)
 8002cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4810      	ldr	r0, [pc, #64]	; (8002d18 <SysTick_Handler+0xc8>)
 8002cd8:	f001 f8fb 	bl	8003ed2 <HAL_GPIO_TogglePin>
            }
        }

        btnStatesLast[i] = reading;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	490a      	ldr	r1, [pc, #40]	; (8002d08 <SysTick_Handler+0xb8>)
 8002ce0:	79fa      	ldrb	r2, [r7, #7]
 8002ce2:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d9b5      	bls.n	8002c5c <SysTick_Handler+0xc>
    }
    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002cf0:	f000 f9f2 	bl	80030d8 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	40020000 	.word	0x40020000
 8002d04:	20000030 	.word	0x20000030
 8002d08:	20000028 	.word	0x20000028
 8002d0c:	20000020 	.word	0x20000020
 8002d10:	2000261c 	.word	0x2000261c
 8002d14:	2000003c 	.word	0x2000003c
 8002d18:	40020400 	.word	0x40020400

08002d1c <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <OTG_FS_IRQHandler+0x10>)
 8002d22:	f002 f81c 	bl	8004d5e <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200030c0 	.word	0x200030c0

08002d30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
	return 1;
 8002d34:	2301      	movs	r3, #1
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <_kill>:

int _kill(int pid, int sig)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d4a:	f00d fb65 	bl	8010418 <__errno>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2216      	movs	r2, #22
 8002d52:	601a      	str	r2, [r3, #0]
	return -1;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_exit>:

void _exit (int status)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ffe7 	bl	8002d40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d72:	e7fe      	b.n	8002d72 <_exit+0x12>

08002d74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e00a      	b.n	8002d9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d86:	f3af 8000 	nop.w
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	60ba      	str	r2, [r7, #8]
 8002d92:	b2ca      	uxtb	r2, r1
 8002d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	dbf0      	blt.n	8002d86 <_read+0x12>
	}

return len;
 8002da4:	687b      	ldr	r3, [r7, #4]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e009      	b.n	8002dd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	60ba      	str	r2, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	dbf1      	blt.n	8002dc0 <_write+0x12>
	}
	return len;
 8002ddc:	687b      	ldr	r3, [r7, #4]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <_close>:

int _close(int file)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
	return -1;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e0e:	605a      	str	r2, [r3, #4]
	return 0;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <_isatty>:

int _isatty(int file)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
	return 1;
 8002e26:	2301      	movs	r3, #1
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
	return 0;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e58:	4a14      	ldr	r2, [pc, #80]	; (8002eac <_sbrk+0x5c>)
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <_sbrk+0x60>)
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <_sbrk+0x64>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d102      	bne.n	8002e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <_sbrk+0x64>)
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <_sbrk+0x68>)
 8002e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <_sbrk+0x64>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d207      	bcs.n	8002e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e80:	f00d faca 	bl	8010418 <__errno>
 8002e84:	4603      	mov	r3, r0
 8002e86:	220c      	movs	r2, #12
 8002e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	e009      	b.n	8002ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e90:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <_sbrk+0x64>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <_sbrk+0x64>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <_sbrk+0x64>)
 8002ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20020000 	.word	0x20020000
 8002eb0:	00000400 	.word	0x00000400
 8002eb4:	20000760 	.word	0x20000760
 8002eb8:	200034d8 	.word	0x200034d8

08002ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <SystemInit+0x20>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	4a05      	ldr	r2, [pc, #20]	; (8002edc <SystemInit+0x20>)
 8002ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	2302      	movs	r3, #2
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002efa:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <SystemCoreClockUpdate+0xec>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d011      	beq.n	8002f2e <SystemCoreClockUpdate+0x4e>
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d844      	bhi.n	8002f9a <SystemCoreClockUpdate+0xba>
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <SystemCoreClockUpdate+0x3e>
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d004      	beq.n	8002f26 <SystemCoreClockUpdate+0x46>
 8002f1c:	e03d      	b.n	8002f9a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002f1e:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <SystemCoreClockUpdate+0xf0>)
 8002f20:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <SystemCoreClockUpdate+0xf4>)
 8002f22:	601a      	str	r2, [r3, #0]
      break;
 8002f24:	e03d      	b.n	8002fa2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <SystemCoreClockUpdate+0xf0>)
 8002f28:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <SystemCoreClockUpdate+0xf8>)
 8002f2a:	601a      	str	r2, [r3, #0]
      break;
 8002f2c:	e039      	b.n	8002fa2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <SystemCoreClockUpdate+0xec>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	0d9b      	lsrs	r3, r3, #22
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <SystemCoreClockUpdate+0xec>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f42:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00c      	beq.n	8002f64 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002f4a:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <SystemCoreClockUpdate+0xf8>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <SystemCoreClockUpdate+0xec>)
 8002f54:	6852      	ldr	r2, [r2, #4]
 8002f56:	0992      	lsrs	r2, r2, #6
 8002f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f5c:	fb02 f303 	mul.w	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e00b      	b.n	8002f7c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <SystemCoreClockUpdate+0xf4>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <SystemCoreClockUpdate+0xec>)
 8002f6e:	6852      	ldr	r2, [r2, #4]
 8002f70:	0992      	lsrs	r2, r2, #6
 8002f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <SystemCoreClockUpdate+0xec>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	3301      	adds	r3, #1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	4a0e      	ldr	r2, [pc, #56]	; (8002fd0 <SystemCoreClockUpdate+0xf0>)
 8002f96:	6013      	str	r3, [r2, #0]
      break;
 8002f98:	e003      	b.n	8002fa2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <SystemCoreClockUpdate+0xf0>)
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <SystemCoreClockUpdate+0xf4>)
 8002f9e:	601a      	str	r2, [r3, #0]
      break;
 8002fa0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <SystemCoreClockUpdate+0xec>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <SystemCoreClockUpdate+0xfc>)
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <SystemCoreClockUpdate+0xf0>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <SystemCoreClockUpdate+0xf0>)
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	20000048 	.word	0x20000048
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	017d7840 	.word	0x017d7840
 8002fdc:	08014ee0 	.word	0x08014ee0

08002fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003018 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fe4:	480d      	ldr	r0, [pc, #52]	; (800301c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fe6:	490e      	ldr	r1, [pc, #56]	; (8003020 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fe8:	4a0e      	ldr	r2, [pc, #56]	; (8003024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fec:	e002      	b.n	8002ff4 <LoopCopyDataInit>

08002fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff2:	3304      	adds	r3, #4

08002ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff8:	d3f9      	bcc.n	8002fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffa:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ffc:	4c0b      	ldr	r4, [pc, #44]	; (800302c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003000:	e001      	b.n	8003006 <LoopFillZerobss>

08003002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003004:	3204      	adds	r2, #4

08003006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003008:	d3fb      	bcc.n	8003002 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800300a:	f7ff ff57 	bl	8002ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800300e:	f00d fa09 	bl	8010424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003012:	f7fe f851 	bl	80010b8 <main>
  bx  lr    
 8003016:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800301c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003020:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8003024:	08015794 	.word	0x08015794
  ldr r2, =_sbss
 8003028:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 800302c:	200034d8 	.word	0x200034d8

08003030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003030:	e7fe      	b.n	8003030 <ADC_IRQHandler>
	...

08003034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003038:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_Init+0x40>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <HAL_Init+0x40>)
 800303e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_Init+0x40>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_Init+0x40>)
 800304a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_Init+0x40>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a07      	ldr	r2, [pc, #28]	; (8003074 <HAL_Init+0x40>)
 8003056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800305c:	2003      	movs	r0, #3
 800305e:	f000 fd41 	bl	8003ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003062:	2000      	movs	r0, #0
 8003064:	f000 f808 	bl	8003078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003068:	f7ff fc9a 	bl	80029a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023c00 	.word	0x40023c00

08003078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_InitTick+0x54>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_InitTick+0x58>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fd59 	bl	8003b4e <HAL_SYSTICK_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e00e      	b.n	80030c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d80a      	bhi.n	80030c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ac:	2200      	movs	r2, #0
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	f000 fd21 	bl	8003afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030b8:	4a06      	ldr	r2, [pc, #24]	; (80030d4 <HAL_InitTick+0x5c>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000048 	.word	0x20000048
 80030d0:	20000050 	.word	0x20000050
 80030d4:	2000004c 	.word	0x2000004c

080030d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_IncTick+0x20>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x24>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <HAL_IncTick+0x24>)
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000050 	.word	0x20000050
 80030fc:	20002780 	.word	0x20002780

08003100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return uwTick;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_GetTick+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20002780 	.word	0x20002780

08003118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff ffee 	bl	8003100 <HAL_GetTick>
 8003124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d005      	beq.n	800313e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_Delay+0x44>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800313e:	bf00      	nop
 8003140:	f7ff ffde 	bl	8003100 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	429a      	cmp	r2, r3
 800314e:	d8f7      	bhi.n	8003140 <HAL_Delay+0x28>
  {
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000050 	.word	0x20000050

08003160 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e033      	b.n	80031de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff fc36 	bl	80029f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	d118      	bne.n	80031d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031a6:	f023 0302 	bic.w	r3, r3, #2
 80031aa:	f043 0202 	orr.w	r2, r3, #2
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 faca 	bl	800374c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f023 0303 	bic.w	r3, r3, #3
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
 80031ce:	e001      	b.n	80031d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Start+0x1a>
 80031fe:	2302      	movs	r3, #2
 8003200:	e097      	b.n	8003332 <HAL_ADC_Start+0x14a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d018      	beq.n	800324a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003228:	4b45      	ldr	r3, [pc, #276]	; (8003340 <HAL_ADC_Start+0x158>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a45      	ldr	r2, [pc, #276]	; (8003344 <HAL_ADC_Start+0x15c>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0c9a      	lsrs	r2, r3, #18
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800323c:	e002      	b.n	8003244 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	3b01      	subs	r3, #1
 8003242:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f9      	bne.n	800323e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d15f      	bne.n	8003318 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003282:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003296:	d106      	bne.n	80032a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f023 0206 	bic.w	r2, r3, #6
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44
 80032a4:	e002      	b.n	80032ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032b4:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_ADC_Start+0x160>)
 80032b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10f      	bne.n	80032ee <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d129      	bne.n	8003330 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	e020      	b.n	8003330 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a16      	ldr	r2, [pc, #88]	; (800334c <HAL_ADC_Start+0x164>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d11b      	bne.n	8003330 <HAL_ADC_Start+0x148>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d114      	bne.n	8003330 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	e00b      	b.n	8003330 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f043 0210 	orr.w	r2, r3, #16
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	f043 0201 	orr.w	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000048 	.word	0x20000048
 8003344:	431bde83 	.word	0x431bde83
 8003348:	40012300 	.word	0x40012300
 800334c:	40012000 	.word	0x40012000

08003350 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_ADC_Stop+0x16>
 8003362:	2302      	movs	r3, #2
 8003364:	e021      	b.n	80033aa <HAL_ADC_Stop+0x5a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d2:	d113      	bne.n	80033fc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e2:	d10b      	bne.n	80033fc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e063      	b.n	80034c4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80033fc:	f7ff fe80 	bl	8003100 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003402:	e021      	b.n	8003448 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d01d      	beq.n	8003448 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_ADC_PollForConversion+0x6c>
 8003412:	f7ff fe75 	bl	8003100 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d212      	bcs.n	8003448 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d00b      	beq.n	8003448 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f043 0204 	orr.w	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e03d      	b.n	80034c4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d1d6      	bne.n	8003404 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f06f 0212 	mvn.w	r2, #18
 800345e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d123      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11f      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800349a:	2b00      	cmp	r3, #0
 800349c:	d111      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d105      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x1c>
 8003500:	2302      	movs	r3, #2
 8003502:	e113      	b.n	800372c <HAL_ADC_ConfigChannel+0x244>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b09      	cmp	r3, #9
 8003512:	d925      	bls.n	8003560 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68d9      	ldr	r1, [r3, #12]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	3b1e      	subs	r3, #30
 800352a:	2207      	movs	r2, #7
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43da      	mvns	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	400a      	ands	r2, r1
 8003538:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68d9      	ldr	r1, [r3, #12]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	4618      	mov	r0, r3
 800354c:	4603      	mov	r3, r0
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4403      	add	r3, r0
 8003552:	3b1e      	subs	r3, #30
 8003554:	409a      	lsls	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	e022      	b.n	80035a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6919      	ldr	r1, [r3, #16]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	2207      	movs	r2, #7
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	400a      	ands	r2, r1
 8003582:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6919      	ldr	r1, [r3, #16]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	4618      	mov	r0, r3
 8003596:	4603      	mov	r3, r0
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4403      	add	r3, r0
 800359c:	409a      	lsls	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d824      	bhi.n	80035f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	3b05      	subs	r3, #5
 80035c0:	221f      	movs	r2, #31
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	400a      	ands	r2, r1
 80035ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	4618      	mov	r0, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	3b05      	subs	r3, #5
 80035ea:	fa00 f203 	lsl.w	r2, r0, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	635a      	str	r2, [r3, #52]	; 0x34
 80035f6:	e04c      	b.n	8003692 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	d824      	bhi.n	800364a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	3b23      	subs	r3, #35	; 0x23
 8003612:	221f      	movs	r2, #31
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43da      	mvns	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	400a      	ands	r2, r1
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	4618      	mov	r0, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	3b23      	subs	r3, #35	; 0x23
 800363c:	fa00 f203 	lsl.w	r2, r0, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
 8003648:	e023      	b.n	8003692 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	3b41      	subs	r3, #65	; 0x41
 800365c:	221f      	movs	r2, #31
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43da      	mvns	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	400a      	ands	r2, r1
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	4618      	mov	r0, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	3b41      	subs	r3, #65	; 0x41
 8003686:	fa00 f203 	lsl.w	r2, r0, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003692:	4b29      	ldr	r3, [pc, #164]	; (8003738 <HAL_ADC_ConfigChannel+0x250>)
 8003694:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a28      	ldr	r2, [pc, #160]	; (800373c <HAL_ADC_ConfigChannel+0x254>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10f      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x1d8>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b12      	cmp	r3, #18
 80036a6:	d10b      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_ADC_ConfigChannel+0x254>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d12b      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x23a>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <HAL_ADC_ConfigChannel+0x258>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <HAL_ADC_ConfigChannel+0x1f4>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b11      	cmp	r3, #17
 80036da:	d122      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a11      	ldr	r2, [pc, #68]	; (8003740 <HAL_ADC_ConfigChannel+0x258>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d111      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <HAL_ADC_ConfigChannel+0x25c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a11      	ldr	r2, [pc, #68]	; (8003748 <HAL_ADC_ConfigChannel+0x260>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	0c9a      	lsrs	r2, r3, #18
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003714:	e002      	b.n	800371c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	3b01      	subs	r3, #1
 800371a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f9      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40012300 	.word	0x40012300
 800373c:	40012000 	.word	0x40012000
 8003740:	10000012 	.word	0x10000012
 8003744:	20000048 	.word	0x20000048
 8003748:	431bde83 	.word	0x431bde83

0800374c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003754:	4b79      	ldr	r3, [pc, #484]	; (800393c <ADC_Init+0x1f0>)
 8003756:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	431a      	orrs	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003780:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	021a      	lsls	r2, r3, #8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6899      	ldr	r1, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	4a58      	ldr	r2, [pc, #352]	; (8003940 <ADC_Init+0x1f4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d022      	beq.n	800382a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6899      	ldr	r1, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003814:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6899      	ldr	r1, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	e00f      	b.n	800384a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003838:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003848:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0202 	bic.w	r2, r2, #2
 8003858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6899      	ldr	r1, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	7e1b      	ldrb	r3, [r3, #24]
 8003864:	005a      	lsls	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01b      	beq.n	80038b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003886:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003896:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	3b01      	subs	r3, #1
 80038a4:	035a      	lsls	r2, r3, #13
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	e007      	b.n	80038c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	3b01      	subs	r3, #1
 80038dc:	051a      	lsls	r2, r3, #20
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6899      	ldr	r1, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003902:	025a      	lsls	r2, r3, #9
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6899      	ldr	r1, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	029a      	lsls	r2, r3, #10
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	609a      	str	r2, [r3, #8]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	40012300 	.word	0x40012300
 8003940:	0f000001 	.word	0x0f000001

08003944 <__NVIC_SetPriorityGrouping>:
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <__NVIC_SetPriorityGrouping+0x44>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003960:	4013      	ands	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800396c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003976:	4a04      	ldr	r2, [pc, #16]	; (8003988 <__NVIC_SetPriorityGrouping+0x44>)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	60d3      	str	r3, [r2, #12]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <__NVIC_GetPriorityGrouping>:
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	0a1b      	lsrs	r3, r3, #8
 8003996:	f003 0307 	and.w	r3, r3, #7
}
 800399a:	4618      	mov	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <__NVIC_EnableIRQ>:
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	db0b      	blt.n	80039d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	f003 021f 	and.w	r2, r3, #31
 80039c0:	4907      	ldr	r1, [pc, #28]	; (80039e0 <__NVIC_EnableIRQ+0x38>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2001      	movs	r0, #1
 80039ca:	fa00 f202 	lsl.w	r2, r0, r2
 80039ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000e100 	.word	0xe000e100

080039e4 <__NVIC_SetPriority>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	6039      	str	r1, [r7, #0]
 80039ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	db0a      	blt.n	8003a0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	490c      	ldr	r1, [pc, #48]	; (8003a30 <__NVIC_SetPriority+0x4c>)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	0112      	lsls	r2, r2, #4
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	440b      	add	r3, r1
 8003a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a0c:	e00a      	b.n	8003a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	4908      	ldr	r1, [pc, #32]	; (8003a34 <__NVIC_SetPriority+0x50>)
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	3b04      	subs	r3, #4
 8003a1c:	0112      	lsls	r2, r2, #4
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	440b      	add	r3, r1
 8003a22:	761a      	strb	r2, [r3, #24]
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000e100 	.word	0xe000e100
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <NVIC_EncodePriority>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f1c3 0307 	rsb	r3, r3, #7
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	bf28      	it	cs
 8003a56:	2304      	movcs	r3, #4
 8003a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	2b06      	cmp	r3, #6
 8003a60:	d902      	bls.n	8003a68 <NVIC_EncodePriority+0x30>
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3b03      	subs	r3, #3
 8003a66:	e000      	b.n	8003a6a <NVIC_EncodePriority+0x32>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43da      	mvns	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a80:	f04f 31ff 	mov.w	r1, #4294967295
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8a:	43d9      	mvns	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a90:	4313      	orrs	r3, r2
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3724      	adds	r7, #36	; 0x24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <SysTick_Config>:
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab0:	d301      	bcc.n	8003ab6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00f      	b.n	8003ad6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ab6:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <SysTick_Config+0x40>)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003abe:	210f      	movs	r1, #15
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	f7ff ff8e 	bl	80039e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <SysTick_Config+0x40>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ace:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <SysTick_Config+0x40>)
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	e000e010 	.word	0xe000e010

08003ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff29 	bl	8003944 <__NVIC_SetPriorityGrouping>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	4603      	mov	r3, r0
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b0c:	f7ff ff3e 	bl	800398c <__NVIC_GetPriorityGrouping>
 8003b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	6978      	ldr	r0, [r7, #20]
 8003b18:	f7ff ff8e 	bl	8003a38 <NVIC_EncodePriority>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff5d 	bl	80039e4 <__NVIC_SetPriority>
}
 8003b2a:	bf00      	nop
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	4603      	mov	r3, r0
 8003b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff31 	bl	80039a8 <__NVIC_EnableIRQ>
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff ffa2 	bl	8003aa0 <SysTick_Config>
 8003b5c:	4603      	mov	r3, r0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b089      	sub	sp, #36	; 0x24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	e159      	b.n	8003e38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b84:	2201      	movs	r2, #1
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4013      	ands	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	f040 8148 	bne.w	8003e32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d005      	beq.n	8003bba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d130      	bne.n	8003c1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 0201 	and.w	r2, r3, #1
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d017      	beq.n	8003c58 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d123      	bne.n	8003cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	08da      	lsrs	r2, r3, #3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3208      	adds	r2, #8
 8003c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	220f      	movs	r2, #15
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	08da      	lsrs	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3208      	adds	r2, #8
 8003ca6:	69b9      	ldr	r1, [r7, #24]
 8003ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0203 	and.w	r2, r3, #3
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80a2 	beq.w	8003e32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b57      	ldr	r3, [pc, #348]	; (8003e50 <HAL_GPIO_Init+0x2e8>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	4a56      	ldr	r2, [pc, #344]	; (8003e50 <HAL_GPIO_Init+0x2e8>)
 8003cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cfe:	4b54      	ldr	r3, [pc, #336]	; (8003e50 <HAL_GPIO_Init+0x2e8>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d0a:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_GPIO_Init+0x2ec>)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	3302      	adds	r3, #2
 8003d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	220f      	movs	r2, #15
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a49      	ldr	r2, [pc, #292]	; (8003e58 <HAL_GPIO_Init+0x2f0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d019      	beq.n	8003d6a <HAL_GPIO_Init+0x202>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a48      	ldr	r2, [pc, #288]	; (8003e5c <HAL_GPIO_Init+0x2f4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_GPIO_Init+0x1fe>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a47      	ldr	r2, [pc, #284]	; (8003e60 <HAL_GPIO_Init+0x2f8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00d      	beq.n	8003d62 <HAL_GPIO_Init+0x1fa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a46      	ldr	r2, [pc, #280]	; (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <HAL_GPIO_Init+0x1f6>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a45      	ldr	r2, [pc, #276]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_GPIO_Init+0x1f2>
 8003d56:	2304      	movs	r3, #4
 8003d58:	e008      	b.n	8003d6c <HAL_GPIO_Init+0x204>
 8003d5a:	2307      	movs	r3, #7
 8003d5c:	e006      	b.n	8003d6c <HAL_GPIO_Init+0x204>
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e004      	b.n	8003d6c <HAL_GPIO_Init+0x204>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e002      	b.n	8003d6c <HAL_GPIO_Init+0x204>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_GPIO_Init+0x204>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	f002 0203 	and.w	r2, r2, #3
 8003d72:	0092      	lsls	r2, r2, #2
 8003d74:	4093      	lsls	r3, r2
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d7c:	4935      	ldr	r1, [pc, #212]	; (8003e54 <HAL_GPIO_Init+0x2ec>)
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	089b      	lsrs	r3, r3, #2
 8003d82:	3302      	adds	r3, #2
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d8a:	4b38      	ldr	r3, [pc, #224]	; (8003e6c <HAL_GPIO_Init+0x304>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dae:	4a2f      	ldr	r2, [pc, #188]	; (8003e6c <HAL_GPIO_Init+0x304>)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003db4:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <HAL_GPIO_Init+0x304>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dd8:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <HAL_GPIO_Init+0x304>)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dde:	4b23      	ldr	r3, [pc, #140]	; (8003e6c <HAL_GPIO_Init+0x304>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e02:	4a1a      	ldr	r2, [pc, #104]	; (8003e6c <HAL_GPIO_Init+0x304>)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e08:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <HAL_GPIO_Init+0x304>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e2c:	4a0f      	ldr	r2, [pc, #60]	; (8003e6c <HAL_GPIO_Init+0x304>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3301      	adds	r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	2b0f      	cmp	r3, #15
 8003e3c:	f67f aea2 	bls.w	8003b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40013800 	.word	0x40013800
 8003e58:	40020000 	.word	0x40020000
 8003e5c:	40020400 	.word	0x40020400
 8003e60:	40020800 	.word	0x40020800
 8003e64:	40020c00 	.word	0x40020c00
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40013c00 	.word	0x40013c00

08003e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	887b      	ldrh	r3, [r7, #2]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e001      	b.n	8003e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
 8003eac:	4613      	mov	r3, r2
 8003eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ebc:	e003      	b.n	8003ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	041a      	lsls	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	619a      	str	r2, [r3, #24]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	460b      	mov	r3, r1
 8003edc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ee4:	887a      	ldrh	r2, [r7, #2]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	041a      	lsls	r2, r3, #16
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	43d9      	mvns	r1, r3
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	400b      	ands	r3, r1
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	619a      	str	r2, [r3, #24]
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e12b      	b.n	8004172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fe fda2 	bl	8002a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2224      	movs	r2, #36	; 0x24
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f6c:	f002 fb4a 	bl	8006604 <HAL_RCC_GetPCLK1Freq>
 8003f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4a81      	ldr	r2, [pc, #516]	; (800417c <HAL_I2C_Init+0x274>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d807      	bhi.n	8003f8c <HAL_I2C_Init+0x84>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4a80      	ldr	r2, [pc, #512]	; (8004180 <HAL_I2C_Init+0x278>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	bf94      	ite	ls
 8003f84:	2301      	movls	r3, #1
 8003f86:	2300      	movhi	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e006      	b.n	8003f9a <HAL_I2C_Init+0x92>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a7d      	ldr	r2, [pc, #500]	; (8004184 <HAL_I2C_Init+0x27c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bf94      	ite	ls
 8003f94:	2301      	movls	r3, #1
 8003f96:	2300      	movhi	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e0e7      	b.n	8004172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4a78      	ldr	r2, [pc, #480]	; (8004188 <HAL_I2C_Init+0x280>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	0c9b      	lsrs	r3, r3, #18
 8003fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a6a      	ldr	r2, [pc, #424]	; (800417c <HAL_I2C_Init+0x274>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d802      	bhi.n	8003fdc <HAL_I2C_Init+0xd4>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	e009      	b.n	8003ff0 <HAL_I2C_Init+0xe8>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fe2:	fb02 f303 	mul.w	r3, r2, r3
 8003fe6:	4a69      	ldr	r2, [pc, #420]	; (800418c <HAL_I2C_Init+0x284>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	099b      	lsrs	r3, r3, #6
 8003fee:	3301      	adds	r3, #1
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	495c      	ldr	r1, [pc, #368]	; (800417c <HAL_I2C_Init+0x274>)
 800400c:	428b      	cmp	r3, r1
 800400e:	d819      	bhi.n	8004044 <HAL_I2C_Init+0x13c>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1e59      	subs	r1, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	fbb1 f3f3 	udiv	r3, r1, r3
 800401e:	1c59      	adds	r1, r3, #1
 8004020:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004024:	400b      	ands	r3, r1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_I2C_Init+0x138>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1e59      	subs	r1, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fbb1 f3f3 	udiv	r3, r1, r3
 8004038:	3301      	adds	r3, #1
 800403a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403e:	e051      	b.n	80040e4 <HAL_I2C_Init+0x1dc>
 8004040:	2304      	movs	r3, #4
 8004042:	e04f      	b.n	80040e4 <HAL_I2C_Init+0x1dc>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <HAL_I2C_Init+0x168>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1e58      	subs	r0, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	440b      	add	r3, r1
 800405a:	fbb0 f3f3 	udiv	r3, r0, r3
 800405e:	3301      	adds	r3, #1
 8004060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e012      	b.n	8004096 <HAL_I2C_Init+0x18e>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1e58      	subs	r0, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	0099      	lsls	r1, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	fbb0 f3f3 	udiv	r3, r0, r3
 8004086:	3301      	adds	r3, #1
 8004088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_Init+0x196>
 800409a:	2301      	movs	r3, #1
 800409c:	e022      	b.n	80040e4 <HAL_I2C_Init+0x1dc>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10e      	bne.n	80040c4 <HAL_I2C_Init+0x1bc>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1e58      	subs	r0, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6859      	ldr	r1, [r3, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	440b      	add	r3, r1
 80040b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b8:	3301      	adds	r3, #1
 80040ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c2:	e00f      	b.n	80040e4 <HAL_I2C_Init+0x1dc>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1e58      	subs	r0, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	0099      	lsls	r1, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040da:	3301      	adds	r3, #1
 80040dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	6809      	ldr	r1, [r1, #0]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6911      	ldr	r1, [r2, #16]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68d2      	ldr	r2, [r2, #12]
 800411e:	4311      	orrs	r1, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	430b      	orrs	r3, r1
 8004126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	000186a0 	.word	0x000186a0
 8004180:	001e847f 	.word	0x001e847f
 8004184:	003d08ff 	.word	0x003d08ff
 8004188:	431bde83 	.word	0x431bde83
 800418c:	10624dd3 	.word	0x10624dd3

08004190 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	461a      	mov	r2, r3
 800419c:	460b      	mov	r3, r1
 800419e:	817b      	strh	r3, [r7, #10]
 80041a0:	4613      	mov	r3, r2
 80041a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041a4:	f7fe ffac 	bl	8003100 <HAL_GetTick>
 80041a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	f040 80e0 	bne.w	8004378 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	2319      	movs	r3, #25
 80041be:	2201      	movs	r2, #1
 80041c0:	4970      	ldr	r1, [pc, #448]	; (8004384 <HAL_I2C_Master_Transmit+0x1f4>)
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 faf4 	bl	80047b0 <I2C_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
 80041d0:	e0d3      	b.n	800437a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_I2C_Master_Transmit+0x50>
 80041dc:	2302      	movs	r3, #2
 80041de:	e0cc      	b.n	800437a <HAL_I2C_Master_Transmit+0x1ea>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d007      	beq.n	8004206 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004214:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2221      	movs	r2, #33	; 0x21
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2210      	movs	r2, #16
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	893a      	ldrh	r2, [r7, #8]
 8004236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4a50      	ldr	r2, [pc, #320]	; (8004388 <HAL_I2C_Master_Transmit+0x1f8>)
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004248:	8979      	ldrh	r1, [r7, #10]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	6a3a      	ldr	r2, [r7, #32]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f996 	bl	8004580 <I2C_MasterRequestWrite>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e08d      	b.n	800437a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004274:	e066      	b.n	8004344 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	6a39      	ldr	r1, [r7, #32]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fb6e 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2b04      	cmp	r3, #4
 800428c:	d107      	bne.n	800429e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e06b      	b.n	800437a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	781a      	ldrb	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d11b      	bne.n	8004318 <HAL_I2C_Master_Transmit+0x188>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d017      	beq.n	8004318 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	781a      	ldrb	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	6a39      	ldr	r1, [r7, #32]
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fb5e 	bl	80049de <I2C_WaitOnBTFFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00d      	beq.n	8004344 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	2b04      	cmp	r3, #4
 800432e:	d107      	bne.n	8004340 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e01a      	b.n	800437a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	d194      	bne.n	8004276 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	e000      	b.n	800437a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	00100002 	.word	0x00100002
 8004388:	ffff0000 	.word	0xffff0000

0800438c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4603      	mov	r3, r0
 800439c:	817b      	strh	r3, [r7, #10]
 800439e:	460b      	mov	r3, r1
 80043a0:	813b      	strh	r3, [r7, #8]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043a6:	f7fe feab 	bl	8003100 <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	f040 80d9 	bne.w	800456c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	2319      	movs	r3, #25
 80043c0:	2201      	movs	r2, #1
 80043c2:	496d      	ldr	r1, [pc, #436]	; (8004578 <HAL_I2C_Mem_Write+0x1ec>)
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f9f3 	bl	80047b0 <I2C_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
 80043d2:	e0cc      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_I2C_Mem_Write+0x56>
 80043de:	2302      	movs	r3, #2
 80043e0:	e0c5      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d007      	beq.n	8004408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2221      	movs	r2, #33	; 0x21
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2240      	movs	r2, #64	; 0x40
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4a4d      	ldr	r2, [pc, #308]	; (800457c <HAL_I2C_Mem_Write+0x1f0>)
 8004448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800444a:	88f8      	ldrh	r0, [r7, #6]
 800444c:	893a      	ldrh	r2, [r7, #8]
 800444e:	8979      	ldrh	r1, [r7, #10]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	4603      	mov	r3, r0
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f912 	bl	8004684 <I2C_RequestMemoryWrite>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d052      	beq.n	800450c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e081      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fa74 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b04      	cmp	r3, #4
 8004480:	d107      	bne.n	8004492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e06b      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	781a      	ldrb	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d11b      	bne.n	800450c <HAL_I2C_Mem_Write+0x180>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d017      	beq.n	800450c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1aa      	bne.n	800446a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fa60 	bl	80049de <I2C_WaitOnBTFFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	2b04      	cmp	r3, #4
 800452a:	d107      	bne.n	800453c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e016      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	e000      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800456c:	2302      	movs	r3, #2
  }
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	00100002 	.word	0x00100002
 800457c:	ffff0000 	.word	0xffff0000

08004580 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	460b      	mov	r3, r1
 800458e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d006      	beq.n	80045aa <I2C_MasterRequestWrite+0x2a>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d003      	beq.n	80045aa <I2C_MasterRequestWrite+0x2a>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045a8:	d108      	bne.n	80045bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	e00b      	b.n	80045d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	2b12      	cmp	r3, #18
 80045c2:	d107      	bne.n	80045d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f8e5 	bl	80047b0 <I2C_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00d      	beq.n	8004608 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fa:	d103      	bne.n	8004604 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e035      	b.n	8004674 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004610:	d108      	bne.n	8004624 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004612:	897b      	ldrh	r3, [r7, #10]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004620:	611a      	str	r2, [r3, #16]
 8004622:	e01b      	b.n	800465c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004624:	897b      	ldrh	r3, [r7, #10]
 8004626:	11db      	asrs	r3, r3, #7
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 0306 	and.w	r3, r3, #6
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f063 030f 	orn	r3, r3, #15
 8004634:	b2da      	uxtb	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	490e      	ldr	r1, [pc, #56]	; (800467c <I2C_MasterRequestWrite+0xfc>)
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f90b 	bl	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e010      	b.n	8004674 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004652:	897b      	ldrh	r3, [r7, #10]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4907      	ldr	r1, [pc, #28]	; (8004680 <I2C_MasterRequestWrite+0x100>)
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f8fb 	bl	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	00010008 	.word	0x00010008
 8004680:	00010002 	.word	0x00010002

08004684 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	4608      	mov	r0, r1
 800468e:	4611      	mov	r1, r2
 8004690:	461a      	mov	r2, r3
 8004692:	4603      	mov	r3, r0
 8004694:	817b      	strh	r3, [r7, #10]
 8004696:	460b      	mov	r3, r1
 8004698:	813b      	strh	r3, [r7, #8]
 800469a:	4613      	mov	r3, r2
 800469c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f878 	bl	80047b0 <I2C_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d4:	d103      	bne.n	80046de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e05f      	b.n	80047a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046e2:	897b      	ldrh	r3, [r7, #10]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	492d      	ldr	r1, [pc, #180]	; (80047ac <I2C_RequestMemoryWrite+0x128>)
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f8b0 	bl	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e04c      	b.n	80047a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004720:	6a39      	ldr	r1, [r7, #32]
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f91a 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00d      	beq.n	800474a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2b04      	cmp	r3, #4
 8004734:	d107      	bne.n	8004746 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004744:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e02b      	b.n	80047a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d105      	bne.n	800475c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004750:	893b      	ldrh	r3, [r7, #8]
 8004752:	b2da      	uxtb	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	611a      	str	r2, [r3, #16]
 800475a:	e021      	b.n	80047a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800475c:	893b      	ldrh	r3, [r7, #8]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	b29b      	uxth	r3, r3
 8004762:	b2da      	uxtb	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476c:	6a39      	ldr	r1, [r7, #32]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f8f4 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	2b04      	cmp	r3, #4
 8004780:	d107      	bne.n	8004792 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004790:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e005      	b.n	80047a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004796:	893b      	ldrh	r3, [r7, #8]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	00010002 	.word	0x00010002

080047b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047c0:	e025      	b.n	800480e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d021      	beq.n	800480e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7fe fc99 	bl	8003100 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d116      	bne.n	800480e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f043 0220 	orr.w	r2, r3, #32
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e023      	b.n	8004856 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10d      	bne.n	8004834 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	43da      	mvns	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4013      	ands	r3, r2
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	bf0c      	ite	eq
 800482a:	2301      	moveq	r3, #1
 800482c:	2300      	movne	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	461a      	mov	r2, r3
 8004832:	e00c      	b.n	800484e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	43da      	mvns	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4013      	ands	r3, r2
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	bf0c      	ite	eq
 8004846:	2301      	moveq	r3, #1
 8004848:	2300      	movne	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	429a      	cmp	r2, r3
 8004852:	d0b6      	beq.n	80047c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800486c:	e051      	b.n	8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487c:	d123      	bne.n	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004896:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f043 0204 	orr.w	r2, r3, #4
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e046      	b.n	8004954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d021      	beq.n	8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ce:	f7fe fc17 	bl	8003100 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d302      	bcc.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d116      	bne.n	8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e020      	b.n	8004954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d10c      	bne.n	8004936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	43da      	mvns	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4013      	ands	r3, r2
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf14      	ite	ne
 800492e:	2301      	movne	r3, #1
 8004930:	2300      	moveq	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	e00b      	b.n	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	43da      	mvns	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4013      	ands	r3, r2
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf14      	ite	ne
 8004948:	2301      	movne	r3, #1
 800494a:	2300      	moveq	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d18d      	bne.n	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004968:	e02d      	b.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f878 	bl	8004a60 <I2C_IsAcknowledgeFailed>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e02d      	b.n	80049d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d021      	beq.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004982:	f7fe fbbd 	bl	8003100 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	429a      	cmp	r2, r3
 8004990:	d302      	bcc.n	8004998 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d116      	bne.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f043 0220 	orr.w	r2, r3, #32
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e007      	b.n	80049d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b80      	cmp	r3, #128	; 0x80
 80049d2:	d1ca      	bne.n	800496a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049ea:	e02d      	b.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f837 	bl	8004a60 <I2C_IsAcknowledgeFailed>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e02d      	b.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d021      	beq.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a04:	f7fe fb7c 	bl	8003100 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d302      	bcc.n	8004a1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d116      	bne.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e007      	b.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d1ca      	bne.n	80049ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a76:	d11b      	bne.n	8004ab0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	f043 0204 	orr.w	r2, r3, #4
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac0:	b08f      	sub	sp, #60	; 0x3c
 8004ac2:	af0a      	add	r7, sp, #40	; 0x28
 8004ac4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e10f      	b.n	8004cf0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f00a f904 	bl	800ecf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2203      	movs	r2, #3
 8004af4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f003 ff73 	bl	80089fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	687e      	ldr	r6, [r7, #4]
 8004b1c:	466d      	mov	r5, sp
 8004b1e:	f106 0410 	add.w	r4, r6, #16
 8004b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b32:	1d33      	adds	r3, r6, #4
 8004b34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b36:	6838      	ldr	r0, [r7, #0]
 8004b38:	f003 fe4a 	bl	80087d0 <USB_CoreInit>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e0d0      	b.n	8004cf0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2100      	movs	r1, #0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f003 ff61 	bl	8008a1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73fb      	strb	r3, [r7, #15]
 8004b5e:	e04a      	b.n	8004bf6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b60:	7bfa      	ldrb	r2, [r7, #15]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	333d      	adds	r3, #61	; 0x3d
 8004b70:	2201      	movs	r2, #1
 8004b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b74:	7bfa      	ldrb	r2, [r7, #15]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	333c      	adds	r3, #60	; 0x3c
 8004b84:	7bfa      	ldrb	r2, [r7, #15]
 8004b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b88:	7bfa      	ldrb	r2, [r7, #15]
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	b298      	uxth	r0, r3
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	3342      	adds	r3, #66	; 0x42
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ba0:	7bfa      	ldrb	r2, [r7, #15]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	333f      	adds	r3, #63	; 0x3f
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004bb4:	7bfa      	ldrb	r2, [r7, #15]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	3344      	adds	r3, #68	; 0x44
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004bc8:	7bfa      	ldrb	r2, [r7, #15]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	3348      	adds	r3, #72	; 0x48
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004bdc:	7bfa      	ldrb	r2, [r7, #15]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3350      	adds	r3, #80	; 0x50
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	73fb      	strb	r3, [r7, #15]
 8004bf6:	7bfa      	ldrb	r2, [r7, #15]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d3af      	bcc.n	8004b60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
 8004c04:	e044      	b.n	8004c90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c06:	7bfa      	ldrb	r2, [r7, #15]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c1c:	7bfa      	ldrb	r2, [r7, #15]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004c2e:	7bfa      	ldrb	r2, [r7, #15]
 8004c30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c32:	7bfa      	ldrb	r2, [r7, #15]
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c48:	7bfa      	ldrb	r2, [r7, #15]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c74:	7bfa      	ldrb	r2, [r7, #15]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	7bfa      	ldrb	r2, [r7, #15]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d3b5      	bcc.n	8004c06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	687e      	ldr	r6, [r7, #4]
 8004ca2:	466d      	mov	r5, sp
 8004ca4:	f106 0410 	add.w	r4, r6, #16
 8004ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cb8:	1d33      	adds	r3, r6, #4
 8004cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cbc:	6838      	ldr	r0, [r7, #0]
 8004cbe:	f003 fed7 	bl	8008a70 <USB_DevInit>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e00d      	b.n	8004cf0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f004 ff1f 	bl	8009b2c <USB_DevDisconnect>

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cf8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_PCD_Start+0x1c>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e020      	b.n	8004d56 <HAL_PCD_Start+0x5e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d109      	bne.n	8004d38 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d005      	beq.n	8004d38 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f003 fe4b 	bl	80089d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f004 fecf 	bl	8009aea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d5e:	b590      	push	{r4, r7, lr}
 8004d60:	b08d      	sub	sp, #52	; 0x34
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f004 ff8d 	bl	8009c94 <USB_GetMode>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 839d 	bne.w	80054bc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f004 fef1 	bl	8009b6e <USB_ReadInterrupts>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 8393 	beq.w	80054ba <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f004 fee8 	bl	8009b6e <USB_ReadInterrupts>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d107      	bne.n	8004db8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f002 0202 	and.w	r2, r2, #2
 8004db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f004 fed6 	bl	8009b6e <USB_ReadInterrupts>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d161      	bne.n	8004e90 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0210 	bic.w	r2, r2, #16
 8004dda:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	f003 020f 	and.w	r2, r3, #15
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4413      	add	r3, r2
 8004df8:	3304      	adds	r3, #4
 8004dfa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	0c5b      	lsrs	r3, r3, #17
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d124      	bne.n	8004e52 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d035      	beq.n	8004e80 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	6a38      	ldr	r0, [r7, #32]
 8004e28:	f004 fd3c 	bl	80098a4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e38:	441a      	add	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e4a:	441a      	add	r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	619a      	str	r2, [r3, #24]
 8004e50:	e016      	b.n	8004e80 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	0c5b      	lsrs	r3, r3, #17
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	2b06      	cmp	r3, #6
 8004e5c:	d110      	bne.n	8004e80 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e64:	2208      	movs	r2, #8
 8004e66:	4619      	mov	r1, r3
 8004e68:	6a38      	ldr	r0, [r7, #32]
 8004e6a:	f004 fd1b 	bl	80098a4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e7a:	441a      	add	r2, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0210 	orr.w	r2, r2, #16
 8004e8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f004 fe6a 	bl	8009b6e <USB_ReadInterrupts>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ea0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ea4:	d16e      	bne.n	8004f84 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f004 fe70 	bl	8009b94 <USB_ReadDevAllOutEpInterrupt>
 8004eb4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004eb6:	e062      	b.n	8004f7e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d057      	beq.n	8004f72 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f004 fe95 	bl	8009bfc <USB_ReadDevOutEPInterrupt>
 8004ed2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00c      	beq.n	8004ef8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eea:	461a      	mov	r2, r3
 8004eec:	2301      	movs	r3, #1
 8004eee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fdb0 	bl	8005a58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	461a      	mov	r2, r3
 8004f10:	2308      	movs	r3, #8
 8004f12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 feaa 	bl	8005c70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	461a      	mov	r2, r3
 8004f34:	2310      	movs	r3, #16
 8004f36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	461a      	mov	r2, r3
 8004f50:	2320      	movs	r3, #32
 8004f52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f70:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	3301      	adds	r3, #1
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d199      	bne.n	8004eb8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f004 fdf0 	bl	8009b6e <USB_ReadInterrupts>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f98:	f040 80c0 	bne.w	800511c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f004 fe11 	bl	8009bc8 <USB_ReadDevAllInEpInterrupt>
 8004fa6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004fac:	e0b2      	b.n	8005114 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80a7 	beq.w	8005108 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f004 fe37 	bl	8009c38 <USB_ReadDevInEPInterrupt>
 8004fca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d057      	beq.n	8005086 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	2201      	movs	r2, #1
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69f9      	ldr	r1, [r7, #28]
 8004ff2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	461a      	mov	r2, r3
 8005008:	2301      	movs	r3, #1
 800500a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d132      	bne.n	800507a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005018:	4613      	mov	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	3348      	adds	r3, #72	; 0x48
 8005024:	6819      	ldr	r1, [r3, #0]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502a:	4613      	mov	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4403      	add	r3, r0
 8005034:	3344      	adds	r3, #68	; 0x44
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4419      	add	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503e:	4613      	mov	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4403      	add	r3, r0
 8005048:	3348      	adds	r3, #72	; 0x48
 800504a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <HAL_PCD_IRQHandler+0x31c>
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005056:	4613      	mov	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	3350      	adds	r3, #80	; 0x50
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d108      	bne.n	800507a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005072:	461a      	mov	r2, r3
 8005074:	2101      	movs	r1, #1
 8005076:	f004 fe3f 	bl	8009cf8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	b2db      	uxtb	r3, r3
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f009 feba 	bl	800edfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	461a      	mov	r2, r3
 800509e:	2308      	movs	r3, #8
 80050a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	2310      	movs	r3, #16
 80050bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d008      	beq.n	80050da <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	461a      	mov	r2, r3
 80050d6:	2340      	movs	r3, #64	; 0x40
 80050d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	461a      	mov	r2, r3
 80050f2:	2302      	movs	r3, #2
 80050f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fc1b 	bl	800593e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	3301      	adds	r3, #1
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	f47f af49 	bne.w	8004fae <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f004 fd24 	bl	8009b6e <USB_ReadInterrupts>
 8005126:	4603      	mov	r3, r0
 8005128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800512c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005130:	d122      	bne.n	8005178 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800514c:	2b01      	cmp	r3, #1
 800514e:	d108      	bne.n	8005162 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005158:	2100      	movs	r1, #0
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fe26 	bl	8005dac <HAL_PCDEx_LPM_Callback>
 8005160:	e002      	b.n	8005168 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f009 feb6 	bl	800eed4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695a      	ldr	r2, [r3, #20]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005176:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f004 fcf6 	bl	8009b6e <USB_ReadInterrupts>
 8005182:	4603      	mov	r3, r0
 8005184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518c:	d112      	bne.n	80051b4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b01      	cmp	r3, #1
 800519c:	d102      	bne.n	80051a4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f009 fe72 	bl	800ee88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80051b2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f004 fcd8 	bl	8009b6e <USB_ReadInterrupts>
 80051be:	4603      	mov	r3, r0
 80051c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c8:	f040 80c7 	bne.w	800535a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2110      	movs	r1, #16
 80051e6:	4618      	mov	r0, r3
 80051e8:	f003 fda6 	bl	8008d38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ec:	2300      	movs	r3, #0
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f0:	e056      	b.n	80052a0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fe:	461a      	mov	r2, r3
 8005200:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005204:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005216:	0151      	lsls	r1, r2, #5
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	440a      	add	r2, r1
 800521c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005220:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005224:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005240:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005244:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	461a      	mov	r2, r3
 8005254:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005258:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	440a      	add	r2, r1
 8005270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005274:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005278:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	440a      	add	r2, r1
 8005290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005294:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005298:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	3301      	adds	r3, #1
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d3a3      	bcc.n	80051f2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80052bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d016      	beq.n	80052f4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d6:	f043 030b 	orr.w	r3, r3, #11
 80052da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ec:	f043 030b 	orr.w	r3, r3, #11
 80052f0:	6453      	str	r3, [r2, #68]	; 0x44
 80052f2:	e015      	b.n	8005320 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005306:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800530a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800531a:	f043 030b 	orr.w	r3, r3, #11
 800531e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005332:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005344:	461a      	mov	r2, r3
 8005346:	f004 fcd7 	bl	8009cf8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f004 fc05 	bl	8009b6e <USB_ReadInterrupts>
 8005364:	4603      	mov	r3, r0
 8005366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800536a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800536e:	d124      	bne.n	80053ba <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f004 fc9b 	bl	8009cb0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f003 fd3b 	bl	8008dfa <USB_GetDevSpeed>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681c      	ldr	r4, [r3, #0]
 8005390:	f001 f92c 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 8005394:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800539a:	b2db      	uxtb	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	4620      	mov	r0, r4
 80053a0:	f003 fa78 	bl	8008894 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f009 fd50 	bl	800ee4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80053b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f004 fbd5 	bl	8009b6e <USB_ReadInterrupts>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d10a      	bne.n	80053e4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f009 fd2d 	bl	800ee2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f002 0208 	and.w	r2, r2, #8
 80053e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f004 fbc0 	bl	8009b6e <USB_ReadInterrupts>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053f8:	d10f      	bne.n	800541a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	b2db      	uxtb	r3, r3
 8005402:	4619      	mov	r1, r3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f009 fd85 	bl	800ef14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f004 fba5 	bl	8009b6e <USB_ReadInterrupts>
 8005424:	4603      	mov	r3, r0
 8005426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800542a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800542e:	d10f      	bne.n	8005450 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	b2db      	uxtb	r3, r3
 8005438:	4619      	mov	r1, r3
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f009 fd58 	bl	800eef0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695a      	ldr	r2, [r3, #20]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800544e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f004 fb8a 	bl	8009b6e <USB_ReadInterrupts>
 800545a:	4603      	mov	r3, r0
 800545c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005464:	d10a      	bne.n	800547c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f009 fd66 	bl	800ef38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800547a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f004 fb74 	bl	8009b6e <USB_ReadInterrupts>
 8005486:	4603      	mov	r3, r0
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b04      	cmp	r3, #4
 800548e:	d115      	bne.n	80054bc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f009 fd56 	bl	800ef54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6859      	ldr	r1, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	e000      	b.n	80054bc <HAL_PCD_IRQHandler+0x75e>
      return;
 80054ba:	bf00      	nop
    }
  }
}
 80054bc:	3734      	adds	r7, #52	; 0x34
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd90      	pop	{r4, r7, pc}

080054c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_PCD_SetAddress+0x1a>
 80054d8:	2302      	movs	r3, #2
 80054da:	e013      	b.n	8005504 <HAL_PCD_SetAddress+0x42>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	78fa      	ldrb	r2, [r7, #3]
 80054f2:	4611      	mov	r1, r2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f004 fad2 	bl	8009a9e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	4608      	mov	r0, r1
 8005516:	4611      	mov	r1, r2
 8005518:	461a      	mov	r2, r3
 800551a:	4603      	mov	r3, r0
 800551c:	70fb      	strb	r3, [r7, #3]
 800551e:	460b      	mov	r3, r1
 8005520:	803b      	strh	r3, [r7, #0]
 8005522:	4613      	mov	r3, r2
 8005524:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800552a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800552e:	2b00      	cmp	r3, #0
 8005530:	da0f      	bge.n	8005552 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	f003 020f 	and.w	r2, r3, #15
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	1a9b      	subs	r3, r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	3338      	adds	r3, #56	; 0x38
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	3304      	adds	r3, #4
 8005548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	705a      	strb	r2, [r3, #1]
 8005550:	e00f      	b.n	8005572 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	f003 020f 	and.w	r2, r3, #15
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4413      	add	r3, r2
 8005568:	3304      	adds	r3, #4
 800556a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800557e:	883a      	ldrh	r2, [r7, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	78ba      	ldrb	r2, [r7, #2]
 8005588:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d004      	beq.n	800559c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800559c:	78bb      	ldrb	r3, [r7, #2]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d102      	bne.n	80055a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_PCD_EP_Open+0xaa>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e00e      	b.n	80055d4 <HAL_PCD_EP_Open+0xc8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68f9      	ldr	r1, [r7, #12]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f003 fc3d 	bl	8008e44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80055d2:	7afb      	ldrb	r3, [r7, #11]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	da0f      	bge.n	8005610 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	f003 020f 	and.w	r2, r3, #15
 80055f6:	4613      	mov	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	3338      	adds	r3, #56	; 0x38
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	4413      	add	r3, r2
 8005604:	3304      	adds	r3, #4
 8005606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	705a      	strb	r2, [r3, #1]
 800560e:	e00f      	b.n	8005630 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	f003 020f 	and.w	r2, r3, #15
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	3304      	adds	r3, #4
 8005628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_PCD_EP_Close+0x6e>
 8005646:	2302      	movs	r3, #2
 8005648:	e00e      	b.n	8005668 <HAL_PCD_EP_Close+0x8c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	4618      	mov	r0, r3
 800565a:	f003 fc7b 	bl	8008f54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	607a      	str	r2, [r7, #4]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	460b      	mov	r3, r1
 800567e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005680:	7afb      	ldrb	r3, [r7, #11]
 8005682:	f003 020f 	and.w	r2, r3, #15
 8005686:	4613      	mov	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	1a9b      	subs	r3, r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4413      	add	r3, r2
 8005696:	3304      	adds	r3, #4
 8005698:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2200      	movs	r2, #0
 80056b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056b2:	7afb      	ldrb	r3, [r7, #11]
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d102      	bne.n	80056cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	6979      	ldr	r1, [r7, #20]
 80056e4:	f003 ff56 	bl	8009594 <USB_EP0StartXfer>
 80056e8:	e008      	b.n	80056fc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	6979      	ldr	r1, [r7, #20]
 80056f8:	f003 fd08 	bl	800910c <USB_EPStartXfer>
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	f003 020f 	and.w	r2, r3, #15
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	1a9b      	subs	r3, r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005728:	681b      	ldr	r3, [r3, #0]
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b086      	sub	sp, #24
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	460b      	mov	r3, r1
 8005744:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	f003 020f 	and.w	r2, r3, #15
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	3338      	adds	r3, #56	; 0x38
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	3304      	adds	r3, #4
 800575c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2200      	movs	r2, #0
 800576e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2201      	movs	r2, #1
 8005774:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005776:	7afb      	ldrb	r3, [r7, #11]
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	b2da      	uxtb	r2, r3
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d102      	bne.n	8005790 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005790:	7afb      	ldrb	r3, [r7, #11]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	6979      	ldr	r1, [r7, #20]
 80057a8:	f003 fef4 	bl	8009594 <USB_EP0StartXfer>
 80057ac:	e008      	b.n	80057c0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	6979      	ldr	r1, [r7, #20]
 80057bc:	f003 fca6 	bl	800910c <USB_EPStartXfer>
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	460b      	mov	r3, r1
 80057d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	f003 020f 	and.w	r2, r3, #15
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d901      	bls.n	80057e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e050      	b.n	800588a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	da0f      	bge.n	8005810 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	f003 020f 	and.w	r2, r3, #15
 80057f6:	4613      	mov	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	3338      	adds	r3, #56	; 0x38
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	4413      	add	r3, r2
 8005804:	3304      	adds	r3, #4
 8005806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	705a      	strb	r2, [r3, #1]
 800580e:	e00d      	b.n	800582c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	4613      	mov	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4413      	add	r3, r2
 8005822:	3304      	adds	r3, #4
 8005824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_PCD_EP_SetStall+0x82>
 8005848:	2302      	movs	r3, #2
 800584a:	e01e      	b.n	800588a <HAL_PCD_EP_SetStall+0xc0>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68f9      	ldr	r1, [r7, #12]
 800585a:	4618      	mov	r0, r3
 800585c:	f004 f84b 	bl	80098f6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	b2d9      	uxtb	r1, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800587a:	461a      	mov	r2, r3
 800587c:	f004 fa3c 	bl	8009cf8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	460b      	mov	r3, r1
 800589c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	f003 020f 	and.w	r2, r3, #15
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d901      	bls.n	80058b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e042      	b.n	8005936 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	da0f      	bge.n	80058d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	f003 020f 	and.w	r2, r3, #15
 80058be:	4613      	mov	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	3338      	adds	r3, #56	; 0x38
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	4413      	add	r3, r2
 80058cc:	3304      	adds	r3, #4
 80058ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	705a      	strb	r2, [r3, #1]
 80058d6:	e00f      	b.n	80058f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	f003 020f 	and.w	r2, r3, #15
 80058de:	4613      	mov	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	1a9b      	subs	r3, r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4413      	add	r3, r2
 80058ee:	3304      	adds	r3, #4
 80058f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_PCD_EP_ClrStall+0x86>
 8005914:	2302      	movs	r3, #2
 8005916:	e00e      	b.n	8005936 <HAL_PCD_EP_ClrStall+0xa4>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	4618      	mov	r0, r3
 8005928:	f004 f853 	bl	80099d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b08a      	sub	sp, #40	; 0x28
 8005942:	af02      	add	r7, sp, #8
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	1a9b      	subs	r3, r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	3338      	adds	r3, #56	; 0x38
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	3304      	adds	r3, #4
 8005964:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	429a      	cmp	r2, r3
 8005970:	d901      	bls.n	8005976 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e06c      	b.n	8005a50 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	429a      	cmp	r2, r3
 800598a:	d902      	bls.n	8005992 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3303      	adds	r3, #3
 8005996:	089b      	lsrs	r3, r3, #2
 8005998:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800599a:	e02b      	b.n	80059f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d902      	bls.n	80059b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3303      	adds	r3, #3
 80059bc:	089b      	lsrs	r3, r3, #2
 80059be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68d9      	ldr	r1, [r3, #12]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	4603      	mov	r3, r0
 80059d6:	6978      	ldr	r0, [r7, #20]
 80059d8:	f003 ff2f 	bl	800983a <USB_WritePacket>

    ep->xfer_buff  += len;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	441a      	add	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	699a      	ldr	r2, [r3, #24]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	441a      	add	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d809      	bhi.n	8005a1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d203      	bcs.n	8005a1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1be      	bne.n	800599c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	695a      	ldr	r2, [r3, #20]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d811      	bhi.n	8005a4e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	2201      	movs	r2, #1
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	43db      	mvns	r3, r3
 8005a44:	6939      	ldr	r1, [r7, #16]
 8005a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	333c      	adds	r3, #60	; 0x3c
 8005a70:	3304      	adds	r3, #4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	f040 80a0 	bne.w	8005bd0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d015      	beq.n	8005ac6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4a72      	ldr	r2, [pc, #456]	; (8005c68 <PCD_EP_OutXfrComplete_int+0x210>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	f240 80dd 	bls.w	8005c5e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 80d7 	beq.w	8005c5e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abc:	461a      	mov	r2, r3
 8005abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac2:	6093      	str	r3, [r2, #8]
 8005ac4:	e0cb      	b.n	8005c5e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	461a      	mov	r2, r3
 8005ade:	2320      	movs	r3, #32
 8005ae0:	6093      	str	r3, [r2, #8]
 8005ae2:	e0bc      	b.n	8005c5e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f040 80b7 	bne.w	8005c5e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a5d      	ldr	r2, [pc, #372]	; (8005c68 <PCD_EP_OutXfrComplete_int+0x210>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d90f      	bls.n	8005b18 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b14:	6093      	str	r3, [r2, #8]
 8005b16:	e0a2      	b.n	8005c5e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b2a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	0159      	lsls	r1, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	440b      	add	r3, r1
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005b3e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4403      	add	r3, r0
 8005b4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005b52:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b66:	6819      	ldr	r1, [r3, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4403      	add	r3, r0
 8005b76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4419      	add	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	4613      	mov	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	1a9b      	subs	r3, r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4403      	add	r3, r0
 8005b8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b90:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d114      	bne.n	8005bc2 <PCD_EP_OutXfrComplete_int+0x16a>
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d108      	bne.n	8005bc2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bba:	461a      	mov	r2, r3
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	f004 f89b 	bl	8009cf8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f009 f8fb 	bl	800edc4 <HAL_PCD_DataOutStageCallback>
 8005bce:	e046      	b.n	8005c5e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a26      	ldr	r2, [pc, #152]	; (8005c6c <PCD_EP_OutXfrComplete_int+0x214>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d124      	bne.n	8005c22 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bf4:	6093      	str	r3, [r2, #8]
 8005bf6:	e032      	b.n	8005c5e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2320      	movs	r3, #32
 8005c12:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f009 f8d2 	bl	800edc4 <HAL_PCD_DataOutStageCallback>
 8005c20:	e01d      	b.n	8005c5e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d114      	bne.n	8005c52 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	f004 f853 	bl	8009cf8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f009 f8b3 	bl	800edc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	4f54300a 	.word	0x4f54300a
 8005c6c:	4f54310a 	.word	0x4f54310a

08005c70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	333c      	adds	r3, #60	; 0x3c
 8005c88:	3304      	adds	r3, #4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4a15      	ldr	r2, [pc, #84]	; (8005cf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d90e      	bls.n	8005cc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d009      	beq.n	8005cc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f009 f86b 	bl	800eda0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4a0a      	ldr	r2, [pc, #40]	; (8005cf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d90c      	bls.n	8005cec <PCD_EP_OutSetupPacket_int+0x7c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d108      	bne.n	8005cec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	f004 f806 	bl	8009cf8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	4f54300a 	.word	0x4f54300a

08005cfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d107      	bne.n	8005d2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d1a:	883b      	ldrh	r3, [r7, #0]
 8005d1c:	0419      	lsls	r1, r3, #16
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28
 8005d28:	e028      	b.n	8005d7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	0c1b      	lsrs	r3, r3, #16
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	4413      	add	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	73fb      	strb	r3, [r7, #15]
 8005d3c:	e00d      	b.n	8005d5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	3340      	adds	r3, #64	; 0x40
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	0c1b      	lsrs	r3, r3, #16
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	4413      	add	r3, r2
 8005d52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	3301      	adds	r3, #1
 8005d58:	73fb      	strb	r3, [r7, #15]
 8005d5a:	7bfa      	ldrb	r2, [r7, #15]
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d3ec      	bcc.n	8005d3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005d64:	883b      	ldrh	r3, [r7, #0]
 8005d66:	0418      	lsls	r0, r3, #16
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6819      	ldr	r1, [r3, #0]
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	4302      	orrs	r2, r0
 8005d74:	3340      	adds	r3, #64	; 0x40
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	887a      	ldrh	r2, [r7, #2]
 8005d9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e264      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d075      	beq.n	8005ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005de2:	4ba3      	ldr	r3, [pc, #652]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d00c      	beq.n	8005e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dee:	4ba0      	ldr	r3, [pc, #640]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d112      	bne.n	8005e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dfa:	4b9d      	ldr	r3, [pc, #628]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e06:	d10b      	bne.n	8005e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e08:	4b99      	ldr	r3, [pc, #612]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d05b      	beq.n	8005ecc <HAL_RCC_OscConfig+0x108>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d157      	bne.n	8005ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e23f      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e28:	d106      	bne.n	8005e38 <HAL_RCC_OscConfig+0x74>
 8005e2a:	4b91      	ldr	r3, [pc, #580]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a90      	ldr	r2, [pc, #576]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e01d      	b.n	8005e74 <HAL_RCC_OscConfig+0xb0>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCC_OscConfig+0x98>
 8005e42:	4b8b      	ldr	r3, [pc, #556]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a8a      	ldr	r2, [pc, #552]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4b88      	ldr	r3, [pc, #544]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a87      	ldr	r2, [pc, #540]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e00b      	b.n	8005e74 <HAL_RCC_OscConfig+0xb0>
 8005e5c:	4b84      	ldr	r3, [pc, #528]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a83      	ldr	r2, [pc, #524]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	4b81      	ldr	r3, [pc, #516]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a80      	ldr	r2, [pc, #512]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d013      	beq.n	8005ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7c:	f7fd f940 	bl	8003100 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e84:	f7fd f93c 	bl	8003100 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b64      	cmp	r3, #100	; 0x64
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e204      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e96:	4b76      	ldr	r3, [pc, #472]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f0      	beq.n	8005e84 <HAL_RCC_OscConfig+0xc0>
 8005ea2:	e014      	b.n	8005ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea4:	f7fd f92c 	bl	8003100 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eac:	f7fd f928 	bl	8003100 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b64      	cmp	r3, #100	; 0x64
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e1f0      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ebe:	4b6c      	ldr	r3, [pc, #432]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1f0      	bne.n	8005eac <HAL_RCC_OscConfig+0xe8>
 8005eca:	e000      	b.n	8005ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d063      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eda:	4b65      	ldr	r3, [pc, #404]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ee6:	4b62      	ldr	r3, [pc, #392]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d11c      	bne.n	8005f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ef2:	4b5f      	ldr	r3, [pc, #380]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d116      	bne.n	8005f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005efe:	4b5c      	ldr	r3, [pc, #368]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_RCC_OscConfig+0x152>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d001      	beq.n	8005f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e1c4      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f16:	4b56      	ldr	r3, [pc, #344]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	4952      	ldr	r1, [pc, #328]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f2a:	e03a      	b.n	8005fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d020      	beq.n	8005f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f34:	4b4f      	ldr	r3, [pc, #316]	; (8006074 <HAL_RCC_OscConfig+0x2b0>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3a:	f7fd f8e1 	bl	8003100 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f42:	f7fd f8dd 	bl	8003100 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e1a5      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f54:	4b46      	ldr	r3, [pc, #280]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f60:	4b43      	ldr	r3, [pc, #268]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4940      	ldr	r1, [pc, #256]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	600b      	str	r3, [r1, #0]
 8005f74:	e015      	b.n	8005fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f76:	4b3f      	ldr	r3, [pc, #252]	; (8006074 <HAL_RCC_OscConfig+0x2b0>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fd f8c0 	bl	8003100 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f84:	f7fd f8bc 	bl	8003100 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e184      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f96:	4b36      	ldr	r3, [pc, #216]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d030      	beq.n	8006010 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d016      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fb6:	4b30      	ldr	r3, [pc, #192]	; (8006078 <HAL_RCC_OscConfig+0x2b4>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbc:	f7fd f8a0 	bl	8003100 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fc4:	f7fd f89c 	bl	8003100 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e164      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd6:	4b26      	ldr	r3, [pc, #152]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8005fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f0      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x200>
 8005fe2:	e015      	b.n	8006010 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <HAL_RCC_OscConfig+0x2b4>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fea:	f7fd f889 	bl	8003100 <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ff2:	f7fd f885 	bl	8003100 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e14d      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006004:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8006006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f0      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 80a0 	beq.w	800615e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800601e:	2300      	movs	r3, #0
 8006020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006022:	4b13      	ldr	r3, [pc, #76]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10f      	bne.n	800604e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800602e:	2300      	movs	r3, #0
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	4a0e      	ldr	r2, [pc, #56]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8006038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800603c:	6413      	str	r3, [r2, #64]	; 0x40
 800603e:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <HAL_RCC_OscConfig+0x2ac>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800604a:	2301      	movs	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800604e:	4b0b      	ldr	r3, [pc, #44]	; (800607c <HAL_RCC_OscConfig+0x2b8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d121      	bne.n	800609e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800605a:	4b08      	ldr	r3, [pc, #32]	; (800607c <HAL_RCC_OscConfig+0x2b8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a07      	ldr	r2, [pc, #28]	; (800607c <HAL_RCC_OscConfig+0x2b8>)
 8006060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006066:	f7fd f84b 	bl	8003100 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606c:	e011      	b.n	8006092 <HAL_RCC_OscConfig+0x2ce>
 800606e:	bf00      	nop
 8006070:	40023800 	.word	0x40023800
 8006074:	42470000 	.word	0x42470000
 8006078:	42470e80 	.word	0x42470e80
 800607c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006080:	f7fd f83e 	bl	8003100 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e106      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006092:	4b85      	ldr	r3, [pc, #532]	; (80062a8 <HAL_RCC_OscConfig+0x4e4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d106      	bne.n	80060b4 <HAL_RCC_OscConfig+0x2f0>
 80060a6:	4b81      	ldr	r3, [pc, #516]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060aa:	4a80      	ldr	r2, [pc, #512]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	6713      	str	r3, [r2, #112]	; 0x70
 80060b2:	e01c      	b.n	80060ee <HAL_RCC_OscConfig+0x32a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b05      	cmp	r3, #5
 80060ba:	d10c      	bne.n	80060d6 <HAL_RCC_OscConfig+0x312>
 80060bc:	4b7b      	ldr	r3, [pc, #492]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c0:	4a7a      	ldr	r2, [pc, #488]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80060c2:	f043 0304 	orr.w	r3, r3, #4
 80060c6:	6713      	str	r3, [r2, #112]	; 0x70
 80060c8:	4b78      	ldr	r3, [pc, #480]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80060ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060cc:	4a77      	ldr	r2, [pc, #476]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	6713      	str	r3, [r2, #112]	; 0x70
 80060d4:	e00b      	b.n	80060ee <HAL_RCC_OscConfig+0x32a>
 80060d6:	4b75      	ldr	r3, [pc, #468]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060da:	4a74      	ldr	r2, [pc, #464]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	6713      	str	r3, [r2, #112]	; 0x70
 80060e2:	4b72      	ldr	r3, [pc, #456]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	4a71      	ldr	r2, [pc, #452]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80060e8:	f023 0304 	bic.w	r3, r3, #4
 80060ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d015      	beq.n	8006122 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f6:	f7fd f803 	bl	8003100 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060fc:	e00a      	b.n	8006114 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fc ffff 	bl	8003100 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	; 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e0c5      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006114:	4b65      	ldr	r3, [pc, #404]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 8006116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0ee      	beq.n	80060fe <HAL_RCC_OscConfig+0x33a>
 8006120:	e014      	b.n	800614c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006122:	f7fc ffed 	bl	8003100 <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006128:	e00a      	b.n	8006140 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800612a:	f7fc ffe9 	bl	8003100 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f241 3288 	movw	r2, #5000	; 0x1388
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e0af      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006140:	4b5a      	ldr	r3, [pc, #360]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1ee      	bne.n	800612a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800614c:	7dfb      	ldrb	r3, [r7, #23]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d105      	bne.n	800615e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006152:	4b56      	ldr	r3, [pc, #344]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	4a55      	ldr	r2, [pc, #340]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 8006158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800615c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 809b 	beq.w	800629e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006168:	4b50      	ldr	r3, [pc, #320]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 030c 	and.w	r3, r3, #12
 8006170:	2b08      	cmp	r3, #8
 8006172:	d05c      	beq.n	800622e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d141      	bne.n	8006200 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800617c:	4b4c      	ldr	r3, [pc, #304]	; (80062b0 <HAL_RCC_OscConfig+0x4ec>)
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006182:	f7fc ffbd 	bl	8003100 <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800618a:	f7fc ffb9 	bl	8003100 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e081      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619c:	4b43      	ldr	r3, [pc, #268]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f0      	bne.n	800618a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	019b      	lsls	r3, r3, #6
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	085b      	lsrs	r3, r3, #1
 80061c0:	3b01      	subs	r3, #1
 80061c2:	041b      	lsls	r3, r3, #16
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	061b      	lsls	r3, r3, #24
 80061cc:	4937      	ldr	r1, [pc, #220]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061d2:	4b37      	ldr	r3, [pc, #220]	; (80062b0 <HAL_RCC_OscConfig+0x4ec>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d8:	f7fc ff92 	bl	8003100 <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061e0:	f7fc ff8e 	bl	8003100 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e056      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f2:	4b2e      	ldr	r3, [pc, #184]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0f0      	beq.n	80061e0 <HAL_RCC_OscConfig+0x41c>
 80061fe:	e04e      	b.n	800629e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006200:	4b2b      	ldr	r3, [pc, #172]	; (80062b0 <HAL_RCC_OscConfig+0x4ec>)
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006206:	f7fc ff7b 	bl	8003100 <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800620e:	f7fc ff77 	bl	8003100 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e03f      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006220:	4b22      	ldr	r3, [pc, #136]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f0      	bne.n	800620e <HAL_RCC_OscConfig+0x44a>
 800622c:	e037      	b.n	800629e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e032      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800623a:	4b1c      	ldr	r3, [pc, #112]	; (80062ac <HAL_RCC_OscConfig+0x4e8>)
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d028      	beq.n	800629a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006252:	429a      	cmp	r2, r3
 8006254:	d121      	bne.n	800629a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006260:	429a      	cmp	r2, r3
 8006262:	d11a      	bne.n	800629a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800626a:	4013      	ands	r3, r2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006270:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006272:	4293      	cmp	r3, r2
 8006274:	d111      	bne.n	800629a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	085b      	lsrs	r3, r3, #1
 8006282:	3b01      	subs	r3, #1
 8006284:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006286:	429a      	cmp	r2, r3
 8006288:	d107      	bne.n	800629a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006296:	429a      	cmp	r2, r3
 8006298:	d001      	beq.n	800629e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40007000 	.word	0x40007000
 80062ac:	40023800 	.word	0x40023800
 80062b0:	42470060 	.word	0x42470060

080062b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0cc      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062c8:	4b68      	ldr	r3, [pc, #416]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d90c      	bls.n	80062f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d6:	4b65      	ldr	r3, [pc, #404]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062de:	4b63      	ldr	r3, [pc, #396]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d001      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e0b8      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d020      	beq.n	800633e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006308:	4b59      	ldr	r3, [pc, #356]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	4a58      	ldr	r2, [pc, #352]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006320:	4b53      	ldr	r3, [pc, #332]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4a52      	ldr	r2, [pc, #328]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800632a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800632c:	4b50      	ldr	r3, [pc, #320]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	494d      	ldr	r1, [pc, #308]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	4313      	orrs	r3, r2
 800633c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d044      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d107      	bne.n	8006362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006352:	4b47      	ldr	r3, [pc, #284]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d119      	bne.n	8006392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e07f      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d003      	beq.n	8006372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800636e:	2b03      	cmp	r3, #3
 8006370:	d107      	bne.n	8006382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006372:	4b3f      	ldr	r3, [pc, #252]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e06f      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006382:	4b3b      	ldr	r3, [pc, #236]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e067      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006392:	4b37      	ldr	r3, [pc, #220]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f023 0203 	bic.w	r2, r3, #3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	4934      	ldr	r1, [pc, #208]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063a4:	f7fc feac 	bl	8003100 <HAL_GetTick>
 80063a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063aa:	e00a      	b.n	80063c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ac:	f7fc fea8 	bl	8003100 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e04f      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c2:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 020c 	and.w	r2, r3, #12
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d1eb      	bne.n	80063ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063d4:	4b25      	ldr	r3, [pc, #148]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d20c      	bcs.n	80063fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e2:	4b22      	ldr	r3, [pc, #136]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ea:	4b20      	ldr	r3, [pc, #128]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d001      	beq.n	80063fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e032      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006408:	4b19      	ldr	r3, [pc, #100]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4916      	ldr	r1, [pc, #88]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	4313      	orrs	r3, r2
 8006418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006426:	4b12      	ldr	r3, [pc, #72]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	490e      	ldr	r1, [pc, #56]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	4313      	orrs	r3, r2
 8006438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800643a:	f000 f821 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 800643e:	4602      	mov	r2, r0
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	091b      	lsrs	r3, r3, #4
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	490a      	ldr	r1, [pc, #40]	; (8006474 <HAL_RCC_ClockConfig+0x1c0>)
 800644c:	5ccb      	ldrb	r3, [r1, r3]
 800644e:	fa22 f303 	lsr.w	r3, r2, r3
 8006452:	4a09      	ldr	r2, [pc, #36]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 8006454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f7fc fe0c 	bl	8003078 <HAL_InitTick>

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40023c00 	.word	0x40023c00
 8006470:	40023800 	.word	0x40023800
 8006474:	08014ee0 	.word	0x08014ee0
 8006478:	20000048 	.word	0x20000048
 800647c:	2000004c 	.word	0x2000004c

08006480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006480:	b5b0      	push	{r4, r5, r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006486:	2100      	movs	r1, #0
 8006488:	6079      	str	r1, [r7, #4]
 800648a:	2100      	movs	r1, #0
 800648c:	60f9      	str	r1, [r7, #12]
 800648e:	2100      	movs	r1, #0
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006492:	2100      	movs	r1, #0
 8006494:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006496:	4952      	ldr	r1, [pc, #328]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006498:	6889      	ldr	r1, [r1, #8]
 800649a:	f001 010c 	and.w	r1, r1, #12
 800649e:	2908      	cmp	r1, #8
 80064a0:	d00d      	beq.n	80064be <HAL_RCC_GetSysClockFreq+0x3e>
 80064a2:	2908      	cmp	r1, #8
 80064a4:	f200 8094 	bhi.w	80065d0 <HAL_RCC_GetSysClockFreq+0x150>
 80064a8:	2900      	cmp	r1, #0
 80064aa:	d002      	beq.n	80064b2 <HAL_RCC_GetSysClockFreq+0x32>
 80064ac:	2904      	cmp	r1, #4
 80064ae:	d003      	beq.n	80064b8 <HAL_RCC_GetSysClockFreq+0x38>
 80064b0:	e08e      	b.n	80065d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064b2:	4b4c      	ldr	r3, [pc, #304]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80064b4:	60bb      	str	r3, [r7, #8]
       break;
 80064b6:	e08e      	b.n	80065d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064b8:	4b4b      	ldr	r3, [pc, #300]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80064ba:	60bb      	str	r3, [r7, #8]
      break;
 80064bc:	e08b      	b.n	80065d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064be:	4948      	ldr	r1, [pc, #288]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80064c0:	6849      	ldr	r1, [r1, #4]
 80064c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80064c6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064c8:	4945      	ldr	r1, [pc, #276]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80064ca:	6849      	ldr	r1, [r1, #4]
 80064cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d024      	beq.n	800651e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064d4:	4942      	ldr	r1, [pc, #264]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80064d6:	6849      	ldr	r1, [r1, #4]
 80064d8:	0989      	lsrs	r1, r1, #6
 80064da:	4608      	mov	r0, r1
 80064dc:	f04f 0100 	mov.w	r1, #0
 80064e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80064e4:	f04f 0500 	mov.w	r5, #0
 80064e8:	ea00 0204 	and.w	r2, r0, r4
 80064ec:	ea01 0305 	and.w	r3, r1, r5
 80064f0:	493d      	ldr	r1, [pc, #244]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80064f2:	fb01 f003 	mul.w	r0, r1, r3
 80064f6:	2100      	movs	r1, #0
 80064f8:	fb01 f102 	mul.w	r1, r1, r2
 80064fc:	1844      	adds	r4, r0, r1
 80064fe:	493a      	ldr	r1, [pc, #232]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8006500:	fba2 0101 	umull	r0, r1, r2, r1
 8006504:	1863      	adds	r3, r4, r1
 8006506:	4619      	mov	r1, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	461a      	mov	r2, r3
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	f7fa fbbc 	bl	8000c8c <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4613      	mov	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	e04a      	b.n	80065b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800651e:	4b30      	ldr	r3, [pc, #192]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	099b      	lsrs	r3, r3, #6
 8006524:	461a      	mov	r2, r3
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800652e:	f04f 0100 	mov.w	r1, #0
 8006532:	ea02 0400 	and.w	r4, r2, r0
 8006536:	ea03 0501 	and.w	r5, r3, r1
 800653a:	4620      	mov	r0, r4
 800653c:	4629      	mov	r1, r5
 800653e:	f04f 0200 	mov.w	r2, #0
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	014b      	lsls	r3, r1, #5
 8006548:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800654c:	0142      	lsls	r2, r0, #5
 800654e:	4610      	mov	r0, r2
 8006550:	4619      	mov	r1, r3
 8006552:	1b00      	subs	r0, r0, r4
 8006554:	eb61 0105 	sbc.w	r1, r1, r5
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	018b      	lsls	r3, r1, #6
 8006562:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006566:	0182      	lsls	r2, r0, #6
 8006568:	1a12      	subs	r2, r2, r0
 800656a:	eb63 0301 	sbc.w	r3, r3, r1
 800656e:	f04f 0000 	mov.w	r0, #0
 8006572:	f04f 0100 	mov.w	r1, #0
 8006576:	00d9      	lsls	r1, r3, #3
 8006578:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800657c:	00d0      	lsls	r0, r2, #3
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	1912      	adds	r2, r2, r4
 8006584:	eb45 0303 	adc.w	r3, r5, r3
 8006588:	f04f 0000 	mov.w	r0, #0
 800658c:	f04f 0100 	mov.w	r1, #0
 8006590:	0299      	lsls	r1, r3, #10
 8006592:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006596:	0290      	lsls	r0, r2, #10
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4610      	mov	r0, r2
 800659e:	4619      	mov	r1, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	461a      	mov	r2, r3
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	f7fa fb70 	bl	8000c8c <__aeabi_uldivmod>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4613      	mov	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	0c1b      	lsrs	r3, r3, #16
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	3301      	adds	r3, #1
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065cc:	60bb      	str	r3, [r7, #8]
      break;
 80065ce:	e002      	b.n	80065d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065d0:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80065d2:	60bb      	str	r3, [r7, #8]
      break;
 80065d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065d6:	68bb      	ldr	r3, [r7, #8]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bdb0      	pop	{r4, r5, r7, pc}
 80065e0:	40023800 	.word	0x40023800
 80065e4:	00f42400 	.word	0x00f42400
 80065e8:	017d7840 	.word	0x017d7840

080065ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065f0:	4b03      	ldr	r3, [pc, #12]	; (8006600 <HAL_RCC_GetHCLKFreq+0x14>)
 80065f2:	681b      	ldr	r3, [r3, #0]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20000048 	.word	0x20000048

08006604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006608:	f7ff fff0 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 800660c:	4602      	mov	r2, r0
 800660e:	4b05      	ldr	r3, [pc, #20]	; (8006624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	0a9b      	lsrs	r3, r3, #10
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	4903      	ldr	r1, [pc, #12]	; (8006628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800661a:	5ccb      	ldrb	r3, [r1, r3]
 800661c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006620:	4618      	mov	r0, r3
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40023800 	.word	0x40023800
 8006628:	08014ef0 	.word	0x08014ef0

0800662c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d105      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006650:	2b00      	cmp	r3, #0
 8006652:	d038      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006654:	4b68      	ldr	r3, [pc, #416]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800665a:	f7fc fd51 	bl	8003100 <HAL_GetTick>
 800665e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006660:	e008      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006662:	f7fc fd4d 	bl	8003100 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e0bd      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006674:	4b61      	ldr	r3, [pc, #388]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1f0      	bne.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	019b      	lsls	r3, r3, #6
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	071b      	lsls	r3, r3, #28
 8006692:	495a      	ldr	r1, [pc, #360]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800669a:	4b57      	ldr	r3, [pc, #348]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800669c:	2201      	movs	r2, #1
 800669e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066a0:	f7fc fd2e 	bl	8003100 <HAL_GetTick>
 80066a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066a6:	e008      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066a8:	f7fc fd2a 	bl	8003100 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e09a      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066ba:	4b50      	ldr	r3, [pc, #320]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0f0      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8083 	beq.w	80067da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	4b48      	ldr	r3, [pc, #288]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	4a47      	ldr	r2, [pc, #284]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e2:	6413      	str	r3, [r2, #64]	; 0x40
 80066e4:	4b45      	ldr	r3, [pc, #276]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80066f0:	4b43      	ldr	r3, [pc, #268]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a42      	ldr	r2, [pc, #264]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066fc:	f7fc fd00 	bl	8003100 <HAL_GetTick>
 8006700:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006702:	e008      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006704:	f7fc fcfc 	bl	8003100 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e06c      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006716:	4b3a      	ldr	r3, [pc, #232]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0f0      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006722:	4b36      	ldr	r3, [pc, #216]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800672a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d02f      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	429a      	cmp	r2, r3
 800673e:	d028      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006740:	4b2e      	ldr	r3, [pc, #184]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006748:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800674a:	4b2e      	ldr	r3, [pc, #184]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800674c:	2201      	movs	r2, #1
 800674e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006750:	4b2c      	ldr	r3, [pc, #176]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006756:	4a29      	ldr	r2, [pc, #164]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800675c:	4b27      	ldr	r3, [pc, #156]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b01      	cmp	r3, #1
 8006766:	d114      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006768:	f7fc fcca 	bl	8003100 <HAL_GetTick>
 800676c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800676e:	e00a      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006770:	f7fc fcc6 	bl	8003100 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	f241 3288 	movw	r2, #5000	; 0x1388
 800677e:	4293      	cmp	r3, r2
 8006780:	d901      	bls.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e034      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006786:	4b1d      	ldr	r3, [pc, #116]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0ee      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800679a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800679e:	d10d      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80067a0:	4b16      	ldr	r3, [pc, #88]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b4:	4911      	ldr	r1, [pc, #68]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	608b      	str	r3, [r1, #8]
 80067ba:	e005      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80067bc:	4b0f      	ldr	r3, [pc, #60]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	4a0e      	ldr	r2, [pc, #56]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067c6:	6093      	str	r3, [r2, #8]
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067d4:	4909      	ldr	r1, [pc, #36]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	7d1a      	ldrb	r2, [r3, #20]
 80067ea:	4b07      	ldr	r3, [pc, #28]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80067ec:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	42470068 	.word	0x42470068
 80067fc:	40023800 	.word	0x40023800
 8006800:	40007000 	.word	0x40007000
 8006804:	42470e40 	.word	0x42470e40
 8006808:	424711e0 	.word	0x424711e0

0800680c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e083      	b.n	8006926 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	7f5b      	ldrb	r3, [r3, #29]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d105      	bne.n	8006834 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fc f96a 	bl	8002b08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	22ca      	movs	r2, #202	; 0xca
 8006840:	625a      	str	r2, [r3, #36]	; 0x24
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2253      	movs	r2, #83	; 0x53
 8006848:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f897 	bl	800697e <RTC_EnterInitMode>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d008      	beq.n	8006868 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	22ff      	movs	r2, #255	; 0xff
 800685c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2204      	movs	r2, #4
 8006862:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e05e      	b.n	8006926 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6899      	ldr	r1, [r3, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68d2      	ldr	r2, [r2, #12]
 80068a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6919      	ldr	r1, [r3, #16]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	041a      	lsls	r2, r3, #16
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068c6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10e      	bne.n	80068f4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f829 	bl	800692e <HAL_RTC_WaitForSynchro>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d008      	beq.n	80068f4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	22ff      	movs	r2, #255	; 0xff
 80068e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2204      	movs	r2, #4
 80068ee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e018      	b.n	8006926 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006902:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	22ff      	movs	r2, #255	; 0xff
 800691c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006924:	2300      	movs	r3, #0
  }
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006948:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800694a:	f7fc fbd9 	bl	8003100 <HAL_GetTick>
 800694e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006950:	e009      	b.n	8006966 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006952:	f7fc fbd5 	bl	8003100 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006960:	d901      	bls.n	8006966 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e007      	b.n	8006976 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0ee      	beq.n	8006952 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d119      	bne.n	80069cc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f04f 32ff 	mov.w	r2, #4294967295
 80069a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069a2:	f7fc fbad 	bl	8003100 <HAL_GetTick>
 80069a6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80069a8:	e009      	b.n	80069be <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80069aa:	f7fc fba9 	bl	8003100 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b8:	d901      	bls.n	80069be <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e007      	b.n	80069ce <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0ee      	beq.n	80069aa <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e022      	b.n	8006a2e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fc f89a 	bl	8002b34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2203      	movs	r2, #3
 8006a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f815 	bl	8006a38 <HAL_SD_InitCard>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e00a      	b.n	8006a2e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a38:	b5b0      	push	{r4, r5, r7, lr}
 8006a3a:	b08e      	sub	sp, #56	; 0x38
 8006a3c:	af04      	add	r7, sp, #16
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006a54:	2376      	movs	r3, #118	; 0x76
 8006a56:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681d      	ldr	r5, [r3, #0]
 8006a5c:	466c      	mov	r4, sp
 8006a5e:	f107 0314 	add.w	r3, r7, #20
 8006a62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a6a:	f107 0308 	add.w	r3, r7, #8
 8006a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a70:	4628      	mov	r0, r5
 8006a72:	f001 f938 	bl	8007ce6 <SDIO_Init>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e04c      	b.n	8006b22 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006a88:	4b28      	ldr	r3, [pc, #160]	; (8006b2c <HAL_SD_InitCard+0xf4>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 f970 	bl	8007d78 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006a98:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <HAL_SD_InitCard+0xf4>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 ff02 	bl	80078a8 <SD_PowerON>
 8006aa4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e02e      	b.n	8006b22 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fe23 	bl	8007710 <SD_InitCard>
 8006aca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e01b      	b.n	8006b22 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006af2:	4618      	mov	r0, r3
 8006af4:	f001 f9d3 	bl	8007e9e <SDMMC_CmdBlockLength>
 8006af8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00f      	beq.n	8006b20 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a0a      	ldr	r2, [pc, #40]	; (8006b30 <HAL_SD_InitCard+0xf8>)
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e000      	b.n	8006b22 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3728      	adds	r7, #40	; 0x28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bdb0      	pop	{r4, r5, r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	422580a0 	.word	0x422580a0
 8006b30:	004005ff 	.word	0x004005ff

08006b34 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b092      	sub	sp, #72	; 0x48
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b42:	f7fc fadd 	bl	8003100 <HAL_GetTick>
 8006b46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d107      	bne.n	8006b66 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e1bd      	b.n	8006ee2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	f040 81b0 	bne.w	8006ed4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	441a      	add	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d907      	bls.n	8006b98 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e1a4      	b.n	8006ee2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d002      	beq.n	8006bb6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	025b      	lsls	r3, r3, #9
 8006bb4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bba:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	025b      	lsls	r3, r3, #9
 8006bc0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006bc2:	2390      	movs	r3, #144	; 0x90
 8006bc4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f107 0214 	add.w	r2, r7, #20
 8006bda:	4611      	mov	r1, r2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 f932 	bl	8007e46 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d90a      	bls.n	8006bfe <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2202      	movs	r2, #2
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 f996 	bl	8007f26 <SDMMC_CmdReadMultiBlock>
 8006bfa:	6478      	str	r0, [r7, #68]	; 0x44
 8006bfc:	e009      	b.n	8006c12 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 f969 	bl	8007ee2 <SDMMC_CmdReadSingleBlock>
 8006c10:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d012      	beq.n	8006c3e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a7a      	ldr	r2, [pc, #488]	; (8006e08 <HAL_SD_ReadBlocks+0x2d4>)
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c26:	431a      	orrs	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e151      	b.n	8006ee2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006c42:	e061      	b.n	8006d08 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d03c      	beq.n	8006ccc <HAL_SD_ReadBlocks+0x198>
 8006c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d039      	beq.n	8006ccc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c5c:	e033      	b.n	8006cc6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f001 f86a 	bl	8007d3c <SDIO_ReadFIFO>
 8006c68:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c74:	3301      	adds	r3, #1
 8006c76:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	0a1b      	lsrs	r3, r3, #8
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c86:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c90:	3b01      	subs	r3, #1
 8006c92:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	0c1b      	lsrs	r3, r3, #16
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	0e1b      	lsrs	r3, r3, #24
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8006cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc8:	2b07      	cmp	r3, #7
 8006cca:	d9c8      	bls.n	8006c5e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006ccc:	f7fc fa18 	bl	8003100 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d902      	bls.n	8006ce2 <HAL_SD_ReadBlocks+0x1ae>
 8006cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d112      	bne.n	8006d08 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a48      	ldr	r2, [pc, #288]	; (8006e08 <HAL_SD_ReadBlocks+0x2d4>)
 8006ce8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e0ec      	b.n	8006ee2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d0e:	f240 332a 	movw	r3, #810	; 0x32a
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d095      	beq.n	8006c44 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d022      	beq.n	8006d6c <HAL_SD_ReadBlocks+0x238>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d91f      	bls.n	8006d6c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d01b      	beq.n	8006d6c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 f95b 	bl	8007ff4 <SDMMC_CmdStopTransfer>
 8006d3e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d012      	beq.n	8006d6c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a2f      	ldr	r2, [pc, #188]	; (8006e08 <HAL_SD_ReadBlocks+0x2d4>)
 8006d4c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0ba      	b.n	8006ee2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d012      	beq.n	8006da0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a22      	ldr	r2, [pc, #136]	; (8006e08 <HAL_SD_ReadBlocks+0x2d4>)
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	f043 0208 	orr.w	r2, r3, #8
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0a0      	b.n	8006ee2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d012      	beq.n	8006dd4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a15      	ldr	r2, [pc, #84]	; (8006e08 <HAL_SD_ReadBlocks+0x2d4>)
 8006db4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	f043 0202 	orr.w	r2, r3, #2
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e086      	b.n	8006ee2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d063      	beq.n	8006eaa <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a08      	ldr	r2, [pc, #32]	; (8006e08 <HAL_SD_ReadBlocks+0x2d4>)
 8006de8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	f043 0220 	orr.w	r2, r3, #32
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e06c      	b.n	8006ee2 <HAL_SD_ReadBlocks+0x3ae>
 8006e08:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 ff93 	bl	8007d3c <SDIO_ReadFIFO>
 8006e16:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	3301      	adds	r3, #1
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e34:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	3301      	adds	r3, #1
 8006e3a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	0c1b      	lsrs	r3, r3, #16
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4e:	3301      	adds	r3, #1
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e54:	3b01      	subs	r3, #1
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5a:	0e1b      	lsrs	r3, r3, #24
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e60:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	3301      	adds	r3, #1
 8006e66:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006e6e:	f7fc f947 	bl	8003100 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d902      	bls.n	8006e84 <HAL_SD_ReadBlocks+0x350>
 8006e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d112      	bne.n	8006eaa <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a18      	ldr	r2, [pc, #96]	; (8006eec <HAL_SD_ReadBlocks+0x3b8>)
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e01b      	b.n	8006ee2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_SD_ReadBlocks+0x38a>
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1a6      	bne.n	8006e0c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e006      	b.n	8006ee2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
  }
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3748      	adds	r7, #72	; 0x48
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	004005ff 	.word	0x004005ff

08006ef0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b092      	sub	sp, #72	; 0x48
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006efe:	f7fc f8ff 	bl	8003100 <HAL_GetTick>
 8006f02:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d107      	bne.n	8006f22 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e166      	b.n	80071f0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	f040 8159 	bne.w	80071e2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	441a      	add	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d907      	bls.n	8006f54 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e14d      	b.n	80071f0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2203      	movs	r2, #3
 8006f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2200      	movs	r2, #0
 8006f62:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d002      	beq.n	8006f72 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	025b      	lsls	r3, r3, #9
 8006f70:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f72:	f04f 33ff 	mov.w	r3, #4294967295
 8006f76:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	025b      	lsls	r3, r3, #9
 8006f7c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006f7e:	2390      	movs	r3, #144	; 0x90
 8006f80:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006f82:	2300      	movs	r3, #0
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f107 0218 	add.w	r2, r7, #24
 8006f96:	4611      	mov	r1, r2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 ff54 	bl	8007e46 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d90a      	bls.n	8006fba <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fffc 	bl	8007fae <SDMMC_CmdWriteMultiBlock>
 8006fb6:	6478      	str	r0, [r7, #68]	; 0x44
 8006fb8:	e009      	b.n	8006fce <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2210      	movs	r2, #16
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 ffcf 	bl	8007f6a <SDMMC_CmdWriteSingleBlock>
 8006fcc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d012      	beq.n	8006ffa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a87      	ldr	r2, [pc, #540]	; (80071f8 <HAL_SD_WriteBlocks+0x308>)
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e0fa      	b.n	80071f0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006ffe:	e065      	b.n	80070cc <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d040      	beq.n	8007090 <HAL_SD_WriteBlocks+0x1a0>
 800700e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007010:	2b00      	cmp	r3, #0
 8007012:	d03d      	beq.n	8007090 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007014:	2300      	movs	r3, #0
 8007016:	643b      	str	r3, [r7, #64]	; 0x40
 8007018:	e037      	b.n	800708a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007022:	3301      	adds	r3, #1
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	3b01      	subs	r3, #1
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800702c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	021a      	lsls	r2, r3, #8
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	4313      	orrs	r3, r2
 8007036:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703a:	3301      	adds	r3, #1
 800703c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800703e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007040:	3b01      	subs	r3, #1
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	041a      	lsls	r2, r3, #16
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	4313      	orrs	r3, r2
 800704e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007052:	3301      	adds	r3, #1
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007058:	3b01      	subs	r3, #1
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800705c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	061a      	lsls	r2, r3, #24
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706a:	3301      	adds	r3, #1
 800706c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800706e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007070:	3b01      	subs	r3, #1
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f107 0214 	add.w	r2, r7, #20
 800707c:	4611      	mov	r1, r2
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fe69 	bl	8007d56 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007086:	3301      	adds	r3, #1
 8007088:	643b      	str	r3, [r7, #64]	; 0x40
 800708a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800708c:	2b07      	cmp	r3, #7
 800708e:	d9c4      	bls.n	800701a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007090:	f7fc f836 	bl	8003100 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800709c:	429a      	cmp	r2, r3
 800709e:	d902      	bls.n	80070a6 <HAL_SD_WriteBlocks+0x1b6>
 80070a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d112      	bne.n	80070cc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a53      	ldr	r2, [pc, #332]	; (80071f8 <HAL_SD_WriteBlocks+0x308>)
 80070ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b4:	431a      	orrs	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e091      	b.n	80071f0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070d2:	f240 331a 	movw	r3, #794	; 0x31a
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d091      	beq.n	8007000 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d022      	beq.n	8007130 <HAL_SD_WriteBlocks+0x240>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d91f      	bls.n	8007130 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d01b      	beq.n	8007130 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 ff79 	bl	8007ff4 <SDMMC_CmdStopTransfer>
 8007102:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007106:	2b00      	cmp	r3, #0
 8007108:	d012      	beq.n	8007130 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a3a      	ldr	r2, [pc, #232]	; (80071f8 <HAL_SD_WriteBlocks+0x308>)
 8007110:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007118:	431a      	orrs	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e05f      	b.n	80071f0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d012      	beq.n	8007164 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a2d      	ldr	r2, [pc, #180]	; (80071f8 <HAL_SD_WriteBlocks+0x308>)
 8007144:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	f043 0208 	orr.w	r2, r3, #8
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e045      	b.n	80071f0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d012      	beq.n	8007198 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <HAL_SD_WriteBlocks+0x308>)
 8007178:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	f043 0202 	orr.w	r2, r3, #2
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e02b      	b.n	80071f0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719e:	f003 0310 	and.w	r3, r3, #16
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d012      	beq.n	80071cc <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a13      	ldr	r2, [pc, #76]	; (80071f8 <HAL_SD_WriteBlocks+0x308>)
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	f043 0210 	orr.w	r2, r3, #16
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e011      	b.n	80071f0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	e006      	b.n	80071f0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
  }
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3748      	adds	r7, #72	; 0x48
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	004005ff 	.word	0x004005ff

080071fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800720a:	0f9b      	lsrs	r3, r3, #30
 800720c:	b2da      	uxtb	r2, r3
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007216:	0e9b      	lsrs	r3, r3, #26
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	b2da      	uxtb	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007228:	0e1b      	lsrs	r3, r3, #24
 800722a:	b2db      	uxtb	r3, r3
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	b2da      	uxtb	r2, r3
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800723a:	0c1b      	lsrs	r3, r3, #16
 800723c:	b2da      	uxtb	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007246:	0a1b      	lsrs	r3, r3, #8
 8007248:	b2da      	uxtb	r2, r3
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007252:	b2da      	uxtb	r2, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800725c:	0d1b      	lsrs	r3, r3, #20
 800725e:	b29a      	uxth	r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007268:	0c1b      	lsrs	r3, r3, #16
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f003 030f 	and.w	r3, r3, #15
 8007270:	b2da      	uxtb	r2, r3
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800727a:	0bdb      	lsrs	r3, r3, #15
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	b2da      	uxtb	r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800728c:	0b9b      	lsrs	r3, r3, #14
 800728e:	b2db      	uxtb	r3, r3
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	b2da      	uxtb	r2, r3
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800729e:	0b5b      	lsrs	r3, r3, #13
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072b0:	0b1b      	lsrs	r3, r3, #12
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2200      	movs	r2, #0
 80072c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d163      	bne.n	8007394 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072d0:	009a      	lsls	r2, r3, #2
 80072d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80072d6:	4013      	ands	r3, r2
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80072dc:	0f92      	lsrs	r2, r2, #30
 80072de:	431a      	orrs	r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072e8:	0edb      	lsrs	r3, r3, #27
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fa:	0e1b      	lsrs	r3, r3, #24
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	b2da      	uxtb	r2, r3
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800730c:	0d5b      	lsrs	r3, r3, #21
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	b2da      	uxtb	r2, r3
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800731e:	0c9b      	lsrs	r3, r3, #18
 8007320:	b2db      	uxtb	r3, r3
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	b2da      	uxtb	r2, r3
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007330:	0bdb      	lsrs	r3, r3, #15
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f003 0307 	and.w	r3, r3, #7
 8007338:	b2da      	uxtb	r2, r3
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	7e1b      	ldrb	r3, [r3, #24]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	3302      	adds	r3, #2
 8007354:	2201      	movs	r2, #1
 8007356:	fa02 f303 	lsl.w	r3, r2, r3
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800735e:	fb02 f203 	mul.w	r2, r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	7a1b      	ldrb	r3, [r3, #8]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	f003 030f 	and.w	r3, r3, #15
 8007370:	2201      	movs	r2, #1
 8007372:	409a      	lsls	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007380:	0a52      	lsrs	r2, r2, #9
 8007382:	fb02 f203 	mul.w	r2, r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007390:	661a      	str	r2, [r3, #96]	; 0x60
 8007392:	e031      	b.n	80073f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007398:	2b01      	cmp	r3, #1
 800739a:	d11d      	bne.n	80073d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073a0:	041b      	lsls	r3, r3, #16
 80073a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073aa:	0c1b      	lsrs	r3, r3, #16
 80073ac:	431a      	orrs	r2, r3
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	3301      	adds	r3, #1
 80073b8:	029a      	lsls	r2, r3, #10
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073cc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	661a      	str	r2, [r3, #96]	; 0x60
 80073d6:	e00f      	b.n	80073f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a58      	ldr	r2, [pc, #352]	; (8007540 <HAL_SD_GetCardCSD+0x344>)
 80073de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e09d      	b.n	8007534 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073fc:	0b9b      	lsrs	r3, r3, #14
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	b2da      	uxtb	r2, r3
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800740e:	09db      	lsrs	r3, r3, #7
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007416:	b2da      	uxtb	r2, r3
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007426:	b2da      	uxtb	r2, r3
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007430:	0fdb      	lsrs	r3, r3, #31
 8007432:	b2da      	uxtb	r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743c:	0f5b      	lsrs	r3, r3, #29
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	b2da      	uxtb	r2, r3
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	0e9b      	lsrs	r3, r3, #26
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	b2da      	uxtb	r2, r3
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007460:	0d9b      	lsrs	r3, r3, #22
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	b2da      	uxtb	r2, r3
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007472:	0d5b      	lsrs	r3, r3, #21
 8007474:	b2db      	uxtb	r3, r3
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	b2da      	uxtb	r2, r3
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	0c1b      	lsrs	r3, r3, #16
 8007490:	b2db      	uxtb	r3, r3
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	b2da      	uxtb	r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a2:	0bdb      	lsrs	r3, r3, #15
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b6:	0b9b      	lsrs	r3, r3, #14
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ca:	0b5b      	lsrs	r3, r3, #13
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074de:	0b1b      	lsrs	r3, r3, #12
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f2:	0a9b      	lsrs	r3, r3, #10
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007506:	0a1b      	lsrs	r3, r3, #8
 8007508:	b2db      	uxtb	r3, r3
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	b2da      	uxtb	r2, r3
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	b2db      	uxtb	r3, r3
 800751e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007522:	b2da      	uxtb	r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	004005ff 	.word	0x004005ff

08007544 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800759c:	b5b0      	push	{r4, r5, r7, lr}
 800759e:	b08e      	sub	sp, #56	; 0x38
 80075a0:	af04      	add	r7, sp, #16
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2203      	movs	r2, #3
 80075b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d02e      	beq.n	800761a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c2:	d106      	bne.n	80075d2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38
 80075d0:	e029      	b.n	8007626 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d8:	d10a      	bne.n	80075f0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa1a 	bl	8007a14 <SD_WideBus_Enable>
 80075e0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	639a      	str	r2, [r3, #56]	; 0x38
 80075ee:	e01a      	b.n	8007626 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa57 	bl	8007aaa <SD_WideBus_Disable>
 80075fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	431a      	orrs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	639a      	str	r2, [r3, #56]	; 0x38
 800760a:	e00c      	b.n	8007626 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
 8007618:	e005      	b.n	8007626 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00b      	beq.n	8007646 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a26      	ldr	r2, [pc, #152]	; (80076cc <HAL_SD_ConfigWideBusOperation+0x130>)
 8007634:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007644:	e01f      	b.n	8007686 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681d      	ldr	r5, [r3, #0]
 800766c:	466c      	mov	r4, sp
 800766e:	f107 0314 	add.w	r3, r7, #20
 8007672:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800767a:	f107 0308 	add.w	r3, r7, #8
 800767e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007680:	4628      	mov	r0, r5
 8007682:	f000 fb30 	bl	8007ce6 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fc05 	bl	8007e9e <SDMMC_CmdBlockLength>
 8007694:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00c      	beq.n	80076b6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a0a      	ldr	r2, [pc, #40]	; (80076cc <HAL_SD_ConfigWideBusOperation+0x130>)
 80076a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80076be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3728      	adds	r7, #40	; 0x28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bdb0      	pop	{r4, r5, r7, pc}
 80076ca:	bf00      	nop
 80076cc:	004005ff 	.word	0x004005ff

080076d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80076dc:	f107 030c 	add.w	r3, r7, #12
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f96e 	bl	80079c4 <SD_SendStatus>
 80076e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	0a5b      	lsrs	r3, r3, #9
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007706:	693b      	ldr	r3, [r7, #16]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007710:	b5b0      	push	{r4, r5, r7, lr}
 8007712:	b094      	sub	sp, #80	; 0x50
 8007714:	af04      	add	r7, sp, #16
 8007716:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007718:	2301      	movs	r3, #1
 800771a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fb38 	bl	8007d96 <SDIO_GetPowerState>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d102      	bne.n	8007732 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800772c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007730:	e0b6      	b.n	80078a0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007736:	2b03      	cmp	r3, #3
 8007738:	d02f      	beq.n	800779a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fd62 	bl	8008208 <SDMMC_CmdSendCID>
 8007744:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <SD_InitCard+0x40>
    {
      return errorstate;
 800774c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774e:	e0a7      	b.n	80078a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fb62 	bl	8007e20 <SDIO_GetResponse>
 800775c:	4602      	mov	r2, r0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2104      	movs	r1, #4
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fb59 	bl	8007e20 <SDIO_GetResponse>
 800776e:	4602      	mov	r2, r0
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2108      	movs	r1, #8
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fb50 	bl	8007e20 <SDIO_GetResponse>
 8007780:	4602      	mov	r2, r0
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	210c      	movs	r1, #12
 800778c:	4618      	mov	r0, r3
 800778e:	f000 fb47 	bl	8007e20 <SDIO_GetResponse>
 8007792:	4602      	mov	r2, r0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d00d      	beq.n	80077be <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f107 020e 	add.w	r2, r7, #14
 80077aa:	4611      	mov	r1, r2
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 fd68 	bl	8008282 <SDMMC_CmdSetRelAdd>
 80077b2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <SD_InitCard+0xae>
    {
      return errorstate;
 80077ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077bc:	e070      	b.n	80078a0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d036      	beq.n	8007834 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80077c6:	89fb      	ldrh	r3, [r7, #14]
 80077c8:	461a      	mov	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d6:	041b      	lsls	r3, r3, #16
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f000 fd32 	bl	8008244 <SDMMC_CmdSendCSD>
 80077e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <SD_InitCard+0xdc>
    {
      return errorstate;
 80077e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ea:	e059      	b.n	80078a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2100      	movs	r1, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fb14 	bl	8007e20 <SDIO_GetResponse>
 80077f8:	4602      	mov	r2, r0
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2104      	movs	r1, #4
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fb0b 	bl	8007e20 <SDIO_GetResponse>
 800780a:	4602      	mov	r2, r0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2108      	movs	r1, #8
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fb02 	bl	8007e20 <SDIO_GetResponse>
 800781c:	4602      	mov	r2, r0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	210c      	movs	r1, #12
 8007828:	4618      	mov	r0, r3
 800782a:	f000 faf9 	bl	8007e20 <SDIO_GetResponse>
 800782e:	4602      	mov	r2, r0
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2104      	movs	r1, #4
 800783a:	4618      	mov	r0, r3
 800783c:	f000 faf0 	bl	8007e20 <SDIO_GetResponse>
 8007840:	4603      	mov	r3, r0
 8007842:	0d1a      	lsrs	r2, r3, #20
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007848:	f107 0310 	add.w	r3, r7, #16
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff fcd4 	bl	80071fc <HAL_SD_GetCardCSD>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800785a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800785e:	e01f      	b.n	80078a0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	461a      	mov	r2, r3
 800786c:	f04f 0300 	mov.w	r3, #0
 8007870:	4608      	mov	r0, r1
 8007872:	f000 fbe1 	bl	8008038 <SDMMC_CmdSelDesel>
 8007876:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <SD_InitCard+0x172>
  {
    return errorstate;
 800787e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007880:	e00e      	b.n	80078a0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681d      	ldr	r5, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	466c      	mov	r4, sp
 800788a:	f103 0210 	add.w	r2, r3, #16
 800788e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007894:	3304      	adds	r3, #4
 8007896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007898:	4628      	mov	r0, r5
 800789a:	f000 fa24 	bl	8007ce6 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3740      	adds	r7, #64	; 0x40
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bdb0      	pop	{r4, r5, r7, pc}

080078a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 fbdc 	bl	800807e <SDMMC_CmdGoIdleState>
 80078c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	e072      	b.n	80079b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fbef 	bl	80080ba <SDMMC_CmdOperCond>
 80078dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00d      	beq.n	8007900 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 fbc5 	bl	800807e <SDMMC_CmdGoIdleState>
 80078f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <SD_PowerON+0x5e>
    {
      return errorstate;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	e05b      	b.n	80079b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800790a:	2b01      	cmp	r3, #1
 800790c:	d137      	bne.n	800797e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2100      	movs	r1, #0
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fbef 	bl	80080f8 <SDMMC_CmdAppCommand>
 800791a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d02d      	beq.n	800797e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007922:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007926:	e047      	b.n	80079b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fbe2 	bl	80080f8 <SDMMC_CmdAppCommand>
 8007934:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <SD_PowerON+0x98>
    {
      return errorstate;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	e03b      	b.n	80079b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	491e      	ldr	r1, [pc, #120]	; (80079c0 <SD_PowerON+0x118>)
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fbf8 	bl	800813c <SDMMC_CmdAppOperCommand>
 800794c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007958:	e02e      	b.n	80079b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2100      	movs	r1, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fa5d 	bl	8007e20 <SDIO_GetResponse>
 8007966:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	0fdb      	lsrs	r3, r3, #31
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <SD_PowerON+0xcc>
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <SD_PowerON+0xce>
 8007974:	2300      	movs	r3, #0
 8007976:	613b      	str	r3, [r7, #16]

    count++;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	3301      	adds	r3, #1
 800797c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007984:	4293      	cmp	r3, r2
 8007986:	d802      	bhi.n	800798e <SD_PowerON+0xe6>
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0cc      	beq.n	8007928 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007994:	4293      	cmp	r3, r2
 8007996:	d902      	bls.n	800799e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800799c:	e00c      	b.n	80079b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	645a      	str	r2, [r3, #68]	; 0x44
 80079ae:	e002      	b.n	80079b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	c1100000 	.word	0xc1100000

080079c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d102      	bne.n	80079da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80079d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079d8:	e018      	b.n	8007a0c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e2:	041b      	lsls	r3, r3, #16
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f000 fc6c 	bl	80082c4 <SDMMC_CmdSendStatus>
 80079ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	e009      	b.n	8007a0c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2100      	movs	r1, #0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fa0e 	bl	8007e20 <SDIO_GetResponse>
 8007a04:	4602      	mov	r2, r0
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	2300      	movs	r3, #0
 8007a22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2100      	movs	r1, #0
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f9f8 	bl	8007e20 <SDIO_GetResponse>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a3a:	d102      	bne.n	8007a42 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a40:	e02f      	b.n	8007aa2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a42:	f107 030c 	add.w	r3, r7, #12
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f879 	bl	8007b40 <SD_FindSCR>
 8007a4e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	e023      	b.n	8007aa2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01c      	beq.n	8007a9e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6c:	041b      	lsls	r3, r3, #16
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4610      	mov	r0, r2
 8007a72:	f000 fb41 	bl	80080f8 <SDMMC_CmdAppCommand>
 8007a76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	e00f      	b.n	8007aa2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2102      	movs	r1, #2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fb7a 	bl	8008182 <SDMMC_CmdBusWidth>
 8007a8e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	e003      	b.n	8007aa2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	e001      	b.n	8007aa2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2100      	movs	r1, #0
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 f9ad 	bl	8007e20 <SDIO_GetResponse>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ad0:	d102      	bne.n	8007ad8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ad6:	e02f      	b.n	8007b38 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007ad8:	f107 030c 	add.w	r3, r7, #12
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f82e 	bl	8007b40 <SD_FindSCR>
 8007ae4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	e023      	b.n	8007b38 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01c      	beq.n	8007b34 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b02:	041b      	lsls	r3, r3, #16
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f000 faf6 	bl	80080f8 <SDMMC_CmdAppCommand>
 8007b0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	e00f      	b.n	8007b38 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fb2f 	bl	8008182 <SDMMC_CmdBusWidth>
 8007b24:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	e003      	b.n	8007b38 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b30:	2300      	movs	r3, #0
 8007b32:	e001      	b.n	8007b38 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b40:	b590      	push	{r4, r7, lr}
 8007b42:	b08f      	sub	sp, #60	; 0x3c
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b4a:	f7fb fad9 	bl	8003100 <HAL_GetTick>
 8007b4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007b54:	2300      	movs	r3, #0
 8007b56:	60bb      	str	r3, [r7, #8]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2108      	movs	r1, #8
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 f999 	bl	8007e9e <SDMMC_CmdBlockLength>
 8007b6c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	e0b2      	b.n	8007cde <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b80:	041b      	lsls	r3, r3, #16
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f000 fab7 	bl	80080f8 <SDMMC_CmdAppCommand>
 8007b8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	e0a3      	b.n	8007cde <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b96:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007ba0:	2330      	movs	r3, #48	; 0x30
 8007ba2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007bac:	2301      	movs	r3, #1
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f107 0210 	add.w	r2, r7, #16
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 f943 	bl	8007e46 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fafe 	bl	80081c6 <SDMMC_CmdSendSCR>
 8007bca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d02a      	beq.n	8007c28 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	e083      	b.n	8007cde <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00f      	beq.n	8007c04 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6819      	ldr	r1, [r3, #0]
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	f107 0208 	add.w	r2, r7, #8
 8007bf0:	18d4      	adds	r4, r2, r3
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	f000 f8a2 	bl	8007d3c <SDIO_ReadFIFO>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	6023      	str	r3, [r4, #0]
      index++;
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfe:	3301      	adds	r3, #1
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
 8007c02:	e006      	b.n	8007c12 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d012      	beq.n	8007c38 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c12:	f7fb fa75 	bl	8003100 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c20:	d102      	bne.n	8007c28 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c26:	e05a      	b.n	8007cde <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0cf      	beq.n	8007bd6 <SD_FindSCR+0x96>
 8007c36:	e000      	b.n	8007c3a <SD_FindSCR+0xfa>
      break;
 8007c38:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c50:	2308      	movs	r3, #8
 8007c52:	e044      	b.n	8007cde <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2202      	movs	r2, #2
 8007c68:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e037      	b.n	8007cde <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c74:	f003 0320 	and.w	r3, r3, #32
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2220      	movs	r2, #32
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007c84:	2320      	movs	r3, #32
 8007c86:	e02a      	b.n	8007cde <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c90:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	061a      	lsls	r2, r3, #24
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	021b      	lsls	r3, r3, #8
 8007c9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c9e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	0a1b      	lsrs	r3, r3, #8
 8007ca4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007ca8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	0e1b      	lsrs	r3, r3, #24
 8007cae:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb2:	601a      	str	r2, [r3, #0]
    scr++;
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	061a      	lsls	r2, r3, #24
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	021b      	lsls	r3, r3, #8
 8007cc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cc6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	0a1b      	lsrs	r3, r3, #8
 8007ccc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cd0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	0e1b      	lsrs	r3, r3, #24
 8007cd6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	373c      	adds	r7, #60	; 0x3c
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd90      	pop	{r4, r7, pc}

08007ce6 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	f107 001c 	add.w	r0, r7, #28
 8007cf4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007cfc:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007d00:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007d04:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007d08:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007d0c:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007d10:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007d20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	b004      	add	sp, #16
 8007d3a:	4770      	bx	lr

08007d3c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2203      	movs	r2, #3
 8007d84:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007d86:	2002      	movs	r0, #2
 8007d88:	f7fb f9c6 	bl	8003118 <HAL_Delay>
  
  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0303 	and.w	r3, r3, #3
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007dd0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007dd6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007ddc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007dec:	f023 030f 	bic.w	r3, r3, #15
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	b2db      	uxtb	r3, r3
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3314      	adds	r3, #20
 8007e2e:	461a      	mov	r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	4413      	add	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
}  
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e6c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007e72:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007e78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0

}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b088      	sub	sp, #32
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007eac:	2310      	movs	r3, #16
 8007eae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007eb0:	2340      	movs	r3, #64	; 0x40
 8007eb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ebc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ebe:	f107 0308 	add.w	r3, r7, #8
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff ff74 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ece:	2110      	movs	r1, #16
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fa45 	bl	8008360 <SDMMC_GetCmdResp1>
 8007ed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3720      	adds	r7, #32
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b088      	sub	sp, #32
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007ef0:	2311      	movs	r3, #17
 8007ef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ef4:	2340      	movs	r3, #64	; 0x40
 8007ef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f02:	f107 0308 	add.w	r3, r7, #8
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff ff52 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f12:	2111      	movs	r1, #17
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fa23 	bl	8008360 <SDMMC_GetCmdResp1>
 8007f1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3720      	adds	r7, #32
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b088      	sub	sp, #32
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007f34:	2312      	movs	r3, #18
 8007f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f38:	2340      	movs	r3, #64	; 0x40
 8007f3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f46:	f107 0308 	add.w	r3, r7, #8
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff ff30 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f56:	2112      	movs	r1, #18
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fa01 	bl	8008360 <SDMMC_GetCmdResp1>
 8007f5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f60:	69fb      	ldr	r3, [r7, #28]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3720      	adds	r7, #32
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b088      	sub	sp, #32
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007f78:	2318      	movs	r3, #24
 8007f7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f7c:	2340      	movs	r3, #64	; 0x40
 8007f7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f80:	2300      	movs	r3, #0
 8007f82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f8a:	f107 0308 	add.w	r3, r7, #8
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff ff0e 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9a:	2118      	movs	r1, #24
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f9df 	bl	8008360 <SDMMC_GetCmdResp1>
 8007fa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fa4:	69fb      	ldr	r3, [r7, #28]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3720      	adds	r7, #32
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b088      	sub	sp, #32
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007fbc:	2319      	movs	r3, #25
 8007fbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fc0:	2340      	movs	r3, #64	; 0x40
 8007fc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fce:	f107 0308 	add.w	r3, r7, #8
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff feec 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fde:	2119      	movs	r1, #25
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f9bd 	bl	8008360 <SDMMC_GetCmdResp1>
 8007fe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fe8:	69fb      	ldr	r3, [r7, #28]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3720      	adds	r7, #32
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008000:	230c      	movs	r3, #12
 8008002:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008004:	2340      	movs	r3, #64	; 0x40
 8008006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800800c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008010:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008012:	f107 0308 	add.w	r3, r7, #8
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7ff feca 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800801e:	4a05      	ldr	r2, [pc, #20]	; (8008034 <SDMMC_CmdStopTransfer+0x40>)
 8008020:	210c      	movs	r1, #12
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f99c 	bl	8008360 <SDMMC_GetCmdResp1>
 8008028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800802a:	69fb      	ldr	r3, [r7, #28]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3720      	adds	r7, #32
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	05f5e100 	.word	0x05f5e100

08008038 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	; 0x28
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008048:	2307      	movs	r3, #7
 800804a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800804c:	2340      	movs	r3, #64	; 0x40
 800804e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008050:	2300      	movs	r3, #0
 8008052:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008058:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800805a:	f107 0310 	add.w	r3, r7, #16
 800805e:	4619      	mov	r1, r3
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f7ff fea6 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008066:	f241 3288 	movw	r2, #5000	; 0x1388
 800806a:	2107      	movs	r1, #7
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 f977 	bl	8008360 <SDMMC_GetCmdResp1>
 8008072:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008076:	4618      	mov	r0, r3
 8008078:	3728      	adds	r7, #40	; 0x28
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b088      	sub	sp, #32
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800808e:	2300      	movs	r3, #0
 8008090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008092:	2300      	movs	r3, #0
 8008094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800809a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800809c:	f107 0308 	add.w	r3, r7, #8
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff fe85 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f92d 	bl	8008308 <SDMMC_GetCmdError>
 80080ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080b0:	69fb      	ldr	r3, [r7, #28]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b088      	sub	sp, #32
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80080c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80080c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80080c8:	2308      	movs	r3, #8
 80080ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080cc:	2340      	movs	r3, #64	; 0x40
 80080ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080d0:	2300      	movs	r3, #0
 80080d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080da:	f107 0308 	add.w	r3, r7, #8
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff fe66 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fb24 	bl	8008734 <SDMMC_GetCmdResp7>
 80080ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ee:	69fb      	ldr	r3, [r7, #28]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3720      	adds	r7, #32
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b088      	sub	sp, #32
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008106:	2337      	movs	r3, #55	; 0x37
 8008108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800810a:	2340      	movs	r3, #64	; 0x40
 800810c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800810e:	2300      	movs	r3, #0
 8008110:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008116:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008118:	f107 0308 	add.w	r3, r7, #8
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff fe47 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008124:	f241 3288 	movw	r2, #5000	; 0x1388
 8008128:	2137      	movs	r1, #55	; 0x37
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f918 	bl	8008360 <SDMMC_GetCmdResp1>
 8008130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008132:	69fb      	ldr	r3, [r7, #28]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3720      	adds	r7, #32
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800814c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008152:	2329      	movs	r3, #41	; 0x29
 8008154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008156:	2340      	movs	r3, #64	; 0x40
 8008158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800815e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008162:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008164:	f107 0308 	add.w	r3, r7, #8
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff fe21 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fa2b 	bl	80085cc <SDMMC_GetCmdResp3>
 8008176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008178:	69fb      	ldr	r3, [r7, #28]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b088      	sub	sp, #32
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008190:	2306      	movs	r3, #6
 8008192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008194:	2340      	movs	r3, #64	; 0x40
 8008196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008198:	2300      	movs	r3, #0
 800819a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800819c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081a2:	f107 0308 	add.w	r3, r7, #8
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff fe02 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80081ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80081b2:	2106      	movs	r1, #6
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f8d3 	bl	8008360 <SDMMC_GetCmdResp1>
 80081ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081bc:	69fb      	ldr	r3, [r7, #28]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3720      	adds	r7, #32
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b088      	sub	sp, #32
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80081d2:	2333      	movs	r3, #51	; 0x33
 80081d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081d6:	2340      	movs	r3, #64	; 0x40
 80081d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081da:	2300      	movs	r3, #0
 80081dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081e4:	f107 0308 	add.w	r3, r7, #8
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff fde1 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80081f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081f4:	2133      	movs	r1, #51	; 0x33
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f8b2 	bl	8008360 <SDMMC_GetCmdResp1>
 80081fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081fe:	69fb      	ldr	r3, [r7, #28]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3720      	adds	r7, #32
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008214:	2302      	movs	r3, #2
 8008216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008218:	23c0      	movs	r3, #192	; 0xc0
 800821a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800821c:	2300      	movs	r3, #0
 800821e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008224:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008226:	f107 0308 	add.w	r3, r7, #8
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff fdc0 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f982 	bl	800853c <SDMMC_GetCmdResp2>
 8008238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800823a:	69fb      	ldr	r3, [r7, #28]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3720      	adds	r7, #32
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008252:	2309      	movs	r3, #9
 8008254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008256:	23c0      	movs	r3, #192	; 0xc0
 8008258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800825e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008262:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008264:	f107 0308 	add.w	r3, r7, #8
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff fda1 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f963 	bl	800853c <SDMMC_GetCmdResp2>
 8008276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008278:	69fb      	ldr	r3, [r7, #28]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3720      	adds	r7, #32
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b088      	sub	sp, #32
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008290:	2303      	movs	r3, #3
 8008292:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008294:	2340      	movs	r3, #64	; 0x40
 8008296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800829c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082a2:	f107 0308 	add.w	r3, r7, #8
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7ff fd82 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	2103      	movs	r1, #3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f9c8 	bl	8008648 <SDMMC_GetCmdResp6>
 80082b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082ba:	69fb      	ldr	r3, [r7, #28]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3720      	adds	r7, #32
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80082d2:	230d      	movs	r3, #13
 80082d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082d6:	2340      	movs	r3, #64	; 0x40
 80082d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082e4:	f107 0308 	add.w	r3, r7, #8
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7ff fd61 	bl	8007db2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80082f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f4:	210d      	movs	r1, #13
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f832 	bl	8008360 <SDMMC_GetCmdResp1>
 80082fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082fe:	69fb      	ldr	r3, [r7, #28]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3720      	adds	r7, #32
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008310:	4b11      	ldr	r3, [pc, #68]	; (8008358 <SDMMC_GetCmdError+0x50>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a11      	ldr	r2, [pc, #68]	; (800835c <SDMMC_GetCmdError+0x54>)
 8008316:	fba2 2303 	umull	r2, r3, r2, r3
 800831a:	0a5b      	lsrs	r3, r3, #9
 800831c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008320:	fb02 f303 	mul.w	r3, r2, r3
 8008324:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	1e5a      	subs	r2, r3, #1
 800832a:	60fa      	str	r2, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008334:	e009      	b.n	800834a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0f1      	beq.n	8008326 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	22c5      	movs	r2, #197	; 0xc5
 8008346:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000048 	.word	0x20000048
 800835c:	10624dd3 	.word	0x10624dd3

08008360 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	460b      	mov	r3, r1
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800836e:	4b70      	ldr	r3, [pc, #448]	; (8008530 <SDMMC_GetCmdResp1+0x1d0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a70      	ldr	r2, [pc, #448]	; (8008534 <SDMMC_GetCmdResp1+0x1d4>)
 8008374:	fba2 2303 	umull	r2, r3, r2, r3
 8008378:	0a5a      	lsrs	r2, r3, #9
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	fb02 f303 	mul.w	r3, r2, r3
 8008380:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	1e5a      	subs	r2, r3, #1
 8008386:	61fa      	str	r2, [r7, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d102      	bne.n	8008392 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800838c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008390:	e0c9      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008396:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0ef      	beq.n	8008382 <SDMMC_GetCmdResp1+0x22>
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1ea      	bne.n	8008382 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d004      	beq.n	80083c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2204      	movs	r2, #4
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083be:	2304      	movs	r3, #4
 80083c0:	e0b1      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d004      	beq.n	80083d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2201      	movs	r2, #1
 80083d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e0a6      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	22c5      	movs	r2, #197	; 0xc5
 80083dc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff fd11 	bl	8007e06 <SDIO_GetCommandResponse>
 80083e4:	4603      	mov	r3, r0
 80083e6:	461a      	mov	r2, r3
 80083e8:	7afb      	ldrb	r3, [r7, #11]
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d001      	beq.n	80083f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e099      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80083f2:	2100      	movs	r1, #0
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff fd13 	bl	8007e20 <SDIO_GetResponse>
 80083fa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	4b4e      	ldr	r3, [pc, #312]	; (8008538 <SDMMC_GetCmdResp1+0x1d8>)
 8008400:	4013      	ands	r3, r2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008406:	2300      	movs	r3, #0
 8008408:	e08d      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b00      	cmp	r3, #0
 800840e:	da02      	bge.n	8008416 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008414:	e087      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008420:	2340      	movs	r3, #64	; 0x40
 8008422:	e080      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800842e:	2380      	movs	r3, #128	; 0x80
 8008430:	e079      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800843c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008440:	e071      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800844c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008450:	e069      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800845c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008460:	e061      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800846c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008470:	e059      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800847c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008480:	e051      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800848c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008490:	e049      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800849c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084a0:	e041      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80084ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084b0:	e039      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80084bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084c0:	e031      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80084cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80084d0:	e029      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80084dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80084e0:	e021      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80084ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80084f0:	e019      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80084fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008500:	e011      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800850c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008510:	e009      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800851c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008520:	e001      	b.n	8008526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008526:	4618      	mov	r0, r3
 8008528:	3720      	adds	r7, #32
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000048 	.word	0x20000048
 8008534:	10624dd3 	.word	0x10624dd3
 8008538:	fdffe008 	.word	0xfdffe008

0800853c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008544:	4b1f      	ldr	r3, [pc, #124]	; (80085c4 <SDMMC_GetCmdResp2+0x88>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a1f      	ldr	r2, [pc, #124]	; (80085c8 <SDMMC_GetCmdResp2+0x8c>)
 800854a:	fba2 2303 	umull	r2, r3, r2, r3
 800854e:	0a5b      	lsrs	r3, r3, #9
 8008550:	f241 3288 	movw	r2, #5000	; 0x1388
 8008554:	fb02 f303 	mul.w	r3, r2, r3
 8008558:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	1e5a      	subs	r2, r3, #1
 800855e:	60fa      	str	r2, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008568:	e026      	b.n	80085b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008576:	2b00      	cmp	r3, #0
 8008578:	d0ef      	beq.n	800855a <SDMMC_GetCmdResp2+0x1e>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1ea      	bne.n	800855a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d004      	beq.n	800859a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2204      	movs	r2, #4
 8008594:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008596:	2304      	movs	r3, #4
 8008598:	e00e      	b.n	80085b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d004      	beq.n	80085b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e003      	b.n	80085b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	22c5      	movs	r2, #197	; 0xc5
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	20000048 	.word	0x20000048
 80085c8:	10624dd3 	.word	0x10624dd3

080085cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085d4:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <SDMMC_GetCmdResp3+0x74>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1a      	ldr	r2, [pc, #104]	; (8008644 <SDMMC_GetCmdResp3+0x78>)
 80085da:	fba2 2303 	umull	r2, r3, r2, r3
 80085de:	0a5b      	lsrs	r3, r3, #9
 80085e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e4:	fb02 f303 	mul.w	r3, r2, r3
 80085e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	1e5a      	subs	r2, r3, #1
 80085ee:	60fa      	str	r2, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085f8:	e01b      	b.n	8008632 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0ef      	beq.n	80085ea <SDMMC_GetCmdResp3+0x1e>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1ea      	bne.n	80085ea <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2204      	movs	r2, #4
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008626:	2304      	movs	r3, #4
 8008628:	e003      	b.n	8008632 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	22c5      	movs	r2, #197	; 0xc5
 800862e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	20000048 	.word	0x20000048
 8008644:	10624dd3 	.word	0x10624dd3

08008648 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	460b      	mov	r3, r1
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008656:	4b35      	ldr	r3, [pc, #212]	; (800872c <SDMMC_GetCmdResp6+0xe4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a35      	ldr	r2, [pc, #212]	; (8008730 <SDMMC_GetCmdResp6+0xe8>)
 800865c:	fba2 2303 	umull	r2, r3, r2, r3
 8008660:	0a5b      	lsrs	r3, r3, #9
 8008662:	f241 3288 	movw	r2, #5000	; 0x1388
 8008666:	fb02 f303 	mul.w	r3, r2, r3
 800866a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	1e5a      	subs	r2, r3, #1
 8008670:	61fa      	str	r2, [r7, #28]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d102      	bne.n	800867c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008676:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800867a:	e052      	b.n	8008722 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008680:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0ef      	beq.n	800866c <SDMMC_GetCmdResp6+0x24>
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1ea      	bne.n	800866c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d004      	beq.n	80086ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2204      	movs	r2, #4
 80086a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086a8:	2304      	movs	r3, #4
 80086aa:	e03a      	b.n	8008722 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086be:	2301      	movs	r3, #1
 80086c0:	e02f      	b.n	8008722 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f7ff fb9f 	bl	8007e06 <SDIO_GetCommandResponse>
 80086c8:	4603      	mov	r3, r0
 80086ca:	461a      	mov	r2, r3
 80086cc:	7afb      	ldrb	r3, [r7, #11]
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d001      	beq.n	80086d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e025      	b.n	8008722 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	22c5      	movs	r2, #197	; 0xc5
 80086da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80086dc:	2100      	movs	r1, #0
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f7ff fb9e 	bl	8007e20 <SDIO_GetResponse>
 80086e4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d106      	bne.n	80086fe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	0c1b      	lsrs	r3, r3, #16
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80086fa:	2300      	movs	r3, #0
 80086fc:	e011      	b.n	8008722 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800870c:	e009      	b.n	8008722 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800871c:	e001      	b.n	8008722 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800871e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008722:	4618      	mov	r0, r3
 8008724:	3720      	adds	r7, #32
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20000048 	.word	0x20000048
 8008730:	10624dd3 	.word	0x10624dd3

08008734 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800873c:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <SDMMC_GetCmdResp7+0x94>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a22      	ldr	r2, [pc, #136]	; (80087cc <SDMMC_GetCmdResp7+0x98>)
 8008742:	fba2 2303 	umull	r2, r3, r2, r3
 8008746:	0a5b      	lsrs	r3, r3, #9
 8008748:	f241 3288 	movw	r2, #5000	; 0x1388
 800874c:	fb02 f303 	mul.w	r3, r2, r3
 8008750:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	1e5a      	subs	r2, r3, #1
 8008756:	60fa      	str	r2, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d102      	bne.n	8008762 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800875c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008760:	e02c      	b.n	80087bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008766:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0ef      	beq.n	8008752 <SDMMC_GetCmdResp7+0x1e>
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1ea      	bne.n	8008752 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d004      	beq.n	8008792 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2204      	movs	r2, #4
 800878c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800878e:	2304      	movs	r3, #4
 8008790:	e014      	b.n	80087bc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d004      	beq.n	80087a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e009      	b.n	80087bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2240      	movs	r2, #64	; 0x40
 80087b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80087ba:	2300      	movs	r3, #0
  
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	20000048 	.word	0x20000048
 80087cc:	10624dd3 	.word	0x10624dd3

080087d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087d0:	b084      	sub	sp, #16
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	f107 001c 	add.w	r0, r7, #28
 80087de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d122      	bne.n	800882e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80087fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008812:	2b01      	cmp	r3, #1
 8008814:	d105      	bne.n	8008822 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 fac6 	bl	8009db4 <USB_CoreReset>
 8008828:	4603      	mov	r3, r0
 800882a:	73fb      	strb	r3, [r7, #15]
 800882c:	e01a      	b.n	8008864 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f001 faba 	bl	8009db4 <USB_CoreReset>
 8008840:	4603      	mov	r3, r0
 8008842:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	d106      	bne.n	8008858 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	639a      	str	r2, [r3, #56]	; 0x38
 8008856:	e005      	b.n	8008864 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	2b01      	cmp	r3, #1
 8008868:	d10b      	bne.n	8008882 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f043 0206 	orr.w	r2, r3, #6
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f043 0220 	orr.w	r2, r3, #32
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008882:	7bfb      	ldrb	r3, [r7, #15]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800888e:	b004      	add	sp, #16
 8008890:	4770      	bx	lr
	...

08008894 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	4613      	mov	r3, r2
 80088a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d165      	bne.n	8008974 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4a41      	ldr	r2, [pc, #260]	; (80089b0 <USB_SetTurnaroundTime+0x11c>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d906      	bls.n	80088be <USB_SetTurnaroundTime+0x2a>
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	4a40      	ldr	r2, [pc, #256]	; (80089b4 <USB_SetTurnaroundTime+0x120>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d202      	bcs.n	80088be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80088b8:	230f      	movs	r3, #15
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	e062      	b.n	8008984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	4a3c      	ldr	r2, [pc, #240]	; (80089b4 <USB_SetTurnaroundTime+0x120>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d306      	bcc.n	80088d4 <USB_SetTurnaroundTime+0x40>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	4a3b      	ldr	r2, [pc, #236]	; (80089b8 <USB_SetTurnaroundTime+0x124>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d202      	bcs.n	80088d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80088ce:	230e      	movs	r3, #14
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	e057      	b.n	8008984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	4a38      	ldr	r2, [pc, #224]	; (80089b8 <USB_SetTurnaroundTime+0x124>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d306      	bcc.n	80088ea <USB_SetTurnaroundTime+0x56>
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4a37      	ldr	r2, [pc, #220]	; (80089bc <USB_SetTurnaroundTime+0x128>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d202      	bcs.n	80088ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80088e4:	230d      	movs	r3, #13
 80088e6:	617b      	str	r3, [r7, #20]
 80088e8:	e04c      	b.n	8008984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	4a33      	ldr	r2, [pc, #204]	; (80089bc <USB_SetTurnaroundTime+0x128>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d306      	bcc.n	8008900 <USB_SetTurnaroundTime+0x6c>
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	4a32      	ldr	r2, [pc, #200]	; (80089c0 <USB_SetTurnaroundTime+0x12c>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d802      	bhi.n	8008900 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80088fa:	230c      	movs	r3, #12
 80088fc:	617b      	str	r3, [r7, #20]
 80088fe:	e041      	b.n	8008984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4a2f      	ldr	r2, [pc, #188]	; (80089c0 <USB_SetTurnaroundTime+0x12c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d906      	bls.n	8008916 <USB_SetTurnaroundTime+0x82>
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	4a2e      	ldr	r2, [pc, #184]	; (80089c4 <USB_SetTurnaroundTime+0x130>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d802      	bhi.n	8008916 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008910:	230b      	movs	r3, #11
 8008912:	617b      	str	r3, [r7, #20]
 8008914:	e036      	b.n	8008984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	4a2a      	ldr	r2, [pc, #168]	; (80089c4 <USB_SetTurnaroundTime+0x130>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d906      	bls.n	800892c <USB_SetTurnaroundTime+0x98>
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	4a29      	ldr	r2, [pc, #164]	; (80089c8 <USB_SetTurnaroundTime+0x134>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d802      	bhi.n	800892c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008926:	230a      	movs	r3, #10
 8008928:	617b      	str	r3, [r7, #20]
 800892a:	e02b      	b.n	8008984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4a26      	ldr	r2, [pc, #152]	; (80089c8 <USB_SetTurnaroundTime+0x134>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d906      	bls.n	8008942 <USB_SetTurnaroundTime+0xae>
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	4a25      	ldr	r2, [pc, #148]	; (80089cc <USB_SetTurnaroundTime+0x138>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d202      	bcs.n	8008942 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800893c:	2309      	movs	r3, #9
 800893e:	617b      	str	r3, [r7, #20]
 8008940:	e020      	b.n	8008984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	4a21      	ldr	r2, [pc, #132]	; (80089cc <USB_SetTurnaroundTime+0x138>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d306      	bcc.n	8008958 <USB_SetTurnaroundTime+0xc4>
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	4a20      	ldr	r2, [pc, #128]	; (80089d0 <USB_SetTurnaroundTime+0x13c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d802      	bhi.n	8008958 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008952:	2308      	movs	r3, #8
 8008954:	617b      	str	r3, [r7, #20]
 8008956:	e015      	b.n	8008984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4a1d      	ldr	r2, [pc, #116]	; (80089d0 <USB_SetTurnaroundTime+0x13c>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d906      	bls.n	800896e <USB_SetTurnaroundTime+0xda>
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4a1c      	ldr	r2, [pc, #112]	; (80089d4 <USB_SetTurnaroundTime+0x140>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d202      	bcs.n	800896e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008968:	2307      	movs	r3, #7
 800896a:	617b      	str	r3, [r7, #20]
 800896c:	e00a      	b.n	8008984 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800896e:	2306      	movs	r3, #6
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	e007      	b.n	8008984 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008974:	79fb      	ldrb	r3, [r7, #7]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d102      	bne.n	8008980 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800897a:	2309      	movs	r3, #9
 800897c:	617b      	str	r3, [r7, #20]
 800897e:	e001      	b.n	8008984 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008980:	2309      	movs	r3, #9
 8008982:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	68da      	ldr	r2, [r3, #12]
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	029b      	lsls	r3, r3, #10
 8008998:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800899c:	431a      	orrs	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	371c      	adds	r7, #28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	00d8acbf 	.word	0x00d8acbf
 80089b4:	00e4e1c0 	.word	0x00e4e1c0
 80089b8:	00f42400 	.word	0x00f42400
 80089bc:	01067380 	.word	0x01067380
 80089c0:	011a499f 	.word	0x011a499f
 80089c4:	01312cff 	.word	0x01312cff
 80089c8:	014ca43f 	.word	0x014ca43f
 80089cc:	016e3600 	.word	0x016e3600
 80089d0:	01a6ab1f 	.word	0x01a6ab1f
 80089d4:	01e84800 	.word	0x01e84800

080089d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f043 0201 	orr.w	r2, r3, #1
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f023 0201 	bic.w	r2, r3, #1
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d106      	bne.n	8008a48 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60da      	str	r2, [r3, #12]
 8008a46:	e00b      	b.n	8008a60 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d106      	bne.n	8008a5c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60da      	str	r2, [r3, #12]
 8008a5a:	e001      	b.n	8008a60 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e003      	b.n	8008a68 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008a60:	2032      	movs	r0, #50	; 0x32
 8008a62:	f7fa fb59 	bl	8003118 <HAL_Delay>

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a70:	b084      	sub	sp, #16
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b086      	sub	sp, #24
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	613b      	str	r3, [r7, #16]
 8008a8e:	e009      	b.n	8008aa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	3340      	adds	r3, #64	; 0x40
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	613b      	str	r3, [r7, #16]
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2b0e      	cmp	r3, #14
 8008aa8:	d9f2      	bls.n	8008a90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d11c      	bne.n	8008aea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008abe:	f043 0302 	orr.w	r3, r3, #2
 8008ac2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	639a      	str	r2, [r3, #56]	; 0x38
 8008ae8:	e00b      	b.n	8008b02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b08:	461a      	mov	r2, r3
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b14:	4619      	mov	r1, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	680b      	ldr	r3, [r1, #0]
 8008b20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d10c      	bne.n	8008b42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d104      	bne.n	8008b38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b2e:	2100      	movs	r1, #0
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f949 	bl	8008dc8 <USB_SetDevSpeed>
 8008b36:	e008      	b.n	8008b4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b38:	2101      	movs	r1, #1
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f944 	bl	8008dc8 <USB_SetDevSpeed>
 8008b40:	e003      	b.n	8008b4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b42:	2103      	movs	r1, #3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f93f 	bl	8008dc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b4a:	2110      	movs	r1, #16
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f8f3 	bl	8008d38 <USB_FlushTxFifo>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f911 	bl	8008d84 <USB_FlushRxFifo>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b72:	461a      	mov	r2, r3
 8008b74:	2300      	movs	r3, #0
 8008b76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7e:	461a      	mov	r2, r3
 8008b80:	2300      	movs	r3, #0
 8008b82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b90:	2300      	movs	r3, #0
 8008b92:	613b      	str	r3, [r7, #16]
 8008b94:	e043      	b.n	8008c1e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bac:	d118      	bne.n	8008be0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10a      	bne.n	8008bca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	e013      	b.n	8008bf2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	e008      	b.n	8008bf2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bec:	461a      	mov	r2, r3
 8008bee:	2300      	movs	r3, #0
 8008bf0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfe:	461a      	mov	r2, r3
 8008c00:	2300      	movs	r3, #0
 8008c02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c10:	461a      	mov	r2, r3
 8008c12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	613b      	str	r3, [r7, #16]
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d3b7      	bcc.n	8008b96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c26:	2300      	movs	r3, #0
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	e043      	b.n	8008cb4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c42:	d118      	bne.n	8008c76 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10a      	bne.n	8008c60 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c56:	461a      	mov	r2, r3
 8008c58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	e013      	b.n	8008c88 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	e008      	b.n	8008c88 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c82:	461a      	mov	r2, r3
 8008c84:	2300      	movs	r3, #0
 8008c86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c94:	461a      	mov	r2, r3
 8008c96:	2300      	movs	r3, #0
 8008c98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	613b      	str	r3, [r7, #16]
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d3b7      	bcc.n	8008c2c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008cdc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d105      	bne.n	8008cf0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	f043 0210 	orr.w	r2, r3, #16
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	699a      	ldr	r2, [r3, #24]
 8008cf4:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <USB_DevInit+0x2c4>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	f043 0208 	orr.w	r2, r3, #8
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d107      	bne.n	8008d24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d1c:	f043 0304 	orr.w	r3, r3, #4
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d30:	b004      	add	sp, #16
 8008d32:	4770      	bx	lr
 8008d34:	803c3800 	.word	0x803c3800

08008d38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	019b      	lsls	r3, r3, #6
 8008d4a:	f043 0220 	orr.w	r2, r3, #32
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3301      	adds	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4a09      	ldr	r2, [pc, #36]	; (8008d80 <USB_FlushTxFifo+0x48>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d901      	bls.n	8008d64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e006      	b.n	8008d72 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	f003 0320 	and.w	r3, r3, #32
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	d0f0      	beq.n	8008d52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	00030d40 	.word	0x00030d40

08008d84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2210      	movs	r2, #16
 8008d94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4a09      	ldr	r2, [pc, #36]	; (8008dc4 <USB_FlushRxFifo+0x40>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d901      	bls.n	8008da8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e006      	b.n	8008db6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d0f0      	beq.n	8008d96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	00030d40 	.word	0x00030d40

08008dc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008de8:	4313      	orrs	r3, r2
 8008dea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b087      	sub	sp, #28
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 0306 	and.w	r3, r3, #6
 8008e12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75fb      	strb	r3, [r7, #23]
 8008e1e:	e00a      	b.n	8008e36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d002      	beq.n	8008e2c <USB_GetDevSpeed+0x32>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b06      	cmp	r3, #6
 8008e2a:	d102      	bne.n	8008e32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	75fb      	strb	r3, [r7, #23]
 8008e30:	e001      	b.n	8008e36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008e32:	230f      	movs	r3, #15
 8008e34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	371c      	adds	r7, #28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	785b      	ldrb	r3, [r3, #1]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d13a      	bne.n	8008ed6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e66:	69da      	ldr	r2, [r3, #28]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	f003 030f 	and.w	r3, r3, #15
 8008e70:	2101      	movs	r1, #1
 8008e72:	fa01 f303 	lsl.w	r3, r1, r3
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	68f9      	ldr	r1, [r7, #12]
 8008e7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d155      	bne.n	8008f44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	78db      	ldrb	r3, [r3, #3]
 8008eb2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008eb4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	059b      	lsls	r3, r3, #22
 8008eba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	0151      	lsls	r1, r2, #5
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	440a      	add	r2, r1
 8008ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	e036      	b.n	8008f44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008edc:	69da      	ldr	r2, [r3, #28]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	f003 030f 	and.w	r3, r3, #15
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8008eec:	041b      	lsls	r3, r3, #16
 8008eee:	68f9      	ldr	r1, [r7, #12]
 8008ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d11a      	bne.n	8008f44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	78db      	ldrb	r3, [r3, #3]
 8008f28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f2a:	430b      	orrs	r3, r1
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	0151      	lsls	r1, r2, #5
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	440a      	add	r2, r1
 8008f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
	...

08008f54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	785b      	ldrb	r3, [r3, #1]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d161      	bne.n	8009034 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f86:	d11f      	bne.n	8008fc8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	0151      	lsls	r1, r2, #5
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	440a      	add	r2, r1
 8008f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fa6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	0151      	lsls	r1, r2, #5
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	440a      	add	r2, r1
 8008fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	f003 030f 	and.w	r3, r3, #15
 8008fd8:	2101      	movs	r1, #1
 8008fda:	fa01 f303 	lsl.w	r3, r1, r3
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	43db      	mvns	r3, r3
 8008fe2:	68f9      	ldr	r1, [r7, #12]
 8008fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fe8:	4013      	ands	r3, r2
 8008fea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	f003 030f 	and.w	r3, r3, #15
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8009002:	b29b      	uxth	r3, r3
 8009004:	43db      	mvns	r3, r3
 8009006:	68f9      	ldr	r1, [r7, #12]
 8009008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800900c:	4013      	ands	r3, r2
 800900e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4413      	add	r3, r2
 8009018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	0159      	lsls	r1, r3, #5
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	440b      	add	r3, r1
 8009026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800902a:	4619      	mov	r1, r3
 800902c:	4b35      	ldr	r3, [pc, #212]	; (8009104 <USB_DeactivateEndpoint+0x1b0>)
 800902e:	4013      	ands	r3, r2
 8009030:	600b      	str	r3, [r1, #0]
 8009032:	e060      	b.n	80090f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800904a:	d11f      	bne.n	800908c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	0151      	lsls	r1, r2, #5
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	440a      	add	r2, r1
 8009062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009066:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800906a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	0151      	lsls	r1, r2, #5
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	440a      	add	r2, r1
 8009082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009086:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800908a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	2101      	movs	r1, #1
 800909e:	fa01 f303 	lsl.w	r3, r1, r3
 80090a2:	041b      	lsls	r3, r3, #16
 80090a4:	43db      	mvns	r3, r3
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090ac:	4013      	ands	r3, r2
 80090ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b6:	69da      	ldr	r2, [r3, #28]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	f003 030f 	and.w	r3, r3, #15
 80090c0:	2101      	movs	r1, #1
 80090c2:	fa01 f303 	lsl.w	r3, r1, r3
 80090c6:	041b      	lsls	r3, r3, #16
 80090c8:	43db      	mvns	r3, r3
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090d0:	4013      	ands	r3, r2
 80090d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	0159      	lsls	r1, r3, #5
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	440b      	add	r3, r1
 80090ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ee:	4619      	mov	r1, r3
 80090f0:	4b05      	ldr	r3, [pc, #20]	; (8009108 <USB_DeactivateEndpoint+0x1b4>)
 80090f2:	4013      	ands	r3, r2
 80090f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	ec337800 	.word	0xec337800
 8009108:	eff37800 	.word	0xeff37800

0800910c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08a      	sub	sp, #40	; 0x28
 8009110:	af02      	add	r7, sp, #8
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	4613      	mov	r3, r2
 8009118:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	785b      	ldrb	r3, [r3, #1]
 8009128:	2b01      	cmp	r3, #1
 800912a:	f040 815c 	bne.w	80093e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d132      	bne.n	800919c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	0151      	lsls	r1, r2, #5
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	440a      	add	r2, r1
 800914c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009158:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	69ba      	ldr	r2, [r7, #24]
 800916a:	0151      	lsls	r1, r2, #5
 800916c:	69fa      	ldr	r2, [r7, #28]
 800916e:	440a      	add	r2, r1
 8009170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009178:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	69ba      	ldr	r2, [r7, #24]
 800918a:	0151      	lsls	r1, r2, #5
 800918c:	69fa      	ldr	r2, [r7, #28]
 800918e:	440a      	add	r2, r1
 8009190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009194:	0cdb      	lsrs	r3, r3, #19
 8009196:	04db      	lsls	r3, r3, #19
 8009198:	6113      	str	r3, [r2, #16]
 800919a:	e074      	b.n	8009286 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	0151      	lsls	r1, r2, #5
 80091ae:	69fa      	ldr	r2, [r7, #28]
 80091b0:	440a      	add	r2, r1
 80091b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b6:	0cdb      	lsrs	r3, r3, #19
 80091b8:	04db      	lsls	r3, r3, #19
 80091ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	0151      	lsls	r1, r2, #5
 80091ce:	69fa      	ldr	r2, [r7, #28]
 80091d0:	440a      	add	r2, r1
 80091d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ec:	691a      	ldr	r2, [r3, #16]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	6959      	ldr	r1, [r3, #20]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	440b      	add	r3, r1
 80091f8:	1e59      	subs	r1, r3, #1
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8009202:	04d9      	lsls	r1, r3, #19
 8009204:	4b9d      	ldr	r3, [pc, #628]	; (800947c <USB_EPStartXfer+0x370>)
 8009206:	400b      	ands	r3, r1
 8009208:	69b9      	ldr	r1, [r7, #24]
 800920a:	0148      	lsls	r0, r1, #5
 800920c:	69f9      	ldr	r1, [r7, #28]
 800920e:	4401      	add	r1, r0
 8009210:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009214:	4313      	orrs	r3, r2
 8009216:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009224:	691a      	ldr	r2, [r3, #16]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800922e:	69b9      	ldr	r1, [r7, #24]
 8009230:	0148      	lsls	r0, r1, #5
 8009232:	69f9      	ldr	r1, [r7, #28]
 8009234:	4401      	add	r1, r0
 8009236:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800923a:	4313      	orrs	r3, r2
 800923c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	78db      	ldrb	r3, [r3, #3]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d11f      	bne.n	8009286 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	69ba      	ldr	r2, [r7, #24]
 8009256:	0151      	lsls	r1, r2, #5
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	440a      	add	r2, r1
 800925c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009260:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009264:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	69fa      	ldr	r2, [r7, #28]
 800927a:	440a      	add	r2, r1
 800927c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009280:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009284:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009286:	79fb      	ldrb	r3, [r7, #7]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d14b      	bne.n	8009324 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d009      	beq.n	80092a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a0:	461a      	mov	r2, r3
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	78db      	ldrb	r3, [r3, #3]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d128      	bne.n	8009302 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d110      	bne.n	80092e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	0151      	lsls	r1, r2, #5
 80092d2:	69fa      	ldr	r2, [r7, #28]
 80092d4:	440a      	add	r2, r1
 80092d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092de:	6013      	str	r3, [r2, #0]
 80092e0:	e00f      	b.n	8009302 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	69fa      	ldr	r2, [r7, #28]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009300:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	015a      	lsls	r2, r3, #5
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	4413      	add	r3, r2
 800930a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	69ba      	ldr	r2, [r7, #24]
 8009312:	0151      	lsls	r1, r2, #5
 8009314:	69fa      	ldr	r2, [r7, #28]
 8009316:	440a      	add	r2, r1
 8009318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800931c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	e12f      	b.n	8009584 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	69fa      	ldr	r2, [r7, #28]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009342:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	78db      	ldrb	r3, [r3, #3]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d015      	beq.n	8009378 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 8117 	beq.w	8009584 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	f003 030f 	and.w	r3, r3, #15
 8009366:	2101      	movs	r1, #1
 8009368:	fa01 f303 	lsl.w	r3, r1, r3
 800936c:	69f9      	ldr	r1, [r7, #28]
 800936e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009372:	4313      	orrs	r3, r2
 8009374:	634b      	str	r3, [r1, #52]	; 0x34
 8009376:	e105      	b.n	8009584 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009384:	2b00      	cmp	r3, #0
 8009386:	d110      	bne.n	80093aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	0151      	lsls	r1, r2, #5
 800939a:	69fa      	ldr	r2, [r7, #28]
 800939c:	440a      	add	r2, r1
 800939e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	e00f      	b.n	80093ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	0151      	lsls	r1, r2, #5
 80093bc:	69fa      	ldr	r2, [r7, #28]
 80093be:	440a      	add	r2, r1
 80093c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	68d9      	ldr	r1, [r3, #12]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	781a      	ldrb	r2, [r3, #0]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	b298      	uxth	r0, r3
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	4603      	mov	r3, r0
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 fa2b 	bl	800983a <USB_WritePacket>
 80093e4:	e0ce      	b.n	8009584 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	69ba      	ldr	r2, [r7, #24]
 80093f6:	0151      	lsls	r1, r2, #5
 80093f8:	69fa      	ldr	r2, [r7, #28]
 80093fa:	440a      	add	r2, r1
 80093fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009400:	0cdb      	lsrs	r3, r3, #19
 8009402:	04db      	lsls	r3, r3, #19
 8009404:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	0151      	lsls	r1, r2, #5
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	440a      	add	r2, r1
 800941c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009428:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d126      	bne.n	8009480 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009448:	69b9      	ldr	r1, [r7, #24]
 800944a:	0148      	lsls	r0, r1, #5
 800944c:	69f9      	ldr	r1, [r7, #28]
 800944e:	4401      	add	r1, r0
 8009450:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009454:	4313      	orrs	r3, r2
 8009456:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	0151      	lsls	r1, r2, #5
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	440a      	add	r2, r1
 800946e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009476:	6113      	str	r3, [r2, #16]
 8009478:	e036      	b.n	80094e8 <USB_EPStartXfer+0x3dc>
 800947a:	bf00      	nop
 800947c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	695a      	ldr	r2, [r3, #20]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	4413      	add	r3, r2
 800948a:	1e5a      	subs	r2, r3, #1
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	fbb2 f3f3 	udiv	r3, r2, r3
 8009494:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a2:	691a      	ldr	r2, [r3, #16]
 80094a4:	8afb      	ldrh	r3, [r7, #22]
 80094a6:	04d9      	lsls	r1, r3, #19
 80094a8:	4b39      	ldr	r3, [pc, #228]	; (8009590 <USB_EPStartXfer+0x484>)
 80094aa:	400b      	ands	r3, r1
 80094ac:	69b9      	ldr	r1, [r7, #24]
 80094ae:	0148      	lsls	r0, r1, #5
 80094b0:	69f9      	ldr	r1, [r7, #28]
 80094b2:	4401      	add	r1, r0
 80094b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094b8:	4313      	orrs	r3, r2
 80094ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c8:	691a      	ldr	r2, [r3, #16]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	8af9      	ldrh	r1, [r7, #22]
 80094d0:	fb01 f303 	mul.w	r3, r1, r3
 80094d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094d8:	69b9      	ldr	r1, [r7, #24]
 80094da:	0148      	lsls	r0, r1, #5
 80094dc:	69f9      	ldr	r1, [r7, #28]
 80094de:	4401      	add	r1, r0
 80094e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094e4:	4313      	orrs	r3, r2
 80094e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d10d      	bne.n	800950a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d009      	beq.n	800950a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	68d9      	ldr	r1, [r3, #12]
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	015a      	lsls	r2, r3, #5
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	4413      	add	r3, r2
 8009502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009506:	460a      	mov	r2, r1
 8009508:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	78db      	ldrb	r3, [r3, #3]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d128      	bne.n	8009564 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951e:	2b00      	cmp	r3, #0
 8009520:	d110      	bne.n	8009544 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	0151      	lsls	r1, r2, #5
 8009534:	69fa      	ldr	r2, [r7, #28]
 8009536:	440a      	add	r2, r1
 8009538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800953c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009540:	6013      	str	r3, [r2, #0]
 8009542:	e00f      	b.n	8009564 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	0151      	lsls	r1, r2, #5
 8009556:	69fa      	ldr	r2, [r7, #28]
 8009558:	440a      	add	r2, r1
 800955a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800955e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009562:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	69ba      	ldr	r2, [r7, #24]
 8009574:	0151      	lsls	r1, r2, #5
 8009576:	69fa      	ldr	r2, [r7, #28]
 8009578:	440a      	add	r2, r1
 800957a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800957e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009582:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3720      	adds	r7, #32
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	1ff80000 	.word	0x1ff80000

08009594 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	4613      	mov	r3, r2
 80095a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	785b      	ldrb	r3, [r3, #1]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	f040 80cd 	bne.w	8009750 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d132      	bne.n	8009624 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	0151      	lsls	r1, r2, #5
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	440a      	add	r2, r1
 80095d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	0151      	lsls	r1, r2, #5
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	440a      	add	r2, r1
 80095f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	4413      	add	r3, r2
 800960a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	0151      	lsls	r1, r2, #5
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	440a      	add	r2, r1
 8009618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800961c:	0cdb      	lsrs	r3, r3, #19
 800961e:	04db      	lsls	r3, r3, #19
 8009620:	6113      	str	r3, [r2, #16]
 8009622:	e04e      	b.n	80096c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	0151      	lsls	r1, r2, #5
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	440a      	add	r2, r1
 800963a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800963e:	0cdb      	lsrs	r3, r3, #19
 8009640:	04db      	lsls	r3, r3, #19
 8009642:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	0151      	lsls	r1, r2, #5
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	440a      	add	r2, r1
 800965a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800965e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009662:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009666:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	695a      	ldr	r2, [r3, #20]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	429a      	cmp	r2, r3
 8009672:	d903      	bls.n	800967c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	689a      	ldr	r2, [r3, #8]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	0151      	lsls	r1, r2, #5
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	440a      	add	r2, r1
 8009692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800969a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a8:	691a      	ldr	r2, [r3, #16]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096b2:	6939      	ldr	r1, [r7, #16]
 80096b4:	0148      	lsls	r0, r1, #5
 80096b6:	6979      	ldr	r1, [r7, #20]
 80096b8:	4401      	add	r1, r0
 80096ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80096be:	4313      	orrs	r3, r2
 80096c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d11e      	bne.n	8009706 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d009      	beq.n	80096e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096dc:	461a      	mov	r2, r3
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	0151      	lsls	r1, r2, #5
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	440a      	add	r2, r1
 80096fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	e092      	b.n	800982c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	0151      	lsls	r1, r2, #5
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	440a      	add	r2, r1
 800971c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009720:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009724:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d07e      	beq.n	800982c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f003 030f 	and.w	r3, r3, #15
 800973e:	2101      	movs	r1, #1
 8009740:	fa01 f303 	lsl.w	r3, r1, r3
 8009744:	6979      	ldr	r1, [r7, #20]
 8009746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800974a:	4313      	orrs	r3, r2
 800974c:	634b      	str	r3, [r1, #52]	; 0x34
 800974e:	e06d      	b.n	800982c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	0151      	lsls	r1, r2, #5
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	440a      	add	r2, r1
 8009766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800976a:	0cdb      	lsrs	r3, r3, #19
 800976c:	04db      	lsls	r3, r3, #19
 800976e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	0151      	lsls	r1, r2, #5
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	440a      	add	r2, r1
 8009786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800978a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800978e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009792:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	0151      	lsls	r1, r2, #5
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	440a      	add	r2, r1
 80097ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d0:	691a      	ldr	r2, [r3, #16]
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097da:	6939      	ldr	r1, [r7, #16]
 80097dc:	0148      	lsls	r0, r1, #5
 80097de:	6979      	ldr	r1, [r7, #20]
 80097e0:	4401      	add	r1, r0
 80097e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097e6:	4313      	orrs	r3, r2
 80097e8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d10d      	bne.n	800980c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d009      	beq.n	800980c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	68d9      	ldr	r1, [r3, #12]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009808:	460a      	mov	r2, r1
 800980a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	0151      	lsls	r1, r2, #5
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	440a      	add	r2, r1
 8009822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009826:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800982a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800983a:	b480      	push	{r7}
 800983c:	b089      	sub	sp, #36	; 0x24
 800983e:	af00      	add	r7, sp, #0
 8009840:	60f8      	str	r0, [r7, #12]
 8009842:	60b9      	str	r1, [r7, #8]
 8009844:	4611      	mov	r1, r2
 8009846:	461a      	mov	r2, r3
 8009848:	460b      	mov	r3, r1
 800984a:	71fb      	strb	r3, [r7, #7]
 800984c:	4613      	mov	r3, r2
 800984e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009858:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800985c:	2b00      	cmp	r3, #0
 800985e:	d11a      	bne.n	8009896 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009860:	88bb      	ldrh	r3, [r7, #4]
 8009862:	3303      	adds	r3, #3
 8009864:	089b      	lsrs	r3, r3, #2
 8009866:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009868:	2300      	movs	r3, #0
 800986a:	61bb      	str	r3, [r7, #24]
 800986c:	e00f      	b.n	800988e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800986e:	79fb      	ldrb	r3, [r7, #7]
 8009870:	031a      	lsls	r2, r3, #12
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	4413      	add	r3, r2
 8009876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800987a:	461a      	mov	r2, r3
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	3304      	adds	r3, #4
 8009886:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	3301      	adds	r3, #1
 800988c:	61bb      	str	r3, [r7, #24]
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	429a      	cmp	r2, r3
 8009894:	d3eb      	bcc.n	800986e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3724      	adds	r7, #36	; 0x24
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b089      	sub	sp, #36	; 0x24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80098ba:	88fb      	ldrh	r3, [r7, #6]
 80098bc:	3303      	adds	r3, #3
 80098be:	089b      	lsrs	r3, r3, #2
 80098c0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80098c2:	2300      	movs	r3, #0
 80098c4:	61bb      	str	r3, [r7, #24]
 80098c6:	e00b      	b.n	80098e0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	3304      	adds	r3, #4
 80098d8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	3301      	adds	r3, #1
 80098de:	61bb      	str	r3, [r7, #24]
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d3ef      	bcc.n	80098c8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80098e8:	69fb      	ldr	r3, [r7, #28]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3724      	adds	r7, #36	; 0x24
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b085      	sub	sp, #20
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d12c      	bne.n	800996c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	db12      	blt.n	800994a <USB_EPSetStall+0x54>
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00f      	beq.n	800994a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	0151      	lsls	r1, r2, #5
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	440a      	add	r2, r1
 8009940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009944:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009948:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	440a      	add	r2, r1
 8009960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	e02b      	b.n	80099c4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	db12      	blt.n	80099a4 <USB_EPSetStall+0xae>
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00f      	beq.n	80099a4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	0151      	lsls	r1, r2, #5
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	440a      	add	r2, r1
 800999a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800999e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099a2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	0151      	lsls	r1, r2, #5
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	440a      	add	r2, r1
 80099ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	785b      	ldrb	r3, [r3, #1]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d128      	bne.n	8009a40 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	0151      	lsls	r1, r2, #5
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	440a      	add	r2, r1
 8009a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	78db      	ldrb	r3, [r3, #3]
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d003      	beq.n	8009a1e <USB_EPClearStall+0x4c>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	78db      	ldrb	r3, [r3, #3]
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d138      	bne.n	8009a90 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	0151      	lsls	r1, r2, #5
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	440a      	add	r2, r1
 8009a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	e027      	b.n	8009a90 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	78db      	ldrb	r3, [r3, #3]
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d003      	beq.n	8009a70 <USB_EPClearStall+0x9e>
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	78db      	ldrb	r3, [r3, #3]
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d10f      	bne.n	8009a90 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	0151      	lsls	r1, r2, #5
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	440a      	add	r2, r1
 8009a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a8e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b085      	sub	sp, #20
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009abc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009ac0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	78fb      	ldrb	r3, [r7, #3]
 8009acc:	011b      	lsls	r3, r3, #4
 8009ace:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009ad2:	68f9      	ldr	r1, [r7, #12]
 8009ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b085      	sub	sp, #20
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b04:	f023 0303 	bic.w	r3, r3, #3
 8009b08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b18:	f023 0302 	bic.w	r3, r3, #2
 8009b1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b46:	f023 0303 	bic.w	r3, r3, #3
 8009b4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b5a:	f043 0302 	orr.w	r3, r3, #2
 8009b5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b085      	sub	sp, #20
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	4013      	ands	r3, r2
 8009b84:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009b86:	68fb      	ldr	r3, [r7, #12]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	0c1b      	lsrs	r3, r3, #16
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	4013      	ands	r3, r2
 8009bea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	b29b      	uxth	r3, r3
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	460b      	mov	r3, r1
 8009c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	4013      	ands	r3, r2
 8009c28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009c5c:	78fb      	ldrb	r3, [r7, #3]
 8009c5e:	f003 030f 	and.w	r3, r3, #15
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	fa22 f303 	lsr.w	r3, r2, r3
 8009c68:	01db      	lsls	r3, r3, #7
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009c72:	78fb      	ldrb	r3, [r7, #3]
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4013      	ands	r3, r2
 8009c84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c86:	68bb      	ldr	r3, [r7, #8]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	371c      	adds	r7, #28
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	695b      	ldr	r3, [r3, #20]
 8009ca0:	f003 0301 	and.w	r3, r3, #1
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009cce:	f023 0307 	bic.w	r3, r3, #7
 8009cd2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ce6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
	...

08009cf8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	460b      	mov	r3, r1
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	333c      	adds	r3, #60	; 0x3c
 8009d0e:	3304      	adds	r3, #4
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	4a26      	ldr	r2, [pc, #152]	; (8009db0 <USB_EP0_OutStart+0xb8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d90a      	bls.n	8009d32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d2c:	d101      	bne.n	8009d32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e037      	b.n	8009da2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d38:	461a      	mov	r2, r3
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d60:	f043 0318 	orr.w	r3, r3, #24
 8009d64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009d78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009d7a:	7afb      	ldrb	r3, [r7, #11]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d10f      	bne.n	8009da0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d86:	461a      	mov	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009d9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	371c      	adds	r7, #28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	4f54300a 	.word	0x4f54300a

08009db4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	4a13      	ldr	r2, [pc, #76]	; (8009e18 <USB_CoreReset+0x64>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d901      	bls.n	8009dd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	e01b      	b.n	8009e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	daf2      	bge.n	8009dc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	f043 0201 	orr.w	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3301      	adds	r3, #1
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4a09      	ldr	r2, [pc, #36]	; (8009e18 <USB_CoreReset+0x64>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d901      	bls.n	8009dfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	e006      	b.n	8009e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d0f0      	beq.n	8009dea <USB_CoreReset+0x36>

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	00030d40 	.word	0x00030d40

08009e1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009e20:	4904      	ldr	r1, [pc, #16]	; (8009e34 <MX_FATFS_Init+0x18>)
 8009e22:	4805      	ldr	r0, [pc, #20]	; (8009e38 <MX_FATFS_Init+0x1c>)
 8009e24:	f004 fd00 	bl	800e828 <FATFS_LinkDriver>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	4b03      	ldr	r3, [pc, #12]	; (8009e3c <MX_FATFS_Init+0x20>)
 8009e2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009e30:	bf00      	nop
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	20002788 	.word	0x20002788
 8009e38:	08014ef8 	.word	0x08014ef8
 8009e3c:	20002784 	.word	0x20002784

08009e40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009e40:	b480      	push	{r7}
 8009e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009e44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009e5a:	f000 f879 	bl	8009f50 <BSP_SD_IsDetected>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d001      	beq.n	8009e68 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e012      	b.n	8009e8e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009e68:	480b      	ldr	r0, [pc, #44]	; (8009e98 <BSP_SD_Init+0x48>)
 8009e6a:	f7fc fdb4 	bl	80069d6 <HAL_SD_Init>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d109      	bne.n	8009e8c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009e7c:	4806      	ldr	r0, [pc, #24]	; (8009e98 <BSP_SD_Init+0x48>)
 8009e7e:	f7fd fb8d 	bl	800759c <HAL_SD_ConfigWideBusOperation>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	200026fc 	.word	0x200026fc

08009e9c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	68f9      	ldr	r1, [r7, #12]
 8009eb8:	4806      	ldr	r0, [pc, #24]	; (8009ed4 <BSP_SD_ReadBlocks+0x38>)
 8009eba:	f7fc fe3b 	bl	8006b34 <HAL_SD_ReadBlocks>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	200026fc 	.word	0x200026fc

08009ed8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
 8009ee4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	68f9      	ldr	r1, [r7, #12]
 8009ef4:	4806      	ldr	r0, [pc, #24]	; (8009f10 <BSP_SD_WriteBlocks+0x38>)
 8009ef6:	f7fc fffb 	bl	8006ef0 <HAL_SD_WriteBlocks>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	200026fc 	.word	0x200026fc

08009f14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009f18:	4805      	ldr	r0, [pc, #20]	; (8009f30 <BSP_SD_GetCardState+0x1c>)
 8009f1a:	f7fd fbd9 	bl	80076d0 <HAL_SD_GetCardState>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	bf14      	ite	ne
 8009f24:	2301      	movne	r3, #1
 8009f26:	2300      	moveq	r3, #0
 8009f28:	b2db      	uxtb	r3, r3
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	200026fc 	.word	0x200026fc

08009f34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	4803      	ldr	r0, [pc, #12]	; (8009f4c <BSP_SD_GetCardInfo+0x18>)
 8009f40:	f7fd fb00 	bl	8007544 <HAL_SD_GetCardInfo>
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	200026fc 	.word	0x200026fc

08009f50 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009f56:	2301      	movs	r3, #1
 8009f58:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009f5a:	f000 f80b 	bl	8009f74 <BSP_PlatformIsDetected>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009f64:	2300      	movs	r3, #0
 8009f66:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	b2db      	uxtb	r3, r3
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009f7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f82:	4807      	ldr	r0, [pc, #28]	; (8009fa0 <BSP_PlatformIsDetected+0x2c>)
 8009f84:	f7f9 ff74 	bl	8003e70 <HAL_GPIO_ReadPin>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
 8009f92:	2301      	movs	r3, #1
 8009f94:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */
    return status;
 8009f96:	79fb      	ldrb	r3, [r7, #7]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	40020800 	.word	0x40020800

08009fa4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	4603      	mov	r3, r0
 8009fac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009fae:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <SD_CheckStatus+0x38>)
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009fb4:	f7ff ffae 	bl	8009f14 <BSP_SD_GetCardState>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d107      	bne.n	8009fce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009fbe:	4b07      	ldr	r3, [pc, #28]	; (8009fdc <SD_CheckStatus+0x38>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f023 0301 	bic.w	r3, r3, #1
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	4b04      	ldr	r3, [pc, #16]	; (8009fdc <SD_CheckStatus+0x38>)
 8009fcc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009fce:	4b03      	ldr	r3, [pc, #12]	; (8009fdc <SD_CheckStatus+0x38>)
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	b2db      	uxtb	r3, r3
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	20000051 	.word	0x20000051

08009fe0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009fea:	4b0b      	ldr	r3, [pc, #44]	; (800a018 <SD_initialize+0x38>)
 8009fec:	2201      	movs	r2, #1
 8009fee:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009ff0:	f7ff ff2e 	bl	8009e50 <BSP_SD_Init>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d107      	bne.n	800a00a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff ffd1 	bl	8009fa4 <SD_CheckStatus>
 800a002:	4603      	mov	r3, r0
 800a004:	461a      	mov	r2, r3
 800a006:	4b04      	ldr	r3, [pc, #16]	; (800a018 <SD_initialize+0x38>)
 800a008:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a00a:	4b03      	ldr	r3, [pc, #12]	; (800a018 <SD_initialize+0x38>)
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	b2db      	uxtb	r3, r3
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	20000051 	.word	0x20000051

0800a01c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	4603      	mov	r3, r0
 800a024:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	4618      	mov	r0, r3
 800a02a:	f7ff ffbb 	bl	8009fa4 <SD_CheckStatus>
 800a02e:	4603      	mov	r3, r0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	607a      	str	r2, [r7, #4]
 800a042:	603b      	str	r3, [r7, #0]
 800a044:	4603      	mov	r3, r0
 800a046:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a04c:	f04f 33ff 	mov.w	r3, #4294967295
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	68b8      	ldr	r0, [r7, #8]
 800a056:	f7ff ff21 	bl	8009e9c <BSP_SD_ReadBlocks>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d107      	bne.n	800a070 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a060:	bf00      	nop
 800a062:	f7ff ff57 	bl	8009f14 <BSP_SD_GetCardState>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1fa      	bne.n	800a062 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b086      	sub	sp, #24
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	603b      	str	r3, [r7, #0]
 800a086:	4603      	mov	r3, r0
 800a088:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a08e:	f04f 33ff 	mov.w	r3, #4294967295
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	68b8      	ldr	r0, [r7, #8]
 800a098:	f7ff ff1e 	bl	8009ed8 <BSP_SD_WriteBlocks>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d107      	bne.n	800a0b2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a0a2:	bf00      	nop
 800a0a4:	f7ff ff36 	bl	8009f14 <BSP_SD_GetCardState>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1fa      	bne.n	800a0a4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a0b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3718      	adds	r7, #24
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b08c      	sub	sp, #48	; 0x30
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	603a      	str	r2, [r7, #0]
 800a0c6:	71fb      	strb	r3, [r7, #7]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a0d2:	4b25      	ldr	r3, [pc, #148]	; (800a168 <SD_ioctl+0xac>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <SD_ioctl+0x28>
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e03c      	b.n	800a15e <SD_ioctl+0xa2>

  switch (cmd)
 800a0e4:	79bb      	ldrb	r3, [r7, #6]
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d834      	bhi.n	800a154 <SD_ioctl+0x98>
 800a0ea:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <SD_ioctl+0x34>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a101 	.word	0x0800a101
 800a0f4:	0800a109 	.word	0x0800a109
 800a0f8:	0800a121 	.word	0x0800a121
 800a0fc:	0800a13b 	.word	0x0800a13b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a106:	e028      	b.n	800a15a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a108:	f107 030c 	add.w	r3, r7, #12
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff ff11 	bl	8009f34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a11e:	e01c      	b.n	800a15a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a120:	f107 030c 	add.w	r3, r7, #12
 800a124:	4618      	mov	r0, r3
 800a126:	f7ff ff05 	bl	8009f34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a138:	e00f      	b.n	800a15a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a13a:	f107 030c 	add.w	r3, r7, #12
 800a13e:	4618      	mov	r0, r3
 800a140:	f7ff fef8 	bl	8009f34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a146:	0a5a      	lsrs	r2, r3, #9
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a152:	e002      	b.n	800a15a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a154:	2304      	movs	r3, #4
 800a156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a15a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3730      	adds	r7, #48	; 0x30
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	20000051 	.word	0x20000051

0800a16c <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 800a178:	2044      	movs	r0, #68	; 0x44
 800a17a:	f005 f883 	bl	800f284 <USBD_static_malloc>
 800a17e:	4602      	mov	r2, r0
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 800a190:	2303      	movs	r3, #3
 800a192:	e016      	b.n	800a1c2 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a19a:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 800a19c:	2340      	movs	r3, #64	; 0x40
 800a19e:	2202      	movs	r2, #2
 800a1a0:	2181      	movs	r1, #129	; 0x81
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f004 ff4b 	bl	800f03e <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 800a1a8:	2340      	movs	r3, #64	; 0x40
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f004 ff45 	bl	800f03e <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 800a1b4:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 800a1b6:	2340      	movs	r3, #64	; 0x40
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f005 f82e 	bl	800f21c <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800a1c0:	2300      	movs	r3, #0
  }
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 800a1d6:	2181      	movs	r1, #129	; 0x81
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f004 ff56 	bl	800f08a <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 800a1de:	2101      	movs	r1, #1
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f004 ff52 	bl	800f08a <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a202:	2b00      	cmp	r3, #0
 800a204:	d007      	beq.n	800a216 <USBD_Midi_Setup+0x26>
 800a206:	2b20      	cmp	r3, #32
 800a208:	d10b      	bne.n	800a222 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f001 f937 	bl	800b480 <USBD_CtlError>
      return USBD_FAIL;
 800a212:	2303      	movs	r3, #3
 800a214:	e006      	b.n	800a224 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 f931 	bl	800b480 <USBD_CtlError>
      return USBD_FAIL;
 800a21e:	2303      	movs	r3, #3
 800a220:	e000      	b.n	800a224 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2265      	movs	r2, #101	; 0x65
 800a238:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 800a23a:	4b03      	ldr	r3, [pc, #12]	; (800a248 <USBD_Midi_GetCfgDesc+0x1c>)
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	2000008c 	.word	0x2000008c

0800a24c <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2ee:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 800a2f0:	78fb      	ldrb	r3, [r7, #3]
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f004 ffb2 	bl	800f25e <USBD_LL_GetRxDataSize>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a304:	2300      	movs	r3, #0
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	e00c      	b.n	800a324 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68f9      	ldr	r1, [r7, #12]
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	440a      	add	r2, r1
 800a318:	2104      	movs	r1, #4
 800a31a:	4610      	mov	r0, r2
 800a31c:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	3304      	adds	r3, #4
 800a322:	617b      	str	r3, [r7, #20]
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d3ed      	bcc.n	800a30a <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 800a32e:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 800a330:	2340      	movs	r3, #64	; 0x40
 800a332:	2101      	movs	r1, #1
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f004 ff71 	bl	800f21c <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	220a      	movs	r2, #10
 800a350:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 800a352:	4b03      	ldr	r3, [pc, #12]	; (800a360 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 800a354:	4618      	mov	r0, r3
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	200000f4 	.word	0x200000f4

0800a364 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a36e:	2303      	movs	r3, #3
 800a370:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d005      	beq.n	800a384 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a384:	7bfb      	ldrb	r3, [r7, #15]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b086      	sub	sp, #24
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	4613      	mov	r3, r2
 800a39e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e01f      	b.n	800a3ea <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	79fa      	ldrb	r2, [r7, #7]
 800a3dc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f004 fdc6 	bl	800ef70 <USBD_LL_Init>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a406:	2303      	movs	r3, #3
 800a408:	e016      	b.n	800a438 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00b      	beq.n	800a436 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	f107 020e 	add.w	r2, r7, #14
 800a42a:	4610      	mov	r0, r2
 800a42c:	4798      	blx	r3
 800a42e:	4602      	mov	r2, r0
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f004 fddd 	bl	800f008 <USBD_LL_Start>
 800a44e:	4603      	mov	r3, r0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	460b      	mov	r3, r1
 800a478:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a47a:	2303      	movs	r3, #3
 800a47c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a484:	2b00      	cmp	r3, #0
 800a486:	d009      	beq.n	800a49c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	78fa      	ldrb	r2, [r7, #3]
 800a492:	4611      	mov	r1, r2
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	4798      	blx	r3
 800a498:	4603      	mov	r3, r0
 800a49a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b082      	sub	sp, #8
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d007      	beq.n	800a4cc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	78fa      	ldrb	r2, [r7, #3]
 800a4c6:	4611      	mov	r1, r2
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	4798      	blx	r3
  }

  return USBD_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4e6:	6839      	ldr	r1, [r7, #0]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 ff8f 	bl	800b40c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a50a:	f003 031f 	and.w	r3, r3, #31
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d01a      	beq.n	800a548 <USBD_LL_SetupStage+0x72>
 800a512:	2b02      	cmp	r3, #2
 800a514:	d822      	bhi.n	800a55c <USBD_LL_SetupStage+0x86>
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <USBD_LL_SetupStage+0x4a>
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d00a      	beq.n	800a534 <USBD_LL_SetupStage+0x5e>
 800a51e:	e01d      	b.n	800a55c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a526:	4619      	mov	r1, r3
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fa61 	bl	800a9f0 <USBD_StdDevReq>
 800a52e:	4603      	mov	r3, r0
 800a530:	73fb      	strb	r3, [r7, #15]
      break;
 800a532:	e020      	b.n	800a576 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fac5 	bl	800aacc <USBD_StdItfReq>
 800a542:	4603      	mov	r3, r0
 800a544:	73fb      	strb	r3, [r7, #15]
      break;
 800a546:	e016      	b.n	800a576 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fb04 	bl	800ab5e <USBD_StdEPReq>
 800a556:	4603      	mov	r3, r0
 800a558:	73fb      	strb	r3, [r7, #15]
      break;
 800a55a:	e00c      	b.n	800a576 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a562:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a566:	b2db      	uxtb	r3, r3
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f004 fdac 	bl	800f0c8 <USBD_LL_StallEP>
 800a570:	4603      	mov	r3, r0
 800a572:	73fb      	strb	r3, [r7, #15]
      break;
 800a574:	bf00      	nop
  }

  return ret;
 800a576:	7bfb      	ldrb	r3, [r7, #15]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	460b      	mov	r3, r1
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a58e:	7afb      	ldrb	r3, [r7, #11]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d138      	bne.n	800a606 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a59a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d14a      	bne.n	800a63c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	689a      	ldr	r2, [r3, #8]
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d913      	bls.n	800a5da <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	1ad2      	subs	r2, r2, r3
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	68da      	ldr	r2, [r3, #12]
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	bf28      	it	cs
 800a5cc:	4613      	movcs	r3, r2
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	6879      	ldr	r1, [r7, #4]
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 fff1 	bl	800b5ba <USBD_CtlContinueRx>
 800a5d8:	e030      	b.n	800a63c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	d10b      	bne.n	800a5fe <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d005      	beq.n	800a5fe <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 ffec 	bl	800b5dc <USBD_CtlSendStatus>
 800a604:	e01a      	b.n	800a63c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d114      	bne.n	800a63c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00e      	beq.n	800a63c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	7afa      	ldrb	r2, [r7, #11]
 800a628:	4611      	mov	r1, r2
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	4798      	blx	r3
 800a62e:	4603      	mov	r3, r0
 800a630:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a632:	7dfb      	ldrb	r3, [r7, #23]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a638:	7dfb      	ldrb	r3, [r7, #23]
 800a63a:	e000      	b.n	800a63e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b086      	sub	sp, #24
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	60f8      	str	r0, [r7, #12]
 800a64e:	460b      	mov	r3, r1
 800a650:	607a      	str	r2, [r7, #4]
 800a652:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a654:	7afb      	ldrb	r3, [r7, #11]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d16b      	bne.n	800a732 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3314      	adds	r3, #20
 800a65e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a666:	2b02      	cmp	r3, #2
 800a668:	d156      	bne.n	800a718 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	689a      	ldr	r2, [r3, #8]
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	429a      	cmp	r2, r3
 800a674:	d914      	bls.n	800a6a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	689a      	ldr	r2, [r3, #8]
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	1ad2      	subs	r2, r2, r3
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	461a      	mov	r2, r3
 800a68a:	6879      	ldr	r1, [r7, #4]
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f000 ff83 	bl	800b598 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a692:	2300      	movs	r3, #0
 800a694:	2200      	movs	r2, #0
 800a696:	2100      	movs	r1, #0
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f004 fdbf 	bl	800f21c <USBD_LL_PrepareReceive>
 800a69e:	e03b      	b.n	800a718 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	68da      	ldr	r2, [r3, #12]
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d11c      	bne.n	800a6e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d316      	bcc.n	800a6e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d20f      	bcs.n	800a6e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f000 ff64 	bl	800b598 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6d8:	2300      	movs	r3, #0
 800a6da:	2200      	movs	r2, #0
 800a6dc:	2100      	movs	r1, #0
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f004 fd9c 	bl	800f21c <USBD_LL_PrepareReceive>
 800a6e4:	e018      	b.n	800a718 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d10b      	bne.n	800a70a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d005      	beq.n	800a70a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a70a:	2180      	movs	r1, #128	; 0x80
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f004 fcdb 	bl	800f0c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 ff75 	bl	800b602 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d122      	bne.n	800a768 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f7ff fe98 	bl	800a458 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a730:	e01a      	b.n	800a768 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d114      	bne.n	800a768 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00e      	beq.n	800a768 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a750:	695b      	ldr	r3, [r3, #20]
 800a752:	7afa      	ldrb	r2, [r7, #11]
 800a754:	4611      	mov	r1, r2
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	4798      	blx	r3
 800a75a:	4603      	mov	r3, r0
 800a75c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a764:	7dfb      	ldrb	r3, [r7, #23]
 800a766:	e000      	b.n	800a76a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b082      	sub	sp, #8
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	e02f      	b.n	800a806 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00f      	beq.n	800a7d0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d009      	beq.n	800a7d0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	6852      	ldr	r2, [r2, #4]
 800a7c8:	b2d2      	uxtb	r2, r2
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7d0:	2340      	movs	r3, #64	; 0x40
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f004 fc31 	bl	800f03e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2240      	movs	r2, #64	; 0x40
 800a7e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7ec:	2340      	movs	r3, #64	; 0x40
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2180      	movs	r1, #128	; 0x80
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f004 fc23 	bl	800f03e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2240      	movs	r2, #64	; 0x40
 800a802:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	460b      	mov	r3, r1
 800a818:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	78fa      	ldrb	r2, [r7, #3]
 800a81e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a82e:	b480      	push	{r7}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2204      	movs	r2, #4
 800a848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d106      	bne.n	800a87c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a874:	b2da      	uxtb	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e012      	b.n	800a8c6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d10b      	bne.n	800a8c4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d005      	beq.n	800a8c4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b082      	sub	sp, #8
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d101      	bne.n	800a8e8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e014      	b.n	800a912 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d10d      	bne.n	800a910 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8fa:	6a1b      	ldr	r3, [r3, #32]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d007      	beq.n	800a910 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a906:	6a1b      	ldr	r3, [r3, #32]
 800a908:	78fa      	ldrb	r2, [r7, #3]
 800a90a:	4611      	mov	r1, r2
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	460b      	mov	r3, r1
 800a924:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a930:	2303      	movs	r3, #3
 800a932:	e014      	b.n	800a95e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d10d      	bne.n	800a95c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d007      	beq.n	800a95c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	78fa      	ldrb	r2, [r7, #3]
 800a956:	4611      	mov	r1, r2
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a992:	2b00      	cmp	r3, #0
 800a994:	d009      	beq.n	800a9aa <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	6852      	ldr	r2, [r2, #4]
 800a9a2:	b2d2      	uxtb	r2, r2
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	4798      	blx	r3
  }

  return USBD_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a9d2:	8a3b      	ldrh	r3, [r7, #16]
 800a9d4:	021b      	lsls	r3, r3, #8
 800a9d6:	b21a      	sxth	r2, r3
 800a9d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	b21b      	sxth	r3, r3
 800a9e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a9e2:	89fb      	ldrh	r3, [r7, #14]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	371c      	adds	r7, #28
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa06:	2b40      	cmp	r3, #64	; 0x40
 800aa08:	d005      	beq.n	800aa16 <USBD_StdDevReq+0x26>
 800aa0a:	2b40      	cmp	r3, #64	; 0x40
 800aa0c:	d853      	bhi.n	800aab6 <USBD_StdDevReq+0xc6>
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00b      	beq.n	800aa2a <USBD_StdDevReq+0x3a>
 800aa12:	2b20      	cmp	r3, #32
 800aa14:	d14f      	bne.n	800aab6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	4798      	blx	r3
 800aa24:	4603      	mov	r3, r0
 800aa26:	73fb      	strb	r3, [r7, #15]
      break;
 800aa28:	e04a      	b.n	800aac0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	785b      	ldrb	r3, [r3, #1]
 800aa2e:	2b09      	cmp	r3, #9
 800aa30:	d83b      	bhi.n	800aaaa <USBD_StdDevReq+0xba>
 800aa32:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <USBD_StdDevReq+0x48>)
 800aa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa38:	0800aa8d 	.word	0x0800aa8d
 800aa3c:	0800aaa1 	.word	0x0800aaa1
 800aa40:	0800aaab 	.word	0x0800aaab
 800aa44:	0800aa97 	.word	0x0800aa97
 800aa48:	0800aaab 	.word	0x0800aaab
 800aa4c:	0800aa6b 	.word	0x0800aa6b
 800aa50:	0800aa61 	.word	0x0800aa61
 800aa54:	0800aaab 	.word	0x0800aaab
 800aa58:	0800aa83 	.word	0x0800aa83
 800aa5c:	0800aa75 	.word	0x0800aa75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f9de 	bl	800ae24 <USBD_GetDescriptor>
          break;
 800aa68:	e024      	b.n	800aab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa6a:	6839      	ldr	r1, [r7, #0]
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 fb43 	bl	800b0f8 <USBD_SetAddress>
          break;
 800aa72:	e01f      	b.n	800aab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fb82 	bl	800b180 <USBD_SetConfig>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73fb      	strb	r3, [r7, #15]
          break;
 800aa80:	e018      	b.n	800aab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fc21 	bl	800b2cc <USBD_GetConfig>
          break;
 800aa8a:	e013      	b.n	800aab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fc52 	bl	800b338 <USBD_GetStatus>
          break;
 800aa94:	e00e      	b.n	800aab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fc81 	bl	800b3a0 <USBD_SetFeature>
          break;
 800aa9e:	e009      	b.n	800aab4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fc90 	bl	800b3c8 <USBD_ClrFeature>
          break;
 800aaa8:	e004      	b.n	800aab4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fce7 	bl	800b480 <USBD_CtlError>
          break;
 800aab2:	bf00      	nop
      }
      break;
 800aab4:	e004      	b.n	800aac0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fce1 	bl	800b480 <USBD_CtlError>
      break;
 800aabe:	bf00      	nop
  }

  return ret;
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop

0800aacc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aae2:	2b40      	cmp	r3, #64	; 0x40
 800aae4:	d005      	beq.n	800aaf2 <USBD_StdItfReq+0x26>
 800aae6:	2b40      	cmp	r3, #64	; 0x40
 800aae8:	d82f      	bhi.n	800ab4a <USBD_StdItfReq+0x7e>
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <USBD_StdItfReq+0x26>
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	d12b      	bne.n	800ab4a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	3b01      	subs	r3, #1
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d81d      	bhi.n	800ab3c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	889b      	ldrh	r3, [r3, #4]
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d813      	bhi.n	800ab32 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	4798      	blx	r3
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	88db      	ldrh	r3, [r3, #6]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d110      	bne.n	800ab46 <USBD_StdItfReq+0x7a>
 800ab24:	7bfb      	ldrb	r3, [r7, #15]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10d      	bne.n	800ab46 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fd56 	bl	800b5dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab30:	e009      	b.n	800ab46 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fca3 	bl	800b480 <USBD_CtlError>
          break;
 800ab3a:	e004      	b.n	800ab46 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fc9e 	bl	800b480 <USBD_CtlError>
          break;
 800ab44:	e000      	b.n	800ab48 <USBD_StdItfReq+0x7c>
          break;
 800ab46:	bf00      	nop
      }
      break;
 800ab48:	e004      	b.n	800ab54 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fc97 	bl	800b480 <USBD_CtlError>
      break;
 800ab52:	bf00      	nop
  }

  return ret;
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	889b      	ldrh	r3, [r3, #4]
 800ab70:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab7a:	2b40      	cmp	r3, #64	; 0x40
 800ab7c:	d007      	beq.n	800ab8e <USBD_StdEPReq+0x30>
 800ab7e:	2b40      	cmp	r3, #64	; 0x40
 800ab80:	f200 8145 	bhi.w	800ae0e <USBD_StdEPReq+0x2b0>
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00c      	beq.n	800aba2 <USBD_StdEPReq+0x44>
 800ab88:	2b20      	cmp	r3, #32
 800ab8a:	f040 8140 	bne.w	800ae0e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	4798      	blx	r3
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	73fb      	strb	r3, [r7, #15]
      break;
 800aba0:	e13a      	b.n	800ae18 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d007      	beq.n	800abba <USBD_StdEPReq+0x5c>
 800abaa:	2b03      	cmp	r3, #3
 800abac:	f300 8129 	bgt.w	800ae02 <USBD_StdEPReq+0x2a4>
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d07f      	beq.n	800acb4 <USBD_StdEPReq+0x156>
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d03c      	beq.n	800ac32 <USBD_StdEPReq+0xd4>
 800abb8:	e123      	b.n	800ae02 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d002      	beq.n	800abcc <USBD_StdEPReq+0x6e>
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	d016      	beq.n	800abf8 <USBD_StdEPReq+0x9a>
 800abca:	e02c      	b.n	800ac26 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00d      	beq.n	800abee <USBD_StdEPReq+0x90>
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	2b80      	cmp	r3, #128	; 0x80
 800abd6:	d00a      	beq.n	800abee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	4619      	mov	r1, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f004 fa73 	bl	800f0c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800abe2:	2180      	movs	r1, #128	; 0x80
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f004 fa6f 	bl	800f0c8 <USBD_LL_StallEP>
 800abea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abec:	e020      	b.n	800ac30 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fc45 	bl	800b480 <USBD_CtlError>
              break;
 800abf6:	e01b      	b.n	800ac30 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	885b      	ldrh	r3, [r3, #2]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10e      	bne.n	800ac1e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00b      	beq.n	800ac1e <USBD_StdEPReq+0xc0>
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	2b80      	cmp	r3, #128	; 0x80
 800ac0a:	d008      	beq.n	800ac1e <USBD_StdEPReq+0xc0>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	88db      	ldrh	r3, [r3, #6]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d104      	bne.n	800ac1e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac14:	7bbb      	ldrb	r3, [r7, #14]
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f004 fa55 	bl	800f0c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fcdc 	bl	800b5dc <USBD_CtlSendStatus>

              break;
 800ac24:	e004      	b.n	800ac30 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ac26:	6839      	ldr	r1, [r7, #0]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fc29 	bl	800b480 <USBD_CtlError>
              break;
 800ac2e:	bf00      	nop
          }
          break;
 800ac30:	e0ec      	b.n	800ae0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d002      	beq.n	800ac44 <USBD_StdEPReq+0xe6>
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d016      	beq.n	800ac70 <USBD_StdEPReq+0x112>
 800ac42:	e030      	b.n	800aca6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00d      	beq.n	800ac66 <USBD_StdEPReq+0x108>
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	2b80      	cmp	r3, #128	; 0x80
 800ac4e:	d00a      	beq.n	800ac66 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	4619      	mov	r1, r3
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f004 fa37 	bl	800f0c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac5a:	2180      	movs	r1, #128	; 0x80
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f004 fa33 	bl	800f0c8 <USBD_LL_StallEP>
 800ac62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac64:	e025      	b.n	800acb2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fc09 	bl	800b480 <USBD_CtlError>
              break;
 800ac6e:	e020      	b.n	800acb2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	885b      	ldrh	r3, [r3, #2]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d11b      	bne.n	800acb0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac78:	7bbb      	ldrb	r3, [r7, #14]
 800ac7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d004      	beq.n	800ac8c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	4619      	mov	r1, r3
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f004 fa3d 	bl	800f106 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fca5 	bl	800b5dc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	4798      	blx	r3
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aca4:	e004      	b.n	800acb0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fbe9 	bl	800b480 <USBD_CtlError>
              break;
 800acae:	e000      	b.n	800acb2 <USBD_StdEPReq+0x154>
              break;
 800acb0:	bf00      	nop
          }
          break;
 800acb2:	e0ab      	b.n	800ae0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	d002      	beq.n	800acc6 <USBD_StdEPReq+0x168>
 800acc0:	2b03      	cmp	r3, #3
 800acc2:	d032      	beq.n	800ad2a <USBD_StdEPReq+0x1cc>
 800acc4:	e097      	b.n	800adf6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d007      	beq.n	800acdc <USBD_StdEPReq+0x17e>
 800accc:	7bbb      	ldrb	r3, [r7, #14]
 800acce:	2b80      	cmp	r3, #128	; 0x80
 800acd0:	d004      	beq.n	800acdc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fbd3 	bl	800b480 <USBD_CtlError>
                break;
 800acda:	e091      	b.n	800ae00 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	da0b      	bge.n	800acfc <USBD_StdEPReq+0x19e>
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
 800ace6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	3310      	adds	r3, #16
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	4413      	add	r3, r2
 800acf8:	3304      	adds	r3, #4
 800acfa:	e00b      	b.n	800ad14 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad02:	4613      	mov	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	4413      	add	r3, r2
 800ad12:	3304      	adds	r3, #4
 800ad14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2202      	movs	r2, #2
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fc1d 	bl	800b562 <USBD_CtlSendData>
              break;
 800ad28:	e06a      	b.n	800ae00 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	da11      	bge.n	800ad56 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
 800ad34:	f003 020f 	and.w	r2, r3, #15
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	440b      	add	r3, r1
 800ad44:	3324      	adds	r3, #36	; 0x24
 800ad46:	881b      	ldrh	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d117      	bne.n	800ad7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fb96 	bl	800b480 <USBD_CtlError>
                  break;
 800ad54:	e054      	b.n	800ae00 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
 800ad58:	f003 020f 	and.w	r2, r3, #15
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	440b      	add	r3, r1
 800ad68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d104      	bne.n	800ad7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fb83 	bl	800b480 <USBD_CtlError>
                  break;
 800ad7a:	e041      	b.n	800ae00 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da0b      	bge.n	800ad9c <USBD_StdEPReq+0x23e>
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	3310      	adds	r3, #16
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	4413      	add	r3, r2
 800ad98:	3304      	adds	r3, #4
 800ad9a:	e00b      	b.n	800adb4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad9c:	7bbb      	ldrb	r3, [r7, #14]
 800ad9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ada2:	4613      	mov	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	4413      	add	r3, r2
 800adb2:	3304      	adds	r3, #4
 800adb4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <USBD_StdEPReq+0x264>
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	2b80      	cmp	r3, #128	; 0x80
 800adc0:	d103      	bne.n	800adca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2200      	movs	r2, #0
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	e00e      	b.n	800ade8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800adca:	7bbb      	ldrb	r3, [r7, #14]
 800adcc:	4619      	mov	r1, r3
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f004 f9b8 	bl	800f144 <USBD_LL_IsStallEP>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	2201      	movs	r2, #1
 800adde:	601a      	str	r2, [r3, #0]
 800ade0:	e002      	b.n	800ade8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2200      	movs	r2, #0
 800ade6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	2202      	movs	r2, #2
 800adec:	4619      	mov	r1, r3
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fbb7 	bl	800b562 <USBD_CtlSendData>
              break;
 800adf4:	e004      	b.n	800ae00 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fb41 	bl	800b480 <USBD_CtlError>
              break;
 800adfe:	bf00      	nop
          }
          break;
 800ae00:	e004      	b.n	800ae0c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fb3b 	bl	800b480 <USBD_CtlError>
          break;
 800ae0a:	bf00      	nop
      }
      break;
 800ae0c:	e004      	b.n	800ae18 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fb35 	bl	800b480 <USBD_CtlError>
      break;
 800ae16:	bf00      	nop
  }

  return ret;
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae32:	2300      	movs	r3, #0
 800ae34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	885b      	ldrh	r3, [r3, #2]
 800ae3e:	0a1b      	lsrs	r3, r3, #8
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	3b01      	subs	r3, #1
 800ae44:	2b06      	cmp	r3, #6
 800ae46:	f200 8128 	bhi.w	800b09a <USBD_GetDescriptor+0x276>
 800ae4a:	a201      	add	r2, pc, #4	; (adr r2, 800ae50 <USBD_GetDescriptor+0x2c>)
 800ae4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae50:	0800ae6d 	.word	0x0800ae6d
 800ae54:	0800ae85 	.word	0x0800ae85
 800ae58:	0800aec5 	.word	0x0800aec5
 800ae5c:	0800b09b 	.word	0x0800b09b
 800ae60:	0800b09b 	.word	0x0800b09b
 800ae64:	0800b03b 	.word	0x0800b03b
 800ae68:	0800b067 	.word	0x0800b067
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	7c12      	ldrb	r2, [r2, #16]
 800ae78:	f107 0108 	add.w	r1, r7, #8
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	4798      	blx	r3
 800ae80:	60f8      	str	r0, [r7, #12]
      break;
 800ae82:	e112      	b.n	800b0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	7c1b      	ldrb	r3, [r3, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10d      	bne.n	800aea8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae94:	f107 0208 	add.w	r2, r7, #8
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3
 800ae9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	3301      	adds	r3, #1
 800aea2:	2202      	movs	r2, #2
 800aea4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aea6:	e100      	b.n	800b0aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb0:	f107 0208 	add.w	r2, r7, #8
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	4798      	blx	r3
 800aeb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3301      	adds	r3, #1
 800aebe:	2202      	movs	r2, #2
 800aec0:	701a      	strb	r2, [r3, #0]
      break;
 800aec2:	e0f2      	b.n	800b0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	885b      	ldrh	r3, [r3, #2]
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b05      	cmp	r3, #5
 800aecc:	f200 80ac 	bhi.w	800b028 <USBD_GetDescriptor+0x204>
 800aed0:	a201      	add	r2, pc, #4	; (adr r2, 800aed8 <USBD_GetDescriptor+0xb4>)
 800aed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed6:	bf00      	nop
 800aed8:	0800aef1 	.word	0x0800aef1
 800aedc:	0800af25 	.word	0x0800af25
 800aee0:	0800af59 	.word	0x0800af59
 800aee4:	0800af8d 	.word	0x0800af8d
 800aee8:	0800afc1 	.word	0x0800afc1
 800aeec:	0800aff5 	.word	0x0800aff5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00b      	beq.n	800af14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	7c12      	ldrb	r2, [r2, #16]
 800af08:	f107 0108 	add.w	r1, r7, #8
 800af0c:	4610      	mov	r0, r2
 800af0e:	4798      	blx	r3
 800af10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af12:	e091      	b.n	800b038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fab2 	bl	800b480 <USBD_CtlError>
            err++;
 800af1c:	7afb      	ldrb	r3, [r7, #11]
 800af1e:	3301      	adds	r3, #1
 800af20:	72fb      	strb	r3, [r7, #11]
          break;
 800af22:	e089      	b.n	800b038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00b      	beq.n	800af48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	7c12      	ldrb	r2, [r2, #16]
 800af3c:	f107 0108 	add.w	r1, r7, #8
 800af40:	4610      	mov	r0, r2
 800af42:	4798      	blx	r3
 800af44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af46:	e077      	b.n	800b038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 fa98 	bl	800b480 <USBD_CtlError>
            err++;
 800af50:	7afb      	ldrb	r3, [r7, #11]
 800af52:	3301      	adds	r3, #1
 800af54:	72fb      	strb	r3, [r7, #11]
          break;
 800af56:	e06f      	b.n	800b038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00b      	beq.n	800af7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	7c12      	ldrb	r2, [r2, #16]
 800af70:	f107 0108 	add.w	r1, r7, #8
 800af74:	4610      	mov	r0, r2
 800af76:	4798      	blx	r3
 800af78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af7a:	e05d      	b.n	800b038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fa7e 	bl	800b480 <USBD_CtlError>
            err++;
 800af84:	7afb      	ldrb	r3, [r7, #11]
 800af86:	3301      	adds	r3, #1
 800af88:	72fb      	strb	r3, [r7, #11]
          break;
 800af8a:	e055      	b.n	800b038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00b      	beq.n	800afb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	7c12      	ldrb	r2, [r2, #16]
 800afa4:	f107 0108 	add.w	r1, r7, #8
 800afa8:	4610      	mov	r0, r2
 800afaa:	4798      	blx	r3
 800afac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afae:	e043      	b.n	800b038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fa64 	bl	800b480 <USBD_CtlError>
            err++;
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	3301      	adds	r3, #1
 800afbc:	72fb      	strb	r3, [r7, #11]
          break;
 800afbe:	e03b      	b.n	800b038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00b      	beq.n	800afe4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afd2:	695b      	ldr	r3, [r3, #20]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	7c12      	ldrb	r2, [r2, #16]
 800afd8:	f107 0108 	add.w	r1, r7, #8
 800afdc:	4610      	mov	r0, r2
 800afde:	4798      	blx	r3
 800afe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afe2:	e029      	b.n	800b038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fa4a 	bl	800b480 <USBD_CtlError>
            err++;
 800afec:	7afb      	ldrb	r3, [r7, #11]
 800afee:	3301      	adds	r3, #1
 800aff0:	72fb      	strb	r3, [r7, #11]
          break;
 800aff2:	e021      	b.n	800b038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00b      	beq.n	800b018 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	7c12      	ldrb	r2, [r2, #16]
 800b00c:	f107 0108 	add.w	r1, r7, #8
 800b010:	4610      	mov	r0, r2
 800b012:	4798      	blx	r3
 800b014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b016:	e00f      	b.n	800b038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fa30 	bl	800b480 <USBD_CtlError>
            err++;
 800b020:	7afb      	ldrb	r3, [r7, #11]
 800b022:	3301      	adds	r3, #1
 800b024:	72fb      	strb	r3, [r7, #11]
          break;
 800b026:	e007      	b.n	800b038 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fa28 	bl	800b480 <USBD_CtlError>
          err++;
 800b030:	7afb      	ldrb	r3, [r7, #11]
 800b032:	3301      	adds	r3, #1
 800b034:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b036:	bf00      	nop
      }
      break;
 800b038:	e037      	b.n	800b0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	7c1b      	ldrb	r3, [r3, #16]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d109      	bne.n	800b056 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04a:	f107 0208 	add.w	r2, r7, #8
 800b04e:	4610      	mov	r0, r2
 800b050:	4798      	blx	r3
 800b052:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b054:	e029      	b.n	800b0aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fa11 	bl	800b480 <USBD_CtlError>
        err++;
 800b05e:	7afb      	ldrb	r3, [r7, #11]
 800b060:	3301      	adds	r3, #1
 800b062:	72fb      	strb	r3, [r7, #11]
      break;
 800b064:	e021      	b.n	800b0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	7c1b      	ldrb	r3, [r3, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10d      	bne.n	800b08a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b076:	f107 0208 	add.w	r2, r7, #8
 800b07a:	4610      	mov	r0, r2
 800b07c:	4798      	blx	r3
 800b07e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3301      	adds	r3, #1
 800b084:	2207      	movs	r2, #7
 800b086:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b088:	e00f      	b.n	800b0aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f9f7 	bl	800b480 <USBD_CtlError>
        err++;
 800b092:	7afb      	ldrb	r3, [r7, #11]
 800b094:	3301      	adds	r3, #1
 800b096:	72fb      	strb	r3, [r7, #11]
      break;
 800b098:	e007      	b.n	800b0aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b09a:	6839      	ldr	r1, [r7, #0]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f9ef 	bl	800b480 <USBD_CtlError>
      err++;
 800b0a2:	7afb      	ldrb	r3, [r7, #11]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	72fb      	strb	r3, [r7, #11]
      break;
 800b0a8:	bf00      	nop
  }

  if (err != 0U)
 800b0aa:	7afb      	ldrb	r3, [r7, #11]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d11e      	bne.n	800b0ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	88db      	ldrh	r3, [r3, #6]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d016      	beq.n	800b0e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b0b8:	893b      	ldrh	r3, [r7, #8]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00e      	beq.n	800b0dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	88da      	ldrh	r2, [r3, #6]
 800b0c2:	893b      	ldrh	r3, [r7, #8]
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	bf28      	it	cs
 800b0c8:	4613      	movcs	r3, r2
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b0ce:	893b      	ldrh	r3, [r7, #8]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	68f9      	ldr	r1, [r7, #12]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fa44 	bl	800b562 <USBD_CtlSendData>
 800b0da:	e009      	b.n	800b0f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f9ce 	bl	800b480 <USBD_CtlError>
 800b0e4:	e004      	b.n	800b0f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fa78 	bl	800b5dc <USBD_CtlSendStatus>
 800b0ec:	e000      	b.n	800b0f0 <USBD_GetDescriptor+0x2cc>
    return;
 800b0ee:	bf00      	nop
  }
}
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop

0800b0f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	889b      	ldrh	r3, [r3, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d131      	bne.n	800b16e <USBD_SetAddress+0x76>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	88db      	ldrh	r3, [r3, #6]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d12d      	bne.n	800b16e <USBD_SetAddress+0x76>
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	885b      	ldrh	r3, [r3, #2]
 800b116:	2b7f      	cmp	r3, #127	; 0x7f
 800b118:	d829      	bhi.n	800b16e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	885b      	ldrh	r3, [r3, #2]
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b124:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d104      	bne.n	800b13c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f9a3 	bl	800b480 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b13a:	e01d      	b.n	800b178 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	7bfa      	ldrb	r2, [r7, #15]
 800b140:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f004 f827 	bl	800f19c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fa44 	bl	800b5dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d004      	beq.n	800b164 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2202      	movs	r2, #2
 800b15e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b162:	e009      	b.n	800b178 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b16c:	e004      	b.n	800b178 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b16e:	6839      	ldr	r1, [r7, #0]
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 f985 	bl	800b480 <USBD_CtlError>
  }
}
 800b176:	bf00      	nop
 800b178:	bf00      	nop
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	885b      	ldrh	r3, [r3, #2]
 800b192:	b2da      	uxtb	r2, r3
 800b194:	4b4c      	ldr	r3, [pc, #304]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b196:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b198:	4b4b      	ldr	r3, [pc, #300]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d905      	bls.n	800b1ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f96c 	bl	800b480 <USBD_CtlError>
    return USBD_FAIL;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e088      	b.n	800b2be <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d002      	beq.n	800b1be <USBD_SetConfig+0x3e>
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d025      	beq.n	800b208 <USBD_SetConfig+0x88>
 800b1bc:	e071      	b.n	800b2a2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b1be:	4b42      	ldr	r3, [pc, #264]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d01c      	beq.n	800b200 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b1c6:	4b40      	ldr	r3, [pc, #256]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1d0:	4b3d      	ldr	r3, [pc, #244]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7ff f949 	bl	800a46e <USBD_SetClassConfig>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d004      	beq.n	800b1f0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f949 	bl	800b480 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1ee:	e065      	b.n	800b2bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 f9f3 	bl	800b5dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2203      	movs	r2, #3
 800b1fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1fe:	e05d      	b.n	800b2bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f9eb 	bl	800b5dc <USBD_CtlSendStatus>
      break;
 800b206:	e059      	b.n	800b2bc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b208:	4b2f      	ldr	r3, [pc, #188]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d112      	bne.n	800b236 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2202      	movs	r2, #2
 800b214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b218:	4b2b      	ldr	r3, [pc, #172]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	461a      	mov	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b222:	4b29      	ldr	r3, [pc, #164]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	4619      	mov	r1, r3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f7ff f93c 	bl	800a4a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 f9d4 	bl	800b5dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b234:	e042      	b.n	800b2bc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b236:	4b24      	ldr	r3, [pc, #144]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	429a      	cmp	r2, r3
 800b242:	d02a      	beq.n	800b29a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f7ff f92a 	bl	800a4a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b252:	4b1d      	ldr	r3, [pc, #116]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b25c:	4b1a      	ldr	r3, [pc, #104]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7ff f903 	bl	800a46e <USBD_SetClassConfig>
 800b268:	4603      	mov	r3, r0
 800b26a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00f      	beq.n	800b292 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f903 	bl	800b480 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	4619      	mov	r1, r3
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7ff f90f 	bl	800a4a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2202      	movs	r2, #2
 800b28c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b290:	e014      	b.n	800b2bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f9a2 	bl	800b5dc <USBD_CtlSendStatus>
      break;
 800b298:	e010      	b.n	800b2bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f99e 	bl	800b5dc <USBD_CtlSendStatus>
      break;
 800b2a0:	e00c      	b.n	800b2bc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b2a2:	6839      	ldr	r1, [r7, #0]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f8eb 	bl	800b480 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b2aa:	4b07      	ldr	r3, [pc, #28]	; (800b2c8 <USBD_SetConfig+0x148>)
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7ff f8f8 	bl	800a4a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ba:	bf00      	nop
  }

  return ret;
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20000764 	.word	0x20000764

0800b2cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	88db      	ldrh	r3, [r3, #6]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d004      	beq.n	800b2e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f8cd 	bl	800b480 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b2e6:	e023      	b.n	800b330 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	dc02      	bgt.n	800b2fa <USBD_GetConfig+0x2e>
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	dc03      	bgt.n	800b300 <USBD_GetConfig+0x34>
 800b2f8:	e015      	b.n	800b326 <USBD_GetConfig+0x5a>
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d00b      	beq.n	800b316 <USBD_GetConfig+0x4a>
 800b2fe:	e012      	b.n	800b326 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3308      	adds	r3, #8
 800b30a:	2201      	movs	r2, #1
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f927 	bl	800b562 <USBD_CtlSendData>
        break;
 800b314:	e00c      	b.n	800b330 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	3304      	adds	r3, #4
 800b31a:	2201      	movs	r2, #1
 800b31c:	4619      	mov	r1, r3
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f91f 	bl	800b562 <USBD_CtlSendData>
        break;
 800b324:	e004      	b.n	800b330 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f8a9 	bl	800b480 <USBD_CtlError>
        break;
 800b32e:	bf00      	nop
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	3b01      	subs	r3, #1
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d81e      	bhi.n	800b38e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	88db      	ldrh	r3, [r3, #6]
 800b354:	2b02      	cmp	r3, #2
 800b356:	d004      	beq.n	800b362 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b358:	6839      	ldr	r1, [r7, #0]
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f890 	bl	800b480 <USBD_CtlError>
        break;
 800b360:	e01a      	b.n	800b398 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2201      	movs	r2, #1
 800b366:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d005      	beq.n	800b37e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	f043 0202 	orr.w	r2, r3, #2
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	330c      	adds	r3, #12
 800b382:	2202      	movs	r2, #2
 800b384:	4619      	mov	r1, r3
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f8eb 	bl	800b562 <USBD_CtlSendData>
      break;
 800b38c:	e004      	b.n	800b398 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b38e:	6839      	ldr	r1, [r7, #0]
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 f875 	bl	800b480 <USBD_CtlError>
      break;
 800b396:	bf00      	nop
  }
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	885b      	ldrh	r3, [r3, #2]
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d106      	bne.n	800b3c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f90e 	bl	800b5dc <USBD_CtlSendStatus>
  }
}
 800b3c0:	bf00      	nop
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d80b      	bhi.n	800b3f8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	885b      	ldrh	r3, [r3, #2]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d10c      	bne.n	800b402 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f8f3 	bl	800b5dc <USBD_CtlSendStatus>
      }
      break;
 800b3f6:	e004      	b.n	800b402 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f840 	bl	800b480 <USBD_CtlError>
      break;
 800b400:	e000      	b.n	800b404 <USBD_ClrFeature+0x3c>
      break;
 800b402:	bf00      	nop
  }
}
 800b404:	bf00      	nop
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	781a      	ldrb	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	3301      	adds	r3, #1
 800b426:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	781a      	ldrb	r2, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	3301      	adds	r3, #1
 800b434:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f7ff fabc 	bl	800a9b4 <SWAPBYTE>
 800b43c:	4603      	mov	r3, r0
 800b43e:	461a      	mov	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	3301      	adds	r3, #1
 800b448:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3301      	adds	r3, #1
 800b44e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7ff faaf 	bl	800a9b4 <SWAPBYTE>
 800b456:	4603      	mov	r3, r0
 800b458:	461a      	mov	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3301      	adds	r3, #1
 800b462:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3301      	adds	r3, #1
 800b468:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f7ff faa2 	bl	800a9b4 <SWAPBYTE>
 800b470:	4603      	mov	r3, r0
 800b472:	461a      	mov	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	80da      	strh	r2, [r3, #6]
}
 800b478:	bf00      	nop
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b48a:	2180      	movs	r1, #128	; 0x80
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f003 fe1b 	bl	800f0c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b492:	2100      	movs	r1, #0
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f003 fe17 	bl	800f0c8 <USBD_LL_StallEP>
}
 800b49a:	bf00      	nop
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b086      	sub	sp, #24
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d036      	beq.n	800b526 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b4bc:	6938      	ldr	r0, [r7, #16]
 800b4be:	f000 f836 	bl	800b52e <USBD_GetLen>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	7812      	ldrb	r2, [r2, #0]
 800b4da:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	2203      	movs	r2, #3
 800b4ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4ec:	7dfb      	ldrb	r3, [r7, #23]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b4f2:	e013      	b.n	800b51c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	7812      	ldrb	r2, [r2, #0]
 800b4fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	3301      	adds	r3, #1
 800b504:	613b      	str	r3, [r7, #16]
    idx++;
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	3301      	adds	r3, #1
 800b50a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	4413      	add	r3, r2
 800b512:	2200      	movs	r2, #0
 800b514:	701a      	strb	r2, [r3, #0]
    idx++;
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	3301      	adds	r3, #1
 800b51a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e7      	bne.n	800b4f4 <USBD_GetString+0x52>
 800b524:	e000      	b.n	800b528 <USBD_GetString+0x86>
    return;
 800b526:	bf00      	nop
  }
}
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b52e:	b480      	push	{r7}
 800b530:	b085      	sub	sp, #20
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b53e:	e005      	b.n	800b54c <USBD_GetLen+0x1e>
  {
    len++;
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	3301      	adds	r3, #1
 800b544:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	3301      	adds	r3, #1
 800b54a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1f5      	bne.n	800b540 <USBD_GetLen+0x12>
  }

  return len;
 800b554:	7bfb      	ldrb	r3, [r7, #15]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b084      	sub	sp, #16
 800b566:	af00      	add	r7, sp, #0
 800b568:	60f8      	str	r0, [r7, #12]
 800b56a:	60b9      	str	r1, [r7, #8]
 800b56c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2202      	movs	r2, #2
 800b572:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	2100      	movs	r1, #0
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f003 fe26 	bl	800f1da <USBD_LL_Transmit>

  return USBD_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f003 fe15 	bl	800f1da <USBD_LL_Transmit>

  return USBD_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b084      	sub	sp, #16
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	60f8      	str	r0, [r7, #12]
 800b5c2:	60b9      	str	r1, [r7, #8]
 800b5c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f003 fe25 	bl	800f21c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2204      	movs	r2, #4
 800b5e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f003 fdf1 	bl	800f1da <USBD_LL_Transmit>

  return USBD_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2205      	movs	r2, #5
 800b60e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b612:	2300      	movs	r3, #0
 800b614:	2200      	movs	r2, #0
 800b616:	2100      	movs	r1, #0
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f003 fdff 	bl	800f21c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b632:	79fb      	ldrb	r3, [r7, #7]
 800b634:	4a08      	ldr	r2, [pc, #32]	; (800b658 <disk_status+0x30>)
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	79fa      	ldrb	r2, [r7, #7]
 800b640:	4905      	ldr	r1, [pc, #20]	; (800b658 <disk_status+0x30>)
 800b642:	440a      	add	r2, r1
 800b644:	7a12      	ldrb	r2, [r2, #8]
 800b646:	4610      	mov	r0, r2
 800b648:	4798      	blx	r3
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	20000990 	.word	0x20000990

0800b65c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	4603      	mov	r3, r0
 800b664:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b66a:	79fb      	ldrb	r3, [r7, #7]
 800b66c:	4a0d      	ldr	r2, [pc, #52]	; (800b6a4 <disk_initialize+0x48>)
 800b66e:	5cd3      	ldrb	r3, [r2, r3]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d111      	bne.n	800b698 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b674:	79fb      	ldrb	r3, [r7, #7]
 800b676:	4a0b      	ldr	r2, [pc, #44]	; (800b6a4 <disk_initialize+0x48>)
 800b678:	2101      	movs	r1, #1
 800b67a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b67c:	79fb      	ldrb	r3, [r7, #7]
 800b67e:	4a09      	ldr	r2, [pc, #36]	; (800b6a4 <disk_initialize+0x48>)
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	79fa      	ldrb	r2, [r7, #7]
 800b68a:	4906      	ldr	r1, [pc, #24]	; (800b6a4 <disk_initialize+0x48>)
 800b68c:	440a      	add	r2, r1
 800b68e:	7a12      	ldrb	r2, [r2, #8]
 800b690:	4610      	mov	r0, r2
 800b692:	4798      	blx	r3
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b698:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20000990 	.word	0x20000990

0800b6a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b6a8:	b590      	push	{r4, r7, lr}
 800b6aa:	b087      	sub	sp, #28
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60b9      	str	r1, [r7, #8]
 800b6b0:	607a      	str	r2, [r7, #4]
 800b6b2:	603b      	str	r3, [r7, #0]
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b6b8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ba:	4a0a      	ldr	r2, [pc, #40]	; (800b6e4 <disk_read+0x3c>)
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	689c      	ldr	r4, [r3, #8]
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
 800b6c6:	4a07      	ldr	r2, [pc, #28]	; (800b6e4 <disk_read+0x3c>)
 800b6c8:	4413      	add	r3, r2
 800b6ca:	7a18      	ldrb	r0, [r3, #8]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	68b9      	ldr	r1, [r7, #8]
 800b6d2:	47a0      	blx	r4
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b6d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd90      	pop	{r4, r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	20000990 	.word	0x20000990

0800b6e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b6e8:	b590      	push	{r4, r7, lr}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60b9      	str	r1, [r7, #8]
 800b6f0:	607a      	str	r2, [r7, #4]
 800b6f2:	603b      	str	r3, [r7, #0]
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	4a0a      	ldr	r2, [pc, #40]	; (800b724 <disk_write+0x3c>)
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	68dc      	ldr	r4, [r3, #12]
 800b704:	7bfb      	ldrb	r3, [r7, #15]
 800b706:	4a07      	ldr	r2, [pc, #28]	; (800b724 <disk_write+0x3c>)
 800b708:	4413      	add	r3, r2
 800b70a:	7a18      	ldrb	r0, [r3, #8]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	68b9      	ldr	r1, [r7, #8]
 800b712:	47a0      	blx	r4
 800b714:	4603      	mov	r3, r0
 800b716:	75fb      	strb	r3, [r7, #23]
  return res;
 800b718:	7dfb      	ldrb	r3, [r7, #23]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	371c      	adds	r7, #28
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd90      	pop	{r4, r7, pc}
 800b722:	bf00      	nop
 800b724:	20000990 	.word	0x20000990

0800b728 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	4603      	mov	r3, r0
 800b730:	603a      	str	r2, [r7, #0]
 800b732:	71fb      	strb	r3, [r7, #7]
 800b734:	460b      	mov	r3, r1
 800b736:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b738:	79fb      	ldrb	r3, [r7, #7]
 800b73a:	4a09      	ldr	r2, [pc, #36]	; (800b760 <disk_ioctl+0x38>)
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	79fa      	ldrb	r2, [r7, #7]
 800b746:	4906      	ldr	r1, [pc, #24]	; (800b760 <disk_ioctl+0x38>)
 800b748:	440a      	add	r2, r1
 800b74a:	7a10      	ldrb	r0, [r2, #8]
 800b74c:	79b9      	ldrb	r1, [r7, #6]
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	4798      	blx	r3
 800b752:	4603      	mov	r3, r0
 800b754:	73fb      	strb	r3, [r7, #15]
  return res;
 800b756:	7bfb      	ldrb	r3, [r7, #15]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20000990 	.word	0x20000990

0800b764 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	3301      	adds	r3, #1
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b774:	89fb      	ldrh	r3, [r7, #14]
 800b776:	021b      	lsls	r3, r3, #8
 800b778:	b21a      	sxth	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	b21b      	sxth	r3, r3
 800b780:	4313      	orrs	r3, r2
 800b782:	b21b      	sxth	r3, r3
 800b784:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b786:	89fb      	ldrh	r3, [r7, #14]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	3303      	adds	r3, #3
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	021b      	lsls	r3, r3, #8
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	3202      	adds	r2, #2
 800b7ac:	7812      	ldrb	r2, [r2, #0]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	021b      	lsls	r3, r3, #8
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	3201      	adds	r2, #1
 800b7ba:	7812      	ldrb	r2, [r2, #0]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	7812      	ldrb	r2, [r2, #0]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]
	return rv;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b083      	sub	sp, #12
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	1c5a      	adds	r2, r3, #1
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	887a      	ldrh	r2, [r7, #2]
 800b7ee:	b2d2      	uxtb	r2, r2
 800b7f0:	701a      	strb	r2, [r3, #0]
 800b7f2:	887b      	ldrh	r3, [r7, #2]
 800b7f4:	0a1b      	lsrs	r3, r3, #8
 800b7f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	1c5a      	adds	r2, r3, #1
 800b7fc:	607a      	str	r2, [r7, #4]
 800b7fe:	887a      	ldrh	r2, [r7, #2]
 800b800:	b2d2      	uxtb	r2, r2
 800b802:	701a      	strb	r2, [r3, #0]
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	607a      	str	r2, [r7, #4]
 800b820:	683a      	ldr	r2, [r7, #0]
 800b822:	b2d2      	uxtb	r2, r2
 800b824:	701a      	strb	r2, [r3, #0]
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	0a1b      	lsrs	r3, r3, #8
 800b82a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	607a      	str	r2, [r7, #4]
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	b2d2      	uxtb	r2, r2
 800b836:	701a      	strb	r2, [r3, #0]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	0a1b      	lsrs	r3, r3, #8
 800b83c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	1c5a      	adds	r2, r3, #1
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	b2d2      	uxtb	r2, r2
 800b848:	701a      	strb	r2, [r3, #0]
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	0a1b      	lsrs	r3, r3, #8
 800b84e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	607a      	str	r2, [r7, #4]
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	b2d2      	uxtb	r2, r2
 800b85a:	701a      	strb	r2, [r3, #0]
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00d      	beq.n	800b89e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	1c53      	adds	r3, r2, #1
 800b886:	613b      	str	r3, [r7, #16]
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	1c59      	adds	r1, r3, #1
 800b88c:	6179      	str	r1, [r7, #20]
 800b88e:	7812      	ldrb	r2, [r2, #0]
 800b890:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	3b01      	subs	r3, #1
 800b896:	607b      	str	r3, [r7, #4]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1f1      	bne.n	800b882 <mem_cpy+0x1a>
	}
}
 800b89e:	bf00      	nop
 800b8a0:	371c      	adds	r7, #28
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b8aa:	b480      	push	{r7}
 800b8ac:	b087      	sub	sp, #28
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	60f8      	str	r0, [r7, #12]
 800b8b2:	60b9      	str	r1, [r7, #8]
 800b8b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	617a      	str	r2, [r7, #20]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	b2d2      	uxtb	r2, r2
 800b8c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	607b      	str	r3, [r7, #4]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1f3      	bne.n	800b8ba <mem_set+0x10>
}
 800b8d2:	bf00      	nop
 800b8d4:	bf00      	nop
 800b8d6:	371c      	adds	r7, #28
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b8e0:	b480      	push	{r7}
 800b8e2:	b089      	sub	sp, #36	; 0x24
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	61fb      	str	r3, [r7, #28]
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	61fa      	str	r2, [r7, #28]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	4619      	mov	r1, r3
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	1c5a      	adds	r2, r3, #1
 800b906:	61ba      	str	r2, [r7, #24]
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	1acb      	subs	r3, r1, r3
 800b90c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	3b01      	subs	r3, #1
 800b912:	607b      	str	r3, [r7, #4]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <mem_cmp+0x40>
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d0eb      	beq.n	800b8f8 <mem_cmp+0x18>

	return r;
 800b920:	697b      	ldr	r3, [r7, #20]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3724      	adds	r7, #36	; 0x24
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b92e:	b480      	push	{r7}
 800b930:	b083      	sub	sp, #12
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b938:	e002      	b.n	800b940 <chk_chr+0x12>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	3301      	adds	r3, #1
 800b93e:	607b      	str	r3, [r7, #4]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d005      	beq.n	800b954 <chk_chr+0x26>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	461a      	mov	r2, r3
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	4293      	cmp	r3, r2
 800b952:	d1f2      	bne.n	800b93a <chk_chr+0xc>
	return *str;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	781b      	ldrb	r3, [r3, #0]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b96e:	2300      	movs	r3, #0
 800b970:	60bb      	str	r3, [r7, #8]
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	e029      	b.n	800b9cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b978:	4a27      	ldr	r2, [pc, #156]	; (800ba18 <chk_lock+0xb4>)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	011b      	lsls	r3, r3, #4
 800b97e:	4413      	add	r3, r2
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d01d      	beq.n	800b9c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b986:	4a24      	ldr	r2, [pc, #144]	; (800ba18 <chk_lock+0xb4>)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	011b      	lsls	r3, r3, #4
 800b98c:	4413      	add	r3, r2
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	429a      	cmp	r2, r3
 800b996:	d116      	bne.n	800b9c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b998:	4a1f      	ldr	r2, [pc, #124]	; (800ba18 <chk_lock+0xb4>)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	011b      	lsls	r3, r3, #4
 800b99e:	4413      	add	r3, r2
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d10c      	bne.n	800b9c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b9ac:	4a1a      	ldr	r2, [pc, #104]	; (800ba18 <chk_lock+0xb4>)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	011b      	lsls	r3, r3, #4
 800b9b2:	4413      	add	r3, r2
 800b9b4:	3308      	adds	r3, #8
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d102      	bne.n	800b9c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b9c0:	e007      	b.n	800b9d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	60fb      	str	r3, [r7, #12]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d9d2      	bls.n	800b978 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d109      	bne.n	800b9ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d102      	bne.n	800b9e4 <chk_lock+0x80>
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d101      	bne.n	800b9e8 <chk_lock+0x84>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	e010      	b.n	800ba0a <chk_lock+0xa6>
 800b9e8:	2312      	movs	r3, #18
 800b9ea:	e00e      	b.n	800ba0a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d108      	bne.n	800ba04 <chk_lock+0xa0>
 800b9f2:	4a09      	ldr	r2, [pc, #36]	; (800ba18 <chk_lock+0xb4>)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	011b      	lsls	r3, r3, #4
 800b9f8:	4413      	add	r3, r2
 800b9fa:	330c      	adds	r3, #12
 800b9fc:	881b      	ldrh	r3, [r3, #0]
 800b9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba02:	d101      	bne.n	800ba08 <chk_lock+0xa4>
 800ba04:	2310      	movs	r3, #16
 800ba06:	e000      	b.n	800ba0a <chk_lock+0xa6>
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	20000770 	.word	0x20000770

0800ba1c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba22:	2300      	movs	r3, #0
 800ba24:	607b      	str	r3, [r7, #4]
 800ba26:	e002      	b.n	800ba2e <enq_lock+0x12>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	607b      	str	r3, [r7, #4]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d806      	bhi.n	800ba42 <enq_lock+0x26>
 800ba34:	4a09      	ldr	r2, [pc, #36]	; (800ba5c <enq_lock+0x40>)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	011b      	lsls	r3, r3, #4
 800ba3a:	4413      	add	r3, r2
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1f2      	bne.n	800ba28 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	bf14      	ite	ne
 800ba48:	2301      	movne	r3, #1
 800ba4a:	2300      	moveq	r3, #0
 800ba4c:	b2db      	uxtb	r3, r3
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	20000770 	.word	0x20000770

0800ba60 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	60fb      	str	r3, [r7, #12]
 800ba6e:	e01f      	b.n	800bab0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ba70:	4a41      	ldr	r2, [pc, #260]	; (800bb78 <inc_lock+0x118>)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	011b      	lsls	r3, r3, #4
 800ba76:	4413      	add	r3, r2
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d113      	bne.n	800baaa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ba82:	4a3d      	ldr	r2, [pc, #244]	; (800bb78 <inc_lock+0x118>)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	011b      	lsls	r3, r3, #4
 800ba88:	4413      	add	r3, r2
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d109      	bne.n	800baaa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ba96:	4a38      	ldr	r2, [pc, #224]	; (800bb78 <inc_lock+0x118>)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	011b      	lsls	r3, r3, #4
 800ba9c:	4413      	add	r3, r2
 800ba9e:	3308      	adds	r3, #8
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d006      	beq.n	800bab8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3301      	adds	r3, #1
 800baae:	60fb      	str	r3, [r7, #12]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d9dc      	bls.n	800ba70 <inc_lock+0x10>
 800bab6:	e000      	b.n	800baba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bab8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2b02      	cmp	r3, #2
 800babe:	d132      	bne.n	800bb26 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bac0:	2300      	movs	r3, #0
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	e002      	b.n	800bacc <inc_lock+0x6c>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	3301      	adds	r3, #1
 800baca:	60fb      	str	r3, [r7, #12]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d806      	bhi.n	800bae0 <inc_lock+0x80>
 800bad2:	4a29      	ldr	r2, [pc, #164]	; (800bb78 <inc_lock+0x118>)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	011b      	lsls	r3, r3, #4
 800bad8:	4413      	add	r3, r2
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1f2      	bne.n	800bac6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d101      	bne.n	800baea <inc_lock+0x8a>
 800bae6:	2300      	movs	r3, #0
 800bae8:	e040      	b.n	800bb6c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	4922      	ldr	r1, [pc, #136]	; (800bb78 <inc_lock+0x118>)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	011b      	lsls	r3, r3, #4
 800baf4:	440b      	add	r3, r1
 800baf6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	689a      	ldr	r2, [r3, #8]
 800bafc:	491e      	ldr	r1, [pc, #120]	; (800bb78 <inc_lock+0x118>)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	011b      	lsls	r3, r3, #4
 800bb02:	440b      	add	r3, r1
 800bb04:	3304      	adds	r3, #4
 800bb06:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	695a      	ldr	r2, [r3, #20]
 800bb0c:	491a      	ldr	r1, [pc, #104]	; (800bb78 <inc_lock+0x118>)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	011b      	lsls	r3, r3, #4
 800bb12:	440b      	add	r3, r1
 800bb14:	3308      	adds	r3, #8
 800bb16:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bb18:	4a17      	ldr	r2, [pc, #92]	; (800bb78 <inc_lock+0x118>)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	011b      	lsls	r3, r3, #4
 800bb1e:	4413      	add	r3, r2
 800bb20:	330c      	adds	r3, #12
 800bb22:	2200      	movs	r2, #0
 800bb24:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d009      	beq.n	800bb40 <inc_lock+0xe0>
 800bb2c:	4a12      	ldr	r2, [pc, #72]	; (800bb78 <inc_lock+0x118>)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	011b      	lsls	r3, r3, #4
 800bb32:	4413      	add	r3, r2
 800bb34:	330c      	adds	r3, #12
 800bb36:	881b      	ldrh	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <inc_lock+0xe0>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	e015      	b.n	800bb6c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d108      	bne.n	800bb58 <inc_lock+0xf8>
 800bb46:	4a0c      	ldr	r2, [pc, #48]	; (800bb78 <inc_lock+0x118>)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	011b      	lsls	r3, r3, #4
 800bb4c:	4413      	add	r3, r2
 800bb4e:	330c      	adds	r3, #12
 800bb50:	881b      	ldrh	r3, [r3, #0]
 800bb52:	3301      	adds	r3, #1
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	e001      	b.n	800bb5c <inc_lock+0xfc>
 800bb58:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb5c:	4906      	ldr	r1, [pc, #24]	; (800bb78 <inc_lock+0x118>)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	011b      	lsls	r3, r3, #4
 800bb62:	440b      	add	r3, r1
 800bb64:	330c      	adds	r3, #12
 800bb66:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	3301      	adds	r3, #1
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr
 800bb78:	20000770 	.word	0x20000770

0800bb7c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	3b01      	subs	r3, #1
 800bb88:	607b      	str	r3, [r7, #4]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d825      	bhi.n	800bbdc <dec_lock+0x60>
		n = Files[i].ctr;
 800bb90:	4a17      	ldr	r2, [pc, #92]	; (800bbf0 <dec_lock+0x74>)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	011b      	lsls	r3, r3, #4
 800bb96:	4413      	add	r3, r2
 800bb98:	330c      	adds	r3, #12
 800bb9a:	881b      	ldrh	r3, [r3, #0]
 800bb9c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bb9e:	89fb      	ldrh	r3, [r7, #14]
 800bba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bba4:	d101      	bne.n	800bbaa <dec_lock+0x2e>
 800bba6:	2300      	movs	r3, #0
 800bba8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bbaa:	89fb      	ldrh	r3, [r7, #14]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <dec_lock+0x3a>
 800bbb0:	89fb      	ldrh	r3, [r7, #14]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bbb6:	4a0e      	ldr	r2, [pc, #56]	; (800bbf0 <dec_lock+0x74>)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	011b      	lsls	r3, r3, #4
 800bbbc:	4413      	add	r3, r2
 800bbbe:	330c      	adds	r3, #12
 800bbc0:	89fa      	ldrh	r2, [r7, #14]
 800bbc2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bbc4:	89fb      	ldrh	r3, [r7, #14]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d105      	bne.n	800bbd6 <dec_lock+0x5a>
 800bbca:	4a09      	ldr	r2, [pc, #36]	; (800bbf0 <dec_lock+0x74>)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	011b      	lsls	r3, r3, #4
 800bbd0:	4413      	add	r3, r2
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	737b      	strb	r3, [r7, #13]
 800bbda:	e001      	b.n	800bbe0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bbdc:	2302      	movs	r3, #2
 800bbde:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bbe0:	7b7b      	ldrb	r3, [r7, #13]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	20000770 	.word	0x20000770

0800bbf4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	60fb      	str	r3, [r7, #12]
 800bc00:	e010      	b.n	800bc24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bc02:	4a0d      	ldr	r2, [pc, #52]	; (800bc38 <clear_lock+0x44>)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	4413      	add	r3, r2
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d105      	bne.n	800bc1e <clear_lock+0x2a>
 800bc12:	4a09      	ldr	r2, [pc, #36]	; (800bc38 <clear_lock+0x44>)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	011b      	lsls	r3, r3, #4
 800bc18:	4413      	add	r3, r2
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	3301      	adds	r3, #1
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d9eb      	bls.n	800bc02 <clear_lock+0xe>
	}
}
 800bc2a:	bf00      	nop
 800bc2c:	bf00      	nop
 800bc2e:	3714      	adds	r7, #20
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	20000770 	.word	0x20000770

0800bc3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	78db      	ldrb	r3, [r3, #3]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d034      	beq.n	800bcba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	7858      	ldrb	r0, [r3, #1]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bc60:	2301      	movs	r3, #1
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	f7ff fd40 	bl	800b6e8 <disk_write>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d002      	beq.n	800bc74 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	73fb      	strb	r3, [r7, #15]
 800bc72:	e022      	b.n	800bcba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	1ad2      	subs	r2, r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d217      	bcs.n	800bcba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	789b      	ldrb	r3, [r3, #2]
 800bc8e:	613b      	str	r3, [r7, #16]
 800bc90:	e010      	b.n	800bcb4 <sync_window+0x78>
					wsect += fs->fsize;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	69db      	ldr	r3, [r3, #28]
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	4413      	add	r3, r2
 800bc9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	7858      	ldrb	r0, [r3, #1]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bca6:	2301      	movs	r3, #1
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	f7ff fd1d 	bl	800b6e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	613b      	str	r3, [r7, #16]
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d8eb      	bhi.n	800bc92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d01b      	beq.n	800bd14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7ff ffad 	bl	800bc3c <sync_window>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d113      	bne.n	800bd14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	7858      	ldrb	r0, [r3, #1]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	f7ff fcd5 	bl	800b6a8 <disk_read>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d004      	beq.n	800bd0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bd04:	f04f 33ff 	mov.w	r3, #4294967295
 800bd08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bd14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
	...

0800bd20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7ff ff87 	bl	800bc3c <sync_window>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bd32:	7bfb      	ldrb	r3, [r7, #15]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d158      	bne.n	800bdea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	2b03      	cmp	r3, #3
 800bd3e:	d148      	bne.n	800bdd2 <sync_fs+0xb2>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	791b      	ldrb	r3, [r3, #4]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d144      	bne.n	800bdd2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	3334      	adds	r3, #52	; 0x34
 800bd4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd50:	2100      	movs	r1, #0
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff fda9 	bl	800b8aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	3334      	adds	r3, #52	; 0x34
 800bd5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd60:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7ff fd38 	bl	800b7da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3334      	adds	r3, #52	; 0x34
 800bd6e:	4921      	ldr	r1, [pc, #132]	; (800bdf4 <sync_fs+0xd4>)
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff fd4d 	bl	800b810 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	3334      	adds	r3, #52	; 0x34
 800bd7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bd7e:	491e      	ldr	r1, [pc, #120]	; (800bdf8 <sync_fs+0xd8>)
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff fd45 	bl	800b810 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	3334      	adds	r3, #52	; 0x34
 800bd8a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	4619      	mov	r1, r3
 800bd94:	4610      	mov	r0, r2
 800bd96:	f7ff fd3b 	bl	800b810 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	3334      	adds	r3, #52	; 0x34
 800bd9e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	4619      	mov	r1, r3
 800bda8:	4610      	mov	r0, r2
 800bdaa:	f7ff fd31 	bl	800b810 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	7858      	ldrb	r0, [r3, #1]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	f7ff fc8e 	bl	800b6e8 <disk_write>
			fs->fsi_flag = 0;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	785b      	ldrb	r3, [r3, #1]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	2100      	movs	r1, #0
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff fca4 	bl	800b728 <disk_ioctl>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <sync_fs+0xca>
 800bde6:	2301      	movs	r3, #1
 800bde8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3710      	adds	r7, #16
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	41615252 	.word	0x41615252
 800bdf8:	61417272 	.word	0x61417272

0800bdfc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	3b02      	subs	r3, #2
 800be0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	3b02      	subs	r3, #2
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	429a      	cmp	r2, r3
 800be16:	d301      	bcc.n	800be1c <clust2sect+0x20>
 800be18:	2300      	movs	r3, #0
 800be1a:	e008      	b.n	800be2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	895b      	ldrh	r3, [r3, #10]
 800be20:	461a      	mov	r2, r3
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	fb03 f202 	mul.w	r2, r3, r2
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2c:	4413      	add	r3, r2
}
 800be2e:	4618      	mov	r0, r3
 800be30:	370c      	adds	r7, #12
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b086      	sub	sp, #24
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d904      	bls.n	800be5a <get_fat+0x20>
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	683a      	ldr	r2, [r7, #0]
 800be56:	429a      	cmp	r2, r3
 800be58:	d302      	bcc.n	800be60 <get_fat+0x26>
		val = 1;	/* Internal error */
 800be5a:	2301      	movs	r3, #1
 800be5c:	617b      	str	r3, [r7, #20]
 800be5e:	e08f      	b.n	800bf80 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800be60:	f04f 33ff 	mov.w	r3, #4294967295
 800be64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	2b03      	cmp	r3, #3
 800be6c:	d062      	beq.n	800bf34 <get_fat+0xfa>
 800be6e:	2b03      	cmp	r3, #3
 800be70:	dc7c      	bgt.n	800bf6c <get_fat+0x132>
 800be72:	2b01      	cmp	r3, #1
 800be74:	d002      	beq.n	800be7c <get_fat+0x42>
 800be76:	2b02      	cmp	r3, #2
 800be78:	d042      	beq.n	800bf00 <get_fat+0xc6>
 800be7a:	e077      	b.n	800bf6c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	60fb      	str	r3, [r7, #12]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	085b      	lsrs	r3, r3, #1
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	4413      	add	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	0a5b      	lsrs	r3, r3, #9
 800be92:	4413      	add	r3, r2
 800be94:	4619      	mov	r1, r3
 800be96:	6938      	ldr	r0, [r7, #16]
 800be98:	f7ff ff14 	bl	800bcc4 <move_window>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d167      	bne.n	800bf72 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	1c5a      	adds	r2, r3, #1
 800bea6:	60fa      	str	r2, [r7, #12]
 800bea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beac:	693a      	ldr	r2, [r7, #16]
 800beae:	4413      	add	r3, r2
 800beb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800beb4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	0a5b      	lsrs	r3, r3, #9
 800bebe:	4413      	add	r3, r2
 800bec0:	4619      	mov	r1, r3
 800bec2:	6938      	ldr	r0, [r7, #16]
 800bec4:	f7ff fefe 	bl	800bcc4 <move_window>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d153      	bne.n	800bf76 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	4413      	add	r3, r2
 800bed8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bedc:	021b      	lsls	r3, r3, #8
 800bede:	461a      	mov	r2, r3
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	f003 0301 	and.w	r3, r3, #1
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <get_fat+0xbc>
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	091b      	lsrs	r3, r3, #4
 800bef4:	e002      	b.n	800befc <get_fat+0xc2>
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800befc:	617b      	str	r3, [r7, #20]
			break;
 800befe:	e03f      	b.n	800bf80 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	0a1b      	lsrs	r3, r3, #8
 800bf08:	4413      	add	r3, r2
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	6938      	ldr	r0, [r7, #16]
 800bf0e:	f7ff fed9 	bl	800bcc4 <move_window>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d130      	bne.n	800bf7a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bf26:	4413      	add	r3, r2
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7ff fc1b 	bl	800b764 <ld_word>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	617b      	str	r3, [r7, #20]
			break;
 800bf32:	e025      	b.n	800bf80 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	09db      	lsrs	r3, r3, #7
 800bf3c:	4413      	add	r3, r2
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6938      	ldr	r0, [r7, #16]
 800bf42:	f7ff febf 	bl	800bcc4 <move_window>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d118      	bne.n	800bf7e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bf5a:	4413      	add	r3, r2
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7ff fc19 	bl	800b794 <ld_dword>
 800bf62:	4603      	mov	r3, r0
 800bf64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bf68:	617b      	str	r3, [r7, #20]
			break;
 800bf6a:	e009      	b.n	800bf80 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	617b      	str	r3, [r7, #20]
 800bf70:	e006      	b.n	800bf80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf72:	bf00      	nop
 800bf74:	e004      	b.n	800bf80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf76:	bf00      	nop
 800bf78:	e002      	b.n	800bf80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf7a:	bf00      	nop
 800bf7c:	e000      	b.n	800bf80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf7e:	bf00      	nop
		}
	}

	return val;
 800bf80:	697b      	ldr	r3, [r7, #20]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3718      	adds	r7, #24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bf8a:	b590      	push	{r4, r7, lr}
 800bf8c:	b089      	sub	sp, #36	; 0x24
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	60f8      	str	r0, [r7, #12]
 800bf92:	60b9      	str	r1, [r7, #8]
 800bf94:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bf96:	2302      	movs	r3, #2
 800bf98:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	f240 80d2 	bls.w	800c146 <put_fat+0x1bc>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	f080 80cc 	bcs.w	800c146 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	2b03      	cmp	r3, #3
 800bfb4:	f000 8096 	beq.w	800c0e4 <put_fat+0x15a>
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	f300 80cd 	bgt.w	800c158 <put_fat+0x1ce>
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d002      	beq.n	800bfc8 <put_fat+0x3e>
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d06e      	beq.n	800c0a4 <put_fat+0x11a>
 800bfc6:	e0c7      	b.n	800c158 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	61bb      	str	r3, [r7, #24]
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	085b      	lsrs	r3, r3, #1
 800bfd0:	69ba      	ldr	r2, [r7, #24]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	0a5b      	lsrs	r3, r3, #9
 800bfde:	4413      	add	r3, r2
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7ff fe6e 	bl	800bcc4 <move_window>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfec:	7ffb      	ldrb	r3, [r7, #31]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f040 80ab 	bne.w	800c14a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	1c59      	adds	r1, r3, #1
 800bffe:	61b9      	str	r1, [r7, #24]
 800c000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c004:	4413      	add	r3, r2
 800c006:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	f003 0301 	and.w	r3, r3, #1
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00d      	beq.n	800c02e <put_fat+0xa4>
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	b25b      	sxtb	r3, r3
 800c018:	f003 030f 	and.w	r3, r3, #15
 800c01c:	b25a      	sxtb	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	b2db      	uxtb	r3, r3
 800c022:	011b      	lsls	r3, r3, #4
 800c024:	b25b      	sxtb	r3, r3
 800c026:	4313      	orrs	r3, r2
 800c028:	b25b      	sxtb	r3, r3
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	e001      	b.n	800c032 <put_fat+0xa8>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	b2db      	uxtb	r3, r3
 800c032:	697a      	ldr	r2, [r7, #20]
 800c034:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2201      	movs	r2, #1
 800c03a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	0a5b      	lsrs	r3, r3, #9
 800c044:	4413      	add	r3, r2
 800c046:	4619      	mov	r1, r3
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f7ff fe3b 	bl	800bcc4 <move_window>
 800c04e:	4603      	mov	r3, r0
 800c050:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c052:	7ffb      	ldrb	r3, [r7, #31]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d17a      	bne.n	800c14e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c064:	4413      	add	r3, r2
 800c066:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d003      	beq.n	800c07a <put_fat+0xf0>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	091b      	lsrs	r3, r3, #4
 800c076:	b2db      	uxtb	r3, r3
 800c078:	e00e      	b.n	800c098 <put_fat+0x10e>
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	b25b      	sxtb	r3, r3
 800c080:	f023 030f 	bic.w	r3, r3, #15
 800c084:	b25a      	sxtb	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	0a1b      	lsrs	r3, r3, #8
 800c08a:	b25b      	sxtb	r3, r3
 800c08c:	f003 030f 	and.w	r3, r3, #15
 800c090:	b25b      	sxtb	r3, r3
 800c092:	4313      	orrs	r3, r2
 800c094:	b25b      	sxtb	r3, r3
 800c096:	b2db      	uxtb	r3, r3
 800c098:	697a      	ldr	r2, [r7, #20]
 800c09a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	70da      	strb	r2, [r3, #3]
			break;
 800c0a2:	e059      	b.n	800c158 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	0a1b      	lsrs	r3, r3, #8
 800c0ac:	4413      	add	r3, r2
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f7ff fe07 	bl	800bcc4 <move_window>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0ba:	7ffb      	ldrb	r3, [r7, #31]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d148      	bne.n	800c152 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	005b      	lsls	r3, r3, #1
 800c0ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c0ce:	4413      	add	r3, r2
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	b292      	uxth	r2, r2
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff fb7f 	bl	800b7da <st_word>
			fs->wflag = 1;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	70da      	strb	r2, [r3, #3]
			break;
 800c0e2:	e039      	b.n	800c158 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	09db      	lsrs	r3, r3, #7
 800c0ec:	4413      	add	r3, r2
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f7ff fde7 	bl	800bcc4 <move_window>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0fa:	7ffb      	ldrb	r3, [r7, #31]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d12a      	bne.n	800c156 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c114:	4413      	add	r3, r2
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff fb3c 	bl	800b794 <ld_dword>
 800c11c:	4603      	mov	r3, r0
 800c11e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c122:	4323      	orrs	r3, r4
 800c124:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c134:	4413      	add	r3, r2
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	4618      	mov	r0, r3
 800c13a:	f7ff fb69 	bl	800b810 <st_dword>
			fs->wflag = 1;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2201      	movs	r2, #1
 800c142:	70da      	strb	r2, [r3, #3]
			break;
 800c144:	e008      	b.n	800c158 <put_fat+0x1ce>
		}
	}
 800c146:	bf00      	nop
 800c148:	e006      	b.n	800c158 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c14a:	bf00      	nop
 800c14c:	e004      	b.n	800c158 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c14e:	bf00      	nop
 800c150:	e002      	b.n	800c158 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c152:	bf00      	nop
 800c154:	e000      	b.n	800c158 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c156:	bf00      	nop
	return res;
 800c158:	7ffb      	ldrb	r3, [r7, #31]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3724      	adds	r7, #36	; 0x24
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd90      	pop	{r4, r7, pc}

0800c162 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b088      	sub	sp, #32
 800c166:	af00      	add	r7, sp, #0
 800c168:	60f8      	str	r0, [r7, #12]
 800c16a:	60b9      	str	r1, [r7, #8]
 800c16c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c16e:	2300      	movs	r3, #0
 800c170:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d904      	bls.n	800c188 <remove_chain+0x26>
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	699b      	ldr	r3, [r3, #24]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	429a      	cmp	r2, r3
 800c186:	d301      	bcc.n	800c18c <remove_chain+0x2a>
 800c188:	2302      	movs	r3, #2
 800c18a:	e04b      	b.n	800c224 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00c      	beq.n	800c1ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c192:	f04f 32ff 	mov.w	r2, #4294967295
 800c196:	6879      	ldr	r1, [r7, #4]
 800c198:	69b8      	ldr	r0, [r7, #24]
 800c19a:	f7ff fef6 	bl	800bf8a <put_fat>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c1a2:	7ffb      	ldrb	r3, [r7, #31]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d001      	beq.n	800c1ac <remove_chain+0x4a>
 800c1a8:	7ffb      	ldrb	r3, [r7, #31]
 800c1aa:	e03b      	b.n	800c224 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c1ac:	68b9      	ldr	r1, [r7, #8]
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f7ff fe43 	bl	800be3a <get_fat>
 800c1b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d031      	beq.n	800c220 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d101      	bne.n	800c1c6 <remove_chain+0x64>
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	e02e      	b.n	800c224 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1cc:	d101      	bne.n	800c1d2 <remove_chain+0x70>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e028      	b.n	800c224 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	68b9      	ldr	r1, [r7, #8]
 800c1d6:	69b8      	ldr	r0, [r7, #24]
 800c1d8:	f7ff fed7 	bl	800bf8a <put_fat>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c1e0:	7ffb      	ldrb	r3, [r7, #31]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d001      	beq.n	800c1ea <remove_chain+0x88>
 800c1e6:	7ffb      	ldrb	r3, [r7, #31]
 800c1e8:	e01c      	b.n	800c224 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	695a      	ldr	r2, [r3, #20]
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	699b      	ldr	r3, [r3, #24]
 800c1f2:	3b02      	subs	r3, #2
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d20b      	bcs.n	800c210 <remove_chain+0xae>
			fs->free_clst++;
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	695b      	ldr	r3, [r3, #20]
 800c1fc:	1c5a      	adds	r2, r3, #1
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	791b      	ldrb	r3, [r3, #4]
 800c206:	f043 0301 	orr.w	r3, r3, #1
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	68ba      	ldr	r2, [r7, #8]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d3c6      	bcc.n	800c1ac <remove_chain+0x4a>
 800c21e:	e000      	b.n	800c222 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c220:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	3720      	adds	r7, #32
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b088      	sub	sp, #32
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10d      	bne.n	800c25e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d004      	beq.n	800c258 <create_chain+0x2c>
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	699b      	ldr	r3, [r3, #24]
 800c252:	69ba      	ldr	r2, [r7, #24]
 800c254:	429a      	cmp	r2, r3
 800c256:	d31b      	bcc.n	800c290 <create_chain+0x64>
 800c258:	2301      	movs	r3, #1
 800c25a:	61bb      	str	r3, [r7, #24]
 800c25c:	e018      	b.n	800c290 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c25e:	6839      	ldr	r1, [r7, #0]
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7ff fdea 	bl	800be3a <get_fat>
 800c266:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d801      	bhi.n	800c272 <create_chain+0x46>
 800c26e:	2301      	movs	r3, #1
 800c270:	e070      	b.n	800c354 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c278:	d101      	bne.n	800c27e <create_chain+0x52>
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	e06a      	b.n	800c354 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	429a      	cmp	r2, r3
 800c286:	d201      	bcs.n	800c28c <create_chain+0x60>
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	e063      	b.n	800c354 <create_chain+0x128>
		scl = clst;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	3301      	adds	r3, #1
 800c298:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	699b      	ldr	r3, [r3, #24]
 800c29e:	69fa      	ldr	r2, [r7, #28]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d307      	bcc.n	800c2b4 <create_chain+0x88>
				ncl = 2;
 800c2a4:	2302      	movs	r3, #2
 800c2a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c2a8:	69fa      	ldr	r2, [r7, #28]
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d901      	bls.n	800c2b4 <create_chain+0x88>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	e04f      	b.n	800c354 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c2b4:	69f9      	ldr	r1, [r7, #28]
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff fdbf 	bl	800be3a <get_fat>
 800c2bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00e      	beq.n	800c2e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d003      	beq.n	800c2d2 <create_chain+0xa6>
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d0:	d101      	bne.n	800c2d6 <create_chain+0xaa>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	e03e      	b.n	800c354 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c2d6:	69fa      	ldr	r2, [r7, #28]
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d1da      	bne.n	800c294 <create_chain+0x68>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e038      	b.n	800c354 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c2e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e8:	69f9      	ldr	r1, [r7, #28]
 800c2ea:	6938      	ldr	r0, [r7, #16]
 800c2ec:	f7ff fe4d 	bl	800bf8a <put_fat>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d109      	bne.n	800c30e <create_chain+0xe2>
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d006      	beq.n	800c30e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c300:	69fa      	ldr	r2, [r7, #28]
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6938      	ldr	r0, [r7, #16]
 800c306:	f7ff fe40 	bl	800bf8a <put_fat>
 800c30a:	4603      	mov	r3, r0
 800c30c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c30e:	7dfb      	ldrb	r3, [r7, #23]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d116      	bne.n	800c342 <create_chain+0x116>
		fs->last_clst = ncl;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	69fa      	ldr	r2, [r7, #28]
 800c318:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	695a      	ldr	r2, [r3, #20]
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	699b      	ldr	r3, [r3, #24]
 800c322:	3b02      	subs	r3, #2
 800c324:	429a      	cmp	r2, r3
 800c326:	d804      	bhi.n	800c332 <create_chain+0x106>
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	695b      	ldr	r3, [r3, #20]
 800c32c:	1e5a      	subs	r2, r3, #1
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	791b      	ldrb	r3, [r3, #4]
 800c336:	f043 0301 	orr.w	r3, r3, #1
 800c33a:	b2da      	uxtb	r2, r3
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	711a      	strb	r2, [r3, #4]
 800c340:	e007      	b.n	800c352 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c342:	7dfb      	ldrb	r3, [r7, #23]
 800c344:	2b01      	cmp	r3, #1
 800c346:	d102      	bne.n	800c34e <create_chain+0x122>
 800c348:	f04f 33ff 	mov.w	r3, #4294967295
 800c34c:	e000      	b.n	800c350 <create_chain+0x124>
 800c34e:	2301      	movs	r3, #1
 800c350:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c352:	69fb      	ldr	r3, [r7, #28]
}
 800c354:	4618      	mov	r0, r3
 800c356:	3720      	adds	r7, #32
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b087      	sub	sp, #28
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c370:	3304      	adds	r3, #4
 800c372:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	0a5b      	lsrs	r3, r3, #9
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	8952      	ldrh	r2, [r2, #10]
 800c37c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c380:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	1d1a      	adds	r2, r3, #4
 800c386:	613a      	str	r2, [r7, #16]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <clmt_clust+0x3a>
 800c392:	2300      	movs	r3, #0
 800c394:	e010      	b.n	800c3b8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d307      	bcc.n	800c3ae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	617b      	str	r3, [r7, #20]
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c3ac:	e7e9      	b.n	800c382 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c3ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	4413      	add	r3, r2
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	371c      	adds	r7, #28
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3da:	d204      	bcs.n	800c3e6 <dir_sdi+0x22>
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	f003 031f 	and.w	r3, r3, #31
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <dir_sdi+0x26>
		return FR_INT_ERR;
 800c3e6:	2302      	movs	r3, #2
 800c3e8:	e063      	b.n	800c4b2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d106      	bne.n	800c40a <dir_sdi+0x46>
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	2b02      	cmp	r3, #2
 800c402:	d902      	bls.n	800c40a <dir_sdi+0x46>
		clst = fs->dirbase;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c408:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10c      	bne.n	800c42a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	095b      	lsrs	r3, r3, #5
 800c414:	693a      	ldr	r2, [r7, #16]
 800c416:	8912      	ldrh	r2, [r2, #8]
 800c418:	4293      	cmp	r3, r2
 800c41a:	d301      	bcc.n	800c420 <dir_sdi+0x5c>
 800c41c:	2302      	movs	r3, #2
 800c41e:	e048      	b.n	800c4b2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	61da      	str	r2, [r3, #28]
 800c428:	e029      	b.n	800c47e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	895b      	ldrh	r3, [r3, #10]
 800c42e:	025b      	lsls	r3, r3, #9
 800c430:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c432:	e019      	b.n	800c468 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6979      	ldr	r1, [r7, #20]
 800c438:	4618      	mov	r0, r3
 800c43a:	f7ff fcfe 	bl	800be3a <get_fat>
 800c43e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c446:	d101      	bne.n	800c44c <dir_sdi+0x88>
 800c448:	2301      	movs	r3, #1
 800c44a:	e032      	b.n	800c4b2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d904      	bls.n	800c45c <dir_sdi+0x98>
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d301      	bcc.n	800c460 <dir_sdi+0x9c>
 800c45c:	2302      	movs	r3, #2
 800c45e:	e028      	b.n	800c4b2 <dir_sdi+0xee>
			ofs -= csz;
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d2e1      	bcs.n	800c434 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c470:	6979      	ldr	r1, [r7, #20]
 800c472:	6938      	ldr	r0, [r7, #16]
 800c474:	f7ff fcc2 	bl	800bdfc <clust2sect>
 800c478:	4602      	mov	r2, r0
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	697a      	ldr	r2, [r7, #20]
 800c482:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	69db      	ldr	r3, [r3, #28]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <dir_sdi+0xcc>
 800c48c:	2302      	movs	r3, #2
 800c48e:	e010      	b.n	800c4b2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	69da      	ldr	r2, [r3, #28]
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	0a5b      	lsrs	r3, r3, #9
 800c498:	441a      	add	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4aa:	441a      	add	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b086      	sub	sp, #24
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	695b      	ldr	r3, [r3, #20]
 800c4ce:	3320      	adds	r3, #32
 800c4d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	69db      	ldr	r3, [r3, #28]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <dir_next+0x28>
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4e0:	d301      	bcc.n	800c4e6 <dir_next+0x2c>
 800c4e2:	2304      	movs	r3, #4
 800c4e4:	e0aa      	b.n	800c63c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f040 8098 	bne.w	800c622 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	69db      	ldr	r3, [r3, #28]
 800c4f6:	1c5a      	adds	r2, r3, #1
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10b      	bne.n	800c51c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	095b      	lsrs	r3, r3, #5
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	8912      	ldrh	r2, [r2, #8]
 800c50c:	4293      	cmp	r3, r2
 800c50e:	f0c0 8088 	bcc.w	800c622 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	61da      	str	r2, [r3, #28]
 800c518:	2304      	movs	r3, #4
 800c51a:	e08f      	b.n	800c63c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	0a5b      	lsrs	r3, r3, #9
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	8952      	ldrh	r2, [r2, #10]
 800c524:	3a01      	subs	r2, #1
 800c526:	4013      	ands	r3, r2
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d17a      	bne.n	800c622 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	4619      	mov	r1, r3
 800c534:	4610      	mov	r0, r2
 800c536:	f7ff fc80 	bl	800be3a <get_fat>
 800c53a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d801      	bhi.n	800c546 <dir_next+0x8c>
 800c542:	2302      	movs	r3, #2
 800c544:	e07a      	b.n	800c63c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54c:	d101      	bne.n	800c552 <dir_next+0x98>
 800c54e:	2301      	movs	r3, #1
 800c550:	e074      	b.n	800c63c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d358      	bcc.n	800c60e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d104      	bne.n	800c56c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	61da      	str	r2, [r3, #28]
 800c568:	2304      	movs	r3, #4
 800c56a:	e067      	b.n	800c63c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	699b      	ldr	r3, [r3, #24]
 800c572:	4619      	mov	r1, r3
 800c574:	4610      	mov	r0, r2
 800c576:	f7ff fe59 	bl	800c22c <create_chain>
 800c57a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <dir_next+0xcc>
 800c582:	2307      	movs	r3, #7
 800c584:	e05a      	b.n	800c63c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d101      	bne.n	800c590 <dir_next+0xd6>
 800c58c:	2302      	movs	r3, #2
 800c58e:	e055      	b.n	800c63c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c596:	d101      	bne.n	800c59c <dir_next+0xe2>
 800c598:	2301      	movs	r3, #1
 800c59a:	e04f      	b.n	800c63c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f7ff fb4d 	bl	800bc3c <sync_window>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <dir_next+0xf2>
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e047      	b.n	800c63c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	3334      	adds	r3, #52	; 0x34
 800c5b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7ff f977 	bl	800b8aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5bc:	2300      	movs	r3, #0
 800c5be:	613b      	str	r3, [r7, #16]
 800c5c0:	6979      	ldr	r1, [r7, #20]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f7ff fc1a 	bl	800bdfc <clust2sect>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	631a      	str	r2, [r3, #48]	; 0x30
 800c5ce:	e012      	b.n	800c5f6 <dir_next+0x13c>
						fs->wflag = 1;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f7ff fb30 	bl	800bc3c <sync_window>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d001      	beq.n	800c5e6 <dir_next+0x12c>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e02a      	b.n	800c63c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	613b      	str	r3, [r7, #16]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	631a      	str	r2, [r3, #48]	; 0x30
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	895b      	ldrh	r3, [r3, #10]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d3e6      	bcc.n	800c5d0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	1ad2      	subs	r2, r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c614:	6979      	ldr	r1, [r7, #20]
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f7ff fbf0 	bl	800bdfc <clust2sect>
 800c61c:	4602      	mov	r2, r0
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c634:	441a      	add	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3718      	adds	r7, #24
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b086      	sub	sp, #24
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c654:	2100      	movs	r1, #0
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7ff feb4 	bl	800c3c4 <dir_sdi>
 800c65c:	4603      	mov	r3, r0
 800c65e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c660:	7dfb      	ldrb	r3, [r7, #23]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d12b      	bne.n	800c6be <dir_alloc+0x7a>
		n = 0;
 800c666:	2300      	movs	r3, #0
 800c668:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	4619      	mov	r1, r3
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f7ff fb27 	bl	800bcc4 <move_window>
 800c676:	4603      	mov	r3, r0
 800c678:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c67a:	7dfb      	ldrb	r3, [r7, #23]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d11d      	bne.n	800c6bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6a1b      	ldr	r3, [r3, #32]
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	2be5      	cmp	r3, #229	; 0xe5
 800c688:	d004      	beq.n	800c694 <dir_alloc+0x50>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6a1b      	ldr	r3, [r3, #32]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d107      	bne.n	800c6a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	3301      	adds	r3, #1
 800c698:	613b      	str	r3, [r7, #16]
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d102      	bne.n	800c6a8 <dir_alloc+0x64>
 800c6a2:	e00c      	b.n	800c6be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7ff ff05 	bl	800c4ba <dir_next>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c6b4:	7dfb      	ldrb	r3, [r7, #23]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d0d7      	beq.n	800c66a <dir_alloc+0x26>
 800c6ba:	e000      	b.n	800c6be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c6bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c6be:	7dfb      	ldrb	r3, [r7, #23]
 800c6c0:	2b04      	cmp	r3, #4
 800c6c2:	d101      	bne.n	800c6c8 <dir_alloc+0x84>
 800c6c4:	2307      	movs	r3, #7
 800c6c6:	75fb      	strb	r3, [r7, #23]
	return res;
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3718      	adds	r7, #24
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b084      	sub	sp, #16
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	331a      	adds	r3, #26
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7ff f83f 	bl	800b764 <ld_word>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d109      	bne.n	800c706 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	3314      	adds	r3, #20
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7ff f834 	bl	800b764 <ld_word>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	041b      	lsls	r3, r3, #16
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	4313      	orrs	r3, r2
 800c704:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c706:	68fb      	ldr	r3, [r7, #12]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	331a      	adds	r3, #26
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	b292      	uxth	r2, r2
 800c724:	4611      	mov	r1, r2
 800c726:	4618      	mov	r0, r3
 800c728:	f7ff f857 	bl	800b7da <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	2b03      	cmp	r3, #3
 800c732:	d109      	bne.n	800c748 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	f103 0214 	add.w	r2, r3, #20
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	0c1b      	lsrs	r3, r3, #16
 800c73e:	b29b      	uxth	r3, r3
 800c740:	4619      	mov	r1, r3
 800c742:	4610      	mov	r0, r2
 800c744:	f7ff f849 	bl	800b7da <st_word>
	}
}
 800c748:	bf00      	nop
 800c74a:	3710      	adds	r7, #16
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c750:	b590      	push	{r4, r7, lr}
 800c752:	b087      	sub	sp, #28
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	331a      	adds	r3, #26
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff f800 	bl	800b764 <ld_word>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d001      	beq.n	800c76e <cmp_lfn+0x1e>
 800c76a:	2300      	movs	r3, #0
 800c76c:	e059      	b.n	800c822 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c776:	1e5a      	subs	r2, r3, #1
 800c778:	4613      	mov	r3, r2
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	4413      	add	r3, r2
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	4413      	add	r3, r2
 800c782:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c784:	2301      	movs	r3, #1
 800c786:	81fb      	strh	r3, [r7, #14]
 800c788:	2300      	movs	r3, #0
 800c78a:	613b      	str	r3, [r7, #16]
 800c78c:	e033      	b.n	800c7f6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c78e:	4a27      	ldr	r2, [pc, #156]	; (800c82c <cmp_lfn+0xdc>)
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	4413      	add	r3, r2
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	461a      	mov	r2, r3
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	4413      	add	r3, r2
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7fe ffe1 	bl	800b764 <ld_word>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c7a6:	89fb      	ldrh	r3, [r7, #14]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d01a      	beq.n	800c7e2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	2bfe      	cmp	r3, #254	; 0xfe
 800c7b0:	d812      	bhi.n	800c7d8 <cmp_lfn+0x88>
 800c7b2:	89bb      	ldrh	r3, [r7, #12]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f002 f883 	bl	800e8c0 <ff_wtoupper>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	461c      	mov	r4, r3
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	1c5a      	adds	r2, r3, #1
 800c7c2:	617a      	str	r2, [r7, #20]
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	881b      	ldrh	r3, [r3, #0]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f002 f877 	bl	800e8c0 <ff_wtoupper>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	429c      	cmp	r4, r3
 800c7d6:	d001      	beq.n	800c7dc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e022      	b.n	800c822 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c7dc:	89bb      	ldrh	r3, [r7, #12]
 800c7de:	81fb      	strh	r3, [r7, #14]
 800c7e0:	e006      	b.n	800c7f0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c7e2:	89bb      	ldrh	r3, [r7, #12]
 800c7e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d001      	beq.n	800c7f0 <cmp_lfn+0xa0>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	e018      	b.n	800c822 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	613b      	str	r3, [r7, #16]
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	2b0c      	cmp	r3, #12
 800c7fa:	d9c8      	bls.n	800c78e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00b      	beq.n	800c820 <cmp_lfn+0xd0>
 800c808:	89fb      	ldrh	r3, [r7, #14]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d008      	beq.n	800c820 <cmp_lfn+0xd0>
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	4413      	add	r3, r2
 800c816:	881b      	ldrh	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <cmp_lfn+0xd0>
 800c81c:	2300      	movs	r3, #0
 800c81e:	e000      	b.n	800c822 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c820:	2301      	movs	r3, #1
}
 800c822:	4618      	mov	r0, r3
 800c824:	371c      	adds	r7, #28
 800c826:	46bd      	mov	sp, r7
 800c828:	bd90      	pop	{r4, r7, pc}
 800c82a:	bf00      	nop
 800c82c:	08014f8c 	.word	0x08014f8c

0800c830 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	331a      	adds	r3, #26
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fe ff90 	bl	800b764 <ld_word>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d001      	beq.n	800c84e <pick_lfn+0x1e>
 800c84a:	2300      	movs	r3, #0
 800c84c:	e04d      	b.n	800c8ea <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c856:	1e5a      	subs	r2, r3, #1
 800c858:	4613      	mov	r3, r2
 800c85a:	005b      	lsls	r3, r3, #1
 800c85c:	4413      	add	r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4413      	add	r3, r2
 800c862:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c864:	2301      	movs	r3, #1
 800c866:	81fb      	strh	r3, [r7, #14]
 800c868:	2300      	movs	r3, #0
 800c86a:	613b      	str	r3, [r7, #16]
 800c86c:	e028      	b.n	800c8c0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c86e:	4a21      	ldr	r2, [pc, #132]	; (800c8f4 <pick_lfn+0xc4>)
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	4413      	add	r3, r2
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	461a      	mov	r2, r3
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	4413      	add	r3, r2
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fe ff71 	bl	800b764 <ld_word>
 800c882:	4603      	mov	r3, r0
 800c884:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c886:	89fb      	ldrh	r3, [r7, #14]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00f      	beq.n	800c8ac <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	2bfe      	cmp	r3, #254	; 0xfe
 800c890:	d901      	bls.n	800c896 <pick_lfn+0x66>
 800c892:	2300      	movs	r3, #0
 800c894:	e029      	b.n	800c8ea <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c896:	89bb      	ldrh	r3, [r7, #12]
 800c898:	81fb      	strh	r3, [r7, #14]
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	1c5a      	adds	r2, r3, #1
 800c89e:	617a      	str	r2, [r7, #20]
 800c8a0:	005b      	lsls	r3, r3, #1
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	89fa      	ldrh	r2, [r7, #14]
 800c8a8:	801a      	strh	r2, [r3, #0]
 800c8aa:	e006      	b.n	800c8ba <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c8ac:	89bb      	ldrh	r3, [r7, #12]
 800c8ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d001      	beq.n	800c8ba <pick_lfn+0x8a>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	e017      	b.n	800c8ea <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	613b      	str	r3, [r7, #16]
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	2b0c      	cmp	r3, #12
 800c8c4:	d9d3      	bls.n	800c86e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00a      	beq.n	800c8e8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2bfe      	cmp	r3, #254	; 0xfe
 800c8d6:	d901      	bls.n	800c8dc <pick_lfn+0xac>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	e006      	b.n	800c8ea <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c8e8:	2301      	movs	r3, #1
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3718      	adds	r7, #24
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	08014f8c 	.word	0x08014f8c

0800c8f8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b088      	sub	sp, #32
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	4611      	mov	r1, r2
 800c904:	461a      	mov	r2, r3
 800c906:	460b      	mov	r3, r1
 800c908:	71fb      	strb	r3, [r7, #7]
 800c90a:	4613      	mov	r3, r2
 800c90c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	330d      	adds	r3, #13
 800c912:	79ba      	ldrb	r2, [r7, #6]
 800c914:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	330b      	adds	r3, #11
 800c91a:	220f      	movs	r2, #15
 800c91c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	330c      	adds	r3, #12
 800c922:	2200      	movs	r2, #0
 800c924:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	331a      	adds	r3, #26
 800c92a:	2100      	movs	r1, #0
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fe ff54 	bl	800b7da <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c932:	79fb      	ldrb	r3, [r7, #7]
 800c934:	1e5a      	subs	r2, r3, #1
 800c936:	4613      	mov	r3, r2
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	4413      	add	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	82fb      	strh	r3, [r7, #22]
 800c946:	2300      	movs	r3, #0
 800c948:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c94a:	8afb      	ldrh	r3, [r7, #22]
 800c94c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c950:	4293      	cmp	r3, r2
 800c952:	d007      	beq.n	800c964 <put_lfn+0x6c>
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	1c5a      	adds	r2, r3, #1
 800c958:	61fa      	str	r2, [r7, #28]
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	4413      	add	r3, r2
 800c960:	881b      	ldrh	r3, [r3, #0]
 800c962:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c964:	4a17      	ldr	r2, [pc, #92]	; (800c9c4 <put_lfn+0xcc>)
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	4413      	add	r3, r2
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	461a      	mov	r2, r3
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	4413      	add	r3, r2
 800c972:	8afa      	ldrh	r2, [r7, #22]
 800c974:	4611      	mov	r1, r2
 800c976:	4618      	mov	r0, r3
 800c978:	f7fe ff2f 	bl	800b7da <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c97c:	8afb      	ldrh	r3, [r7, #22]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d102      	bne.n	800c988 <put_lfn+0x90>
 800c982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c986:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	3301      	adds	r3, #1
 800c98c:	61bb      	str	r3, [r7, #24]
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	2b0c      	cmp	r3, #12
 800c992:	d9da      	bls.n	800c94a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c994:	8afb      	ldrh	r3, [r7, #22]
 800c996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d006      	beq.n	800c9ac <put_lfn+0xb4>
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	005b      	lsls	r3, r3, #1
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d103      	bne.n	800c9b4 <put_lfn+0xbc>
 800c9ac:	79fb      	ldrb	r3, [r7, #7]
 800c9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9b2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	79fa      	ldrb	r2, [r7, #7]
 800c9b8:	701a      	strb	r2, [r3, #0]
}
 800c9ba:	bf00      	nop
 800c9bc:	3720      	adds	r7, #32
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	08014f8c 	.word	0x08014f8c

0800c9c8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b08c      	sub	sp, #48	; 0x30
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
 800c9d4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c9d6:	220b      	movs	r2, #11
 800c9d8:	68b9      	ldr	r1, [r7, #8]
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f7fe ff44 	bl	800b868 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	2b05      	cmp	r3, #5
 800c9e4:	d92b      	bls.n	800ca3e <gen_numname+0x76>
		sr = seq;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c9ea:	e022      	b.n	800ca32 <gen_numname+0x6a>
			wc = *lfn++;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	1c9a      	adds	r2, r3, #2
 800c9f0:	607a      	str	r2, [r7, #4]
 800c9f2:	881b      	ldrh	r3, [r3, #0]
 800c9f4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9fa:	e017      	b.n	800ca2c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	005a      	lsls	r2, r3, #1
 800ca00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	4413      	add	r3, r2
 800ca08:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ca0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca0c:	085b      	lsrs	r3, r3, #1
 800ca0e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d005      	beq.n	800ca26 <gen_numname+0x5e>
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ca20:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ca24:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ca26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca28:	3301      	adds	r3, #1
 800ca2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2e:	2b0f      	cmp	r3, #15
 800ca30:	d9e4      	bls.n	800c9fc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1d8      	bne.n	800c9ec <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ca3e:	2307      	movs	r3, #7
 800ca40:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	f003 030f 	and.w	r3, r3, #15
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	3330      	adds	r3, #48	; 0x30
 800ca4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ca52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca56:	2b39      	cmp	r3, #57	; 0x39
 800ca58:	d904      	bls.n	800ca64 <gen_numname+0x9c>
 800ca5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca5e:	3307      	adds	r3, #7
 800ca60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca66:	1e5a      	subs	r2, r3, #1
 800ca68:	62ba      	str	r2, [r7, #40]	; 0x28
 800ca6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ca6e:	4413      	add	r3, r2
 800ca70:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ca74:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	091b      	lsrs	r3, r3, #4
 800ca7c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d1de      	bne.n	800ca42 <gen_numname+0x7a>
	ns[i] = '~';
 800ca84:	f107 0214 	add.w	r2, r7, #20
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	4413      	add	r3, r2
 800ca8c:	227e      	movs	r2, #126	; 0x7e
 800ca8e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ca90:	2300      	movs	r3, #0
 800ca92:	627b      	str	r3, [r7, #36]	; 0x24
 800ca94:	e002      	b.n	800ca9c <gen_numname+0xd4>
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	3301      	adds	r3, #1
 800ca9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d205      	bcs.n	800cab0 <gen_numname+0xe8>
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	4413      	add	r3, r2
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	2b20      	cmp	r3, #32
 800caae:	d1f2      	bne.n	800ca96 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab2:	2b07      	cmp	r3, #7
 800cab4:	d808      	bhi.n	800cac8 <gen_numname+0x100>
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	1c5a      	adds	r2, r3, #1
 800caba:	62ba      	str	r2, [r7, #40]	; 0x28
 800cabc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cac0:	4413      	add	r3, r2
 800cac2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cac6:	e000      	b.n	800caca <gen_numname+0x102>
 800cac8:	2120      	movs	r1, #32
 800caca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cacc:	1c5a      	adds	r2, r3, #1
 800cace:	627a      	str	r2, [r7, #36]	; 0x24
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	4413      	add	r3, r2
 800cad4:	460a      	mov	r2, r1
 800cad6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cada:	2b07      	cmp	r3, #7
 800cadc:	d9e8      	bls.n	800cab0 <gen_numname+0xe8>
}
 800cade:	bf00      	nop
 800cae0:	bf00      	nop
 800cae2:	3730      	adds	r7, #48	; 0x30
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800caf4:	230b      	movs	r3, #11
 800caf6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	0852      	lsrs	r2, r2, #1
 800cafe:	01db      	lsls	r3, r3, #7
 800cb00:	4313      	orrs	r3, r2
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	1c59      	adds	r1, r3, #1
 800cb08:	6079      	str	r1, [r7, #4]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	3b01      	subs	r3, #1
 800cb14:	60bb      	str	r3, [r7, #8]
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1ed      	bne.n	800caf8 <sum_sfn+0x10>
	return sum;
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3714      	adds	r7, #20
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b086      	sub	sp, #24
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cb34:	2304      	movs	r3, #4
 800cb36:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800cb3e:	23ff      	movs	r3, #255	; 0xff
 800cb40:	757b      	strb	r3, [r7, #21]
 800cb42:	23ff      	movs	r3, #255	; 0xff
 800cb44:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800cb46:	e081      	b.n	800cc4c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	69db      	ldr	r3, [r3, #28]
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6938      	ldr	r0, [r7, #16]
 800cb50:	f7ff f8b8 	bl	800bcc4 <move_window>
 800cb54:	4603      	mov	r3, r0
 800cb56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d17c      	bne.n	800cc58 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a1b      	ldr	r3, [r3, #32]
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800cb66:	7dbb      	ldrb	r3, [r7, #22]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d102      	bne.n	800cb72 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cb6c:	2304      	movs	r3, #4
 800cb6e:	75fb      	strb	r3, [r7, #23]
 800cb70:	e077      	b.n	800cc62 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a1b      	ldr	r3, [r3, #32]
 800cb76:	330b      	adds	r3, #11
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb7e:	73fb      	strb	r3, [r7, #15]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	7bfa      	ldrb	r2, [r7, #15]
 800cb84:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cb86:	7dbb      	ldrb	r3, [r7, #22]
 800cb88:	2be5      	cmp	r3, #229	; 0xe5
 800cb8a:	d00e      	beq.n	800cbaa <dir_read+0x80>
 800cb8c:	7dbb      	ldrb	r3, [r7, #22]
 800cb8e:	2b2e      	cmp	r3, #46	; 0x2e
 800cb90:	d00b      	beq.n	800cbaa <dir_read+0x80>
 800cb92:	7bfb      	ldrb	r3, [r7, #15]
 800cb94:	f023 0320 	bic.w	r3, r3, #32
 800cb98:	2b08      	cmp	r3, #8
 800cb9a:	bf0c      	ite	eq
 800cb9c:	2301      	moveq	r3, #1
 800cb9e:	2300      	movne	r3, #0
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	461a      	mov	r2, r3
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d002      	beq.n	800cbb0 <dir_read+0x86>
				ord = 0xFF;
 800cbaa:	23ff      	movs	r3, #255	; 0xff
 800cbac:	757b      	strb	r3, [r7, #21]
 800cbae:	e044      	b.n	800cc3a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
 800cbb2:	2b0f      	cmp	r3, #15
 800cbb4:	d12f      	bne.n	800cc16 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800cbb6:	7dbb      	ldrb	r3, [r7, #22]
 800cbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00d      	beq.n	800cbdc <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a1b      	ldr	r3, [r3, #32]
 800cbc4:	7b5b      	ldrb	r3, [r3, #13]
 800cbc6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800cbc8:	7dbb      	ldrb	r3, [r7, #22]
 800cbca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbce:	75bb      	strb	r3, [r7, #22]
 800cbd0:	7dbb      	ldrb	r3, [r7, #22]
 800cbd2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	695a      	ldr	r2, [r3, #20]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cbdc:	7dba      	ldrb	r2, [r7, #22]
 800cbde:	7d7b      	ldrb	r3, [r7, #21]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d115      	bne.n	800cc10 <dir_read+0xe6>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a1b      	ldr	r3, [r3, #32]
 800cbe8:	330d      	adds	r3, #13
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	7d3a      	ldrb	r2, [r7, #20]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d10e      	bne.n	800cc10 <dir_read+0xe6>
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	68da      	ldr	r2, [r3, #12]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	4610      	mov	r0, r2
 800cbfe:	f7ff fe17 	bl	800c830 <pick_lfn>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d003      	beq.n	800cc10 <dir_read+0xe6>
 800cc08:	7d7b      	ldrb	r3, [r7, #21]
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	e000      	b.n	800cc12 <dir_read+0xe8>
 800cc10:	23ff      	movs	r3, #255	; 0xff
 800cc12:	757b      	strb	r3, [r7, #21]
 800cc14:	e011      	b.n	800cc3a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cc16:	7d7b      	ldrb	r3, [r7, #21]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d109      	bne.n	800cc30 <dir_read+0x106>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a1b      	ldr	r3, [r3, #32]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff ff61 	bl	800cae8 <sum_sfn>
 800cc26:	4603      	mov	r3, r0
 800cc28:	461a      	mov	r2, r3
 800cc2a:	7d3b      	ldrb	r3, [r7, #20]
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d015      	beq.n	800cc5c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f04f 32ff 	mov.w	r2, #4294967295
 800cc36:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800cc38:	e010      	b.n	800cc5c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7ff fc3c 	bl	800c4ba <dir_next>
 800cc42:	4603      	mov	r3, r0
 800cc44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d109      	bne.n	800cc60 <dir_read+0x136>
	while (dp->sect) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	69db      	ldr	r3, [r3, #28]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f47f af79 	bne.w	800cb48 <dir_read+0x1e>
 800cc56:	e004      	b.n	800cc62 <dir_read+0x138>
		if (res != FR_OK) break;
 800cc58:	bf00      	nop
 800cc5a:	e002      	b.n	800cc62 <dir_read+0x138>
					break;
 800cc5c:	bf00      	nop
 800cc5e:	e000      	b.n	800cc62 <dir_read+0x138>
		if (res != FR_OK) break;
 800cc60:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <dir_read+0x144>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	61da      	str	r2, [r3, #28]
	return res;
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3718      	adds	r7, #24
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cc86:	2100      	movs	r1, #0
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7ff fb9b 	bl	800c3c4 <dir_sdi>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d001      	beq.n	800cc9c <dir_find+0x24>
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
 800cc9a:	e0a9      	b.n	800cdf0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc9c:	23ff      	movs	r3, #255	; 0xff
 800cc9e:	753b      	strb	r3, [r7, #20]
 800cca0:	7d3b      	ldrb	r3, [r7, #20]
 800cca2:	757b      	strb	r3, [r7, #21]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccaa:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	69db      	ldr	r3, [r3, #28]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6938      	ldr	r0, [r7, #16]
 800ccb4:	f7ff f806 	bl	800bcc4 <move_window>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ccbc:	7dfb      	ldrb	r3, [r7, #23]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f040 8090 	bne.w	800cde4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a1b      	ldr	r3, [r3, #32]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cccc:	7dbb      	ldrb	r3, [r7, #22]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d102      	bne.n	800ccd8 <dir_find+0x60>
 800ccd2:	2304      	movs	r3, #4
 800ccd4:	75fb      	strb	r3, [r7, #23]
 800ccd6:	e08a      	b.n	800cdee <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a1b      	ldr	r3, [r3, #32]
 800ccdc:	330b      	adds	r3, #11
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cce4:	73fb      	strb	r3, [r7, #15]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	7bfa      	ldrb	r2, [r7, #15]
 800ccea:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ccec:	7dbb      	ldrb	r3, [r7, #22]
 800ccee:	2be5      	cmp	r3, #229	; 0xe5
 800ccf0:	d007      	beq.n	800cd02 <dir_find+0x8a>
 800ccf2:	7bfb      	ldrb	r3, [r7, #15]
 800ccf4:	f003 0308 	and.w	r3, r3, #8
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d009      	beq.n	800cd10 <dir_find+0x98>
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
 800ccfe:	2b0f      	cmp	r3, #15
 800cd00:	d006      	beq.n	800cd10 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cd02:	23ff      	movs	r3, #255	; 0xff
 800cd04:	757b      	strb	r3, [r7, #21]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f04f 32ff 	mov.w	r2, #4294967295
 800cd0c:	631a      	str	r2, [r3, #48]	; 0x30
 800cd0e:	e05e      	b.n	800cdce <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
 800cd12:	2b0f      	cmp	r3, #15
 800cd14:	d136      	bne.n	800cd84 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d154      	bne.n	800cdce <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cd24:	7dbb      	ldrb	r3, [r7, #22]
 800cd26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00d      	beq.n	800cd4a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	7b5b      	ldrb	r3, [r3, #13]
 800cd34:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cd36:	7dbb      	ldrb	r3, [r7, #22]
 800cd38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd3c:	75bb      	strb	r3, [r7, #22]
 800cd3e:	7dbb      	ldrb	r3, [r7, #22]
 800cd40:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	695a      	ldr	r2, [r3, #20]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cd4a:	7dba      	ldrb	r2, [r7, #22]
 800cd4c:	7d7b      	ldrb	r3, [r7, #21]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d115      	bne.n	800cd7e <dir_find+0x106>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a1b      	ldr	r3, [r3, #32]
 800cd56:	330d      	adds	r3, #13
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	7d3a      	ldrb	r2, [r7, #20]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d10e      	bne.n	800cd7e <dir_find+0x106>
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	68da      	ldr	r2, [r3, #12]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a1b      	ldr	r3, [r3, #32]
 800cd68:	4619      	mov	r1, r3
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	f7ff fcf0 	bl	800c750 <cmp_lfn>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d003      	beq.n	800cd7e <dir_find+0x106>
 800cd76:	7d7b      	ldrb	r3, [r7, #21]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	e000      	b.n	800cd80 <dir_find+0x108>
 800cd7e:	23ff      	movs	r3, #255	; 0xff
 800cd80:	757b      	strb	r3, [r7, #21]
 800cd82:	e024      	b.n	800cdce <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cd84:	7d7b      	ldrb	r3, [r7, #21]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d109      	bne.n	800cd9e <dir_find+0x126>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6a1b      	ldr	r3, [r3, #32]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff feaa 	bl	800cae8 <sum_sfn>
 800cd94:	4603      	mov	r3, r0
 800cd96:	461a      	mov	r2, r3
 800cd98:	7d3b      	ldrb	r3, [r7, #20]
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d024      	beq.n	800cde8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cda4:	f003 0301 	and.w	r3, r3, #1
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10a      	bne.n	800cdc2 <dir_find+0x14a>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6a18      	ldr	r0, [r3, #32]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	3324      	adds	r3, #36	; 0x24
 800cdb4:	220b      	movs	r2, #11
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	f7fe fd92 	bl	800b8e0 <mem_cmp>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d014      	beq.n	800cdec <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cdc2:	23ff      	movs	r3, #255	; 0xff
 800cdc4:	757b      	strb	r3, [r7, #21]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdcc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cdce:	2100      	movs	r1, #0
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f7ff fb72 	bl	800c4ba <dir_next>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cdda:	7dfb      	ldrb	r3, [r7, #23]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f43f af65 	beq.w	800ccac <dir_find+0x34>
 800cde2:	e004      	b.n	800cdee <dir_find+0x176>
		if (res != FR_OK) break;
 800cde4:	bf00      	nop
 800cde6:	e002      	b.n	800cdee <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cde8:	bf00      	nop
 800cdea:	e000      	b.n	800cdee <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cdec:	bf00      	nop

	return res;
 800cdee:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3718      	adds	r7, #24
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08c      	sub	sp, #48	; 0x30
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce0c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <dir_register+0x20>
 800ce14:	2306      	movs	r3, #6
 800ce16:	e0e0      	b.n	800cfda <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ce18:	2300      	movs	r3, #0
 800ce1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ce1c:	e002      	b.n	800ce24 <dir_register+0x2c>
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce20:	3301      	adds	r3, #1
 800ce22:	627b      	str	r3, [r7, #36]	; 0x24
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	68da      	ldr	r2, [r3, #12]
 800ce28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	4413      	add	r3, r2
 800ce2e:	881b      	ldrh	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1f4      	bne.n	800ce1e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ce3a:	f107 030c 	add.w	r3, r7, #12
 800ce3e:	220c      	movs	r2, #12
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fe fd11 	bl	800b868 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d032      	beq.n	800ceb6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2240      	movs	r2, #64	; 0x40
 800ce54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ce58:	2301      	movs	r3, #1
 800ce5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce5c:	e016      	b.n	800ce8c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	68da      	ldr	r2, [r3, #12]
 800ce68:	f107 010c 	add.w	r1, r7, #12
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	f7ff fdab 	bl	800c9c8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f7ff ff00 	bl	800cc78 <dir_find>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ce7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d106      	bne.n	800ce94 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ce86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce88:	3301      	adds	r3, #1
 800ce8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	2b63      	cmp	r3, #99	; 0x63
 800ce90:	d9e5      	bls.n	800ce5e <dir_register+0x66>
 800ce92:	e000      	b.n	800ce96 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ce94:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ce96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce98:	2b64      	cmp	r3, #100	; 0x64
 800ce9a:	d101      	bne.n	800cea0 <dir_register+0xa8>
 800ce9c:	2307      	movs	r3, #7
 800ce9e:	e09c      	b.n	800cfda <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cea4:	2b04      	cmp	r3, #4
 800cea6:	d002      	beq.n	800ceae <dir_register+0xb6>
 800cea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ceac:	e095      	b.n	800cfda <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ceae:	7dfa      	ldrb	r2, [r7, #23]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ceb6:	7dfb      	ldrb	r3, [r7, #23]
 800ceb8:	f003 0302 	and.w	r3, r3, #2
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d007      	beq.n	800ced0 <dir_register+0xd8>
 800cec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec2:	330c      	adds	r3, #12
 800cec4:	4a47      	ldr	r2, [pc, #284]	; (800cfe4 <dir_register+0x1ec>)
 800cec6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceca:	089b      	lsrs	r3, r3, #2
 800cecc:	3301      	adds	r3, #1
 800cece:	e000      	b.n	800ced2 <dir_register+0xda>
 800ced0:	2301      	movs	r3, #1
 800ced2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ced4:	6a39      	ldr	r1, [r7, #32]
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7ff fbb4 	bl	800c644 <dir_alloc>
 800cedc:	4603      	mov	r3, r0
 800cede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d148      	bne.n	800cf7c <dir_register+0x184>
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	3b01      	subs	r3, #1
 800ceee:	623b      	str	r3, [r7, #32]
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d042      	beq.n	800cf7c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	695a      	ldr	r2, [r3, #20]
 800cefa:	6a3b      	ldr	r3, [r7, #32]
 800cefc:	015b      	lsls	r3, r3, #5
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	4619      	mov	r1, r3
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7ff fa5e 	bl	800c3c4 <dir_sdi>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cf0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d132      	bne.n	800cf7c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	3324      	adds	r3, #36	; 0x24
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7ff fde4 	bl	800cae8 <sum_sfn>
 800cf20:	4603      	mov	r3, r0
 800cf22:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	69db      	ldr	r3, [r3, #28]
 800cf28:	4619      	mov	r1, r3
 800cf2a:	69f8      	ldr	r0, [r7, #28]
 800cf2c:	f7fe feca 	bl	800bcc4 <move_window>
 800cf30:	4603      	mov	r3, r0
 800cf32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cf36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d11d      	bne.n	800cf7a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	68d8      	ldr	r0, [r3, #12]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6a19      	ldr	r1, [r3, #32]
 800cf46:	6a3b      	ldr	r3, [r7, #32]
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	7efb      	ldrb	r3, [r7, #27]
 800cf4c:	f7ff fcd4 	bl	800c8f8 <put_lfn>
				fs->wflag = 1;
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	2201      	movs	r2, #1
 800cf54:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cf56:	2100      	movs	r1, #0
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7ff faae 	bl	800c4ba <dir_next>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cf64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d107      	bne.n	800cf7c <dir_register+0x184>
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	623b      	str	r3, [r7, #32]
 800cf72:	6a3b      	ldr	r3, [r7, #32]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1d5      	bne.n	800cf24 <dir_register+0x12c>
 800cf78:	e000      	b.n	800cf7c <dir_register+0x184>
				if (res != FR_OK) break;
 800cf7a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cf7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d128      	bne.n	800cfd6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	69db      	ldr	r3, [r3, #28]
 800cf88:	4619      	mov	r1, r3
 800cf8a:	69f8      	ldr	r0, [r7, #28]
 800cf8c:	f7fe fe9a 	bl	800bcc4 <move_window>
 800cf90:	4603      	mov	r3, r0
 800cf92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cf96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d11b      	bne.n	800cfd6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a1b      	ldr	r3, [r3, #32]
 800cfa2:	2220      	movs	r2, #32
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fe fc7f 	bl	800b8aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a18      	ldr	r0, [r3, #32]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	3324      	adds	r3, #36	; 0x24
 800cfb4:	220b      	movs	r2, #11
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	f7fe fc56 	bl	800b868 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	330c      	adds	r3, #12
 800cfc8:	f002 0218 	and.w	r2, r2, #24
 800cfcc:	b2d2      	uxtb	r2, r2
 800cfce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cfd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3730      	adds	r7, #48	; 0x30
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	4ec4ec4f 	.word	0x4ec4ec4f

0800cfe8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b088      	sub	sp, #32
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	2200      	movs	r2, #0
 800cffc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	69db      	ldr	r3, [r3, #28]
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 80c9 	beq.w	800d19a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d010:	d032      	beq.n	800d078 <get_fileinfo+0x90>
			i = j = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	61bb      	str	r3, [r7, #24]
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d01a:	e01b      	b.n	800d054 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d01c:	89fb      	ldrh	r3, [r7, #14]
 800d01e:	2100      	movs	r1, #0
 800d020:	4618      	mov	r0, r3
 800d022:	f001 fc11 	bl	800e848 <ff_convert>
 800d026:	4603      	mov	r3, r0
 800d028:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d02a:	89fb      	ldrh	r3, [r7, #14]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d102      	bne.n	800d036 <get_fileinfo+0x4e>
 800d030:	2300      	movs	r3, #0
 800d032:	61fb      	str	r3, [r7, #28]
 800d034:	e01a      	b.n	800d06c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	2bfe      	cmp	r3, #254	; 0xfe
 800d03a:	d902      	bls.n	800d042 <get_fileinfo+0x5a>
 800d03c:	2300      	movs	r3, #0
 800d03e:	61fb      	str	r3, [r7, #28]
 800d040:	e014      	b.n	800d06c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	1c5a      	adds	r2, r3, #1
 800d046:	61fa      	str	r2, [r7, #28]
 800d048:	89fa      	ldrh	r2, [r7, #14]
 800d04a:	b2d1      	uxtb	r1, r2
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	4413      	add	r3, r2
 800d050:	460a      	mov	r2, r1
 800d052:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	68da      	ldr	r2, [r3, #12]
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	1c59      	adds	r1, r3, #1
 800d05c:	61b9      	str	r1, [r7, #24]
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	4413      	add	r3, r2
 800d062:	881b      	ldrh	r3, [r3, #0]
 800d064:	81fb      	strh	r3, [r7, #14]
 800d066:	89fb      	ldrh	r3, [r7, #14]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1d7      	bne.n	800d01c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	4413      	add	r3, r2
 800d072:	3316      	adds	r3, #22
 800d074:	2200      	movs	r2, #0
 800d076:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d078:	2300      	movs	r3, #0
 800d07a:	61bb      	str	r3, [r7, #24]
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d080:	683a      	ldr	r2, [r7, #0]
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	4413      	add	r3, r2
 800d086:	3316      	adds	r3, #22
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d08c:	e04c      	b.n	800d128 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1a      	ldr	r2, [r3, #32]
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	1c59      	adds	r1, r3, #1
 800d096:	61f9      	str	r1, [r7, #28]
 800d098:	4413      	add	r3, r2
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d09e:	7dfb      	ldrb	r3, [r7, #23]
 800d0a0:	2b20      	cmp	r3, #32
 800d0a2:	d100      	bne.n	800d0a6 <get_fileinfo+0xbe>
 800d0a4:	e040      	b.n	800d128 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d0a6:	7dfb      	ldrb	r3, [r7, #23]
 800d0a8:	2b05      	cmp	r3, #5
 800d0aa:	d101      	bne.n	800d0b0 <get_fileinfo+0xc8>
 800d0ac:	23e5      	movs	r3, #229	; 0xe5
 800d0ae:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	2b09      	cmp	r3, #9
 800d0b4:	d10f      	bne.n	800d0d6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d0b6:	89bb      	ldrh	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d105      	bne.n	800d0c8 <get_fileinfo+0xe0>
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	3316      	adds	r3, #22
 800d0c4:	222e      	movs	r2, #46	; 0x2e
 800d0c6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	1c5a      	adds	r2, r3, #1
 800d0cc:	61ba      	str	r2, [r7, #24]
 800d0ce:	683a      	ldr	r2, [r7, #0]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	222e      	movs	r2, #46	; 0x2e
 800d0d4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d0d6:	683a      	ldr	r2, [r7, #0]
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	4413      	add	r3, r2
 800d0dc:	3309      	adds	r3, #9
 800d0de:	7dfa      	ldrb	r2, [r7, #23]
 800d0e0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d0e2:	89bb      	ldrh	r3, [r7, #12]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d11c      	bne.n	800d122 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d0e8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ea:	2b40      	cmp	r3, #64	; 0x40
 800d0ec:	d913      	bls.n	800d116 <get_fileinfo+0x12e>
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
 800d0f0:	2b5a      	cmp	r3, #90	; 0x5a
 800d0f2:	d810      	bhi.n	800d116 <get_fileinfo+0x12e>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6a1b      	ldr	r3, [r3, #32]
 800d0f8:	330c      	adds	r3, #12
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	2b08      	cmp	r3, #8
 800d102:	d901      	bls.n	800d108 <get_fileinfo+0x120>
 800d104:	2310      	movs	r3, #16
 800d106:	e000      	b.n	800d10a <get_fileinfo+0x122>
 800d108:	2308      	movs	r3, #8
 800d10a:	4013      	ands	r3, r2
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d110:	7dfb      	ldrb	r3, [r7, #23]
 800d112:	3320      	adds	r3, #32
 800d114:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d116:	683a      	ldr	r2, [r7, #0]
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	4413      	add	r3, r2
 800d11c:	3316      	adds	r3, #22
 800d11e:	7dfa      	ldrb	r2, [r7, #23]
 800d120:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	3301      	adds	r3, #1
 800d126:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	2b0a      	cmp	r3, #10
 800d12c:	d9af      	bls.n	800d08e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d12e:	89bb      	ldrh	r3, [r7, #12]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d10d      	bne.n	800d150 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d134:	683a      	ldr	r2, [r7, #0]
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	4413      	add	r3, r2
 800d13a:	3316      	adds	r3, #22
 800d13c:	2200      	movs	r2, #0
 800d13e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6a1b      	ldr	r3, [r3, #32]
 800d144:	330c      	adds	r3, #12
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d101      	bne.n	800d150 <get_fileinfo+0x168>
 800d14c:	2300      	movs	r3, #0
 800d14e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	4413      	add	r3, r2
 800d156:	3309      	adds	r3, #9
 800d158:	2200      	movs	r2, #0
 800d15a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6a1b      	ldr	r3, [r3, #32]
 800d160:	7ada      	ldrb	r2, [r3, #11]
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	331c      	adds	r3, #28
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fe fb11 	bl	800b794 <ld_dword>
 800d172:	4602      	mov	r2, r0
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6a1b      	ldr	r3, [r3, #32]
 800d17c:	3316      	adds	r3, #22
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fe fb08 	bl	800b794 <ld_dword>
 800d184:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	b29a      	uxth	r2, r3
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	80da      	strh	r2, [r3, #6]
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	0c1b      	lsrs	r3, r3, #16
 800d192:	b29a      	uxth	r2, r3
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	809a      	strh	r2, [r3, #4]
 800d198:	e000      	b.n	800d19c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d19a:	bf00      	nop
}
 800d19c:	3720      	adds	r7, #32
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
	...

0800d1a4 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b085      	sub	sp, #20
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	1c59      	adds	r1, r3, #1
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	6011      	str	r1, [r2, #0]
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d1ba:	89fb      	ldrh	r3, [r7, #14]
 800d1bc:	2b60      	cmp	r3, #96	; 0x60
 800d1be:	d905      	bls.n	800d1cc <get_achar+0x28>
 800d1c0:	89fb      	ldrh	r3, [r7, #14]
 800d1c2:	2b7a      	cmp	r3, #122	; 0x7a
 800d1c4:	d802      	bhi.n	800d1cc <get_achar+0x28>
 800d1c6:	89fb      	ldrh	r3, [r7, #14]
 800d1c8:	3b20      	subs	r3, #32
 800d1ca:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d1cc:	89fb      	ldrh	r3, [r7, #14]
 800d1ce:	2b7f      	cmp	r3, #127	; 0x7f
 800d1d0:	d904      	bls.n	800d1dc <get_achar+0x38>
 800d1d2:	89fb      	ldrh	r3, [r7, #14]
 800d1d4:	3b80      	subs	r3, #128	; 0x80
 800d1d6:	4a05      	ldr	r2, [pc, #20]	; (800d1ec <get_achar+0x48>)
 800d1d8:	5cd3      	ldrb	r3, [r2, r3]
 800d1da:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800d1dc:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3714      	adds	r7, #20
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	08014f0c 	.word	0x08014f0c

0800d1f0 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b08a      	sub	sp, #40	; 0x28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800d1fe:	e009      	b.n	800d214 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800d200:	f107 0308 	add.w	r3, r7, #8
 800d204:	4618      	mov	r0, r3
 800d206:	f7ff ffcd 	bl	800d1a4 <get_achar>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <pattern_matching+0x24>
 800d210:	2300      	movs	r3, #0
 800d212:	e064      	b.n	800d2de <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	1e5a      	subs	r2, r3, #1
 800d218:	607a      	str	r2, [r7, #4]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1f0      	bne.n	800d200 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d104      	bne.n	800d230 <pattern_matching+0x40>
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d001      	beq.n	800d230 <pattern_matching+0x40>
 800d22c:	2301      	movs	r3, #1
 800d22e:	e056      	b.n	800d2de <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	617b      	str	r3, [r7, #20]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	2b3f      	cmp	r3, #63	; 0x3f
 800d23e:	d003      	beq.n	800d248 <pattern_matching+0x58>
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	2b2a      	cmp	r3, #42	; 0x2a
 800d246:	d126      	bne.n	800d296 <pattern_matching+0xa6>
				nm = nx = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	61fb      	str	r3, [r7, #28]
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	1c5a      	adds	r2, r3, #1
 800d254:	617a      	str	r2, [r7, #20]
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	2b3f      	cmp	r3, #63	; 0x3f
 800d25a:	d103      	bne.n	800d264 <pattern_matching+0x74>
 800d25c:	6a3b      	ldr	r3, [r7, #32]
 800d25e:	3301      	adds	r3, #1
 800d260:	623b      	str	r3, [r7, #32]
 800d262:	e001      	b.n	800d268 <pattern_matching+0x78>
 800d264:	2301      	movs	r3, #1
 800d266:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	2b3f      	cmp	r3, #63	; 0x3f
 800d26e:	d0ef      	beq.n	800d250 <pattern_matching+0x60>
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	2b2a      	cmp	r3, #42	; 0x2a
 800d276:	d0eb      	beq.n	800d250 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800d278:	6978      	ldr	r0, [r7, #20]
 800d27a:	6939      	ldr	r1, [r7, #16]
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	6a3a      	ldr	r2, [r7, #32]
 800d280:	f7ff ffb6 	bl	800d1f0 <pattern_matching>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d001      	beq.n	800d28e <pattern_matching+0x9e>
 800d28a:	2301      	movs	r3, #1
 800d28c:	e027      	b.n	800d2de <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d294:	e017      	b.n	800d2c6 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800d296:	f107 0314 	add.w	r3, r7, #20
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7ff ff82 	bl	800d1a4 <get_achar>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800d2a4:	f107 0310 	add.w	r3, r7, #16
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7ff ff7b 	bl	800d1a4 <get_achar>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800d2b2:	8b7a      	ldrh	r2, [r7, #26]
 800d2b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d104      	bne.n	800d2c4 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800d2ba:	8b7b      	ldrh	r3, [r7, #26]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1bb      	bne.n	800d238 <pattern_matching+0x48>
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e00c      	b.n	800d2de <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800d2c4:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800d2c6:	f107 0308 	add.w	r3, r7, #8
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7ff ff6a 	bl	800d1a4 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d002      	beq.n	800d2dc <pattern_matching+0xec>
 800d2d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1a9      	bne.n	800d230 <pattern_matching+0x40>

	return 0;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3728      	adds	r7, #40	; 0x28
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
	...

0800d2e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08a      	sub	sp, #40	; 0x28
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	613b      	str	r3, [r7, #16]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	68db      	ldr	r3, [r3, #12]
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	2300      	movs	r3, #0
 800d302:	617b      	str	r3, [r7, #20]
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	1c5a      	adds	r2, r3, #1
 800d30c:	61ba      	str	r2, [r7, #24]
 800d30e:	693a      	ldr	r2, [r7, #16]
 800d310:	4413      	add	r3, r2
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d318:	2b1f      	cmp	r3, #31
 800d31a:	d940      	bls.n	800d39e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d31c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d31e:	2b2f      	cmp	r3, #47	; 0x2f
 800d320:	d006      	beq.n	800d330 <create_name+0x48>
 800d322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d324:	2b5c      	cmp	r3, #92	; 0x5c
 800d326:	d110      	bne.n	800d34a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d328:	e002      	b.n	800d330 <create_name+0x48>
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	3301      	adds	r3, #1
 800d32e:	61bb      	str	r3, [r7, #24]
 800d330:	693a      	ldr	r2, [r7, #16]
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	4413      	add	r3, r2
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b2f      	cmp	r3, #47	; 0x2f
 800d33a:	d0f6      	beq.n	800d32a <create_name+0x42>
 800d33c:	693a      	ldr	r2, [r7, #16]
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	4413      	add	r3, r2
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	2b5c      	cmp	r3, #92	; 0x5c
 800d346:	d0f0      	beq.n	800d32a <create_name+0x42>
			break;
 800d348:	e02a      	b.n	800d3a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	2bfe      	cmp	r3, #254	; 0xfe
 800d34e:	d901      	bls.n	800d354 <create_name+0x6c>
 800d350:	2306      	movs	r3, #6
 800d352:	e177      	b.n	800d644 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d356:	b2db      	uxtb	r3, r3
 800d358:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d35a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d35c:	2101      	movs	r1, #1
 800d35e:	4618      	mov	r0, r3
 800d360:	f001 fa72 	bl	800e848 <ff_convert>
 800d364:	4603      	mov	r3, r0
 800d366:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d101      	bne.n	800d372 <create_name+0x8a>
 800d36e:	2306      	movs	r3, #6
 800d370:	e168      	b.n	800d644 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d374:	2b7f      	cmp	r3, #127	; 0x7f
 800d376:	d809      	bhi.n	800d38c <create_name+0xa4>
 800d378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d37a:	4619      	mov	r1, r3
 800d37c:	48b3      	ldr	r0, [pc, #716]	; (800d64c <create_name+0x364>)
 800d37e:	f7fe fad6 	bl	800b92e <chk_chr>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <create_name+0xa4>
 800d388:	2306      	movs	r3, #6
 800d38a:	e15b      	b.n	800d644 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	1c5a      	adds	r2, r3, #1
 800d390:	617a      	str	r2, [r7, #20]
 800d392:	005b      	lsls	r3, r3, #1
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	4413      	add	r3, r2
 800d398:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d39a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d39c:	e7b4      	b.n	800d308 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d39e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	441a      	add	r2, r3
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d3aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3ac:	2b1f      	cmp	r3, #31
 800d3ae:	d801      	bhi.n	800d3b4 <create_name+0xcc>
 800d3b0:	2304      	movs	r3, #4
 800d3b2:	e000      	b.n	800d3b6 <create_name+0xce>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d3ba:	e011      	b.n	800d3e0 <create_name+0xf8>
		w = lfn[di - 1];
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	881b      	ldrh	r3, [r3, #0]
 800d3cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d3ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3d0:	2b20      	cmp	r3, #32
 800d3d2:	d002      	beq.n	800d3da <create_name+0xf2>
 800d3d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d3d8:	d106      	bne.n	800d3e8 <create_name+0x100>
		di--;
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1ea      	bne.n	800d3bc <create_name+0xd4>
 800d3e6:	e000      	b.n	800d3ea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d3e8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	005b      	lsls	r3, r3, #1
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d101      	bne.n	800d400 <create_name+0x118>
 800d3fc:	2306      	movs	r3, #6
 800d3fe:	e121      	b.n	800d644 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	3324      	adds	r3, #36	; 0x24
 800d404:	220b      	movs	r2, #11
 800d406:	2120      	movs	r1, #32
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fe fa4e 	bl	800b8aa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d40e:	2300      	movs	r3, #0
 800d410:	61bb      	str	r3, [r7, #24]
 800d412:	e002      	b.n	800d41a <create_name+0x132>
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	3301      	adds	r3, #1
 800d418:	61bb      	str	r3, [r7, #24]
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	005b      	lsls	r3, r3, #1
 800d41e:	68fa      	ldr	r2, [r7, #12]
 800d420:	4413      	add	r3, r2
 800d422:	881b      	ldrh	r3, [r3, #0]
 800d424:	2b20      	cmp	r3, #32
 800d426:	d0f5      	beq.n	800d414 <create_name+0x12c>
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	005b      	lsls	r3, r3, #1
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	4413      	add	r3, r2
 800d430:	881b      	ldrh	r3, [r3, #0]
 800d432:	2b2e      	cmp	r3, #46	; 0x2e
 800d434:	d0ee      	beq.n	800d414 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d009      	beq.n	800d450 <create_name+0x168>
 800d43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d440:	f043 0303 	orr.w	r3, r3, #3
 800d444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d448:	e002      	b.n	800d450 <create_name+0x168>
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	3b01      	subs	r3, #1
 800d44e:	617b      	str	r3, [r7, #20]
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d009      	beq.n	800d46a <create_name+0x182>
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d45c:	3b01      	subs	r3, #1
 800d45e:	005b      	lsls	r3, r3, #1
 800d460:	68fa      	ldr	r2, [r7, #12]
 800d462:	4413      	add	r3, r2
 800d464:	881b      	ldrh	r3, [r3, #0]
 800d466:	2b2e      	cmp	r3, #46	; 0x2e
 800d468:	d1ef      	bne.n	800d44a <create_name+0x162>

	i = b = 0; ni = 8;
 800d46a:	2300      	movs	r3, #0
 800d46c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d470:	2300      	movs	r3, #0
 800d472:	623b      	str	r3, [r7, #32]
 800d474:	2308      	movs	r3, #8
 800d476:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	61ba      	str	r2, [r7, #24]
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	4413      	add	r3, r2
 800d484:	881b      	ldrh	r3, [r3, #0]
 800d486:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 8090 	beq.w	800d5b0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d490:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d492:	2b20      	cmp	r3, #32
 800d494:	d006      	beq.n	800d4a4 <create_name+0x1bc>
 800d496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d498:	2b2e      	cmp	r3, #46	; 0x2e
 800d49a:	d10a      	bne.n	800d4b2 <create_name+0x1ca>
 800d49c:	69ba      	ldr	r2, [r7, #24]
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d006      	beq.n	800d4b2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4a8:	f043 0303 	orr.w	r3, r3, #3
 800d4ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4b0:	e07d      	b.n	800d5ae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d4b2:	6a3a      	ldr	r2, [r7, #32]
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d203      	bcs.n	800d4c2 <create_name+0x1da>
 800d4ba:	69ba      	ldr	r2, [r7, #24]
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d123      	bne.n	800d50a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	2b0b      	cmp	r3, #11
 800d4c6:	d106      	bne.n	800d4d6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d4c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4cc:	f043 0303 	orr.w	r3, r3, #3
 800d4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4d4:	e06f      	b.n	800d5b6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d4d6:	69ba      	ldr	r2, [r7, #24]
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d005      	beq.n	800d4ea <create_name+0x202>
 800d4de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4e2:	f043 0303 	orr.w	r3, r3, #3
 800d4e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d4ea:	69ba      	ldr	r2, [r7, #24]
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d860      	bhi.n	800d5b4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	61bb      	str	r3, [r7, #24]
 800d4f6:	2308      	movs	r3, #8
 800d4f8:	623b      	str	r3, [r7, #32]
 800d4fa:	230b      	movs	r3, #11
 800d4fc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d4fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d508:	e051      	b.n	800d5ae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d50a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d50c:	2b7f      	cmp	r3, #127	; 0x7f
 800d50e:	d914      	bls.n	800d53a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d512:	2100      	movs	r1, #0
 800d514:	4618      	mov	r0, r3
 800d516:	f001 f997 	bl	800e848 <ff_convert>
 800d51a:	4603      	mov	r3, r0
 800d51c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d51e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d520:	2b00      	cmp	r3, #0
 800d522:	d004      	beq.n	800d52e <create_name+0x246>
 800d524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d526:	3b80      	subs	r3, #128	; 0x80
 800d528:	4a49      	ldr	r2, [pc, #292]	; (800d650 <create_name+0x368>)
 800d52a:	5cd3      	ldrb	r3, [r2, r3]
 800d52c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d52e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d532:	f043 0302 	orr.w	r3, r3, #2
 800d536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d53a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d007      	beq.n	800d550 <create_name+0x268>
 800d540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d542:	4619      	mov	r1, r3
 800d544:	4843      	ldr	r0, [pc, #268]	; (800d654 <create_name+0x36c>)
 800d546:	f7fe f9f2 	bl	800b92e <chk_chr>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d008      	beq.n	800d562 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d550:	235f      	movs	r3, #95	; 0x5f
 800d552:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d558:	f043 0303 	orr.w	r3, r3, #3
 800d55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d560:	e01b      	b.n	800d59a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d564:	2b40      	cmp	r3, #64	; 0x40
 800d566:	d909      	bls.n	800d57c <create_name+0x294>
 800d568:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d56a:	2b5a      	cmp	r3, #90	; 0x5a
 800d56c:	d806      	bhi.n	800d57c <create_name+0x294>
					b |= 2;
 800d56e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d572:	f043 0302 	orr.w	r3, r3, #2
 800d576:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d57a:	e00e      	b.n	800d59a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d57c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d57e:	2b60      	cmp	r3, #96	; 0x60
 800d580:	d90b      	bls.n	800d59a <create_name+0x2b2>
 800d582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d584:	2b7a      	cmp	r3, #122	; 0x7a
 800d586:	d808      	bhi.n	800d59a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d588:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d58c:	f043 0301 	orr.w	r3, r3, #1
 800d590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d596:	3b20      	subs	r3, #32
 800d598:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	1c5a      	adds	r2, r3, #1
 800d59e:	623a      	str	r2, [r7, #32]
 800d5a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d5a2:	b2d1      	uxtb	r1, r2
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	460a      	mov	r2, r1
 800d5aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d5ae:	e763      	b.n	800d478 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d5b0:	bf00      	nop
 800d5b2:	e000      	b.n	800d5b6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d5b4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d5bc:	2be5      	cmp	r3, #229	; 0xe5
 800d5be:	d103      	bne.n	800d5c8 <create_name+0x2e0>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2205      	movs	r2, #5
 800d5c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	2b08      	cmp	r3, #8
 800d5cc:	d104      	bne.n	800d5d8 <create_name+0x2f0>
 800d5ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5dc:	f003 030c 	and.w	r3, r3, #12
 800d5e0:	2b0c      	cmp	r3, #12
 800d5e2:	d005      	beq.n	800d5f0 <create_name+0x308>
 800d5e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5e8:	f003 0303 	and.w	r3, r3, #3
 800d5ec:	2b03      	cmp	r3, #3
 800d5ee:	d105      	bne.n	800d5fc <create_name+0x314>
 800d5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5f4:	f043 0302 	orr.w	r3, r3, #2
 800d5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d600:	f003 0302 	and.w	r3, r3, #2
 800d604:	2b00      	cmp	r3, #0
 800d606:	d117      	bne.n	800d638 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d608:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d60c:	f003 0303 	and.w	r3, r3, #3
 800d610:	2b01      	cmp	r3, #1
 800d612:	d105      	bne.n	800d620 <create_name+0x338>
 800d614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d618:	f043 0310 	orr.w	r3, r3, #16
 800d61c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d624:	f003 030c 	and.w	r3, r3, #12
 800d628:	2b04      	cmp	r3, #4
 800d62a:	d105      	bne.n	800d638 <create_name+0x350>
 800d62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d630:	f043 0308 	orr.w	r3, r3, #8
 800d634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d63e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d642:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d644:	4618      	mov	r0, r3
 800d646:	3728      	adds	r7, #40	; 0x28
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	08013b30 	.word	0x08013b30
 800d650:	08014f0c 	.word	0x08014f0c
 800d654:	08013b3c 	.word	0x08013b3c

0800d658 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d66c:	e002      	b.n	800d674 <follow_path+0x1c>
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	3301      	adds	r3, #1
 800d672:	603b      	str	r3, [r7, #0]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	2b2f      	cmp	r3, #47	; 0x2f
 800d67a:	d0f8      	beq.n	800d66e <follow_path+0x16>
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	2b5c      	cmp	r3, #92	; 0x5c
 800d682:	d0f4      	beq.n	800d66e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	2200      	movs	r2, #0
 800d688:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	2b1f      	cmp	r3, #31
 800d690:	d80a      	bhi.n	800d6a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2280      	movs	r2, #128	; 0x80
 800d696:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d69a:	2100      	movs	r1, #0
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7fe fe91 	bl	800c3c4 <dir_sdi>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	75fb      	strb	r3, [r7, #23]
 800d6a6:	e043      	b.n	800d730 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d6a8:	463b      	mov	r3, r7
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7ff fe1b 	bl	800d2e8 <create_name>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d6b6:	7dfb      	ldrb	r3, [r7, #23]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d134      	bne.n	800d726 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7ff fadb 	bl	800cc78 <dir_find>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d6cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d00a      	beq.n	800d6ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d6d4:	7dfb      	ldrb	r3, [r7, #23]
 800d6d6:	2b04      	cmp	r3, #4
 800d6d8:	d127      	bne.n	800d72a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d6da:	7afb      	ldrb	r3, [r7, #11]
 800d6dc:	f003 0304 	and.w	r3, r3, #4
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d122      	bne.n	800d72a <follow_path+0xd2>
 800d6e4:	2305      	movs	r3, #5
 800d6e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d6e8:	e01f      	b.n	800d72a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d6ea:	7afb      	ldrb	r3, [r7, #11]
 800d6ec:	f003 0304 	and.w	r3, r3, #4
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d11c      	bne.n	800d72e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	799b      	ldrb	r3, [r3, #6]
 800d6f8:	f003 0310 	and.w	r3, r3, #16
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d102      	bne.n	800d706 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d700:	2305      	movs	r3, #5
 800d702:	75fb      	strb	r3, [r7, #23]
 800d704:	e014      	b.n	800d730 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	695b      	ldr	r3, [r3, #20]
 800d710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d714:	4413      	add	r3, r2
 800d716:	4619      	mov	r1, r3
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f7fe ffda 	bl	800c6d2 <ld_clust>
 800d71e:	4602      	mov	r2, r0
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d724:	e7c0      	b.n	800d6a8 <follow_path+0x50>
			if (res != FR_OK) break;
 800d726:	bf00      	nop
 800d728:	e002      	b.n	800d730 <follow_path+0xd8>
				break;
 800d72a:	bf00      	nop
 800d72c:	e000      	b.n	800d730 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d72e:	bf00      	nop
			}
		}
	}

	return res;
 800d730:	7dfb      	ldrb	r3, [r7, #23]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3718      	adds	r7, #24
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d73a:	b480      	push	{r7}
 800d73c:	b087      	sub	sp, #28
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d742:	f04f 33ff 	mov.w	r3, #4294967295
 800d746:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d031      	beq.n	800d7b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	617b      	str	r3, [r7, #20]
 800d756:	e002      	b.n	800d75e <get_ldnumber+0x24>
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	3301      	adds	r3, #1
 800d75c:	617b      	str	r3, [r7, #20]
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	2b1f      	cmp	r3, #31
 800d764:	d903      	bls.n	800d76e <get_ldnumber+0x34>
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	2b3a      	cmp	r3, #58	; 0x3a
 800d76c:	d1f4      	bne.n	800d758 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	2b3a      	cmp	r3, #58	; 0x3a
 800d774:	d11c      	bne.n	800d7b0 <get_ldnumber+0x76>
			tp = *path;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	1c5a      	adds	r2, r3, #1
 800d780:	60fa      	str	r2, [r7, #12]
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	3b30      	subs	r3, #48	; 0x30
 800d786:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	2b09      	cmp	r3, #9
 800d78c:	d80e      	bhi.n	800d7ac <get_ldnumber+0x72>
 800d78e:	68fa      	ldr	r2, [r7, #12]
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	429a      	cmp	r2, r3
 800d794:	d10a      	bne.n	800d7ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d107      	bne.n	800d7ac <get_ldnumber+0x72>
					vol = (int)i;
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	617b      	str	r3, [r7, #20]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	697a      	ldr	r2, [r7, #20]
 800d7aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	e002      	b.n	800d7b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d7b4:	693b      	ldr	r3, [r7, #16]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	371c      	adds	r7, #28
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
	...

0800d7c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	70da      	strb	r2, [r3, #3]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7da:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7fe fa70 	bl	800bcc4 <move_window>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d001      	beq.n	800d7ee <check_fs+0x2a>
 800d7ea:	2304      	movs	r3, #4
 800d7ec:	e038      	b.n	800d860 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	3334      	adds	r3, #52	; 0x34
 800d7f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fd ffb4 	bl	800b764 <ld_word>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	461a      	mov	r2, r3
 800d800:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d804:	429a      	cmp	r2, r3
 800d806:	d001      	beq.n	800d80c <check_fs+0x48>
 800d808:	2303      	movs	r3, #3
 800d80a:	e029      	b.n	800d860 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d812:	2be9      	cmp	r3, #233	; 0xe9
 800d814:	d009      	beq.n	800d82a <check_fs+0x66>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d81c:	2beb      	cmp	r3, #235	; 0xeb
 800d81e:	d11e      	bne.n	800d85e <check_fs+0x9a>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d826:	2b90      	cmp	r3, #144	; 0x90
 800d828:	d119      	bne.n	800d85e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	3334      	adds	r3, #52	; 0x34
 800d82e:	3336      	adds	r3, #54	; 0x36
 800d830:	4618      	mov	r0, r3
 800d832:	f7fd ffaf 	bl	800b794 <ld_dword>
 800d836:	4603      	mov	r3, r0
 800d838:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d83c:	4a0a      	ldr	r2, [pc, #40]	; (800d868 <check_fs+0xa4>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d101      	bne.n	800d846 <check_fs+0x82>
 800d842:	2300      	movs	r3, #0
 800d844:	e00c      	b.n	800d860 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	3334      	adds	r3, #52	; 0x34
 800d84a:	3352      	adds	r3, #82	; 0x52
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7fd ffa1 	bl	800b794 <ld_dword>
 800d852:	4603      	mov	r3, r0
 800d854:	4a05      	ldr	r2, [pc, #20]	; (800d86c <check_fs+0xa8>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d101      	bne.n	800d85e <check_fs+0x9a>
 800d85a:	2300      	movs	r3, #0
 800d85c:	e000      	b.n	800d860 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d85e:	2302      	movs	r3, #2
}
 800d860:	4618      	mov	r0, r3
 800d862:	3708      	adds	r7, #8
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	00544146 	.word	0x00544146
 800d86c:	33544146 	.word	0x33544146

0800d870 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b096      	sub	sp, #88	; 0x58
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	4613      	mov	r3, r2
 800d87c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	2200      	movs	r2, #0
 800d882:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f7ff ff58 	bl	800d73a <get_ldnumber>
 800d88a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d88e:	2b00      	cmp	r3, #0
 800d890:	da01      	bge.n	800d896 <find_volume+0x26>
 800d892:	230b      	movs	r3, #11
 800d894:	e231      	b.n	800dcfa <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d896:	4aa8      	ldr	r2, [pc, #672]	; (800db38 <find_volume+0x2c8>)
 800d898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d89a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d89e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <find_volume+0x3a>
 800d8a6:	230c      	movs	r3, #12
 800d8a8:	e227      	b.n	800dcfa <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d8b0:	79fb      	ldrb	r3, [r7, #7]
 800d8b2:	f023 0301 	bic.w	r3, r3, #1
 800d8b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d01a      	beq.n	800d8f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c2:	785b      	ldrb	r3, [r3, #1]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fd feaf 	bl	800b628 <disk_status>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d8d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8d4:	f003 0301 	and.w	r3, r3, #1
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10c      	bne.n	800d8f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d8dc:	79fb      	ldrb	r3, [r7, #7]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d007      	beq.n	800d8f2 <find_volume+0x82>
 800d8e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8e6:	f003 0304 	and.w	r3, r3, #4
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d8ee:	230a      	movs	r3, #10
 800d8f0:	e203      	b.n	800dcfa <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	e201      	b.n	800dcfa <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d906:	785b      	ldrb	r3, [r3, #1]
 800d908:	4618      	mov	r0, r3
 800d90a:	f7fd fea7 	bl	800b65c <disk_initialize>
 800d90e:	4603      	mov	r3, r0
 800d910:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d914:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d918:	f003 0301 	and.w	r3, r3, #1
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d001      	beq.n	800d924 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d920:	2303      	movs	r3, #3
 800d922:	e1ea      	b.n	800dcfa <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d924:	79fb      	ldrb	r3, [r7, #7]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d007      	beq.n	800d93a <find_volume+0xca>
 800d92a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d92e:	f003 0304 	and.w	r3, r3, #4
 800d932:	2b00      	cmp	r3, #0
 800d934:	d001      	beq.n	800d93a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d936:	230a      	movs	r3, #10
 800d938:	e1df      	b.n	800dcfa <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d93e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d940:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d942:	f7ff ff3f 	bl	800d7c4 <check_fs>
 800d946:	4603      	mov	r3, r0
 800d948:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d94c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d950:	2b02      	cmp	r3, #2
 800d952:	d14b      	bne.n	800d9ec <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d954:	2300      	movs	r3, #0
 800d956:	643b      	str	r3, [r7, #64]	; 0x40
 800d958:	e01f      	b.n	800d99a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d962:	011b      	lsls	r3, r3, #4
 800d964:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d968:	4413      	add	r3, r2
 800d96a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96e:	3304      	adds	r3, #4
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d006      	beq.n	800d984 <find_volume+0x114>
 800d976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d978:	3308      	adds	r3, #8
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fd ff0a 	bl	800b794 <ld_dword>
 800d980:	4602      	mov	r2, r0
 800d982:	e000      	b.n	800d986 <find_volume+0x116>
 800d984:	2200      	movs	r2, #0
 800d986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d98e:	440b      	add	r3, r1
 800d990:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d996:	3301      	adds	r3, #1
 800d998:	643b      	str	r3, [r7, #64]	; 0x40
 800d99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d99c:	2b03      	cmp	r3, #3
 800d99e:	d9dc      	bls.n	800d95a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d002      	beq.n	800d9b0 <find_volume+0x140>
 800d9aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d9be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d9c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d005      	beq.n	800d9d2 <find_volume+0x162>
 800d9c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d9c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9ca:	f7ff fefb 	bl	800d7c4 <check_fs>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	e000      	b.n	800d9d4 <find_volume+0x164>
 800d9d2:	2303      	movs	r3, #3
 800d9d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d9d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d905      	bls.n	800d9ec <find_volume+0x17c>
 800d9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	643b      	str	r3, [r7, #64]	; 0x40
 800d9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e8:	2b03      	cmp	r3, #3
 800d9ea:	d9e1      	bls.n	800d9b0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d9ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9f0:	2b04      	cmp	r3, #4
 800d9f2:	d101      	bne.n	800d9f8 <find_volume+0x188>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e180      	b.n	800dcfa <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d9f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d901      	bls.n	800da04 <find_volume+0x194>
 800da00:	230d      	movs	r3, #13
 800da02:	e17a      	b.n	800dcfa <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800da04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da06:	3334      	adds	r3, #52	; 0x34
 800da08:	330b      	adds	r3, #11
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fd feaa 	bl	800b764 <ld_word>
 800da10:	4603      	mov	r3, r0
 800da12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da16:	d001      	beq.n	800da1c <find_volume+0x1ac>
 800da18:	230d      	movs	r3, #13
 800da1a:	e16e      	b.n	800dcfa <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800da1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1e:	3334      	adds	r3, #52	; 0x34
 800da20:	3316      	adds	r3, #22
 800da22:	4618      	mov	r0, r3
 800da24:	f7fd fe9e 	bl	800b764 <ld_word>
 800da28:	4603      	mov	r3, r0
 800da2a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800da2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d106      	bne.n	800da40 <find_volume+0x1d0>
 800da32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da34:	3334      	adds	r3, #52	; 0x34
 800da36:	3324      	adds	r3, #36	; 0x24
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fd feab 	bl	800b794 <ld_dword>
 800da3e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800da40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da44:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800da46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da48:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800da50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da52:	789b      	ldrb	r3, [r3, #2]
 800da54:	2b01      	cmp	r3, #1
 800da56:	d005      	beq.n	800da64 <find_volume+0x1f4>
 800da58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5a:	789b      	ldrb	r3, [r3, #2]
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d001      	beq.n	800da64 <find_volume+0x1f4>
 800da60:	230d      	movs	r3, #13
 800da62:	e14a      	b.n	800dcfa <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800da64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da66:	789b      	ldrb	r3, [r3, #2]
 800da68:	461a      	mov	r2, r3
 800da6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da6c:	fb02 f303 	mul.w	r3, r2, r3
 800da70:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da78:	b29a      	uxth	r2, r3
 800da7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800da7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da80:	895b      	ldrh	r3, [r3, #10]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d008      	beq.n	800da98 <find_volume+0x228>
 800da86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da88:	895b      	ldrh	r3, [r3, #10]
 800da8a:	461a      	mov	r2, r3
 800da8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8e:	895b      	ldrh	r3, [r3, #10]
 800da90:	3b01      	subs	r3, #1
 800da92:	4013      	ands	r3, r2
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <find_volume+0x22c>
 800da98:	230d      	movs	r3, #13
 800da9a:	e12e      	b.n	800dcfa <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800da9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9e:	3334      	adds	r3, #52	; 0x34
 800daa0:	3311      	adds	r3, #17
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fd fe5e 	bl	800b764 <ld_word>
 800daa8:	4603      	mov	r3, r0
 800daaa:	461a      	mov	r2, r3
 800daac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab2:	891b      	ldrh	r3, [r3, #8]
 800dab4:	f003 030f 	and.w	r3, r3, #15
 800dab8:	b29b      	uxth	r3, r3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <find_volume+0x252>
 800dabe:	230d      	movs	r3, #13
 800dac0:	e11b      	b.n	800dcfa <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac4:	3334      	adds	r3, #52	; 0x34
 800dac6:	3313      	adds	r3, #19
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fd fe4b 	bl	800b764 <ld_word>
 800dace:	4603      	mov	r3, r0
 800dad0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d106      	bne.n	800dae6 <find_volume+0x276>
 800dad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dada:	3334      	adds	r3, #52	; 0x34
 800dadc:	3320      	adds	r3, #32
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fd fe58 	bl	800b794 <ld_dword>
 800dae4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae8:	3334      	adds	r3, #52	; 0x34
 800daea:	330e      	adds	r3, #14
 800daec:	4618      	mov	r0, r3
 800daee:	f7fd fe39 	bl	800b764 <ld_word>
 800daf2:	4603      	mov	r3, r0
 800daf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800daf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d101      	bne.n	800db00 <find_volume+0x290>
 800dafc:	230d      	movs	r3, #13
 800dafe:	e0fc      	b.n	800dcfa <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800db00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800db02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db04:	4413      	add	r3, r2
 800db06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db08:	8912      	ldrh	r2, [r2, #8]
 800db0a:	0912      	lsrs	r2, r2, #4
 800db0c:	b292      	uxth	r2, r2
 800db0e:	4413      	add	r3, r2
 800db10:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800db12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db16:	429a      	cmp	r2, r3
 800db18:	d201      	bcs.n	800db1e <find_volume+0x2ae>
 800db1a:	230d      	movs	r3, #13
 800db1c:	e0ed      	b.n	800dcfa <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800db1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db26:	8952      	ldrh	r2, [r2, #10]
 800db28:	fbb3 f3f2 	udiv	r3, r3, r2
 800db2c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db30:	2b00      	cmp	r3, #0
 800db32:	d103      	bne.n	800db3c <find_volume+0x2cc>
 800db34:	230d      	movs	r3, #13
 800db36:	e0e0      	b.n	800dcfa <find_volume+0x48a>
 800db38:	20000768 	.word	0x20000768
		fmt = FS_FAT32;
 800db3c:	2303      	movs	r3, #3
 800db3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800db42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db44:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800db48:	4293      	cmp	r3, r2
 800db4a:	d802      	bhi.n	800db52 <find_volume+0x2e2>
 800db4c:	2302      	movs	r3, #2
 800db4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800db52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db54:	f640 72f5 	movw	r2, #4085	; 0xff5
 800db58:	4293      	cmp	r3, r2
 800db5a:	d802      	bhi.n	800db62 <find_volume+0x2f2>
 800db5c:	2301      	movs	r3, #1
 800db5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800db62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db64:	1c9a      	adds	r2, r3, #2
 800db66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db68:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800db6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db6e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800db70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800db72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db74:	441a      	add	r2, r3
 800db76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db78:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800db7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7e:	441a      	add	r2, r3
 800db80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db82:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800db84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db88:	2b03      	cmp	r3, #3
 800db8a:	d11e      	bne.n	800dbca <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800db8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8e:	3334      	adds	r3, #52	; 0x34
 800db90:	332a      	adds	r3, #42	; 0x2a
 800db92:	4618      	mov	r0, r3
 800db94:	f7fd fde6 	bl	800b764 <ld_word>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d001      	beq.n	800dba2 <find_volume+0x332>
 800db9e:	230d      	movs	r3, #13
 800dba0:	e0ab      	b.n	800dcfa <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba4:	891b      	ldrh	r3, [r3, #8]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d001      	beq.n	800dbae <find_volume+0x33e>
 800dbaa:	230d      	movs	r3, #13
 800dbac:	e0a5      	b.n	800dcfa <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb0:	3334      	adds	r3, #52	; 0x34
 800dbb2:	332c      	adds	r3, #44	; 0x2c
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7fd fded 	bl	800b794 <ld_dword>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc2:	699b      	ldr	r3, [r3, #24]
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	647b      	str	r3, [r7, #68]	; 0x44
 800dbc8:	e01f      	b.n	800dc0a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbcc:	891b      	ldrh	r3, [r3, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d101      	bne.n	800dbd6 <find_volume+0x366>
 800dbd2:	230d      	movs	r3, #13
 800dbd4:	e091      	b.n	800dcfa <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbdc:	441a      	add	r2, r3
 800dbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dbe2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	d103      	bne.n	800dbf2 <find_volume+0x382>
 800dbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbec:	699b      	ldr	r3, [r3, #24]
 800dbee:	005b      	lsls	r3, r3, #1
 800dbf0:	e00a      	b.n	800dc08 <find_volume+0x398>
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf4:	699a      	ldr	r2, [r3, #24]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	005b      	lsls	r3, r3, #1
 800dbfa:	4413      	add	r3, r2
 800dbfc:	085a      	lsrs	r2, r3, #1
 800dbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc00:	699b      	ldr	r3, [r3, #24]
 800dc02:	f003 0301 	and.w	r3, r3, #1
 800dc06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dc08:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0c:	69da      	ldr	r2, [r3, #28]
 800dc0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dc14:	0a5b      	lsrs	r3, r3, #9
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d201      	bcs.n	800dc1e <find_volume+0x3ae>
 800dc1a:	230d      	movs	r3, #13
 800dc1c:	e06d      	b.n	800dcfa <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc20:	f04f 32ff 	mov.w	r2, #4294967295
 800dc24:	615a      	str	r2, [r3, #20]
 800dc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc28:	695a      	ldr	r2, [r3, #20]
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800dc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc30:	2280      	movs	r2, #128	; 0x80
 800dc32:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dc34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc38:	2b03      	cmp	r3, #3
 800dc3a:	d149      	bne.n	800dcd0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3e:	3334      	adds	r3, #52	; 0x34
 800dc40:	3330      	adds	r3, #48	; 0x30
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fd fd8e 	bl	800b764 <ld_word>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d140      	bne.n	800dcd0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dc4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc50:	3301      	adds	r3, #1
 800dc52:	4619      	mov	r1, r3
 800dc54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc56:	f7fe f835 	bl	800bcc4 <move_window>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d137      	bne.n	800dcd0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800dc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc62:	2200      	movs	r2, #0
 800dc64:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	3334      	adds	r3, #52	; 0x34
 800dc6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fd fd78 	bl	800b764 <ld_word>
 800dc74:	4603      	mov	r3, r0
 800dc76:	461a      	mov	r2, r3
 800dc78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d127      	bne.n	800dcd0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc82:	3334      	adds	r3, #52	; 0x34
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fd fd85 	bl	800b794 <ld_dword>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	4a1d      	ldr	r2, [pc, #116]	; (800dd04 <find_volume+0x494>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d11e      	bne.n	800dcd0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc94:	3334      	adds	r3, #52	; 0x34
 800dc96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fd fd7a 	bl	800b794 <ld_dword>
 800dca0:	4603      	mov	r3, r0
 800dca2:	4a19      	ldr	r2, [pc, #100]	; (800dd08 <find_volume+0x498>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d113      	bne.n	800dcd0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcaa:	3334      	adds	r3, #52	; 0x34
 800dcac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7fd fd6f 	bl	800b794 <ld_dword>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcba:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbe:	3334      	adds	r3, #52	; 0x34
 800dcc0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fd fd65 	bl	800b794 <ld_dword>
 800dcca:	4602      	mov	r2, r0
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dcd6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dcd8:	4b0c      	ldr	r3, [pc, #48]	; (800dd0c <find_volume+0x49c>)
 800dcda:	881b      	ldrh	r3, [r3, #0]
 800dcdc:	3301      	adds	r3, #1
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	4b0a      	ldr	r3, [pc, #40]	; (800dd0c <find_volume+0x49c>)
 800dce2:	801a      	strh	r2, [r3, #0]
 800dce4:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <find_volume+0x49c>)
 800dce6:	881a      	ldrh	r2, [r3, #0]
 800dce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcea:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcee:	4a08      	ldr	r2, [pc, #32]	; (800dd10 <find_volume+0x4a0>)
 800dcf0:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dcf2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dcf4:	f7fd ff7e 	bl	800bbf4 <clear_lock>
#endif
	return FR_OK;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3758      	adds	r7, #88	; 0x58
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	41615252 	.word	0x41615252
 800dd08:	61417272 	.word	0x61417272
 800dd0c:	2000076c 	.word	0x2000076c
 800dd10:	20000790 	.word	0x20000790

0800dd14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dd1e:	2309      	movs	r3, #9
 800dd20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d01c      	beq.n	800dd62 <validate+0x4e>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d018      	beq.n	800dd62 <validate+0x4e>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d013      	beq.n	800dd62 <validate+0x4e>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	889a      	ldrh	r2, [r3, #4]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	88db      	ldrh	r3, [r3, #6]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d10c      	bne.n	800dd62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	785b      	ldrb	r3, [r3, #1]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fd fc6a 	bl	800b628 <disk_status>
 800dd54:	4603      	mov	r3, r0
 800dd56:	f003 0301 	and.w	r3, r3, #1
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d101      	bne.n	800dd62 <validate+0x4e>
			res = FR_OK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dd62:	7bfb      	ldrb	r3, [r7, #15]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d102      	bne.n	800dd6e <validate+0x5a>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	e000      	b.n	800dd70 <validate+0x5c>
 800dd6e:	2300      	movs	r3, #0
 800dd70:	683a      	ldr	r2, [r7, #0]
 800dd72:	6013      	str	r3, [r2, #0]
	return res;
 800dd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
	...

0800dd80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b088      	sub	sp, #32
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dd92:	f107 0310 	add.w	r3, r7, #16
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7ff fccf 	bl	800d73a <get_ldnumber>
 800dd9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	da01      	bge.n	800dda8 <f_mount+0x28>
 800dda4:	230b      	movs	r3, #11
 800dda6:	e02b      	b.n	800de00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dda8:	4a17      	ldr	r2, [pc, #92]	; (800de08 <f_mount+0x88>)
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d005      	beq.n	800ddc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ddb8:	69b8      	ldr	r0, [r7, #24]
 800ddba:	f7fd ff1b 	bl	800bbf4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d002      	beq.n	800ddd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	490d      	ldr	r1, [pc, #52]	; (800de08 <f_mount+0x88>)
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d002      	beq.n	800dde6 <f_mount+0x66>
 800dde0:	79fb      	ldrb	r3, [r7, #7]
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d001      	beq.n	800ddea <f_mount+0x6a>
 800dde6:	2300      	movs	r3, #0
 800dde8:	e00a      	b.n	800de00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ddea:	f107 010c 	add.w	r1, r7, #12
 800ddee:	f107 0308 	add.w	r3, r7, #8
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff fd3b 	bl	800d870 <find_volume>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ddfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800de00:	4618      	mov	r0, r3
 800de02:	3720      	adds	r7, #32
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	20000768 	.word	0x20000768

0800de0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b09a      	sub	sp, #104	; 0x68
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	4613      	mov	r3, r2
 800de18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d101      	bne.n	800de24 <f_open+0x18>
 800de20:	2309      	movs	r3, #9
 800de22:	e1ad      	b.n	800e180 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800de24:	79fb      	ldrb	r3, [r7, #7]
 800de26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800de2c:	79fa      	ldrb	r2, [r7, #7]
 800de2e:	f107 0110 	add.w	r1, r7, #16
 800de32:	f107 0308 	add.w	r3, r7, #8
 800de36:	4618      	mov	r0, r3
 800de38:	f7ff fd1a 	bl	800d870 <find_volume>
 800de3c:	4603      	mov	r3, r0
 800de3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800de42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de46:	2b00      	cmp	r3, #0
 800de48:	f040 8191 	bne.w	800e16e <f_open+0x362>
		dj.obj.fs = fs;
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	f107 0314 	add.w	r3, r7, #20
 800de56:	4611      	mov	r1, r2
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff fbfd 	bl	800d658 <follow_path>
 800de5e:	4603      	mov	r3, r0
 800de60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800de64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d11a      	bne.n	800dea2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800de6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de70:	b25b      	sxtb	r3, r3
 800de72:	2b00      	cmp	r3, #0
 800de74:	da03      	bge.n	800de7e <f_open+0x72>
				res = FR_INVALID_NAME;
 800de76:	2306      	movs	r3, #6
 800de78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800de7c:	e011      	b.n	800dea2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de7e:	79fb      	ldrb	r3, [r7, #7]
 800de80:	f023 0301 	bic.w	r3, r3, #1
 800de84:	2b00      	cmp	r3, #0
 800de86:	bf14      	ite	ne
 800de88:	2301      	movne	r3, #1
 800de8a:	2300      	moveq	r3, #0
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	461a      	mov	r2, r3
 800de90:	f107 0314 	add.w	r3, r7, #20
 800de94:	4611      	mov	r1, r2
 800de96:	4618      	mov	r0, r3
 800de98:	f7fd fd64 	bl	800b964 <chk_lock>
 800de9c:	4603      	mov	r3, r0
 800de9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dea2:	79fb      	ldrb	r3, [r7, #7]
 800dea4:	f003 031c 	and.w	r3, r3, #28
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d07f      	beq.n	800dfac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800deac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d017      	beq.n	800dee4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800deb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800deb8:	2b04      	cmp	r3, #4
 800deba:	d10e      	bne.n	800deda <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800debc:	f7fd fdae 	bl	800ba1c <enq_lock>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d006      	beq.n	800ded4 <f_open+0xc8>
 800dec6:	f107 0314 	add.w	r3, r7, #20
 800deca:	4618      	mov	r0, r3
 800decc:	f7fe ff94 	bl	800cdf8 <dir_register>
 800ded0:	4603      	mov	r3, r0
 800ded2:	e000      	b.n	800ded6 <f_open+0xca>
 800ded4:	2312      	movs	r3, #18
 800ded6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800deda:	79fb      	ldrb	r3, [r7, #7]
 800dedc:	f043 0308 	orr.w	r3, r3, #8
 800dee0:	71fb      	strb	r3, [r7, #7]
 800dee2:	e010      	b.n	800df06 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dee4:	7ebb      	ldrb	r3, [r7, #26]
 800dee6:	f003 0311 	and.w	r3, r3, #17
 800deea:	2b00      	cmp	r3, #0
 800deec:	d003      	beq.n	800def6 <f_open+0xea>
					res = FR_DENIED;
 800deee:	2307      	movs	r3, #7
 800def0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800def4:	e007      	b.n	800df06 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800def6:	79fb      	ldrb	r3, [r7, #7]
 800def8:	f003 0304 	and.w	r3, r3, #4
 800defc:	2b00      	cmp	r3, #0
 800defe:	d002      	beq.n	800df06 <f_open+0xfa>
 800df00:	2308      	movs	r3, #8
 800df02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800df06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d168      	bne.n	800dfe0 <f_open+0x1d4>
 800df0e:	79fb      	ldrb	r3, [r7, #7]
 800df10:	f003 0308 	and.w	r3, r3, #8
 800df14:	2b00      	cmp	r3, #0
 800df16:	d063      	beq.n	800dfe0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800df18:	f7fb ff92 	bl	8009e40 <get_fattime>
 800df1c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800df1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df20:	330e      	adds	r3, #14
 800df22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df24:	4618      	mov	r0, r3
 800df26:	f7fd fc73 	bl	800b810 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800df2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df2c:	3316      	adds	r3, #22
 800df2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df30:	4618      	mov	r0, r3
 800df32:	f7fd fc6d 	bl	800b810 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800df36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df38:	330b      	adds	r3, #11
 800df3a:	2220      	movs	r2, #32
 800df3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df42:	4611      	mov	r1, r2
 800df44:	4618      	mov	r0, r3
 800df46:	f7fe fbc4 	bl	800c6d2 <ld_clust>
 800df4a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df50:	2200      	movs	r2, #0
 800df52:	4618      	mov	r0, r3
 800df54:	f7fe fbdc 	bl	800c710 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800df58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df5a:	331c      	adds	r3, #28
 800df5c:	2100      	movs	r1, #0
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fd fc56 	bl	800b810 <st_dword>
					fs->wflag = 1;
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	2201      	movs	r2, #1
 800df68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800df6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d037      	beq.n	800dfe0 <f_open+0x1d4>
						dw = fs->winsect;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df74:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800df76:	f107 0314 	add.w	r3, r7, #20
 800df7a:	2200      	movs	r2, #0
 800df7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fe f8ef 	bl	800c162 <remove_chain>
 800df84:	4603      	mov	r3, r0
 800df86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800df8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d126      	bne.n	800dfe0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df96:	4618      	mov	r0, r3
 800df98:	f7fd fe94 	bl	800bcc4 <move_window>
 800df9c:	4603      	mov	r3, r0
 800df9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dfa6:	3a01      	subs	r2, #1
 800dfa8:	611a      	str	r2, [r3, #16]
 800dfaa:	e019      	b.n	800dfe0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dfac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d115      	bne.n	800dfe0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dfb4:	7ebb      	ldrb	r3, [r7, #26]
 800dfb6:	f003 0310 	and.w	r3, r3, #16
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d003      	beq.n	800dfc6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800dfbe:	2304      	movs	r3, #4
 800dfc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dfc4:	e00c      	b.n	800dfe0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dfc6:	79fb      	ldrb	r3, [r7, #7]
 800dfc8:	f003 0302 	and.w	r3, r3, #2
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d007      	beq.n	800dfe0 <f_open+0x1d4>
 800dfd0:	7ebb      	ldrb	r3, [r7, #26]
 800dfd2:	f003 0301 	and.w	r3, r3, #1
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d002      	beq.n	800dfe0 <f_open+0x1d4>
						res = FR_DENIED;
 800dfda:	2307      	movs	r3, #7
 800dfdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800dfe0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d128      	bne.n	800e03a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dfe8:	79fb      	ldrb	r3, [r7, #7]
 800dfea:	f003 0308 	and.w	r3, r3, #8
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d003      	beq.n	800dffa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dff2:	79fb      	ldrb	r3, [r7, #7]
 800dff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dff8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e008:	79fb      	ldrb	r3, [r7, #7]
 800e00a:	f023 0301 	bic.w	r3, r3, #1
 800e00e:	2b00      	cmp	r3, #0
 800e010:	bf14      	ite	ne
 800e012:	2301      	movne	r3, #1
 800e014:	2300      	moveq	r3, #0
 800e016:	b2db      	uxtb	r3, r3
 800e018:	461a      	mov	r2, r3
 800e01a:	f107 0314 	add.w	r3, r7, #20
 800e01e:	4611      	mov	r1, r2
 800e020:	4618      	mov	r0, r3
 800e022:	f7fd fd1d 	bl	800ba60 <inc_lock>
 800e026:	4602      	mov	r2, r0
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	691b      	ldr	r3, [r3, #16]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d102      	bne.n	800e03a <f_open+0x22e>
 800e034:	2302      	movs	r3, #2
 800e036:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e03a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e03e:	2b00      	cmp	r3, #0
 800e040:	f040 8095 	bne.w	800e16e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e048:	4611      	mov	r1, r2
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7fe fb41 	bl	800c6d2 <ld_clust>
 800e050:	4602      	mov	r2, r0
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e058:	331c      	adds	r3, #28
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fd fb9a 	bl	800b794 <ld_dword>
 800e060:	4602      	mov	r2, r0
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2200      	movs	r2, #0
 800e06a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e06c:	693a      	ldr	r2, [r7, #16]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	88da      	ldrh	r2, [r3, #6]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	79fa      	ldrb	r2, [r7, #7]
 800e07e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2200      	movs	r2, #0
 800e084:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2200      	movs	r2, #0
 800e08a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2200      	movs	r2, #0
 800e090:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3330      	adds	r3, #48	; 0x30
 800e096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e09a:	2100      	movs	r1, #0
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fd fc04 	bl	800b8aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e0a2:	79fb      	ldrb	r3, [r7, #7]
 800e0a4:	f003 0320 	and.w	r3, r3, #32
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d060      	beq.n	800e16e <f_open+0x362>
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d05c      	beq.n	800e16e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	68da      	ldr	r2, [r3, #12]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	895b      	ldrh	r3, [r3, #10]
 800e0c0:	025b      	lsls	r3, r3, #9
 800e0c2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0d0:	e016      	b.n	800e100 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7fd feaf 	bl	800be3a <get_fat>
 800e0dc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e0de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d802      	bhi.n	800e0ea <f_open+0x2de>
 800e0e4:	2302      	movs	r3, #2
 800e0e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e0ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f0:	d102      	bne.n	800e0f8 <f_open+0x2ec>
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e0f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e100:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e104:	2b00      	cmp	r3, #0
 800e106:	d103      	bne.n	800e110 <f_open+0x304>
 800e108:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e10a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d8e0      	bhi.n	800e0d2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e114:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e116:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d127      	bne.n	800e16e <f_open+0x362>
 800e11e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e124:	2b00      	cmp	r3, #0
 800e126:	d022      	beq.n	800e16e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fd fe65 	bl	800bdfc <clust2sect>
 800e132:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e136:	2b00      	cmp	r3, #0
 800e138:	d103      	bne.n	800e142 <f_open+0x336>
						res = FR_INT_ERR;
 800e13a:	2302      	movs	r3, #2
 800e13c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e140:	e015      	b.n	800e16e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e144:	0a5a      	lsrs	r2, r3, #9
 800e146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e148:	441a      	add	r2, r3
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	7858      	ldrb	r0, [r3, #1]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	6a1a      	ldr	r2, [r3, #32]
 800e15c:	2301      	movs	r3, #1
 800e15e:	f7fd faa3 	bl	800b6a8 <disk_read>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <f_open+0x362>
 800e168:	2301      	movs	r3, #1
 800e16a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e16e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e172:	2b00      	cmp	r3, #0
 800e174:	d002      	beq.n	800e17c <f_open+0x370>
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2200      	movs	r2, #0
 800e17a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e17c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e180:	4618      	mov	r0, r3
 800e182:	3768      	adds	r7, #104	; 0x68
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b08e      	sub	sp, #56	; 0x38
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	607a      	str	r2, [r7, #4]
 800e194:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	2200      	movs	r2, #0
 800e19e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f107 0214 	add.w	r2, r7, #20
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7ff fdb3 	bl	800dd14 <validate>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e1b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d107      	bne.n	800e1cc <f_read+0x44>
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	7d5b      	ldrb	r3, [r3, #21]
 800e1c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e1c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d002      	beq.n	800e1d2 <f_read+0x4a>
 800e1cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1d0:	e115      	b.n	800e3fe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	7d1b      	ldrb	r3, [r3, #20]
 800e1d6:	f003 0301 	and.w	r3, r3, #1
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d101      	bne.n	800e1e2 <f_read+0x5a>
 800e1de:	2307      	movs	r3, #7
 800e1e0:	e10d      	b.n	800e3fe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	68da      	ldr	r2, [r3, #12]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	699b      	ldr	r3, [r3, #24]
 800e1ea:	1ad3      	subs	r3, r2, r3
 800e1ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	6a3b      	ldr	r3, [r7, #32]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	f240 80fe 	bls.w	800e3f4 <f_read+0x26c>
 800e1f8:	6a3b      	ldr	r3, [r7, #32]
 800e1fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e1fc:	e0fa      	b.n	800e3f4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	699b      	ldr	r3, [r3, #24]
 800e202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e206:	2b00      	cmp	r3, #0
 800e208:	f040 80c6 	bne.w	800e398 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	699b      	ldr	r3, [r3, #24]
 800e210:	0a5b      	lsrs	r3, r3, #9
 800e212:	697a      	ldr	r2, [r7, #20]
 800e214:	8952      	ldrh	r2, [r2, #10]
 800e216:	3a01      	subs	r2, #1
 800e218:	4013      	ands	r3, r2
 800e21a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d12f      	bne.n	800e282 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	699b      	ldr	r3, [r3, #24]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d103      	bne.n	800e232 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	633b      	str	r3, [r7, #48]	; 0x30
 800e230:	e013      	b.n	800e25a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e236:	2b00      	cmp	r3, #0
 800e238:	d007      	beq.n	800e24a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	699b      	ldr	r3, [r3, #24]
 800e23e:	4619      	mov	r1, r3
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	f7fe f88b 	bl	800c35c <clmt_clust>
 800e246:	6338      	str	r0, [r7, #48]	; 0x30
 800e248:	e007      	b.n	800e25a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e24a:	68fa      	ldr	r2, [r7, #12]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	69db      	ldr	r3, [r3, #28]
 800e250:	4619      	mov	r1, r3
 800e252:	4610      	mov	r0, r2
 800e254:	f7fd fdf1 	bl	800be3a <get_fat>
 800e258:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d804      	bhi.n	800e26a <f_read+0xe2>
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2202      	movs	r2, #2
 800e264:	755a      	strb	r2, [r3, #21]
 800e266:	2302      	movs	r3, #2
 800e268:	e0c9      	b.n	800e3fe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e270:	d104      	bne.n	800e27c <f_read+0xf4>
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2201      	movs	r2, #1
 800e276:	755a      	strb	r2, [r3, #21]
 800e278:	2301      	movs	r3, #1
 800e27a:	e0c0      	b.n	800e3fe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e280:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e282:	697a      	ldr	r2, [r7, #20]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	69db      	ldr	r3, [r3, #28]
 800e288:	4619      	mov	r1, r3
 800e28a:	4610      	mov	r0, r2
 800e28c:	f7fd fdb6 	bl	800bdfc <clust2sect>
 800e290:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d104      	bne.n	800e2a2 <f_read+0x11a>
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2202      	movs	r2, #2
 800e29c:	755a      	strb	r2, [r3, #21]
 800e29e:	2302      	movs	r3, #2
 800e2a0:	e0ad      	b.n	800e3fe <f_read+0x276>
			sect += csect;
 800e2a2:	69ba      	ldr	r2, [r7, #24]
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	0a5b      	lsrs	r3, r3, #9
 800e2ae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d039      	beq.n	800e32a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e2b6:	69fa      	ldr	r2, [r7, #28]
 800e2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ba:	4413      	add	r3, r2
 800e2bc:	697a      	ldr	r2, [r7, #20]
 800e2be:	8952      	ldrh	r2, [r2, #10]
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d905      	bls.n	800e2d0 <f_read+0x148>
					cc = fs->csize - csect;
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	895b      	ldrh	r3, [r3, #10]
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	1ad3      	subs	r3, r2, r3
 800e2ce:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	7858      	ldrb	r0, [r3, #1]
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	69ba      	ldr	r2, [r7, #24]
 800e2d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2da:	f7fd f9e5 	bl	800b6a8 <disk_read>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d004      	beq.n	800e2ee <f_read+0x166>
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	755a      	strb	r2, [r3, #21]
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e087      	b.n	800e3fe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	7d1b      	ldrb	r3, [r3, #20]
 800e2f2:	b25b      	sxtb	r3, r3
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	da14      	bge.n	800e322 <f_read+0x19a>
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6a1a      	ldr	r2, [r3, #32]
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	1ad3      	subs	r3, r2, r3
 800e300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e302:	429a      	cmp	r2, r3
 800e304:	d90d      	bls.n	800e322 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6a1a      	ldr	r2, [r3, #32]
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	1ad3      	subs	r3, r2, r3
 800e30e:	025b      	lsls	r3, r3, #9
 800e310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e312:	18d0      	adds	r0, r2, r3
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	3330      	adds	r3, #48	; 0x30
 800e318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e31c:	4619      	mov	r1, r3
 800e31e:	f7fd faa3 	bl	800b868 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e324:	025b      	lsls	r3, r3, #9
 800e326:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e328:	e050      	b.n	800e3cc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	6a1b      	ldr	r3, [r3, #32]
 800e32e:	69ba      	ldr	r2, [r7, #24]
 800e330:	429a      	cmp	r2, r3
 800e332:	d02e      	beq.n	800e392 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	7d1b      	ldrb	r3, [r3, #20]
 800e338:	b25b      	sxtb	r3, r3
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	da18      	bge.n	800e370 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	7858      	ldrb	r0, [r3, #1]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6a1a      	ldr	r2, [r3, #32]
 800e34c:	2301      	movs	r3, #1
 800e34e:	f7fd f9cb 	bl	800b6e8 <disk_write>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d004      	beq.n	800e362 <f_read+0x1da>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2201      	movs	r2, #1
 800e35c:	755a      	strb	r2, [r3, #21]
 800e35e:	2301      	movs	r3, #1
 800e360:	e04d      	b.n	800e3fe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	7d1b      	ldrb	r3, [r3, #20]
 800e366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e36a:	b2da      	uxtb	r2, r3
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	7858      	ldrb	r0, [r3, #1]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e37a:	2301      	movs	r3, #1
 800e37c:	69ba      	ldr	r2, [r7, #24]
 800e37e:	f7fd f993 	bl	800b6a8 <disk_read>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d004      	beq.n	800e392 <f_read+0x20a>
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2201      	movs	r2, #1
 800e38c:	755a      	strb	r2, [r3, #21]
 800e38e:	2301      	movs	r3, #1
 800e390:	e035      	b.n	800e3fe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	69ba      	ldr	r2, [r7, #24]
 800e396:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	699b      	ldr	r3, [r3, #24]
 800e39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e3a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d901      	bls.n	800e3b2 <f_read+0x22a>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	699b      	ldr	r3, [r3, #24]
 800e3bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3c0:	4413      	add	r3, r2
 800e3c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3c8:	f7fd fa4e 	bl	800b868 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e3cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d0:	4413      	add	r3, r2
 800e3d2:	627b      	str	r3, [r7, #36]	; 0x24
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	699a      	ldr	r2, [r3, #24]
 800e3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3da:	441a      	add	r2, r3
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	619a      	str	r2, [r3, #24]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e6:	441a      	add	r2, r3
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	601a      	str	r2, [r3, #0]
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f47f af01 	bne.w	800e1fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3738      	adds	r7, #56	; 0x38
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b086      	sub	sp, #24
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f107 0208 	add.w	r2, r7, #8
 800e414:	4611      	mov	r1, r2
 800e416:	4618      	mov	r0, r3
 800e418:	f7ff fc7c 	bl	800dd14 <validate>
 800e41c:	4603      	mov	r3, r0
 800e41e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e420:	7dfb      	ldrb	r3, [r7, #23]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d168      	bne.n	800e4f8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	7d1b      	ldrb	r3, [r3, #20]
 800e42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d062      	beq.n	800e4f8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	7d1b      	ldrb	r3, [r3, #20]
 800e436:	b25b      	sxtb	r3, r3
 800e438:	2b00      	cmp	r3, #0
 800e43a:	da15      	bge.n	800e468 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	7858      	ldrb	r0, [r3, #1]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6a1a      	ldr	r2, [r3, #32]
 800e44a:	2301      	movs	r3, #1
 800e44c:	f7fd f94c 	bl	800b6e8 <disk_write>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d001      	beq.n	800e45a <f_sync+0x54>
 800e456:	2301      	movs	r3, #1
 800e458:	e04f      	b.n	800e4fa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	7d1b      	ldrb	r3, [r3, #20]
 800e45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e462:	b2da      	uxtb	r2, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e468:	f7fb fcea 	bl	8009e40 <get_fattime>
 800e46c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e474:	4619      	mov	r1, r3
 800e476:	4610      	mov	r0, r2
 800e478:	f7fd fc24 	bl	800bcc4 <move_window>
 800e47c:	4603      	mov	r3, r0
 800e47e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e480:	7dfb      	ldrb	r3, [r7, #23]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d138      	bne.n	800e4f8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e48a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	330b      	adds	r3, #11
 800e490:	781a      	ldrb	r2, [r3, #0]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	330b      	adds	r3, #11
 800e496:	f042 0220 	orr.w	r2, r2, #32
 800e49a:	b2d2      	uxtb	r2, r2
 800e49c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6818      	ldr	r0, [r3, #0]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	68f9      	ldr	r1, [r7, #12]
 800e4aa:	f7fe f931 	bl	800c710 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f103 021c 	add.w	r2, r3, #28
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	4610      	mov	r0, r2
 800e4bc:	f7fd f9a8 	bl	800b810 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	3316      	adds	r3, #22
 800e4c4:	6939      	ldr	r1, [r7, #16]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fd f9a2 	bl	800b810 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	3312      	adds	r3, #18
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7fd f981 	bl	800b7da <st_word>
					fs->wflag = 1;
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	2201      	movs	r2, #1
 800e4dc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fd fc1d 	bl	800bd20 <sync_fs>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	7d1b      	ldrb	r3, [r3, #20]
 800e4ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e4f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3718      	adds	r7, #24
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}

0800e502 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e502:	b580      	push	{r7, lr}
 800e504:	b084      	sub	sp, #16
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f7ff ff7b 	bl	800e406 <f_sync>
 800e510:	4603      	mov	r3, r0
 800e512:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e514:	7bfb      	ldrb	r3, [r7, #15]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d118      	bne.n	800e54c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f107 0208 	add.w	r2, r7, #8
 800e520:	4611      	mov	r1, r2
 800e522:	4618      	mov	r0, r3
 800e524:	f7ff fbf6 	bl	800dd14 <validate>
 800e528:	4603      	mov	r3, r0
 800e52a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e52c:	7bfb      	ldrb	r3, [r7, #15]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d10c      	bne.n	800e54c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	691b      	ldr	r3, [r3, #16]
 800e536:	4618      	mov	r0, r3
 800e538:	f7fd fb20 	bl	800bb7c <dec_lock>
 800e53c:	4603      	mov	r3, r0
 800e53e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e540:	7bfb      	ldrb	r3, [r7, #15]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d102      	bne.n	800e54c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3710      	adds	r7, #16
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}

0800e556 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e556:	b580      	push	{r7, lr}
 800e558:	b086      	sub	sp, #24
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6078      	str	r0, [r7, #4]
 800e55e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d101      	bne.n	800e56a <f_opendir+0x14>
 800e566:	2309      	movs	r3, #9
 800e568:	e064      	b.n	800e634 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e56e:	f107 010c 	add.w	r1, r7, #12
 800e572:	463b      	mov	r3, r7
 800e574:	2200      	movs	r2, #0
 800e576:	4618      	mov	r0, r3
 800e578:	f7ff f97a 	bl	800d870 <find_volume>
 800e57c:	4603      	mov	r3, r0
 800e57e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e580:	7dfb      	ldrb	r3, [r7, #23]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d14f      	bne.n	800e626 <f_opendir+0xd0>
		obj->fs = fs;
 800e586:	68fa      	ldr	r2, [r7, #12]
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	4619      	mov	r1, r3
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f7ff f861 	bl	800d658 <follow_path>
 800e596:	4603      	mov	r3, r0
 800e598:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e59a:	7dfb      	ldrb	r3, [r7, #23]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d13d      	bne.n	800e61c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e5a6:	b25b      	sxtb	r3, r3
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	db12      	blt.n	800e5d2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	799b      	ldrb	r3, [r3, #6]
 800e5b0:	f003 0310 	and.w	r3, r3, #16
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00a      	beq.n	800e5ce <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e5b8:	68fa      	ldr	r2, [r7, #12]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6a1b      	ldr	r3, [r3, #32]
 800e5be:	4619      	mov	r1, r3
 800e5c0:	4610      	mov	r0, r2
 800e5c2:	f7fe f886 	bl	800c6d2 <ld_clust>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	609a      	str	r2, [r3, #8]
 800e5cc:	e001      	b.n	800e5d2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e5ce:	2305      	movs	r3, #5
 800e5d0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e5d2:	7dfb      	ldrb	r3, [r7, #23]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d121      	bne.n	800e61c <f_opendir+0xc6>
				obj->id = fs->id;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	88da      	ldrh	r2, [r3, #6]
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e5e0:	2100      	movs	r1, #0
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7fd feee 	bl	800c3c4 <dir_sdi>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e5ec:	7dfb      	ldrb	r3, [r7, #23]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d114      	bne.n	800e61c <f_opendir+0xc6>
					if (obj->sclust) {
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00d      	beq.n	800e616 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e5fa:	2100      	movs	r1, #0
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7fd fa2f 	bl	800ba60 <inc_lock>
 800e602:	4602      	mov	r2, r0
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	691b      	ldr	r3, [r3, #16]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d105      	bne.n	800e61c <f_opendir+0xc6>
 800e610:	2312      	movs	r3, #18
 800e612:	75fb      	strb	r3, [r7, #23]
 800e614:	e002      	b.n	800e61c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	2200      	movs	r2, #0
 800e61a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e61c:	7dfb      	ldrb	r3, [r7, #23]
 800e61e:	2b04      	cmp	r3, #4
 800e620:	d101      	bne.n	800e626 <f_opendir+0xd0>
 800e622:	2305      	movs	r3, #5
 800e624:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e626:	7dfb      	ldrb	r3, [r7, #23]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d002      	beq.n	800e632 <f_opendir+0xdc>
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	2200      	movs	r2, #0
 800e630:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e632:	7dfb      	ldrb	r3, [r7, #23]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3718      	adds	r7, #24
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f107 0208 	add.w	r2, r7, #8
 800e64a:	4611      	mov	r1, r2
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7ff fb61 	bl	800dd14 <validate>
 800e652:	4603      	mov	r3, r0
 800e654:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e656:	7bfb      	ldrb	r3, [r7, #15]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d110      	bne.n	800e67e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	691b      	ldr	r3, [r3, #16]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d006      	beq.n	800e672 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	691b      	ldr	r3, [r3, #16]
 800e668:	4618      	mov	r0, r3
 800e66a:	f7fd fa87 	bl	800bb7c <dec_lock>
 800e66e:	4603      	mov	r3, r0
 800e670:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e672:	7bfb      	ldrb	r3, [r7, #15]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d102      	bne.n	800e67e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2200      	movs	r2, #0
 800e67c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3710      	adds	r7, #16
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f107 0208 	add.w	r2, r7, #8
 800e698:	4611      	mov	r1, r2
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7ff fb3a 	bl	800dd14 <validate>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d126      	bne.n	800e6f8 <f_readdir+0x70>
		if (!fno) {
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d106      	bne.n	800e6be <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7fd fe86 	bl	800c3c4 <dir_sdi>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	73fb      	strb	r3, [r7, #15]
 800e6bc:	e01c      	b.n	800e6f8 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e6be:	2100      	movs	r1, #0
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7fe fa32 	bl	800cb2a <dir_read>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
 800e6cc:	2b04      	cmp	r3, #4
 800e6ce:	d101      	bne.n	800e6d4 <f_readdir+0x4c>
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e6d4:	7bfb      	ldrb	r3, [r7, #15]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d10e      	bne.n	800e6f8 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e6da:	6839      	ldr	r1, [r7, #0]
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7fe fc83 	bl	800cfe8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f7fd fee8 	bl	800c4ba <dir_next>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e6ee:	7bfb      	ldrb	r3, [r7, #15]
 800e6f0:	2b04      	cmp	r3, #4
 800e6f2:	d101      	bne.n	800e6f8 <f_readdir+0x70>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3710      	adds	r7, #16
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800e702:	b580      	push	{r7, lr}
 800e704:	b084      	sub	sp, #16
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
 800e70a:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800e70c:	6839      	ldr	r1, [r7, #0]
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7ff ffba 	bl	800e688 <f_readdir>
 800e714:	4603      	mov	r3, r0
 800e716:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800e718:	7bfb      	ldrb	r3, [r7, #15]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d114      	bne.n	800e748 <f_findnext+0x46>
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d011      	beq.n	800e748 <f_findnext+0x46>
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	7d9b      	ldrb	r3, [r3, #22]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00d      	beq.n	800e748 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	f103 0116 	add.w	r1, r3, #22
 800e736:	2300      	movs	r3, #0
 800e738:	2200      	movs	r2, #0
 800e73a:	f7fe fd59 	bl	800d1f0 <pattern_matching>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d100      	bne.n	800e746 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800e744:	e7e2      	b.n	800e70c <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800e746:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800e748:	7bfb      	ldrb	r3, [r7, #15]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b086      	sub	sp, #24
 800e756:	af00      	add	r7, sp, #0
 800e758:	60f8      	str	r0, [r7, #12]
 800e75a:	60b9      	str	r1, [r7, #8]
 800e75c:	607a      	str	r2, [r7, #4]
 800e75e:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800e766:	6879      	ldr	r1, [r7, #4]
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f7ff fef4 	bl	800e556 <f_opendir>
 800e76e:	4603      	mov	r3, r0
 800e770:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e772:	7dfb      	ldrb	r3, [r7, #23]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d105      	bne.n	800e784 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800e778:	68b9      	ldr	r1, [r7, #8]
 800e77a:	68f8      	ldr	r0, [r7, #12]
 800e77c:	f7ff ffc1 	bl	800e702 <f_findnext>
 800e780:	4603      	mov	r3, r0
 800e782:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800e784:	7dfb      	ldrb	r3, [r7, #23]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3718      	adds	r7, #24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
	...

0800e790 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e790:	b480      	push	{r7}
 800e792:	b087      	sub	sp, #28
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	4613      	mov	r3, r2
 800e79c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e7a6:	4b1f      	ldr	r3, [pc, #124]	; (800e824 <FATFS_LinkDriverEx+0x94>)
 800e7a8:	7a5b      	ldrb	r3, [r3, #9]
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d131      	bne.n	800e814 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e7b0:	4b1c      	ldr	r3, [pc, #112]	; (800e824 <FATFS_LinkDriverEx+0x94>)
 800e7b2:	7a5b      	ldrb	r3, [r3, #9]
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	4b1a      	ldr	r3, [pc, #104]	; (800e824 <FATFS_LinkDriverEx+0x94>)
 800e7ba:	2100      	movs	r1, #0
 800e7bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e7be:	4b19      	ldr	r3, [pc, #100]	; (800e824 <FATFS_LinkDriverEx+0x94>)
 800e7c0:	7a5b      	ldrb	r3, [r3, #9]
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	4a17      	ldr	r2, [pc, #92]	; (800e824 <FATFS_LinkDriverEx+0x94>)
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4413      	add	r3, r2
 800e7ca:	68fa      	ldr	r2, [r7, #12]
 800e7cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e7ce:	4b15      	ldr	r3, [pc, #84]	; (800e824 <FATFS_LinkDriverEx+0x94>)
 800e7d0:	7a5b      	ldrb	r3, [r3, #9]
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	4b13      	ldr	r3, [pc, #76]	; (800e824 <FATFS_LinkDriverEx+0x94>)
 800e7d8:	4413      	add	r3, r2
 800e7da:	79fa      	ldrb	r2, [r7, #7]
 800e7dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e7de:	4b11      	ldr	r3, [pc, #68]	; (800e824 <FATFS_LinkDriverEx+0x94>)
 800e7e0:	7a5b      	ldrb	r3, [r3, #9]
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	1c5a      	adds	r2, r3, #1
 800e7e6:	b2d1      	uxtb	r1, r2
 800e7e8:	4a0e      	ldr	r2, [pc, #56]	; (800e824 <FATFS_LinkDriverEx+0x94>)
 800e7ea:	7251      	strb	r1, [r2, #9]
 800e7ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e7ee:	7dbb      	ldrb	r3, [r7, #22]
 800e7f0:	3330      	adds	r3, #48	; 0x30
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	223a      	movs	r2, #58	; 0x3a
 800e7fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	3302      	adds	r3, #2
 800e804:	222f      	movs	r2, #47	; 0x2f
 800e806:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	3303      	adds	r3, #3
 800e80c:	2200      	movs	r2, #0
 800e80e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e810:	2300      	movs	r3, #0
 800e812:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e814:	7dfb      	ldrb	r3, [r7, #23]
}
 800e816:	4618      	mov	r0, r3
 800e818:	371c      	adds	r7, #28
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	20000990 	.word	0x20000990

0800e828 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e832:	2200      	movs	r2, #0
 800e834:	6839      	ldr	r1, [r7, #0]
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7ff ffaa 	bl	800e790 <FATFS_LinkDriverEx>
 800e83c:	4603      	mov	r3, r0
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
	...

0800e848 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	4603      	mov	r3, r0
 800e850:	6039      	str	r1, [r7, #0]
 800e852:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e854:	88fb      	ldrh	r3, [r7, #6]
 800e856:	2b7f      	cmp	r3, #127	; 0x7f
 800e858:	d802      	bhi.n	800e860 <ff_convert+0x18>
		c = chr;
 800e85a:	88fb      	ldrh	r3, [r7, #6]
 800e85c:	81fb      	strh	r3, [r7, #14]
 800e85e:	e025      	b.n	800e8ac <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00b      	beq.n	800e87e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e866:	88fb      	ldrh	r3, [r7, #6]
 800e868:	2bff      	cmp	r3, #255	; 0xff
 800e86a:	d805      	bhi.n	800e878 <ff_convert+0x30>
 800e86c:	88fb      	ldrh	r3, [r7, #6]
 800e86e:	3b80      	subs	r3, #128	; 0x80
 800e870:	4a12      	ldr	r2, [pc, #72]	; (800e8bc <ff_convert+0x74>)
 800e872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e876:	e000      	b.n	800e87a <ff_convert+0x32>
 800e878:	2300      	movs	r3, #0
 800e87a:	81fb      	strh	r3, [r7, #14]
 800e87c:	e016      	b.n	800e8ac <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e87e:	2300      	movs	r3, #0
 800e880:	81fb      	strh	r3, [r7, #14]
 800e882:	e009      	b.n	800e898 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e884:	89fb      	ldrh	r3, [r7, #14]
 800e886:	4a0d      	ldr	r2, [pc, #52]	; (800e8bc <ff_convert+0x74>)
 800e888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e88c:	88fa      	ldrh	r2, [r7, #6]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d006      	beq.n	800e8a0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e892:	89fb      	ldrh	r3, [r7, #14]
 800e894:	3301      	adds	r3, #1
 800e896:	81fb      	strh	r3, [r7, #14]
 800e898:	89fb      	ldrh	r3, [r7, #14]
 800e89a:	2b7f      	cmp	r3, #127	; 0x7f
 800e89c:	d9f2      	bls.n	800e884 <ff_convert+0x3c>
 800e89e:	e000      	b.n	800e8a2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e8a0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e8a2:	89fb      	ldrh	r3, [r7, #14]
 800e8a4:	3380      	adds	r3, #128	; 0x80
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e8ac:	89fb      	ldrh	r3, [r7, #14]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3714      	adds	r7, #20
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	08014f9c 	.word	0x08014f9c

0800e8c0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e8ca:	88fb      	ldrh	r3, [r7, #6]
 800e8cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8d0:	d201      	bcs.n	800e8d6 <ff_wtoupper+0x16>
 800e8d2:	4b3e      	ldr	r3, [pc, #248]	; (800e9cc <ff_wtoupper+0x10c>)
 800e8d4:	e000      	b.n	800e8d8 <ff_wtoupper+0x18>
 800e8d6:	4b3e      	ldr	r3, [pc, #248]	; (800e9d0 <ff_wtoupper+0x110>)
 800e8d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	1c9a      	adds	r2, r3, #2
 800e8de:	617a      	str	r2, [r7, #20]
 800e8e0:	881b      	ldrh	r3, [r3, #0]
 800e8e2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e8e4:	8a7b      	ldrh	r3, [r7, #18]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d068      	beq.n	800e9bc <ff_wtoupper+0xfc>
 800e8ea:	88fa      	ldrh	r2, [r7, #6]
 800e8ec:	8a7b      	ldrh	r3, [r7, #18]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d364      	bcc.n	800e9bc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	1c9a      	adds	r2, r3, #2
 800e8f6:	617a      	str	r2, [r7, #20]
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	823b      	strh	r3, [r7, #16]
 800e8fc:	8a3b      	ldrh	r3, [r7, #16]
 800e8fe:	0a1b      	lsrs	r3, r3, #8
 800e900:	81fb      	strh	r3, [r7, #14]
 800e902:	8a3b      	ldrh	r3, [r7, #16]
 800e904:	b2db      	uxtb	r3, r3
 800e906:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e908:	88fa      	ldrh	r2, [r7, #6]
 800e90a:	8a79      	ldrh	r1, [r7, #18]
 800e90c:	8a3b      	ldrh	r3, [r7, #16]
 800e90e:	440b      	add	r3, r1
 800e910:	429a      	cmp	r2, r3
 800e912:	da49      	bge.n	800e9a8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e914:	89fb      	ldrh	r3, [r7, #14]
 800e916:	2b08      	cmp	r3, #8
 800e918:	d84f      	bhi.n	800e9ba <ff_wtoupper+0xfa>
 800e91a:	a201      	add	r2, pc, #4	; (adr r2, 800e920 <ff_wtoupper+0x60>)
 800e91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e920:	0800e945 	.word	0x0800e945
 800e924:	0800e957 	.word	0x0800e957
 800e928:	0800e96d 	.word	0x0800e96d
 800e92c:	0800e975 	.word	0x0800e975
 800e930:	0800e97d 	.word	0x0800e97d
 800e934:	0800e985 	.word	0x0800e985
 800e938:	0800e98d 	.word	0x0800e98d
 800e93c:	0800e995 	.word	0x0800e995
 800e940:	0800e99d 	.word	0x0800e99d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e944:	88fa      	ldrh	r2, [r7, #6]
 800e946:	8a7b      	ldrh	r3, [r7, #18]
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	005b      	lsls	r3, r3, #1
 800e94c:	697a      	ldr	r2, [r7, #20]
 800e94e:	4413      	add	r3, r2
 800e950:	881b      	ldrh	r3, [r3, #0]
 800e952:	80fb      	strh	r3, [r7, #6]
 800e954:	e027      	b.n	800e9a6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e956:	88fa      	ldrh	r2, [r7, #6]
 800e958:	8a7b      	ldrh	r3, [r7, #18]
 800e95a:	1ad3      	subs	r3, r2, r3
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	f003 0301 	and.w	r3, r3, #1
 800e962:	b29b      	uxth	r3, r3
 800e964:	88fa      	ldrh	r2, [r7, #6]
 800e966:	1ad3      	subs	r3, r2, r3
 800e968:	80fb      	strh	r3, [r7, #6]
 800e96a:	e01c      	b.n	800e9a6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e96c:	88fb      	ldrh	r3, [r7, #6]
 800e96e:	3b10      	subs	r3, #16
 800e970:	80fb      	strh	r3, [r7, #6]
 800e972:	e018      	b.n	800e9a6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e974:	88fb      	ldrh	r3, [r7, #6]
 800e976:	3b20      	subs	r3, #32
 800e978:	80fb      	strh	r3, [r7, #6]
 800e97a:	e014      	b.n	800e9a6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e97c:	88fb      	ldrh	r3, [r7, #6]
 800e97e:	3b30      	subs	r3, #48	; 0x30
 800e980:	80fb      	strh	r3, [r7, #6]
 800e982:	e010      	b.n	800e9a6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e984:	88fb      	ldrh	r3, [r7, #6]
 800e986:	3b1a      	subs	r3, #26
 800e988:	80fb      	strh	r3, [r7, #6]
 800e98a:	e00c      	b.n	800e9a6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e98c:	88fb      	ldrh	r3, [r7, #6]
 800e98e:	3308      	adds	r3, #8
 800e990:	80fb      	strh	r3, [r7, #6]
 800e992:	e008      	b.n	800e9a6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e994:	88fb      	ldrh	r3, [r7, #6]
 800e996:	3b50      	subs	r3, #80	; 0x50
 800e998:	80fb      	strh	r3, [r7, #6]
 800e99a:	e004      	b.n	800e9a6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e99c:	88fb      	ldrh	r3, [r7, #6]
 800e99e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e9a2:	80fb      	strh	r3, [r7, #6]
 800e9a4:	bf00      	nop
			}
			break;
 800e9a6:	e008      	b.n	800e9ba <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e9a8:	89fb      	ldrh	r3, [r7, #14]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d195      	bne.n	800e8da <ff_wtoupper+0x1a>
 800e9ae:	8a3b      	ldrh	r3, [r7, #16]
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	697a      	ldr	r2, [r7, #20]
 800e9b4:	4413      	add	r3, r2
 800e9b6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e9b8:	e78f      	b.n	800e8da <ff_wtoupper+0x1a>
			break;
 800e9ba:	bf00      	nop
	}

	return chr;
 800e9bc:	88fb      	ldrh	r3, [r7, #6]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	371c      	adds	r7, #28
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	0801509c 	.word	0x0801509c
 800e9d0:	08015290 	.word	0x08015290

0800e9d4 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800e9d8:	2200      	movs	r2, #0
 800e9da:	4912      	ldr	r1, [pc, #72]	; (800ea24 <MX_USB_DEVICE_Init+0x50>)
 800e9dc:	4812      	ldr	r0, [pc, #72]	; (800ea28 <MX_USB_DEVICE_Init+0x54>)
 800e9de:	f7fb fcd8 	bl	800a392 <USBD_Init>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800e9e8:	f7f2 feac 	bl	8001744 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 800e9ec:	490f      	ldr	r1, [pc, #60]	; (800ea2c <MX_USB_DEVICE_Init+0x58>)
 800e9ee:	480e      	ldr	r0, [pc, #56]	; (800ea28 <MX_USB_DEVICE_Init+0x54>)
 800e9f0:	f7fb fcff 	bl	800a3f2 <USBD_RegisterClass>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800e9fa:	f7f2 fea3 	bl	8001744 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 800e9fe:	490c      	ldr	r1, [pc, #48]	; (800ea30 <MX_USB_DEVICE_Init+0x5c>)
 800ea00:	4809      	ldr	r0, [pc, #36]	; (800ea28 <MX_USB_DEVICE_Init+0x54>)
 800ea02:	f7fb fcaf 	bl	800a364 <USBD_Midi_RegisterInterface>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d001      	beq.n	800ea10 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800ea0c:	f7f2 fe9a 	bl	8001744 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ea10:	4805      	ldr	r0, [pc, #20]	; (800ea28 <MX_USB_DEVICE_Init+0x54>)
 800ea12:	f7fb fd15 	bl	800a440 <USBD_Start>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d001      	beq.n	800ea20 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800ea1c:	f7f2 fe92 	bl	8001744 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ea20:	bf00      	nop
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	20000100 	.word	0x20000100
 800ea28:	20002bf0 	.word	0x20002bf0
 800ea2c:	20000054 	.word	0x20000054
 800ea30:	20000150 	.word	0x20000150

0800ea34 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	71fb      	strb	r3, [r7, #7]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	71bb      	strb	r3, [r7, #6]
 800ea42:	4613      	mov	r3, r2
 800ea44:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 800ea46:	230b      	movs	r3, #11
 800ea48:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 800ea4a:	79fb      	ldrb	r3, [r7, #7]
 800ea4c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800ea50:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 800ea52:	7bfb      	ldrb	r3, [r7, #15]
 800ea54:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 800ea56:	7bbb      	ldrb	r3, [r7, #14]
 800ea58:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 800ea5a:	79bb      	ldrb	r3, [r7, #6]
 800ea5c:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 800ea5e:	797b      	ldrb	r3, [r7, #5]
 800ea60:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 800ea62:	f107 0208 	add.w	r2, r7, #8
 800ea66:	2304      	movs	r3, #4
 800ea68:	2181      	movs	r1, #129	; 0x81
 800ea6a:	4810      	ldr	r0, [pc, #64]	; (800eaac <MX_USB_Send_Midi+0x78>)
 800ea6c:	f000 fbb5 	bl	800f1da <USBD_LL_Transmit>
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b03      	cmp	r3, #3
 800ea74:	d00a      	beq.n	800ea8c <MX_USB_Send_Midi+0x58>
 800ea76:	2b03      	cmp	r3, #3
 800ea78:	dc10      	bgt.n	800ea9c <MX_USB_Send_Midi+0x68>
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d002      	beq.n	800ea84 <MX_USB_Send_Midi+0x50>
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d008      	beq.n	800ea94 <MX_USB_Send_Midi+0x60>
 800ea82:	e00b      	b.n	800ea9c <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 800ea84:	480a      	ldr	r0, [pc, #40]	; (800eab0 <MX_USB_Send_Midi+0x7c>)
 800ea86:	f001 fe47 	bl	8010718 <puts>
        break;
 800ea8a:	e00b      	b.n	800eaa4 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 800ea8c:	4809      	ldr	r0, [pc, #36]	; (800eab4 <MX_USB_Send_Midi+0x80>)
 800ea8e:	f001 fe43 	bl	8010718 <puts>
        break;
 800ea92:	e007      	b.n	800eaa4 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 800ea94:	4808      	ldr	r0, [pc, #32]	; (800eab8 <MX_USB_Send_Midi+0x84>)
 800ea96:	f001 fe3f 	bl	8010718 <puts>
        break;
 800ea9a:	e003      	b.n	800eaa4 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 800ea9c:	4807      	ldr	r0, [pc, #28]	; (800eabc <MX_USB_Send_Midi+0x88>)
 800ea9e:	f001 fe3b 	bl	8010718 <puts>
    }
}
 800eaa2:	bf00      	nop
 800eaa4:	bf00      	nop
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	20002bf0 	.word	0x20002bf0
 800eab0:	08013b78 	.word	0x08013b78
 800eab4:	08013b7c 	.word	0x08013b7c
 800eab8:	08013b8c 	.word	0x08013b8c
 800eabc:	08013b9c 	.word	0x08013b9c

0800eac0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b083      	sub	sp, #12
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	4603      	mov	r3, r0
 800eac8:	6039      	str	r1, [r7, #0]
 800eaca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	2212      	movs	r2, #18
 800ead0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ead2:	4b03      	ldr	r3, [pc, #12]	; (800eae0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr
 800eae0:	2000011c 	.word	0x2000011c

0800eae4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	4603      	mov	r3, r0
 800eaec:	6039      	str	r1, [r7, #0]
 800eaee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	2204      	movs	r2, #4
 800eaf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eaf6:	4b03      	ldr	r3, [pc, #12]	; (800eb04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr
 800eb04:	20000130 	.word	0x20000130

0800eb08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	4603      	mov	r3, r0
 800eb10:	6039      	str	r1, [r7, #0]
 800eb12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb14:	79fb      	ldrb	r3, [r7, #7]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d105      	bne.n	800eb26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb1a:	683a      	ldr	r2, [r7, #0]
 800eb1c:	4907      	ldr	r1, [pc, #28]	; (800eb3c <USBD_FS_ProductStrDescriptor+0x34>)
 800eb1e:	4808      	ldr	r0, [pc, #32]	; (800eb40 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb20:	f7fc fcbf 	bl	800b4a2 <USBD_GetString>
 800eb24:	e004      	b.n	800eb30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb26:	683a      	ldr	r2, [r7, #0]
 800eb28:	4904      	ldr	r1, [pc, #16]	; (800eb3c <USBD_FS_ProductStrDescriptor+0x34>)
 800eb2a:	4805      	ldr	r0, [pc, #20]	; (800eb40 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb2c:	f7fc fcb9 	bl	800b4a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb30:	4b02      	ldr	r3, [pc, #8]	; (800eb3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	20002ec0 	.word	0x20002ec0
 800eb40:	08013bb8 	.word	0x08013bb8

0800eb44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	6039      	str	r1, [r7, #0]
 800eb4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb50:	683a      	ldr	r2, [r7, #0]
 800eb52:	4904      	ldr	r1, [pc, #16]	; (800eb64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb54:	4804      	ldr	r0, [pc, #16]	; (800eb68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb56:	f7fc fca4 	bl	800b4a2 <USBD_GetString>
  return USBD_StrDesc;
 800eb5a:	4b02      	ldr	r3, [pc, #8]	; (800eb64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3708      	adds	r7, #8
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}
 800eb64:	20002ec0 	.word	0x20002ec0
 800eb68:	08013bcc 	.word	0x08013bcc

0800eb6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	4603      	mov	r3, r0
 800eb74:	6039      	str	r1, [r7, #0]
 800eb76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	221a      	movs	r2, #26
 800eb7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb7e:	f000 f843 	bl	800ec08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb82:	4b02      	ldr	r3, [pc, #8]	; (800eb8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	20000134 	.word	0x20000134

0800eb90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	4603      	mov	r3, r0
 800eb98:	6039      	str	r1, [r7, #0]
 800eb9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb9c:	79fb      	ldrb	r3, [r7, #7]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d105      	bne.n	800ebae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eba2:	683a      	ldr	r2, [r7, #0]
 800eba4:	4907      	ldr	r1, [pc, #28]	; (800ebc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eba6:	4808      	ldr	r0, [pc, #32]	; (800ebc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eba8:	f7fc fc7b 	bl	800b4a2 <USBD_GetString>
 800ebac:	e004      	b.n	800ebb8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebae:	683a      	ldr	r2, [r7, #0]
 800ebb0:	4904      	ldr	r1, [pc, #16]	; (800ebc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebb2:	4805      	ldr	r0, [pc, #20]	; (800ebc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebb4:	f7fc fc75 	bl	800b4a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebb8:	4b02      	ldr	r3, [pc, #8]	; (800ebc4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	20002ec0 	.word	0x20002ec0
 800ebc8:	08013be0 	.word	0x08013be0

0800ebcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	6039      	str	r1, [r7, #0]
 800ebd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebd8:	79fb      	ldrb	r3, [r7, #7]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d105      	bne.n	800ebea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	4907      	ldr	r1, [pc, #28]	; (800ec00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebe2:	4808      	ldr	r0, [pc, #32]	; (800ec04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebe4:	f7fc fc5d 	bl	800b4a2 <USBD_GetString>
 800ebe8:	e004      	b.n	800ebf4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebea:	683a      	ldr	r2, [r7, #0]
 800ebec:	4904      	ldr	r1, [pc, #16]	; (800ec00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebee:	4805      	ldr	r0, [pc, #20]	; (800ec04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebf0:	f7fc fc57 	bl	800b4a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebf4:	4b02      	ldr	r3, [pc, #8]	; (800ec00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20002ec0 	.word	0x20002ec0
 800ec04:	08013bf0 	.word	0x08013bf0

0800ec08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec0e:	4b0f      	ldr	r3, [pc, #60]	; (800ec4c <Get_SerialNum+0x44>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec14:	4b0e      	ldr	r3, [pc, #56]	; (800ec50 <Get_SerialNum+0x48>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec1a:	4b0e      	ldr	r3, [pc, #56]	; (800ec54 <Get_SerialNum+0x4c>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	4413      	add	r3, r2
 800ec26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d009      	beq.n	800ec42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec2e:	2208      	movs	r2, #8
 800ec30:	4909      	ldr	r1, [pc, #36]	; (800ec58 <Get_SerialNum+0x50>)
 800ec32:	68f8      	ldr	r0, [r7, #12]
 800ec34:	f000 f814 	bl	800ec60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec38:	2204      	movs	r2, #4
 800ec3a:	4908      	ldr	r1, [pc, #32]	; (800ec5c <Get_SerialNum+0x54>)
 800ec3c:	68b8      	ldr	r0, [r7, #8]
 800ec3e:	f000 f80f 	bl	800ec60 <IntToUnicode>
  }
}
 800ec42:	bf00      	nop
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	1fff7a10 	.word	0x1fff7a10
 800ec50:	1fff7a14 	.word	0x1fff7a14
 800ec54:	1fff7a18 	.word	0x1fff7a18
 800ec58:	20000136 	.word	0x20000136
 800ec5c:	20000146 	.word	0x20000146

0800ec60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b087      	sub	sp, #28
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	4613      	mov	r3, r2
 800ec6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec72:	2300      	movs	r3, #0
 800ec74:	75fb      	strb	r3, [r7, #23]
 800ec76:	e027      	b.n	800ecc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	0f1b      	lsrs	r3, r3, #28
 800ec7c:	2b09      	cmp	r3, #9
 800ec7e:	d80b      	bhi.n	800ec98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	0f1b      	lsrs	r3, r3, #28
 800ec84:	b2da      	uxtb	r2, r3
 800ec86:	7dfb      	ldrb	r3, [r7, #23]
 800ec88:	005b      	lsls	r3, r3, #1
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	440b      	add	r3, r1
 800ec90:	3230      	adds	r2, #48	; 0x30
 800ec92:	b2d2      	uxtb	r2, r2
 800ec94:	701a      	strb	r2, [r3, #0]
 800ec96:	e00a      	b.n	800ecae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	0f1b      	lsrs	r3, r3, #28
 800ec9c:	b2da      	uxtb	r2, r3
 800ec9e:	7dfb      	ldrb	r3, [r7, #23]
 800eca0:	005b      	lsls	r3, r3, #1
 800eca2:	4619      	mov	r1, r3
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	440b      	add	r3, r1
 800eca8:	3237      	adds	r2, #55	; 0x37
 800ecaa:	b2d2      	uxtb	r2, r2
 800ecac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	011b      	lsls	r3, r3, #4
 800ecb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ecb4:	7dfb      	ldrb	r3, [r7, #23]
 800ecb6:	005b      	lsls	r3, r3, #1
 800ecb8:	3301      	adds	r3, #1
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ecc2:	7dfb      	ldrb	r3, [r7, #23]
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	75fb      	strb	r3, [r7, #23]
 800ecc8:	7dfa      	ldrb	r2, [r7, #23]
 800ecca:	79fb      	ldrb	r3, [r7, #7]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d3d3      	bcc.n	800ec78 <IntToUnicode+0x18>
  }
}
 800ecd0:	bf00      	nop
 800ecd2:	bf00      	nop
 800ecd4:	371c      	adds	r7, #28
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr

0800ecde <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 800ecde:	b480      	push	{r7}
 800ece0:	b083      	sub	sp, #12
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
 800ece6:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 800ece8:	2300      	movs	r3, #0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	370c      	adds	r7, #12
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf4:	4770      	bx	lr
	...

0800ecf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b08a      	sub	sp, #40	; 0x28
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed00:	f107 0314 	add.w	r3, r7, #20
 800ed04:	2200      	movs	r2, #0
 800ed06:	601a      	str	r2, [r3, #0]
 800ed08:	605a      	str	r2, [r3, #4]
 800ed0a:	609a      	str	r2, [r3, #8]
 800ed0c:	60da      	str	r2, [r3, #12]
 800ed0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed18:	d13a      	bne.n	800ed90 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	613b      	str	r3, [r7, #16]
 800ed1e:	4b1e      	ldr	r3, [pc, #120]	; (800ed98 <HAL_PCD_MspInit+0xa0>)
 800ed20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed22:	4a1d      	ldr	r2, [pc, #116]	; (800ed98 <HAL_PCD_MspInit+0xa0>)
 800ed24:	f043 0301 	orr.w	r3, r3, #1
 800ed28:	6313      	str	r3, [r2, #48]	; 0x30
 800ed2a:	4b1b      	ldr	r3, [pc, #108]	; (800ed98 <HAL_PCD_MspInit+0xa0>)
 800ed2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed2e:	f003 0301 	and.w	r3, r3, #1
 800ed32:	613b      	str	r3, [r7, #16]
 800ed34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800ed36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ed3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed3c:	2302      	movs	r3, #2
 800ed3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed40:	2300      	movs	r3, #0
 800ed42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed44:	2300      	movs	r3, #0
 800ed46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed48:	230a      	movs	r3, #10
 800ed4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed4c:	f107 0314 	add.w	r3, r7, #20
 800ed50:	4619      	mov	r1, r3
 800ed52:	4812      	ldr	r0, [pc, #72]	; (800ed9c <HAL_PCD_MspInit+0xa4>)
 800ed54:	f7f4 ff08 	bl	8003b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ed58:	4b0f      	ldr	r3, [pc, #60]	; (800ed98 <HAL_PCD_MspInit+0xa0>)
 800ed5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed5c:	4a0e      	ldr	r2, [pc, #56]	; (800ed98 <HAL_PCD_MspInit+0xa0>)
 800ed5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed62:	6353      	str	r3, [r2, #52]	; 0x34
 800ed64:	2300      	movs	r3, #0
 800ed66:	60fb      	str	r3, [r7, #12]
 800ed68:	4b0b      	ldr	r3, [pc, #44]	; (800ed98 <HAL_PCD_MspInit+0xa0>)
 800ed6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed6c:	4a0a      	ldr	r2, [pc, #40]	; (800ed98 <HAL_PCD_MspInit+0xa0>)
 800ed6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed72:	6453      	str	r3, [r2, #68]	; 0x44
 800ed74:	4b08      	ldr	r3, [pc, #32]	; (800ed98 <HAL_PCD_MspInit+0xa0>)
 800ed76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed7c:	60fb      	str	r3, [r7, #12]
 800ed7e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ed80:	2200      	movs	r2, #0
 800ed82:	2100      	movs	r1, #0
 800ed84:	2043      	movs	r0, #67	; 0x43
 800ed86:	f7f4 feb8 	bl	8003afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed8a:	2043      	movs	r0, #67	; 0x43
 800ed8c:	f7f4 fed1 	bl	8003b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed90:	bf00      	nop
 800ed92:	3728      	adds	r7, #40	; 0x28
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	40023800 	.word	0x40023800
 800ed9c:	40020000 	.word	0x40020000

0800eda0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800edb4:	4619      	mov	r1, r3
 800edb6:	4610      	mov	r0, r2
 800edb8:	f7fb fb8d 	bl	800a4d6 <USBD_LL_SetupStage>
}
 800edbc:	bf00      	nop
 800edbe:	3708      	adds	r7, #8
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	460b      	mov	r3, r1
 800edce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800edd6:	78fa      	ldrb	r2, [r7, #3]
 800edd8:	6879      	ldr	r1, [r7, #4]
 800edda:	4613      	mov	r3, r2
 800eddc:	00db      	lsls	r3, r3, #3
 800edde:	1a9b      	subs	r3, r3, r2
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	440b      	add	r3, r1
 800ede4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	78fb      	ldrb	r3, [r7, #3]
 800edec:	4619      	mov	r1, r3
 800edee:	f7fb fbc7 	bl	800a580 <USBD_LL_DataOutStage>
}
 800edf2:	bf00      	nop
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b082      	sub	sp, #8
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
 800ee02:	460b      	mov	r3, r1
 800ee04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ee0c:	78fa      	ldrb	r2, [r7, #3]
 800ee0e:	6879      	ldr	r1, [r7, #4]
 800ee10:	4613      	mov	r3, r2
 800ee12:	00db      	lsls	r3, r3, #3
 800ee14:	1a9b      	subs	r3, r3, r2
 800ee16:	009b      	lsls	r3, r3, #2
 800ee18:	440b      	add	r3, r1
 800ee1a:	3348      	adds	r3, #72	; 0x48
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	78fb      	ldrb	r3, [r7, #3]
 800ee20:	4619      	mov	r1, r3
 800ee22:	f7fb fc10 	bl	800a646 <USBD_LL_DataInStage>
}
 800ee26:	bf00      	nop
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b082      	sub	sp, #8
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fb fd24 	bl	800a88a <USBD_LL_SOF>
}
 800ee42:	bf00      	nop
 800ee44:	3708      	adds	r7, #8
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	b084      	sub	sp, #16
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee52:	2301      	movs	r3, #1
 800ee54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d001      	beq.n	800ee62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ee5e:	f7f2 fc71 	bl	8001744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee68:	7bfa      	ldrb	r2, [r7, #15]
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fb fcce 	bl	800a80e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fb fc7a 	bl	800a772 <USBD_LL_Reset>
}
 800ee7e:	bf00      	nop
 800ee80:	3710      	adds	r7, #16
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
	...

0800ee88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fb fcc9 	bl	800a82e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	6812      	ldr	r2, [r2, #0]
 800eeaa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eeae:	f043 0301 	orr.w	r3, r3, #1
 800eeb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6a1b      	ldr	r3, [r3, #32]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d005      	beq.n	800eec8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eebc:	4b04      	ldr	r3, [pc, #16]	; (800eed0 <HAL_PCD_SuspendCallback+0x48>)
 800eebe:	691b      	ldr	r3, [r3, #16]
 800eec0:	4a03      	ldr	r2, [pc, #12]	; (800eed0 <HAL_PCD_SuspendCallback+0x48>)
 800eec2:	f043 0306 	orr.w	r3, r3, #6
 800eec6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eec8:	bf00      	nop
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	e000ed00 	.word	0xe000ed00

0800eed4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fb fcb9 	bl	800a85a <USBD_LL_Resume>
}
 800eee8:	bf00      	nop
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	460b      	mov	r3, r1
 800eefa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef02:	78fa      	ldrb	r2, [r7, #3]
 800ef04:	4611      	mov	r1, r2
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fb fd07 	bl	800a91a <USBD_LL_IsoOUTIncomplete>
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef26:	78fa      	ldrb	r2, [r7, #3]
 800ef28:	4611      	mov	r1, r2
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7fb fccf 	bl	800a8ce <USBD_LL_IsoINIncomplete>
}
 800ef30:	bf00      	nop
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fb fd0d 	bl	800a966 <USBD_LL_DevConnected>
}
 800ef4c:	bf00      	nop
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fb fd0a 	bl	800a97c <USBD_LL_DevDisconnected>
}
 800ef68:	bf00      	nop
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d13c      	bne.n	800effa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ef80:	4a20      	ldr	r2, [pc, #128]	; (800f004 <USBD_LL_Init+0x94>)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	4a1e      	ldr	r2, [pc, #120]	; (800f004 <USBD_LL_Init+0x94>)
 800ef8c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef90:	4b1c      	ldr	r3, [pc, #112]	; (800f004 <USBD_LL_Init+0x94>)
 800ef92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ef96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ef98:	4b1a      	ldr	r3, [pc, #104]	; (800f004 <USBD_LL_Init+0x94>)
 800ef9a:	2204      	movs	r2, #4
 800ef9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ef9e:	4b19      	ldr	r3, [pc, #100]	; (800f004 <USBD_LL_Init+0x94>)
 800efa0:	2202      	movs	r2, #2
 800efa2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800efa4:	4b17      	ldr	r3, [pc, #92]	; (800f004 <USBD_LL_Init+0x94>)
 800efa6:	2200      	movs	r2, #0
 800efa8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800efaa:	4b16      	ldr	r3, [pc, #88]	; (800f004 <USBD_LL_Init+0x94>)
 800efac:	2202      	movs	r2, #2
 800efae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800efb0:	4b14      	ldr	r3, [pc, #80]	; (800f004 <USBD_LL_Init+0x94>)
 800efb2:	2200      	movs	r2, #0
 800efb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800efb6:	4b13      	ldr	r3, [pc, #76]	; (800f004 <USBD_LL_Init+0x94>)
 800efb8:	2200      	movs	r2, #0
 800efba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800efbc:	4b11      	ldr	r3, [pc, #68]	; (800f004 <USBD_LL_Init+0x94>)
 800efbe:	2200      	movs	r2, #0
 800efc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800efc2:	4b10      	ldr	r3, [pc, #64]	; (800f004 <USBD_LL_Init+0x94>)
 800efc4:	2200      	movs	r2, #0
 800efc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800efc8:	4b0e      	ldr	r3, [pc, #56]	; (800f004 <USBD_LL_Init+0x94>)
 800efca:	2200      	movs	r2, #0
 800efcc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800efce:	480d      	ldr	r0, [pc, #52]	; (800f004 <USBD_LL_Init+0x94>)
 800efd0:	f7f5 fd75 	bl	8004abe <HAL_PCD_Init>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d001      	beq.n	800efde <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800efda:	f7f2 fbb3 	bl	8001744 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800efde:	2180      	movs	r1, #128	; 0x80
 800efe0:	4808      	ldr	r0, [pc, #32]	; (800f004 <USBD_LL_Init+0x94>)
 800efe2:	f7f6 fed2 	bl	8005d8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800efe6:	2240      	movs	r2, #64	; 0x40
 800efe8:	2100      	movs	r1, #0
 800efea:	4806      	ldr	r0, [pc, #24]	; (800f004 <USBD_LL_Init+0x94>)
 800efec:	f7f6 fe86 	bl	8005cfc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800eff0:	2280      	movs	r2, #128	; 0x80
 800eff2:	2101      	movs	r1, #1
 800eff4:	4803      	ldr	r0, [pc, #12]	; (800f004 <USBD_LL_Init+0x94>)
 800eff6:	f7f6 fe81 	bl	8005cfc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3708      	adds	r7, #8
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	200030c0 	.word	0x200030c0

0800f008 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f010:	2300      	movs	r3, #0
 800f012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f014:	2300      	movs	r3, #0
 800f016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f01e:	4618      	mov	r0, r3
 800f020:	f7f5 fe6a 	bl	8004cf8 <HAL_PCD_Start>
 800f024:	4603      	mov	r3, r0
 800f026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f028:	7bfb      	ldrb	r3, [r7, #15]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f000 f938 	bl	800f2a0 <USBD_Get_USB_Status>
 800f030:	4603      	mov	r3, r0
 800f032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f034:	7bbb      	ldrb	r3, [r7, #14]
}
 800f036:	4618      	mov	r0, r3
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f03e:	b580      	push	{r7, lr}
 800f040:	b084      	sub	sp, #16
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
 800f046:	4608      	mov	r0, r1
 800f048:	4611      	mov	r1, r2
 800f04a:	461a      	mov	r2, r3
 800f04c:	4603      	mov	r3, r0
 800f04e:	70fb      	strb	r3, [r7, #3]
 800f050:	460b      	mov	r3, r1
 800f052:	70bb      	strb	r3, [r7, #2]
 800f054:	4613      	mov	r3, r2
 800f056:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f05c:	2300      	movs	r3, #0
 800f05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f066:	78bb      	ldrb	r3, [r7, #2]
 800f068:	883a      	ldrh	r2, [r7, #0]
 800f06a:	78f9      	ldrb	r1, [r7, #3]
 800f06c:	f7f6 fa4e 	bl	800550c <HAL_PCD_EP_Open>
 800f070:	4603      	mov	r3, r0
 800f072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f074:	7bfb      	ldrb	r3, [r7, #15]
 800f076:	4618      	mov	r0, r3
 800f078:	f000 f912 	bl	800f2a0 <USBD_Get_USB_Status>
 800f07c:	4603      	mov	r3, r0
 800f07e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f080:	7bbb      	ldrb	r3, [r7, #14]
}
 800f082:	4618      	mov	r0, r3
 800f084:	3710      	adds	r7, #16
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}

0800f08a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f08a:	b580      	push	{r7, lr}
 800f08c:	b084      	sub	sp, #16
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
 800f092:	460b      	mov	r3, r1
 800f094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f096:	2300      	movs	r3, #0
 800f098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f09a:	2300      	movs	r3, #0
 800f09c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0a4:	78fa      	ldrb	r2, [r7, #3]
 800f0a6:	4611      	mov	r1, r2
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7f6 fa97 	bl	80055dc <HAL_PCD_EP_Close>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0b2:	7bfb      	ldrb	r3, [r7, #15]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f000 f8f3 	bl	800f2a0 <USBD_Get_USB_Status>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0be:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0e2:	78fa      	ldrb	r2, [r7, #3]
 800f0e4:	4611      	mov	r1, r2
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7f6 fb6f 	bl	80057ca <HAL_PCD_EP_SetStall>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0f0:	7bfb      	ldrb	r3, [r7, #15]
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f000 f8d4 	bl	800f2a0 <USBD_Get_USB_Status>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b084      	sub	sp, #16
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
 800f10e:	460b      	mov	r3, r1
 800f110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f112:	2300      	movs	r3, #0
 800f114:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f116:	2300      	movs	r3, #0
 800f118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f120:	78fa      	ldrb	r2, [r7, #3]
 800f122:	4611      	mov	r1, r2
 800f124:	4618      	mov	r0, r3
 800f126:	f7f6 fbb4 	bl	8005892 <HAL_PCD_EP_ClrStall>
 800f12a:	4603      	mov	r3, r0
 800f12c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f12e:	7bfb      	ldrb	r3, [r7, #15]
 800f130:	4618      	mov	r0, r3
 800f132:	f000 f8b5 	bl	800f2a0 <USBD_Get_USB_Status>
 800f136:	4603      	mov	r3, r0
 800f138:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f13a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3710      	adds	r7, #16
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f144:	b480      	push	{r7}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	460b      	mov	r3, r1
 800f14e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f156:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	da0b      	bge.n	800f178 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f160:	78fb      	ldrb	r3, [r7, #3]
 800f162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f166:	68f9      	ldr	r1, [r7, #12]
 800f168:	4613      	mov	r3, r2
 800f16a:	00db      	lsls	r3, r3, #3
 800f16c:	1a9b      	subs	r3, r3, r2
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	440b      	add	r3, r1
 800f172:	333e      	adds	r3, #62	; 0x3e
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	e00b      	b.n	800f190 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f178:	78fb      	ldrb	r3, [r7, #3]
 800f17a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f17e:	68f9      	ldr	r1, [r7, #12]
 800f180:	4613      	mov	r3, r2
 800f182:	00db      	lsls	r3, r3, #3
 800f184:	1a9b      	subs	r3, r3, r2
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	440b      	add	r3, r1
 800f18a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f18e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f190:	4618      	mov	r0, r3
 800f192:	3714      	adds	r7, #20
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f1b6:	78fa      	ldrb	r2, [r7, #3]
 800f1b8:	4611      	mov	r1, r2
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7f6 f981 	bl	80054c2 <HAL_PCD_SetAddress>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1c4:	7bfb      	ldrb	r3, [r7, #15]
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f000 f86a 	bl	800f2a0 <USBD_Get_USB_Status>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b086      	sub	sp, #24
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	60f8      	str	r0, [r7, #12]
 800f1e2:	607a      	str	r2, [r7, #4]
 800f1e4:	603b      	str	r3, [r7, #0]
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f1f8:	7af9      	ldrb	r1, [r7, #11]
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	f7f6 fa9a 	bl	8005736 <HAL_PCD_EP_Transmit>
 800f202:	4603      	mov	r3, r0
 800f204:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f206:	7dfb      	ldrb	r3, [r7, #23]
 800f208:	4618      	mov	r0, r3
 800f20a:	f000 f849 	bl	800f2a0 <USBD_Get_USB_Status>
 800f20e:	4603      	mov	r3, r0
 800f210:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f212:	7dbb      	ldrb	r3, [r7, #22]
}
 800f214:	4618      	mov	r0, r3
 800f216:	3718      	adds	r7, #24
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	607a      	str	r2, [r7, #4]
 800f226:	603b      	str	r3, [r7, #0]
 800f228:	460b      	mov	r3, r1
 800f22a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f22c:	2300      	movs	r3, #0
 800f22e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f230:	2300      	movs	r3, #0
 800f232:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f23a:	7af9      	ldrb	r1, [r7, #11]
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	f7f6 fa16 	bl	8005670 <HAL_PCD_EP_Receive>
 800f244:	4603      	mov	r3, r0
 800f246:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f248:	7dfb      	ldrb	r3, [r7, #23]
 800f24a:	4618      	mov	r0, r3
 800f24c:	f000 f828 	bl	800f2a0 <USBD_Get_USB_Status>
 800f250:	4603      	mov	r3, r0
 800f252:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f254:	7dbb      	ldrb	r3, [r7, #22]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3718      	adds	r7, #24
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b082      	sub	sp, #8
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]
 800f266:	460b      	mov	r3, r1
 800f268:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f270:	78fa      	ldrb	r2, [r7, #3]
 800f272:	4611      	mov	r1, r2
 800f274:	4618      	mov	r0, r3
 800f276:	f7f6 fa46 	bl	8005706 <HAL_PCD_EP_GetRxCount>
 800f27a:	4603      	mov	r3, r0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f284:	b480      	push	{r7}
 800f286:	b083      	sub	sp, #12
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f28c:	4b03      	ldr	r3, [pc, #12]	; (800f29c <USBD_static_malloc+0x18>)
}
 800f28e:	4618      	mov	r0, r3
 800f290:	370c      	adds	r7, #12
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop
 800f29c:	2000099c 	.word	0x2000099c

0800f2a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2ae:	79fb      	ldrb	r3, [r7, #7]
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	d817      	bhi.n	800f2e4 <USBD_Get_USB_Status+0x44>
 800f2b4:	a201      	add	r2, pc, #4	; (adr r2, 800f2bc <USBD_Get_USB_Status+0x1c>)
 800f2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ba:	bf00      	nop
 800f2bc:	0800f2cd 	.word	0x0800f2cd
 800f2c0:	0800f2d3 	.word	0x0800f2d3
 800f2c4:	0800f2d9 	.word	0x0800f2d9
 800f2c8:	0800f2df 	.word	0x0800f2df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d0:	e00b      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2d2:	2303      	movs	r3, #3
 800f2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d6:	e008      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	73fb      	strb	r3, [r7, #15]
    break;
 800f2dc:	e005      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2de:	2303      	movs	r3, #3
 800f2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e2:	e002      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e8:	bf00      	nop
  }
  return usb_status;
 800f2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b085      	sub	sp, #20
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d002      	beq.n	800f30e <case_insensitive_strcmp+0x16>
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d101      	bne.n	800f312 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800f30e:	2301      	movs	r3, #1
 800f310:	e056      	b.n	800f3c0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	429a      	cmp	r2, r3
 800f318:	d10d      	bne.n	800f336 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800f31a:	2300      	movs	r3, #0
 800f31c:	e050      	b.n	800f3c0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d101      	bne.n	800f32a <case_insensitive_strcmp+0x32>
        {
            return 0;
 800f326:	2300      	movs	r3, #0
 800f328:	e04a      	b.n	800f3c0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	3301      	adds	r3, #1
 800f32e:	607b      	str	r3, [r7, #4]
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	3301      	adds	r3, #1
 800f334:	603b      	str	r3, [r7, #0]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	73fb      	strb	r3, [r7, #15]
 800f33c:	7bfb      	ldrb	r3, [r7, #15]
 800f33e:	3301      	adds	r3, #1
 800f340:	4a22      	ldr	r2, [pc, #136]	; (800f3cc <case_insensitive_strcmp+0xd4>)
 800f342:	4413      	add	r3, r2
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	f003 0303 	and.w	r3, r3, #3
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d103      	bne.n	800f356 <case_insensitive_strcmp+0x5e>
 800f34e:	7bfb      	ldrb	r3, [r7, #15]
 800f350:	f103 0220 	add.w	r2, r3, #32
 800f354:	e000      	b.n	800f358 <case_insensitive_strcmp+0x60>
 800f356:	7bfa      	ldrb	r2, [r7, #15]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	73bb      	strb	r3, [r7, #14]
 800f35e:	7bbb      	ldrb	r3, [r7, #14]
 800f360:	3301      	adds	r3, #1
 800f362:	491a      	ldr	r1, [pc, #104]	; (800f3cc <case_insensitive_strcmp+0xd4>)
 800f364:	440b      	add	r3, r1
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	f003 0303 	and.w	r3, r3, #3
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d102      	bne.n	800f376 <case_insensitive_strcmp+0x7e>
 800f370:	7bbb      	ldrb	r3, [r7, #14]
 800f372:	3320      	adds	r3, #32
 800f374:	e000      	b.n	800f378 <case_insensitive_strcmp+0x80>
 800f376:	7bbb      	ldrb	r3, [r7, #14]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d0d0      	beq.n	800f31e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	737b      	strb	r3, [r7, #13]
 800f382:	7b7b      	ldrb	r3, [r7, #13]
 800f384:	3301      	adds	r3, #1
 800f386:	4a11      	ldr	r2, [pc, #68]	; (800f3cc <case_insensitive_strcmp+0xd4>)
 800f388:	4413      	add	r3, r2
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	f003 0303 	and.w	r3, r3, #3
 800f390:	2b01      	cmp	r3, #1
 800f392:	d103      	bne.n	800f39c <case_insensitive_strcmp+0xa4>
 800f394:	7b7b      	ldrb	r3, [r7, #13]
 800f396:	f103 0220 	add.w	r2, r3, #32
 800f39a:	e000      	b.n	800f39e <case_insensitive_strcmp+0xa6>
 800f39c:	7b7a      	ldrb	r2, [r7, #13]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	733b      	strb	r3, [r7, #12]
 800f3a4:	7b3b      	ldrb	r3, [r7, #12]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	4908      	ldr	r1, [pc, #32]	; (800f3cc <case_insensitive_strcmp+0xd4>)
 800f3aa:	440b      	add	r3, r1
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	f003 0303 	and.w	r3, r3, #3
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d102      	bne.n	800f3bc <case_insensitive_strcmp+0xc4>
 800f3b6:	7b3b      	ldrb	r3, [r7, #12]
 800f3b8:	3320      	adds	r3, #32
 800f3ba:	e000      	b.n	800f3be <case_insensitive_strcmp+0xc6>
 800f3bc:	7b3b      	ldrb	r3, [r7, #12]
 800f3be:	1ad3      	subs	r3, r2, r3
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3714      	adds	r7, #20
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr
 800f3cc:	0801534c 	.word	0x0801534c

0800f3d0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2028      	movs	r0, #40	; 0x28
 800f3de:	4798      	blx	r3
 800f3e0:	60f8      	str	r0, [r7, #12]
    if (node)
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d004      	beq.n	800f3f2 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800f3e8:	2228      	movs	r2, #40	; 0x28
 800f3ea:	2100      	movs	r1, #0
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f001 f85b 	bl	80104a8 <memset>
    }

    return node;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3710      	adds	r7, #16
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800f404:	2300      	movs	r3, #0
 800f406:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800f408:	e037      	b.n	800f47a <cJSON_Delete+0x7e>
    {
        next = item->next;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d108      	bne.n	800f42e <cJSON_Delete+0x32>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	689b      	ldr	r3, [r3, #8]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d004      	beq.n	800f42e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	689b      	ldr	r3, [r3, #8]
 800f428:	4618      	mov	r0, r3
 800f42a:	f7ff ffe7 	bl	800f3fc <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f436:	2b00      	cmp	r3, #0
 800f438:	d109      	bne.n	800f44e <cJSON_Delete+0x52>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	691b      	ldr	r3, [r3, #16]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d005      	beq.n	800f44e <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800f442:	4b12      	ldr	r3, [pc, #72]	; (800f48c <cJSON_Delete+0x90>)
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	6912      	ldr	r2, [r2, #16]
 800f44a:	4610      	mov	r0, r2
 800f44c:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f456:	2b00      	cmp	r3, #0
 800f458:	d109      	bne.n	800f46e <cJSON_Delete+0x72>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6a1b      	ldr	r3, [r3, #32]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d005      	beq.n	800f46e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800f462:	4b0a      	ldr	r3, [pc, #40]	; (800f48c <cJSON_Delete+0x90>)
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	6a12      	ldr	r2, [r2, #32]
 800f46a:	4610      	mov	r0, r2
 800f46c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800f46e:	4b07      	ldr	r3, [pc, #28]	; (800f48c <cJSON_Delete+0x90>)
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	4798      	blx	r3
        item = next;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d1c4      	bne.n	800f40a <cJSON_Delete+0xe>
    }
}
 800f480:	bf00      	nop
 800f482:	bf00      	nop
 800f484:	3710      	adds	r7, #16
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
 800f48a:	bf00      	nop
 800f48c:	20000154 	.word	0x20000154

0800f490 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800f490:	b480      	push	{r7}
 800f492:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800f494:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800f496:	4618      	mov	r0, r3
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b098      	sub	sp, #96	; 0x60
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
    double number = 0;
 800f4aa:	f04f 0200 	mov.w	r2, #0
 800f4ae:	f04f 0300 	mov.w	r3, #0
 800f4b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800f4ba:	f7ff ffe9 	bl	800f490 <get_decimal_point>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d003      	beq.n	800f4d6 <parse_number+0x36>
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d101      	bne.n	800f4da <parse_number+0x3a>
    {
        return false;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e0c6      	b.n	800f668 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800f4da:	2300      	movs	r3, #0
 800f4dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4de:	e063      	b.n	800f5a8 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	6899      	ldr	r1, [r3, #8]
 800f4e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4ea:	440b      	add	r3, r1
 800f4ec:	4413      	add	r3, r2
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	2b45      	cmp	r3, #69	; 0x45
 800f4f2:	dc3d      	bgt.n	800f570 <parse_number+0xd0>
 800f4f4:	2b2b      	cmp	r3, #43	; 0x2b
 800f4f6:	db66      	blt.n	800f5c6 <parse_number+0x126>
 800f4f8:	3b2b      	subs	r3, #43	; 0x2b
 800f4fa:	2b1a      	cmp	r3, #26
 800f4fc:	d863      	bhi.n	800f5c6 <parse_number+0x126>
 800f4fe:	a201      	add	r2, pc, #4	; (adr r2, 800f504 <parse_number+0x64>)
 800f500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f504:	0800f575 	.word	0x0800f575
 800f508:	0800f5c7 	.word	0x0800f5c7
 800f50c:	0800f575 	.word	0x0800f575
 800f510:	0800f593 	.word	0x0800f593
 800f514:	0800f5c7 	.word	0x0800f5c7
 800f518:	0800f575 	.word	0x0800f575
 800f51c:	0800f575 	.word	0x0800f575
 800f520:	0800f575 	.word	0x0800f575
 800f524:	0800f575 	.word	0x0800f575
 800f528:	0800f575 	.word	0x0800f575
 800f52c:	0800f575 	.word	0x0800f575
 800f530:	0800f575 	.word	0x0800f575
 800f534:	0800f575 	.word	0x0800f575
 800f538:	0800f575 	.word	0x0800f575
 800f53c:	0800f575 	.word	0x0800f575
 800f540:	0800f5c7 	.word	0x0800f5c7
 800f544:	0800f5c7 	.word	0x0800f5c7
 800f548:	0800f5c7 	.word	0x0800f5c7
 800f54c:	0800f5c7 	.word	0x0800f5c7
 800f550:	0800f5c7 	.word	0x0800f5c7
 800f554:	0800f5c7 	.word	0x0800f5c7
 800f558:	0800f5c7 	.word	0x0800f5c7
 800f55c:	0800f5c7 	.word	0x0800f5c7
 800f560:	0800f5c7 	.word	0x0800f5c7
 800f564:	0800f5c7 	.word	0x0800f5c7
 800f568:	0800f5c7 	.word	0x0800f5c7
 800f56c:	0800f575 	.word	0x0800f575
 800f570:	2b65      	cmp	r3, #101	; 0x65
 800f572:	d128      	bne.n	800f5c6 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	6899      	ldr	r1, [r3, #8]
 800f57c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f57e:	440b      	add	r3, r1
 800f580:	4413      	add	r3, r2
 800f582:	7819      	ldrb	r1, [r3, #0]
 800f584:	f107 0208 	add.w	r2, r7, #8
 800f588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f58a:	4413      	add	r3, r2
 800f58c:	460a      	mov	r2, r1
 800f58e:	701a      	strb	r2, [r3, #0]
                break;
 800f590:	e007      	b.n	800f5a2 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800f592:	f107 0208 	add.w	r2, r7, #8
 800f596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f598:	4413      	add	r3, r2
 800f59a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f59e:	701a      	strb	r2, [r3, #0]
                break;
 800f5a0:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800f5a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f5a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5aa:	2b3e      	cmp	r3, #62	; 0x3e
 800f5ac:	d80d      	bhi.n	800f5ca <parse_number+0x12a>
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d00a      	beq.n	800f5ca <parse_number+0x12a>
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	689a      	ldr	r2, [r3, #8]
 800f5b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5ba:	441a      	add	r2, r3
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d38d      	bcc.n	800f4e0 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800f5c4:	e001      	b.n	800f5ca <parse_number+0x12a>
                goto loop_end;
 800f5c6:	bf00      	nop
 800f5c8:	e000      	b.n	800f5cc <parse_number+0x12c>
loop_end:
 800f5ca:	bf00      	nop
    number_c_string[i] = '\0';
 800f5cc:	f107 0208 	add.w	r2, r7, #8
 800f5d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5d2:	4413      	add	r3, r2
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800f5d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f5dc:	f107 0308 	add.w	r3, r7, #8
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f002 f8f2 	bl	80117cc <strtod>
 800f5e8:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800f5ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5ee:	f107 0308 	add.w	r3, r7, #8
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d101      	bne.n	800f5fa <parse_number+0x15a>
    {
        return false; /* parse_error */
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	e036      	b.n	800f668 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800f5fa:	6879      	ldr	r1, [r7, #4]
 800f5fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f600:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800f604:	a31b      	add	r3, pc, #108	; (adr r3, 800f674 <parse_number+0x1d4>)
 800f606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f60e:	f7f1 fa91 	bl	8000b34 <__aeabi_dcmpge>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d004      	beq.n	800f622 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f61e:	615a      	str	r2, [r3, #20]
 800f620:	e015      	b.n	800f64e <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800f622:	f04f 0200 	mov.w	r2, #0
 800f626:	4b12      	ldr	r3, [pc, #72]	; (800f670 <parse_number+0x1d0>)
 800f628:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f62c:	f7f1 fa78 	bl	8000b20 <__aeabi_dcmple>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d004      	beq.n	800f640 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f63c:	615a      	str	r2, [r3, #20]
 800f63e:	e006      	b.n	800f64e <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 800f640:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f644:	f7f1 fa8a 	bl	8000b5c <__aeabi_d2iz>
 800f648:	4602      	mov	r2, r0
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2208      	movs	r2, #8
 800f652:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f65a:	f107 0208 	add.w	r2, r7, #8
 800f65e:	1a8a      	subs	r2, r1, r2
 800f660:	441a      	add	r2, r3
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	609a      	str	r2, [r3, #8]
    return true;
 800f666:	2301      	movs	r3, #1
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3760      	adds	r7, #96	; 0x60
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	c1e00000 	.word	0xc1e00000
 800f674:	ffc00000 	.word	0xffc00000
 800f678:	41dfffff 	.word	0x41dfffff

0800f67c <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800f684:	2300      	movs	r3, #0
 800f686:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800f688:	2300      	movs	r3, #0
 800f68a:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800f68c:	2300      	movs	r3, #0
 800f68e:	60bb      	str	r3, [r7, #8]
 800f690:	e04c      	b.n	800f72c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800f692:	687a      	ldr	r2, [r7, #4]
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	4413      	add	r3, r2
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	2b2f      	cmp	r3, #47	; 0x2f
 800f69c:	d90f      	bls.n	800f6be <parse_hex4+0x42>
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	2b39      	cmp	r3, #57	; 0x39
 800f6a8:	d809      	bhi.n	800f6be <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	3b30      	subs	r3, #48	; 0x30
 800f6ba:	60fb      	str	r3, [r7, #12]
 800f6bc:	e02d      	b.n	800f71a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	2b40      	cmp	r3, #64	; 0x40
 800f6c8:	d90f      	bls.n	800f6ea <parse_hex4+0x6e>
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	2b46      	cmp	r3, #70	; 0x46
 800f6d4:	d809      	bhi.n	800f6ea <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	4413      	add	r3, r2
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	3b37      	subs	r3, #55	; 0x37
 800f6e6:	60fb      	str	r3, [r7, #12]
 800f6e8:	e017      	b.n	800f71a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	2b60      	cmp	r3, #96	; 0x60
 800f6f4:	d90f      	bls.n	800f716 <parse_hex4+0x9a>
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	2b66      	cmp	r3, #102	; 0x66
 800f700:	d809      	bhi.n	800f716 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	4413      	add	r3, r2
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	461a      	mov	r2, r3
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	4413      	add	r3, r2
 800f710:	3b57      	subs	r3, #87	; 0x57
 800f712:	60fb      	str	r3, [r7, #12]
 800f714:	e001      	b.n	800f71a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800f716:	2300      	movs	r3, #0
 800f718:	e00c      	b.n	800f734 <parse_hex4+0xb8>
        }

        if (i < 3)
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	2b02      	cmp	r3, #2
 800f71e:	d802      	bhi.n	800f726 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	011b      	lsls	r3, r3, #4
 800f724:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	3301      	adds	r3, #1
 800f72a:	60bb      	str	r3, [r7, #8]
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	2b03      	cmp	r3, #3
 800f730:	d9af      	bls.n	800f692 <parse_hex4+0x16>
        }
    }

    return h;
 800f732:	68fb      	ldr	r3, [r7, #12]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3714      	adds	r7, #20
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b08a      	sub	sp, #40	; 0x28
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	60b9      	str	r1, [r7, #8]
 800f74a:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800f74c:	2300      	movs	r3, #0
 800f74e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800f750:	2300      	movs	r3, #0
 800f752:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800f758:	2300      	movs	r3, #0
 800f75a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800f75e:	2300      	movs	r3, #0
 800f760:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800f764:	2300      	movs	r3, #0
 800f766:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800f76a:	2300      	movs	r3, #0
 800f76c:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800f770:	68ba      	ldr	r2, [r7, #8]
 800f772:	69bb      	ldr	r3, [r7, #24]
 800f774:	1ad3      	subs	r3, r2, r3
 800f776:	2b05      	cmp	r3, #5
 800f778:	f340 80b7 	ble.w	800f8ea <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800f77c:	69bb      	ldr	r3, [r7, #24]
 800f77e:	3302      	adds	r3, #2
 800f780:	4618      	mov	r0, r3
 800f782:	f7ff ff7b 	bl	800f67c <parse_hex4>
 800f786:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f78e:	d304      	bcc.n	800f79a <utf16_literal_to_utf8+0x5a>
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800f796:	f0c0 80aa 	bcc.w	800f8ee <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800f7a0:	d337      	bcc.n	800f812 <utf16_literal_to_utf8+0xd2>
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f7a8:	d233      	bcs.n	800f812 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800f7aa:	69bb      	ldr	r3, [r7, #24]
 800f7ac:	3306      	adds	r3, #6
 800f7ae:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800f7b4:	230c      	movs	r3, #12
 800f7b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800f7ba:	68ba      	ldr	r2, [r7, #8]
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	1ad3      	subs	r3, r2, r3
 800f7c0:	2b05      	cmp	r3, #5
 800f7c2:	f340 8096 	ble.w	800f8f2 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	2b5c      	cmp	r3, #92	; 0x5c
 800f7cc:	f040 8093 	bne.w	800f8f6 <utf16_literal_to_utf8+0x1b6>
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	2b75      	cmp	r3, #117	; 0x75
 800f7d8:	f040 808d 	bne.w	800f8f6 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	3302      	adds	r3, #2
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7ff ff4b 	bl	800f67c <parse_hex4>
 800f7e6:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f7ee:	f0c0 8084 	bcc.w	800f8fa <utf16_literal_to_utf8+0x1ba>
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800f7f8:	d27f      	bcs.n	800f8fa <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	029a      	lsls	r2, r3, #10
 800f7fe:	4b43      	ldr	r3, [pc, #268]	; (800f90c <utf16_literal_to_utf8+0x1cc>)
 800f800:	4013      	ands	r3, r2
 800f802:	693a      	ldr	r2, [r7, #16]
 800f804:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f808:	4313      	orrs	r3, r2
 800f80a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f80e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800f810:	e004      	b.n	800f81c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800f812:	2306      	movs	r3, #6
 800f814:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800f81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81e:	2b7f      	cmp	r3, #127	; 0x7f
 800f820:	d803      	bhi.n	800f82a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800f822:	2301      	movs	r3, #1
 800f824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f828:	e01f      	b.n	800f86a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800f82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f82c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f830:	d206      	bcs.n	800f840 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800f832:	2302      	movs	r3, #2
 800f834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800f838:	23c0      	movs	r3, #192	; 0xc0
 800f83a:	f887 3020 	strb.w	r3, [r7, #32]
 800f83e:	e014      	b.n	800f86a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800f840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f846:	d206      	bcs.n	800f856 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800f848:	2303      	movs	r3, #3
 800f84a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800f84e:	23e0      	movs	r3, #224	; 0xe0
 800f850:	f887 3020 	strb.w	r3, [r7, #32]
 800f854:	e009      	b.n	800f86a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800f856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f858:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800f85c:	d24f      	bcs.n	800f8fe <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800f85e:	2304      	movs	r3, #4
 800f860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800f864:	23f0      	movs	r3, #240	; 0xf0
 800f866:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800f86a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f86e:	3b01      	subs	r3, #1
 800f870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f874:	e015      	b.n	800f8a2 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6819      	ldr	r1, [r3, #0]
 800f884:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f888:	440b      	add	r3, r1
 800f88a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f88e:	b2d2      	uxtb	r2, r2
 800f890:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800f892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f894:	099b      	lsrs	r3, r3, #6
 800f896:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800f898:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f89c:	3b01      	subs	r3, #1
 800f89e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f8a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d1e5      	bne.n	800f876 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800f8aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d909      	bls.n	800f8c6 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800f8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b4:	b2d9      	uxtb	r1, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f8be:	430a      	orrs	r2, r1
 800f8c0:	b2d2      	uxtb	r2, r2
 800f8c2:	701a      	strb	r2, [r3, #0]
 800f8c4:	e007      	b.n	800f8d6 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800f8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f8d2:	b2d2      	uxtb	r2, r2
 800f8d4:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8de:	441a      	add	r2, r3
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800f8e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f8e8:	e00b      	b.n	800f902 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800f8ea:	bf00      	nop
 800f8ec:	e008      	b.n	800f900 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800f8ee:	bf00      	nop
 800f8f0:	e006      	b.n	800f900 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f8f2:	bf00      	nop
 800f8f4:	e004      	b.n	800f900 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f8f6:	bf00      	nop
 800f8f8:	e002      	b.n	800f900 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f8fa:	bf00      	nop
 800f8fc:	e000      	b.n	800f900 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800f8fe:	bf00      	nop

fail:
    return 0;
 800f900:	2300      	movs	r3, #0
}
 800f902:	4618      	mov	r0, r3
 800f904:	3728      	adds	r7, #40	; 0x28
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	000ffc00 	.word	0x000ffc00

0800f910 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b08a      	sub	sp, #40	; 0x28
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	3301      	adds	r3, #1
 800f924:	4413      	add	r3, r2
 800f926:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	689b      	ldr	r3, [r3, #8]
 800f930:	3301      	adds	r3, #1
 800f932:	4413      	add	r3, r2
 800f934:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800f936:	2300      	movs	r3, #0
 800f938:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800f93a:	2300      	movs	r3, #0
 800f93c:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	4413      	add	r3, r2
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	2b22      	cmp	r3, #34	; 0x22
 800f94c:	f040 8102 	bne.w	800fb54 <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800f954:	2300      	movs	r3, #0
 800f956:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800f958:	e017      	b.n	800f98a <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800f95a:	6a3b      	ldr	r3, [r7, #32]
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	2b5c      	cmp	r3, #92	; 0x5c
 800f960:	d110      	bne.n	800f984 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800f962:	6a3b      	ldr	r3, [r7, #32]
 800f964:	1c5a      	adds	r2, r3, #1
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	1ad3      	subs	r3, r2, r3
 800f96c:	461a      	mov	r2, r3
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	429a      	cmp	r2, r3
 800f974:	f080 80f0 	bcs.w	800fb58 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	3301      	adds	r3, #1
 800f97c:	61bb      	str	r3, [r7, #24]
                input_end++;
 800f97e:	6a3b      	ldr	r3, [r7, #32]
 800f980:	3301      	adds	r3, #1
 800f982:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800f984:	6a3b      	ldr	r3, [r7, #32]
 800f986:	3301      	adds	r3, #1
 800f988:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	6a3a      	ldr	r2, [r7, #32]
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	461a      	mov	r2, r3
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d203      	bcs.n	800f9a4 <parse_string+0x94>
 800f99c:	6a3b      	ldr	r3, [r7, #32]
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2b22      	cmp	r3, #34	; 0x22
 800f9a2:	d1da      	bne.n	800f95a <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	6a3a      	ldr	r2, [r7, #32]
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	f080 80d2 	bcs.w	800fb5c <parse_string+0x24c>
 800f9b8:	6a3b      	ldr	r3, [r7, #32]
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	2b22      	cmp	r3, #34	; 0x22
 800f9be:	f040 80cd 	bne.w	800fb5c <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	689b      	ldr	r3, [r3, #8]
 800f9ca:	4413      	add	r3, r2
 800f9cc:	6a3a      	ldr	r2, [r7, #32]
 800f9ce:	1ad3      	subs	r3, r2, r3
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	1ad3      	subs	r3, r2, r3
 800f9d6:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	691b      	ldr	r3, [r3, #16]
 800f9dc:	693a      	ldr	r2, [r7, #16]
 800f9de:	3201      	adds	r2, #1
 800f9e0:	4610      	mov	r0, r2
 800f9e2:	4798      	blx	r3
 800f9e4:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f000 80b9 	beq.w	800fb60 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800f9f2:	e093      	b.n	800fb1c <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	2b5c      	cmp	r3, #92	; 0x5c
 800f9fa:	d008      	beq.n	800fa0e <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800f9fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9fe:	1c53      	adds	r3, r2, #1
 800fa00:	627b      	str	r3, [r7, #36]	; 0x24
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	1c59      	adds	r1, r3, #1
 800fa06:	60f9      	str	r1, [r7, #12]
 800fa08:	7812      	ldrb	r2, [r2, #0]
 800fa0a:	701a      	strb	r2, [r3, #0]
 800fa0c:	e086      	b.n	800fb1c <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800fa0e:	2302      	movs	r3, #2
 800fa10:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800fa12:	6a3a      	ldr	r2, [r7, #32]
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	f340 80a3 	ble.w	800fb64 <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800fa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa20:	3301      	adds	r3, #1
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	2b75      	cmp	r3, #117	; 0x75
 800fa26:	f300 809f 	bgt.w	800fb68 <parse_string+0x258>
 800fa2a:	2b5c      	cmp	r3, #92	; 0x5c
 800fa2c:	da04      	bge.n	800fa38 <parse_string+0x128>
 800fa2e:	2b22      	cmp	r3, #34	; 0x22
 800fa30:	d05c      	beq.n	800faec <parse_string+0x1dc>
 800fa32:	2b2f      	cmp	r3, #47	; 0x2f
 800fa34:	d05a      	beq.n	800faec <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800fa36:	e097      	b.n	800fb68 <parse_string+0x258>
 800fa38:	3b5c      	subs	r3, #92	; 0x5c
 800fa3a:	2b19      	cmp	r3, #25
 800fa3c:	f200 8094 	bhi.w	800fb68 <parse_string+0x258>
 800fa40:	a201      	add	r2, pc, #4	; (adr r2, 800fa48 <parse_string+0x138>)
 800fa42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa46:	bf00      	nop
 800fa48:	0800faed 	.word	0x0800faed
 800fa4c:	0800fb69 	.word	0x0800fb69
 800fa50:	0800fb69 	.word	0x0800fb69
 800fa54:	0800fb69 	.word	0x0800fb69
 800fa58:	0800fb69 	.word	0x0800fb69
 800fa5c:	0800fb69 	.word	0x0800fb69
 800fa60:	0800fab1 	.word	0x0800fab1
 800fa64:	0800fb69 	.word	0x0800fb69
 800fa68:	0800fb69 	.word	0x0800fb69
 800fa6c:	0800fb69 	.word	0x0800fb69
 800fa70:	0800fabd 	.word	0x0800fabd
 800fa74:	0800fb69 	.word	0x0800fb69
 800fa78:	0800fb69 	.word	0x0800fb69
 800fa7c:	0800fb69 	.word	0x0800fb69
 800fa80:	0800fb69 	.word	0x0800fb69
 800fa84:	0800fb69 	.word	0x0800fb69
 800fa88:	0800fb69 	.word	0x0800fb69
 800fa8c:	0800fb69 	.word	0x0800fb69
 800fa90:	0800fac9 	.word	0x0800fac9
 800fa94:	0800fb69 	.word	0x0800fb69
 800fa98:	0800fb69 	.word	0x0800fb69
 800fa9c:	0800fb69 	.word	0x0800fb69
 800faa0:	0800fad5 	.word	0x0800fad5
 800faa4:	0800fb69 	.word	0x0800fb69
 800faa8:	0800fae1 	.word	0x0800fae1
 800faac:	0800fafb 	.word	0x0800fafb
                    *output_pointer++ = '\b';
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	60fa      	str	r2, [r7, #12]
 800fab6:	2208      	movs	r2, #8
 800fab8:	701a      	strb	r2, [r3, #0]
                    break;
 800faba:	e02b      	b.n	800fb14 <parse_string+0x204>
                    *output_pointer++ = '\f';
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	1c5a      	adds	r2, r3, #1
 800fac0:	60fa      	str	r2, [r7, #12]
 800fac2:	220c      	movs	r2, #12
 800fac4:	701a      	strb	r2, [r3, #0]
                    break;
 800fac6:	e025      	b.n	800fb14 <parse_string+0x204>
                    *output_pointer++ = '\n';
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	1c5a      	adds	r2, r3, #1
 800facc:	60fa      	str	r2, [r7, #12]
 800face:	220a      	movs	r2, #10
 800fad0:	701a      	strb	r2, [r3, #0]
                    break;
 800fad2:	e01f      	b.n	800fb14 <parse_string+0x204>
                    *output_pointer++ = '\r';
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	1c5a      	adds	r2, r3, #1
 800fad8:	60fa      	str	r2, [r7, #12]
 800fada:	220d      	movs	r2, #13
 800fadc:	701a      	strb	r2, [r3, #0]
                    break;
 800fade:	e019      	b.n	800fb14 <parse_string+0x204>
                    *output_pointer++ = '\t';
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	1c5a      	adds	r2, r3, #1
 800fae4:	60fa      	str	r2, [r7, #12]
 800fae6:	2209      	movs	r2, #9
 800fae8:	701a      	strb	r2, [r3, #0]
                    break;
 800faea:	e013      	b.n	800fb14 <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	1c5a      	adds	r2, r3, #1
 800faf0:	60fa      	str	r2, [r7, #12]
 800faf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faf4:	7852      	ldrb	r2, [r2, #1]
 800faf6:	701a      	strb	r2, [r3, #0]
                    break;
 800faf8:	e00c      	b.n	800fb14 <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800fafa:	f107 030c 	add.w	r3, r7, #12
 800fafe:	461a      	mov	r2, r3
 800fb00:	6a39      	ldr	r1, [r7, #32]
 800fb02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb04:	f7ff fe1c 	bl	800f740 <utf16_literal_to_utf8>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800fb0c:	7dfb      	ldrb	r3, [r7, #23]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d02c      	beq.n	800fb6c <parse_string+0x25c>
                    break;
 800fb12:	bf00      	nop
            }
            input_pointer += sequence_length;
 800fb14:	7dfb      	ldrb	r3, [r7, #23]
 800fb16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb18:	4413      	add	r3, r2
 800fb1a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800fb1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb1e:	6a3b      	ldr	r3, [r7, #32]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	f4ff af67 	bcc.w	800f9f4 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2210      	movs	r2, #16
 800fb30:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	69fa      	ldr	r2, [r7, #28]
 800fb36:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	6a3a      	ldr	r2, [r7, #32]
 800fb3e:	1ad3      	subs	r3, r2, r3
 800fb40:	461a      	mov	r2, r3
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	689b      	ldr	r3, [r3, #8]
 800fb4a:	1c5a      	adds	r2, r3, #1
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	609a      	str	r2, [r3, #8]

    return true;
 800fb50:	2301      	movs	r3, #1
 800fb52:	e01e      	b.n	800fb92 <parse_string+0x282>
        goto fail;
 800fb54:	bf00      	nop
 800fb56:	e00a      	b.n	800fb6e <parse_string+0x25e>
                    goto fail;
 800fb58:	bf00      	nop
 800fb5a:	e008      	b.n	800fb6e <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 800fb5c:	bf00      	nop
 800fb5e:	e006      	b.n	800fb6e <parse_string+0x25e>
            goto fail; /* allocation failure */
 800fb60:	bf00      	nop
 800fb62:	e004      	b.n	800fb6e <parse_string+0x25e>
                goto fail;
 800fb64:	bf00      	nop
 800fb66:	e002      	b.n	800fb6e <parse_string+0x25e>
                    goto fail;
 800fb68:	bf00      	nop
 800fb6a:	e000      	b.n	800fb6e <parse_string+0x25e>
                        goto fail;
 800fb6c:	bf00      	nop

fail:
    if (output != NULL)
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d003      	beq.n	800fb7c <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	695b      	ldr	r3, [r3, #20]
 800fb78:	69f8      	ldr	r0, [r7, #28]
 800fb7a:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d006      	beq.n	800fb90 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb88:	1ad3      	subs	r3, r2, r3
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	609a      	str	r2, [r3, #8]
    }

    return false;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3728      	adds	r7, #40	; 0x28
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop

0800fb9c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d003      	beq.n	800fbb2 <buffer_skip_whitespace+0x16>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d101      	bne.n	800fbb6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	e02c      	b.n	800fc10 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d005      	beq.n	800fbc8 <buffer_skip_whitespace+0x2c>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	689a      	ldr	r2, [r3, #8]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d306      	bcc.n	800fbd6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	e021      	b.n	800fc10 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	689b      	ldr	r3, [r3, #8]
 800fbd0:	1c5a      	adds	r2, r3, #1
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00d      	beq.n	800fbf8 <buffer_skip_whitespace+0x5c>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	689a      	ldr	r2, [r3, #8]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d207      	bcs.n	800fbf8 <buffer_skip_whitespace+0x5c>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	689b      	ldr	r3, [r3, #8]
 800fbf0:	4413      	add	r3, r2
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	2b20      	cmp	r3, #32
 800fbf6:	d9e9      	bls.n	800fbcc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	689a      	ldr	r2, [r3, #8]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d104      	bne.n	800fc0e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	689b      	ldr	r3, [r3, #8]
 800fc08:	1e5a      	subs	r2, r3, #1
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800fc0e:	687b      	ldr	r3, [r7, #4]
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr

0800fc1c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d007      	beq.n	800fc3a <skip_utf8_bom+0x1e>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d003      	beq.n	800fc3a <skip_utf8_bom+0x1e>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	689b      	ldr	r3, [r3, #8]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d001      	beq.n	800fc3e <skip_utf8_bom+0x22>
    {
        return NULL;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	e01c      	b.n	800fc78 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d018      	beq.n	800fc76 <skip_utf8_bom+0x5a>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	1d1a      	adds	r2, r3, #4
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d211      	bcs.n	800fc76 <skip_utf8_bom+0x5a>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	689b      	ldr	r3, [r3, #8]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	2203      	movs	r2, #3
 800fc5e:	4908      	ldr	r1, [pc, #32]	; (800fc80 <skip_utf8_bom+0x64>)
 800fc60:	4618      	mov	r0, r3
 800fc62:	f000 ff7a 	bl	8010b5a <strncmp>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d104      	bne.n	800fc76 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	1cda      	adds	r2, r3, #3
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800fc76:	687b      	ldr	r3, [r7, #4]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	08013c34 	.word	0x08013c34

0800fc84 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	60f8      	str	r0, [r7, #12]
 800fc8c:	60b9      	str	r1, [r7, #8]
 800fc8e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d101      	bne.n	800fc9a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800fc96:	2300      	movs	r3, #0
 800fc98:	e00c      	b.n	800fcb4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800fc9a:	68f8      	ldr	r0, [r7, #12]
 800fc9c:	f7f0 faaa 	bl	80001f4 <strlen>
 800fca0:	4603      	mov	r3, r0
 800fca2:	3301      	adds	r3, #1
 800fca4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	68ba      	ldr	r2, [r7, #8]
 800fcaa:	6979      	ldr	r1, [r7, #20]
 800fcac:	68f8      	ldr	r0, [r7, #12]
 800fcae:	f000 f805 	bl	800fcbc <cJSON_ParseWithLengthOpts>
 800fcb2:	4603      	mov	r3, r0
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3718      	adds	r7, #24
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b08e      	sub	sp, #56	; 0x38
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	60f8      	str	r0, [r7, #12]
 800fcc4:	60b9      	str	r1, [r7, #8]
 800fcc6:	607a      	str	r2, [r7, #4]
 800fcc8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800fcca:	f107 0318 	add.w	r3, r7, #24
 800fcce:	2200      	movs	r2, #0
 800fcd0:	601a      	str	r2, [r3, #0]
 800fcd2:	605a      	str	r2, [r3, #4]
 800fcd4:	609a      	str	r2, [r3, #8]
 800fcd6:	60da      	str	r2, [r3, #12]
 800fcd8:	611a      	str	r2, [r3, #16]
 800fcda:	615a      	str	r2, [r3, #20]
 800fcdc:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800fcde:	2300      	movs	r3, #0
 800fce0:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800fce2:	4b41      	ldr	r3, [pc, #260]	; (800fde8 <cJSON_ParseWithLengthOpts+0x12c>)
 800fce4:	2200      	movs	r2, #0
 800fce6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800fce8:	4b3f      	ldr	r3, [pc, #252]	; (800fde8 <cJSON_ParseWithLengthOpts+0x12c>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d042      	beq.n	800fd7a <cJSON_ParseWithLengthOpts+0xbe>
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d03f      	beq.n	800fd7a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800fd06:	4a39      	ldr	r2, [pc, #228]	; (800fdec <cJSON_ParseWithLengthOpts+0x130>)
 800fd08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd0c:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800fd12:	4836      	ldr	r0, [pc, #216]	; (800fdec <cJSON_ParseWithLengthOpts+0x130>)
 800fd14:	f7ff fb5c 	bl	800f3d0 <cJSON_New_Item>
 800fd18:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800fd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d02e      	beq.n	800fd7e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800fd20:	f107 0318 	add.w	r3, r7, #24
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7ff ff79 	bl	800fc1c <skip_utf8_bom>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7ff ff35 	bl	800fb9c <buffer_skip_whitespace>
 800fd32:	4603      	mov	r3, r0
 800fd34:	4619      	mov	r1, r3
 800fd36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd38:	f000 f868 	bl	800fe0c <parse_value>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d01f      	beq.n	800fd82 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00e      	beq.n	800fd66 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800fd48:	f107 0318 	add.w	r3, r7, #24
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7ff ff25 	bl	800fb9c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800fd52:	6a3a      	ldr	r2, [r7, #32]
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d215      	bcs.n	800fd86 <cJSON_ParseWithLengthOpts+0xca>
 800fd5a:	69ba      	ldr	r2, [r7, #24]
 800fd5c:	6a3b      	ldr	r3, [r7, #32]
 800fd5e:	4413      	add	r3, r2
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d10f      	bne.n	800fd86 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d004      	beq.n	800fd76 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800fd6c:	69ba      	ldr	r2, [r7, #24]
 800fd6e:	6a3b      	ldr	r3, [r7, #32]
 800fd70:	441a      	add	r2, r3
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	601a      	str	r2, [r3, #0]
    }

    return item;
 800fd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd78:	e031      	b.n	800fdde <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800fd7a:	bf00      	nop
 800fd7c:	e004      	b.n	800fd88 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800fd7e:	bf00      	nop
 800fd80:	e002      	b.n	800fd88 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800fd82:	bf00      	nop
 800fd84:	e000      	b.n	800fd88 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800fd86:	bf00      	nop

fail:
    if (item != NULL)
 800fd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d002      	beq.n	800fd94 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800fd8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd90:	f7ff fb34 	bl	800f3fc <cJSON_Delete>
    }

    if (value != NULL)
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d020      	beq.n	800fddc <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800fda2:	6a3a      	ldr	r2, [r7, #32]
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d202      	bcs.n	800fdb0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800fdaa:	6a3b      	ldr	r3, [r7, #32]
 800fdac:	617b      	str	r3, [r7, #20]
 800fdae:	e005      	b.n	800fdbc <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	3b01      	subs	r3, #1
 800fdba:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d004      	beq.n	800fdcc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800fdc2:	693a      	ldr	r2, [r7, #16]
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	441a      	add	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800fdcc:	4b06      	ldr	r3, [pc, #24]	; (800fde8 <cJSON_ParseWithLengthOpts+0x12c>)
 800fdce:	461a      	mov	r2, r3
 800fdd0:	f107 0310 	add.w	r3, r7, #16
 800fdd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fdd8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800fddc:	2300      	movs	r3, #0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3738      	adds	r7, #56	; 0x38
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	20002570 	.word	0x20002570
 800fdec:	20000154 	.word	0x20000154

0800fdf0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f7ff ff41 	bl	800fc84 <cJSON_ParseWithOpts>
 800fe02:	4603      	mov	r3, r0
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d003      	beq.n	800fe24 <parse_value+0x18>
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d101      	bne.n	800fe28 <parse_value+0x1c>
    {
        return false; /* no input */
 800fe24:	2300      	movs	r3, #0
 800fe26:	e0d2      	b.n	800ffce <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d01d      	beq.n	800fe6a <parse_value+0x5e>
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	689b      	ldr	r3, [r3, #8]
 800fe32:	1d1a      	adds	r2, r3, #4
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d816      	bhi.n	800fe6a <parse_value+0x5e>
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	689b      	ldr	r3, [r3, #8]
 800fe44:	4413      	add	r3, r2
 800fe46:	2204      	movs	r2, #4
 800fe48:	4963      	ldr	r1, [pc, #396]	; (800ffd8 <parse_value+0x1cc>)
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f000 fe85 	bl	8010b5a <strncmp>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d109      	bne.n	800fe6a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2204      	movs	r2, #4
 800fe5a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	1d1a      	adds	r2, r3, #4
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	609a      	str	r2, [r3, #8]
        return true;
 800fe66:	2301      	movs	r3, #1
 800fe68:	e0b1      	b.n	800ffce <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d01d      	beq.n	800feac <parse_value+0xa0>
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	689b      	ldr	r3, [r3, #8]
 800fe74:	1d5a      	adds	r2, r3, #5
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d816      	bhi.n	800feac <parse_value+0xa0>
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	689b      	ldr	r3, [r3, #8]
 800fe86:	4413      	add	r3, r2
 800fe88:	2205      	movs	r2, #5
 800fe8a:	4954      	ldr	r1, [pc, #336]	; (800ffdc <parse_value+0x1d0>)
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f000 fe64 	bl	8010b5a <strncmp>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d109      	bne.n	800feac <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	1d5a      	adds	r2, r3, #5
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	609a      	str	r2, [r3, #8]
        return true;
 800fea8:	2301      	movs	r3, #1
 800feaa:	e090      	b.n	800ffce <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d020      	beq.n	800fef4 <parse_value+0xe8>
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	689b      	ldr	r3, [r3, #8]
 800feb6:	1d1a      	adds	r2, r3, #4
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	429a      	cmp	r2, r3
 800febe:	d819      	bhi.n	800fef4 <parse_value+0xe8>
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	689b      	ldr	r3, [r3, #8]
 800fec8:	4413      	add	r3, r2
 800feca:	2204      	movs	r2, #4
 800fecc:	4944      	ldr	r1, [pc, #272]	; (800ffe0 <parse_value+0x1d4>)
 800fece:	4618      	mov	r0, r3
 800fed0:	f000 fe43 	bl	8010b5a <strncmp>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d10c      	bne.n	800fef4 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2202      	movs	r2, #2
 800fede:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2201      	movs	r2, #1
 800fee4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	689b      	ldr	r3, [r3, #8]
 800feea:	1d1a      	adds	r2, r3, #4
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	609a      	str	r2, [r3, #8]
        return true;
 800fef0:	2301      	movs	r3, #1
 800fef2:	e06c      	b.n	800ffce <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d013      	beq.n	800ff22 <parse_value+0x116>
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	689a      	ldr	r2, [r3, #8]
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d20d      	bcs.n	800ff22 <parse_value+0x116>
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	4413      	add	r3, r2
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	2b22      	cmp	r3, #34	; 0x22
 800ff14:	d105      	bne.n	800ff22 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800ff16:	6839      	ldr	r1, [r7, #0]
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f7ff fcf9 	bl	800f910 <parse_string>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	e055      	b.n	800ffce <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d023      	beq.n	800ff70 <parse_value+0x164>
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	689a      	ldr	r2, [r3, #8]
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	685b      	ldr	r3, [r3, #4]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d21d      	bcs.n	800ff70 <parse_value+0x164>
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	689b      	ldr	r3, [r3, #8]
 800ff3c:	4413      	add	r3, r2
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	2b2d      	cmp	r3, #45	; 0x2d
 800ff42:	d00f      	beq.n	800ff64 <parse_value+0x158>
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	689b      	ldr	r3, [r3, #8]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	2b2f      	cmp	r3, #47	; 0x2f
 800ff52:	d90d      	bls.n	800ff70 <parse_value+0x164>
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	2b39      	cmp	r3, #57	; 0x39
 800ff62:	d805      	bhi.n	800ff70 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800ff64:	6839      	ldr	r1, [r7, #0]
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7ff fa9a 	bl	800f4a0 <parse_number>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	e02e      	b.n	800ffce <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d013      	beq.n	800ff9e <parse_value+0x192>
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	689a      	ldr	r2, [r3, #8]
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d20d      	bcs.n	800ff9e <parse_value+0x192>
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	689b      	ldr	r3, [r3, #8]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	2b5b      	cmp	r3, #91	; 0x5b
 800ff90:	d105      	bne.n	800ff9e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800ff92:	6839      	ldr	r1, [r7, #0]
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f000 f825 	bl	800ffe4 <parse_array>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	e017      	b.n	800ffce <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d013      	beq.n	800ffcc <parse_value+0x1c0>
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	689a      	ldr	r2, [r3, #8]
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d20d      	bcs.n	800ffcc <parse_value+0x1c0>
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	689b      	ldr	r3, [r3, #8]
 800ffb8:	4413      	add	r3, r2
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	2b7b      	cmp	r3, #123	; 0x7b
 800ffbe:	d105      	bne.n	800ffcc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800ffc0:	6839      	ldr	r1, [r7, #0]
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 f8d2 	bl	801016c <parse_object>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	e000      	b.n	800ffce <parse_value+0x1c2>
    }

    return false;
 800ffcc:	2300      	movs	r3, #0
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3708      	adds	r7, #8
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	08013c0c 	.word	0x08013c0c
 800ffdc:	08013c38 	.word	0x08013c38
 800ffe0:	08013c40 	.word	0x08013c40

0800ffe4 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b086      	sub	sp, #24
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800ffee:	2300      	movs	r3, #0
 800fff0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800fff2:	2300      	movs	r3, #0
 800fff4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fffe:	d301      	bcc.n	8010004 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8010000:	2300      	movs	r3, #0
 8010002:	e0af      	b.n	8010164 <parse_array+0x180>
    }
    input_buffer->depth++;
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	1c5a      	adds	r2, r3, #1
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	689b      	ldr	r3, [r3, #8]
 8010016:	4413      	add	r3, r2
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	2b5b      	cmp	r3, #91	; 0x5b
 801001c:	f040 8094 	bne.w	8010148 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	1c5a      	adds	r2, r3, #1
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 801002a:	6838      	ldr	r0, [r7, #0]
 801002c:	f7ff fdb6 	bl	800fb9c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d00d      	beq.n	8010052 <parse_array+0x6e>
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	689a      	ldr	r2, [r3, #8]
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	429a      	cmp	r2, r3
 8010040:	d207      	bcs.n	8010052 <parse_array+0x6e>
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	689b      	ldr	r3, [r3, #8]
 801004a:	4413      	add	r3, r2
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	2b5d      	cmp	r3, #93	; 0x5d
 8010050:	d061      	beq.n	8010116 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d005      	beq.n	8010064 <parse_array+0x80>
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	689a      	ldr	r2, [r3, #8]
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	685b      	ldr	r3, [r3, #4]
 8010060:	429a      	cmp	r2, r3
 8010062:	d305      	bcc.n	8010070 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	689b      	ldr	r3, [r3, #8]
 8010068:	1e5a      	subs	r2, r3, #1
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	609a      	str	r2, [r3, #8]
        goto fail;
 801006e:	e072      	b.n	8010156 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	1e5a      	subs	r2, r3, #1
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	3310      	adds	r3, #16
 801007e:	4618      	mov	r0, r3
 8010080:	f7ff f9a6 	bl	800f3d0 <cJSON_New_Item>
 8010084:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d05f      	beq.n	801014c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d104      	bne.n	801009c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	617b      	str	r3, [r7, #20]
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	613b      	str	r3, [r7, #16]
 801009a:	e007      	b.n	80100ac <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	68fa      	ldr	r2, [r7, #12]
 80100a0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	693a      	ldr	r2, [r7, #16]
 80100a6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	689b      	ldr	r3, [r3, #8]
 80100b0:	1c5a      	adds	r2, r3, #1
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80100b6:	6838      	ldr	r0, [r7, #0]
 80100b8:	f7ff fd70 	bl	800fb9c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80100bc:	6839      	ldr	r1, [r7, #0]
 80100be:	6938      	ldr	r0, [r7, #16]
 80100c0:	f7ff fea4 	bl	800fe0c <parse_value>
 80100c4:	4603      	mov	r3, r0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d042      	beq.n	8010150 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80100ca:	6838      	ldr	r0, [r7, #0]
 80100cc:	f7ff fd66 	bl	800fb9c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00d      	beq.n	80100f2 <parse_array+0x10e>
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	689a      	ldr	r2, [r3, #8]
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d207      	bcs.n	80100f2 <parse_array+0x10e>
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	689b      	ldr	r3, [r3, #8]
 80100ea:	4413      	add	r3, r2
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	2b2c      	cmp	r3, #44	; 0x2c
 80100f0:	d0c3      	beq.n	801007a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d02d      	beq.n	8010154 <parse_array+0x170>
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	689a      	ldr	r2, [r3, #8]
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	429a      	cmp	r2, r3
 8010102:	d227      	bcs.n	8010154 <parse_array+0x170>
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	689b      	ldr	r3, [r3, #8]
 801010c:	4413      	add	r3, r2
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	2b5d      	cmp	r3, #93	; 0x5d
 8010112:	d11f      	bne.n	8010154 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8010114:	e000      	b.n	8010118 <parse_array+0x134>
        goto success;
 8010116:	bf00      	nop
    input_buffer->depth--;
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	68db      	ldr	r3, [r3, #12]
 801011c:	1e5a      	subs	r2, r3, #1
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d002      	beq.n	801012e <parse_array+0x14a>
        head->prev = current_item;
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	693a      	ldr	r2, [r7, #16]
 801012c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2220      	movs	r2, #32
 8010132:	60da      	str	r2, [r3, #12]
    item->child = head;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	689b      	ldr	r3, [r3, #8]
 801013e:	1c5a      	adds	r2, r3, #1
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	609a      	str	r2, [r3, #8]

    return true;
 8010144:	2301      	movs	r3, #1
 8010146:	e00d      	b.n	8010164 <parse_array+0x180>
        goto fail;
 8010148:	bf00      	nop
 801014a:	e004      	b.n	8010156 <parse_array+0x172>
            goto fail; /* allocation failure */
 801014c:	bf00      	nop
 801014e:	e002      	b.n	8010156 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8010150:	bf00      	nop
 8010152:	e000      	b.n	8010156 <parse_array+0x172>
        goto fail; /* expected end of array */
 8010154:	bf00      	nop

fail:
    if (head != NULL)
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d002      	beq.n	8010162 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 801015c:	6978      	ldr	r0, [r7, #20]
 801015e:	f7ff f94d 	bl	800f3fc <cJSON_Delete>
    }

    return false;
 8010162:	2300      	movs	r3, #0
}
 8010164:	4618      	mov	r0, r3
 8010166:	3718      	adds	r7, #24
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b086      	sub	sp, #24
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8010176:	2300      	movs	r3, #0
 8010178:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 801017a:	2300      	movs	r3, #0
 801017c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010186:	d301      	bcc.n	801018c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8010188:	2300      	movs	r3, #0
 801018a:	e0ea      	b.n	8010362 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	1c5a      	adds	r2, r3, #1
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	f000 80d0 	beq.w	801033e <parse_object+0x1d2>
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	689a      	ldr	r2, [r3, #8]
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	f080 80c9 	bcs.w	801033e <parse_object+0x1d2>
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	4413      	add	r3, r2
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	2b7b      	cmp	r3, #123	; 0x7b
 80101ba:	f040 80c0 	bne.w	801033e <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	689b      	ldr	r3, [r3, #8]
 80101c2:	1c5a      	adds	r2, r3, #1
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80101c8:	6838      	ldr	r0, [r7, #0]
 80101ca:	f7ff fce7 	bl	800fb9c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00e      	beq.n	80101f2 <parse_object+0x86>
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	689a      	ldr	r2, [r3, #8]
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d208      	bcs.n	80101f2 <parse_object+0x86>
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	689b      	ldr	r3, [r3, #8]
 80101e8:	4413      	add	r3, r2
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	2b7d      	cmp	r3, #125	; 0x7d
 80101ee:	f000 808d 	beq.w	801030c <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d005      	beq.n	8010204 <parse_object+0x98>
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	689a      	ldr	r2, [r3, #8]
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	429a      	cmp	r2, r3
 8010202:	d305      	bcc.n	8010210 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	1e5a      	subs	r2, r3, #1
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	609a      	str	r2, [r3, #8]
        goto fail;
 801020e:	e0a1      	b.n	8010354 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	1e5a      	subs	r2, r3, #1
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	3310      	adds	r3, #16
 801021e:	4618      	mov	r0, r3
 8010220:	f7ff f8d6 	bl	800f3d0 <cJSON_New_Item>
 8010224:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2b00      	cmp	r3, #0
 801022a:	f000 808a 	beq.w	8010342 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d104      	bne.n	801023e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	617b      	str	r3, [r7, #20]
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	613b      	str	r3, [r7, #16]
 801023c:	e007      	b.n	801024e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	68fa      	ldr	r2, [r7, #12]
 8010242:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	693a      	ldr	r2, [r7, #16]
 8010248:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	689b      	ldr	r3, [r3, #8]
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8010258:	6838      	ldr	r0, [r7, #0]
 801025a:	f7ff fc9f 	bl	800fb9c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 801025e:	6839      	ldr	r1, [r7, #0]
 8010260:	6938      	ldr	r0, [r7, #16]
 8010262:	f7ff fb55 	bl	800f910 <parse_string>
 8010266:	4603      	mov	r3, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	d06c      	beq.n	8010346 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 801026c:	6838      	ldr	r0, [r7, #0]
 801026e:	f7ff fc95 	bl	800fb9c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	691a      	ldr	r2, [r3, #16]
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	2200      	movs	r2, #0
 801027e:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d061      	beq.n	801034a <parse_object+0x1de>
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	689a      	ldr	r2, [r3, #8]
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	429a      	cmp	r2, r3
 8010290:	d25b      	bcs.n	801034a <parse_object+0x1de>
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	689b      	ldr	r3, [r3, #8]
 801029a:	4413      	add	r3, r2
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	2b3a      	cmp	r3, #58	; 0x3a
 80102a0:	d153      	bne.n	801034a <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	689b      	ldr	r3, [r3, #8]
 80102a6:	1c5a      	adds	r2, r3, #1
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80102ac:	6838      	ldr	r0, [r7, #0]
 80102ae:	f7ff fc75 	bl	800fb9c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80102b2:	6839      	ldr	r1, [r7, #0]
 80102b4:	6938      	ldr	r0, [r7, #16]
 80102b6:	f7ff fda9 	bl	800fe0c <parse_value>
 80102ba:	4603      	mov	r3, r0
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d046      	beq.n	801034e <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80102c0:	6838      	ldr	r0, [r7, #0]
 80102c2:	f7ff fc6b 	bl	800fb9c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00d      	beq.n	80102e8 <parse_object+0x17c>
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	689a      	ldr	r2, [r3, #8]
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d207      	bcs.n	80102e8 <parse_object+0x17c>
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	681a      	ldr	r2, [r3, #0]
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	689b      	ldr	r3, [r3, #8]
 80102e0:	4413      	add	r3, r2
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	2b2c      	cmp	r3, #44	; 0x2c
 80102e6:	d098      	beq.n	801021a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d031      	beq.n	8010352 <parse_object+0x1e6>
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	689a      	ldr	r2, [r3, #8]
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d22b      	bcs.n	8010352 <parse_object+0x1e6>
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	689b      	ldr	r3, [r3, #8]
 8010302:	4413      	add	r3, r2
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	2b7d      	cmp	r3, #125	; 0x7d
 8010308:	d123      	bne.n	8010352 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 801030a:	e000      	b.n	801030e <parse_object+0x1a2>
        goto success; /* empty object */
 801030c:	bf00      	nop
    input_buffer->depth--;
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	1e5a      	subs	r2, r3, #1
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d002      	beq.n	8010324 <parse_object+0x1b8>
        head->prev = current_item;
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	693a      	ldr	r2, [r7, #16]
 8010322:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2240      	movs	r2, #64	; 0x40
 8010328:	60da      	str	r2, [r3, #12]
    item->child = head;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	697a      	ldr	r2, [r7, #20]
 801032e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	1c5a      	adds	r2, r3, #1
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	609a      	str	r2, [r3, #8]
    return true;
 801033a:	2301      	movs	r3, #1
 801033c:	e011      	b.n	8010362 <parse_object+0x1f6>
        goto fail; /* not an object */
 801033e:	bf00      	nop
 8010340:	e008      	b.n	8010354 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8010342:	bf00      	nop
 8010344:	e006      	b.n	8010354 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8010346:	bf00      	nop
 8010348:	e004      	b.n	8010354 <parse_object+0x1e8>
            goto fail; /* invalid object */
 801034a:	bf00      	nop
 801034c:	e002      	b.n	8010354 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 801034e:	bf00      	nop
 8010350:	e000      	b.n	8010354 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8010352:	bf00      	nop

fail:
    if (head != NULL)
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d002      	beq.n	8010360 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 801035a:	6978      	ldr	r0, [r7, #20]
 801035c:	f7ff f84e 	bl	800f3fc <cJSON_Delete>
    }

    return false;
 8010360:	2300      	movs	r3, #0
}
 8010362:	4618      	mov	r0, r3
 8010364:	3718      	adds	r7, #24
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}

0801036a <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 801036a:	b580      	push	{r7, lr}
 801036c:	b086      	sub	sp, #24
 801036e:	af00      	add	r7, sp, #0
 8010370:	60f8      	str	r0, [r7, #12]
 8010372:	60b9      	str	r1, [r7, #8]
 8010374:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8010376:	2300      	movs	r3, #0
 8010378:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d002      	beq.n	8010386 <get_object_item+0x1c>
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d101      	bne.n	801038a <get_object_item+0x20>
    {
        return NULL;
 8010386:	2300      	movs	r3, #0
 8010388:	e033      	b.n	80103f2 <get_object_item+0x88>
    }

    current_element = object->child;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	689b      	ldr	r3, [r3, #8]
 801038e:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d017      	beq.n	80103c6 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8010396:	e002      	b.n	801039e <get_object_item+0x34>
        {
            current_element = current_element->next;
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d01c      	beq.n	80103de <get_object_item+0x74>
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	6a1b      	ldr	r3, [r3, #32]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d018      	beq.n	80103de <get_object_item+0x74>
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	6a1b      	ldr	r3, [r3, #32]
 80103b0:	4619      	mov	r1, r3
 80103b2:	68b8      	ldr	r0, [r7, #8]
 80103b4:	f7ef ff14 	bl	80001e0 <strcmp>
 80103b8:	4603      	mov	r3, r0
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1ec      	bne.n	8010398 <get_object_item+0x2e>
 80103be:	e00e      	b.n	80103de <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d008      	beq.n	80103de <get_object_item+0x74>
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	6a1b      	ldr	r3, [r3, #32]
 80103d0:	4619      	mov	r1, r3
 80103d2:	68b8      	ldr	r0, [r7, #8]
 80103d4:	f7fe ff90 	bl	800f2f8 <case_insensitive_strcmp>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d1f0      	bne.n	80103c0 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d003      	beq.n	80103ec <get_object_item+0x82>
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	6a1b      	ldr	r3, [r3, #32]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d101      	bne.n	80103f0 <get_object_item+0x86>
        return NULL;
 80103ec:	2300      	movs	r3, #0
 80103ee:	e000      	b.n	80103f2 <get_object_item+0x88>
    }

    return current_element;
 80103f0:	697b      	ldr	r3, [r7, #20]
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3718      	adds	r7, #24
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b082      	sub	sp, #8
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
 8010402:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8010404:	2201      	movs	r2, #1
 8010406:	6839      	ldr	r1, [r7, #0]
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f7ff ffae 	bl	801036a <get_object_item>
 801040e:	4603      	mov	r3, r0
}
 8010410:	4618      	mov	r0, r3
 8010412:	3708      	adds	r7, #8
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <__errno>:
 8010418:	4b01      	ldr	r3, [pc, #4]	; (8010420 <__errno+0x8>)
 801041a:	6818      	ldr	r0, [r3, #0]
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop
 8010420:	20000160 	.word	0x20000160

08010424 <__libc_init_array>:
 8010424:	b570      	push	{r4, r5, r6, lr}
 8010426:	4d0d      	ldr	r5, [pc, #52]	; (801045c <__libc_init_array+0x38>)
 8010428:	4c0d      	ldr	r4, [pc, #52]	; (8010460 <__libc_init_array+0x3c>)
 801042a:	1b64      	subs	r4, r4, r5
 801042c:	10a4      	asrs	r4, r4, #2
 801042e:	2600      	movs	r6, #0
 8010430:	42a6      	cmp	r6, r4
 8010432:	d109      	bne.n	8010448 <__libc_init_array+0x24>
 8010434:	4d0b      	ldr	r5, [pc, #44]	; (8010464 <__libc_init_array+0x40>)
 8010436:	4c0c      	ldr	r4, [pc, #48]	; (8010468 <__libc_init_array+0x44>)
 8010438:	f003 fa98 	bl	801396c <_init>
 801043c:	1b64      	subs	r4, r4, r5
 801043e:	10a4      	asrs	r4, r4, #2
 8010440:	2600      	movs	r6, #0
 8010442:	42a6      	cmp	r6, r4
 8010444:	d105      	bne.n	8010452 <__libc_init_array+0x2e>
 8010446:	bd70      	pop	{r4, r5, r6, pc}
 8010448:	f855 3b04 	ldr.w	r3, [r5], #4
 801044c:	4798      	blx	r3
 801044e:	3601      	adds	r6, #1
 8010450:	e7ee      	b.n	8010430 <__libc_init_array+0xc>
 8010452:	f855 3b04 	ldr.w	r3, [r5], #4
 8010456:	4798      	blx	r3
 8010458:	3601      	adds	r6, #1
 801045a:	e7f2      	b.n	8010442 <__libc_init_array+0x1e>
 801045c:	0801578c 	.word	0x0801578c
 8010460:	0801578c 	.word	0x0801578c
 8010464:	0801578c 	.word	0x0801578c
 8010468:	08015790 	.word	0x08015790

0801046c <malloc>:
 801046c:	4b02      	ldr	r3, [pc, #8]	; (8010478 <malloc+0xc>)
 801046e:	4601      	mov	r1, r0
 8010470:	6818      	ldr	r0, [r3, #0]
 8010472:	f000 b871 	b.w	8010558 <_malloc_r>
 8010476:	bf00      	nop
 8010478:	20000160 	.word	0x20000160

0801047c <free>:
 801047c:	4b02      	ldr	r3, [pc, #8]	; (8010488 <free+0xc>)
 801047e:	4601      	mov	r1, r0
 8010480:	6818      	ldr	r0, [r3, #0]
 8010482:	f000 b819 	b.w	80104b8 <_free_r>
 8010486:	bf00      	nop
 8010488:	20000160 	.word	0x20000160

0801048c <memcpy>:
 801048c:	440a      	add	r2, r1
 801048e:	4291      	cmp	r1, r2
 8010490:	f100 33ff 	add.w	r3, r0, #4294967295
 8010494:	d100      	bne.n	8010498 <memcpy+0xc>
 8010496:	4770      	bx	lr
 8010498:	b510      	push	{r4, lr}
 801049a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801049e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104a2:	4291      	cmp	r1, r2
 80104a4:	d1f9      	bne.n	801049a <memcpy+0xe>
 80104a6:	bd10      	pop	{r4, pc}

080104a8 <memset>:
 80104a8:	4402      	add	r2, r0
 80104aa:	4603      	mov	r3, r0
 80104ac:	4293      	cmp	r3, r2
 80104ae:	d100      	bne.n	80104b2 <memset+0xa>
 80104b0:	4770      	bx	lr
 80104b2:	f803 1b01 	strb.w	r1, [r3], #1
 80104b6:	e7f9      	b.n	80104ac <memset+0x4>

080104b8 <_free_r>:
 80104b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104ba:	2900      	cmp	r1, #0
 80104bc:	d048      	beq.n	8010550 <_free_r+0x98>
 80104be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104c2:	9001      	str	r0, [sp, #4]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f1a1 0404 	sub.w	r4, r1, #4
 80104ca:	bfb8      	it	lt
 80104cc:	18e4      	addlt	r4, r4, r3
 80104ce:	f002 f81d 	bl	801250c <__malloc_lock>
 80104d2:	4a20      	ldr	r2, [pc, #128]	; (8010554 <_free_r+0x9c>)
 80104d4:	9801      	ldr	r0, [sp, #4]
 80104d6:	6813      	ldr	r3, [r2, #0]
 80104d8:	4615      	mov	r5, r2
 80104da:	b933      	cbnz	r3, 80104ea <_free_r+0x32>
 80104dc:	6063      	str	r3, [r4, #4]
 80104de:	6014      	str	r4, [r2, #0]
 80104e0:	b003      	add	sp, #12
 80104e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104e6:	f002 b817 	b.w	8012518 <__malloc_unlock>
 80104ea:	42a3      	cmp	r3, r4
 80104ec:	d90b      	bls.n	8010506 <_free_r+0x4e>
 80104ee:	6821      	ldr	r1, [r4, #0]
 80104f0:	1862      	adds	r2, r4, r1
 80104f2:	4293      	cmp	r3, r2
 80104f4:	bf04      	itt	eq
 80104f6:	681a      	ldreq	r2, [r3, #0]
 80104f8:	685b      	ldreq	r3, [r3, #4]
 80104fa:	6063      	str	r3, [r4, #4]
 80104fc:	bf04      	itt	eq
 80104fe:	1852      	addeq	r2, r2, r1
 8010500:	6022      	streq	r2, [r4, #0]
 8010502:	602c      	str	r4, [r5, #0]
 8010504:	e7ec      	b.n	80104e0 <_free_r+0x28>
 8010506:	461a      	mov	r2, r3
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	b10b      	cbz	r3, 8010510 <_free_r+0x58>
 801050c:	42a3      	cmp	r3, r4
 801050e:	d9fa      	bls.n	8010506 <_free_r+0x4e>
 8010510:	6811      	ldr	r1, [r2, #0]
 8010512:	1855      	adds	r5, r2, r1
 8010514:	42a5      	cmp	r5, r4
 8010516:	d10b      	bne.n	8010530 <_free_r+0x78>
 8010518:	6824      	ldr	r4, [r4, #0]
 801051a:	4421      	add	r1, r4
 801051c:	1854      	adds	r4, r2, r1
 801051e:	42a3      	cmp	r3, r4
 8010520:	6011      	str	r1, [r2, #0]
 8010522:	d1dd      	bne.n	80104e0 <_free_r+0x28>
 8010524:	681c      	ldr	r4, [r3, #0]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	6053      	str	r3, [r2, #4]
 801052a:	4421      	add	r1, r4
 801052c:	6011      	str	r1, [r2, #0]
 801052e:	e7d7      	b.n	80104e0 <_free_r+0x28>
 8010530:	d902      	bls.n	8010538 <_free_r+0x80>
 8010532:	230c      	movs	r3, #12
 8010534:	6003      	str	r3, [r0, #0]
 8010536:	e7d3      	b.n	80104e0 <_free_r+0x28>
 8010538:	6825      	ldr	r5, [r4, #0]
 801053a:	1961      	adds	r1, r4, r5
 801053c:	428b      	cmp	r3, r1
 801053e:	bf04      	itt	eq
 8010540:	6819      	ldreq	r1, [r3, #0]
 8010542:	685b      	ldreq	r3, [r3, #4]
 8010544:	6063      	str	r3, [r4, #4]
 8010546:	bf04      	itt	eq
 8010548:	1949      	addeq	r1, r1, r5
 801054a:	6021      	streq	r1, [r4, #0]
 801054c:	6054      	str	r4, [r2, #4]
 801054e:	e7c7      	b.n	80104e0 <_free_r+0x28>
 8010550:	b003      	add	sp, #12
 8010552:	bd30      	pop	{r4, r5, pc}
 8010554:	20002578 	.word	0x20002578

08010558 <_malloc_r>:
 8010558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055a:	1ccd      	adds	r5, r1, #3
 801055c:	f025 0503 	bic.w	r5, r5, #3
 8010560:	3508      	adds	r5, #8
 8010562:	2d0c      	cmp	r5, #12
 8010564:	bf38      	it	cc
 8010566:	250c      	movcc	r5, #12
 8010568:	2d00      	cmp	r5, #0
 801056a:	4606      	mov	r6, r0
 801056c:	db01      	blt.n	8010572 <_malloc_r+0x1a>
 801056e:	42a9      	cmp	r1, r5
 8010570:	d903      	bls.n	801057a <_malloc_r+0x22>
 8010572:	230c      	movs	r3, #12
 8010574:	6033      	str	r3, [r6, #0]
 8010576:	2000      	movs	r0, #0
 8010578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801057a:	f001 ffc7 	bl	801250c <__malloc_lock>
 801057e:	4921      	ldr	r1, [pc, #132]	; (8010604 <_malloc_r+0xac>)
 8010580:	680a      	ldr	r2, [r1, #0]
 8010582:	4614      	mov	r4, r2
 8010584:	b99c      	cbnz	r4, 80105ae <_malloc_r+0x56>
 8010586:	4f20      	ldr	r7, [pc, #128]	; (8010608 <_malloc_r+0xb0>)
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	b923      	cbnz	r3, 8010596 <_malloc_r+0x3e>
 801058c:	4621      	mov	r1, r4
 801058e:	4630      	mov	r0, r6
 8010590:	f000 fa5c 	bl	8010a4c <_sbrk_r>
 8010594:	6038      	str	r0, [r7, #0]
 8010596:	4629      	mov	r1, r5
 8010598:	4630      	mov	r0, r6
 801059a:	f000 fa57 	bl	8010a4c <_sbrk_r>
 801059e:	1c43      	adds	r3, r0, #1
 80105a0:	d123      	bne.n	80105ea <_malloc_r+0x92>
 80105a2:	230c      	movs	r3, #12
 80105a4:	6033      	str	r3, [r6, #0]
 80105a6:	4630      	mov	r0, r6
 80105a8:	f001 ffb6 	bl	8012518 <__malloc_unlock>
 80105ac:	e7e3      	b.n	8010576 <_malloc_r+0x1e>
 80105ae:	6823      	ldr	r3, [r4, #0]
 80105b0:	1b5b      	subs	r3, r3, r5
 80105b2:	d417      	bmi.n	80105e4 <_malloc_r+0x8c>
 80105b4:	2b0b      	cmp	r3, #11
 80105b6:	d903      	bls.n	80105c0 <_malloc_r+0x68>
 80105b8:	6023      	str	r3, [r4, #0]
 80105ba:	441c      	add	r4, r3
 80105bc:	6025      	str	r5, [r4, #0]
 80105be:	e004      	b.n	80105ca <_malloc_r+0x72>
 80105c0:	6863      	ldr	r3, [r4, #4]
 80105c2:	42a2      	cmp	r2, r4
 80105c4:	bf0c      	ite	eq
 80105c6:	600b      	streq	r3, [r1, #0]
 80105c8:	6053      	strne	r3, [r2, #4]
 80105ca:	4630      	mov	r0, r6
 80105cc:	f001 ffa4 	bl	8012518 <__malloc_unlock>
 80105d0:	f104 000b 	add.w	r0, r4, #11
 80105d4:	1d23      	adds	r3, r4, #4
 80105d6:	f020 0007 	bic.w	r0, r0, #7
 80105da:	1ac2      	subs	r2, r0, r3
 80105dc:	d0cc      	beq.n	8010578 <_malloc_r+0x20>
 80105de:	1a1b      	subs	r3, r3, r0
 80105e0:	50a3      	str	r3, [r4, r2]
 80105e2:	e7c9      	b.n	8010578 <_malloc_r+0x20>
 80105e4:	4622      	mov	r2, r4
 80105e6:	6864      	ldr	r4, [r4, #4]
 80105e8:	e7cc      	b.n	8010584 <_malloc_r+0x2c>
 80105ea:	1cc4      	adds	r4, r0, #3
 80105ec:	f024 0403 	bic.w	r4, r4, #3
 80105f0:	42a0      	cmp	r0, r4
 80105f2:	d0e3      	beq.n	80105bc <_malloc_r+0x64>
 80105f4:	1a21      	subs	r1, r4, r0
 80105f6:	4630      	mov	r0, r6
 80105f8:	f000 fa28 	bl	8010a4c <_sbrk_r>
 80105fc:	3001      	adds	r0, #1
 80105fe:	d1dd      	bne.n	80105bc <_malloc_r+0x64>
 8010600:	e7cf      	b.n	80105a2 <_malloc_r+0x4a>
 8010602:	bf00      	nop
 8010604:	20002578 	.word	0x20002578
 8010608:	2000257c 	.word	0x2000257c

0801060c <iprintf>:
 801060c:	b40f      	push	{r0, r1, r2, r3}
 801060e:	4b0a      	ldr	r3, [pc, #40]	; (8010638 <iprintf+0x2c>)
 8010610:	b513      	push	{r0, r1, r4, lr}
 8010612:	681c      	ldr	r4, [r3, #0]
 8010614:	b124      	cbz	r4, 8010620 <iprintf+0x14>
 8010616:	69a3      	ldr	r3, [r4, #24]
 8010618:	b913      	cbnz	r3, 8010620 <iprintf+0x14>
 801061a:	4620      	mov	r0, r4
 801061c:	f001 fade 	bl	8011bdc <__sinit>
 8010620:	ab05      	add	r3, sp, #20
 8010622:	9a04      	ldr	r2, [sp, #16]
 8010624:	68a1      	ldr	r1, [r4, #8]
 8010626:	9301      	str	r3, [sp, #4]
 8010628:	4620      	mov	r0, r4
 801062a:	f002 fdf1 	bl	8013210 <_vfiprintf_r>
 801062e:	b002      	add	sp, #8
 8010630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010634:	b004      	add	sp, #16
 8010636:	4770      	bx	lr
 8010638:	20000160 	.word	0x20000160

0801063c <_puts_r>:
 801063c:	b570      	push	{r4, r5, r6, lr}
 801063e:	460e      	mov	r6, r1
 8010640:	4605      	mov	r5, r0
 8010642:	b118      	cbz	r0, 801064c <_puts_r+0x10>
 8010644:	6983      	ldr	r3, [r0, #24]
 8010646:	b90b      	cbnz	r3, 801064c <_puts_r+0x10>
 8010648:	f001 fac8 	bl	8011bdc <__sinit>
 801064c:	69ab      	ldr	r3, [r5, #24]
 801064e:	68ac      	ldr	r4, [r5, #8]
 8010650:	b913      	cbnz	r3, 8010658 <_puts_r+0x1c>
 8010652:	4628      	mov	r0, r5
 8010654:	f001 fac2 	bl	8011bdc <__sinit>
 8010658:	4b2c      	ldr	r3, [pc, #176]	; (801070c <_puts_r+0xd0>)
 801065a:	429c      	cmp	r4, r3
 801065c:	d120      	bne.n	80106a0 <_puts_r+0x64>
 801065e:	686c      	ldr	r4, [r5, #4]
 8010660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010662:	07db      	lsls	r3, r3, #31
 8010664:	d405      	bmi.n	8010672 <_puts_r+0x36>
 8010666:	89a3      	ldrh	r3, [r4, #12]
 8010668:	0598      	lsls	r0, r3, #22
 801066a:	d402      	bmi.n	8010672 <_puts_r+0x36>
 801066c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801066e:	f001 fec2 	bl	80123f6 <__retarget_lock_acquire_recursive>
 8010672:	89a3      	ldrh	r3, [r4, #12]
 8010674:	0719      	lsls	r1, r3, #28
 8010676:	d51d      	bpl.n	80106b4 <_puts_r+0x78>
 8010678:	6923      	ldr	r3, [r4, #16]
 801067a:	b1db      	cbz	r3, 80106b4 <_puts_r+0x78>
 801067c:	3e01      	subs	r6, #1
 801067e:	68a3      	ldr	r3, [r4, #8]
 8010680:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010684:	3b01      	subs	r3, #1
 8010686:	60a3      	str	r3, [r4, #8]
 8010688:	bb39      	cbnz	r1, 80106da <_puts_r+0x9e>
 801068a:	2b00      	cmp	r3, #0
 801068c:	da38      	bge.n	8010700 <_puts_r+0xc4>
 801068e:	4622      	mov	r2, r4
 8010690:	210a      	movs	r1, #10
 8010692:	4628      	mov	r0, r5
 8010694:	f001 f8a6 	bl	80117e4 <__swbuf_r>
 8010698:	3001      	adds	r0, #1
 801069a:	d011      	beq.n	80106c0 <_puts_r+0x84>
 801069c:	250a      	movs	r5, #10
 801069e:	e011      	b.n	80106c4 <_puts_r+0x88>
 80106a0:	4b1b      	ldr	r3, [pc, #108]	; (8010710 <_puts_r+0xd4>)
 80106a2:	429c      	cmp	r4, r3
 80106a4:	d101      	bne.n	80106aa <_puts_r+0x6e>
 80106a6:	68ac      	ldr	r4, [r5, #8]
 80106a8:	e7da      	b.n	8010660 <_puts_r+0x24>
 80106aa:	4b1a      	ldr	r3, [pc, #104]	; (8010714 <_puts_r+0xd8>)
 80106ac:	429c      	cmp	r4, r3
 80106ae:	bf08      	it	eq
 80106b0:	68ec      	ldreq	r4, [r5, #12]
 80106b2:	e7d5      	b.n	8010660 <_puts_r+0x24>
 80106b4:	4621      	mov	r1, r4
 80106b6:	4628      	mov	r0, r5
 80106b8:	f001 f8f8 	bl	80118ac <__swsetup_r>
 80106bc:	2800      	cmp	r0, #0
 80106be:	d0dd      	beq.n	801067c <_puts_r+0x40>
 80106c0:	f04f 35ff 	mov.w	r5, #4294967295
 80106c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106c6:	07da      	lsls	r2, r3, #31
 80106c8:	d405      	bmi.n	80106d6 <_puts_r+0x9a>
 80106ca:	89a3      	ldrh	r3, [r4, #12]
 80106cc:	059b      	lsls	r3, r3, #22
 80106ce:	d402      	bmi.n	80106d6 <_puts_r+0x9a>
 80106d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106d2:	f001 fe91 	bl	80123f8 <__retarget_lock_release_recursive>
 80106d6:	4628      	mov	r0, r5
 80106d8:	bd70      	pop	{r4, r5, r6, pc}
 80106da:	2b00      	cmp	r3, #0
 80106dc:	da04      	bge.n	80106e8 <_puts_r+0xac>
 80106de:	69a2      	ldr	r2, [r4, #24]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	dc06      	bgt.n	80106f2 <_puts_r+0xb6>
 80106e4:	290a      	cmp	r1, #10
 80106e6:	d004      	beq.n	80106f2 <_puts_r+0xb6>
 80106e8:	6823      	ldr	r3, [r4, #0]
 80106ea:	1c5a      	adds	r2, r3, #1
 80106ec:	6022      	str	r2, [r4, #0]
 80106ee:	7019      	strb	r1, [r3, #0]
 80106f0:	e7c5      	b.n	801067e <_puts_r+0x42>
 80106f2:	4622      	mov	r2, r4
 80106f4:	4628      	mov	r0, r5
 80106f6:	f001 f875 	bl	80117e4 <__swbuf_r>
 80106fa:	3001      	adds	r0, #1
 80106fc:	d1bf      	bne.n	801067e <_puts_r+0x42>
 80106fe:	e7df      	b.n	80106c0 <_puts_r+0x84>
 8010700:	6823      	ldr	r3, [r4, #0]
 8010702:	250a      	movs	r5, #10
 8010704:	1c5a      	adds	r2, r3, #1
 8010706:	6022      	str	r2, [r4, #0]
 8010708:	701d      	strb	r5, [r3, #0]
 801070a:	e7db      	b.n	80106c4 <_puts_r+0x88>
 801070c:	080154d0 	.word	0x080154d0
 8010710:	080154f0 	.word	0x080154f0
 8010714:	080154b0 	.word	0x080154b0

08010718 <puts>:
 8010718:	4b02      	ldr	r3, [pc, #8]	; (8010724 <puts+0xc>)
 801071a:	4601      	mov	r1, r0
 801071c:	6818      	ldr	r0, [r3, #0]
 801071e:	f7ff bf8d 	b.w	801063c <_puts_r>
 8010722:	bf00      	nop
 8010724:	20000160 	.word	0x20000160

08010728 <swapfunc>:
 8010728:	2b02      	cmp	r3, #2
 801072a:	b510      	push	{r4, lr}
 801072c:	d00a      	beq.n	8010744 <swapfunc+0x1c>
 801072e:	0892      	lsrs	r2, r2, #2
 8010730:	3a01      	subs	r2, #1
 8010732:	6803      	ldr	r3, [r0, #0]
 8010734:	680c      	ldr	r4, [r1, #0]
 8010736:	f840 4b04 	str.w	r4, [r0], #4
 801073a:	2a00      	cmp	r2, #0
 801073c:	f841 3b04 	str.w	r3, [r1], #4
 8010740:	dcf6      	bgt.n	8010730 <swapfunc+0x8>
 8010742:	bd10      	pop	{r4, pc}
 8010744:	4402      	add	r2, r0
 8010746:	780c      	ldrb	r4, [r1, #0]
 8010748:	7803      	ldrb	r3, [r0, #0]
 801074a:	f800 4b01 	strb.w	r4, [r0], #1
 801074e:	f801 3b01 	strb.w	r3, [r1], #1
 8010752:	1a13      	subs	r3, r2, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	dcf6      	bgt.n	8010746 <swapfunc+0x1e>
 8010758:	e7f3      	b.n	8010742 <swapfunc+0x1a>

0801075a <med3.isra.0>:
 801075a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801075c:	460f      	mov	r7, r1
 801075e:	4614      	mov	r4, r2
 8010760:	4606      	mov	r6, r0
 8010762:	461d      	mov	r5, r3
 8010764:	4798      	blx	r3
 8010766:	2800      	cmp	r0, #0
 8010768:	4621      	mov	r1, r4
 801076a:	4638      	mov	r0, r7
 801076c:	da0c      	bge.n	8010788 <med3.isra.0+0x2e>
 801076e:	47a8      	blx	r5
 8010770:	2800      	cmp	r0, #0
 8010772:	da02      	bge.n	801077a <med3.isra.0+0x20>
 8010774:	463c      	mov	r4, r7
 8010776:	4620      	mov	r0, r4
 8010778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801077a:	4621      	mov	r1, r4
 801077c:	4630      	mov	r0, r6
 801077e:	47a8      	blx	r5
 8010780:	2800      	cmp	r0, #0
 8010782:	dbf8      	blt.n	8010776 <med3.isra.0+0x1c>
 8010784:	4634      	mov	r4, r6
 8010786:	e7f6      	b.n	8010776 <med3.isra.0+0x1c>
 8010788:	47a8      	blx	r5
 801078a:	2800      	cmp	r0, #0
 801078c:	dcf2      	bgt.n	8010774 <med3.isra.0+0x1a>
 801078e:	4621      	mov	r1, r4
 8010790:	4630      	mov	r0, r6
 8010792:	47a8      	blx	r5
 8010794:	2800      	cmp	r0, #0
 8010796:	daee      	bge.n	8010776 <med3.isra.0+0x1c>
 8010798:	e7f4      	b.n	8010784 <med3.isra.0+0x2a>

0801079a <qsort>:
 801079a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801079e:	469a      	mov	sl, r3
 80107a0:	ea40 0302 	orr.w	r3, r0, r2
 80107a4:	079b      	lsls	r3, r3, #30
 80107a6:	b097      	sub	sp, #92	; 0x5c
 80107a8:	4606      	mov	r6, r0
 80107aa:	4614      	mov	r4, r2
 80107ac:	d11a      	bne.n	80107e4 <qsort+0x4a>
 80107ae:	f1b2 0804 	subs.w	r8, r2, #4
 80107b2:	bf18      	it	ne
 80107b4:	f04f 0801 	movne.w	r8, #1
 80107b8:	2300      	movs	r3, #0
 80107ba:	9302      	str	r3, [sp, #8]
 80107bc:	1933      	adds	r3, r6, r4
 80107be:	fb04 f701 	mul.w	r7, r4, r1
 80107c2:	9301      	str	r3, [sp, #4]
 80107c4:	2906      	cmp	r1, #6
 80107c6:	eb06 0307 	add.w	r3, r6, r7
 80107ca:	9303      	str	r3, [sp, #12]
 80107cc:	d82a      	bhi.n	8010824 <qsort+0x8a>
 80107ce:	9b01      	ldr	r3, [sp, #4]
 80107d0:	9a03      	ldr	r2, [sp, #12]
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d310      	bcc.n	80107f8 <qsort+0x5e>
 80107d6:	9b02      	ldr	r3, [sp, #8]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f040 811f 	bne.w	8010a1c <qsort+0x282>
 80107de:	b017      	add	sp, #92	; 0x5c
 80107e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107e4:	f04f 0802 	mov.w	r8, #2
 80107e8:	e7e6      	b.n	80107b8 <qsort+0x1e>
 80107ea:	4643      	mov	r3, r8
 80107ec:	4622      	mov	r2, r4
 80107ee:	4639      	mov	r1, r7
 80107f0:	4628      	mov	r0, r5
 80107f2:	f7ff ff99 	bl	8010728 <swapfunc>
 80107f6:	e00e      	b.n	8010816 <qsort+0x7c>
 80107f8:	9d01      	ldr	r5, [sp, #4]
 80107fa:	e00d      	b.n	8010818 <qsort+0x7e>
 80107fc:	1b2f      	subs	r7, r5, r4
 80107fe:	4629      	mov	r1, r5
 8010800:	4638      	mov	r0, r7
 8010802:	47d0      	blx	sl
 8010804:	2800      	cmp	r0, #0
 8010806:	dd09      	ble.n	801081c <qsort+0x82>
 8010808:	f1b8 0f00 	cmp.w	r8, #0
 801080c:	d1ed      	bne.n	80107ea <qsort+0x50>
 801080e:	682b      	ldr	r3, [r5, #0]
 8010810:	683a      	ldr	r2, [r7, #0]
 8010812:	602a      	str	r2, [r5, #0]
 8010814:	603b      	str	r3, [r7, #0]
 8010816:	463d      	mov	r5, r7
 8010818:	42ae      	cmp	r6, r5
 801081a:	d3ef      	bcc.n	80107fc <qsort+0x62>
 801081c:	9b01      	ldr	r3, [sp, #4]
 801081e:	4423      	add	r3, r4
 8010820:	9301      	str	r3, [sp, #4]
 8010822:	e7d4      	b.n	80107ce <qsort+0x34>
 8010824:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8010828:	1b3f      	subs	r7, r7, r4
 801082a:	2907      	cmp	r1, #7
 801082c:	fb04 6909 	mla	r9, r4, r9, r6
 8010830:	4437      	add	r7, r6
 8010832:	d022      	beq.n	801087a <qsort+0xe0>
 8010834:	2928      	cmp	r1, #40	; 0x28
 8010836:	d945      	bls.n	80108c4 <qsort+0x12a>
 8010838:	08c9      	lsrs	r1, r1, #3
 801083a:	fb04 f501 	mul.w	r5, r4, r1
 801083e:	4653      	mov	r3, sl
 8010840:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8010844:	1971      	adds	r1, r6, r5
 8010846:	4630      	mov	r0, r6
 8010848:	f7ff ff87 	bl	801075a <med3.isra.0>
 801084c:	4649      	mov	r1, r9
 801084e:	eb09 0205 	add.w	r2, r9, r5
 8010852:	4653      	mov	r3, sl
 8010854:	4683      	mov	fp, r0
 8010856:	1b48      	subs	r0, r1, r5
 8010858:	f7ff ff7f 	bl	801075a <med3.isra.0>
 801085c:	463a      	mov	r2, r7
 801085e:	4681      	mov	r9, r0
 8010860:	4653      	mov	r3, sl
 8010862:	1b79      	subs	r1, r7, r5
 8010864:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8010868:	f7ff ff77 	bl	801075a <med3.isra.0>
 801086c:	4602      	mov	r2, r0
 801086e:	4649      	mov	r1, r9
 8010870:	4653      	mov	r3, sl
 8010872:	4658      	mov	r0, fp
 8010874:	f7ff ff71 	bl	801075a <med3.isra.0>
 8010878:	4681      	mov	r9, r0
 801087a:	f1b8 0f00 	cmp.w	r8, #0
 801087e:	d124      	bne.n	80108ca <qsort+0x130>
 8010880:	6833      	ldr	r3, [r6, #0]
 8010882:	f8d9 2000 	ldr.w	r2, [r9]
 8010886:	6032      	str	r2, [r6, #0]
 8010888:	f8c9 3000 	str.w	r3, [r9]
 801088c:	eb06 0b04 	add.w	fp, r6, r4
 8010890:	46b9      	mov	r9, r7
 8010892:	465d      	mov	r5, fp
 8010894:	2300      	movs	r3, #0
 8010896:	45bb      	cmp	fp, r7
 8010898:	d835      	bhi.n	8010906 <qsort+0x16c>
 801089a:	4631      	mov	r1, r6
 801089c:	4658      	mov	r0, fp
 801089e:	9304      	str	r3, [sp, #16]
 80108a0:	47d0      	blx	sl
 80108a2:	2800      	cmp	r0, #0
 80108a4:	9b04      	ldr	r3, [sp, #16]
 80108a6:	dc3e      	bgt.n	8010926 <qsort+0x18c>
 80108a8:	d10a      	bne.n	80108c0 <qsort+0x126>
 80108aa:	f1b8 0f00 	cmp.w	r8, #0
 80108ae:	d113      	bne.n	80108d8 <qsort+0x13e>
 80108b0:	682b      	ldr	r3, [r5, #0]
 80108b2:	f8db 2000 	ldr.w	r2, [fp]
 80108b6:	602a      	str	r2, [r5, #0]
 80108b8:	f8cb 3000 	str.w	r3, [fp]
 80108bc:	4425      	add	r5, r4
 80108be:	2301      	movs	r3, #1
 80108c0:	44a3      	add	fp, r4
 80108c2:	e7e8      	b.n	8010896 <qsort+0xfc>
 80108c4:	463a      	mov	r2, r7
 80108c6:	46b3      	mov	fp, r6
 80108c8:	e7d1      	b.n	801086e <qsort+0xd4>
 80108ca:	4643      	mov	r3, r8
 80108cc:	4622      	mov	r2, r4
 80108ce:	4649      	mov	r1, r9
 80108d0:	4630      	mov	r0, r6
 80108d2:	f7ff ff29 	bl	8010728 <swapfunc>
 80108d6:	e7d9      	b.n	801088c <qsort+0xf2>
 80108d8:	4643      	mov	r3, r8
 80108da:	4622      	mov	r2, r4
 80108dc:	4659      	mov	r1, fp
 80108de:	4628      	mov	r0, r5
 80108e0:	f7ff ff22 	bl	8010728 <swapfunc>
 80108e4:	e7ea      	b.n	80108bc <qsort+0x122>
 80108e6:	d10b      	bne.n	8010900 <qsort+0x166>
 80108e8:	f1b8 0f00 	cmp.w	r8, #0
 80108ec:	d114      	bne.n	8010918 <qsort+0x17e>
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	f8d9 2000 	ldr.w	r2, [r9]
 80108f4:	603a      	str	r2, [r7, #0]
 80108f6:	f8c9 3000 	str.w	r3, [r9]
 80108fa:	eba9 0904 	sub.w	r9, r9, r4
 80108fe:	2301      	movs	r3, #1
 8010900:	9f04      	ldr	r7, [sp, #16]
 8010902:	45bb      	cmp	fp, r7
 8010904:	d90f      	bls.n	8010926 <qsort+0x18c>
 8010906:	2b00      	cmp	r3, #0
 8010908:	d143      	bne.n	8010992 <qsort+0x1f8>
 801090a:	9b01      	ldr	r3, [sp, #4]
 801090c:	9a03      	ldr	r2, [sp, #12]
 801090e:	4293      	cmp	r3, r2
 8010910:	f4bf af61 	bcs.w	80107d6 <qsort+0x3c>
 8010914:	9d01      	ldr	r5, [sp, #4]
 8010916:	e036      	b.n	8010986 <qsort+0x1ec>
 8010918:	4643      	mov	r3, r8
 801091a:	4622      	mov	r2, r4
 801091c:	4649      	mov	r1, r9
 801091e:	4638      	mov	r0, r7
 8010920:	f7ff ff02 	bl	8010728 <swapfunc>
 8010924:	e7e9      	b.n	80108fa <qsort+0x160>
 8010926:	4631      	mov	r1, r6
 8010928:	4638      	mov	r0, r7
 801092a:	9305      	str	r3, [sp, #20]
 801092c:	47d0      	blx	sl
 801092e:	1b3b      	subs	r3, r7, r4
 8010930:	2800      	cmp	r0, #0
 8010932:	9304      	str	r3, [sp, #16]
 8010934:	9b05      	ldr	r3, [sp, #20]
 8010936:	dad6      	bge.n	80108e6 <qsort+0x14c>
 8010938:	f1b8 0f00 	cmp.w	r8, #0
 801093c:	d006      	beq.n	801094c <qsort+0x1b2>
 801093e:	4643      	mov	r3, r8
 8010940:	4622      	mov	r2, r4
 8010942:	4639      	mov	r1, r7
 8010944:	4658      	mov	r0, fp
 8010946:	f7ff feef 	bl	8010728 <swapfunc>
 801094a:	e005      	b.n	8010958 <qsort+0x1be>
 801094c:	f8db 3000 	ldr.w	r3, [fp]
 8010950:	683a      	ldr	r2, [r7, #0]
 8010952:	f8cb 2000 	str.w	r2, [fp]
 8010956:	603b      	str	r3, [r7, #0]
 8010958:	9f04      	ldr	r7, [sp, #16]
 801095a:	e7b0      	b.n	80108be <qsort+0x124>
 801095c:	4643      	mov	r3, r8
 801095e:	4622      	mov	r2, r4
 8010960:	4639      	mov	r1, r7
 8010962:	4628      	mov	r0, r5
 8010964:	f7ff fee0 	bl	8010728 <swapfunc>
 8010968:	e00c      	b.n	8010984 <qsort+0x1ea>
 801096a:	1b2f      	subs	r7, r5, r4
 801096c:	4629      	mov	r1, r5
 801096e:	4638      	mov	r0, r7
 8010970:	47d0      	blx	sl
 8010972:	2800      	cmp	r0, #0
 8010974:	dd09      	ble.n	801098a <qsort+0x1f0>
 8010976:	f1b8 0f00 	cmp.w	r8, #0
 801097a:	d1ef      	bne.n	801095c <qsort+0x1c2>
 801097c:	682b      	ldr	r3, [r5, #0]
 801097e:	683a      	ldr	r2, [r7, #0]
 8010980:	602a      	str	r2, [r5, #0]
 8010982:	603b      	str	r3, [r7, #0]
 8010984:	463d      	mov	r5, r7
 8010986:	42ae      	cmp	r6, r5
 8010988:	d3ef      	bcc.n	801096a <qsort+0x1d0>
 801098a:	9b01      	ldr	r3, [sp, #4]
 801098c:	4423      	add	r3, r4
 801098e:	9301      	str	r3, [sp, #4]
 8010990:	e7bb      	b.n	801090a <qsort+0x170>
 8010992:	ebab 0305 	sub.w	r3, fp, r5
 8010996:	1baa      	subs	r2, r5, r6
 8010998:	429a      	cmp	r2, r3
 801099a:	bfa8      	it	ge
 801099c:	461a      	movge	r2, r3
 801099e:	9301      	str	r3, [sp, #4]
 80109a0:	b12a      	cbz	r2, 80109ae <qsort+0x214>
 80109a2:	4643      	mov	r3, r8
 80109a4:	ebab 0102 	sub.w	r1, fp, r2
 80109a8:	4630      	mov	r0, r6
 80109aa:	f7ff febd 	bl	8010728 <swapfunc>
 80109ae:	9b03      	ldr	r3, [sp, #12]
 80109b0:	eba3 0209 	sub.w	r2, r3, r9
 80109b4:	eba9 0707 	sub.w	r7, r9, r7
 80109b8:	1b12      	subs	r2, r2, r4
 80109ba:	42ba      	cmp	r2, r7
 80109bc:	bf28      	it	cs
 80109be:	463a      	movcs	r2, r7
 80109c0:	b12a      	cbz	r2, 80109ce <qsort+0x234>
 80109c2:	9903      	ldr	r1, [sp, #12]
 80109c4:	4643      	mov	r3, r8
 80109c6:	1a89      	subs	r1, r1, r2
 80109c8:	4658      	mov	r0, fp
 80109ca:	f7ff fead 	bl	8010728 <swapfunc>
 80109ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80109d2:	9b03      	ldr	r3, [sp, #12]
 80109d4:	454f      	cmp	r7, r9
 80109d6:	eba3 0007 	sub.w	r0, r3, r7
 80109da:	d904      	bls.n	80109e6 <qsort+0x24c>
 80109dc:	4633      	mov	r3, r6
 80109de:	46b9      	mov	r9, r7
 80109e0:	9f01      	ldr	r7, [sp, #4]
 80109e2:	4606      	mov	r6, r0
 80109e4:	4618      	mov	r0, r3
 80109e6:	42a7      	cmp	r7, r4
 80109e8:	d921      	bls.n	8010a2e <qsort+0x294>
 80109ea:	fbb7 f1f4 	udiv	r1, r7, r4
 80109ee:	9b02      	ldr	r3, [sp, #8]
 80109f0:	2b07      	cmp	r3, #7
 80109f2:	d80d      	bhi.n	8010a10 <qsort+0x276>
 80109f4:	fbb9 f7f4 	udiv	r7, r9, r4
 80109f8:	aa16      	add	r2, sp, #88	; 0x58
 80109fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80109fe:	f843 6c40 	str.w	r6, [r3, #-64]
 8010a02:	f843 7c3c 	str.w	r7, [r3, #-60]
 8010a06:	9b02      	ldr	r3, [sp, #8]
 8010a08:	3301      	adds	r3, #1
 8010a0a:	9302      	str	r3, [sp, #8]
 8010a0c:	4606      	mov	r6, r0
 8010a0e:	e6d5      	b.n	80107bc <qsort+0x22>
 8010a10:	4653      	mov	r3, sl
 8010a12:	4622      	mov	r2, r4
 8010a14:	f7ff fec1 	bl	801079a <qsort>
 8010a18:	45a1      	cmp	r9, r4
 8010a1a:	d80b      	bhi.n	8010a34 <qsort+0x29a>
 8010a1c:	9b02      	ldr	r3, [sp, #8]
 8010a1e:	aa16      	add	r2, sp, #88	; 0x58
 8010a20:	3b01      	subs	r3, #1
 8010a22:	9302      	str	r3, [sp, #8]
 8010a24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a28:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8010a2c:	e7ee      	b.n	8010a0c <qsort+0x272>
 8010a2e:	45a1      	cmp	r9, r4
 8010a30:	f67f aed1 	bls.w	80107d6 <qsort+0x3c>
 8010a34:	fbb9 f1f4 	udiv	r1, r9, r4
 8010a38:	4630      	mov	r0, r6
 8010a3a:	e7e7      	b.n	8010a0c <qsort+0x272>

08010a3c <realloc>:
 8010a3c:	4b02      	ldr	r3, [pc, #8]	; (8010a48 <realloc+0xc>)
 8010a3e:	460a      	mov	r2, r1
 8010a40:	4601      	mov	r1, r0
 8010a42:	6818      	ldr	r0, [r3, #0]
 8010a44:	f002 ba38 	b.w	8012eb8 <_realloc_r>
 8010a48:	20000160 	.word	0x20000160

08010a4c <_sbrk_r>:
 8010a4c:	b538      	push	{r3, r4, r5, lr}
 8010a4e:	4d06      	ldr	r5, [pc, #24]	; (8010a68 <_sbrk_r+0x1c>)
 8010a50:	2300      	movs	r3, #0
 8010a52:	4604      	mov	r4, r0
 8010a54:	4608      	mov	r0, r1
 8010a56:	602b      	str	r3, [r5, #0]
 8010a58:	f7f2 f9fa 	bl	8002e50 <_sbrk>
 8010a5c:	1c43      	adds	r3, r0, #1
 8010a5e:	d102      	bne.n	8010a66 <_sbrk_r+0x1a>
 8010a60:	682b      	ldr	r3, [r5, #0]
 8010a62:	b103      	cbz	r3, 8010a66 <_sbrk_r+0x1a>
 8010a64:	6023      	str	r3, [r4, #0]
 8010a66:	bd38      	pop	{r3, r4, r5, pc}
 8010a68:	200034d4 	.word	0x200034d4

08010a6c <sniprintf>:
 8010a6c:	b40c      	push	{r2, r3}
 8010a6e:	b530      	push	{r4, r5, lr}
 8010a70:	4b17      	ldr	r3, [pc, #92]	; (8010ad0 <sniprintf+0x64>)
 8010a72:	1e0c      	subs	r4, r1, #0
 8010a74:	681d      	ldr	r5, [r3, #0]
 8010a76:	b09d      	sub	sp, #116	; 0x74
 8010a78:	da08      	bge.n	8010a8c <sniprintf+0x20>
 8010a7a:	238b      	movs	r3, #139	; 0x8b
 8010a7c:	602b      	str	r3, [r5, #0]
 8010a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a82:	b01d      	add	sp, #116	; 0x74
 8010a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a88:	b002      	add	sp, #8
 8010a8a:	4770      	bx	lr
 8010a8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010a90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010a94:	bf14      	ite	ne
 8010a96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010a9a:	4623      	moveq	r3, r4
 8010a9c:	9304      	str	r3, [sp, #16]
 8010a9e:	9307      	str	r3, [sp, #28]
 8010aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010aa4:	9002      	str	r0, [sp, #8]
 8010aa6:	9006      	str	r0, [sp, #24]
 8010aa8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010aac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010aae:	ab21      	add	r3, sp, #132	; 0x84
 8010ab0:	a902      	add	r1, sp, #8
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	9301      	str	r3, [sp, #4]
 8010ab6:	f002 fa81 	bl	8012fbc <_svfiprintf_r>
 8010aba:	1c43      	adds	r3, r0, #1
 8010abc:	bfbc      	itt	lt
 8010abe:	238b      	movlt	r3, #139	; 0x8b
 8010ac0:	602b      	strlt	r3, [r5, #0]
 8010ac2:	2c00      	cmp	r4, #0
 8010ac4:	d0dd      	beq.n	8010a82 <sniprintf+0x16>
 8010ac6:	9b02      	ldr	r3, [sp, #8]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	701a      	strb	r2, [r3, #0]
 8010acc:	e7d9      	b.n	8010a82 <sniprintf+0x16>
 8010ace:	bf00      	nop
 8010ad0:	20000160 	.word	0x20000160

08010ad4 <__sread>:
 8010ad4:	b510      	push	{r4, lr}
 8010ad6:	460c      	mov	r4, r1
 8010ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010adc:	f002 fe5c 	bl	8013798 <_read_r>
 8010ae0:	2800      	cmp	r0, #0
 8010ae2:	bfab      	itete	ge
 8010ae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8010ae8:	181b      	addge	r3, r3, r0
 8010aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010aee:	bfac      	ite	ge
 8010af0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010af2:	81a3      	strhlt	r3, [r4, #12]
 8010af4:	bd10      	pop	{r4, pc}

08010af6 <__swrite>:
 8010af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010afa:	461f      	mov	r7, r3
 8010afc:	898b      	ldrh	r3, [r1, #12]
 8010afe:	05db      	lsls	r3, r3, #23
 8010b00:	4605      	mov	r5, r0
 8010b02:	460c      	mov	r4, r1
 8010b04:	4616      	mov	r6, r2
 8010b06:	d505      	bpl.n	8010b14 <__swrite+0x1e>
 8010b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b0c:	2302      	movs	r3, #2
 8010b0e:	2200      	movs	r2, #0
 8010b10:	f001 fc74 	bl	80123fc <_lseek_r>
 8010b14:	89a3      	ldrh	r3, [r4, #12]
 8010b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b1e:	81a3      	strh	r3, [r4, #12]
 8010b20:	4632      	mov	r2, r6
 8010b22:	463b      	mov	r3, r7
 8010b24:	4628      	mov	r0, r5
 8010b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b2a:	f000 bead 	b.w	8011888 <_write_r>

08010b2e <__sseek>:
 8010b2e:	b510      	push	{r4, lr}
 8010b30:	460c      	mov	r4, r1
 8010b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b36:	f001 fc61 	bl	80123fc <_lseek_r>
 8010b3a:	1c43      	adds	r3, r0, #1
 8010b3c:	89a3      	ldrh	r3, [r4, #12]
 8010b3e:	bf15      	itete	ne
 8010b40:	6560      	strne	r0, [r4, #84]	; 0x54
 8010b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010b4a:	81a3      	strheq	r3, [r4, #12]
 8010b4c:	bf18      	it	ne
 8010b4e:	81a3      	strhne	r3, [r4, #12]
 8010b50:	bd10      	pop	{r4, pc}

08010b52 <__sclose>:
 8010b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b56:	f000 bf17 	b.w	8011988 <_close_r>

08010b5a <strncmp>:
 8010b5a:	b510      	push	{r4, lr}
 8010b5c:	b16a      	cbz	r2, 8010b7a <strncmp+0x20>
 8010b5e:	3901      	subs	r1, #1
 8010b60:	1884      	adds	r4, r0, r2
 8010b62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010b66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010b6a:	4293      	cmp	r3, r2
 8010b6c:	d103      	bne.n	8010b76 <strncmp+0x1c>
 8010b6e:	42a0      	cmp	r0, r4
 8010b70:	d001      	beq.n	8010b76 <strncmp+0x1c>
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d1f5      	bne.n	8010b62 <strncmp+0x8>
 8010b76:	1a98      	subs	r0, r3, r2
 8010b78:	bd10      	pop	{r4, pc}
 8010b7a:	4610      	mov	r0, r2
 8010b7c:	e7fc      	b.n	8010b78 <strncmp+0x1e>

08010b7e <sulp>:
 8010b7e:	b570      	push	{r4, r5, r6, lr}
 8010b80:	4604      	mov	r4, r0
 8010b82:	460d      	mov	r5, r1
 8010b84:	ec45 4b10 	vmov	d0, r4, r5
 8010b88:	4616      	mov	r6, r2
 8010b8a:	f002 f837 	bl	8012bfc <__ulp>
 8010b8e:	ec51 0b10 	vmov	r0, r1, d0
 8010b92:	b17e      	cbz	r6, 8010bb4 <sulp+0x36>
 8010b94:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010b98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	dd09      	ble.n	8010bb4 <sulp+0x36>
 8010ba0:	051b      	lsls	r3, r3, #20
 8010ba2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010ba6:	2400      	movs	r4, #0
 8010ba8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010bac:	4622      	mov	r2, r4
 8010bae:	462b      	mov	r3, r5
 8010bb0:	f7ef fd3a 	bl	8000628 <__aeabi_dmul>
 8010bb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08010bb8 <_strtod_l>:
 8010bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bbc:	b0a3      	sub	sp, #140	; 0x8c
 8010bbe:	461f      	mov	r7, r3
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	931e      	str	r3, [sp, #120]	; 0x78
 8010bc4:	4ba4      	ldr	r3, [pc, #656]	; (8010e58 <_strtod_l+0x2a0>)
 8010bc6:	9219      	str	r2, [sp, #100]	; 0x64
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	9307      	str	r3, [sp, #28]
 8010bcc:	4604      	mov	r4, r0
 8010bce:	4618      	mov	r0, r3
 8010bd0:	4688      	mov	r8, r1
 8010bd2:	f7ef fb0f 	bl	80001f4 <strlen>
 8010bd6:	f04f 0a00 	mov.w	sl, #0
 8010bda:	4605      	mov	r5, r0
 8010bdc:	f04f 0b00 	mov.w	fp, #0
 8010be0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010be4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010be6:	781a      	ldrb	r2, [r3, #0]
 8010be8:	2a2b      	cmp	r2, #43	; 0x2b
 8010bea:	d04c      	beq.n	8010c86 <_strtod_l+0xce>
 8010bec:	d839      	bhi.n	8010c62 <_strtod_l+0xaa>
 8010bee:	2a0d      	cmp	r2, #13
 8010bf0:	d832      	bhi.n	8010c58 <_strtod_l+0xa0>
 8010bf2:	2a08      	cmp	r2, #8
 8010bf4:	d832      	bhi.n	8010c5c <_strtod_l+0xa4>
 8010bf6:	2a00      	cmp	r2, #0
 8010bf8:	d03c      	beq.n	8010c74 <_strtod_l+0xbc>
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	930e      	str	r3, [sp, #56]	; 0x38
 8010bfe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010c00:	7833      	ldrb	r3, [r6, #0]
 8010c02:	2b30      	cmp	r3, #48	; 0x30
 8010c04:	f040 80b4 	bne.w	8010d70 <_strtod_l+0x1b8>
 8010c08:	7873      	ldrb	r3, [r6, #1]
 8010c0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010c0e:	2b58      	cmp	r3, #88	; 0x58
 8010c10:	d16c      	bne.n	8010cec <_strtod_l+0x134>
 8010c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c14:	9301      	str	r3, [sp, #4]
 8010c16:	ab1e      	add	r3, sp, #120	; 0x78
 8010c18:	9702      	str	r7, [sp, #8]
 8010c1a:	9300      	str	r3, [sp, #0]
 8010c1c:	4a8f      	ldr	r2, [pc, #572]	; (8010e5c <_strtod_l+0x2a4>)
 8010c1e:	ab1f      	add	r3, sp, #124	; 0x7c
 8010c20:	a91d      	add	r1, sp, #116	; 0x74
 8010c22:	4620      	mov	r0, r4
 8010c24:	f001 f8de 	bl	8011de4 <__gethex>
 8010c28:	f010 0707 	ands.w	r7, r0, #7
 8010c2c:	4605      	mov	r5, r0
 8010c2e:	d005      	beq.n	8010c3c <_strtod_l+0x84>
 8010c30:	2f06      	cmp	r7, #6
 8010c32:	d12a      	bne.n	8010c8a <_strtod_l+0xd2>
 8010c34:	3601      	adds	r6, #1
 8010c36:	2300      	movs	r3, #0
 8010c38:	961d      	str	r6, [sp, #116]	; 0x74
 8010c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8010c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f040 8596 	bne.w	8011770 <_strtod_l+0xbb8>
 8010c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c46:	b1db      	cbz	r3, 8010c80 <_strtod_l+0xc8>
 8010c48:	4652      	mov	r2, sl
 8010c4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010c4e:	ec43 2b10 	vmov	d0, r2, r3
 8010c52:	b023      	add	sp, #140	; 0x8c
 8010c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c58:	2a20      	cmp	r2, #32
 8010c5a:	d1ce      	bne.n	8010bfa <_strtod_l+0x42>
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	931d      	str	r3, [sp, #116]	; 0x74
 8010c60:	e7c0      	b.n	8010be4 <_strtod_l+0x2c>
 8010c62:	2a2d      	cmp	r2, #45	; 0x2d
 8010c64:	d1c9      	bne.n	8010bfa <_strtod_l+0x42>
 8010c66:	2201      	movs	r2, #1
 8010c68:	920e      	str	r2, [sp, #56]	; 0x38
 8010c6a:	1c5a      	adds	r2, r3, #1
 8010c6c:	921d      	str	r2, [sp, #116]	; 0x74
 8010c6e:	785b      	ldrb	r3, [r3, #1]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d1c4      	bne.n	8010bfe <_strtod_l+0x46>
 8010c74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010c76:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	f040 8576 	bne.w	801176c <_strtod_l+0xbb4>
 8010c80:	4652      	mov	r2, sl
 8010c82:	465b      	mov	r3, fp
 8010c84:	e7e3      	b.n	8010c4e <_strtod_l+0x96>
 8010c86:	2200      	movs	r2, #0
 8010c88:	e7ee      	b.n	8010c68 <_strtod_l+0xb0>
 8010c8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010c8c:	b13a      	cbz	r2, 8010c9e <_strtod_l+0xe6>
 8010c8e:	2135      	movs	r1, #53	; 0x35
 8010c90:	a820      	add	r0, sp, #128	; 0x80
 8010c92:	f002 f8be 	bl	8012e12 <__copybits>
 8010c96:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f001 fc83 	bl	80125a4 <_Bfree>
 8010c9e:	3f01      	subs	r7, #1
 8010ca0:	2f05      	cmp	r7, #5
 8010ca2:	d807      	bhi.n	8010cb4 <_strtod_l+0xfc>
 8010ca4:	e8df f007 	tbb	[pc, r7]
 8010ca8:	1d180b0e 	.word	0x1d180b0e
 8010cac:	030e      	.short	0x030e
 8010cae:	f04f 0b00 	mov.w	fp, #0
 8010cb2:	46da      	mov	sl, fp
 8010cb4:	0728      	lsls	r0, r5, #28
 8010cb6:	d5c1      	bpl.n	8010c3c <_strtod_l+0x84>
 8010cb8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010cbc:	e7be      	b.n	8010c3c <_strtod_l+0x84>
 8010cbe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010cc2:	e7f7      	b.n	8010cb4 <_strtod_l+0xfc>
 8010cc4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010cc8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010cca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010cce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010cd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010cd6:	e7ed      	b.n	8010cb4 <_strtod_l+0xfc>
 8010cd8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010e60 <_strtod_l+0x2a8>
 8010cdc:	f04f 0a00 	mov.w	sl, #0
 8010ce0:	e7e8      	b.n	8010cb4 <_strtod_l+0xfc>
 8010ce2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010ce6:	f04f 3aff 	mov.w	sl, #4294967295
 8010cea:	e7e3      	b.n	8010cb4 <_strtod_l+0xfc>
 8010cec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010cee:	1c5a      	adds	r2, r3, #1
 8010cf0:	921d      	str	r2, [sp, #116]	; 0x74
 8010cf2:	785b      	ldrb	r3, [r3, #1]
 8010cf4:	2b30      	cmp	r3, #48	; 0x30
 8010cf6:	d0f9      	beq.n	8010cec <_strtod_l+0x134>
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d09f      	beq.n	8010c3c <_strtod_l+0x84>
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	f04f 0900 	mov.w	r9, #0
 8010d02:	9304      	str	r3, [sp, #16]
 8010d04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d06:	930a      	str	r3, [sp, #40]	; 0x28
 8010d08:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010d0c:	464f      	mov	r7, r9
 8010d0e:	220a      	movs	r2, #10
 8010d10:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010d12:	7806      	ldrb	r6, [r0, #0]
 8010d14:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010d18:	b2d9      	uxtb	r1, r3
 8010d1a:	2909      	cmp	r1, #9
 8010d1c:	d92a      	bls.n	8010d74 <_strtod_l+0x1bc>
 8010d1e:	9907      	ldr	r1, [sp, #28]
 8010d20:	462a      	mov	r2, r5
 8010d22:	f7ff ff1a 	bl	8010b5a <strncmp>
 8010d26:	b398      	cbz	r0, 8010d90 <_strtod_l+0x1d8>
 8010d28:	2000      	movs	r0, #0
 8010d2a:	4633      	mov	r3, r6
 8010d2c:	463d      	mov	r5, r7
 8010d2e:	9007      	str	r0, [sp, #28]
 8010d30:	4602      	mov	r2, r0
 8010d32:	2b65      	cmp	r3, #101	; 0x65
 8010d34:	d001      	beq.n	8010d3a <_strtod_l+0x182>
 8010d36:	2b45      	cmp	r3, #69	; 0x45
 8010d38:	d118      	bne.n	8010d6c <_strtod_l+0x1b4>
 8010d3a:	b91d      	cbnz	r5, 8010d44 <_strtod_l+0x18c>
 8010d3c:	9b04      	ldr	r3, [sp, #16]
 8010d3e:	4303      	orrs	r3, r0
 8010d40:	d098      	beq.n	8010c74 <_strtod_l+0xbc>
 8010d42:	2500      	movs	r5, #0
 8010d44:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010d48:	f108 0301 	add.w	r3, r8, #1
 8010d4c:	931d      	str	r3, [sp, #116]	; 0x74
 8010d4e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010d52:	2b2b      	cmp	r3, #43	; 0x2b
 8010d54:	d075      	beq.n	8010e42 <_strtod_l+0x28a>
 8010d56:	2b2d      	cmp	r3, #45	; 0x2d
 8010d58:	d07b      	beq.n	8010e52 <_strtod_l+0x29a>
 8010d5a:	f04f 0c00 	mov.w	ip, #0
 8010d5e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010d62:	2909      	cmp	r1, #9
 8010d64:	f240 8082 	bls.w	8010e6c <_strtod_l+0x2b4>
 8010d68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010d6c:	2600      	movs	r6, #0
 8010d6e:	e09d      	b.n	8010eac <_strtod_l+0x2f4>
 8010d70:	2300      	movs	r3, #0
 8010d72:	e7c4      	b.n	8010cfe <_strtod_l+0x146>
 8010d74:	2f08      	cmp	r7, #8
 8010d76:	bfd8      	it	le
 8010d78:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010d7a:	f100 0001 	add.w	r0, r0, #1
 8010d7e:	bfda      	itte	le
 8010d80:	fb02 3301 	mlale	r3, r2, r1, r3
 8010d84:	9309      	strle	r3, [sp, #36]	; 0x24
 8010d86:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010d8a:	3701      	adds	r7, #1
 8010d8c:	901d      	str	r0, [sp, #116]	; 0x74
 8010d8e:	e7bf      	b.n	8010d10 <_strtod_l+0x158>
 8010d90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d92:	195a      	adds	r2, r3, r5
 8010d94:	921d      	str	r2, [sp, #116]	; 0x74
 8010d96:	5d5b      	ldrb	r3, [r3, r5]
 8010d98:	2f00      	cmp	r7, #0
 8010d9a:	d037      	beq.n	8010e0c <_strtod_l+0x254>
 8010d9c:	9007      	str	r0, [sp, #28]
 8010d9e:	463d      	mov	r5, r7
 8010da0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010da4:	2a09      	cmp	r2, #9
 8010da6:	d912      	bls.n	8010dce <_strtod_l+0x216>
 8010da8:	2201      	movs	r2, #1
 8010daa:	e7c2      	b.n	8010d32 <_strtod_l+0x17a>
 8010dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010dae:	1c5a      	adds	r2, r3, #1
 8010db0:	921d      	str	r2, [sp, #116]	; 0x74
 8010db2:	785b      	ldrb	r3, [r3, #1]
 8010db4:	3001      	adds	r0, #1
 8010db6:	2b30      	cmp	r3, #48	; 0x30
 8010db8:	d0f8      	beq.n	8010dac <_strtod_l+0x1f4>
 8010dba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010dbe:	2a08      	cmp	r2, #8
 8010dc0:	f200 84db 	bhi.w	801177a <_strtod_l+0xbc2>
 8010dc4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010dc6:	9007      	str	r0, [sp, #28]
 8010dc8:	2000      	movs	r0, #0
 8010dca:	920a      	str	r2, [sp, #40]	; 0x28
 8010dcc:	4605      	mov	r5, r0
 8010dce:	3b30      	subs	r3, #48	; 0x30
 8010dd0:	f100 0201 	add.w	r2, r0, #1
 8010dd4:	d014      	beq.n	8010e00 <_strtod_l+0x248>
 8010dd6:	9907      	ldr	r1, [sp, #28]
 8010dd8:	4411      	add	r1, r2
 8010dda:	9107      	str	r1, [sp, #28]
 8010ddc:	462a      	mov	r2, r5
 8010dde:	eb00 0e05 	add.w	lr, r0, r5
 8010de2:	210a      	movs	r1, #10
 8010de4:	4572      	cmp	r2, lr
 8010de6:	d113      	bne.n	8010e10 <_strtod_l+0x258>
 8010de8:	182a      	adds	r2, r5, r0
 8010dea:	2a08      	cmp	r2, #8
 8010dec:	f105 0501 	add.w	r5, r5, #1
 8010df0:	4405      	add	r5, r0
 8010df2:	dc1c      	bgt.n	8010e2e <_strtod_l+0x276>
 8010df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010df6:	220a      	movs	r2, #10
 8010df8:	fb02 3301 	mla	r3, r2, r1, r3
 8010dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8010dfe:	2200      	movs	r2, #0
 8010e00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e02:	1c59      	adds	r1, r3, #1
 8010e04:	911d      	str	r1, [sp, #116]	; 0x74
 8010e06:	785b      	ldrb	r3, [r3, #1]
 8010e08:	4610      	mov	r0, r2
 8010e0a:	e7c9      	b.n	8010da0 <_strtod_l+0x1e8>
 8010e0c:	4638      	mov	r0, r7
 8010e0e:	e7d2      	b.n	8010db6 <_strtod_l+0x1fe>
 8010e10:	2a08      	cmp	r2, #8
 8010e12:	dc04      	bgt.n	8010e1e <_strtod_l+0x266>
 8010e14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010e16:	434e      	muls	r6, r1
 8010e18:	9609      	str	r6, [sp, #36]	; 0x24
 8010e1a:	3201      	adds	r2, #1
 8010e1c:	e7e2      	b.n	8010de4 <_strtod_l+0x22c>
 8010e1e:	f102 0c01 	add.w	ip, r2, #1
 8010e22:	f1bc 0f10 	cmp.w	ip, #16
 8010e26:	bfd8      	it	le
 8010e28:	fb01 f909 	mulle.w	r9, r1, r9
 8010e2c:	e7f5      	b.n	8010e1a <_strtod_l+0x262>
 8010e2e:	2d10      	cmp	r5, #16
 8010e30:	bfdc      	itt	le
 8010e32:	220a      	movle	r2, #10
 8010e34:	fb02 3909 	mlale	r9, r2, r9, r3
 8010e38:	e7e1      	b.n	8010dfe <_strtod_l+0x246>
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	9307      	str	r3, [sp, #28]
 8010e3e:	2201      	movs	r2, #1
 8010e40:	e77c      	b.n	8010d3c <_strtod_l+0x184>
 8010e42:	f04f 0c00 	mov.w	ip, #0
 8010e46:	f108 0302 	add.w	r3, r8, #2
 8010e4a:	931d      	str	r3, [sp, #116]	; 0x74
 8010e4c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010e50:	e785      	b.n	8010d5e <_strtod_l+0x1a6>
 8010e52:	f04f 0c01 	mov.w	ip, #1
 8010e56:	e7f6      	b.n	8010e46 <_strtod_l+0x28e>
 8010e58:	0801558c 	.word	0x0801558c
 8010e5c:	08015460 	.word	0x08015460
 8010e60:	7ff00000 	.word	0x7ff00000
 8010e64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e66:	1c59      	adds	r1, r3, #1
 8010e68:	911d      	str	r1, [sp, #116]	; 0x74
 8010e6a:	785b      	ldrb	r3, [r3, #1]
 8010e6c:	2b30      	cmp	r3, #48	; 0x30
 8010e6e:	d0f9      	beq.n	8010e64 <_strtod_l+0x2ac>
 8010e70:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8010e74:	2908      	cmp	r1, #8
 8010e76:	f63f af79 	bhi.w	8010d6c <_strtod_l+0x1b4>
 8010e7a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010e7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e80:	9308      	str	r3, [sp, #32]
 8010e82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e84:	1c59      	adds	r1, r3, #1
 8010e86:	911d      	str	r1, [sp, #116]	; 0x74
 8010e88:	785b      	ldrb	r3, [r3, #1]
 8010e8a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8010e8e:	2e09      	cmp	r6, #9
 8010e90:	d937      	bls.n	8010f02 <_strtod_l+0x34a>
 8010e92:	9e08      	ldr	r6, [sp, #32]
 8010e94:	1b89      	subs	r1, r1, r6
 8010e96:	2908      	cmp	r1, #8
 8010e98:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010e9c:	dc02      	bgt.n	8010ea4 <_strtod_l+0x2ec>
 8010e9e:	4576      	cmp	r6, lr
 8010ea0:	bfa8      	it	ge
 8010ea2:	4676      	movge	r6, lr
 8010ea4:	f1bc 0f00 	cmp.w	ip, #0
 8010ea8:	d000      	beq.n	8010eac <_strtod_l+0x2f4>
 8010eaa:	4276      	negs	r6, r6
 8010eac:	2d00      	cmp	r5, #0
 8010eae:	d14f      	bne.n	8010f50 <_strtod_l+0x398>
 8010eb0:	9904      	ldr	r1, [sp, #16]
 8010eb2:	4301      	orrs	r1, r0
 8010eb4:	f47f aec2 	bne.w	8010c3c <_strtod_l+0x84>
 8010eb8:	2a00      	cmp	r2, #0
 8010eba:	f47f aedb 	bne.w	8010c74 <_strtod_l+0xbc>
 8010ebe:	2b69      	cmp	r3, #105	; 0x69
 8010ec0:	d027      	beq.n	8010f12 <_strtod_l+0x35a>
 8010ec2:	dc24      	bgt.n	8010f0e <_strtod_l+0x356>
 8010ec4:	2b49      	cmp	r3, #73	; 0x49
 8010ec6:	d024      	beq.n	8010f12 <_strtod_l+0x35a>
 8010ec8:	2b4e      	cmp	r3, #78	; 0x4e
 8010eca:	f47f aed3 	bne.w	8010c74 <_strtod_l+0xbc>
 8010ece:	499e      	ldr	r1, [pc, #632]	; (8011148 <_strtod_l+0x590>)
 8010ed0:	a81d      	add	r0, sp, #116	; 0x74
 8010ed2:	f001 f9df 	bl	8012294 <__match>
 8010ed6:	2800      	cmp	r0, #0
 8010ed8:	f43f aecc 	beq.w	8010c74 <_strtod_l+0xbc>
 8010edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	2b28      	cmp	r3, #40	; 0x28
 8010ee2:	d12d      	bne.n	8010f40 <_strtod_l+0x388>
 8010ee4:	4999      	ldr	r1, [pc, #612]	; (801114c <_strtod_l+0x594>)
 8010ee6:	aa20      	add	r2, sp, #128	; 0x80
 8010ee8:	a81d      	add	r0, sp, #116	; 0x74
 8010eea:	f001 f9e7 	bl	80122bc <__hexnan>
 8010eee:	2805      	cmp	r0, #5
 8010ef0:	d126      	bne.n	8010f40 <_strtod_l+0x388>
 8010ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ef4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010ef8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010efc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010f00:	e69c      	b.n	8010c3c <_strtod_l+0x84>
 8010f02:	210a      	movs	r1, #10
 8010f04:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010f08:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010f0c:	e7b9      	b.n	8010e82 <_strtod_l+0x2ca>
 8010f0e:	2b6e      	cmp	r3, #110	; 0x6e
 8010f10:	e7db      	b.n	8010eca <_strtod_l+0x312>
 8010f12:	498f      	ldr	r1, [pc, #572]	; (8011150 <_strtod_l+0x598>)
 8010f14:	a81d      	add	r0, sp, #116	; 0x74
 8010f16:	f001 f9bd 	bl	8012294 <__match>
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	f43f aeaa 	beq.w	8010c74 <_strtod_l+0xbc>
 8010f20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f22:	498c      	ldr	r1, [pc, #560]	; (8011154 <_strtod_l+0x59c>)
 8010f24:	3b01      	subs	r3, #1
 8010f26:	a81d      	add	r0, sp, #116	; 0x74
 8010f28:	931d      	str	r3, [sp, #116]	; 0x74
 8010f2a:	f001 f9b3 	bl	8012294 <__match>
 8010f2e:	b910      	cbnz	r0, 8010f36 <_strtod_l+0x37e>
 8010f30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f32:	3301      	adds	r3, #1
 8010f34:	931d      	str	r3, [sp, #116]	; 0x74
 8010f36:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011164 <_strtod_l+0x5ac>
 8010f3a:	f04f 0a00 	mov.w	sl, #0
 8010f3e:	e67d      	b.n	8010c3c <_strtod_l+0x84>
 8010f40:	4885      	ldr	r0, [pc, #532]	; (8011158 <_strtod_l+0x5a0>)
 8010f42:	f002 fc3d 	bl	80137c0 <nan>
 8010f46:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010f4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010f4e:	e675      	b.n	8010c3c <_strtod_l+0x84>
 8010f50:	9b07      	ldr	r3, [sp, #28]
 8010f52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f54:	1af3      	subs	r3, r6, r3
 8010f56:	2f00      	cmp	r7, #0
 8010f58:	bf08      	it	eq
 8010f5a:	462f      	moveq	r7, r5
 8010f5c:	2d10      	cmp	r5, #16
 8010f5e:	9308      	str	r3, [sp, #32]
 8010f60:	46a8      	mov	r8, r5
 8010f62:	bfa8      	it	ge
 8010f64:	f04f 0810 	movge.w	r8, #16
 8010f68:	f7ef fae4 	bl	8000534 <__aeabi_ui2d>
 8010f6c:	2d09      	cmp	r5, #9
 8010f6e:	4682      	mov	sl, r0
 8010f70:	468b      	mov	fp, r1
 8010f72:	dd13      	ble.n	8010f9c <_strtod_l+0x3e4>
 8010f74:	4b79      	ldr	r3, [pc, #484]	; (801115c <_strtod_l+0x5a4>)
 8010f76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010f7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010f7e:	f7ef fb53 	bl	8000628 <__aeabi_dmul>
 8010f82:	4682      	mov	sl, r0
 8010f84:	4648      	mov	r0, r9
 8010f86:	468b      	mov	fp, r1
 8010f88:	f7ef fad4 	bl	8000534 <__aeabi_ui2d>
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	460b      	mov	r3, r1
 8010f90:	4650      	mov	r0, sl
 8010f92:	4659      	mov	r1, fp
 8010f94:	f7ef f992 	bl	80002bc <__adddf3>
 8010f98:	4682      	mov	sl, r0
 8010f9a:	468b      	mov	fp, r1
 8010f9c:	2d0f      	cmp	r5, #15
 8010f9e:	dc38      	bgt.n	8011012 <_strtod_l+0x45a>
 8010fa0:	9b08      	ldr	r3, [sp, #32]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	f43f ae4a 	beq.w	8010c3c <_strtod_l+0x84>
 8010fa8:	dd24      	ble.n	8010ff4 <_strtod_l+0x43c>
 8010faa:	2b16      	cmp	r3, #22
 8010fac:	dc0b      	bgt.n	8010fc6 <_strtod_l+0x40e>
 8010fae:	4d6b      	ldr	r5, [pc, #428]	; (801115c <_strtod_l+0x5a4>)
 8010fb0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010fb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010fb8:	4652      	mov	r2, sl
 8010fba:	465b      	mov	r3, fp
 8010fbc:	f7ef fb34 	bl	8000628 <__aeabi_dmul>
 8010fc0:	4682      	mov	sl, r0
 8010fc2:	468b      	mov	fp, r1
 8010fc4:	e63a      	b.n	8010c3c <_strtod_l+0x84>
 8010fc6:	9a08      	ldr	r2, [sp, #32]
 8010fc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	db20      	blt.n	8011012 <_strtod_l+0x45a>
 8010fd0:	4c62      	ldr	r4, [pc, #392]	; (801115c <_strtod_l+0x5a4>)
 8010fd2:	f1c5 050f 	rsb	r5, r5, #15
 8010fd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010fda:	4652      	mov	r2, sl
 8010fdc:	465b      	mov	r3, fp
 8010fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fe2:	f7ef fb21 	bl	8000628 <__aeabi_dmul>
 8010fe6:	9b08      	ldr	r3, [sp, #32]
 8010fe8:	1b5d      	subs	r5, r3, r5
 8010fea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010fee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010ff2:	e7e3      	b.n	8010fbc <_strtod_l+0x404>
 8010ff4:	9b08      	ldr	r3, [sp, #32]
 8010ff6:	3316      	adds	r3, #22
 8010ff8:	db0b      	blt.n	8011012 <_strtod_l+0x45a>
 8010ffa:	9b07      	ldr	r3, [sp, #28]
 8010ffc:	4a57      	ldr	r2, [pc, #348]	; (801115c <_strtod_l+0x5a4>)
 8010ffe:	1b9e      	subs	r6, r3, r6
 8011000:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011004:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011008:	4650      	mov	r0, sl
 801100a:	4659      	mov	r1, fp
 801100c:	f7ef fc36 	bl	800087c <__aeabi_ddiv>
 8011010:	e7d6      	b.n	8010fc0 <_strtod_l+0x408>
 8011012:	9b08      	ldr	r3, [sp, #32]
 8011014:	eba5 0808 	sub.w	r8, r5, r8
 8011018:	4498      	add	r8, r3
 801101a:	f1b8 0f00 	cmp.w	r8, #0
 801101e:	dd71      	ble.n	8011104 <_strtod_l+0x54c>
 8011020:	f018 030f 	ands.w	r3, r8, #15
 8011024:	d00a      	beq.n	801103c <_strtod_l+0x484>
 8011026:	494d      	ldr	r1, [pc, #308]	; (801115c <_strtod_l+0x5a4>)
 8011028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801102c:	4652      	mov	r2, sl
 801102e:	465b      	mov	r3, fp
 8011030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011034:	f7ef faf8 	bl	8000628 <__aeabi_dmul>
 8011038:	4682      	mov	sl, r0
 801103a:	468b      	mov	fp, r1
 801103c:	f038 080f 	bics.w	r8, r8, #15
 8011040:	d04d      	beq.n	80110de <_strtod_l+0x526>
 8011042:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011046:	dd22      	ble.n	801108e <_strtod_l+0x4d6>
 8011048:	2500      	movs	r5, #0
 801104a:	462e      	mov	r6, r5
 801104c:	9509      	str	r5, [sp, #36]	; 0x24
 801104e:	9507      	str	r5, [sp, #28]
 8011050:	2322      	movs	r3, #34	; 0x22
 8011052:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011164 <_strtod_l+0x5ac>
 8011056:	6023      	str	r3, [r4, #0]
 8011058:	f04f 0a00 	mov.w	sl, #0
 801105c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801105e:	2b00      	cmp	r3, #0
 8011060:	f43f adec 	beq.w	8010c3c <_strtod_l+0x84>
 8011064:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011066:	4620      	mov	r0, r4
 8011068:	f001 fa9c 	bl	80125a4 <_Bfree>
 801106c:	9907      	ldr	r1, [sp, #28]
 801106e:	4620      	mov	r0, r4
 8011070:	f001 fa98 	bl	80125a4 <_Bfree>
 8011074:	4631      	mov	r1, r6
 8011076:	4620      	mov	r0, r4
 8011078:	f001 fa94 	bl	80125a4 <_Bfree>
 801107c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801107e:	4620      	mov	r0, r4
 8011080:	f001 fa90 	bl	80125a4 <_Bfree>
 8011084:	4629      	mov	r1, r5
 8011086:	4620      	mov	r0, r4
 8011088:	f001 fa8c 	bl	80125a4 <_Bfree>
 801108c:	e5d6      	b.n	8010c3c <_strtod_l+0x84>
 801108e:	2300      	movs	r3, #0
 8011090:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011094:	4650      	mov	r0, sl
 8011096:	4659      	mov	r1, fp
 8011098:	4699      	mov	r9, r3
 801109a:	f1b8 0f01 	cmp.w	r8, #1
 801109e:	dc21      	bgt.n	80110e4 <_strtod_l+0x52c>
 80110a0:	b10b      	cbz	r3, 80110a6 <_strtod_l+0x4ee>
 80110a2:	4682      	mov	sl, r0
 80110a4:	468b      	mov	fp, r1
 80110a6:	4b2e      	ldr	r3, [pc, #184]	; (8011160 <_strtod_l+0x5a8>)
 80110a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80110ac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80110b0:	4652      	mov	r2, sl
 80110b2:	465b      	mov	r3, fp
 80110b4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80110b8:	f7ef fab6 	bl	8000628 <__aeabi_dmul>
 80110bc:	4b29      	ldr	r3, [pc, #164]	; (8011164 <_strtod_l+0x5ac>)
 80110be:	460a      	mov	r2, r1
 80110c0:	400b      	ands	r3, r1
 80110c2:	4929      	ldr	r1, [pc, #164]	; (8011168 <_strtod_l+0x5b0>)
 80110c4:	428b      	cmp	r3, r1
 80110c6:	4682      	mov	sl, r0
 80110c8:	d8be      	bhi.n	8011048 <_strtod_l+0x490>
 80110ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80110ce:	428b      	cmp	r3, r1
 80110d0:	bf86      	itte	hi
 80110d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801116c <_strtod_l+0x5b4>
 80110d6:	f04f 3aff 	movhi.w	sl, #4294967295
 80110da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80110de:	2300      	movs	r3, #0
 80110e0:	9304      	str	r3, [sp, #16]
 80110e2:	e081      	b.n	80111e8 <_strtod_l+0x630>
 80110e4:	f018 0f01 	tst.w	r8, #1
 80110e8:	d007      	beq.n	80110fa <_strtod_l+0x542>
 80110ea:	4b1d      	ldr	r3, [pc, #116]	; (8011160 <_strtod_l+0x5a8>)
 80110ec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80110f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f4:	f7ef fa98 	bl	8000628 <__aeabi_dmul>
 80110f8:	2301      	movs	r3, #1
 80110fa:	f109 0901 	add.w	r9, r9, #1
 80110fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011102:	e7ca      	b.n	801109a <_strtod_l+0x4e2>
 8011104:	d0eb      	beq.n	80110de <_strtod_l+0x526>
 8011106:	f1c8 0800 	rsb	r8, r8, #0
 801110a:	f018 020f 	ands.w	r2, r8, #15
 801110e:	d00a      	beq.n	8011126 <_strtod_l+0x56e>
 8011110:	4b12      	ldr	r3, [pc, #72]	; (801115c <_strtod_l+0x5a4>)
 8011112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011116:	4650      	mov	r0, sl
 8011118:	4659      	mov	r1, fp
 801111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111e:	f7ef fbad 	bl	800087c <__aeabi_ddiv>
 8011122:	4682      	mov	sl, r0
 8011124:	468b      	mov	fp, r1
 8011126:	ea5f 1828 	movs.w	r8, r8, asr #4
 801112a:	d0d8      	beq.n	80110de <_strtod_l+0x526>
 801112c:	f1b8 0f1f 	cmp.w	r8, #31
 8011130:	dd1e      	ble.n	8011170 <_strtod_l+0x5b8>
 8011132:	2500      	movs	r5, #0
 8011134:	462e      	mov	r6, r5
 8011136:	9509      	str	r5, [sp, #36]	; 0x24
 8011138:	9507      	str	r5, [sp, #28]
 801113a:	2322      	movs	r3, #34	; 0x22
 801113c:	f04f 0a00 	mov.w	sl, #0
 8011140:	f04f 0b00 	mov.w	fp, #0
 8011144:	6023      	str	r3, [r4, #0]
 8011146:	e789      	b.n	801105c <_strtod_l+0x4a4>
 8011148:	0801545d 	.word	0x0801545d
 801114c:	08015474 	.word	0x08015474
 8011150:	08015454 	.word	0x08015454
 8011154:	08015457 	.word	0x08015457
 8011158:	08015782 	.word	0x08015782
 801115c:	08015640 	.word	0x08015640
 8011160:	08015618 	.word	0x08015618
 8011164:	7ff00000 	.word	0x7ff00000
 8011168:	7ca00000 	.word	0x7ca00000
 801116c:	7fefffff 	.word	0x7fefffff
 8011170:	f018 0310 	ands.w	r3, r8, #16
 8011174:	bf18      	it	ne
 8011176:	236a      	movne	r3, #106	; 0x6a
 8011178:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011530 <_strtod_l+0x978>
 801117c:	9304      	str	r3, [sp, #16]
 801117e:	4650      	mov	r0, sl
 8011180:	4659      	mov	r1, fp
 8011182:	2300      	movs	r3, #0
 8011184:	f018 0f01 	tst.w	r8, #1
 8011188:	d004      	beq.n	8011194 <_strtod_l+0x5dc>
 801118a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801118e:	f7ef fa4b 	bl	8000628 <__aeabi_dmul>
 8011192:	2301      	movs	r3, #1
 8011194:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011198:	f109 0908 	add.w	r9, r9, #8
 801119c:	d1f2      	bne.n	8011184 <_strtod_l+0x5cc>
 801119e:	b10b      	cbz	r3, 80111a4 <_strtod_l+0x5ec>
 80111a0:	4682      	mov	sl, r0
 80111a2:	468b      	mov	fp, r1
 80111a4:	9b04      	ldr	r3, [sp, #16]
 80111a6:	b1bb      	cbz	r3, 80111d8 <_strtod_l+0x620>
 80111a8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80111ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	4659      	mov	r1, fp
 80111b4:	dd10      	ble.n	80111d8 <_strtod_l+0x620>
 80111b6:	2b1f      	cmp	r3, #31
 80111b8:	f340 8128 	ble.w	801140c <_strtod_l+0x854>
 80111bc:	2b34      	cmp	r3, #52	; 0x34
 80111be:	bfde      	ittt	le
 80111c0:	3b20      	suble	r3, #32
 80111c2:	f04f 32ff 	movle.w	r2, #4294967295
 80111c6:	fa02 f303 	lslle.w	r3, r2, r3
 80111ca:	f04f 0a00 	mov.w	sl, #0
 80111ce:	bfcc      	ite	gt
 80111d0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80111d4:	ea03 0b01 	andle.w	fp, r3, r1
 80111d8:	2200      	movs	r2, #0
 80111da:	2300      	movs	r3, #0
 80111dc:	4650      	mov	r0, sl
 80111de:	4659      	mov	r1, fp
 80111e0:	f7ef fc8a 	bl	8000af8 <__aeabi_dcmpeq>
 80111e4:	2800      	cmp	r0, #0
 80111e6:	d1a4      	bne.n	8011132 <_strtod_l+0x57a>
 80111e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ea:	9300      	str	r3, [sp, #0]
 80111ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80111ee:	462b      	mov	r3, r5
 80111f0:	463a      	mov	r2, r7
 80111f2:	4620      	mov	r0, r4
 80111f4:	f001 fa42 	bl	801267c <__s2b>
 80111f8:	9009      	str	r0, [sp, #36]	; 0x24
 80111fa:	2800      	cmp	r0, #0
 80111fc:	f43f af24 	beq.w	8011048 <_strtod_l+0x490>
 8011200:	9b07      	ldr	r3, [sp, #28]
 8011202:	1b9e      	subs	r6, r3, r6
 8011204:	9b08      	ldr	r3, [sp, #32]
 8011206:	2b00      	cmp	r3, #0
 8011208:	bfb4      	ite	lt
 801120a:	4633      	movlt	r3, r6
 801120c:	2300      	movge	r3, #0
 801120e:	9310      	str	r3, [sp, #64]	; 0x40
 8011210:	9b08      	ldr	r3, [sp, #32]
 8011212:	2500      	movs	r5, #0
 8011214:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011218:	9318      	str	r3, [sp, #96]	; 0x60
 801121a:	462e      	mov	r6, r5
 801121c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801121e:	4620      	mov	r0, r4
 8011220:	6859      	ldr	r1, [r3, #4]
 8011222:	f001 f97f 	bl	8012524 <_Balloc>
 8011226:	9007      	str	r0, [sp, #28]
 8011228:	2800      	cmp	r0, #0
 801122a:	f43f af11 	beq.w	8011050 <_strtod_l+0x498>
 801122e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011230:	691a      	ldr	r2, [r3, #16]
 8011232:	3202      	adds	r2, #2
 8011234:	f103 010c 	add.w	r1, r3, #12
 8011238:	0092      	lsls	r2, r2, #2
 801123a:	300c      	adds	r0, #12
 801123c:	f7ff f926 	bl	801048c <memcpy>
 8011240:	ec4b ab10 	vmov	d0, sl, fp
 8011244:	aa20      	add	r2, sp, #128	; 0x80
 8011246:	a91f      	add	r1, sp, #124	; 0x7c
 8011248:	4620      	mov	r0, r4
 801124a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801124e:	f001 fd51 	bl	8012cf4 <__d2b>
 8011252:	901e      	str	r0, [sp, #120]	; 0x78
 8011254:	2800      	cmp	r0, #0
 8011256:	f43f aefb 	beq.w	8011050 <_strtod_l+0x498>
 801125a:	2101      	movs	r1, #1
 801125c:	4620      	mov	r0, r4
 801125e:	f001 faa7 	bl	80127b0 <__i2b>
 8011262:	4606      	mov	r6, r0
 8011264:	2800      	cmp	r0, #0
 8011266:	f43f aef3 	beq.w	8011050 <_strtod_l+0x498>
 801126a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801126c:	9904      	ldr	r1, [sp, #16]
 801126e:	2b00      	cmp	r3, #0
 8011270:	bfab      	itete	ge
 8011272:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8011274:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8011276:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011278:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801127c:	bfac      	ite	ge
 801127e:	eb03 0902 	addge.w	r9, r3, r2
 8011282:	1ad7      	sublt	r7, r2, r3
 8011284:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011286:	eba3 0801 	sub.w	r8, r3, r1
 801128a:	4490      	add	r8, r2
 801128c:	4ba3      	ldr	r3, [pc, #652]	; (801151c <_strtod_l+0x964>)
 801128e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011292:	4598      	cmp	r8, r3
 8011294:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011298:	f280 80cc 	bge.w	8011434 <_strtod_l+0x87c>
 801129c:	eba3 0308 	sub.w	r3, r3, r8
 80112a0:	2b1f      	cmp	r3, #31
 80112a2:	eba2 0203 	sub.w	r2, r2, r3
 80112a6:	f04f 0101 	mov.w	r1, #1
 80112aa:	f300 80b6 	bgt.w	801141a <_strtod_l+0x862>
 80112ae:	fa01 f303 	lsl.w	r3, r1, r3
 80112b2:	9311      	str	r3, [sp, #68]	; 0x44
 80112b4:	2300      	movs	r3, #0
 80112b6:	930c      	str	r3, [sp, #48]	; 0x30
 80112b8:	eb09 0802 	add.w	r8, r9, r2
 80112bc:	9b04      	ldr	r3, [sp, #16]
 80112be:	45c1      	cmp	r9, r8
 80112c0:	4417      	add	r7, r2
 80112c2:	441f      	add	r7, r3
 80112c4:	464b      	mov	r3, r9
 80112c6:	bfa8      	it	ge
 80112c8:	4643      	movge	r3, r8
 80112ca:	42bb      	cmp	r3, r7
 80112cc:	bfa8      	it	ge
 80112ce:	463b      	movge	r3, r7
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	bfc2      	ittt	gt
 80112d4:	eba8 0803 	subgt.w	r8, r8, r3
 80112d8:	1aff      	subgt	r7, r7, r3
 80112da:	eba9 0903 	subgt.w	r9, r9, r3
 80112de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	dd17      	ble.n	8011314 <_strtod_l+0x75c>
 80112e4:	4631      	mov	r1, r6
 80112e6:	461a      	mov	r2, r3
 80112e8:	4620      	mov	r0, r4
 80112ea:	f001 fb1d 	bl	8012928 <__pow5mult>
 80112ee:	4606      	mov	r6, r0
 80112f0:	2800      	cmp	r0, #0
 80112f2:	f43f aead 	beq.w	8011050 <_strtod_l+0x498>
 80112f6:	4601      	mov	r1, r0
 80112f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80112fa:	4620      	mov	r0, r4
 80112fc:	f001 fa6e 	bl	80127dc <__multiply>
 8011300:	900f      	str	r0, [sp, #60]	; 0x3c
 8011302:	2800      	cmp	r0, #0
 8011304:	f43f aea4 	beq.w	8011050 <_strtod_l+0x498>
 8011308:	991e      	ldr	r1, [sp, #120]	; 0x78
 801130a:	4620      	mov	r0, r4
 801130c:	f001 f94a 	bl	80125a4 <_Bfree>
 8011310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011312:	931e      	str	r3, [sp, #120]	; 0x78
 8011314:	f1b8 0f00 	cmp.w	r8, #0
 8011318:	f300 8091 	bgt.w	801143e <_strtod_l+0x886>
 801131c:	9b08      	ldr	r3, [sp, #32]
 801131e:	2b00      	cmp	r3, #0
 8011320:	dd08      	ble.n	8011334 <_strtod_l+0x77c>
 8011322:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011324:	9907      	ldr	r1, [sp, #28]
 8011326:	4620      	mov	r0, r4
 8011328:	f001 fafe 	bl	8012928 <__pow5mult>
 801132c:	9007      	str	r0, [sp, #28]
 801132e:	2800      	cmp	r0, #0
 8011330:	f43f ae8e 	beq.w	8011050 <_strtod_l+0x498>
 8011334:	2f00      	cmp	r7, #0
 8011336:	dd08      	ble.n	801134a <_strtod_l+0x792>
 8011338:	9907      	ldr	r1, [sp, #28]
 801133a:	463a      	mov	r2, r7
 801133c:	4620      	mov	r0, r4
 801133e:	f001 fb4d 	bl	80129dc <__lshift>
 8011342:	9007      	str	r0, [sp, #28]
 8011344:	2800      	cmp	r0, #0
 8011346:	f43f ae83 	beq.w	8011050 <_strtod_l+0x498>
 801134a:	f1b9 0f00 	cmp.w	r9, #0
 801134e:	dd08      	ble.n	8011362 <_strtod_l+0x7aa>
 8011350:	4631      	mov	r1, r6
 8011352:	464a      	mov	r2, r9
 8011354:	4620      	mov	r0, r4
 8011356:	f001 fb41 	bl	80129dc <__lshift>
 801135a:	4606      	mov	r6, r0
 801135c:	2800      	cmp	r0, #0
 801135e:	f43f ae77 	beq.w	8011050 <_strtod_l+0x498>
 8011362:	9a07      	ldr	r2, [sp, #28]
 8011364:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011366:	4620      	mov	r0, r4
 8011368:	f001 fbc0 	bl	8012aec <__mdiff>
 801136c:	4605      	mov	r5, r0
 801136e:	2800      	cmp	r0, #0
 8011370:	f43f ae6e 	beq.w	8011050 <_strtod_l+0x498>
 8011374:	68c3      	ldr	r3, [r0, #12]
 8011376:	930f      	str	r3, [sp, #60]	; 0x3c
 8011378:	2300      	movs	r3, #0
 801137a:	60c3      	str	r3, [r0, #12]
 801137c:	4631      	mov	r1, r6
 801137e:	f001 fb99 	bl	8012ab4 <__mcmp>
 8011382:	2800      	cmp	r0, #0
 8011384:	da65      	bge.n	8011452 <_strtod_l+0x89a>
 8011386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011388:	ea53 030a 	orrs.w	r3, r3, sl
 801138c:	f040 8087 	bne.w	801149e <_strtod_l+0x8e6>
 8011390:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011394:	2b00      	cmp	r3, #0
 8011396:	f040 8082 	bne.w	801149e <_strtod_l+0x8e6>
 801139a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801139e:	0d1b      	lsrs	r3, r3, #20
 80113a0:	051b      	lsls	r3, r3, #20
 80113a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80113a6:	d97a      	bls.n	801149e <_strtod_l+0x8e6>
 80113a8:	696b      	ldr	r3, [r5, #20]
 80113aa:	b913      	cbnz	r3, 80113b2 <_strtod_l+0x7fa>
 80113ac:	692b      	ldr	r3, [r5, #16]
 80113ae:	2b01      	cmp	r3, #1
 80113b0:	dd75      	ble.n	801149e <_strtod_l+0x8e6>
 80113b2:	4629      	mov	r1, r5
 80113b4:	2201      	movs	r2, #1
 80113b6:	4620      	mov	r0, r4
 80113b8:	f001 fb10 	bl	80129dc <__lshift>
 80113bc:	4631      	mov	r1, r6
 80113be:	4605      	mov	r5, r0
 80113c0:	f001 fb78 	bl	8012ab4 <__mcmp>
 80113c4:	2800      	cmp	r0, #0
 80113c6:	dd6a      	ble.n	801149e <_strtod_l+0x8e6>
 80113c8:	9904      	ldr	r1, [sp, #16]
 80113ca:	4a55      	ldr	r2, [pc, #340]	; (8011520 <_strtod_l+0x968>)
 80113cc:	465b      	mov	r3, fp
 80113ce:	2900      	cmp	r1, #0
 80113d0:	f000 8085 	beq.w	80114de <_strtod_l+0x926>
 80113d4:	ea02 010b 	and.w	r1, r2, fp
 80113d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80113dc:	dc7f      	bgt.n	80114de <_strtod_l+0x926>
 80113de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80113e2:	f77f aeaa 	ble.w	801113a <_strtod_l+0x582>
 80113e6:	4a4f      	ldr	r2, [pc, #316]	; (8011524 <_strtod_l+0x96c>)
 80113e8:	2300      	movs	r3, #0
 80113ea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80113ee:	4650      	mov	r0, sl
 80113f0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80113f4:	4659      	mov	r1, fp
 80113f6:	f7ef f917 	bl	8000628 <__aeabi_dmul>
 80113fa:	460b      	mov	r3, r1
 80113fc:	4303      	orrs	r3, r0
 80113fe:	bf08      	it	eq
 8011400:	2322      	moveq	r3, #34	; 0x22
 8011402:	4682      	mov	sl, r0
 8011404:	468b      	mov	fp, r1
 8011406:	bf08      	it	eq
 8011408:	6023      	streq	r3, [r4, #0]
 801140a:	e62b      	b.n	8011064 <_strtod_l+0x4ac>
 801140c:	f04f 32ff 	mov.w	r2, #4294967295
 8011410:	fa02 f303 	lsl.w	r3, r2, r3
 8011414:	ea03 0a0a 	and.w	sl, r3, sl
 8011418:	e6de      	b.n	80111d8 <_strtod_l+0x620>
 801141a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801141e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011422:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011426:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801142a:	fa01 f308 	lsl.w	r3, r1, r8
 801142e:	930c      	str	r3, [sp, #48]	; 0x30
 8011430:	9111      	str	r1, [sp, #68]	; 0x44
 8011432:	e741      	b.n	80112b8 <_strtod_l+0x700>
 8011434:	2300      	movs	r3, #0
 8011436:	930c      	str	r3, [sp, #48]	; 0x30
 8011438:	2301      	movs	r3, #1
 801143a:	9311      	str	r3, [sp, #68]	; 0x44
 801143c:	e73c      	b.n	80112b8 <_strtod_l+0x700>
 801143e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011440:	4642      	mov	r2, r8
 8011442:	4620      	mov	r0, r4
 8011444:	f001 faca 	bl	80129dc <__lshift>
 8011448:	901e      	str	r0, [sp, #120]	; 0x78
 801144a:	2800      	cmp	r0, #0
 801144c:	f47f af66 	bne.w	801131c <_strtod_l+0x764>
 8011450:	e5fe      	b.n	8011050 <_strtod_l+0x498>
 8011452:	465f      	mov	r7, fp
 8011454:	d16e      	bne.n	8011534 <_strtod_l+0x97c>
 8011456:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011458:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801145c:	b342      	cbz	r2, 80114b0 <_strtod_l+0x8f8>
 801145e:	4a32      	ldr	r2, [pc, #200]	; (8011528 <_strtod_l+0x970>)
 8011460:	4293      	cmp	r3, r2
 8011462:	d128      	bne.n	80114b6 <_strtod_l+0x8fe>
 8011464:	9b04      	ldr	r3, [sp, #16]
 8011466:	4650      	mov	r0, sl
 8011468:	b1eb      	cbz	r3, 80114a6 <_strtod_l+0x8ee>
 801146a:	4a2d      	ldr	r2, [pc, #180]	; (8011520 <_strtod_l+0x968>)
 801146c:	403a      	ands	r2, r7
 801146e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011472:	f04f 31ff 	mov.w	r1, #4294967295
 8011476:	d819      	bhi.n	80114ac <_strtod_l+0x8f4>
 8011478:	0d12      	lsrs	r2, r2, #20
 801147a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801147e:	fa01 f303 	lsl.w	r3, r1, r3
 8011482:	4298      	cmp	r0, r3
 8011484:	d117      	bne.n	80114b6 <_strtod_l+0x8fe>
 8011486:	4b29      	ldr	r3, [pc, #164]	; (801152c <_strtod_l+0x974>)
 8011488:	429f      	cmp	r7, r3
 801148a:	d102      	bne.n	8011492 <_strtod_l+0x8da>
 801148c:	3001      	adds	r0, #1
 801148e:	f43f addf 	beq.w	8011050 <_strtod_l+0x498>
 8011492:	4b23      	ldr	r3, [pc, #140]	; (8011520 <_strtod_l+0x968>)
 8011494:	403b      	ands	r3, r7
 8011496:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801149a:	f04f 0a00 	mov.w	sl, #0
 801149e:	9b04      	ldr	r3, [sp, #16]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d1a0      	bne.n	80113e6 <_strtod_l+0x82e>
 80114a4:	e5de      	b.n	8011064 <_strtod_l+0x4ac>
 80114a6:	f04f 33ff 	mov.w	r3, #4294967295
 80114aa:	e7ea      	b.n	8011482 <_strtod_l+0x8ca>
 80114ac:	460b      	mov	r3, r1
 80114ae:	e7e8      	b.n	8011482 <_strtod_l+0x8ca>
 80114b0:	ea53 030a 	orrs.w	r3, r3, sl
 80114b4:	d088      	beq.n	80113c8 <_strtod_l+0x810>
 80114b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114b8:	b1db      	cbz	r3, 80114f2 <_strtod_l+0x93a>
 80114ba:	423b      	tst	r3, r7
 80114bc:	d0ef      	beq.n	801149e <_strtod_l+0x8e6>
 80114be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80114c0:	9a04      	ldr	r2, [sp, #16]
 80114c2:	4650      	mov	r0, sl
 80114c4:	4659      	mov	r1, fp
 80114c6:	b1c3      	cbz	r3, 80114fa <_strtod_l+0x942>
 80114c8:	f7ff fb59 	bl	8010b7e <sulp>
 80114cc:	4602      	mov	r2, r0
 80114ce:	460b      	mov	r3, r1
 80114d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80114d4:	f7ee fef2 	bl	80002bc <__adddf3>
 80114d8:	4682      	mov	sl, r0
 80114da:	468b      	mov	fp, r1
 80114dc:	e7df      	b.n	801149e <_strtod_l+0x8e6>
 80114de:	4013      	ands	r3, r2
 80114e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80114e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80114e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80114ec:	f04f 3aff 	mov.w	sl, #4294967295
 80114f0:	e7d5      	b.n	801149e <_strtod_l+0x8e6>
 80114f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114f4:	ea13 0f0a 	tst.w	r3, sl
 80114f8:	e7e0      	b.n	80114bc <_strtod_l+0x904>
 80114fa:	f7ff fb40 	bl	8010b7e <sulp>
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011506:	f7ee fed7 	bl	80002b8 <__aeabi_dsub>
 801150a:	2200      	movs	r2, #0
 801150c:	2300      	movs	r3, #0
 801150e:	4682      	mov	sl, r0
 8011510:	468b      	mov	fp, r1
 8011512:	f7ef faf1 	bl	8000af8 <__aeabi_dcmpeq>
 8011516:	2800      	cmp	r0, #0
 8011518:	d0c1      	beq.n	801149e <_strtod_l+0x8e6>
 801151a:	e60e      	b.n	801113a <_strtod_l+0x582>
 801151c:	fffffc02 	.word	0xfffffc02
 8011520:	7ff00000 	.word	0x7ff00000
 8011524:	39500000 	.word	0x39500000
 8011528:	000fffff 	.word	0x000fffff
 801152c:	7fefffff 	.word	0x7fefffff
 8011530:	08015488 	.word	0x08015488
 8011534:	4631      	mov	r1, r6
 8011536:	4628      	mov	r0, r5
 8011538:	f001 fc38 	bl	8012dac <__ratio>
 801153c:	ec59 8b10 	vmov	r8, r9, d0
 8011540:	ee10 0a10 	vmov	r0, s0
 8011544:	2200      	movs	r2, #0
 8011546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801154a:	4649      	mov	r1, r9
 801154c:	f7ef fae8 	bl	8000b20 <__aeabi_dcmple>
 8011550:	2800      	cmp	r0, #0
 8011552:	d07c      	beq.n	801164e <_strtod_l+0xa96>
 8011554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011556:	2b00      	cmp	r3, #0
 8011558:	d04c      	beq.n	80115f4 <_strtod_l+0xa3c>
 801155a:	4b95      	ldr	r3, [pc, #596]	; (80117b0 <_strtod_l+0xbf8>)
 801155c:	2200      	movs	r2, #0
 801155e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011562:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80117b0 <_strtod_l+0xbf8>
 8011566:	f04f 0800 	mov.w	r8, #0
 801156a:	4b92      	ldr	r3, [pc, #584]	; (80117b4 <_strtod_l+0xbfc>)
 801156c:	403b      	ands	r3, r7
 801156e:	9311      	str	r3, [sp, #68]	; 0x44
 8011570:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011572:	4b91      	ldr	r3, [pc, #580]	; (80117b8 <_strtod_l+0xc00>)
 8011574:	429a      	cmp	r2, r3
 8011576:	f040 80b2 	bne.w	80116de <_strtod_l+0xb26>
 801157a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801157e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011582:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011586:	ec4b ab10 	vmov	d0, sl, fp
 801158a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801158e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011592:	f001 fb33 	bl	8012bfc <__ulp>
 8011596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801159a:	ec53 2b10 	vmov	r2, r3, d0
 801159e:	f7ef f843 	bl	8000628 <__aeabi_dmul>
 80115a2:	4652      	mov	r2, sl
 80115a4:	465b      	mov	r3, fp
 80115a6:	f7ee fe89 	bl	80002bc <__adddf3>
 80115aa:	460b      	mov	r3, r1
 80115ac:	4981      	ldr	r1, [pc, #516]	; (80117b4 <_strtod_l+0xbfc>)
 80115ae:	4a83      	ldr	r2, [pc, #524]	; (80117bc <_strtod_l+0xc04>)
 80115b0:	4019      	ands	r1, r3
 80115b2:	4291      	cmp	r1, r2
 80115b4:	4682      	mov	sl, r0
 80115b6:	d95e      	bls.n	8011676 <_strtod_l+0xabe>
 80115b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80115be:	4293      	cmp	r3, r2
 80115c0:	d103      	bne.n	80115ca <_strtod_l+0xa12>
 80115c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115c4:	3301      	adds	r3, #1
 80115c6:	f43f ad43 	beq.w	8011050 <_strtod_l+0x498>
 80115ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80117c8 <_strtod_l+0xc10>
 80115ce:	f04f 3aff 	mov.w	sl, #4294967295
 80115d2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80115d4:	4620      	mov	r0, r4
 80115d6:	f000 ffe5 	bl	80125a4 <_Bfree>
 80115da:	9907      	ldr	r1, [sp, #28]
 80115dc:	4620      	mov	r0, r4
 80115de:	f000 ffe1 	bl	80125a4 <_Bfree>
 80115e2:	4631      	mov	r1, r6
 80115e4:	4620      	mov	r0, r4
 80115e6:	f000 ffdd 	bl	80125a4 <_Bfree>
 80115ea:	4629      	mov	r1, r5
 80115ec:	4620      	mov	r0, r4
 80115ee:	f000 ffd9 	bl	80125a4 <_Bfree>
 80115f2:	e613      	b.n	801121c <_strtod_l+0x664>
 80115f4:	f1ba 0f00 	cmp.w	sl, #0
 80115f8:	d11b      	bne.n	8011632 <_strtod_l+0xa7a>
 80115fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115fe:	b9f3      	cbnz	r3, 801163e <_strtod_l+0xa86>
 8011600:	4b6b      	ldr	r3, [pc, #428]	; (80117b0 <_strtod_l+0xbf8>)
 8011602:	2200      	movs	r2, #0
 8011604:	4640      	mov	r0, r8
 8011606:	4649      	mov	r1, r9
 8011608:	f7ef fa80 	bl	8000b0c <__aeabi_dcmplt>
 801160c:	b9d0      	cbnz	r0, 8011644 <_strtod_l+0xa8c>
 801160e:	4640      	mov	r0, r8
 8011610:	4649      	mov	r1, r9
 8011612:	4b6b      	ldr	r3, [pc, #428]	; (80117c0 <_strtod_l+0xc08>)
 8011614:	2200      	movs	r2, #0
 8011616:	f7ef f807 	bl	8000628 <__aeabi_dmul>
 801161a:	4680      	mov	r8, r0
 801161c:	4689      	mov	r9, r1
 801161e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011622:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011626:	931b      	str	r3, [sp, #108]	; 0x6c
 8011628:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801162c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011630:	e79b      	b.n	801156a <_strtod_l+0x9b2>
 8011632:	f1ba 0f01 	cmp.w	sl, #1
 8011636:	d102      	bne.n	801163e <_strtod_l+0xa86>
 8011638:	2f00      	cmp	r7, #0
 801163a:	f43f ad7e 	beq.w	801113a <_strtod_l+0x582>
 801163e:	4b61      	ldr	r3, [pc, #388]	; (80117c4 <_strtod_l+0xc0c>)
 8011640:	2200      	movs	r2, #0
 8011642:	e78c      	b.n	801155e <_strtod_l+0x9a6>
 8011644:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80117c0 <_strtod_l+0xc08>
 8011648:	f04f 0800 	mov.w	r8, #0
 801164c:	e7e7      	b.n	801161e <_strtod_l+0xa66>
 801164e:	4b5c      	ldr	r3, [pc, #368]	; (80117c0 <_strtod_l+0xc08>)
 8011650:	4640      	mov	r0, r8
 8011652:	4649      	mov	r1, r9
 8011654:	2200      	movs	r2, #0
 8011656:	f7ee ffe7 	bl	8000628 <__aeabi_dmul>
 801165a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801165c:	4680      	mov	r8, r0
 801165e:	4689      	mov	r9, r1
 8011660:	b933      	cbnz	r3, 8011670 <_strtod_l+0xab8>
 8011662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011666:	9012      	str	r0, [sp, #72]	; 0x48
 8011668:	9313      	str	r3, [sp, #76]	; 0x4c
 801166a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801166e:	e7dd      	b.n	801162c <_strtod_l+0xa74>
 8011670:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011674:	e7f9      	b.n	801166a <_strtod_l+0xab2>
 8011676:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801167a:	9b04      	ldr	r3, [sp, #16]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d1a8      	bne.n	80115d2 <_strtod_l+0xa1a>
 8011680:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011684:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011686:	0d1b      	lsrs	r3, r3, #20
 8011688:	051b      	lsls	r3, r3, #20
 801168a:	429a      	cmp	r2, r3
 801168c:	d1a1      	bne.n	80115d2 <_strtod_l+0xa1a>
 801168e:	4640      	mov	r0, r8
 8011690:	4649      	mov	r1, r9
 8011692:	f7ef fb13 	bl	8000cbc <__aeabi_d2lz>
 8011696:	f7ee ff99 	bl	80005cc <__aeabi_l2d>
 801169a:	4602      	mov	r2, r0
 801169c:	460b      	mov	r3, r1
 801169e:	4640      	mov	r0, r8
 80116a0:	4649      	mov	r1, r9
 80116a2:	f7ee fe09 	bl	80002b8 <__aeabi_dsub>
 80116a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80116a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116ac:	ea43 030a 	orr.w	r3, r3, sl
 80116b0:	4313      	orrs	r3, r2
 80116b2:	4680      	mov	r8, r0
 80116b4:	4689      	mov	r9, r1
 80116b6:	d053      	beq.n	8011760 <_strtod_l+0xba8>
 80116b8:	a335      	add	r3, pc, #212	; (adr r3, 8011790 <_strtod_l+0xbd8>)
 80116ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116be:	f7ef fa25 	bl	8000b0c <__aeabi_dcmplt>
 80116c2:	2800      	cmp	r0, #0
 80116c4:	f47f acce 	bne.w	8011064 <_strtod_l+0x4ac>
 80116c8:	a333      	add	r3, pc, #204	; (adr r3, 8011798 <_strtod_l+0xbe0>)
 80116ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ce:	4640      	mov	r0, r8
 80116d0:	4649      	mov	r1, r9
 80116d2:	f7ef fa39 	bl	8000b48 <__aeabi_dcmpgt>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	f43f af7b 	beq.w	80115d2 <_strtod_l+0xa1a>
 80116dc:	e4c2      	b.n	8011064 <_strtod_l+0x4ac>
 80116de:	9b04      	ldr	r3, [sp, #16]
 80116e0:	b333      	cbz	r3, 8011730 <_strtod_l+0xb78>
 80116e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80116e8:	d822      	bhi.n	8011730 <_strtod_l+0xb78>
 80116ea:	a32d      	add	r3, pc, #180	; (adr r3, 80117a0 <_strtod_l+0xbe8>)
 80116ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f0:	4640      	mov	r0, r8
 80116f2:	4649      	mov	r1, r9
 80116f4:	f7ef fa14 	bl	8000b20 <__aeabi_dcmple>
 80116f8:	b1a0      	cbz	r0, 8011724 <_strtod_l+0xb6c>
 80116fa:	4649      	mov	r1, r9
 80116fc:	4640      	mov	r0, r8
 80116fe:	f7ef fa55 	bl	8000bac <__aeabi_d2uiz>
 8011702:	2801      	cmp	r0, #1
 8011704:	bf38      	it	cc
 8011706:	2001      	movcc	r0, #1
 8011708:	f7ee ff14 	bl	8000534 <__aeabi_ui2d>
 801170c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801170e:	4680      	mov	r8, r0
 8011710:	4689      	mov	r9, r1
 8011712:	bb13      	cbnz	r3, 801175a <_strtod_l+0xba2>
 8011714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011718:	9014      	str	r0, [sp, #80]	; 0x50
 801171a:	9315      	str	r3, [sp, #84]	; 0x54
 801171c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011720:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011726:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011728:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801172c:	1a9b      	subs	r3, r3, r2
 801172e:	930d      	str	r3, [sp, #52]	; 0x34
 8011730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011734:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011738:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801173c:	f001 fa5e 	bl	8012bfc <__ulp>
 8011740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011744:	ec53 2b10 	vmov	r2, r3, d0
 8011748:	f7ee ff6e 	bl	8000628 <__aeabi_dmul>
 801174c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011750:	f7ee fdb4 	bl	80002bc <__adddf3>
 8011754:	4682      	mov	sl, r0
 8011756:	468b      	mov	fp, r1
 8011758:	e78f      	b.n	801167a <_strtod_l+0xac2>
 801175a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801175e:	e7dd      	b.n	801171c <_strtod_l+0xb64>
 8011760:	a311      	add	r3, pc, #68	; (adr r3, 80117a8 <_strtod_l+0xbf0>)
 8011762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011766:	f7ef f9d1 	bl	8000b0c <__aeabi_dcmplt>
 801176a:	e7b4      	b.n	80116d6 <_strtod_l+0xb1e>
 801176c:	2300      	movs	r3, #0
 801176e:	930e      	str	r3, [sp, #56]	; 0x38
 8011770:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011772:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011774:	6013      	str	r3, [r2, #0]
 8011776:	f7ff ba65 	b.w	8010c44 <_strtod_l+0x8c>
 801177a:	2b65      	cmp	r3, #101	; 0x65
 801177c:	f43f ab5d 	beq.w	8010e3a <_strtod_l+0x282>
 8011780:	2b45      	cmp	r3, #69	; 0x45
 8011782:	f43f ab5a 	beq.w	8010e3a <_strtod_l+0x282>
 8011786:	2201      	movs	r2, #1
 8011788:	f7ff bb92 	b.w	8010eb0 <_strtod_l+0x2f8>
 801178c:	f3af 8000 	nop.w
 8011790:	94a03595 	.word	0x94a03595
 8011794:	3fdfffff 	.word	0x3fdfffff
 8011798:	35afe535 	.word	0x35afe535
 801179c:	3fe00000 	.word	0x3fe00000
 80117a0:	ffc00000 	.word	0xffc00000
 80117a4:	41dfffff 	.word	0x41dfffff
 80117a8:	94a03595 	.word	0x94a03595
 80117ac:	3fcfffff 	.word	0x3fcfffff
 80117b0:	3ff00000 	.word	0x3ff00000
 80117b4:	7ff00000 	.word	0x7ff00000
 80117b8:	7fe00000 	.word	0x7fe00000
 80117bc:	7c9fffff 	.word	0x7c9fffff
 80117c0:	3fe00000 	.word	0x3fe00000
 80117c4:	bff00000 	.word	0xbff00000
 80117c8:	7fefffff 	.word	0x7fefffff

080117cc <strtod>:
 80117cc:	460a      	mov	r2, r1
 80117ce:	4601      	mov	r1, r0
 80117d0:	4802      	ldr	r0, [pc, #8]	; (80117dc <strtod+0x10>)
 80117d2:	4b03      	ldr	r3, [pc, #12]	; (80117e0 <strtod+0x14>)
 80117d4:	6800      	ldr	r0, [r0, #0]
 80117d6:	f7ff b9ef 	b.w	8010bb8 <_strtod_l>
 80117da:	bf00      	nop
 80117dc:	20000160 	.word	0x20000160
 80117e0:	200001c8 	.word	0x200001c8

080117e4 <__swbuf_r>:
 80117e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117e6:	460e      	mov	r6, r1
 80117e8:	4614      	mov	r4, r2
 80117ea:	4605      	mov	r5, r0
 80117ec:	b118      	cbz	r0, 80117f6 <__swbuf_r+0x12>
 80117ee:	6983      	ldr	r3, [r0, #24]
 80117f0:	b90b      	cbnz	r3, 80117f6 <__swbuf_r+0x12>
 80117f2:	f000 f9f3 	bl	8011bdc <__sinit>
 80117f6:	4b21      	ldr	r3, [pc, #132]	; (801187c <__swbuf_r+0x98>)
 80117f8:	429c      	cmp	r4, r3
 80117fa:	d12b      	bne.n	8011854 <__swbuf_r+0x70>
 80117fc:	686c      	ldr	r4, [r5, #4]
 80117fe:	69a3      	ldr	r3, [r4, #24]
 8011800:	60a3      	str	r3, [r4, #8]
 8011802:	89a3      	ldrh	r3, [r4, #12]
 8011804:	071a      	lsls	r2, r3, #28
 8011806:	d52f      	bpl.n	8011868 <__swbuf_r+0x84>
 8011808:	6923      	ldr	r3, [r4, #16]
 801180a:	b36b      	cbz	r3, 8011868 <__swbuf_r+0x84>
 801180c:	6923      	ldr	r3, [r4, #16]
 801180e:	6820      	ldr	r0, [r4, #0]
 8011810:	1ac0      	subs	r0, r0, r3
 8011812:	6963      	ldr	r3, [r4, #20]
 8011814:	b2f6      	uxtb	r6, r6
 8011816:	4283      	cmp	r3, r0
 8011818:	4637      	mov	r7, r6
 801181a:	dc04      	bgt.n	8011826 <__swbuf_r+0x42>
 801181c:	4621      	mov	r1, r4
 801181e:	4628      	mov	r0, r5
 8011820:	f000 f948 	bl	8011ab4 <_fflush_r>
 8011824:	bb30      	cbnz	r0, 8011874 <__swbuf_r+0x90>
 8011826:	68a3      	ldr	r3, [r4, #8]
 8011828:	3b01      	subs	r3, #1
 801182a:	60a3      	str	r3, [r4, #8]
 801182c:	6823      	ldr	r3, [r4, #0]
 801182e:	1c5a      	adds	r2, r3, #1
 8011830:	6022      	str	r2, [r4, #0]
 8011832:	701e      	strb	r6, [r3, #0]
 8011834:	6963      	ldr	r3, [r4, #20]
 8011836:	3001      	adds	r0, #1
 8011838:	4283      	cmp	r3, r0
 801183a:	d004      	beq.n	8011846 <__swbuf_r+0x62>
 801183c:	89a3      	ldrh	r3, [r4, #12]
 801183e:	07db      	lsls	r3, r3, #31
 8011840:	d506      	bpl.n	8011850 <__swbuf_r+0x6c>
 8011842:	2e0a      	cmp	r6, #10
 8011844:	d104      	bne.n	8011850 <__swbuf_r+0x6c>
 8011846:	4621      	mov	r1, r4
 8011848:	4628      	mov	r0, r5
 801184a:	f000 f933 	bl	8011ab4 <_fflush_r>
 801184e:	b988      	cbnz	r0, 8011874 <__swbuf_r+0x90>
 8011850:	4638      	mov	r0, r7
 8011852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011854:	4b0a      	ldr	r3, [pc, #40]	; (8011880 <__swbuf_r+0x9c>)
 8011856:	429c      	cmp	r4, r3
 8011858:	d101      	bne.n	801185e <__swbuf_r+0x7a>
 801185a:	68ac      	ldr	r4, [r5, #8]
 801185c:	e7cf      	b.n	80117fe <__swbuf_r+0x1a>
 801185e:	4b09      	ldr	r3, [pc, #36]	; (8011884 <__swbuf_r+0xa0>)
 8011860:	429c      	cmp	r4, r3
 8011862:	bf08      	it	eq
 8011864:	68ec      	ldreq	r4, [r5, #12]
 8011866:	e7ca      	b.n	80117fe <__swbuf_r+0x1a>
 8011868:	4621      	mov	r1, r4
 801186a:	4628      	mov	r0, r5
 801186c:	f000 f81e 	bl	80118ac <__swsetup_r>
 8011870:	2800      	cmp	r0, #0
 8011872:	d0cb      	beq.n	801180c <__swbuf_r+0x28>
 8011874:	f04f 37ff 	mov.w	r7, #4294967295
 8011878:	e7ea      	b.n	8011850 <__swbuf_r+0x6c>
 801187a:	bf00      	nop
 801187c:	080154d0 	.word	0x080154d0
 8011880:	080154f0 	.word	0x080154f0
 8011884:	080154b0 	.word	0x080154b0

08011888 <_write_r>:
 8011888:	b538      	push	{r3, r4, r5, lr}
 801188a:	4d07      	ldr	r5, [pc, #28]	; (80118a8 <_write_r+0x20>)
 801188c:	4604      	mov	r4, r0
 801188e:	4608      	mov	r0, r1
 8011890:	4611      	mov	r1, r2
 8011892:	2200      	movs	r2, #0
 8011894:	602a      	str	r2, [r5, #0]
 8011896:	461a      	mov	r2, r3
 8011898:	f7f1 fa89 	bl	8002dae <_write>
 801189c:	1c43      	adds	r3, r0, #1
 801189e:	d102      	bne.n	80118a6 <_write_r+0x1e>
 80118a0:	682b      	ldr	r3, [r5, #0]
 80118a2:	b103      	cbz	r3, 80118a6 <_write_r+0x1e>
 80118a4:	6023      	str	r3, [r4, #0]
 80118a6:	bd38      	pop	{r3, r4, r5, pc}
 80118a8:	200034d4 	.word	0x200034d4

080118ac <__swsetup_r>:
 80118ac:	4b32      	ldr	r3, [pc, #200]	; (8011978 <__swsetup_r+0xcc>)
 80118ae:	b570      	push	{r4, r5, r6, lr}
 80118b0:	681d      	ldr	r5, [r3, #0]
 80118b2:	4606      	mov	r6, r0
 80118b4:	460c      	mov	r4, r1
 80118b6:	b125      	cbz	r5, 80118c2 <__swsetup_r+0x16>
 80118b8:	69ab      	ldr	r3, [r5, #24]
 80118ba:	b913      	cbnz	r3, 80118c2 <__swsetup_r+0x16>
 80118bc:	4628      	mov	r0, r5
 80118be:	f000 f98d 	bl	8011bdc <__sinit>
 80118c2:	4b2e      	ldr	r3, [pc, #184]	; (801197c <__swsetup_r+0xd0>)
 80118c4:	429c      	cmp	r4, r3
 80118c6:	d10f      	bne.n	80118e8 <__swsetup_r+0x3c>
 80118c8:	686c      	ldr	r4, [r5, #4]
 80118ca:	89a3      	ldrh	r3, [r4, #12]
 80118cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118d0:	0719      	lsls	r1, r3, #28
 80118d2:	d42c      	bmi.n	801192e <__swsetup_r+0x82>
 80118d4:	06dd      	lsls	r5, r3, #27
 80118d6:	d411      	bmi.n	80118fc <__swsetup_r+0x50>
 80118d8:	2309      	movs	r3, #9
 80118da:	6033      	str	r3, [r6, #0]
 80118dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80118e0:	81a3      	strh	r3, [r4, #12]
 80118e2:	f04f 30ff 	mov.w	r0, #4294967295
 80118e6:	e03e      	b.n	8011966 <__swsetup_r+0xba>
 80118e8:	4b25      	ldr	r3, [pc, #148]	; (8011980 <__swsetup_r+0xd4>)
 80118ea:	429c      	cmp	r4, r3
 80118ec:	d101      	bne.n	80118f2 <__swsetup_r+0x46>
 80118ee:	68ac      	ldr	r4, [r5, #8]
 80118f0:	e7eb      	b.n	80118ca <__swsetup_r+0x1e>
 80118f2:	4b24      	ldr	r3, [pc, #144]	; (8011984 <__swsetup_r+0xd8>)
 80118f4:	429c      	cmp	r4, r3
 80118f6:	bf08      	it	eq
 80118f8:	68ec      	ldreq	r4, [r5, #12]
 80118fa:	e7e6      	b.n	80118ca <__swsetup_r+0x1e>
 80118fc:	0758      	lsls	r0, r3, #29
 80118fe:	d512      	bpl.n	8011926 <__swsetup_r+0x7a>
 8011900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011902:	b141      	cbz	r1, 8011916 <__swsetup_r+0x6a>
 8011904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011908:	4299      	cmp	r1, r3
 801190a:	d002      	beq.n	8011912 <__swsetup_r+0x66>
 801190c:	4630      	mov	r0, r6
 801190e:	f7fe fdd3 	bl	80104b8 <_free_r>
 8011912:	2300      	movs	r3, #0
 8011914:	6363      	str	r3, [r4, #52]	; 0x34
 8011916:	89a3      	ldrh	r3, [r4, #12]
 8011918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801191c:	81a3      	strh	r3, [r4, #12]
 801191e:	2300      	movs	r3, #0
 8011920:	6063      	str	r3, [r4, #4]
 8011922:	6923      	ldr	r3, [r4, #16]
 8011924:	6023      	str	r3, [r4, #0]
 8011926:	89a3      	ldrh	r3, [r4, #12]
 8011928:	f043 0308 	orr.w	r3, r3, #8
 801192c:	81a3      	strh	r3, [r4, #12]
 801192e:	6923      	ldr	r3, [r4, #16]
 8011930:	b94b      	cbnz	r3, 8011946 <__swsetup_r+0x9a>
 8011932:	89a3      	ldrh	r3, [r4, #12]
 8011934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801193c:	d003      	beq.n	8011946 <__swsetup_r+0x9a>
 801193e:	4621      	mov	r1, r4
 8011940:	4630      	mov	r0, r6
 8011942:	f000 fd91 	bl	8012468 <__smakebuf_r>
 8011946:	89a0      	ldrh	r0, [r4, #12]
 8011948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801194c:	f010 0301 	ands.w	r3, r0, #1
 8011950:	d00a      	beq.n	8011968 <__swsetup_r+0xbc>
 8011952:	2300      	movs	r3, #0
 8011954:	60a3      	str	r3, [r4, #8]
 8011956:	6963      	ldr	r3, [r4, #20]
 8011958:	425b      	negs	r3, r3
 801195a:	61a3      	str	r3, [r4, #24]
 801195c:	6923      	ldr	r3, [r4, #16]
 801195e:	b943      	cbnz	r3, 8011972 <__swsetup_r+0xc6>
 8011960:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011964:	d1ba      	bne.n	80118dc <__swsetup_r+0x30>
 8011966:	bd70      	pop	{r4, r5, r6, pc}
 8011968:	0781      	lsls	r1, r0, #30
 801196a:	bf58      	it	pl
 801196c:	6963      	ldrpl	r3, [r4, #20]
 801196e:	60a3      	str	r3, [r4, #8]
 8011970:	e7f4      	b.n	801195c <__swsetup_r+0xb0>
 8011972:	2000      	movs	r0, #0
 8011974:	e7f7      	b.n	8011966 <__swsetup_r+0xba>
 8011976:	bf00      	nop
 8011978:	20000160 	.word	0x20000160
 801197c:	080154d0 	.word	0x080154d0
 8011980:	080154f0 	.word	0x080154f0
 8011984:	080154b0 	.word	0x080154b0

08011988 <_close_r>:
 8011988:	b538      	push	{r3, r4, r5, lr}
 801198a:	4d06      	ldr	r5, [pc, #24]	; (80119a4 <_close_r+0x1c>)
 801198c:	2300      	movs	r3, #0
 801198e:	4604      	mov	r4, r0
 8011990:	4608      	mov	r0, r1
 8011992:	602b      	str	r3, [r5, #0]
 8011994:	f7f1 fa27 	bl	8002de6 <_close>
 8011998:	1c43      	adds	r3, r0, #1
 801199a:	d102      	bne.n	80119a2 <_close_r+0x1a>
 801199c:	682b      	ldr	r3, [r5, #0]
 801199e:	b103      	cbz	r3, 80119a2 <_close_r+0x1a>
 80119a0:	6023      	str	r3, [r4, #0]
 80119a2:	bd38      	pop	{r3, r4, r5, pc}
 80119a4:	200034d4 	.word	0x200034d4

080119a8 <__sflush_r>:
 80119a8:	898a      	ldrh	r2, [r1, #12]
 80119aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ae:	4605      	mov	r5, r0
 80119b0:	0710      	lsls	r0, r2, #28
 80119b2:	460c      	mov	r4, r1
 80119b4:	d458      	bmi.n	8011a68 <__sflush_r+0xc0>
 80119b6:	684b      	ldr	r3, [r1, #4]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	dc05      	bgt.n	80119c8 <__sflush_r+0x20>
 80119bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119be:	2b00      	cmp	r3, #0
 80119c0:	dc02      	bgt.n	80119c8 <__sflush_r+0x20>
 80119c2:	2000      	movs	r0, #0
 80119c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119ca:	2e00      	cmp	r6, #0
 80119cc:	d0f9      	beq.n	80119c2 <__sflush_r+0x1a>
 80119ce:	2300      	movs	r3, #0
 80119d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119d4:	682f      	ldr	r7, [r5, #0]
 80119d6:	602b      	str	r3, [r5, #0]
 80119d8:	d032      	beq.n	8011a40 <__sflush_r+0x98>
 80119da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119dc:	89a3      	ldrh	r3, [r4, #12]
 80119de:	075a      	lsls	r2, r3, #29
 80119e0:	d505      	bpl.n	80119ee <__sflush_r+0x46>
 80119e2:	6863      	ldr	r3, [r4, #4]
 80119e4:	1ac0      	subs	r0, r0, r3
 80119e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119e8:	b10b      	cbz	r3, 80119ee <__sflush_r+0x46>
 80119ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80119ec:	1ac0      	subs	r0, r0, r3
 80119ee:	2300      	movs	r3, #0
 80119f0:	4602      	mov	r2, r0
 80119f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119f4:	6a21      	ldr	r1, [r4, #32]
 80119f6:	4628      	mov	r0, r5
 80119f8:	47b0      	blx	r6
 80119fa:	1c43      	adds	r3, r0, #1
 80119fc:	89a3      	ldrh	r3, [r4, #12]
 80119fe:	d106      	bne.n	8011a0e <__sflush_r+0x66>
 8011a00:	6829      	ldr	r1, [r5, #0]
 8011a02:	291d      	cmp	r1, #29
 8011a04:	d82c      	bhi.n	8011a60 <__sflush_r+0xb8>
 8011a06:	4a2a      	ldr	r2, [pc, #168]	; (8011ab0 <__sflush_r+0x108>)
 8011a08:	40ca      	lsrs	r2, r1
 8011a0a:	07d6      	lsls	r6, r2, #31
 8011a0c:	d528      	bpl.n	8011a60 <__sflush_r+0xb8>
 8011a0e:	2200      	movs	r2, #0
 8011a10:	6062      	str	r2, [r4, #4]
 8011a12:	04d9      	lsls	r1, r3, #19
 8011a14:	6922      	ldr	r2, [r4, #16]
 8011a16:	6022      	str	r2, [r4, #0]
 8011a18:	d504      	bpl.n	8011a24 <__sflush_r+0x7c>
 8011a1a:	1c42      	adds	r2, r0, #1
 8011a1c:	d101      	bne.n	8011a22 <__sflush_r+0x7a>
 8011a1e:	682b      	ldr	r3, [r5, #0]
 8011a20:	b903      	cbnz	r3, 8011a24 <__sflush_r+0x7c>
 8011a22:	6560      	str	r0, [r4, #84]	; 0x54
 8011a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a26:	602f      	str	r7, [r5, #0]
 8011a28:	2900      	cmp	r1, #0
 8011a2a:	d0ca      	beq.n	80119c2 <__sflush_r+0x1a>
 8011a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a30:	4299      	cmp	r1, r3
 8011a32:	d002      	beq.n	8011a3a <__sflush_r+0x92>
 8011a34:	4628      	mov	r0, r5
 8011a36:	f7fe fd3f 	bl	80104b8 <_free_r>
 8011a3a:	2000      	movs	r0, #0
 8011a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8011a3e:	e7c1      	b.n	80119c4 <__sflush_r+0x1c>
 8011a40:	6a21      	ldr	r1, [r4, #32]
 8011a42:	2301      	movs	r3, #1
 8011a44:	4628      	mov	r0, r5
 8011a46:	47b0      	blx	r6
 8011a48:	1c41      	adds	r1, r0, #1
 8011a4a:	d1c7      	bne.n	80119dc <__sflush_r+0x34>
 8011a4c:	682b      	ldr	r3, [r5, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d0c4      	beq.n	80119dc <__sflush_r+0x34>
 8011a52:	2b1d      	cmp	r3, #29
 8011a54:	d001      	beq.n	8011a5a <__sflush_r+0xb2>
 8011a56:	2b16      	cmp	r3, #22
 8011a58:	d101      	bne.n	8011a5e <__sflush_r+0xb6>
 8011a5a:	602f      	str	r7, [r5, #0]
 8011a5c:	e7b1      	b.n	80119c2 <__sflush_r+0x1a>
 8011a5e:	89a3      	ldrh	r3, [r4, #12]
 8011a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a64:	81a3      	strh	r3, [r4, #12]
 8011a66:	e7ad      	b.n	80119c4 <__sflush_r+0x1c>
 8011a68:	690f      	ldr	r7, [r1, #16]
 8011a6a:	2f00      	cmp	r7, #0
 8011a6c:	d0a9      	beq.n	80119c2 <__sflush_r+0x1a>
 8011a6e:	0793      	lsls	r3, r2, #30
 8011a70:	680e      	ldr	r6, [r1, #0]
 8011a72:	bf08      	it	eq
 8011a74:	694b      	ldreq	r3, [r1, #20]
 8011a76:	600f      	str	r7, [r1, #0]
 8011a78:	bf18      	it	ne
 8011a7a:	2300      	movne	r3, #0
 8011a7c:	eba6 0807 	sub.w	r8, r6, r7
 8011a80:	608b      	str	r3, [r1, #8]
 8011a82:	f1b8 0f00 	cmp.w	r8, #0
 8011a86:	dd9c      	ble.n	80119c2 <__sflush_r+0x1a>
 8011a88:	6a21      	ldr	r1, [r4, #32]
 8011a8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a8c:	4643      	mov	r3, r8
 8011a8e:	463a      	mov	r2, r7
 8011a90:	4628      	mov	r0, r5
 8011a92:	47b0      	blx	r6
 8011a94:	2800      	cmp	r0, #0
 8011a96:	dc06      	bgt.n	8011aa6 <__sflush_r+0xfe>
 8011a98:	89a3      	ldrh	r3, [r4, #12]
 8011a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a9e:	81a3      	strh	r3, [r4, #12]
 8011aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8011aa4:	e78e      	b.n	80119c4 <__sflush_r+0x1c>
 8011aa6:	4407      	add	r7, r0
 8011aa8:	eba8 0800 	sub.w	r8, r8, r0
 8011aac:	e7e9      	b.n	8011a82 <__sflush_r+0xda>
 8011aae:	bf00      	nop
 8011ab0:	20400001 	.word	0x20400001

08011ab4 <_fflush_r>:
 8011ab4:	b538      	push	{r3, r4, r5, lr}
 8011ab6:	690b      	ldr	r3, [r1, #16]
 8011ab8:	4605      	mov	r5, r0
 8011aba:	460c      	mov	r4, r1
 8011abc:	b913      	cbnz	r3, 8011ac4 <_fflush_r+0x10>
 8011abe:	2500      	movs	r5, #0
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	bd38      	pop	{r3, r4, r5, pc}
 8011ac4:	b118      	cbz	r0, 8011ace <_fflush_r+0x1a>
 8011ac6:	6983      	ldr	r3, [r0, #24]
 8011ac8:	b90b      	cbnz	r3, 8011ace <_fflush_r+0x1a>
 8011aca:	f000 f887 	bl	8011bdc <__sinit>
 8011ace:	4b14      	ldr	r3, [pc, #80]	; (8011b20 <_fflush_r+0x6c>)
 8011ad0:	429c      	cmp	r4, r3
 8011ad2:	d11b      	bne.n	8011b0c <_fflush_r+0x58>
 8011ad4:	686c      	ldr	r4, [r5, #4]
 8011ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d0ef      	beq.n	8011abe <_fflush_r+0xa>
 8011ade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ae0:	07d0      	lsls	r0, r2, #31
 8011ae2:	d404      	bmi.n	8011aee <_fflush_r+0x3a>
 8011ae4:	0599      	lsls	r1, r3, #22
 8011ae6:	d402      	bmi.n	8011aee <_fflush_r+0x3a>
 8011ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011aea:	f000 fc84 	bl	80123f6 <__retarget_lock_acquire_recursive>
 8011aee:	4628      	mov	r0, r5
 8011af0:	4621      	mov	r1, r4
 8011af2:	f7ff ff59 	bl	80119a8 <__sflush_r>
 8011af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011af8:	07da      	lsls	r2, r3, #31
 8011afa:	4605      	mov	r5, r0
 8011afc:	d4e0      	bmi.n	8011ac0 <_fflush_r+0xc>
 8011afe:	89a3      	ldrh	r3, [r4, #12]
 8011b00:	059b      	lsls	r3, r3, #22
 8011b02:	d4dd      	bmi.n	8011ac0 <_fflush_r+0xc>
 8011b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b06:	f000 fc77 	bl	80123f8 <__retarget_lock_release_recursive>
 8011b0a:	e7d9      	b.n	8011ac0 <_fflush_r+0xc>
 8011b0c:	4b05      	ldr	r3, [pc, #20]	; (8011b24 <_fflush_r+0x70>)
 8011b0e:	429c      	cmp	r4, r3
 8011b10:	d101      	bne.n	8011b16 <_fflush_r+0x62>
 8011b12:	68ac      	ldr	r4, [r5, #8]
 8011b14:	e7df      	b.n	8011ad6 <_fflush_r+0x22>
 8011b16:	4b04      	ldr	r3, [pc, #16]	; (8011b28 <_fflush_r+0x74>)
 8011b18:	429c      	cmp	r4, r3
 8011b1a:	bf08      	it	eq
 8011b1c:	68ec      	ldreq	r4, [r5, #12]
 8011b1e:	e7da      	b.n	8011ad6 <_fflush_r+0x22>
 8011b20:	080154d0 	.word	0x080154d0
 8011b24:	080154f0 	.word	0x080154f0
 8011b28:	080154b0 	.word	0x080154b0

08011b2c <std>:
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	b510      	push	{r4, lr}
 8011b30:	4604      	mov	r4, r0
 8011b32:	e9c0 3300 	strd	r3, r3, [r0]
 8011b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b3a:	6083      	str	r3, [r0, #8]
 8011b3c:	8181      	strh	r1, [r0, #12]
 8011b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8011b40:	81c2      	strh	r2, [r0, #14]
 8011b42:	6183      	str	r3, [r0, #24]
 8011b44:	4619      	mov	r1, r3
 8011b46:	2208      	movs	r2, #8
 8011b48:	305c      	adds	r0, #92	; 0x5c
 8011b4a:	f7fe fcad 	bl	80104a8 <memset>
 8011b4e:	4b05      	ldr	r3, [pc, #20]	; (8011b64 <std+0x38>)
 8011b50:	6263      	str	r3, [r4, #36]	; 0x24
 8011b52:	4b05      	ldr	r3, [pc, #20]	; (8011b68 <std+0x3c>)
 8011b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b56:	4b05      	ldr	r3, [pc, #20]	; (8011b6c <std+0x40>)
 8011b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b5a:	4b05      	ldr	r3, [pc, #20]	; (8011b70 <std+0x44>)
 8011b5c:	6224      	str	r4, [r4, #32]
 8011b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8011b60:	bd10      	pop	{r4, pc}
 8011b62:	bf00      	nop
 8011b64:	08010ad5 	.word	0x08010ad5
 8011b68:	08010af7 	.word	0x08010af7
 8011b6c:	08010b2f 	.word	0x08010b2f
 8011b70:	08010b53 	.word	0x08010b53

08011b74 <_cleanup_r>:
 8011b74:	4901      	ldr	r1, [pc, #4]	; (8011b7c <_cleanup_r+0x8>)
 8011b76:	f000 b8af 	b.w	8011cd8 <_fwalk_reent>
 8011b7a:	bf00      	nop
 8011b7c:	08011ab5 	.word	0x08011ab5

08011b80 <__sfmoreglue>:
 8011b80:	b570      	push	{r4, r5, r6, lr}
 8011b82:	1e4a      	subs	r2, r1, #1
 8011b84:	2568      	movs	r5, #104	; 0x68
 8011b86:	4355      	muls	r5, r2
 8011b88:	460e      	mov	r6, r1
 8011b8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011b8e:	f7fe fce3 	bl	8010558 <_malloc_r>
 8011b92:	4604      	mov	r4, r0
 8011b94:	b140      	cbz	r0, 8011ba8 <__sfmoreglue+0x28>
 8011b96:	2100      	movs	r1, #0
 8011b98:	e9c0 1600 	strd	r1, r6, [r0]
 8011b9c:	300c      	adds	r0, #12
 8011b9e:	60a0      	str	r0, [r4, #8]
 8011ba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ba4:	f7fe fc80 	bl	80104a8 <memset>
 8011ba8:	4620      	mov	r0, r4
 8011baa:	bd70      	pop	{r4, r5, r6, pc}

08011bac <__sfp_lock_acquire>:
 8011bac:	4801      	ldr	r0, [pc, #4]	; (8011bb4 <__sfp_lock_acquire+0x8>)
 8011bae:	f000 bc22 	b.w	80123f6 <__retarget_lock_acquire_recursive>
 8011bb2:	bf00      	nop
 8011bb4:	200034d0 	.word	0x200034d0

08011bb8 <__sfp_lock_release>:
 8011bb8:	4801      	ldr	r0, [pc, #4]	; (8011bc0 <__sfp_lock_release+0x8>)
 8011bba:	f000 bc1d 	b.w	80123f8 <__retarget_lock_release_recursive>
 8011bbe:	bf00      	nop
 8011bc0:	200034d0 	.word	0x200034d0

08011bc4 <__sinit_lock_acquire>:
 8011bc4:	4801      	ldr	r0, [pc, #4]	; (8011bcc <__sinit_lock_acquire+0x8>)
 8011bc6:	f000 bc16 	b.w	80123f6 <__retarget_lock_acquire_recursive>
 8011bca:	bf00      	nop
 8011bcc:	200034cb 	.word	0x200034cb

08011bd0 <__sinit_lock_release>:
 8011bd0:	4801      	ldr	r0, [pc, #4]	; (8011bd8 <__sinit_lock_release+0x8>)
 8011bd2:	f000 bc11 	b.w	80123f8 <__retarget_lock_release_recursive>
 8011bd6:	bf00      	nop
 8011bd8:	200034cb 	.word	0x200034cb

08011bdc <__sinit>:
 8011bdc:	b510      	push	{r4, lr}
 8011bde:	4604      	mov	r4, r0
 8011be0:	f7ff fff0 	bl	8011bc4 <__sinit_lock_acquire>
 8011be4:	69a3      	ldr	r3, [r4, #24]
 8011be6:	b11b      	cbz	r3, 8011bf0 <__sinit+0x14>
 8011be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bec:	f7ff bff0 	b.w	8011bd0 <__sinit_lock_release>
 8011bf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011bf4:	6523      	str	r3, [r4, #80]	; 0x50
 8011bf6:	4b13      	ldr	r3, [pc, #76]	; (8011c44 <__sinit+0x68>)
 8011bf8:	4a13      	ldr	r2, [pc, #76]	; (8011c48 <__sinit+0x6c>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8011bfe:	42a3      	cmp	r3, r4
 8011c00:	bf04      	itt	eq
 8011c02:	2301      	moveq	r3, #1
 8011c04:	61a3      	streq	r3, [r4, #24]
 8011c06:	4620      	mov	r0, r4
 8011c08:	f000 f820 	bl	8011c4c <__sfp>
 8011c0c:	6060      	str	r0, [r4, #4]
 8011c0e:	4620      	mov	r0, r4
 8011c10:	f000 f81c 	bl	8011c4c <__sfp>
 8011c14:	60a0      	str	r0, [r4, #8]
 8011c16:	4620      	mov	r0, r4
 8011c18:	f000 f818 	bl	8011c4c <__sfp>
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	60e0      	str	r0, [r4, #12]
 8011c20:	2104      	movs	r1, #4
 8011c22:	6860      	ldr	r0, [r4, #4]
 8011c24:	f7ff ff82 	bl	8011b2c <std>
 8011c28:	68a0      	ldr	r0, [r4, #8]
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	2109      	movs	r1, #9
 8011c2e:	f7ff ff7d 	bl	8011b2c <std>
 8011c32:	68e0      	ldr	r0, [r4, #12]
 8011c34:	2202      	movs	r2, #2
 8011c36:	2112      	movs	r1, #18
 8011c38:	f7ff ff78 	bl	8011b2c <std>
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	61a3      	str	r3, [r4, #24]
 8011c40:	e7d2      	b.n	8011be8 <__sinit+0xc>
 8011c42:	bf00      	nop
 8011c44:	08015450 	.word	0x08015450
 8011c48:	08011b75 	.word	0x08011b75

08011c4c <__sfp>:
 8011c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c4e:	4607      	mov	r7, r0
 8011c50:	f7ff ffac 	bl	8011bac <__sfp_lock_acquire>
 8011c54:	4b1e      	ldr	r3, [pc, #120]	; (8011cd0 <__sfp+0x84>)
 8011c56:	681e      	ldr	r6, [r3, #0]
 8011c58:	69b3      	ldr	r3, [r6, #24]
 8011c5a:	b913      	cbnz	r3, 8011c62 <__sfp+0x16>
 8011c5c:	4630      	mov	r0, r6
 8011c5e:	f7ff ffbd 	bl	8011bdc <__sinit>
 8011c62:	3648      	adds	r6, #72	; 0x48
 8011c64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c68:	3b01      	subs	r3, #1
 8011c6a:	d503      	bpl.n	8011c74 <__sfp+0x28>
 8011c6c:	6833      	ldr	r3, [r6, #0]
 8011c6e:	b30b      	cbz	r3, 8011cb4 <__sfp+0x68>
 8011c70:	6836      	ldr	r6, [r6, #0]
 8011c72:	e7f7      	b.n	8011c64 <__sfp+0x18>
 8011c74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c78:	b9d5      	cbnz	r5, 8011cb0 <__sfp+0x64>
 8011c7a:	4b16      	ldr	r3, [pc, #88]	; (8011cd4 <__sfp+0x88>)
 8011c7c:	60e3      	str	r3, [r4, #12]
 8011c7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011c82:	6665      	str	r5, [r4, #100]	; 0x64
 8011c84:	f000 fbb6 	bl	80123f4 <__retarget_lock_init_recursive>
 8011c88:	f7ff ff96 	bl	8011bb8 <__sfp_lock_release>
 8011c8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011c90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011c94:	6025      	str	r5, [r4, #0]
 8011c96:	61a5      	str	r5, [r4, #24]
 8011c98:	2208      	movs	r2, #8
 8011c9a:	4629      	mov	r1, r5
 8011c9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ca0:	f7fe fc02 	bl	80104a8 <memset>
 8011ca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011cac:	4620      	mov	r0, r4
 8011cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cb0:	3468      	adds	r4, #104	; 0x68
 8011cb2:	e7d9      	b.n	8011c68 <__sfp+0x1c>
 8011cb4:	2104      	movs	r1, #4
 8011cb6:	4638      	mov	r0, r7
 8011cb8:	f7ff ff62 	bl	8011b80 <__sfmoreglue>
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	6030      	str	r0, [r6, #0]
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	d1d5      	bne.n	8011c70 <__sfp+0x24>
 8011cc4:	f7ff ff78 	bl	8011bb8 <__sfp_lock_release>
 8011cc8:	230c      	movs	r3, #12
 8011cca:	603b      	str	r3, [r7, #0]
 8011ccc:	e7ee      	b.n	8011cac <__sfp+0x60>
 8011cce:	bf00      	nop
 8011cd0:	08015450 	.word	0x08015450
 8011cd4:	ffff0001 	.word	0xffff0001

08011cd8 <_fwalk_reent>:
 8011cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cdc:	4606      	mov	r6, r0
 8011cde:	4688      	mov	r8, r1
 8011ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ce4:	2700      	movs	r7, #0
 8011ce6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cea:	f1b9 0901 	subs.w	r9, r9, #1
 8011cee:	d505      	bpl.n	8011cfc <_fwalk_reent+0x24>
 8011cf0:	6824      	ldr	r4, [r4, #0]
 8011cf2:	2c00      	cmp	r4, #0
 8011cf4:	d1f7      	bne.n	8011ce6 <_fwalk_reent+0xe>
 8011cf6:	4638      	mov	r0, r7
 8011cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cfc:	89ab      	ldrh	r3, [r5, #12]
 8011cfe:	2b01      	cmp	r3, #1
 8011d00:	d907      	bls.n	8011d12 <_fwalk_reent+0x3a>
 8011d02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d06:	3301      	adds	r3, #1
 8011d08:	d003      	beq.n	8011d12 <_fwalk_reent+0x3a>
 8011d0a:	4629      	mov	r1, r5
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	47c0      	blx	r8
 8011d10:	4307      	orrs	r7, r0
 8011d12:	3568      	adds	r5, #104	; 0x68
 8011d14:	e7e9      	b.n	8011cea <_fwalk_reent+0x12>

08011d16 <rshift>:
 8011d16:	6903      	ldr	r3, [r0, #16]
 8011d18:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d20:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011d24:	f100 0414 	add.w	r4, r0, #20
 8011d28:	dd45      	ble.n	8011db6 <rshift+0xa0>
 8011d2a:	f011 011f 	ands.w	r1, r1, #31
 8011d2e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011d32:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011d36:	d10c      	bne.n	8011d52 <rshift+0x3c>
 8011d38:	f100 0710 	add.w	r7, r0, #16
 8011d3c:	4629      	mov	r1, r5
 8011d3e:	42b1      	cmp	r1, r6
 8011d40:	d334      	bcc.n	8011dac <rshift+0x96>
 8011d42:	1a9b      	subs	r3, r3, r2
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	1eea      	subs	r2, r5, #3
 8011d48:	4296      	cmp	r6, r2
 8011d4a:	bf38      	it	cc
 8011d4c:	2300      	movcc	r3, #0
 8011d4e:	4423      	add	r3, r4
 8011d50:	e015      	b.n	8011d7e <rshift+0x68>
 8011d52:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011d56:	f1c1 0820 	rsb	r8, r1, #32
 8011d5a:	40cf      	lsrs	r7, r1
 8011d5c:	f105 0e04 	add.w	lr, r5, #4
 8011d60:	46a1      	mov	r9, r4
 8011d62:	4576      	cmp	r6, lr
 8011d64:	46f4      	mov	ip, lr
 8011d66:	d815      	bhi.n	8011d94 <rshift+0x7e>
 8011d68:	1a9b      	subs	r3, r3, r2
 8011d6a:	009a      	lsls	r2, r3, #2
 8011d6c:	3a04      	subs	r2, #4
 8011d6e:	3501      	adds	r5, #1
 8011d70:	42ae      	cmp	r6, r5
 8011d72:	bf38      	it	cc
 8011d74:	2200      	movcc	r2, #0
 8011d76:	18a3      	adds	r3, r4, r2
 8011d78:	50a7      	str	r7, [r4, r2]
 8011d7a:	b107      	cbz	r7, 8011d7e <rshift+0x68>
 8011d7c:	3304      	adds	r3, #4
 8011d7e:	1b1a      	subs	r2, r3, r4
 8011d80:	42a3      	cmp	r3, r4
 8011d82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011d86:	bf08      	it	eq
 8011d88:	2300      	moveq	r3, #0
 8011d8a:	6102      	str	r2, [r0, #16]
 8011d8c:	bf08      	it	eq
 8011d8e:	6143      	streq	r3, [r0, #20]
 8011d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d94:	f8dc c000 	ldr.w	ip, [ip]
 8011d98:	fa0c fc08 	lsl.w	ip, ip, r8
 8011d9c:	ea4c 0707 	orr.w	r7, ip, r7
 8011da0:	f849 7b04 	str.w	r7, [r9], #4
 8011da4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011da8:	40cf      	lsrs	r7, r1
 8011daa:	e7da      	b.n	8011d62 <rshift+0x4c>
 8011dac:	f851 cb04 	ldr.w	ip, [r1], #4
 8011db0:	f847 cf04 	str.w	ip, [r7, #4]!
 8011db4:	e7c3      	b.n	8011d3e <rshift+0x28>
 8011db6:	4623      	mov	r3, r4
 8011db8:	e7e1      	b.n	8011d7e <rshift+0x68>

08011dba <__hexdig_fun>:
 8011dba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011dbe:	2b09      	cmp	r3, #9
 8011dc0:	d802      	bhi.n	8011dc8 <__hexdig_fun+0xe>
 8011dc2:	3820      	subs	r0, #32
 8011dc4:	b2c0      	uxtb	r0, r0
 8011dc6:	4770      	bx	lr
 8011dc8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011dcc:	2b05      	cmp	r3, #5
 8011dce:	d801      	bhi.n	8011dd4 <__hexdig_fun+0x1a>
 8011dd0:	3847      	subs	r0, #71	; 0x47
 8011dd2:	e7f7      	b.n	8011dc4 <__hexdig_fun+0xa>
 8011dd4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011dd8:	2b05      	cmp	r3, #5
 8011dda:	d801      	bhi.n	8011de0 <__hexdig_fun+0x26>
 8011ddc:	3827      	subs	r0, #39	; 0x27
 8011dde:	e7f1      	b.n	8011dc4 <__hexdig_fun+0xa>
 8011de0:	2000      	movs	r0, #0
 8011de2:	4770      	bx	lr

08011de4 <__gethex>:
 8011de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de8:	ed2d 8b02 	vpush	{d8}
 8011dec:	b089      	sub	sp, #36	; 0x24
 8011dee:	ee08 0a10 	vmov	s16, r0
 8011df2:	9304      	str	r3, [sp, #16]
 8011df4:	4bbc      	ldr	r3, [pc, #752]	; (80120e8 <__gethex+0x304>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	9301      	str	r3, [sp, #4]
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	468b      	mov	fp, r1
 8011dfe:	4690      	mov	r8, r2
 8011e00:	f7ee f9f8 	bl	80001f4 <strlen>
 8011e04:	9b01      	ldr	r3, [sp, #4]
 8011e06:	f8db 2000 	ldr.w	r2, [fp]
 8011e0a:	4403      	add	r3, r0
 8011e0c:	4682      	mov	sl, r0
 8011e0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011e12:	9305      	str	r3, [sp, #20]
 8011e14:	1c93      	adds	r3, r2, #2
 8011e16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011e1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011e1e:	32fe      	adds	r2, #254	; 0xfe
 8011e20:	18d1      	adds	r1, r2, r3
 8011e22:	461f      	mov	r7, r3
 8011e24:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011e28:	9100      	str	r1, [sp, #0]
 8011e2a:	2830      	cmp	r0, #48	; 0x30
 8011e2c:	d0f8      	beq.n	8011e20 <__gethex+0x3c>
 8011e2e:	f7ff ffc4 	bl	8011dba <__hexdig_fun>
 8011e32:	4604      	mov	r4, r0
 8011e34:	2800      	cmp	r0, #0
 8011e36:	d13a      	bne.n	8011eae <__gethex+0xca>
 8011e38:	9901      	ldr	r1, [sp, #4]
 8011e3a:	4652      	mov	r2, sl
 8011e3c:	4638      	mov	r0, r7
 8011e3e:	f7fe fe8c 	bl	8010b5a <strncmp>
 8011e42:	4605      	mov	r5, r0
 8011e44:	2800      	cmp	r0, #0
 8011e46:	d168      	bne.n	8011f1a <__gethex+0x136>
 8011e48:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011e4c:	eb07 060a 	add.w	r6, r7, sl
 8011e50:	f7ff ffb3 	bl	8011dba <__hexdig_fun>
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d062      	beq.n	8011f1e <__gethex+0x13a>
 8011e58:	4633      	mov	r3, r6
 8011e5a:	7818      	ldrb	r0, [r3, #0]
 8011e5c:	2830      	cmp	r0, #48	; 0x30
 8011e5e:	461f      	mov	r7, r3
 8011e60:	f103 0301 	add.w	r3, r3, #1
 8011e64:	d0f9      	beq.n	8011e5a <__gethex+0x76>
 8011e66:	f7ff ffa8 	bl	8011dba <__hexdig_fun>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	fab0 f480 	clz	r4, r0
 8011e70:	0964      	lsrs	r4, r4, #5
 8011e72:	4635      	mov	r5, r6
 8011e74:	9300      	str	r3, [sp, #0]
 8011e76:	463a      	mov	r2, r7
 8011e78:	4616      	mov	r6, r2
 8011e7a:	3201      	adds	r2, #1
 8011e7c:	7830      	ldrb	r0, [r6, #0]
 8011e7e:	f7ff ff9c 	bl	8011dba <__hexdig_fun>
 8011e82:	2800      	cmp	r0, #0
 8011e84:	d1f8      	bne.n	8011e78 <__gethex+0x94>
 8011e86:	9901      	ldr	r1, [sp, #4]
 8011e88:	4652      	mov	r2, sl
 8011e8a:	4630      	mov	r0, r6
 8011e8c:	f7fe fe65 	bl	8010b5a <strncmp>
 8011e90:	b980      	cbnz	r0, 8011eb4 <__gethex+0xd0>
 8011e92:	b94d      	cbnz	r5, 8011ea8 <__gethex+0xc4>
 8011e94:	eb06 050a 	add.w	r5, r6, sl
 8011e98:	462a      	mov	r2, r5
 8011e9a:	4616      	mov	r6, r2
 8011e9c:	3201      	adds	r2, #1
 8011e9e:	7830      	ldrb	r0, [r6, #0]
 8011ea0:	f7ff ff8b 	bl	8011dba <__hexdig_fun>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d1f8      	bne.n	8011e9a <__gethex+0xb6>
 8011ea8:	1bad      	subs	r5, r5, r6
 8011eaa:	00ad      	lsls	r5, r5, #2
 8011eac:	e004      	b.n	8011eb8 <__gethex+0xd4>
 8011eae:	2400      	movs	r4, #0
 8011eb0:	4625      	mov	r5, r4
 8011eb2:	e7e0      	b.n	8011e76 <__gethex+0x92>
 8011eb4:	2d00      	cmp	r5, #0
 8011eb6:	d1f7      	bne.n	8011ea8 <__gethex+0xc4>
 8011eb8:	7833      	ldrb	r3, [r6, #0]
 8011eba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011ebe:	2b50      	cmp	r3, #80	; 0x50
 8011ec0:	d13b      	bne.n	8011f3a <__gethex+0x156>
 8011ec2:	7873      	ldrb	r3, [r6, #1]
 8011ec4:	2b2b      	cmp	r3, #43	; 0x2b
 8011ec6:	d02c      	beq.n	8011f22 <__gethex+0x13e>
 8011ec8:	2b2d      	cmp	r3, #45	; 0x2d
 8011eca:	d02e      	beq.n	8011f2a <__gethex+0x146>
 8011ecc:	1c71      	adds	r1, r6, #1
 8011ece:	f04f 0900 	mov.w	r9, #0
 8011ed2:	7808      	ldrb	r0, [r1, #0]
 8011ed4:	f7ff ff71 	bl	8011dba <__hexdig_fun>
 8011ed8:	1e43      	subs	r3, r0, #1
 8011eda:	b2db      	uxtb	r3, r3
 8011edc:	2b18      	cmp	r3, #24
 8011ede:	d82c      	bhi.n	8011f3a <__gethex+0x156>
 8011ee0:	f1a0 0210 	sub.w	r2, r0, #16
 8011ee4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011ee8:	f7ff ff67 	bl	8011dba <__hexdig_fun>
 8011eec:	1e43      	subs	r3, r0, #1
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	2b18      	cmp	r3, #24
 8011ef2:	d91d      	bls.n	8011f30 <__gethex+0x14c>
 8011ef4:	f1b9 0f00 	cmp.w	r9, #0
 8011ef8:	d000      	beq.n	8011efc <__gethex+0x118>
 8011efa:	4252      	negs	r2, r2
 8011efc:	4415      	add	r5, r2
 8011efe:	f8cb 1000 	str.w	r1, [fp]
 8011f02:	b1e4      	cbz	r4, 8011f3e <__gethex+0x15a>
 8011f04:	9b00      	ldr	r3, [sp, #0]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	bf14      	ite	ne
 8011f0a:	2700      	movne	r7, #0
 8011f0c:	2706      	moveq	r7, #6
 8011f0e:	4638      	mov	r0, r7
 8011f10:	b009      	add	sp, #36	; 0x24
 8011f12:	ecbd 8b02 	vpop	{d8}
 8011f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f1a:	463e      	mov	r6, r7
 8011f1c:	4625      	mov	r5, r4
 8011f1e:	2401      	movs	r4, #1
 8011f20:	e7ca      	b.n	8011eb8 <__gethex+0xd4>
 8011f22:	f04f 0900 	mov.w	r9, #0
 8011f26:	1cb1      	adds	r1, r6, #2
 8011f28:	e7d3      	b.n	8011ed2 <__gethex+0xee>
 8011f2a:	f04f 0901 	mov.w	r9, #1
 8011f2e:	e7fa      	b.n	8011f26 <__gethex+0x142>
 8011f30:	230a      	movs	r3, #10
 8011f32:	fb03 0202 	mla	r2, r3, r2, r0
 8011f36:	3a10      	subs	r2, #16
 8011f38:	e7d4      	b.n	8011ee4 <__gethex+0x100>
 8011f3a:	4631      	mov	r1, r6
 8011f3c:	e7df      	b.n	8011efe <__gethex+0x11a>
 8011f3e:	1bf3      	subs	r3, r6, r7
 8011f40:	3b01      	subs	r3, #1
 8011f42:	4621      	mov	r1, r4
 8011f44:	2b07      	cmp	r3, #7
 8011f46:	dc0b      	bgt.n	8011f60 <__gethex+0x17c>
 8011f48:	ee18 0a10 	vmov	r0, s16
 8011f4c:	f000 faea 	bl	8012524 <_Balloc>
 8011f50:	4604      	mov	r4, r0
 8011f52:	b940      	cbnz	r0, 8011f66 <__gethex+0x182>
 8011f54:	4b65      	ldr	r3, [pc, #404]	; (80120ec <__gethex+0x308>)
 8011f56:	4602      	mov	r2, r0
 8011f58:	21de      	movs	r1, #222	; 0xde
 8011f5a:	4865      	ldr	r0, [pc, #404]	; (80120f0 <__gethex+0x30c>)
 8011f5c:	f001 fc46 	bl	80137ec <__assert_func>
 8011f60:	3101      	adds	r1, #1
 8011f62:	105b      	asrs	r3, r3, #1
 8011f64:	e7ee      	b.n	8011f44 <__gethex+0x160>
 8011f66:	f100 0914 	add.w	r9, r0, #20
 8011f6a:	f04f 0b00 	mov.w	fp, #0
 8011f6e:	f1ca 0301 	rsb	r3, sl, #1
 8011f72:	f8cd 9008 	str.w	r9, [sp, #8]
 8011f76:	f8cd b000 	str.w	fp, [sp]
 8011f7a:	9306      	str	r3, [sp, #24]
 8011f7c:	42b7      	cmp	r7, r6
 8011f7e:	d340      	bcc.n	8012002 <__gethex+0x21e>
 8011f80:	9802      	ldr	r0, [sp, #8]
 8011f82:	9b00      	ldr	r3, [sp, #0]
 8011f84:	f840 3b04 	str.w	r3, [r0], #4
 8011f88:	eba0 0009 	sub.w	r0, r0, r9
 8011f8c:	1080      	asrs	r0, r0, #2
 8011f8e:	0146      	lsls	r6, r0, #5
 8011f90:	6120      	str	r0, [r4, #16]
 8011f92:	4618      	mov	r0, r3
 8011f94:	f000 fbbc 	bl	8012710 <__hi0bits>
 8011f98:	1a30      	subs	r0, r6, r0
 8011f9a:	f8d8 6000 	ldr.w	r6, [r8]
 8011f9e:	42b0      	cmp	r0, r6
 8011fa0:	dd63      	ble.n	801206a <__gethex+0x286>
 8011fa2:	1b87      	subs	r7, r0, r6
 8011fa4:	4639      	mov	r1, r7
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f000 ff56 	bl	8012e58 <__any_on>
 8011fac:	4682      	mov	sl, r0
 8011fae:	b1a8      	cbz	r0, 8011fdc <__gethex+0x1f8>
 8011fb0:	1e7b      	subs	r3, r7, #1
 8011fb2:	1159      	asrs	r1, r3, #5
 8011fb4:	f003 021f 	and.w	r2, r3, #31
 8011fb8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011fbc:	f04f 0a01 	mov.w	sl, #1
 8011fc0:	fa0a f202 	lsl.w	r2, sl, r2
 8011fc4:	420a      	tst	r2, r1
 8011fc6:	d009      	beq.n	8011fdc <__gethex+0x1f8>
 8011fc8:	4553      	cmp	r3, sl
 8011fca:	dd05      	ble.n	8011fd8 <__gethex+0x1f4>
 8011fcc:	1eb9      	subs	r1, r7, #2
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f000 ff42 	bl	8012e58 <__any_on>
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	d145      	bne.n	8012064 <__gethex+0x280>
 8011fd8:	f04f 0a02 	mov.w	sl, #2
 8011fdc:	4639      	mov	r1, r7
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f7ff fe99 	bl	8011d16 <rshift>
 8011fe4:	443d      	add	r5, r7
 8011fe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011fea:	42ab      	cmp	r3, r5
 8011fec:	da4c      	bge.n	8012088 <__gethex+0x2a4>
 8011fee:	ee18 0a10 	vmov	r0, s16
 8011ff2:	4621      	mov	r1, r4
 8011ff4:	f000 fad6 	bl	80125a4 <_Bfree>
 8011ff8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	6013      	str	r3, [r2, #0]
 8011ffe:	27a3      	movs	r7, #163	; 0xa3
 8012000:	e785      	b.n	8011f0e <__gethex+0x12a>
 8012002:	1e73      	subs	r3, r6, #1
 8012004:	9a05      	ldr	r2, [sp, #20]
 8012006:	9303      	str	r3, [sp, #12]
 8012008:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801200c:	4293      	cmp	r3, r2
 801200e:	d019      	beq.n	8012044 <__gethex+0x260>
 8012010:	f1bb 0f20 	cmp.w	fp, #32
 8012014:	d107      	bne.n	8012026 <__gethex+0x242>
 8012016:	9b02      	ldr	r3, [sp, #8]
 8012018:	9a00      	ldr	r2, [sp, #0]
 801201a:	f843 2b04 	str.w	r2, [r3], #4
 801201e:	9302      	str	r3, [sp, #8]
 8012020:	2300      	movs	r3, #0
 8012022:	9300      	str	r3, [sp, #0]
 8012024:	469b      	mov	fp, r3
 8012026:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801202a:	f7ff fec6 	bl	8011dba <__hexdig_fun>
 801202e:	9b00      	ldr	r3, [sp, #0]
 8012030:	f000 000f 	and.w	r0, r0, #15
 8012034:	fa00 f00b 	lsl.w	r0, r0, fp
 8012038:	4303      	orrs	r3, r0
 801203a:	9300      	str	r3, [sp, #0]
 801203c:	f10b 0b04 	add.w	fp, fp, #4
 8012040:	9b03      	ldr	r3, [sp, #12]
 8012042:	e00d      	b.n	8012060 <__gethex+0x27c>
 8012044:	9b03      	ldr	r3, [sp, #12]
 8012046:	9a06      	ldr	r2, [sp, #24]
 8012048:	4413      	add	r3, r2
 801204a:	42bb      	cmp	r3, r7
 801204c:	d3e0      	bcc.n	8012010 <__gethex+0x22c>
 801204e:	4618      	mov	r0, r3
 8012050:	9901      	ldr	r1, [sp, #4]
 8012052:	9307      	str	r3, [sp, #28]
 8012054:	4652      	mov	r2, sl
 8012056:	f7fe fd80 	bl	8010b5a <strncmp>
 801205a:	9b07      	ldr	r3, [sp, #28]
 801205c:	2800      	cmp	r0, #0
 801205e:	d1d7      	bne.n	8012010 <__gethex+0x22c>
 8012060:	461e      	mov	r6, r3
 8012062:	e78b      	b.n	8011f7c <__gethex+0x198>
 8012064:	f04f 0a03 	mov.w	sl, #3
 8012068:	e7b8      	b.n	8011fdc <__gethex+0x1f8>
 801206a:	da0a      	bge.n	8012082 <__gethex+0x29e>
 801206c:	1a37      	subs	r7, r6, r0
 801206e:	4621      	mov	r1, r4
 8012070:	ee18 0a10 	vmov	r0, s16
 8012074:	463a      	mov	r2, r7
 8012076:	f000 fcb1 	bl	80129dc <__lshift>
 801207a:	1bed      	subs	r5, r5, r7
 801207c:	4604      	mov	r4, r0
 801207e:	f100 0914 	add.w	r9, r0, #20
 8012082:	f04f 0a00 	mov.w	sl, #0
 8012086:	e7ae      	b.n	8011fe6 <__gethex+0x202>
 8012088:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801208c:	42a8      	cmp	r0, r5
 801208e:	dd72      	ble.n	8012176 <__gethex+0x392>
 8012090:	1b45      	subs	r5, r0, r5
 8012092:	42ae      	cmp	r6, r5
 8012094:	dc36      	bgt.n	8012104 <__gethex+0x320>
 8012096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801209a:	2b02      	cmp	r3, #2
 801209c:	d02a      	beq.n	80120f4 <__gethex+0x310>
 801209e:	2b03      	cmp	r3, #3
 80120a0:	d02c      	beq.n	80120fc <__gethex+0x318>
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d115      	bne.n	80120d2 <__gethex+0x2ee>
 80120a6:	42ae      	cmp	r6, r5
 80120a8:	d113      	bne.n	80120d2 <__gethex+0x2ee>
 80120aa:	2e01      	cmp	r6, #1
 80120ac:	d10b      	bne.n	80120c6 <__gethex+0x2e2>
 80120ae:	9a04      	ldr	r2, [sp, #16]
 80120b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80120b4:	6013      	str	r3, [r2, #0]
 80120b6:	2301      	movs	r3, #1
 80120b8:	6123      	str	r3, [r4, #16]
 80120ba:	f8c9 3000 	str.w	r3, [r9]
 80120be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80120c0:	2762      	movs	r7, #98	; 0x62
 80120c2:	601c      	str	r4, [r3, #0]
 80120c4:	e723      	b.n	8011f0e <__gethex+0x12a>
 80120c6:	1e71      	subs	r1, r6, #1
 80120c8:	4620      	mov	r0, r4
 80120ca:	f000 fec5 	bl	8012e58 <__any_on>
 80120ce:	2800      	cmp	r0, #0
 80120d0:	d1ed      	bne.n	80120ae <__gethex+0x2ca>
 80120d2:	ee18 0a10 	vmov	r0, s16
 80120d6:	4621      	mov	r1, r4
 80120d8:	f000 fa64 	bl	80125a4 <_Bfree>
 80120dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80120de:	2300      	movs	r3, #0
 80120e0:	6013      	str	r3, [r2, #0]
 80120e2:	2750      	movs	r7, #80	; 0x50
 80120e4:	e713      	b.n	8011f0e <__gethex+0x12a>
 80120e6:	bf00      	nop
 80120e8:	0801558c 	.word	0x0801558c
 80120ec:	08015510 	.word	0x08015510
 80120f0:	08015521 	.word	0x08015521
 80120f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d1eb      	bne.n	80120d2 <__gethex+0x2ee>
 80120fa:	e7d8      	b.n	80120ae <__gethex+0x2ca>
 80120fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d1d5      	bne.n	80120ae <__gethex+0x2ca>
 8012102:	e7e6      	b.n	80120d2 <__gethex+0x2ee>
 8012104:	1e6f      	subs	r7, r5, #1
 8012106:	f1ba 0f00 	cmp.w	sl, #0
 801210a:	d131      	bne.n	8012170 <__gethex+0x38c>
 801210c:	b127      	cbz	r7, 8012118 <__gethex+0x334>
 801210e:	4639      	mov	r1, r7
 8012110:	4620      	mov	r0, r4
 8012112:	f000 fea1 	bl	8012e58 <__any_on>
 8012116:	4682      	mov	sl, r0
 8012118:	117b      	asrs	r3, r7, #5
 801211a:	2101      	movs	r1, #1
 801211c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012120:	f007 071f 	and.w	r7, r7, #31
 8012124:	fa01 f707 	lsl.w	r7, r1, r7
 8012128:	421f      	tst	r7, r3
 801212a:	4629      	mov	r1, r5
 801212c:	4620      	mov	r0, r4
 801212e:	bf18      	it	ne
 8012130:	f04a 0a02 	orrne.w	sl, sl, #2
 8012134:	1b76      	subs	r6, r6, r5
 8012136:	f7ff fdee 	bl	8011d16 <rshift>
 801213a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801213e:	2702      	movs	r7, #2
 8012140:	f1ba 0f00 	cmp.w	sl, #0
 8012144:	d048      	beq.n	80121d8 <__gethex+0x3f4>
 8012146:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801214a:	2b02      	cmp	r3, #2
 801214c:	d015      	beq.n	801217a <__gethex+0x396>
 801214e:	2b03      	cmp	r3, #3
 8012150:	d017      	beq.n	8012182 <__gethex+0x39e>
 8012152:	2b01      	cmp	r3, #1
 8012154:	d109      	bne.n	801216a <__gethex+0x386>
 8012156:	f01a 0f02 	tst.w	sl, #2
 801215a:	d006      	beq.n	801216a <__gethex+0x386>
 801215c:	f8d9 0000 	ldr.w	r0, [r9]
 8012160:	ea4a 0a00 	orr.w	sl, sl, r0
 8012164:	f01a 0f01 	tst.w	sl, #1
 8012168:	d10e      	bne.n	8012188 <__gethex+0x3a4>
 801216a:	f047 0710 	orr.w	r7, r7, #16
 801216e:	e033      	b.n	80121d8 <__gethex+0x3f4>
 8012170:	f04f 0a01 	mov.w	sl, #1
 8012174:	e7d0      	b.n	8012118 <__gethex+0x334>
 8012176:	2701      	movs	r7, #1
 8012178:	e7e2      	b.n	8012140 <__gethex+0x35c>
 801217a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801217c:	f1c3 0301 	rsb	r3, r3, #1
 8012180:	9315      	str	r3, [sp, #84]	; 0x54
 8012182:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012184:	2b00      	cmp	r3, #0
 8012186:	d0f0      	beq.n	801216a <__gethex+0x386>
 8012188:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801218c:	f104 0314 	add.w	r3, r4, #20
 8012190:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012194:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012198:	f04f 0c00 	mov.w	ip, #0
 801219c:	4618      	mov	r0, r3
 801219e:	f853 2b04 	ldr.w	r2, [r3], #4
 80121a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80121a6:	d01c      	beq.n	80121e2 <__gethex+0x3fe>
 80121a8:	3201      	adds	r2, #1
 80121aa:	6002      	str	r2, [r0, #0]
 80121ac:	2f02      	cmp	r7, #2
 80121ae:	f104 0314 	add.w	r3, r4, #20
 80121b2:	d13f      	bne.n	8012234 <__gethex+0x450>
 80121b4:	f8d8 2000 	ldr.w	r2, [r8]
 80121b8:	3a01      	subs	r2, #1
 80121ba:	42b2      	cmp	r2, r6
 80121bc:	d10a      	bne.n	80121d4 <__gethex+0x3f0>
 80121be:	1171      	asrs	r1, r6, #5
 80121c0:	2201      	movs	r2, #1
 80121c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80121c6:	f006 061f 	and.w	r6, r6, #31
 80121ca:	fa02 f606 	lsl.w	r6, r2, r6
 80121ce:	421e      	tst	r6, r3
 80121d0:	bf18      	it	ne
 80121d2:	4617      	movne	r7, r2
 80121d4:	f047 0720 	orr.w	r7, r7, #32
 80121d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80121da:	601c      	str	r4, [r3, #0]
 80121dc:	9b04      	ldr	r3, [sp, #16]
 80121de:	601d      	str	r5, [r3, #0]
 80121e0:	e695      	b.n	8011f0e <__gethex+0x12a>
 80121e2:	4299      	cmp	r1, r3
 80121e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80121e8:	d8d8      	bhi.n	801219c <__gethex+0x3b8>
 80121ea:	68a3      	ldr	r3, [r4, #8]
 80121ec:	459b      	cmp	fp, r3
 80121ee:	db19      	blt.n	8012224 <__gethex+0x440>
 80121f0:	6861      	ldr	r1, [r4, #4]
 80121f2:	ee18 0a10 	vmov	r0, s16
 80121f6:	3101      	adds	r1, #1
 80121f8:	f000 f994 	bl	8012524 <_Balloc>
 80121fc:	4681      	mov	r9, r0
 80121fe:	b918      	cbnz	r0, 8012208 <__gethex+0x424>
 8012200:	4b1a      	ldr	r3, [pc, #104]	; (801226c <__gethex+0x488>)
 8012202:	4602      	mov	r2, r0
 8012204:	2184      	movs	r1, #132	; 0x84
 8012206:	e6a8      	b.n	8011f5a <__gethex+0x176>
 8012208:	6922      	ldr	r2, [r4, #16]
 801220a:	3202      	adds	r2, #2
 801220c:	f104 010c 	add.w	r1, r4, #12
 8012210:	0092      	lsls	r2, r2, #2
 8012212:	300c      	adds	r0, #12
 8012214:	f7fe f93a 	bl	801048c <memcpy>
 8012218:	4621      	mov	r1, r4
 801221a:	ee18 0a10 	vmov	r0, s16
 801221e:	f000 f9c1 	bl	80125a4 <_Bfree>
 8012222:	464c      	mov	r4, r9
 8012224:	6923      	ldr	r3, [r4, #16]
 8012226:	1c5a      	adds	r2, r3, #1
 8012228:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801222c:	6122      	str	r2, [r4, #16]
 801222e:	2201      	movs	r2, #1
 8012230:	615a      	str	r2, [r3, #20]
 8012232:	e7bb      	b.n	80121ac <__gethex+0x3c8>
 8012234:	6922      	ldr	r2, [r4, #16]
 8012236:	455a      	cmp	r2, fp
 8012238:	dd0b      	ble.n	8012252 <__gethex+0x46e>
 801223a:	2101      	movs	r1, #1
 801223c:	4620      	mov	r0, r4
 801223e:	f7ff fd6a 	bl	8011d16 <rshift>
 8012242:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012246:	3501      	adds	r5, #1
 8012248:	42ab      	cmp	r3, r5
 801224a:	f6ff aed0 	blt.w	8011fee <__gethex+0x20a>
 801224e:	2701      	movs	r7, #1
 8012250:	e7c0      	b.n	80121d4 <__gethex+0x3f0>
 8012252:	f016 061f 	ands.w	r6, r6, #31
 8012256:	d0fa      	beq.n	801224e <__gethex+0x46a>
 8012258:	449a      	add	sl, r3
 801225a:	f1c6 0620 	rsb	r6, r6, #32
 801225e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012262:	f000 fa55 	bl	8012710 <__hi0bits>
 8012266:	42b0      	cmp	r0, r6
 8012268:	dbe7      	blt.n	801223a <__gethex+0x456>
 801226a:	e7f0      	b.n	801224e <__gethex+0x46a>
 801226c:	08015510 	.word	0x08015510

08012270 <L_shift>:
 8012270:	f1c2 0208 	rsb	r2, r2, #8
 8012274:	0092      	lsls	r2, r2, #2
 8012276:	b570      	push	{r4, r5, r6, lr}
 8012278:	f1c2 0620 	rsb	r6, r2, #32
 801227c:	6843      	ldr	r3, [r0, #4]
 801227e:	6804      	ldr	r4, [r0, #0]
 8012280:	fa03 f506 	lsl.w	r5, r3, r6
 8012284:	432c      	orrs	r4, r5
 8012286:	40d3      	lsrs	r3, r2
 8012288:	6004      	str	r4, [r0, #0]
 801228a:	f840 3f04 	str.w	r3, [r0, #4]!
 801228e:	4288      	cmp	r0, r1
 8012290:	d3f4      	bcc.n	801227c <L_shift+0xc>
 8012292:	bd70      	pop	{r4, r5, r6, pc}

08012294 <__match>:
 8012294:	b530      	push	{r4, r5, lr}
 8012296:	6803      	ldr	r3, [r0, #0]
 8012298:	3301      	adds	r3, #1
 801229a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801229e:	b914      	cbnz	r4, 80122a6 <__match+0x12>
 80122a0:	6003      	str	r3, [r0, #0]
 80122a2:	2001      	movs	r0, #1
 80122a4:	bd30      	pop	{r4, r5, pc}
 80122a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80122ae:	2d19      	cmp	r5, #25
 80122b0:	bf98      	it	ls
 80122b2:	3220      	addls	r2, #32
 80122b4:	42a2      	cmp	r2, r4
 80122b6:	d0f0      	beq.n	801229a <__match+0x6>
 80122b8:	2000      	movs	r0, #0
 80122ba:	e7f3      	b.n	80122a4 <__match+0x10>

080122bc <__hexnan>:
 80122bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122c0:	680b      	ldr	r3, [r1, #0]
 80122c2:	6801      	ldr	r1, [r0, #0]
 80122c4:	115e      	asrs	r6, r3, #5
 80122c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80122ca:	f013 031f 	ands.w	r3, r3, #31
 80122ce:	b087      	sub	sp, #28
 80122d0:	bf18      	it	ne
 80122d2:	3604      	addne	r6, #4
 80122d4:	2500      	movs	r5, #0
 80122d6:	1f37      	subs	r7, r6, #4
 80122d8:	4682      	mov	sl, r0
 80122da:	4690      	mov	r8, r2
 80122dc:	9301      	str	r3, [sp, #4]
 80122de:	f846 5c04 	str.w	r5, [r6, #-4]
 80122e2:	46b9      	mov	r9, r7
 80122e4:	463c      	mov	r4, r7
 80122e6:	9502      	str	r5, [sp, #8]
 80122e8:	46ab      	mov	fp, r5
 80122ea:	784a      	ldrb	r2, [r1, #1]
 80122ec:	1c4b      	adds	r3, r1, #1
 80122ee:	9303      	str	r3, [sp, #12]
 80122f0:	b342      	cbz	r2, 8012344 <__hexnan+0x88>
 80122f2:	4610      	mov	r0, r2
 80122f4:	9105      	str	r1, [sp, #20]
 80122f6:	9204      	str	r2, [sp, #16]
 80122f8:	f7ff fd5f 	bl	8011dba <__hexdig_fun>
 80122fc:	2800      	cmp	r0, #0
 80122fe:	d14f      	bne.n	80123a0 <__hexnan+0xe4>
 8012300:	9a04      	ldr	r2, [sp, #16]
 8012302:	9905      	ldr	r1, [sp, #20]
 8012304:	2a20      	cmp	r2, #32
 8012306:	d818      	bhi.n	801233a <__hexnan+0x7e>
 8012308:	9b02      	ldr	r3, [sp, #8]
 801230a:	459b      	cmp	fp, r3
 801230c:	dd13      	ble.n	8012336 <__hexnan+0x7a>
 801230e:	454c      	cmp	r4, r9
 8012310:	d206      	bcs.n	8012320 <__hexnan+0x64>
 8012312:	2d07      	cmp	r5, #7
 8012314:	dc04      	bgt.n	8012320 <__hexnan+0x64>
 8012316:	462a      	mov	r2, r5
 8012318:	4649      	mov	r1, r9
 801231a:	4620      	mov	r0, r4
 801231c:	f7ff ffa8 	bl	8012270 <L_shift>
 8012320:	4544      	cmp	r4, r8
 8012322:	d950      	bls.n	80123c6 <__hexnan+0x10a>
 8012324:	2300      	movs	r3, #0
 8012326:	f1a4 0904 	sub.w	r9, r4, #4
 801232a:	f844 3c04 	str.w	r3, [r4, #-4]
 801232e:	f8cd b008 	str.w	fp, [sp, #8]
 8012332:	464c      	mov	r4, r9
 8012334:	461d      	mov	r5, r3
 8012336:	9903      	ldr	r1, [sp, #12]
 8012338:	e7d7      	b.n	80122ea <__hexnan+0x2e>
 801233a:	2a29      	cmp	r2, #41	; 0x29
 801233c:	d156      	bne.n	80123ec <__hexnan+0x130>
 801233e:	3102      	adds	r1, #2
 8012340:	f8ca 1000 	str.w	r1, [sl]
 8012344:	f1bb 0f00 	cmp.w	fp, #0
 8012348:	d050      	beq.n	80123ec <__hexnan+0x130>
 801234a:	454c      	cmp	r4, r9
 801234c:	d206      	bcs.n	801235c <__hexnan+0xa0>
 801234e:	2d07      	cmp	r5, #7
 8012350:	dc04      	bgt.n	801235c <__hexnan+0xa0>
 8012352:	462a      	mov	r2, r5
 8012354:	4649      	mov	r1, r9
 8012356:	4620      	mov	r0, r4
 8012358:	f7ff ff8a 	bl	8012270 <L_shift>
 801235c:	4544      	cmp	r4, r8
 801235e:	d934      	bls.n	80123ca <__hexnan+0x10e>
 8012360:	f1a8 0204 	sub.w	r2, r8, #4
 8012364:	4623      	mov	r3, r4
 8012366:	f853 1b04 	ldr.w	r1, [r3], #4
 801236a:	f842 1f04 	str.w	r1, [r2, #4]!
 801236e:	429f      	cmp	r7, r3
 8012370:	d2f9      	bcs.n	8012366 <__hexnan+0xaa>
 8012372:	1b3b      	subs	r3, r7, r4
 8012374:	f023 0303 	bic.w	r3, r3, #3
 8012378:	3304      	adds	r3, #4
 801237a:	3401      	adds	r4, #1
 801237c:	3e03      	subs	r6, #3
 801237e:	42b4      	cmp	r4, r6
 8012380:	bf88      	it	hi
 8012382:	2304      	movhi	r3, #4
 8012384:	4443      	add	r3, r8
 8012386:	2200      	movs	r2, #0
 8012388:	f843 2b04 	str.w	r2, [r3], #4
 801238c:	429f      	cmp	r7, r3
 801238e:	d2fb      	bcs.n	8012388 <__hexnan+0xcc>
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	b91b      	cbnz	r3, 801239c <__hexnan+0xe0>
 8012394:	4547      	cmp	r7, r8
 8012396:	d127      	bne.n	80123e8 <__hexnan+0x12c>
 8012398:	2301      	movs	r3, #1
 801239a:	603b      	str	r3, [r7, #0]
 801239c:	2005      	movs	r0, #5
 801239e:	e026      	b.n	80123ee <__hexnan+0x132>
 80123a0:	3501      	adds	r5, #1
 80123a2:	2d08      	cmp	r5, #8
 80123a4:	f10b 0b01 	add.w	fp, fp, #1
 80123a8:	dd06      	ble.n	80123b8 <__hexnan+0xfc>
 80123aa:	4544      	cmp	r4, r8
 80123ac:	d9c3      	bls.n	8012336 <__hexnan+0x7a>
 80123ae:	2300      	movs	r3, #0
 80123b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80123b4:	2501      	movs	r5, #1
 80123b6:	3c04      	subs	r4, #4
 80123b8:	6822      	ldr	r2, [r4, #0]
 80123ba:	f000 000f 	and.w	r0, r0, #15
 80123be:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80123c2:	6022      	str	r2, [r4, #0]
 80123c4:	e7b7      	b.n	8012336 <__hexnan+0x7a>
 80123c6:	2508      	movs	r5, #8
 80123c8:	e7b5      	b.n	8012336 <__hexnan+0x7a>
 80123ca:	9b01      	ldr	r3, [sp, #4]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d0df      	beq.n	8012390 <__hexnan+0xd4>
 80123d0:	f04f 32ff 	mov.w	r2, #4294967295
 80123d4:	f1c3 0320 	rsb	r3, r3, #32
 80123d8:	fa22 f303 	lsr.w	r3, r2, r3
 80123dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80123e0:	401a      	ands	r2, r3
 80123e2:	f846 2c04 	str.w	r2, [r6, #-4]
 80123e6:	e7d3      	b.n	8012390 <__hexnan+0xd4>
 80123e8:	3f04      	subs	r7, #4
 80123ea:	e7d1      	b.n	8012390 <__hexnan+0xd4>
 80123ec:	2004      	movs	r0, #4
 80123ee:	b007      	add	sp, #28
 80123f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080123f4 <__retarget_lock_init_recursive>:
 80123f4:	4770      	bx	lr

080123f6 <__retarget_lock_acquire_recursive>:
 80123f6:	4770      	bx	lr

080123f8 <__retarget_lock_release_recursive>:
 80123f8:	4770      	bx	lr
	...

080123fc <_lseek_r>:
 80123fc:	b538      	push	{r3, r4, r5, lr}
 80123fe:	4d07      	ldr	r5, [pc, #28]	; (801241c <_lseek_r+0x20>)
 8012400:	4604      	mov	r4, r0
 8012402:	4608      	mov	r0, r1
 8012404:	4611      	mov	r1, r2
 8012406:	2200      	movs	r2, #0
 8012408:	602a      	str	r2, [r5, #0]
 801240a:	461a      	mov	r2, r3
 801240c:	f7f0 fd12 	bl	8002e34 <_lseek>
 8012410:	1c43      	adds	r3, r0, #1
 8012412:	d102      	bne.n	801241a <_lseek_r+0x1e>
 8012414:	682b      	ldr	r3, [r5, #0]
 8012416:	b103      	cbz	r3, 801241a <_lseek_r+0x1e>
 8012418:	6023      	str	r3, [r4, #0]
 801241a:	bd38      	pop	{r3, r4, r5, pc}
 801241c:	200034d4 	.word	0x200034d4

08012420 <__swhatbuf_r>:
 8012420:	b570      	push	{r4, r5, r6, lr}
 8012422:	460e      	mov	r6, r1
 8012424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012428:	2900      	cmp	r1, #0
 801242a:	b096      	sub	sp, #88	; 0x58
 801242c:	4614      	mov	r4, r2
 801242e:	461d      	mov	r5, r3
 8012430:	da07      	bge.n	8012442 <__swhatbuf_r+0x22>
 8012432:	2300      	movs	r3, #0
 8012434:	602b      	str	r3, [r5, #0]
 8012436:	89b3      	ldrh	r3, [r6, #12]
 8012438:	061a      	lsls	r2, r3, #24
 801243a:	d410      	bmi.n	801245e <__swhatbuf_r+0x3e>
 801243c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012440:	e00e      	b.n	8012460 <__swhatbuf_r+0x40>
 8012442:	466a      	mov	r2, sp
 8012444:	f001 fa02 	bl	801384c <_fstat_r>
 8012448:	2800      	cmp	r0, #0
 801244a:	dbf2      	blt.n	8012432 <__swhatbuf_r+0x12>
 801244c:	9a01      	ldr	r2, [sp, #4]
 801244e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012452:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012456:	425a      	negs	r2, r3
 8012458:	415a      	adcs	r2, r3
 801245a:	602a      	str	r2, [r5, #0]
 801245c:	e7ee      	b.n	801243c <__swhatbuf_r+0x1c>
 801245e:	2340      	movs	r3, #64	; 0x40
 8012460:	2000      	movs	r0, #0
 8012462:	6023      	str	r3, [r4, #0]
 8012464:	b016      	add	sp, #88	; 0x58
 8012466:	bd70      	pop	{r4, r5, r6, pc}

08012468 <__smakebuf_r>:
 8012468:	898b      	ldrh	r3, [r1, #12]
 801246a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801246c:	079d      	lsls	r5, r3, #30
 801246e:	4606      	mov	r6, r0
 8012470:	460c      	mov	r4, r1
 8012472:	d507      	bpl.n	8012484 <__smakebuf_r+0x1c>
 8012474:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012478:	6023      	str	r3, [r4, #0]
 801247a:	6123      	str	r3, [r4, #16]
 801247c:	2301      	movs	r3, #1
 801247e:	6163      	str	r3, [r4, #20]
 8012480:	b002      	add	sp, #8
 8012482:	bd70      	pop	{r4, r5, r6, pc}
 8012484:	ab01      	add	r3, sp, #4
 8012486:	466a      	mov	r2, sp
 8012488:	f7ff ffca 	bl	8012420 <__swhatbuf_r>
 801248c:	9900      	ldr	r1, [sp, #0]
 801248e:	4605      	mov	r5, r0
 8012490:	4630      	mov	r0, r6
 8012492:	f7fe f861 	bl	8010558 <_malloc_r>
 8012496:	b948      	cbnz	r0, 80124ac <__smakebuf_r+0x44>
 8012498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801249c:	059a      	lsls	r2, r3, #22
 801249e:	d4ef      	bmi.n	8012480 <__smakebuf_r+0x18>
 80124a0:	f023 0303 	bic.w	r3, r3, #3
 80124a4:	f043 0302 	orr.w	r3, r3, #2
 80124a8:	81a3      	strh	r3, [r4, #12]
 80124aa:	e7e3      	b.n	8012474 <__smakebuf_r+0xc>
 80124ac:	4b0d      	ldr	r3, [pc, #52]	; (80124e4 <__smakebuf_r+0x7c>)
 80124ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80124b0:	89a3      	ldrh	r3, [r4, #12]
 80124b2:	6020      	str	r0, [r4, #0]
 80124b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124b8:	81a3      	strh	r3, [r4, #12]
 80124ba:	9b00      	ldr	r3, [sp, #0]
 80124bc:	6163      	str	r3, [r4, #20]
 80124be:	9b01      	ldr	r3, [sp, #4]
 80124c0:	6120      	str	r0, [r4, #16]
 80124c2:	b15b      	cbz	r3, 80124dc <__smakebuf_r+0x74>
 80124c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124c8:	4630      	mov	r0, r6
 80124ca:	f001 f9d1 	bl	8013870 <_isatty_r>
 80124ce:	b128      	cbz	r0, 80124dc <__smakebuf_r+0x74>
 80124d0:	89a3      	ldrh	r3, [r4, #12]
 80124d2:	f023 0303 	bic.w	r3, r3, #3
 80124d6:	f043 0301 	orr.w	r3, r3, #1
 80124da:	81a3      	strh	r3, [r4, #12]
 80124dc:	89a0      	ldrh	r0, [r4, #12]
 80124de:	4305      	orrs	r5, r0
 80124e0:	81a5      	strh	r5, [r4, #12]
 80124e2:	e7cd      	b.n	8012480 <__smakebuf_r+0x18>
 80124e4:	08011b75 	.word	0x08011b75

080124e8 <__ascii_mbtowc>:
 80124e8:	b082      	sub	sp, #8
 80124ea:	b901      	cbnz	r1, 80124ee <__ascii_mbtowc+0x6>
 80124ec:	a901      	add	r1, sp, #4
 80124ee:	b142      	cbz	r2, 8012502 <__ascii_mbtowc+0x1a>
 80124f0:	b14b      	cbz	r3, 8012506 <__ascii_mbtowc+0x1e>
 80124f2:	7813      	ldrb	r3, [r2, #0]
 80124f4:	600b      	str	r3, [r1, #0]
 80124f6:	7812      	ldrb	r2, [r2, #0]
 80124f8:	1e10      	subs	r0, r2, #0
 80124fa:	bf18      	it	ne
 80124fc:	2001      	movne	r0, #1
 80124fe:	b002      	add	sp, #8
 8012500:	4770      	bx	lr
 8012502:	4610      	mov	r0, r2
 8012504:	e7fb      	b.n	80124fe <__ascii_mbtowc+0x16>
 8012506:	f06f 0001 	mvn.w	r0, #1
 801250a:	e7f8      	b.n	80124fe <__ascii_mbtowc+0x16>

0801250c <__malloc_lock>:
 801250c:	4801      	ldr	r0, [pc, #4]	; (8012514 <__malloc_lock+0x8>)
 801250e:	f7ff bf72 	b.w	80123f6 <__retarget_lock_acquire_recursive>
 8012512:	bf00      	nop
 8012514:	200034cc 	.word	0x200034cc

08012518 <__malloc_unlock>:
 8012518:	4801      	ldr	r0, [pc, #4]	; (8012520 <__malloc_unlock+0x8>)
 801251a:	f7ff bf6d 	b.w	80123f8 <__retarget_lock_release_recursive>
 801251e:	bf00      	nop
 8012520:	200034cc 	.word	0x200034cc

08012524 <_Balloc>:
 8012524:	b570      	push	{r4, r5, r6, lr}
 8012526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012528:	4604      	mov	r4, r0
 801252a:	460d      	mov	r5, r1
 801252c:	b976      	cbnz	r6, 801254c <_Balloc+0x28>
 801252e:	2010      	movs	r0, #16
 8012530:	f7fd ff9c 	bl	801046c <malloc>
 8012534:	4602      	mov	r2, r0
 8012536:	6260      	str	r0, [r4, #36]	; 0x24
 8012538:	b920      	cbnz	r0, 8012544 <_Balloc+0x20>
 801253a:	4b18      	ldr	r3, [pc, #96]	; (801259c <_Balloc+0x78>)
 801253c:	4818      	ldr	r0, [pc, #96]	; (80125a0 <_Balloc+0x7c>)
 801253e:	2166      	movs	r1, #102	; 0x66
 8012540:	f001 f954 	bl	80137ec <__assert_func>
 8012544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012548:	6006      	str	r6, [r0, #0]
 801254a:	60c6      	str	r6, [r0, #12]
 801254c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801254e:	68f3      	ldr	r3, [r6, #12]
 8012550:	b183      	cbz	r3, 8012574 <_Balloc+0x50>
 8012552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801255a:	b9b8      	cbnz	r0, 801258c <_Balloc+0x68>
 801255c:	2101      	movs	r1, #1
 801255e:	fa01 f605 	lsl.w	r6, r1, r5
 8012562:	1d72      	adds	r2, r6, #5
 8012564:	0092      	lsls	r2, r2, #2
 8012566:	4620      	mov	r0, r4
 8012568:	f000 fc97 	bl	8012e9a <_calloc_r>
 801256c:	b160      	cbz	r0, 8012588 <_Balloc+0x64>
 801256e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012572:	e00e      	b.n	8012592 <_Balloc+0x6e>
 8012574:	2221      	movs	r2, #33	; 0x21
 8012576:	2104      	movs	r1, #4
 8012578:	4620      	mov	r0, r4
 801257a:	f000 fc8e 	bl	8012e9a <_calloc_r>
 801257e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012580:	60f0      	str	r0, [r6, #12]
 8012582:	68db      	ldr	r3, [r3, #12]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d1e4      	bne.n	8012552 <_Balloc+0x2e>
 8012588:	2000      	movs	r0, #0
 801258a:	bd70      	pop	{r4, r5, r6, pc}
 801258c:	6802      	ldr	r2, [r0, #0]
 801258e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012592:	2300      	movs	r3, #0
 8012594:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012598:	e7f7      	b.n	801258a <_Balloc+0x66>
 801259a:	bf00      	nop
 801259c:	080155a0 	.word	0x080155a0
 80125a0:	080155b7 	.word	0x080155b7

080125a4 <_Bfree>:
 80125a4:	b570      	push	{r4, r5, r6, lr}
 80125a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80125a8:	4605      	mov	r5, r0
 80125aa:	460c      	mov	r4, r1
 80125ac:	b976      	cbnz	r6, 80125cc <_Bfree+0x28>
 80125ae:	2010      	movs	r0, #16
 80125b0:	f7fd ff5c 	bl	801046c <malloc>
 80125b4:	4602      	mov	r2, r0
 80125b6:	6268      	str	r0, [r5, #36]	; 0x24
 80125b8:	b920      	cbnz	r0, 80125c4 <_Bfree+0x20>
 80125ba:	4b09      	ldr	r3, [pc, #36]	; (80125e0 <_Bfree+0x3c>)
 80125bc:	4809      	ldr	r0, [pc, #36]	; (80125e4 <_Bfree+0x40>)
 80125be:	218a      	movs	r1, #138	; 0x8a
 80125c0:	f001 f914 	bl	80137ec <__assert_func>
 80125c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80125c8:	6006      	str	r6, [r0, #0]
 80125ca:	60c6      	str	r6, [r0, #12]
 80125cc:	b13c      	cbz	r4, 80125de <_Bfree+0x3a>
 80125ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80125d0:	6862      	ldr	r2, [r4, #4]
 80125d2:	68db      	ldr	r3, [r3, #12]
 80125d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80125d8:	6021      	str	r1, [r4, #0]
 80125da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80125de:	bd70      	pop	{r4, r5, r6, pc}
 80125e0:	080155a0 	.word	0x080155a0
 80125e4:	080155b7 	.word	0x080155b7

080125e8 <__multadd>:
 80125e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ec:	690e      	ldr	r6, [r1, #16]
 80125ee:	4607      	mov	r7, r0
 80125f0:	4698      	mov	r8, r3
 80125f2:	460c      	mov	r4, r1
 80125f4:	f101 0014 	add.w	r0, r1, #20
 80125f8:	2300      	movs	r3, #0
 80125fa:	6805      	ldr	r5, [r0, #0]
 80125fc:	b2a9      	uxth	r1, r5
 80125fe:	fb02 8101 	mla	r1, r2, r1, r8
 8012602:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012606:	0c2d      	lsrs	r5, r5, #16
 8012608:	fb02 c505 	mla	r5, r2, r5, ip
 801260c:	b289      	uxth	r1, r1
 801260e:	3301      	adds	r3, #1
 8012610:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012614:	429e      	cmp	r6, r3
 8012616:	f840 1b04 	str.w	r1, [r0], #4
 801261a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801261e:	dcec      	bgt.n	80125fa <__multadd+0x12>
 8012620:	f1b8 0f00 	cmp.w	r8, #0
 8012624:	d022      	beq.n	801266c <__multadd+0x84>
 8012626:	68a3      	ldr	r3, [r4, #8]
 8012628:	42b3      	cmp	r3, r6
 801262a:	dc19      	bgt.n	8012660 <__multadd+0x78>
 801262c:	6861      	ldr	r1, [r4, #4]
 801262e:	4638      	mov	r0, r7
 8012630:	3101      	adds	r1, #1
 8012632:	f7ff ff77 	bl	8012524 <_Balloc>
 8012636:	4605      	mov	r5, r0
 8012638:	b928      	cbnz	r0, 8012646 <__multadd+0x5e>
 801263a:	4602      	mov	r2, r0
 801263c:	4b0d      	ldr	r3, [pc, #52]	; (8012674 <__multadd+0x8c>)
 801263e:	480e      	ldr	r0, [pc, #56]	; (8012678 <__multadd+0x90>)
 8012640:	21b5      	movs	r1, #181	; 0xb5
 8012642:	f001 f8d3 	bl	80137ec <__assert_func>
 8012646:	6922      	ldr	r2, [r4, #16]
 8012648:	3202      	adds	r2, #2
 801264a:	f104 010c 	add.w	r1, r4, #12
 801264e:	0092      	lsls	r2, r2, #2
 8012650:	300c      	adds	r0, #12
 8012652:	f7fd ff1b 	bl	801048c <memcpy>
 8012656:	4621      	mov	r1, r4
 8012658:	4638      	mov	r0, r7
 801265a:	f7ff ffa3 	bl	80125a4 <_Bfree>
 801265e:	462c      	mov	r4, r5
 8012660:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012664:	3601      	adds	r6, #1
 8012666:	f8c3 8014 	str.w	r8, [r3, #20]
 801266a:	6126      	str	r6, [r4, #16]
 801266c:	4620      	mov	r0, r4
 801266e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012672:	bf00      	nop
 8012674:	08015510 	.word	0x08015510
 8012678:	080155b7 	.word	0x080155b7

0801267c <__s2b>:
 801267c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012680:	460c      	mov	r4, r1
 8012682:	4615      	mov	r5, r2
 8012684:	461f      	mov	r7, r3
 8012686:	2209      	movs	r2, #9
 8012688:	3308      	adds	r3, #8
 801268a:	4606      	mov	r6, r0
 801268c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012690:	2100      	movs	r1, #0
 8012692:	2201      	movs	r2, #1
 8012694:	429a      	cmp	r2, r3
 8012696:	db09      	blt.n	80126ac <__s2b+0x30>
 8012698:	4630      	mov	r0, r6
 801269a:	f7ff ff43 	bl	8012524 <_Balloc>
 801269e:	b940      	cbnz	r0, 80126b2 <__s2b+0x36>
 80126a0:	4602      	mov	r2, r0
 80126a2:	4b19      	ldr	r3, [pc, #100]	; (8012708 <__s2b+0x8c>)
 80126a4:	4819      	ldr	r0, [pc, #100]	; (801270c <__s2b+0x90>)
 80126a6:	21ce      	movs	r1, #206	; 0xce
 80126a8:	f001 f8a0 	bl	80137ec <__assert_func>
 80126ac:	0052      	lsls	r2, r2, #1
 80126ae:	3101      	adds	r1, #1
 80126b0:	e7f0      	b.n	8012694 <__s2b+0x18>
 80126b2:	9b08      	ldr	r3, [sp, #32]
 80126b4:	6143      	str	r3, [r0, #20]
 80126b6:	2d09      	cmp	r5, #9
 80126b8:	f04f 0301 	mov.w	r3, #1
 80126bc:	6103      	str	r3, [r0, #16]
 80126be:	dd16      	ble.n	80126ee <__s2b+0x72>
 80126c0:	f104 0909 	add.w	r9, r4, #9
 80126c4:	46c8      	mov	r8, r9
 80126c6:	442c      	add	r4, r5
 80126c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80126cc:	4601      	mov	r1, r0
 80126ce:	3b30      	subs	r3, #48	; 0x30
 80126d0:	220a      	movs	r2, #10
 80126d2:	4630      	mov	r0, r6
 80126d4:	f7ff ff88 	bl	80125e8 <__multadd>
 80126d8:	45a0      	cmp	r8, r4
 80126da:	d1f5      	bne.n	80126c8 <__s2b+0x4c>
 80126dc:	f1a5 0408 	sub.w	r4, r5, #8
 80126e0:	444c      	add	r4, r9
 80126e2:	1b2d      	subs	r5, r5, r4
 80126e4:	1963      	adds	r3, r4, r5
 80126e6:	42bb      	cmp	r3, r7
 80126e8:	db04      	blt.n	80126f4 <__s2b+0x78>
 80126ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ee:	340a      	adds	r4, #10
 80126f0:	2509      	movs	r5, #9
 80126f2:	e7f6      	b.n	80126e2 <__s2b+0x66>
 80126f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80126f8:	4601      	mov	r1, r0
 80126fa:	3b30      	subs	r3, #48	; 0x30
 80126fc:	220a      	movs	r2, #10
 80126fe:	4630      	mov	r0, r6
 8012700:	f7ff ff72 	bl	80125e8 <__multadd>
 8012704:	e7ee      	b.n	80126e4 <__s2b+0x68>
 8012706:	bf00      	nop
 8012708:	08015510 	.word	0x08015510
 801270c:	080155b7 	.word	0x080155b7

08012710 <__hi0bits>:
 8012710:	0c03      	lsrs	r3, r0, #16
 8012712:	041b      	lsls	r3, r3, #16
 8012714:	b9d3      	cbnz	r3, 801274c <__hi0bits+0x3c>
 8012716:	0400      	lsls	r0, r0, #16
 8012718:	2310      	movs	r3, #16
 801271a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801271e:	bf04      	itt	eq
 8012720:	0200      	lsleq	r0, r0, #8
 8012722:	3308      	addeq	r3, #8
 8012724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012728:	bf04      	itt	eq
 801272a:	0100      	lsleq	r0, r0, #4
 801272c:	3304      	addeq	r3, #4
 801272e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012732:	bf04      	itt	eq
 8012734:	0080      	lsleq	r0, r0, #2
 8012736:	3302      	addeq	r3, #2
 8012738:	2800      	cmp	r0, #0
 801273a:	db05      	blt.n	8012748 <__hi0bits+0x38>
 801273c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012740:	f103 0301 	add.w	r3, r3, #1
 8012744:	bf08      	it	eq
 8012746:	2320      	moveq	r3, #32
 8012748:	4618      	mov	r0, r3
 801274a:	4770      	bx	lr
 801274c:	2300      	movs	r3, #0
 801274e:	e7e4      	b.n	801271a <__hi0bits+0xa>

08012750 <__lo0bits>:
 8012750:	6803      	ldr	r3, [r0, #0]
 8012752:	f013 0207 	ands.w	r2, r3, #7
 8012756:	4601      	mov	r1, r0
 8012758:	d00b      	beq.n	8012772 <__lo0bits+0x22>
 801275a:	07da      	lsls	r2, r3, #31
 801275c:	d424      	bmi.n	80127a8 <__lo0bits+0x58>
 801275e:	0798      	lsls	r0, r3, #30
 8012760:	bf49      	itett	mi
 8012762:	085b      	lsrmi	r3, r3, #1
 8012764:	089b      	lsrpl	r3, r3, #2
 8012766:	2001      	movmi	r0, #1
 8012768:	600b      	strmi	r3, [r1, #0]
 801276a:	bf5c      	itt	pl
 801276c:	600b      	strpl	r3, [r1, #0]
 801276e:	2002      	movpl	r0, #2
 8012770:	4770      	bx	lr
 8012772:	b298      	uxth	r0, r3
 8012774:	b9b0      	cbnz	r0, 80127a4 <__lo0bits+0x54>
 8012776:	0c1b      	lsrs	r3, r3, #16
 8012778:	2010      	movs	r0, #16
 801277a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801277e:	bf04      	itt	eq
 8012780:	0a1b      	lsreq	r3, r3, #8
 8012782:	3008      	addeq	r0, #8
 8012784:	071a      	lsls	r2, r3, #28
 8012786:	bf04      	itt	eq
 8012788:	091b      	lsreq	r3, r3, #4
 801278a:	3004      	addeq	r0, #4
 801278c:	079a      	lsls	r2, r3, #30
 801278e:	bf04      	itt	eq
 8012790:	089b      	lsreq	r3, r3, #2
 8012792:	3002      	addeq	r0, #2
 8012794:	07da      	lsls	r2, r3, #31
 8012796:	d403      	bmi.n	80127a0 <__lo0bits+0x50>
 8012798:	085b      	lsrs	r3, r3, #1
 801279a:	f100 0001 	add.w	r0, r0, #1
 801279e:	d005      	beq.n	80127ac <__lo0bits+0x5c>
 80127a0:	600b      	str	r3, [r1, #0]
 80127a2:	4770      	bx	lr
 80127a4:	4610      	mov	r0, r2
 80127a6:	e7e8      	b.n	801277a <__lo0bits+0x2a>
 80127a8:	2000      	movs	r0, #0
 80127aa:	4770      	bx	lr
 80127ac:	2020      	movs	r0, #32
 80127ae:	4770      	bx	lr

080127b0 <__i2b>:
 80127b0:	b510      	push	{r4, lr}
 80127b2:	460c      	mov	r4, r1
 80127b4:	2101      	movs	r1, #1
 80127b6:	f7ff feb5 	bl	8012524 <_Balloc>
 80127ba:	4602      	mov	r2, r0
 80127bc:	b928      	cbnz	r0, 80127ca <__i2b+0x1a>
 80127be:	4b05      	ldr	r3, [pc, #20]	; (80127d4 <__i2b+0x24>)
 80127c0:	4805      	ldr	r0, [pc, #20]	; (80127d8 <__i2b+0x28>)
 80127c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80127c6:	f001 f811 	bl	80137ec <__assert_func>
 80127ca:	2301      	movs	r3, #1
 80127cc:	6144      	str	r4, [r0, #20]
 80127ce:	6103      	str	r3, [r0, #16]
 80127d0:	bd10      	pop	{r4, pc}
 80127d2:	bf00      	nop
 80127d4:	08015510 	.word	0x08015510
 80127d8:	080155b7 	.word	0x080155b7

080127dc <__multiply>:
 80127dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e0:	4614      	mov	r4, r2
 80127e2:	690a      	ldr	r2, [r1, #16]
 80127e4:	6923      	ldr	r3, [r4, #16]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	bfb8      	it	lt
 80127ea:	460b      	movlt	r3, r1
 80127ec:	460d      	mov	r5, r1
 80127ee:	bfbc      	itt	lt
 80127f0:	4625      	movlt	r5, r4
 80127f2:	461c      	movlt	r4, r3
 80127f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80127f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80127fc:	68ab      	ldr	r3, [r5, #8]
 80127fe:	6869      	ldr	r1, [r5, #4]
 8012800:	eb0a 0709 	add.w	r7, sl, r9
 8012804:	42bb      	cmp	r3, r7
 8012806:	b085      	sub	sp, #20
 8012808:	bfb8      	it	lt
 801280a:	3101      	addlt	r1, #1
 801280c:	f7ff fe8a 	bl	8012524 <_Balloc>
 8012810:	b930      	cbnz	r0, 8012820 <__multiply+0x44>
 8012812:	4602      	mov	r2, r0
 8012814:	4b42      	ldr	r3, [pc, #264]	; (8012920 <__multiply+0x144>)
 8012816:	4843      	ldr	r0, [pc, #268]	; (8012924 <__multiply+0x148>)
 8012818:	f240 115d 	movw	r1, #349	; 0x15d
 801281c:	f000 ffe6 	bl	80137ec <__assert_func>
 8012820:	f100 0614 	add.w	r6, r0, #20
 8012824:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012828:	4633      	mov	r3, r6
 801282a:	2200      	movs	r2, #0
 801282c:	4543      	cmp	r3, r8
 801282e:	d31e      	bcc.n	801286e <__multiply+0x92>
 8012830:	f105 0c14 	add.w	ip, r5, #20
 8012834:	f104 0314 	add.w	r3, r4, #20
 8012838:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801283c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012840:	9202      	str	r2, [sp, #8]
 8012842:	ebac 0205 	sub.w	r2, ip, r5
 8012846:	3a15      	subs	r2, #21
 8012848:	f022 0203 	bic.w	r2, r2, #3
 801284c:	3204      	adds	r2, #4
 801284e:	f105 0115 	add.w	r1, r5, #21
 8012852:	458c      	cmp	ip, r1
 8012854:	bf38      	it	cc
 8012856:	2204      	movcc	r2, #4
 8012858:	9201      	str	r2, [sp, #4]
 801285a:	9a02      	ldr	r2, [sp, #8]
 801285c:	9303      	str	r3, [sp, #12]
 801285e:	429a      	cmp	r2, r3
 8012860:	d808      	bhi.n	8012874 <__multiply+0x98>
 8012862:	2f00      	cmp	r7, #0
 8012864:	dc55      	bgt.n	8012912 <__multiply+0x136>
 8012866:	6107      	str	r7, [r0, #16]
 8012868:	b005      	add	sp, #20
 801286a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801286e:	f843 2b04 	str.w	r2, [r3], #4
 8012872:	e7db      	b.n	801282c <__multiply+0x50>
 8012874:	f8b3 a000 	ldrh.w	sl, [r3]
 8012878:	f1ba 0f00 	cmp.w	sl, #0
 801287c:	d020      	beq.n	80128c0 <__multiply+0xe4>
 801287e:	f105 0e14 	add.w	lr, r5, #20
 8012882:	46b1      	mov	r9, r6
 8012884:	2200      	movs	r2, #0
 8012886:	f85e 4b04 	ldr.w	r4, [lr], #4
 801288a:	f8d9 b000 	ldr.w	fp, [r9]
 801288e:	b2a1      	uxth	r1, r4
 8012890:	fa1f fb8b 	uxth.w	fp, fp
 8012894:	fb0a b101 	mla	r1, sl, r1, fp
 8012898:	4411      	add	r1, r2
 801289a:	f8d9 2000 	ldr.w	r2, [r9]
 801289e:	0c24      	lsrs	r4, r4, #16
 80128a0:	0c12      	lsrs	r2, r2, #16
 80128a2:	fb0a 2404 	mla	r4, sl, r4, r2
 80128a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80128aa:	b289      	uxth	r1, r1
 80128ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80128b0:	45f4      	cmp	ip, lr
 80128b2:	f849 1b04 	str.w	r1, [r9], #4
 80128b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80128ba:	d8e4      	bhi.n	8012886 <__multiply+0xaa>
 80128bc:	9901      	ldr	r1, [sp, #4]
 80128be:	5072      	str	r2, [r6, r1]
 80128c0:	9a03      	ldr	r2, [sp, #12]
 80128c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80128c6:	3304      	adds	r3, #4
 80128c8:	f1b9 0f00 	cmp.w	r9, #0
 80128cc:	d01f      	beq.n	801290e <__multiply+0x132>
 80128ce:	6834      	ldr	r4, [r6, #0]
 80128d0:	f105 0114 	add.w	r1, r5, #20
 80128d4:	46b6      	mov	lr, r6
 80128d6:	f04f 0a00 	mov.w	sl, #0
 80128da:	880a      	ldrh	r2, [r1, #0]
 80128dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80128e0:	fb09 b202 	mla	r2, r9, r2, fp
 80128e4:	4492      	add	sl, r2
 80128e6:	b2a4      	uxth	r4, r4
 80128e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80128ec:	f84e 4b04 	str.w	r4, [lr], #4
 80128f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80128f4:	f8be 2000 	ldrh.w	r2, [lr]
 80128f8:	0c24      	lsrs	r4, r4, #16
 80128fa:	fb09 2404 	mla	r4, r9, r4, r2
 80128fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012902:	458c      	cmp	ip, r1
 8012904:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012908:	d8e7      	bhi.n	80128da <__multiply+0xfe>
 801290a:	9a01      	ldr	r2, [sp, #4]
 801290c:	50b4      	str	r4, [r6, r2]
 801290e:	3604      	adds	r6, #4
 8012910:	e7a3      	b.n	801285a <__multiply+0x7e>
 8012912:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012916:	2b00      	cmp	r3, #0
 8012918:	d1a5      	bne.n	8012866 <__multiply+0x8a>
 801291a:	3f01      	subs	r7, #1
 801291c:	e7a1      	b.n	8012862 <__multiply+0x86>
 801291e:	bf00      	nop
 8012920:	08015510 	.word	0x08015510
 8012924:	080155b7 	.word	0x080155b7

08012928 <__pow5mult>:
 8012928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801292c:	4615      	mov	r5, r2
 801292e:	f012 0203 	ands.w	r2, r2, #3
 8012932:	4606      	mov	r6, r0
 8012934:	460f      	mov	r7, r1
 8012936:	d007      	beq.n	8012948 <__pow5mult+0x20>
 8012938:	4c25      	ldr	r4, [pc, #148]	; (80129d0 <__pow5mult+0xa8>)
 801293a:	3a01      	subs	r2, #1
 801293c:	2300      	movs	r3, #0
 801293e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012942:	f7ff fe51 	bl	80125e8 <__multadd>
 8012946:	4607      	mov	r7, r0
 8012948:	10ad      	asrs	r5, r5, #2
 801294a:	d03d      	beq.n	80129c8 <__pow5mult+0xa0>
 801294c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801294e:	b97c      	cbnz	r4, 8012970 <__pow5mult+0x48>
 8012950:	2010      	movs	r0, #16
 8012952:	f7fd fd8b 	bl	801046c <malloc>
 8012956:	4602      	mov	r2, r0
 8012958:	6270      	str	r0, [r6, #36]	; 0x24
 801295a:	b928      	cbnz	r0, 8012968 <__pow5mult+0x40>
 801295c:	4b1d      	ldr	r3, [pc, #116]	; (80129d4 <__pow5mult+0xac>)
 801295e:	481e      	ldr	r0, [pc, #120]	; (80129d8 <__pow5mult+0xb0>)
 8012960:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012964:	f000 ff42 	bl	80137ec <__assert_func>
 8012968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801296c:	6004      	str	r4, [r0, #0]
 801296e:	60c4      	str	r4, [r0, #12]
 8012970:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012978:	b94c      	cbnz	r4, 801298e <__pow5mult+0x66>
 801297a:	f240 2171 	movw	r1, #625	; 0x271
 801297e:	4630      	mov	r0, r6
 8012980:	f7ff ff16 	bl	80127b0 <__i2b>
 8012984:	2300      	movs	r3, #0
 8012986:	f8c8 0008 	str.w	r0, [r8, #8]
 801298a:	4604      	mov	r4, r0
 801298c:	6003      	str	r3, [r0, #0]
 801298e:	f04f 0900 	mov.w	r9, #0
 8012992:	07eb      	lsls	r3, r5, #31
 8012994:	d50a      	bpl.n	80129ac <__pow5mult+0x84>
 8012996:	4639      	mov	r1, r7
 8012998:	4622      	mov	r2, r4
 801299a:	4630      	mov	r0, r6
 801299c:	f7ff ff1e 	bl	80127dc <__multiply>
 80129a0:	4639      	mov	r1, r7
 80129a2:	4680      	mov	r8, r0
 80129a4:	4630      	mov	r0, r6
 80129a6:	f7ff fdfd 	bl	80125a4 <_Bfree>
 80129aa:	4647      	mov	r7, r8
 80129ac:	106d      	asrs	r5, r5, #1
 80129ae:	d00b      	beq.n	80129c8 <__pow5mult+0xa0>
 80129b0:	6820      	ldr	r0, [r4, #0]
 80129b2:	b938      	cbnz	r0, 80129c4 <__pow5mult+0x9c>
 80129b4:	4622      	mov	r2, r4
 80129b6:	4621      	mov	r1, r4
 80129b8:	4630      	mov	r0, r6
 80129ba:	f7ff ff0f 	bl	80127dc <__multiply>
 80129be:	6020      	str	r0, [r4, #0]
 80129c0:	f8c0 9000 	str.w	r9, [r0]
 80129c4:	4604      	mov	r4, r0
 80129c6:	e7e4      	b.n	8012992 <__pow5mult+0x6a>
 80129c8:	4638      	mov	r0, r7
 80129ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129ce:	bf00      	nop
 80129d0:	08015708 	.word	0x08015708
 80129d4:	080155a0 	.word	0x080155a0
 80129d8:	080155b7 	.word	0x080155b7

080129dc <__lshift>:
 80129dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129e0:	460c      	mov	r4, r1
 80129e2:	6849      	ldr	r1, [r1, #4]
 80129e4:	6923      	ldr	r3, [r4, #16]
 80129e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80129ea:	68a3      	ldr	r3, [r4, #8]
 80129ec:	4607      	mov	r7, r0
 80129ee:	4691      	mov	r9, r2
 80129f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80129f4:	f108 0601 	add.w	r6, r8, #1
 80129f8:	42b3      	cmp	r3, r6
 80129fa:	db0b      	blt.n	8012a14 <__lshift+0x38>
 80129fc:	4638      	mov	r0, r7
 80129fe:	f7ff fd91 	bl	8012524 <_Balloc>
 8012a02:	4605      	mov	r5, r0
 8012a04:	b948      	cbnz	r0, 8012a1a <__lshift+0x3e>
 8012a06:	4602      	mov	r2, r0
 8012a08:	4b28      	ldr	r3, [pc, #160]	; (8012aac <__lshift+0xd0>)
 8012a0a:	4829      	ldr	r0, [pc, #164]	; (8012ab0 <__lshift+0xd4>)
 8012a0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012a10:	f000 feec 	bl	80137ec <__assert_func>
 8012a14:	3101      	adds	r1, #1
 8012a16:	005b      	lsls	r3, r3, #1
 8012a18:	e7ee      	b.n	80129f8 <__lshift+0x1c>
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	f100 0114 	add.w	r1, r0, #20
 8012a20:	f100 0210 	add.w	r2, r0, #16
 8012a24:	4618      	mov	r0, r3
 8012a26:	4553      	cmp	r3, sl
 8012a28:	db33      	blt.n	8012a92 <__lshift+0xb6>
 8012a2a:	6920      	ldr	r0, [r4, #16]
 8012a2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012a30:	f104 0314 	add.w	r3, r4, #20
 8012a34:	f019 091f 	ands.w	r9, r9, #31
 8012a38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012a3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012a40:	d02b      	beq.n	8012a9a <__lshift+0xbe>
 8012a42:	f1c9 0e20 	rsb	lr, r9, #32
 8012a46:	468a      	mov	sl, r1
 8012a48:	2200      	movs	r2, #0
 8012a4a:	6818      	ldr	r0, [r3, #0]
 8012a4c:	fa00 f009 	lsl.w	r0, r0, r9
 8012a50:	4302      	orrs	r2, r0
 8012a52:	f84a 2b04 	str.w	r2, [sl], #4
 8012a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a5a:	459c      	cmp	ip, r3
 8012a5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012a60:	d8f3      	bhi.n	8012a4a <__lshift+0x6e>
 8012a62:	ebac 0304 	sub.w	r3, ip, r4
 8012a66:	3b15      	subs	r3, #21
 8012a68:	f023 0303 	bic.w	r3, r3, #3
 8012a6c:	3304      	adds	r3, #4
 8012a6e:	f104 0015 	add.w	r0, r4, #21
 8012a72:	4584      	cmp	ip, r0
 8012a74:	bf38      	it	cc
 8012a76:	2304      	movcc	r3, #4
 8012a78:	50ca      	str	r2, [r1, r3]
 8012a7a:	b10a      	cbz	r2, 8012a80 <__lshift+0xa4>
 8012a7c:	f108 0602 	add.w	r6, r8, #2
 8012a80:	3e01      	subs	r6, #1
 8012a82:	4638      	mov	r0, r7
 8012a84:	612e      	str	r6, [r5, #16]
 8012a86:	4621      	mov	r1, r4
 8012a88:	f7ff fd8c 	bl	80125a4 <_Bfree>
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a92:	f842 0f04 	str.w	r0, [r2, #4]!
 8012a96:	3301      	adds	r3, #1
 8012a98:	e7c5      	b.n	8012a26 <__lshift+0x4a>
 8012a9a:	3904      	subs	r1, #4
 8012a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012aa0:	f841 2f04 	str.w	r2, [r1, #4]!
 8012aa4:	459c      	cmp	ip, r3
 8012aa6:	d8f9      	bhi.n	8012a9c <__lshift+0xc0>
 8012aa8:	e7ea      	b.n	8012a80 <__lshift+0xa4>
 8012aaa:	bf00      	nop
 8012aac:	08015510 	.word	0x08015510
 8012ab0:	080155b7 	.word	0x080155b7

08012ab4 <__mcmp>:
 8012ab4:	b530      	push	{r4, r5, lr}
 8012ab6:	6902      	ldr	r2, [r0, #16]
 8012ab8:	690c      	ldr	r4, [r1, #16]
 8012aba:	1b12      	subs	r2, r2, r4
 8012abc:	d10e      	bne.n	8012adc <__mcmp+0x28>
 8012abe:	f100 0314 	add.w	r3, r0, #20
 8012ac2:	3114      	adds	r1, #20
 8012ac4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012ac8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012acc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012ad0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012ad4:	42a5      	cmp	r5, r4
 8012ad6:	d003      	beq.n	8012ae0 <__mcmp+0x2c>
 8012ad8:	d305      	bcc.n	8012ae6 <__mcmp+0x32>
 8012ada:	2201      	movs	r2, #1
 8012adc:	4610      	mov	r0, r2
 8012ade:	bd30      	pop	{r4, r5, pc}
 8012ae0:	4283      	cmp	r3, r0
 8012ae2:	d3f3      	bcc.n	8012acc <__mcmp+0x18>
 8012ae4:	e7fa      	b.n	8012adc <__mcmp+0x28>
 8012ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8012aea:	e7f7      	b.n	8012adc <__mcmp+0x28>

08012aec <__mdiff>:
 8012aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af0:	460c      	mov	r4, r1
 8012af2:	4606      	mov	r6, r0
 8012af4:	4611      	mov	r1, r2
 8012af6:	4620      	mov	r0, r4
 8012af8:	4617      	mov	r7, r2
 8012afa:	f7ff ffdb 	bl	8012ab4 <__mcmp>
 8012afe:	1e05      	subs	r5, r0, #0
 8012b00:	d110      	bne.n	8012b24 <__mdiff+0x38>
 8012b02:	4629      	mov	r1, r5
 8012b04:	4630      	mov	r0, r6
 8012b06:	f7ff fd0d 	bl	8012524 <_Balloc>
 8012b0a:	b930      	cbnz	r0, 8012b1a <__mdiff+0x2e>
 8012b0c:	4b39      	ldr	r3, [pc, #228]	; (8012bf4 <__mdiff+0x108>)
 8012b0e:	4602      	mov	r2, r0
 8012b10:	f240 2132 	movw	r1, #562	; 0x232
 8012b14:	4838      	ldr	r0, [pc, #224]	; (8012bf8 <__mdiff+0x10c>)
 8012b16:	f000 fe69 	bl	80137ec <__assert_func>
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b24:	bfa4      	itt	ge
 8012b26:	463b      	movge	r3, r7
 8012b28:	4627      	movge	r7, r4
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	6879      	ldr	r1, [r7, #4]
 8012b2e:	bfa6      	itte	ge
 8012b30:	461c      	movge	r4, r3
 8012b32:	2500      	movge	r5, #0
 8012b34:	2501      	movlt	r5, #1
 8012b36:	f7ff fcf5 	bl	8012524 <_Balloc>
 8012b3a:	b920      	cbnz	r0, 8012b46 <__mdiff+0x5a>
 8012b3c:	4b2d      	ldr	r3, [pc, #180]	; (8012bf4 <__mdiff+0x108>)
 8012b3e:	4602      	mov	r2, r0
 8012b40:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012b44:	e7e6      	b.n	8012b14 <__mdiff+0x28>
 8012b46:	693e      	ldr	r6, [r7, #16]
 8012b48:	60c5      	str	r5, [r0, #12]
 8012b4a:	6925      	ldr	r5, [r4, #16]
 8012b4c:	f107 0114 	add.w	r1, r7, #20
 8012b50:	f104 0914 	add.w	r9, r4, #20
 8012b54:	f100 0e14 	add.w	lr, r0, #20
 8012b58:	f107 0210 	add.w	r2, r7, #16
 8012b5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012b60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012b64:	46f2      	mov	sl, lr
 8012b66:	2700      	movs	r7, #0
 8012b68:	f859 3b04 	ldr.w	r3, [r9], #4
 8012b6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012b70:	fa1f f883 	uxth.w	r8, r3
 8012b74:	fa17 f78b 	uxtah	r7, r7, fp
 8012b78:	0c1b      	lsrs	r3, r3, #16
 8012b7a:	eba7 0808 	sub.w	r8, r7, r8
 8012b7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012b82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012b86:	fa1f f888 	uxth.w	r8, r8
 8012b8a:	141f      	asrs	r7, r3, #16
 8012b8c:	454d      	cmp	r5, r9
 8012b8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012b92:	f84a 3b04 	str.w	r3, [sl], #4
 8012b96:	d8e7      	bhi.n	8012b68 <__mdiff+0x7c>
 8012b98:	1b2b      	subs	r3, r5, r4
 8012b9a:	3b15      	subs	r3, #21
 8012b9c:	f023 0303 	bic.w	r3, r3, #3
 8012ba0:	3304      	adds	r3, #4
 8012ba2:	3415      	adds	r4, #21
 8012ba4:	42a5      	cmp	r5, r4
 8012ba6:	bf38      	it	cc
 8012ba8:	2304      	movcc	r3, #4
 8012baa:	4419      	add	r1, r3
 8012bac:	4473      	add	r3, lr
 8012bae:	469e      	mov	lr, r3
 8012bb0:	460d      	mov	r5, r1
 8012bb2:	4565      	cmp	r5, ip
 8012bb4:	d30e      	bcc.n	8012bd4 <__mdiff+0xe8>
 8012bb6:	f10c 0203 	add.w	r2, ip, #3
 8012bba:	1a52      	subs	r2, r2, r1
 8012bbc:	f022 0203 	bic.w	r2, r2, #3
 8012bc0:	3903      	subs	r1, #3
 8012bc2:	458c      	cmp	ip, r1
 8012bc4:	bf38      	it	cc
 8012bc6:	2200      	movcc	r2, #0
 8012bc8:	441a      	add	r2, r3
 8012bca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012bce:	b17b      	cbz	r3, 8012bf0 <__mdiff+0x104>
 8012bd0:	6106      	str	r6, [r0, #16]
 8012bd2:	e7a5      	b.n	8012b20 <__mdiff+0x34>
 8012bd4:	f855 8b04 	ldr.w	r8, [r5], #4
 8012bd8:	fa17 f488 	uxtah	r4, r7, r8
 8012bdc:	1422      	asrs	r2, r4, #16
 8012bde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012be2:	b2a4      	uxth	r4, r4
 8012be4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012be8:	f84e 4b04 	str.w	r4, [lr], #4
 8012bec:	1417      	asrs	r7, r2, #16
 8012bee:	e7e0      	b.n	8012bb2 <__mdiff+0xc6>
 8012bf0:	3e01      	subs	r6, #1
 8012bf2:	e7ea      	b.n	8012bca <__mdiff+0xde>
 8012bf4:	08015510 	.word	0x08015510
 8012bf8:	080155b7 	.word	0x080155b7

08012bfc <__ulp>:
 8012bfc:	b082      	sub	sp, #8
 8012bfe:	ed8d 0b00 	vstr	d0, [sp]
 8012c02:	9b01      	ldr	r3, [sp, #4]
 8012c04:	4912      	ldr	r1, [pc, #72]	; (8012c50 <__ulp+0x54>)
 8012c06:	4019      	ands	r1, r3
 8012c08:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012c0c:	2900      	cmp	r1, #0
 8012c0e:	dd05      	ble.n	8012c1c <__ulp+0x20>
 8012c10:	2200      	movs	r2, #0
 8012c12:	460b      	mov	r3, r1
 8012c14:	ec43 2b10 	vmov	d0, r2, r3
 8012c18:	b002      	add	sp, #8
 8012c1a:	4770      	bx	lr
 8012c1c:	4249      	negs	r1, r1
 8012c1e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012c22:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012c26:	f04f 0200 	mov.w	r2, #0
 8012c2a:	f04f 0300 	mov.w	r3, #0
 8012c2e:	da04      	bge.n	8012c3a <__ulp+0x3e>
 8012c30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012c34:	fa41 f300 	asr.w	r3, r1, r0
 8012c38:	e7ec      	b.n	8012c14 <__ulp+0x18>
 8012c3a:	f1a0 0114 	sub.w	r1, r0, #20
 8012c3e:	291e      	cmp	r1, #30
 8012c40:	bfda      	itte	le
 8012c42:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012c46:	fa20 f101 	lsrle.w	r1, r0, r1
 8012c4a:	2101      	movgt	r1, #1
 8012c4c:	460a      	mov	r2, r1
 8012c4e:	e7e1      	b.n	8012c14 <__ulp+0x18>
 8012c50:	7ff00000 	.word	0x7ff00000

08012c54 <__b2d>:
 8012c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c56:	6905      	ldr	r5, [r0, #16]
 8012c58:	f100 0714 	add.w	r7, r0, #20
 8012c5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012c60:	1f2e      	subs	r6, r5, #4
 8012c62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012c66:	4620      	mov	r0, r4
 8012c68:	f7ff fd52 	bl	8012710 <__hi0bits>
 8012c6c:	f1c0 0320 	rsb	r3, r0, #32
 8012c70:	280a      	cmp	r0, #10
 8012c72:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012cf0 <__b2d+0x9c>
 8012c76:	600b      	str	r3, [r1, #0]
 8012c78:	dc14      	bgt.n	8012ca4 <__b2d+0x50>
 8012c7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8012c7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012c82:	42b7      	cmp	r7, r6
 8012c84:	ea41 030c 	orr.w	r3, r1, ip
 8012c88:	bf34      	ite	cc
 8012c8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012c8e:	2100      	movcs	r1, #0
 8012c90:	3015      	adds	r0, #21
 8012c92:	fa04 f000 	lsl.w	r0, r4, r0
 8012c96:	fa21 f10e 	lsr.w	r1, r1, lr
 8012c9a:	ea40 0201 	orr.w	r2, r0, r1
 8012c9e:	ec43 2b10 	vmov	d0, r2, r3
 8012ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ca4:	42b7      	cmp	r7, r6
 8012ca6:	bf3a      	itte	cc
 8012ca8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012cac:	f1a5 0608 	subcc.w	r6, r5, #8
 8012cb0:	2100      	movcs	r1, #0
 8012cb2:	380b      	subs	r0, #11
 8012cb4:	d017      	beq.n	8012ce6 <__b2d+0x92>
 8012cb6:	f1c0 0c20 	rsb	ip, r0, #32
 8012cba:	fa04 f500 	lsl.w	r5, r4, r0
 8012cbe:	42be      	cmp	r6, r7
 8012cc0:	fa21 f40c 	lsr.w	r4, r1, ip
 8012cc4:	ea45 0504 	orr.w	r5, r5, r4
 8012cc8:	bf8c      	ite	hi
 8012cca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012cce:	2400      	movls	r4, #0
 8012cd0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012cd4:	fa01 f000 	lsl.w	r0, r1, r0
 8012cd8:	fa24 f40c 	lsr.w	r4, r4, ip
 8012cdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012ce0:	ea40 0204 	orr.w	r2, r0, r4
 8012ce4:	e7db      	b.n	8012c9e <__b2d+0x4a>
 8012ce6:	ea44 030c 	orr.w	r3, r4, ip
 8012cea:	460a      	mov	r2, r1
 8012cec:	e7d7      	b.n	8012c9e <__b2d+0x4a>
 8012cee:	bf00      	nop
 8012cf0:	3ff00000 	.word	0x3ff00000

08012cf4 <__d2b>:
 8012cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012cf8:	4689      	mov	r9, r1
 8012cfa:	2101      	movs	r1, #1
 8012cfc:	ec57 6b10 	vmov	r6, r7, d0
 8012d00:	4690      	mov	r8, r2
 8012d02:	f7ff fc0f 	bl	8012524 <_Balloc>
 8012d06:	4604      	mov	r4, r0
 8012d08:	b930      	cbnz	r0, 8012d18 <__d2b+0x24>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	4b25      	ldr	r3, [pc, #148]	; (8012da4 <__d2b+0xb0>)
 8012d0e:	4826      	ldr	r0, [pc, #152]	; (8012da8 <__d2b+0xb4>)
 8012d10:	f240 310a 	movw	r1, #778	; 0x30a
 8012d14:	f000 fd6a 	bl	80137ec <__assert_func>
 8012d18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012d1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012d20:	bb35      	cbnz	r5, 8012d70 <__d2b+0x7c>
 8012d22:	2e00      	cmp	r6, #0
 8012d24:	9301      	str	r3, [sp, #4]
 8012d26:	d028      	beq.n	8012d7a <__d2b+0x86>
 8012d28:	4668      	mov	r0, sp
 8012d2a:	9600      	str	r6, [sp, #0]
 8012d2c:	f7ff fd10 	bl	8012750 <__lo0bits>
 8012d30:	9900      	ldr	r1, [sp, #0]
 8012d32:	b300      	cbz	r0, 8012d76 <__d2b+0x82>
 8012d34:	9a01      	ldr	r2, [sp, #4]
 8012d36:	f1c0 0320 	rsb	r3, r0, #32
 8012d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8012d3e:	430b      	orrs	r3, r1
 8012d40:	40c2      	lsrs	r2, r0
 8012d42:	6163      	str	r3, [r4, #20]
 8012d44:	9201      	str	r2, [sp, #4]
 8012d46:	9b01      	ldr	r3, [sp, #4]
 8012d48:	61a3      	str	r3, [r4, #24]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	bf14      	ite	ne
 8012d4e:	2202      	movne	r2, #2
 8012d50:	2201      	moveq	r2, #1
 8012d52:	6122      	str	r2, [r4, #16]
 8012d54:	b1d5      	cbz	r5, 8012d8c <__d2b+0x98>
 8012d56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012d5a:	4405      	add	r5, r0
 8012d5c:	f8c9 5000 	str.w	r5, [r9]
 8012d60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012d64:	f8c8 0000 	str.w	r0, [r8]
 8012d68:	4620      	mov	r0, r4
 8012d6a:	b003      	add	sp, #12
 8012d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012d74:	e7d5      	b.n	8012d22 <__d2b+0x2e>
 8012d76:	6161      	str	r1, [r4, #20]
 8012d78:	e7e5      	b.n	8012d46 <__d2b+0x52>
 8012d7a:	a801      	add	r0, sp, #4
 8012d7c:	f7ff fce8 	bl	8012750 <__lo0bits>
 8012d80:	9b01      	ldr	r3, [sp, #4]
 8012d82:	6163      	str	r3, [r4, #20]
 8012d84:	2201      	movs	r2, #1
 8012d86:	6122      	str	r2, [r4, #16]
 8012d88:	3020      	adds	r0, #32
 8012d8a:	e7e3      	b.n	8012d54 <__d2b+0x60>
 8012d8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012d90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012d94:	f8c9 0000 	str.w	r0, [r9]
 8012d98:	6918      	ldr	r0, [r3, #16]
 8012d9a:	f7ff fcb9 	bl	8012710 <__hi0bits>
 8012d9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012da2:	e7df      	b.n	8012d64 <__d2b+0x70>
 8012da4:	08015510 	.word	0x08015510
 8012da8:	080155b7 	.word	0x080155b7

08012dac <__ratio>:
 8012dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db0:	4688      	mov	r8, r1
 8012db2:	4669      	mov	r1, sp
 8012db4:	4681      	mov	r9, r0
 8012db6:	f7ff ff4d 	bl	8012c54 <__b2d>
 8012dba:	a901      	add	r1, sp, #4
 8012dbc:	4640      	mov	r0, r8
 8012dbe:	ec55 4b10 	vmov	r4, r5, d0
 8012dc2:	f7ff ff47 	bl	8012c54 <__b2d>
 8012dc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012dca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012dce:	eba3 0c02 	sub.w	ip, r3, r2
 8012dd2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012dd6:	1a9b      	subs	r3, r3, r2
 8012dd8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012ddc:	ec51 0b10 	vmov	r0, r1, d0
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	bfd6      	itet	le
 8012de4:	460a      	movle	r2, r1
 8012de6:	462a      	movgt	r2, r5
 8012de8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012dec:	468b      	mov	fp, r1
 8012dee:	462f      	mov	r7, r5
 8012df0:	bfd4      	ite	le
 8012df2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012df6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	ee10 2a10 	vmov	r2, s0
 8012e00:	465b      	mov	r3, fp
 8012e02:	4639      	mov	r1, r7
 8012e04:	f7ed fd3a 	bl	800087c <__aeabi_ddiv>
 8012e08:	ec41 0b10 	vmov	d0, r0, r1
 8012e0c:	b003      	add	sp, #12
 8012e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e12 <__copybits>:
 8012e12:	3901      	subs	r1, #1
 8012e14:	b570      	push	{r4, r5, r6, lr}
 8012e16:	1149      	asrs	r1, r1, #5
 8012e18:	6914      	ldr	r4, [r2, #16]
 8012e1a:	3101      	adds	r1, #1
 8012e1c:	f102 0314 	add.w	r3, r2, #20
 8012e20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012e24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012e28:	1f05      	subs	r5, r0, #4
 8012e2a:	42a3      	cmp	r3, r4
 8012e2c:	d30c      	bcc.n	8012e48 <__copybits+0x36>
 8012e2e:	1aa3      	subs	r3, r4, r2
 8012e30:	3b11      	subs	r3, #17
 8012e32:	f023 0303 	bic.w	r3, r3, #3
 8012e36:	3211      	adds	r2, #17
 8012e38:	42a2      	cmp	r2, r4
 8012e3a:	bf88      	it	hi
 8012e3c:	2300      	movhi	r3, #0
 8012e3e:	4418      	add	r0, r3
 8012e40:	2300      	movs	r3, #0
 8012e42:	4288      	cmp	r0, r1
 8012e44:	d305      	bcc.n	8012e52 <__copybits+0x40>
 8012e46:	bd70      	pop	{r4, r5, r6, pc}
 8012e48:	f853 6b04 	ldr.w	r6, [r3], #4
 8012e4c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012e50:	e7eb      	b.n	8012e2a <__copybits+0x18>
 8012e52:	f840 3b04 	str.w	r3, [r0], #4
 8012e56:	e7f4      	b.n	8012e42 <__copybits+0x30>

08012e58 <__any_on>:
 8012e58:	f100 0214 	add.w	r2, r0, #20
 8012e5c:	6900      	ldr	r0, [r0, #16]
 8012e5e:	114b      	asrs	r3, r1, #5
 8012e60:	4298      	cmp	r0, r3
 8012e62:	b510      	push	{r4, lr}
 8012e64:	db11      	blt.n	8012e8a <__any_on+0x32>
 8012e66:	dd0a      	ble.n	8012e7e <__any_on+0x26>
 8012e68:	f011 011f 	ands.w	r1, r1, #31
 8012e6c:	d007      	beq.n	8012e7e <__any_on+0x26>
 8012e6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012e72:	fa24 f001 	lsr.w	r0, r4, r1
 8012e76:	fa00 f101 	lsl.w	r1, r0, r1
 8012e7a:	428c      	cmp	r4, r1
 8012e7c:	d10b      	bne.n	8012e96 <__any_on+0x3e>
 8012e7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012e82:	4293      	cmp	r3, r2
 8012e84:	d803      	bhi.n	8012e8e <__any_on+0x36>
 8012e86:	2000      	movs	r0, #0
 8012e88:	bd10      	pop	{r4, pc}
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	e7f7      	b.n	8012e7e <__any_on+0x26>
 8012e8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012e92:	2900      	cmp	r1, #0
 8012e94:	d0f5      	beq.n	8012e82 <__any_on+0x2a>
 8012e96:	2001      	movs	r0, #1
 8012e98:	e7f6      	b.n	8012e88 <__any_on+0x30>

08012e9a <_calloc_r>:
 8012e9a:	b513      	push	{r0, r1, r4, lr}
 8012e9c:	434a      	muls	r2, r1
 8012e9e:	4611      	mov	r1, r2
 8012ea0:	9201      	str	r2, [sp, #4]
 8012ea2:	f7fd fb59 	bl	8010558 <_malloc_r>
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	b118      	cbz	r0, 8012eb2 <_calloc_r+0x18>
 8012eaa:	9a01      	ldr	r2, [sp, #4]
 8012eac:	2100      	movs	r1, #0
 8012eae:	f7fd fafb 	bl	80104a8 <memset>
 8012eb2:	4620      	mov	r0, r4
 8012eb4:	b002      	add	sp, #8
 8012eb6:	bd10      	pop	{r4, pc}

08012eb8 <_realloc_r>:
 8012eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eba:	4607      	mov	r7, r0
 8012ebc:	4614      	mov	r4, r2
 8012ebe:	460e      	mov	r6, r1
 8012ec0:	b921      	cbnz	r1, 8012ecc <_realloc_r+0x14>
 8012ec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012ec6:	4611      	mov	r1, r2
 8012ec8:	f7fd bb46 	b.w	8010558 <_malloc_r>
 8012ecc:	b922      	cbnz	r2, 8012ed8 <_realloc_r+0x20>
 8012ece:	f7fd faf3 	bl	80104b8 <_free_r>
 8012ed2:	4625      	mov	r5, r4
 8012ed4:	4628      	mov	r0, r5
 8012ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ed8:	f000 fcf4 	bl	80138c4 <_malloc_usable_size_r>
 8012edc:	42a0      	cmp	r0, r4
 8012ede:	d20f      	bcs.n	8012f00 <_realloc_r+0x48>
 8012ee0:	4621      	mov	r1, r4
 8012ee2:	4638      	mov	r0, r7
 8012ee4:	f7fd fb38 	bl	8010558 <_malloc_r>
 8012ee8:	4605      	mov	r5, r0
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d0f2      	beq.n	8012ed4 <_realloc_r+0x1c>
 8012eee:	4631      	mov	r1, r6
 8012ef0:	4622      	mov	r2, r4
 8012ef2:	f7fd facb 	bl	801048c <memcpy>
 8012ef6:	4631      	mov	r1, r6
 8012ef8:	4638      	mov	r0, r7
 8012efa:	f7fd fadd 	bl	80104b8 <_free_r>
 8012efe:	e7e9      	b.n	8012ed4 <_realloc_r+0x1c>
 8012f00:	4635      	mov	r5, r6
 8012f02:	e7e7      	b.n	8012ed4 <_realloc_r+0x1c>

08012f04 <__ssputs_r>:
 8012f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f08:	688e      	ldr	r6, [r1, #8]
 8012f0a:	429e      	cmp	r6, r3
 8012f0c:	4682      	mov	sl, r0
 8012f0e:	460c      	mov	r4, r1
 8012f10:	4690      	mov	r8, r2
 8012f12:	461f      	mov	r7, r3
 8012f14:	d838      	bhi.n	8012f88 <__ssputs_r+0x84>
 8012f16:	898a      	ldrh	r2, [r1, #12]
 8012f18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012f1c:	d032      	beq.n	8012f84 <__ssputs_r+0x80>
 8012f1e:	6825      	ldr	r5, [r4, #0]
 8012f20:	6909      	ldr	r1, [r1, #16]
 8012f22:	eba5 0901 	sub.w	r9, r5, r1
 8012f26:	6965      	ldr	r5, [r4, #20]
 8012f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012f30:	3301      	adds	r3, #1
 8012f32:	444b      	add	r3, r9
 8012f34:	106d      	asrs	r5, r5, #1
 8012f36:	429d      	cmp	r5, r3
 8012f38:	bf38      	it	cc
 8012f3a:	461d      	movcc	r5, r3
 8012f3c:	0553      	lsls	r3, r2, #21
 8012f3e:	d531      	bpl.n	8012fa4 <__ssputs_r+0xa0>
 8012f40:	4629      	mov	r1, r5
 8012f42:	f7fd fb09 	bl	8010558 <_malloc_r>
 8012f46:	4606      	mov	r6, r0
 8012f48:	b950      	cbnz	r0, 8012f60 <__ssputs_r+0x5c>
 8012f4a:	230c      	movs	r3, #12
 8012f4c:	f8ca 3000 	str.w	r3, [sl]
 8012f50:	89a3      	ldrh	r3, [r4, #12]
 8012f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f56:	81a3      	strh	r3, [r4, #12]
 8012f58:	f04f 30ff 	mov.w	r0, #4294967295
 8012f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f60:	6921      	ldr	r1, [r4, #16]
 8012f62:	464a      	mov	r2, r9
 8012f64:	f7fd fa92 	bl	801048c <memcpy>
 8012f68:	89a3      	ldrh	r3, [r4, #12]
 8012f6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f72:	81a3      	strh	r3, [r4, #12]
 8012f74:	6126      	str	r6, [r4, #16]
 8012f76:	6165      	str	r5, [r4, #20]
 8012f78:	444e      	add	r6, r9
 8012f7a:	eba5 0509 	sub.w	r5, r5, r9
 8012f7e:	6026      	str	r6, [r4, #0]
 8012f80:	60a5      	str	r5, [r4, #8]
 8012f82:	463e      	mov	r6, r7
 8012f84:	42be      	cmp	r6, r7
 8012f86:	d900      	bls.n	8012f8a <__ssputs_r+0x86>
 8012f88:	463e      	mov	r6, r7
 8012f8a:	4632      	mov	r2, r6
 8012f8c:	6820      	ldr	r0, [r4, #0]
 8012f8e:	4641      	mov	r1, r8
 8012f90:	f000 fc7e 	bl	8013890 <memmove>
 8012f94:	68a3      	ldr	r3, [r4, #8]
 8012f96:	6822      	ldr	r2, [r4, #0]
 8012f98:	1b9b      	subs	r3, r3, r6
 8012f9a:	4432      	add	r2, r6
 8012f9c:	60a3      	str	r3, [r4, #8]
 8012f9e:	6022      	str	r2, [r4, #0]
 8012fa0:	2000      	movs	r0, #0
 8012fa2:	e7db      	b.n	8012f5c <__ssputs_r+0x58>
 8012fa4:	462a      	mov	r2, r5
 8012fa6:	f7ff ff87 	bl	8012eb8 <_realloc_r>
 8012faa:	4606      	mov	r6, r0
 8012fac:	2800      	cmp	r0, #0
 8012fae:	d1e1      	bne.n	8012f74 <__ssputs_r+0x70>
 8012fb0:	6921      	ldr	r1, [r4, #16]
 8012fb2:	4650      	mov	r0, sl
 8012fb4:	f7fd fa80 	bl	80104b8 <_free_r>
 8012fb8:	e7c7      	b.n	8012f4a <__ssputs_r+0x46>
	...

08012fbc <_svfiprintf_r>:
 8012fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fc0:	4698      	mov	r8, r3
 8012fc2:	898b      	ldrh	r3, [r1, #12]
 8012fc4:	061b      	lsls	r3, r3, #24
 8012fc6:	b09d      	sub	sp, #116	; 0x74
 8012fc8:	4607      	mov	r7, r0
 8012fca:	460d      	mov	r5, r1
 8012fcc:	4614      	mov	r4, r2
 8012fce:	d50e      	bpl.n	8012fee <_svfiprintf_r+0x32>
 8012fd0:	690b      	ldr	r3, [r1, #16]
 8012fd2:	b963      	cbnz	r3, 8012fee <_svfiprintf_r+0x32>
 8012fd4:	2140      	movs	r1, #64	; 0x40
 8012fd6:	f7fd fabf 	bl	8010558 <_malloc_r>
 8012fda:	6028      	str	r0, [r5, #0]
 8012fdc:	6128      	str	r0, [r5, #16]
 8012fde:	b920      	cbnz	r0, 8012fea <_svfiprintf_r+0x2e>
 8012fe0:	230c      	movs	r3, #12
 8012fe2:	603b      	str	r3, [r7, #0]
 8012fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8012fe8:	e0d1      	b.n	801318e <_svfiprintf_r+0x1d2>
 8012fea:	2340      	movs	r3, #64	; 0x40
 8012fec:	616b      	str	r3, [r5, #20]
 8012fee:	2300      	movs	r3, #0
 8012ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ff2:	2320      	movs	r3, #32
 8012ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ffc:	2330      	movs	r3, #48	; 0x30
 8012ffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80131a8 <_svfiprintf_r+0x1ec>
 8013002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013006:	f04f 0901 	mov.w	r9, #1
 801300a:	4623      	mov	r3, r4
 801300c:	469a      	mov	sl, r3
 801300e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013012:	b10a      	cbz	r2, 8013018 <_svfiprintf_r+0x5c>
 8013014:	2a25      	cmp	r2, #37	; 0x25
 8013016:	d1f9      	bne.n	801300c <_svfiprintf_r+0x50>
 8013018:	ebba 0b04 	subs.w	fp, sl, r4
 801301c:	d00b      	beq.n	8013036 <_svfiprintf_r+0x7a>
 801301e:	465b      	mov	r3, fp
 8013020:	4622      	mov	r2, r4
 8013022:	4629      	mov	r1, r5
 8013024:	4638      	mov	r0, r7
 8013026:	f7ff ff6d 	bl	8012f04 <__ssputs_r>
 801302a:	3001      	adds	r0, #1
 801302c:	f000 80aa 	beq.w	8013184 <_svfiprintf_r+0x1c8>
 8013030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013032:	445a      	add	r2, fp
 8013034:	9209      	str	r2, [sp, #36]	; 0x24
 8013036:	f89a 3000 	ldrb.w	r3, [sl]
 801303a:	2b00      	cmp	r3, #0
 801303c:	f000 80a2 	beq.w	8013184 <_svfiprintf_r+0x1c8>
 8013040:	2300      	movs	r3, #0
 8013042:	f04f 32ff 	mov.w	r2, #4294967295
 8013046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801304a:	f10a 0a01 	add.w	sl, sl, #1
 801304e:	9304      	str	r3, [sp, #16]
 8013050:	9307      	str	r3, [sp, #28]
 8013052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013056:	931a      	str	r3, [sp, #104]	; 0x68
 8013058:	4654      	mov	r4, sl
 801305a:	2205      	movs	r2, #5
 801305c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013060:	4851      	ldr	r0, [pc, #324]	; (80131a8 <_svfiprintf_r+0x1ec>)
 8013062:	f7ed f8d5 	bl	8000210 <memchr>
 8013066:	9a04      	ldr	r2, [sp, #16]
 8013068:	b9d8      	cbnz	r0, 80130a2 <_svfiprintf_r+0xe6>
 801306a:	06d0      	lsls	r0, r2, #27
 801306c:	bf44      	itt	mi
 801306e:	2320      	movmi	r3, #32
 8013070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013074:	0711      	lsls	r1, r2, #28
 8013076:	bf44      	itt	mi
 8013078:	232b      	movmi	r3, #43	; 0x2b
 801307a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801307e:	f89a 3000 	ldrb.w	r3, [sl]
 8013082:	2b2a      	cmp	r3, #42	; 0x2a
 8013084:	d015      	beq.n	80130b2 <_svfiprintf_r+0xf6>
 8013086:	9a07      	ldr	r2, [sp, #28]
 8013088:	4654      	mov	r4, sl
 801308a:	2000      	movs	r0, #0
 801308c:	f04f 0c0a 	mov.w	ip, #10
 8013090:	4621      	mov	r1, r4
 8013092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013096:	3b30      	subs	r3, #48	; 0x30
 8013098:	2b09      	cmp	r3, #9
 801309a:	d94e      	bls.n	801313a <_svfiprintf_r+0x17e>
 801309c:	b1b0      	cbz	r0, 80130cc <_svfiprintf_r+0x110>
 801309e:	9207      	str	r2, [sp, #28]
 80130a0:	e014      	b.n	80130cc <_svfiprintf_r+0x110>
 80130a2:	eba0 0308 	sub.w	r3, r0, r8
 80130a6:	fa09 f303 	lsl.w	r3, r9, r3
 80130aa:	4313      	orrs	r3, r2
 80130ac:	9304      	str	r3, [sp, #16]
 80130ae:	46a2      	mov	sl, r4
 80130b0:	e7d2      	b.n	8013058 <_svfiprintf_r+0x9c>
 80130b2:	9b03      	ldr	r3, [sp, #12]
 80130b4:	1d19      	adds	r1, r3, #4
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	9103      	str	r1, [sp, #12]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	bfbb      	ittet	lt
 80130be:	425b      	neglt	r3, r3
 80130c0:	f042 0202 	orrlt.w	r2, r2, #2
 80130c4:	9307      	strge	r3, [sp, #28]
 80130c6:	9307      	strlt	r3, [sp, #28]
 80130c8:	bfb8      	it	lt
 80130ca:	9204      	strlt	r2, [sp, #16]
 80130cc:	7823      	ldrb	r3, [r4, #0]
 80130ce:	2b2e      	cmp	r3, #46	; 0x2e
 80130d0:	d10c      	bne.n	80130ec <_svfiprintf_r+0x130>
 80130d2:	7863      	ldrb	r3, [r4, #1]
 80130d4:	2b2a      	cmp	r3, #42	; 0x2a
 80130d6:	d135      	bne.n	8013144 <_svfiprintf_r+0x188>
 80130d8:	9b03      	ldr	r3, [sp, #12]
 80130da:	1d1a      	adds	r2, r3, #4
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	9203      	str	r2, [sp, #12]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	bfb8      	it	lt
 80130e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80130e8:	3402      	adds	r4, #2
 80130ea:	9305      	str	r3, [sp, #20]
 80130ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80131b8 <_svfiprintf_r+0x1fc>
 80130f0:	7821      	ldrb	r1, [r4, #0]
 80130f2:	2203      	movs	r2, #3
 80130f4:	4650      	mov	r0, sl
 80130f6:	f7ed f88b 	bl	8000210 <memchr>
 80130fa:	b140      	cbz	r0, 801310e <_svfiprintf_r+0x152>
 80130fc:	2340      	movs	r3, #64	; 0x40
 80130fe:	eba0 000a 	sub.w	r0, r0, sl
 8013102:	fa03 f000 	lsl.w	r0, r3, r0
 8013106:	9b04      	ldr	r3, [sp, #16]
 8013108:	4303      	orrs	r3, r0
 801310a:	3401      	adds	r4, #1
 801310c:	9304      	str	r3, [sp, #16]
 801310e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013112:	4826      	ldr	r0, [pc, #152]	; (80131ac <_svfiprintf_r+0x1f0>)
 8013114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013118:	2206      	movs	r2, #6
 801311a:	f7ed f879 	bl	8000210 <memchr>
 801311e:	2800      	cmp	r0, #0
 8013120:	d038      	beq.n	8013194 <_svfiprintf_r+0x1d8>
 8013122:	4b23      	ldr	r3, [pc, #140]	; (80131b0 <_svfiprintf_r+0x1f4>)
 8013124:	bb1b      	cbnz	r3, 801316e <_svfiprintf_r+0x1b2>
 8013126:	9b03      	ldr	r3, [sp, #12]
 8013128:	3307      	adds	r3, #7
 801312a:	f023 0307 	bic.w	r3, r3, #7
 801312e:	3308      	adds	r3, #8
 8013130:	9303      	str	r3, [sp, #12]
 8013132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013134:	4433      	add	r3, r6
 8013136:	9309      	str	r3, [sp, #36]	; 0x24
 8013138:	e767      	b.n	801300a <_svfiprintf_r+0x4e>
 801313a:	fb0c 3202 	mla	r2, ip, r2, r3
 801313e:	460c      	mov	r4, r1
 8013140:	2001      	movs	r0, #1
 8013142:	e7a5      	b.n	8013090 <_svfiprintf_r+0xd4>
 8013144:	2300      	movs	r3, #0
 8013146:	3401      	adds	r4, #1
 8013148:	9305      	str	r3, [sp, #20]
 801314a:	4619      	mov	r1, r3
 801314c:	f04f 0c0a 	mov.w	ip, #10
 8013150:	4620      	mov	r0, r4
 8013152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013156:	3a30      	subs	r2, #48	; 0x30
 8013158:	2a09      	cmp	r2, #9
 801315a:	d903      	bls.n	8013164 <_svfiprintf_r+0x1a8>
 801315c:	2b00      	cmp	r3, #0
 801315e:	d0c5      	beq.n	80130ec <_svfiprintf_r+0x130>
 8013160:	9105      	str	r1, [sp, #20]
 8013162:	e7c3      	b.n	80130ec <_svfiprintf_r+0x130>
 8013164:	fb0c 2101 	mla	r1, ip, r1, r2
 8013168:	4604      	mov	r4, r0
 801316a:	2301      	movs	r3, #1
 801316c:	e7f0      	b.n	8013150 <_svfiprintf_r+0x194>
 801316e:	ab03      	add	r3, sp, #12
 8013170:	9300      	str	r3, [sp, #0]
 8013172:	462a      	mov	r2, r5
 8013174:	4b0f      	ldr	r3, [pc, #60]	; (80131b4 <_svfiprintf_r+0x1f8>)
 8013176:	a904      	add	r1, sp, #16
 8013178:	4638      	mov	r0, r7
 801317a:	f3af 8000 	nop.w
 801317e:	1c42      	adds	r2, r0, #1
 8013180:	4606      	mov	r6, r0
 8013182:	d1d6      	bne.n	8013132 <_svfiprintf_r+0x176>
 8013184:	89ab      	ldrh	r3, [r5, #12]
 8013186:	065b      	lsls	r3, r3, #25
 8013188:	f53f af2c 	bmi.w	8012fe4 <_svfiprintf_r+0x28>
 801318c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801318e:	b01d      	add	sp, #116	; 0x74
 8013190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013194:	ab03      	add	r3, sp, #12
 8013196:	9300      	str	r3, [sp, #0]
 8013198:	462a      	mov	r2, r5
 801319a:	4b06      	ldr	r3, [pc, #24]	; (80131b4 <_svfiprintf_r+0x1f8>)
 801319c:	a904      	add	r1, sp, #16
 801319e:	4638      	mov	r0, r7
 80131a0:	f000 f9d4 	bl	801354c <_printf_i>
 80131a4:	e7eb      	b.n	801317e <_svfiprintf_r+0x1c2>
 80131a6:	bf00      	nop
 80131a8:	08015714 	.word	0x08015714
 80131ac:	0801571e 	.word	0x0801571e
 80131b0:	00000000 	.word	0x00000000
 80131b4:	08012f05 	.word	0x08012f05
 80131b8:	0801571a 	.word	0x0801571a

080131bc <__sfputc_r>:
 80131bc:	6893      	ldr	r3, [r2, #8]
 80131be:	3b01      	subs	r3, #1
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	b410      	push	{r4}
 80131c4:	6093      	str	r3, [r2, #8]
 80131c6:	da08      	bge.n	80131da <__sfputc_r+0x1e>
 80131c8:	6994      	ldr	r4, [r2, #24]
 80131ca:	42a3      	cmp	r3, r4
 80131cc:	db01      	blt.n	80131d2 <__sfputc_r+0x16>
 80131ce:	290a      	cmp	r1, #10
 80131d0:	d103      	bne.n	80131da <__sfputc_r+0x1e>
 80131d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131d6:	f7fe bb05 	b.w	80117e4 <__swbuf_r>
 80131da:	6813      	ldr	r3, [r2, #0]
 80131dc:	1c58      	adds	r0, r3, #1
 80131de:	6010      	str	r0, [r2, #0]
 80131e0:	7019      	strb	r1, [r3, #0]
 80131e2:	4608      	mov	r0, r1
 80131e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131e8:	4770      	bx	lr

080131ea <__sfputs_r>:
 80131ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ec:	4606      	mov	r6, r0
 80131ee:	460f      	mov	r7, r1
 80131f0:	4614      	mov	r4, r2
 80131f2:	18d5      	adds	r5, r2, r3
 80131f4:	42ac      	cmp	r4, r5
 80131f6:	d101      	bne.n	80131fc <__sfputs_r+0x12>
 80131f8:	2000      	movs	r0, #0
 80131fa:	e007      	b.n	801320c <__sfputs_r+0x22>
 80131fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013200:	463a      	mov	r2, r7
 8013202:	4630      	mov	r0, r6
 8013204:	f7ff ffda 	bl	80131bc <__sfputc_r>
 8013208:	1c43      	adds	r3, r0, #1
 801320a:	d1f3      	bne.n	80131f4 <__sfputs_r+0xa>
 801320c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013210 <_vfiprintf_r>:
 8013210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013214:	460d      	mov	r5, r1
 8013216:	b09d      	sub	sp, #116	; 0x74
 8013218:	4614      	mov	r4, r2
 801321a:	4698      	mov	r8, r3
 801321c:	4606      	mov	r6, r0
 801321e:	b118      	cbz	r0, 8013228 <_vfiprintf_r+0x18>
 8013220:	6983      	ldr	r3, [r0, #24]
 8013222:	b90b      	cbnz	r3, 8013228 <_vfiprintf_r+0x18>
 8013224:	f7fe fcda 	bl	8011bdc <__sinit>
 8013228:	4b89      	ldr	r3, [pc, #548]	; (8013450 <_vfiprintf_r+0x240>)
 801322a:	429d      	cmp	r5, r3
 801322c:	d11b      	bne.n	8013266 <_vfiprintf_r+0x56>
 801322e:	6875      	ldr	r5, [r6, #4]
 8013230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013232:	07d9      	lsls	r1, r3, #31
 8013234:	d405      	bmi.n	8013242 <_vfiprintf_r+0x32>
 8013236:	89ab      	ldrh	r3, [r5, #12]
 8013238:	059a      	lsls	r2, r3, #22
 801323a:	d402      	bmi.n	8013242 <_vfiprintf_r+0x32>
 801323c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801323e:	f7ff f8da 	bl	80123f6 <__retarget_lock_acquire_recursive>
 8013242:	89ab      	ldrh	r3, [r5, #12]
 8013244:	071b      	lsls	r3, r3, #28
 8013246:	d501      	bpl.n	801324c <_vfiprintf_r+0x3c>
 8013248:	692b      	ldr	r3, [r5, #16]
 801324a:	b9eb      	cbnz	r3, 8013288 <_vfiprintf_r+0x78>
 801324c:	4629      	mov	r1, r5
 801324e:	4630      	mov	r0, r6
 8013250:	f7fe fb2c 	bl	80118ac <__swsetup_r>
 8013254:	b1c0      	cbz	r0, 8013288 <_vfiprintf_r+0x78>
 8013256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013258:	07dc      	lsls	r4, r3, #31
 801325a:	d50e      	bpl.n	801327a <_vfiprintf_r+0x6a>
 801325c:	f04f 30ff 	mov.w	r0, #4294967295
 8013260:	b01d      	add	sp, #116	; 0x74
 8013262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013266:	4b7b      	ldr	r3, [pc, #492]	; (8013454 <_vfiprintf_r+0x244>)
 8013268:	429d      	cmp	r5, r3
 801326a:	d101      	bne.n	8013270 <_vfiprintf_r+0x60>
 801326c:	68b5      	ldr	r5, [r6, #8]
 801326e:	e7df      	b.n	8013230 <_vfiprintf_r+0x20>
 8013270:	4b79      	ldr	r3, [pc, #484]	; (8013458 <_vfiprintf_r+0x248>)
 8013272:	429d      	cmp	r5, r3
 8013274:	bf08      	it	eq
 8013276:	68f5      	ldreq	r5, [r6, #12]
 8013278:	e7da      	b.n	8013230 <_vfiprintf_r+0x20>
 801327a:	89ab      	ldrh	r3, [r5, #12]
 801327c:	0598      	lsls	r0, r3, #22
 801327e:	d4ed      	bmi.n	801325c <_vfiprintf_r+0x4c>
 8013280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013282:	f7ff f8b9 	bl	80123f8 <__retarget_lock_release_recursive>
 8013286:	e7e9      	b.n	801325c <_vfiprintf_r+0x4c>
 8013288:	2300      	movs	r3, #0
 801328a:	9309      	str	r3, [sp, #36]	; 0x24
 801328c:	2320      	movs	r3, #32
 801328e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013292:	f8cd 800c 	str.w	r8, [sp, #12]
 8013296:	2330      	movs	r3, #48	; 0x30
 8013298:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801345c <_vfiprintf_r+0x24c>
 801329c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80132a0:	f04f 0901 	mov.w	r9, #1
 80132a4:	4623      	mov	r3, r4
 80132a6:	469a      	mov	sl, r3
 80132a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132ac:	b10a      	cbz	r2, 80132b2 <_vfiprintf_r+0xa2>
 80132ae:	2a25      	cmp	r2, #37	; 0x25
 80132b0:	d1f9      	bne.n	80132a6 <_vfiprintf_r+0x96>
 80132b2:	ebba 0b04 	subs.w	fp, sl, r4
 80132b6:	d00b      	beq.n	80132d0 <_vfiprintf_r+0xc0>
 80132b8:	465b      	mov	r3, fp
 80132ba:	4622      	mov	r2, r4
 80132bc:	4629      	mov	r1, r5
 80132be:	4630      	mov	r0, r6
 80132c0:	f7ff ff93 	bl	80131ea <__sfputs_r>
 80132c4:	3001      	adds	r0, #1
 80132c6:	f000 80aa 	beq.w	801341e <_vfiprintf_r+0x20e>
 80132ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132cc:	445a      	add	r2, fp
 80132ce:	9209      	str	r2, [sp, #36]	; 0x24
 80132d0:	f89a 3000 	ldrb.w	r3, [sl]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	f000 80a2 	beq.w	801341e <_vfiprintf_r+0x20e>
 80132da:	2300      	movs	r3, #0
 80132dc:	f04f 32ff 	mov.w	r2, #4294967295
 80132e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132e4:	f10a 0a01 	add.w	sl, sl, #1
 80132e8:	9304      	str	r3, [sp, #16]
 80132ea:	9307      	str	r3, [sp, #28]
 80132ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80132f0:	931a      	str	r3, [sp, #104]	; 0x68
 80132f2:	4654      	mov	r4, sl
 80132f4:	2205      	movs	r2, #5
 80132f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132fa:	4858      	ldr	r0, [pc, #352]	; (801345c <_vfiprintf_r+0x24c>)
 80132fc:	f7ec ff88 	bl	8000210 <memchr>
 8013300:	9a04      	ldr	r2, [sp, #16]
 8013302:	b9d8      	cbnz	r0, 801333c <_vfiprintf_r+0x12c>
 8013304:	06d1      	lsls	r1, r2, #27
 8013306:	bf44      	itt	mi
 8013308:	2320      	movmi	r3, #32
 801330a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801330e:	0713      	lsls	r3, r2, #28
 8013310:	bf44      	itt	mi
 8013312:	232b      	movmi	r3, #43	; 0x2b
 8013314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013318:	f89a 3000 	ldrb.w	r3, [sl]
 801331c:	2b2a      	cmp	r3, #42	; 0x2a
 801331e:	d015      	beq.n	801334c <_vfiprintf_r+0x13c>
 8013320:	9a07      	ldr	r2, [sp, #28]
 8013322:	4654      	mov	r4, sl
 8013324:	2000      	movs	r0, #0
 8013326:	f04f 0c0a 	mov.w	ip, #10
 801332a:	4621      	mov	r1, r4
 801332c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013330:	3b30      	subs	r3, #48	; 0x30
 8013332:	2b09      	cmp	r3, #9
 8013334:	d94e      	bls.n	80133d4 <_vfiprintf_r+0x1c4>
 8013336:	b1b0      	cbz	r0, 8013366 <_vfiprintf_r+0x156>
 8013338:	9207      	str	r2, [sp, #28]
 801333a:	e014      	b.n	8013366 <_vfiprintf_r+0x156>
 801333c:	eba0 0308 	sub.w	r3, r0, r8
 8013340:	fa09 f303 	lsl.w	r3, r9, r3
 8013344:	4313      	orrs	r3, r2
 8013346:	9304      	str	r3, [sp, #16]
 8013348:	46a2      	mov	sl, r4
 801334a:	e7d2      	b.n	80132f2 <_vfiprintf_r+0xe2>
 801334c:	9b03      	ldr	r3, [sp, #12]
 801334e:	1d19      	adds	r1, r3, #4
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	9103      	str	r1, [sp, #12]
 8013354:	2b00      	cmp	r3, #0
 8013356:	bfbb      	ittet	lt
 8013358:	425b      	neglt	r3, r3
 801335a:	f042 0202 	orrlt.w	r2, r2, #2
 801335e:	9307      	strge	r3, [sp, #28]
 8013360:	9307      	strlt	r3, [sp, #28]
 8013362:	bfb8      	it	lt
 8013364:	9204      	strlt	r2, [sp, #16]
 8013366:	7823      	ldrb	r3, [r4, #0]
 8013368:	2b2e      	cmp	r3, #46	; 0x2e
 801336a:	d10c      	bne.n	8013386 <_vfiprintf_r+0x176>
 801336c:	7863      	ldrb	r3, [r4, #1]
 801336e:	2b2a      	cmp	r3, #42	; 0x2a
 8013370:	d135      	bne.n	80133de <_vfiprintf_r+0x1ce>
 8013372:	9b03      	ldr	r3, [sp, #12]
 8013374:	1d1a      	adds	r2, r3, #4
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	9203      	str	r2, [sp, #12]
 801337a:	2b00      	cmp	r3, #0
 801337c:	bfb8      	it	lt
 801337e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013382:	3402      	adds	r4, #2
 8013384:	9305      	str	r3, [sp, #20]
 8013386:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801346c <_vfiprintf_r+0x25c>
 801338a:	7821      	ldrb	r1, [r4, #0]
 801338c:	2203      	movs	r2, #3
 801338e:	4650      	mov	r0, sl
 8013390:	f7ec ff3e 	bl	8000210 <memchr>
 8013394:	b140      	cbz	r0, 80133a8 <_vfiprintf_r+0x198>
 8013396:	2340      	movs	r3, #64	; 0x40
 8013398:	eba0 000a 	sub.w	r0, r0, sl
 801339c:	fa03 f000 	lsl.w	r0, r3, r0
 80133a0:	9b04      	ldr	r3, [sp, #16]
 80133a2:	4303      	orrs	r3, r0
 80133a4:	3401      	adds	r4, #1
 80133a6:	9304      	str	r3, [sp, #16]
 80133a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133ac:	482c      	ldr	r0, [pc, #176]	; (8013460 <_vfiprintf_r+0x250>)
 80133ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80133b2:	2206      	movs	r2, #6
 80133b4:	f7ec ff2c 	bl	8000210 <memchr>
 80133b8:	2800      	cmp	r0, #0
 80133ba:	d03f      	beq.n	801343c <_vfiprintf_r+0x22c>
 80133bc:	4b29      	ldr	r3, [pc, #164]	; (8013464 <_vfiprintf_r+0x254>)
 80133be:	bb1b      	cbnz	r3, 8013408 <_vfiprintf_r+0x1f8>
 80133c0:	9b03      	ldr	r3, [sp, #12]
 80133c2:	3307      	adds	r3, #7
 80133c4:	f023 0307 	bic.w	r3, r3, #7
 80133c8:	3308      	adds	r3, #8
 80133ca:	9303      	str	r3, [sp, #12]
 80133cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133ce:	443b      	add	r3, r7
 80133d0:	9309      	str	r3, [sp, #36]	; 0x24
 80133d2:	e767      	b.n	80132a4 <_vfiprintf_r+0x94>
 80133d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80133d8:	460c      	mov	r4, r1
 80133da:	2001      	movs	r0, #1
 80133dc:	e7a5      	b.n	801332a <_vfiprintf_r+0x11a>
 80133de:	2300      	movs	r3, #0
 80133e0:	3401      	adds	r4, #1
 80133e2:	9305      	str	r3, [sp, #20]
 80133e4:	4619      	mov	r1, r3
 80133e6:	f04f 0c0a 	mov.w	ip, #10
 80133ea:	4620      	mov	r0, r4
 80133ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133f0:	3a30      	subs	r2, #48	; 0x30
 80133f2:	2a09      	cmp	r2, #9
 80133f4:	d903      	bls.n	80133fe <_vfiprintf_r+0x1ee>
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d0c5      	beq.n	8013386 <_vfiprintf_r+0x176>
 80133fa:	9105      	str	r1, [sp, #20]
 80133fc:	e7c3      	b.n	8013386 <_vfiprintf_r+0x176>
 80133fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8013402:	4604      	mov	r4, r0
 8013404:	2301      	movs	r3, #1
 8013406:	e7f0      	b.n	80133ea <_vfiprintf_r+0x1da>
 8013408:	ab03      	add	r3, sp, #12
 801340a:	9300      	str	r3, [sp, #0]
 801340c:	462a      	mov	r2, r5
 801340e:	4b16      	ldr	r3, [pc, #88]	; (8013468 <_vfiprintf_r+0x258>)
 8013410:	a904      	add	r1, sp, #16
 8013412:	4630      	mov	r0, r6
 8013414:	f3af 8000 	nop.w
 8013418:	4607      	mov	r7, r0
 801341a:	1c78      	adds	r0, r7, #1
 801341c:	d1d6      	bne.n	80133cc <_vfiprintf_r+0x1bc>
 801341e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013420:	07d9      	lsls	r1, r3, #31
 8013422:	d405      	bmi.n	8013430 <_vfiprintf_r+0x220>
 8013424:	89ab      	ldrh	r3, [r5, #12]
 8013426:	059a      	lsls	r2, r3, #22
 8013428:	d402      	bmi.n	8013430 <_vfiprintf_r+0x220>
 801342a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801342c:	f7fe ffe4 	bl	80123f8 <__retarget_lock_release_recursive>
 8013430:	89ab      	ldrh	r3, [r5, #12]
 8013432:	065b      	lsls	r3, r3, #25
 8013434:	f53f af12 	bmi.w	801325c <_vfiprintf_r+0x4c>
 8013438:	9809      	ldr	r0, [sp, #36]	; 0x24
 801343a:	e711      	b.n	8013260 <_vfiprintf_r+0x50>
 801343c:	ab03      	add	r3, sp, #12
 801343e:	9300      	str	r3, [sp, #0]
 8013440:	462a      	mov	r2, r5
 8013442:	4b09      	ldr	r3, [pc, #36]	; (8013468 <_vfiprintf_r+0x258>)
 8013444:	a904      	add	r1, sp, #16
 8013446:	4630      	mov	r0, r6
 8013448:	f000 f880 	bl	801354c <_printf_i>
 801344c:	e7e4      	b.n	8013418 <_vfiprintf_r+0x208>
 801344e:	bf00      	nop
 8013450:	080154d0 	.word	0x080154d0
 8013454:	080154f0 	.word	0x080154f0
 8013458:	080154b0 	.word	0x080154b0
 801345c:	08015714 	.word	0x08015714
 8013460:	0801571e 	.word	0x0801571e
 8013464:	00000000 	.word	0x00000000
 8013468:	080131eb 	.word	0x080131eb
 801346c:	0801571a 	.word	0x0801571a

08013470 <_printf_common>:
 8013470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013474:	4616      	mov	r6, r2
 8013476:	4699      	mov	r9, r3
 8013478:	688a      	ldr	r2, [r1, #8]
 801347a:	690b      	ldr	r3, [r1, #16]
 801347c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013480:	4293      	cmp	r3, r2
 8013482:	bfb8      	it	lt
 8013484:	4613      	movlt	r3, r2
 8013486:	6033      	str	r3, [r6, #0]
 8013488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801348c:	4607      	mov	r7, r0
 801348e:	460c      	mov	r4, r1
 8013490:	b10a      	cbz	r2, 8013496 <_printf_common+0x26>
 8013492:	3301      	adds	r3, #1
 8013494:	6033      	str	r3, [r6, #0]
 8013496:	6823      	ldr	r3, [r4, #0]
 8013498:	0699      	lsls	r1, r3, #26
 801349a:	bf42      	ittt	mi
 801349c:	6833      	ldrmi	r3, [r6, #0]
 801349e:	3302      	addmi	r3, #2
 80134a0:	6033      	strmi	r3, [r6, #0]
 80134a2:	6825      	ldr	r5, [r4, #0]
 80134a4:	f015 0506 	ands.w	r5, r5, #6
 80134a8:	d106      	bne.n	80134b8 <_printf_common+0x48>
 80134aa:	f104 0a19 	add.w	sl, r4, #25
 80134ae:	68e3      	ldr	r3, [r4, #12]
 80134b0:	6832      	ldr	r2, [r6, #0]
 80134b2:	1a9b      	subs	r3, r3, r2
 80134b4:	42ab      	cmp	r3, r5
 80134b6:	dc26      	bgt.n	8013506 <_printf_common+0x96>
 80134b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80134bc:	1e13      	subs	r3, r2, #0
 80134be:	6822      	ldr	r2, [r4, #0]
 80134c0:	bf18      	it	ne
 80134c2:	2301      	movne	r3, #1
 80134c4:	0692      	lsls	r2, r2, #26
 80134c6:	d42b      	bmi.n	8013520 <_printf_common+0xb0>
 80134c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80134cc:	4649      	mov	r1, r9
 80134ce:	4638      	mov	r0, r7
 80134d0:	47c0      	blx	r8
 80134d2:	3001      	adds	r0, #1
 80134d4:	d01e      	beq.n	8013514 <_printf_common+0xa4>
 80134d6:	6823      	ldr	r3, [r4, #0]
 80134d8:	68e5      	ldr	r5, [r4, #12]
 80134da:	6832      	ldr	r2, [r6, #0]
 80134dc:	f003 0306 	and.w	r3, r3, #6
 80134e0:	2b04      	cmp	r3, #4
 80134e2:	bf08      	it	eq
 80134e4:	1aad      	subeq	r5, r5, r2
 80134e6:	68a3      	ldr	r3, [r4, #8]
 80134e8:	6922      	ldr	r2, [r4, #16]
 80134ea:	bf0c      	ite	eq
 80134ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80134f0:	2500      	movne	r5, #0
 80134f2:	4293      	cmp	r3, r2
 80134f4:	bfc4      	itt	gt
 80134f6:	1a9b      	subgt	r3, r3, r2
 80134f8:	18ed      	addgt	r5, r5, r3
 80134fa:	2600      	movs	r6, #0
 80134fc:	341a      	adds	r4, #26
 80134fe:	42b5      	cmp	r5, r6
 8013500:	d11a      	bne.n	8013538 <_printf_common+0xc8>
 8013502:	2000      	movs	r0, #0
 8013504:	e008      	b.n	8013518 <_printf_common+0xa8>
 8013506:	2301      	movs	r3, #1
 8013508:	4652      	mov	r2, sl
 801350a:	4649      	mov	r1, r9
 801350c:	4638      	mov	r0, r7
 801350e:	47c0      	blx	r8
 8013510:	3001      	adds	r0, #1
 8013512:	d103      	bne.n	801351c <_printf_common+0xac>
 8013514:	f04f 30ff 	mov.w	r0, #4294967295
 8013518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801351c:	3501      	adds	r5, #1
 801351e:	e7c6      	b.n	80134ae <_printf_common+0x3e>
 8013520:	18e1      	adds	r1, r4, r3
 8013522:	1c5a      	adds	r2, r3, #1
 8013524:	2030      	movs	r0, #48	; 0x30
 8013526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801352a:	4422      	add	r2, r4
 801352c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013534:	3302      	adds	r3, #2
 8013536:	e7c7      	b.n	80134c8 <_printf_common+0x58>
 8013538:	2301      	movs	r3, #1
 801353a:	4622      	mov	r2, r4
 801353c:	4649      	mov	r1, r9
 801353e:	4638      	mov	r0, r7
 8013540:	47c0      	blx	r8
 8013542:	3001      	adds	r0, #1
 8013544:	d0e6      	beq.n	8013514 <_printf_common+0xa4>
 8013546:	3601      	adds	r6, #1
 8013548:	e7d9      	b.n	80134fe <_printf_common+0x8e>
	...

0801354c <_printf_i>:
 801354c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013550:	460c      	mov	r4, r1
 8013552:	4691      	mov	r9, r2
 8013554:	7e27      	ldrb	r7, [r4, #24]
 8013556:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013558:	2f78      	cmp	r7, #120	; 0x78
 801355a:	4680      	mov	r8, r0
 801355c:	469a      	mov	sl, r3
 801355e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013562:	d807      	bhi.n	8013574 <_printf_i+0x28>
 8013564:	2f62      	cmp	r7, #98	; 0x62
 8013566:	d80a      	bhi.n	801357e <_printf_i+0x32>
 8013568:	2f00      	cmp	r7, #0
 801356a:	f000 80d8 	beq.w	801371e <_printf_i+0x1d2>
 801356e:	2f58      	cmp	r7, #88	; 0x58
 8013570:	f000 80a3 	beq.w	80136ba <_printf_i+0x16e>
 8013574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801357c:	e03a      	b.n	80135f4 <_printf_i+0xa8>
 801357e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013582:	2b15      	cmp	r3, #21
 8013584:	d8f6      	bhi.n	8013574 <_printf_i+0x28>
 8013586:	a001      	add	r0, pc, #4	; (adr r0, 801358c <_printf_i+0x40>)
 8013588:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801358c:	080135e5 	.word	0x080135e5
 8013590:	080135f9 	.word	0x080135f9
 8013594:	08013575 	.word	0x08013575
 8013598:	08013575 	.word	0x08013575
 801359c:	08013575 	.word	0x08013575
 80135a0:	08013575 	.word	0x08013575
 80135a4:	080135f9 	.word	0x080135f9
 80135a8:	08013575 	.word	0x08013575
 80135ac:	08013575 	.word	0x08013575
 80135b0:	08013575 	.word	0x08013575
 80135b4:	08013575 	.word	0x08013575
 80135b8:	08013705 	.word	0x08013705
 80135bc:	08013629 	.word	0x08013629
 80135c0:	080136e7 	.word	0x080136e7
 80135c4:	08013575 	.word	0x08013575
 80135c8:	08013575 	.word	0x08013575
 80135cc:	08013727 	.word	0x08013727
 80135d0:	08013575 	.word	0x08013575
 80135d4:	08013629 	.word	0x08013629
 80135d8:	08013575 	.word	0x08013575
 80135dc:	08013575 	.word	0x08013575
 80135e0:	080136ef 	.word	0x080136ef
 80135e4:	680b      	ldr	r3, [r1, #0]
 80135e6:	1d1a      	adds	r2, r3, #4
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	600a      	str	r2, [r1, #0]
 80135ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80135f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80135f4:	2301      	movs	r3, #1
 80135f6:	e0a3      	b.n	8013740 <_printf_i+0x1f4>
 80135f8:	6825      	ldr	r5, [r4, #0]
 80135fa:	6808      	ldr	r0, [r1, #0]
 80135fc:	062e      	lsls	r6, r5, #24
 80135fe:	f100 0304 	add.w	r3, r0, #4
 8013602:	d50a      	bpl.n	801361a <_printf_i+0xce>
 8013604:	6805      	ldr	r5, [r0, #0]
 8013606:	600b      	str	r3, [r1, #0]
 8013608:	2d00      	cmp	r5, #0
 801360a:	da03      	bge.n	8013614 <_printf_i+0xc8>
 801360c:	232d      	movs	r3, #45	; 0x2d
 801360e:	426d      	negs	r5, r5
 8013610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013614:	485e      	ldr	r0, [pc, #376]	; (8013790 <_printf_i+0x244>)
 8013616:	230a      	movs	r3, #10
 8013618:	e019      	b.n	801364e <_printf_i+0x102>
 801361a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801361e:	6805      	ldr	r5, [r0, #0]
 8013620:	600b      	str	r3, [r1, #0]
 8013622:	bf18      	it	ne
 8013624:	b22d      	sxthne	r5, r5
 8013626:	e7ef      	b.n	8013608 <_printf_i+0xbc>
 8013628:	680b      	ldr	r3, [r1, #0]
 801362a:	6825      	ldr	r5, [r4, #0]
 801362c:	1d18      	adds	r0, r3, #4
 801362e:	6008      	str	r0, [r1, #0]
 8013630:	0628      	lsls	r0, r5, #24
 8013632:	d501      	bpl.n	8013638 <_printf_i+0xec>
 8013634:	681d      	ldr	r5, [r3, #0]
 8013636:	e002      	b.n	801363e <_printf_i+0xf2>
 8013638:	0669      	lsls	r1, r5, #25
 801363a:	d5fb      	bpl.n	8013634 <_printf_i+0xe8>
 801363c:	881d      	ldrh	r5, [r3, #0]
 801363e:	4854      	ldr	r0, [pc, #336]	; (8013790 <_printf_i+0x244>)
 8013640:	2f6f      	cmp	r7, #111	; 0x6f
 8013642:	bf0c      	ite	eq
 8013644:	2308      	moveq	r3, #8
 8013646:	230a      	movne	r3, #10
 8013648:	2100      	movs	r1, #0
 801364a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801364e:	6866      	ldr	r6, [r4, #4]
 8013650:	60a6      	str	r6, [r4, #8]
 8013652:	2e00      	cmp	r6, #0
 8013654:	bfa2      	ittt	ge
 8013656:	6821      	ldrge	r1, [r4, #0]
 8013658:	f021 0104 	bicge.w	r1, r1, #4
 801365c:	6021      	strge	r1, [r4, #0]
 801365e:	b90d      	cbnz	r5, 8013664 <_printf_i+0x118>
 8013660:	2e00      	cmp	r6, #0
 8013662:	d04d      	beq.n	8013700 <_printf_i+0x1b4>
 8013664:	4616      	mov	r6, r2
 8013666:	fbb5 f1f3 	udiv	r1, r5, r3
 801366a:	fb03 5711 	mls	r7, r3, r1, r5
 801366e:	5dc7      	ldrb	r7, [r0, r7]
 8013670:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013674:	462f      	mov	r7, r5
 8013676:	42bb      	cmp	r3, r7
 8013678:	460d      	mov	r5, r1
 801367a:	d9f4      	bls.n	8013666 <_printf_i+0x11a>
 801367c:	2b08      	cmp	r3, #8
 801367e:	d10b      	bne.n	8013698 <_printf_i+0x14c>
 8013680:	6823      	ldr	r3, [r4, #0]
 8013682:	07df      	lsls	r7, r3, #31
 8013684:	d508      	bpl.n	8013698 <_printf_i+0x14c>
 8013686:	6923      	ldr	r3, [r4, #16]
 8013688:	6861      	ldr	r1, [r4, #4]
 801368a:	4299      	cmp	r1, r3
 801368c:	bfde      	ittt	le
 801368e:	2330      	movle	r3, #48	; 0x30
 8013690:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013694:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013698:	1b92      	subs	r2, r2, r6
 801369a:	6122      	str	r2, [r4, #16]
 801369c:	f8cd a000 	str.w	sl, [sp]
 80136a0:	464b      	mov	r3, r9
 80136a2:	aa03      	add	r2, sp, #12
 80136a4:	4621      	mov	r1, r4
 80136a6:	4640      	mov	r0, r8
 80136a8:	f7ff fee2 	bl	8013470 <_printf_common>
 80136ac:	3001      	adds	r0, #1
 80136ae:	d14c      	bne.n	801374a <_printf_i+0x1fe>
 80136b0:	f04f 30ff 	mov.w	r0, #4294967295
 80136b4:	b004      	add	sp, #16
 80136b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136ba:	4835      	ldr	r0, [pc, #212]	; (8013790 <_printf_i+0x244>)
 80136bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80136c0:	6823      	ldr	r3, [r4, #0]
 80136c2:	680e      	ldr	r6, [r1, #0]
 80136c4:	061f      	lsls	r7, r3, #24
 80136c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80136ca:	600e      	str	r6, [r1, #0]
 80136cc:	d514      	bpl.n	80136f8 <_printf_i+0x1ac>
 80136ce:	07d9      	lsls	r1, r3, #31
 80136d0:	bf44      	itt	mi
 80136d2:	f043 0320 	orrmi.w	r3, r3, #32
 80136d6:	6023      	strmi	r3, [r4, #0]
 80136d8:	b91d      	cbnz	r5, 80136e2 <_printf_i+0x196>
 80136da:	6823      	ldr	r3, [r4, #0]
 80136dc:	f023 0320 	bic.w	r3, r3, #32
 80136e0:	6023      	str	r3, [r4, #0]
 80136e2:	2310      	movs	r3, #16
 80136e4:	e7b0      	b.n	8013648 <_printf_i+0xfc>
 80136e6:	6823      	ldr	r3, [r4, #0]
 80136e8:	f043 0320 	orr.w	r3, r3, #32
 80136ec:	6023      	str	r3, [r4, #0]
 80136ee:	2378      	movs	r3, #120	; 0x78
 80136f0:	4828      	ldr	r0, [pc, #160]	; (8013794 <_printf_i+0x248>)
 80136f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80136f6:	e7e3      	b.n	80136c0 <_printf_i+0x174>
 80136f8:	065e      	lsls	r6, r3, #25
 80136fa:	bf48      	it	mi
 80136fc:	b2ad      	uxthmi	r5, r5
 80136fe:	e7e6      	b.n	80136ce <_printf_i+0x182>
 8013700:	4616      	mov	r6, r2
 8013702:	e7bb      	b.n	801367c <_printf_i+0x130>
 8013704:	680b      	ldr	r3, [r1, #0]
 8013706:	6826      	ldr	r6, [r4, #0]
 8013708:	6960      	ldr	r0, [r4, #20]
 801370a:	1d1d      	adds	r5, r3, #4
 801370c:	600d      	str	r5, [r1, #0]
 801370e:	0635      	lsls	r5, r6, #24
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	d501      	bpl.n	8013718 <_printf_i+0x1cc>
 8013714:	6018      	str	r0, [r3, #0]
 8013716:	e002      	b.n	801371e <_printf_i+0x1d2>
 8013718:	0671      	lsls	r1, r6, #25
 801371a:	d5fb      	bpl.n	8013714 <_printf_i+0x1c8>
 801371c:	8018      	strh	r0, [r3, #0]
 801371e:	2300      	movs	r3, #0
 8013720:	6123      	str	r3, [r4, #16]
 8013722:	4616      	mov	r6, r2
 8013724:	e7ba      	b.n	801369c <_printf_i+0x150>
 8013726:	680b      	ldr	r3, [r1, #0]
 8013728:	1d1a      	adds	r2, r3, #4
 801372a:	600a      	str	r2, [r1, #0]
 801372c:	681e      	ldr	r6, [r3, #0]
 801372e:	6862      	ldr	r2, [r4, #4]
 8013730:	2100      	movs	r1, #0
 8013732:	4630      	mov	r0, r6
 8013734:	f7ec fd6c 	bl	8000210 <memchr>
 8013738:	b108      	cbz	r0, 801373e <_printf_i+0x1f2>
 801373a:	1b80      	subs	r0, r0, r6
 801373c:	6060      	str	r0, [r4, #4]
 801373e:	6863      	ldr	r3, [r4, #4]
 8013740:	6123      	str	r3, [r4, #16]
 8013742:	2300      	movs	r3, #0
 8013744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013748:	e7a8      	b.n	801369c <_printf_i+0x150>
 801374a:	6923      	ldr	r3, [r4, #16]
 801374c:	4632      	mov	r2, r6
 801374e:	4649      	mov	r1, r9
 8013750:	4640      	mov	r0, r8
 8013752:	47d0      	blx	sl
 8013754:	3001      	adds	r0, #1
 8013756:	d0ab      	beq.n	80136b0 <_printf_i+0x164>
 8013758:	6823      	ldr	r3, [r4, #0]
 801375a:	079b      	lsls	r3, r3, #30
 801375c:	d413      	bmi.n	8013786 <_printf_i+0x23a>
 801375e:	68e0      	ldr	r0, [r4, #12]
 8013760:	9b03      	ldr	r3, [sp, #12]
 8013762:	4298      	cmp	r0, r3
 8013764:	bfb8      	it	lt
 8013766:	4618      	movlt	r0, r3
 8013768:	e7a4      	b.n	80136b4 <_printf_i+0x168>
 801376a:	2301      	movs	r3, #1
 801376c:	4632      	mov	r2, r6
 801376e:	4649      	mov	r1, r9
 8013770:	4640      	mov	r0, r8
 8013772:	47d0      	blx	sl
 8013774:	3001      	adds	r0, #1
 8013776:	d09b      	beq.n	80136b0 <_printf_i+0x164>
 8013778:	3501      	adds	r5, #1
 801377a:	68e3      	ldr	r3, [r4, #12]
 801377c:	9903      	ldr	r1, [sp, #12]
 801377e:	1a5b      	subs	r3, r3, r1
 8013780:	42ab      	cmp	r3, r5
 8013782:	dcf2      	bgt.n	801376a <_printf_i+0x21e>
 8013784:	e7eb      	b.n	801375e <_printf_i+0x212>
 8013786:	2500      	movs	r5, #0
 8013788:	f104 0619 	add.w	r6, r4, #25
 801378c:	e7f5      	b.n	801377a <_printf_i+0x22e>
 801378e:	bf00      	nop
 8013790:	08015725 	.word	0x08015725
 8013794:	08015736 	.word	0x08015736

08013798 <_read_r>:
 8013798:	b538      	push	{r3, r4, r5, lr}
 801379a:	4d07      	ldr	r5, [pc, #28]	; (80137b8 <_read_r+0x20>)
 801379c:	4604      	mov	r4, r0
 801379e:	4608      	mov	r0, r1
 80137a0:	4611      	mov	r1, r2
 80137a2:	2200      	movs	r2, #0
 80137a4:	602a      	str	r2, [r5, #0]
 80137a6:	461a      	mov	r2, r3
 80137a8:	f7ef fae4 	bl	8002d74 <_read>
 80137ac:	1c43      	adds	r3, r0, #1
 80137ae:	d102      	bne.n	80137b6 <_read_r+0x1e>
 80137b0:	682b      	ldr	r3, [r5, #0]
 80137b2:	b103      	cbz	r3, 80137b6 <_read_r+0x1e>
 80137b4:	6023      	str	r3, [r4, #0]
 80137b6:	bd38      	pop	{r3, r4, r5, pc}
 80137b8:	200034d4 	.word	0x200034d4
 80137bc:	00000000 	.word	0x00000000

080137c0 <nan>:
 80137c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80137c8 <nan+0x8>
 80137c4:	4770      	bx	lr
 80137c6:	bf00      	nop
 80137c8:	00000000 	.word	0x00000000
 80137cc:	7ff80000 	.word	0x7ff80000

080137d0 <__ascii_wctomb>:
 80137d0:	b149      	cbz	r1, 80137e6 <__ascii_wctomb+0x16>
 80137d2:	2aff      	cmp	r2, #255	; 0xff
 80137d4:	bf85      	ittet	hi
 80137d6:	238a      	movhi	r3, #138	; 0x8a
 80137d8:	6003      	strhi	r3, [r0, #0]
 80137da:	700a      	strbls	r2, [r1, #0]
 80137dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80137e0:	bf98      	it	ls
 80137e2:	2001      	movls	r0, #1
 80137e4:	4770      	bx	lr
 80137e6:	4608      	mov	r0, r1
 80137e8:	4770      	bx	lr
	...

080137ec <__assert_func>:
 80137ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137ee:	4614      	mov	r4, r2
 80137f0:	461a      	mov	r2, r3
 80137f2:	4b09      	ldr	r3, [pc, #36]	; (8013818 <__assert_func+0x2c>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	4605      	mov	r5, r0
 80137f8:	68d8      	ldr	r0, [r3, #12]
 80137fa:	b14c      	cbz	r4, 8013810 <__assert_func+0x24>
 80137fc:	4b07      	ldr	r3, [pc, #28]	; (801381c <__assert_func+0x30>)
 80137fe:	9100      	str	r1, [sp, #0]
 8013800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013804:	4906      	ldr	r1, [pc, #24]	; (8013820 <__assert_func+0x34>)
 8013806:	462b      	mov	r3, r5
 8013808:	f000 f80e 	bl	8013828 <fiprintf>
 801380c:	f000 f862 	bl	80138d4 <abort>
 8013810:	4b04      	ldr	r3, [pc, #16]	; (8013824 <__assert_func+0x38>)
 8013812:	461c      	mov	r4, r3
 8013814:	e7f3      	b.n	80137fe <__assert_func+0x12>
 8013816:	bf00      	nop
 8013818:	20000160 	.word	0x20000160
 801381c:	08015747 	.word	0x08015747
 8013820:	08015754 	.word	0x08015754
 8013824:	08015782 	.word	0x08015782

08013828 <fiprintf>:
 8013828:	b40e      	push	{r1, r2, r3}
 801382a:	b503      	push	{r0, r1, lr}
 801382c:	4601      	mov	r1, r0
 801382e:	ab03      	add	r3, sp, #12
 8013830:	4805      	ldr	r0, [pc, #20]	; (8013848 <fiprintf+0x20>)
 8013832:	f853 2b04 	ldr.w	r2, [r3], #4
 8013836:	6800      	ldr	r0, [r0, #0]
 8013838:	9301      	str	r3, [sp, #4]
 801383a:	f7ff fce9 	bl	8013210 <_vfiprintf_r>
 801383e:	b002      	add	sp, #8
 8013840:	f85d eb04 	ldr.w	lr, [sp], #4
 8013844:	b003      	add	sp, #12
 8013846:	4770      	bx	lr
 8013848:	20000160 	.word	0x20000160

0801384c <_fstat_r>:
 801384c:	b538      	push	{r3, r4, r5, lr}
 801384e:	4d07      	ldr	r5, [pc, #28]	; (801386c <_fstat_r+0x20>)
 8013850:	2300      	movs	r3, #0
 8013852:	4604      	mov	r4, r0
 8013854:	4608      	mov	r0, r1
 8013856:	4611      	mov	r1, r2
 8013858:	602b      	str	r3, [r5, #0]
 801385a:	f7ef fad0 	bl	8002dfe <_fstat>
 801385e:	1c43      	adds	r3, r0, #1
 8013860:	d102      	bne.n	8013868 <_fstat_r+0x1c>
 8013862:	682b      	ldr	r3, [r5, #0]
 8013864:	b103      	cbz	r3, 8013868 <_fstat_r+0x1c>
 8013866:	6023      	str	r3, [r4, #0]
 8013868:	bd38      	pop	{r3, r4, r5, pc}
 801386a:	bf00      	nop
 801386c:	200034d4 	.word	0x200034d4

08013870 <_isatty_r>:
 8013870:	b538      	push	{r3, r4, r5, lr}
 8013872:	4d06      	ldr	r5, [pc, #24]	; (801388c <_isatty_r+0x1c>)
 8013874:	2300      	movs	r3, #0
 8013876:	4604      	mov	r4, r0
 8013878:	4608      	mov	r0, r1
 801387a:	602b      	str	r3, [r5, #0]
 801387c:	f7ef facf 	bl	8002e1e <_isatty>
 8013880:	1c43      	adds	r3, r0, #1
 8013882:	d102      	bne.n	801388a <_isatty_r+0x1a>
 8013884:	682b      	ldr	r3, [r5, #0]
 8013886:	b103      	cbz	r3, 801388a <_isatty_r+0x1a>
 8013888:	6023      	str	r3, [r4, #0]
 801388a:	bd38      	pop	{r3, r4, r5, pc}
 801388c:	200034d4 	.word	0x200034d4

08013890 <memmove>:
 8013890:	4288      	cmp	r0, r1
 8013892:	b510      	push	{r4, lr}
 8013894:	eb01 0402 	add.w	r4, r1, r2
 8013898:	d902      	bls.n	80138a0 <memmove+0x10>
 801389a:	4284      	cmp	r4, r0
 801389c:	4623      	mov	r3, r4
 801389e:	d807      	bhi.n	80138b0 <memmove+0x20>
 80138a0:	1e43      	subs	r3, r0, #1
 80138a2:	42a1      	cmp	r1, r4
 80138a4:	d008      	beq.n	80138b8 <memmove+0x28>
 80138a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80138aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80138ae:	e7f8      	b.n	80138a2 <memmove+0x12>
 80138b0:	4402      	add	r2, r0
 80138b2:	4601      	mov	r1, r0
 80138b4:	428a      	cmp	r2, r1
 80138b6:	d100      	bne.n	80138ba <memmove+0x2a>
 80138b8:	bd10      	pop	{r4, pc}
 80138ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80138be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80138c2:	e7f7      	b.n	80138b4 <memmove+0x24>

080138c4 <_malloc_usable_size_r>:
 80138c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138c8:	1f18      	subs	r0, r3, #4
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	bfbc      	itt	lt
 80138ce:	580b      	ldrlt	r3, [r1, r0]
 80138d0:	18c0      	addlt	r0, r0, r3
 80138d2:	4770      	bx	lr

080138d4 <abort>:
 80138d4:	b508      	push	{r3, lr}
 80138d6:	2006      	movs	r0, #6
 80138d8:	f000 f82c 	bl	8013934 <raise>
 80138dc:	2001      	movs	r0, #1
 80138de:	f7ef fa3f 	bl	8002d60 <_exit>

080138e2 <_raise_r>:
 80138e2:	291f      	cmp	r1, #31
 80138e4:	b538      	push	{r3, r4, r5, lr}
 80138e6:	4604      	mov	r4, r0
 80138e8:	460d      	mov	r5, r1
 80138ea:	d904      	bls.n	80138f6 <_raise_r+0x14>
 80138ec:	2316      	movs	r3, #22
 80138ee:	6003      	str	r3, [r0, #0]
 80138f0:	f04f 30ff 	mov.w	r0, #4294967295
 80138f4:	bd38      	pop	{r3, r4, r5, pc}
 80138f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80138f8:	b112      	cbz	r2, 8013900 <_raise_r+0x1e>
 80138fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80138fe:	b94b      	cbnz	r3, 8013914 <_raise_r+0x32>
 8013900:	4620      	mov	r0, r4
 8013902:	f000 f831 	bl	8013968 <_getpid_r>
 8013906:	462a      	mov	r2, r5
 8013908:	4601      	mov	r1, r0
 801390a:	4620      	mov	r0, r4
 801390c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013910:	f000 b818 	b.w	8013944 <_kill_r>
 8013914:	2b01      	cmp	r3, #1
 8013916:	d00a      	beq.n	801392e <_raise_r+0x4c>
 8013918:	1c59      	adds	r1, r3, #1
 801391a:	d103      	bne.n	8013924 <_raise_r+0x42>
 801391c:	2316      	movs	r3, #22
 801391e:	6003      	str	r3, [r0, #0]
 8013920:	2001      	movs	r0, #1
 8013922:	e7e7      	b.n	80138f4 <_raise_r+0x12>
 8013924:	2400      	movs	r4, #0
 8013926:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801392a:	4628      	mov	r0, r5
 801392c:	4798      	blx	r3
 801392e:	2000      	movs	r0, #0
 8013930:	e7e0      	b.n	80138f4 <_raise_r+0x12>
	...

08013934 <raise>:
 8013934:	4b02      	ldr	r3, [pc, #8]	; (8013940 <raise+0xc>)
 8013936:	4601      	mov	r1, r0
 8013938:	6818      	ldr	r0, [r3, #0]
 801393a:	f7ff bfd2 	b.w	80138e2 <_raise_r>
 801393e:	bf00      	nop
 8013940:	20000160 	.word	0x20000160

08013944 <_kill_r>:
 8013944:	b538      	push	{r3, r4, r5, lr}
 8013946:	4d07      	ldr	r5, [pc, #28]	; (8013964 <_kill_r+0x20>)
 8013948:	2300      	movs	r3, #0
 801394a:	4604      	mov	r4, r0
 801394c:	4608      	mov	r0, r1
 801394e:	4611      	mov	r1, r2
 8013950:	602b      	str	r3, [r5, #0]
 8013952:	f7ef f9f5 	bl	8002d40 <_kill>
 8013956:	1c43      	adds	r3, r0, #1
 8013958:	d102      	bne.n	8013960 <_kill_r+0x1c>
 801395a:	682b      	ldr	r3, [r5, #0]
 801395c:	b103      	cbz	r3, 8013960 <_kill_r+0x1c>
 801395e:	6023      	str	r3, [r4, #0]
 8013960:	bd38      	pop	{r3, r4, r5, pc}
 8013962:	bf00      	nop
 8013964:	200034d4 	.word	0x200034d4

08013968 <_getpid_r>:
 8013968:	f7ef b9e2 	b.w	8002d30 <_getpid>

0801396c <_init>:
 801396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801396e:	bf00      	nop
 8013970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013972:	bc08      	pop	{r3}
 8013974:	469e      	mov	lr, r3
 8013976:	4770      	bx	lr

08013978 <_fini>:
 8013978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801397a:	bf00      	nop
 801397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801397e:	bc08      	pop	{r3}
 8013980:	469e      	mov	lr, r3
 8013982:	4770      	bx	lr
